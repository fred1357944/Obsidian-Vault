/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultPicker
});
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mobile: false,
  desktop: false
};
var VaultPicker = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
  }
  async onload() {
    this.settings = { ...DEFAULT_SETTINGS, ...await this.loadData() };
    this.addSettingTab(new VaultPickerSettings(this));
    this.app.workspace.onLayoutReady(async () => {
      this.tryToReset();
    });
  }
  tryToReset() {
    try {
      if (import_obsidian.Platform.isMobile) {
        if (this.settings.mobile)
          localStorage.removeItem("mobile-selected-vault");
      } else if (this.settings.desktop) {
        const fs = require("fs");
        const path = require("path");
        const { remote } = require("electron");
        const { app } = remote;
        const data = fs.readFileSync(path.join(app.getPath("userData"), "obsidian.json"), { encoding: "utf8" });
        const parsed = JSON.parse(data ?? {});
        if (!parsed || !parsed.vaults)
          return;
        if (parsed?.vaults) {
          for (const vault in parsed.vaults) {
            if (parsed.vaults[vault].path == this.app.vault.adapter.getBasePath()) {
              delete parsed.vaults[vault].open;
            }
          }
        }
        fs.writeFileSync(path.join(app.getPath("userData"), "obsidian.json"), JSON.stringify(parsed));
      }
    } catch (e) {
      console.error(e);
      new import_obsidian.Notice("Vault Picker: There was an issue removing this vault from the stored open vaults.");
    }
  }
  onunload() {
  }
};
var VaultPickerSettings = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h3", { text: "Vault Picker" });
    this.containerEl.createSpan({
      cls: "setting-item",
      text: "Turning these settings on is effective immediately - the next time Obsidian opens, the vault picker will be shown. Turning them off, however, will still show the vault picker on the next restart."
    });
    new import_obsidian.Setting(this.containerEl).setName("Desktop").setDesc("Vault picker will always open on desktop.").addToggle((t) => t.setValue(this.plugin.settings.desktop).onChange(async (v) => {
      this.plugin.settings.desktop = v;
      await this.plugin.saveData(this.plugin.settings);
      if (!import_obsidian.Platform.isMobile)
        this.plugin.tryToReset();
    }));
    new import_obsidian.Setting(this.containerEl).setName("Mobile").setDesc("Vault picker will always open on mobile.").addToggle((t) => t.setValue(this.plugin.settings.mobile).onChange(async (v) => {
      this.plugin.settings.mobile = v;
      await this.plugin.saveData(this.plugin.settings);
      if (import_obsidian.Platform.isMobile)
        this.plugin.tryToReset();
    }));
  }
};
module.exports = __toCommonJS(main_exports);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vR2l0SHViL1BlcnNvbmFsL3ZhdWx0LXBpY2tlci9zcmMvbWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IFwiLi9tYWluLmNzc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIEZpbGVTeXN0ZW1BZGFwdGVyLFxyXG4gICAgTm90aWNlLFxyXG4gICAgUGxhdGZvcm0sXHJcbiAgICBQbHVnaW4sXHJcbiAgICBQbHVnaW5TZXR0aW5nVGFiLFxyXG4gICAgU2V0dGluZ1xyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBQbHVnaW5TZXR0aW5ncyB9IGZyb20gXCIuL0B0eXBlc1wiO1xyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUGx1Z2luU2V0dGluZ3MgPSB7XHJcbiAgICBtb2JpbGU6IGZhbHNlLFxyXG4gICAgZGVza3RvcDogZmFsc2VcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhdWx0UGlja2VyIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncztcclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0geyAuLi5ERUZBVUxUX1NFVFRJTkdTLCAuLi4oYXdhaXQgdGhpcy5sb2FkRGF0YSgpKSB9O1xyXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgVmF1bHRQaWNrZXJTZXR0aW5ncyh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRyeVRvUmVzZXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRyeVRvUmVzZXQoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKFBsYXRmb3JtLmlzTW9iaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2JpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJtb2JpbGUtc2VsZWN0ZWQtdmF1bHRcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5kZXNrdG9wKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVtb3RlIH0gPSByZXF1aXJlKFwiZWxlY3Ryb25cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFwcCB9ID0gcmVtb3RlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5qb2luKGFwcC5nZXRQYXRoKFwidXNlckRhdGFcIiksIFwib2JzaWRpYW4uanNvblwiKSxcclxuICAgICAgICAgICAgICAgICAgICB7IGVuY29kaW5nOiBcInV0ZjhcIiB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoZGF0YSA/PyB7fSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZCB8fCAhcGFyc2VkLnZhdWx0cykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQ/LnZhdWx0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmF1bHQgaW4gcGFyc2VkLnZhdWx0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQudmF1bHRzW3ZhdWx0XS5wYXRoID09XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBGaWxlU3lzdGVtQWRhcHRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5nZXRCYXNlUGF0aCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcnNlZC52YXVsdHNbdmF1bHRdLm9wZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGguam9pbihhcHAuZ2V0UGF0aChcInVzZXJEYXRhXCIpLCBcIm9ic2lkaWFuLmpzb25cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocGFyc2VkKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShcclxuICAgICAgICAgICAgICAgIFwiVmF1bHQgUGlja2VyOiBUaGVyZSB3YXMgYW4gaXNzdWUgcmVtb3ZpbmcgdGhpcyB2YXVsdCBmcm9tIHRoZSBzdG9yZWQgb3BlbiB2YXVsdHMuXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbnVubG9hZCgpIHt9XHJcbn1cclxuXHJcbmNsYXNzIFZhdWx0UGlja2VyU2V0dGluZ3MgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwbHVnaW46IFZhdWx0UGlja2VyKSB7XHJcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgcGx1Z2luKTtcclxuICAgIH1cclxuICAgIGRpc3BsYXkoKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiVmF1bHQgUGlja2VyXCIgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlU3Bhbih7XHJcbiAgICAgICAgICAgIGNsczogXCJzZXR0aW5nLWl0ZW1cIixcclxuICAgICAgICAgICAgdGV4dDogXCJUdXJuaW5nIHRoZXNlIHNldHRpbmdzIG9uIGlzIGVmZmVjdGl2ZSBpbW1lZGlhdGVseSAtIHRoZSBuZXh0IHRpbWUgT2JzaWRpYW4gb3BlbnMsIHRoZSB2YXVsdCBwaWNrZXIgd2lsbCBiZSBzaG93bi4gVHVybmluZyB0aGVtIG9mZiwgaG93ZXZlciwgd2lsbCBzdGlsbCBzaG93IHRoZSB2YXVsdCBwaWNrZXIgb24gdGhlIG5leHQgcmVzdGFydC5cIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkRlc2t0b3BcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJWYXVsdCBwaWNrZXIgd2lsbCBhbHdheXMgb3BlbiBvbiBkZXNrdG9wLlwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxyXG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXNrdG9wKS5vbkNoYW5nZShhc3luYyAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlc2t0b3AgPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVEYXRhKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIVBsYXRmb3JtLmlzTW9iaWxlKSB0aGlzLnBsdWdpbi50cnlUb1Jlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTW9iaWxlXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiVmF1bHQgcGlja2VyIHdpbGwgYWx3YXlzIG9wZW4gb24gbW9iaWxlLlwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxyXG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2JpbGUpLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9iaWxlID0gdjtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFBsYXRmb3JtLmlzTW9iaWxlKSB0aGlzLnBsdWdpbi50cnlUb1Jlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBLHNCQU9PO0FBR1AsSUFBTSxtQkFBbUM7QUFBQSxFQUNyQyxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUE7QUFHYixnQ0FBeUMsdUJBQU87QUFBQSxFQUFoRCxjQWpCQTtBQWlCQTtBQUNJO0FBQUE7QUFBQSxRQUNNLFNBQVM7QUFDWCxTQUFLLFdBQVcsS0FBSyxxQkFBc0IsTUFBTSxLQUFLO0FBQ3RELFNBQUssY0FBYyxJQUFJLG9CQUFvQjtBQUMzQyxTQUFLLElBQUksVUFBVSxjQUFjLFlBQVk7QUFDekMsV0FBSztBQUFBO0FBQUE7QUFBQSxFQUdiLGFBQWE7QUFDVCxRQUFJO0FBQ0EsVUFBSSx5QkFBUyxVQUFVO0FBQ25CLFlBQUksS0FBSyxTQUFTO0FBQ2QsdUJBQWEsV0FBVztBQUFBLGlCQUNyQixLQUFLLFNBQVMsU0FBUztBQUM5QixjQUFNLEtBQUssUUFBUTtBQUNuQixjQUFNLE9BQU8sUUFBUTtBQUNyQixjQUFNLEVBQUUsV0FBVyxRQUFRO0FBQzNCLGNBQU0sRUFBRSxRQUFRO0FBRWhCLGNBQU0sT0FBTyxHQUFHLGFBQ1osS0FBSyxLQUFLLElBQUksUUFBUSxhQUFhLGtCQUNuQyxFQUFFLFVBQVU7QUFHaEIsY0FBTSxTQUFTLEtBQUssTUFBTSxRQUFRO0FBQ2xDLFlBQUksQ0FBQyxVQUFVLENBQUMsT0FBTztBQUFRO0FBRS9CLFlBQUksUUFBUSxRQUFRO0FBQ2hCLHFCQUFXLFNBQVMsT0FBTyxRQUFRO0FBQy9CLGdCQUNJLE9BQU8sT0FBTyxPQUFPLFFBRWpCLEtBQUssSUFBSSxNQUFNLFFBQ2pCLGVBQ0o7QUFDRSxxQkFBTyxPQUFPLE9BQU8sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUl4QyxXQUFHLGNBQ0MsS0FBSyxLQUFLLElBQUksUUFBUSxhQUFhLGtCQUNuQyxLQUFLLFVBQVU7QUFBQTtBQUFBLGFBR2xCLEdBQVA7QUFDRSxjQUFRLE1BQU07QUFDZCxVQUFJLHVCQUNBO0FBQUE7QUFBQTtBQUFBLEVBSVosV0FBVztBQUFBO0FBQUE7QUFHZix3Q0FBa0MsaUNBQWlCO0FBQUEsRUFDL0MsWUFBbUIsUUFBcUI7QUFDcEMsVUFBTSxPQUFPLEtBQUs7QUFESDtBQUFBO0FBQUEsRUFHbkIsVUFBVTtBQUNOLFNBQUssWUFBWTtBQUNqQixTQUFLLFlBQVksU0FBUyxNQUFNLEVBQUUsTUFBTTtBQUV4QyxTQUFLLFlBQVksV0FBVztBQUFBLE1BQ3hCLEtBQUs7QUFBQSxNQUNMLE1BQU07QUFBQTtBQUdWLFFBQUksd0JBQVEsS0FBSyxhQUNaLFFBQVEsV0FDUixRQUFRLDZDQUNSLFVBQVUsQ0FBQyxNQUNSLEVBQUUsU0FBUyxLQUFLLE9BQU8sU0FBUyxTQUFTLFNBQVMsT0FBTyxNQUFNO0FBQzNELFdBQUssT0FBTyxTQUFTLFVBQVU7QUFDL0IsWUFBTSxLQUFLLE9BQU8sU0FBUyxLQUFLLE9BQU87QUFDdkMsVUFBSSxDQUFDLHlCQUFTO0FBQVUsYUFBSyxPQUFPO0FBQUE7QUFHaEQsUUFBSSx3QkFBUSxLQUFLLGFBQ1osUUFBUSxVQUNSLFFBQVEsNENBQ1IsVUFBVSxDQUFDLE1BQ1IsRUFBRSxTQUFTLEtBQUssT0FBTyxTQUFTLFFBQVEsU0FBUyxPQUFPLE1BQU07QUFDMUQsV0FBSyxPQUFPLFNBQVMsU0FBUztBQUM5QixZQUFNLEtBQUssT0FBTyxTQUFTLEtBQUssT0FBTztBQUN2QyxVQUFJLHlCQUFTO0FBQVUsYUFBSyxPQUFPO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
