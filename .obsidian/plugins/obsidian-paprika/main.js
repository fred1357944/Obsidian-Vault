/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PaprikaPlugin
});
var import_obsidian2 = require("obsidian");

// src/api/index.ts
var import_obsidian = require("obsidian");
var API = class {
  async login(email, password) {
    const myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/x-www-form-urlencoded");
    const urlencoded = new URLSearchParams();
    urlencoded.append("email", email);
    urlencoded.append("password", password);
    const requestOptions = {
      url: "https://www.paprikaapp.com/api/v2/account/login/",
      method: "POST",
      contentType: "application/x-www-form-urlencoded",
      body: urlencoded.toString()
    };
    console.log("\u{1F680} ~ file: index.ts ~ line 44 ~ requestOptions", requestOptions);
    const result = JSON.parse(await (0, import_obsidian.request)(requestOptions));
    console.log("\u{1F680} ~ file: index.ts ~ line 41 ~ result", result);
    if ("error" in result)
      throw new Error(result.error.message);
    else {
      this.token = result.result.token;
    }
  }
  async getRecipes() {
    const requestOptions = {
      url: `https://www.paprikaapp.com/api/v2/sync/recipes`,
      method: "GET",
      headers: { Authorization: `Bearer ${this.token}` }
    };
    console.log("\u{1F680} ~ file: index.ts ~ line 52 ~ Authorization: `Bearer ${this.token}`", `Bearer ${this.token}`);
    console.log(await (0, import_obsidian.request)(requestOptions));
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var PaprikaPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.api = new API();
  }
  async onload() {
    console.log("loading plugin");
    await this.loadSettings();
    this.addSettingTab(new PaprikaSettings(this));
    this.addStatusBarItem().setText("Paprika");
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LoginModal = class extends import_obsidian2.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  open() {
    super.open();
    return this;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.empty();
    new import_obsidian2.Setting(contentEl).setHeading().setName("Login").setDesc("Use the email and password you use for Paprika sync.");
    let pw;
    let eml;
    new import_obsidian2.Setting(contentEl).setName("Email").addText((t) => {
      eml = t;
      eml.setPlaceholder("janedoe@example.com");
    });
    new import_obsidian2.Setting(contentEl).setName("Password").setDesc("Please note that the password is not securely stored.").addText((t) => {
      pw = t;
      pw.setPlaceholder("Password");
    });
    new import_obsidian2.Setting(contentEl).addButton((b) => {
      b.setButtonText("Login").onClick(async () => {
        if (!eml.inputEl.value || !pw.inputEl.value) {
          new import_obsidian2.Notice("Enter an email and password first.");
          return;
        }
        const email = eml.inputEl.value;
        const password = pw.inputEl.value;
        try {
          this.plugin.api.login(email, password);
        } catch (e) {
          new import_obsidian2.Notice("There was an issue logging in.");
          console.error(e);
        }
      });
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var PaprikaSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Paprika" });
    new import_obsidian2.Setting(containerEl).setName("Login to Paprika").addButton((b) => {
      b.setButtonText("Login").setTooltip("Login to Paprika").onClick(() => {
        const modal = new LoginModal(this.plugin).open();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Get Recipes").addButton((b) => b.onClick(() => {
      this.plugin.api.getRecipes();
    }));
  }
};
module.exports = __toCommonJS(main_exports);
//# sourceMappingURL=data:application/json;base64,
