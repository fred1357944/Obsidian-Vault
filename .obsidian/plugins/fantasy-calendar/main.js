/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/fast-copy/dist/fast-copy.js
var require_fast_copy = __commonJS({
  "node_modules/fast-copy/dist/fast-copy.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2["fast-copy"] = factory());
    })(exports, function() {
      "use strict";
      var toStringFunction = Function.prototype.toString;
      var create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf = Object.getPrototypeOf;
      var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
      var SUPPORTS = {
        SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === "function",
        WEAKMAP: typeof WeakMap === "function"
      };
      var createCache = function() {
        if (SUPPORTS.WEAKMAP) {
          return new WeakMap();
        }
        var object = create({
          has: function(key) {
            return !!~object._keys.indexOf(key);
          },
          set: function(key, value) {
            object._keys.push(key);
            object._values.push(value);
          },
          get: function(key) {
            return object._values[object._keys.indexOf(key)];
          }
        });
        object._keys = [];
        object._values = [];
        return object;
      };
      var getCleanClone = function(object, realm) {
        if (!object.constructor) {
          return create(null);
        }
        var Constructor = object.constructor;
        var prototype = object.__proto__ || getPrototypeOf(object);
        if (Constructor === realm.Object) {
          return prototype === realm.Object.prototype ? {} : create(prototype);
        }
        if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
          try {
            return new Constructor();
          } catch (_a2) {
          }
        }
        return create(prototype);
      };
      var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            clone[key] = handleCopy(object[key], cache);
          }
        }
        if (SUPPORTS.SYMBOL_PROPERTIES) {
          var symbols = getOwnPropertySymbols(object);
          var length_1 = symbols.length;
          if (length_1) {
            for (var index = 0, symbol = void 0; index < length_1; index++) {
              symbol = symbols[index];
              if (propertyIsEnumerable.call(object, symbol)) {
                clone[symbol] = handleCopy(object[symbol], cache);
              }
            }
          }
        }
        return clone;
      };
      var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        var properties = SUPPORTS.SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
        var length = properties.length;
        if (length) {
          for (var index = 0, property = void 0, descriptor = void 0; index < length; index++) {
            property = properties[index];
            if (property !== "callee" && property !== "caller") {
              descriptor = getOwnPropertyDescriptor(object, property);
              if (descriptor) {
                if (!descriptor.get && !descriptor.set) {
                  descriptor.value = handleCopy(object[property], cache);
                }
                try {
                  defineProperty(clone, property, descriptor);
                } catch (error) {
                  clone[property] = descriptor.value;
                }
              } else {
                clone[property] = handleCopy(object[property], cache);
              }
            }
          }
        }
        return clone;
      };
      var getRegExpFlags = function(regExp) {
        var flags = "";
        if (regExp.global) {
          flags += "g";
        }
        if (regExp.ignoreCase) {
          flags += "i";
        }
        if (regExp.multiline) {
          flags += "m";
        }
        if (regExp.unicode) {
          flags += "u";
        }
        if (regExp.sticky) {
          flags += "y";
        }
        return flags;
      };
      var isArray = Array.isArray;
      var GLOBAL_THIS = function() {
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        if (console && console.error) {
          console.error('Unable to locate global object, returning "this".');
        }
      }();
      function copy4(object, options) {
        var isStrict = !!(options && options.isStrict);
        var realm = options && options.realm || GLOBAL_THIS;
        var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
        var handleCopy = function(object2, cache) {
          if (!object2 || typeof object2 !== "object") {
            return object2;
          }
          if (cache.has(object2)) {
            return cache.get(object2);
          }
          var Constructor = object2.constructor;
          if (Constructor === realm.Object) {
            return getObjectClone(object2, realm, handleCopy, cache);
          }
          var clone;
          if (isArray(object2)) {
            if (isStrict) {
              return getObjectCloneStrict(object2, realm, handleCopy, cache);
            }
            var length_1 = object2.length;
            clone = new Constructor();
            cache.set(object2, clone);
            for (var index = 0; index < length_1; index++) {
              clone[index] = handleCopy(object2[index], cache);
            }
            return clone;
          }
          if (object2 instanceof realm.Date) {
            return new Constructor(object2.getTime());
          }
          if (object2 instanceof realm.RegExp) {
            clone = new Constructor(object2.source, object2.flags || getRegExpFlags(object2));
            clone.lastIndex = object2.lastIndex;
            return clone;
          }
          if (realm.Map && object2 instanceof realm.Map) {
            clone = new Constructor();
            cache.set(object2, clone);
            object2.forEach(function(value, key) {
              clone.set(key, handleCopy(value, cache));
            });
            return clone;
          }
          if (realm.Set && object2 instanceof realm.Set) {
            clone = new Constructor();
            cache.set(object2, clone);
            object2.forEach(function(value) {
              clone.add(handleCopy(value, cache));
            });
            return clone;
          }
          if (realm.Blob && object2 instanceof realm.Blob) {
            return object2.slice(0, object2.size, object2.type);
          }
          if (realm.Buffer && realm.Buffer.isBuffer(object2)) {
            clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(object2.length) : new Constructor(object2.length);
            cache.set(object2, clone);
            object2.copy(clone);
            return clone;
          }
          if (realm.ArrayBuffer) {
            if (realm.ArrayBuffer.isView(object2)) {
              clone = new Constructor(object2.buffer.slice(0));
              cache.set(object2, clone);
              return clone;
            }
            if (object2 instanceof realm.ArrayBuffer) {
              clone = object2.slice(0);
              cache.set(object2, clone);
              return clone;
            }
          }
          if (typeof object2.then === "function" || object2 instanceof Error || realm.WeakMap && object2 instanceof realm.WeakMap || realm.WeakSet && object2 instanceof realm.WeakSet) {
            return object2;
          }
          return getObjectClone(object2, realm, handleCopy, cache);
        };
        return handleCopy(object, createCache());
      }
      copy4.default = copy4;
      copy4.strict = function strictCopy(object, options) {
        return copy4(object, {
          isStrict: true,
          realm: options ? options.realm : void 0
        });
      };
      return copy4;
    });
  }
});

// node_modules/distinct-colors/lib/utils.js
var require_utils = __commonJS({
  "node_modules/distinct-colors/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var utils = {
      sum: function sum(array) {
        return array.reduce(function(a, b) {
          return a + b;
        });
      }
    };
    var _default = utils;
    exports["default"] = _default;
  }
});

// node_modules/mout/lang/kindOf.js
var require_kindOf = __commonJS({
  "node_modules/mout/lang/kindOf.js"(exports, module2) {
    function kindOf(val) {
      return Object.prototype.toString.call(val).slice(8, -1);
    }
    module2.exports = kindOf;
  }
});

// node_modules/mout/lang/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/mout/lang/isPlainObject.js"(exports, module2) {
    function isPlainObject(value) {
      return !!value && typeof value === "object" && value.constructor === Object;
    }
    module2.exports = isPlainObject;
  }
});

// node_modules/mout/object/hasOwn.js
var require_hasOwn = __commonJS({
  "node_modules/mout/object/hasOwn.js"(exports, module2) {
    function hasOwn(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module2.exports = hasOwn;
  }
});

// node_modules/mout/object/forIn.js
var require_forIn = __commonJS({
  "node_modules/mout/object/forIn.js"(exports, module2) {
    var hasOwn = require_hasOwn();
    var _hasDontEnumBug;
    var _dontEnums;
    function checkDontEnum() {
      _dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      _hasDontEnumBug = true;
      for (var key in { "toString": null }) {
        _hasDontEnumBug = false;
      }
    }
    function forIn(obj, fn2, thisObj) {
      var key, i = 0;
      if (_hasDontEnumBug == null)
        checkDontEnum();
      for (key in obj) {
        if (exec(fn2, obj, key, thisObj) === false) {
          break;
        }
      }
      if (_hasDontEnumBug) {
        var ctor = obj.constructor, isProto = !!ctor && obj === ctor.prototype;
        while (key = _dontEnums[i++]) {
          if ((key !== "constructor" || !isProto && hasOwn(obj, key)) && obj[key] !== Object.prototype[key]) {
            if (exec(fn2, obj, key, thisObj) === false) {
              break;
            }
          }
        }
      }
    }
    function exec(fn2, obj, key, thisObj) {
      return fn2.call(thisObj, obj[key], key, obj);
    }
    module2.exports = forIn;
  }
});

// node_modules/mout/object/forOwn.js
var require_forOwn = __commonJS({
  "node_modules/mout/object/forOwn.js"(exports, module2) {
    var hasOwn = require_hasOwn();
    var forIn = require_forIn();
    function forOwn(obj, fn2, thisObj) {
      forIn(obj, function(val, key) {
        if (hasOwn(obj, key)) {
          return fn2.call(thisObj, obj[key], key, obj);
        }
      });
    }
    module2.exports = forOwn;
  }
});

// node_modules/mout/object/mixIn.js
var require_mixIn = __commonJS({
  "node_modules/mout/object/mixIn.js"(exports, module2) {
    var forOwn = require_forOwn();
    function mixIn(target, objects) {
      var i = 0, n = arguments.length, obj;
      while (++i < n) {
        obj = arguments[i];
        if (obj != null) {
          forOwn(obj, copyProp, target);
        }
      }
      return target;
    }
    function copyProp(val, key) {
      this[key] = val;
    }
    module2.exports = mixIn;
  }
});

// node_modules/mout/lang/clone.js
var require_clone = __commonJS({
  "node_modules/mout/lang/clone.js"(exports, module2) {
    var kindOf = require_kindOf();
    var isPlainObject = require_isPlainObject();
    var mixIn = require_mixIn();
    function clone(val) {
      switch (kindOf(val)) {
        case "Object":
          return cloneObject(val);
        case "Array":
          return cloneArray(val);
        case "RegExp":
          return cloneRegExp(val);
        case "Date":
          return cloneDate(val);
        default:
          return val;
      }
    }
    function cloneObject(source) {
      if (isPlainObject(source)) {
        return mixIn({}, source);
      } else {
        return source;
      }
    }
    function cloneRegExp(r) {
      var flags = "";
      flags += r.multiline ? "m" : "";
      flags += r.global ? "g" : "";
      flags += r.ignoreCase ? "i" : "";
      return new RegExp(r.source, flags);
    }
    function cloneDate(date) {
      return new Date(+date);
    }
    function cloneArray(arr) {
      return arr.slice();
    }
    module2.exports = clone;
  }
});

// node_modules/mout/lang/deepClone.js
var require_deepClone = __commonJS({
  "node_modules/mout/lang/deepClone.js"(exports, module2) {
    var clone = require_clone();
    var forOwn = require_forOwn();
    var kindOf = require_kindOf();
    var isPlainObject = require_isPlainObject();
    function deepClone(val, instanceClone) {
      switch (kindOf(val)) {
        case "Object":
          return cloneObject(val, instanceClone);
        case "Array":
          return cloneArray(val, instanceClone);
        default:
          return clone(val);
      }
    }
    function cloneObject(source, instanceClone) {
      if (isPlainObject(source)) {
        var out = {};
        forOwn(source, function(val, key) {
          this[key] = deepClone(val, instanceClone);
        }, out);
        return out;
      } else if (instanceClone) {
        return instanceClone(source);
      } else {
        return source;
      }
    }
    function cloneArray(arr, instanceClone) {
      var out = [], i = -1, n = arr.length, val;
      while (++i < n) {
        out[i] = deepClone(arr[i], instanceClone);
      }
      return out;
    }
    module2.exports = deepClone;
  }
});

// node_modules/mout/lang/is.js
var require_is = __commonJS({
  "node_modules/mout/lang/is.js"(exports, module2) {
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      }
      return x !== x && y !== y;
    }
    module2.exports = is;
  }
});

// node_modules/mout/lang/isKind.js
var require_isKind = __commonJS({
  "node_modules/mout/lang/isKind.js"(exports, module2) {
    var kindOf = require_kindOf();
    function isKind(val, kind) {
      return kindOf(val) === kind;
    }
    module2.exports = isKind;
  }
});

// node_modules/mout/lang/isObject.js
var require_isObject = __commonJS({
  "node_modules/mout/lang/isObject.js"(exports, module2) {
    var isKind = require_isKind();
    function isObject(val) {
      return isKind(val, "Object");
    }
    module2.exports = isObject;
  }
});

// node_modules/mout/lang/isArray.js
var require_isArray = __commonJS({
  "node_modules/mout/lang/isArray.js"(exports, module2) {
    var isKind = require_isKind();
    var isArray = Array.isArray || function(val) {
      return isKind(val, "Array");
    };
    module2.exports = isArray;
  }
});

// node_modules/mout/function/identity.js
var require_identity = __commonJS({
  "node_modules/mout/function/identity.js"(exports, module2) {
    function identity2(val) {
      return val;
    }
    module2.exports = identity2;
  }
});

// node_modules/mout/function/prop.js
var require_prop = __commonJS({
  "node_modules/mout/function/prop.js"(exports, module2) {
    function prop(name) {
      return function(obj) {
        return obj[name];
      };
    }
    module2.exports = prop;
  }
});

// node_modules/mout/object/deepMatches.js
var require_deepMatches = __commonJS({
  "node_modules/mout/object/deepMatches.js"(exports, module2) {
    var forOwn = require_forOwn();
    var isArray = require_isArray();
    function containsMatch(array, pattern) {
      var i = -1, length = array.length;
      while (++i < length) {
        if (deepMatches(array[i], pattern)) {
          return true;
        }
      }
      return false;
    }
    function matchArray(target, pattern) {
      var i = -1, patternLength = pattern.length;
      while (++i < patternLength) {
        if (!containsMatch(target, pattern[i])) {
          return false;
        }
      }
      return true;
    }
    function matchObject(target, pattern) {
      var result = true;
      forOwn(pattern, function(val, key) {
        if (!deepMatches(target[key], val)) {
          return result = false;
        }
      });
      return result;
    }
    function deepMatches(target, pattern) {
      if (target && typeof target === "object" && pattern && typeof pattern === "object") {
        if (isArray(target) && isArray(pattern)) {
          return matchArray(target, pattern);
        } else {
          return matchObject(target, pattern);
        }
      } else {
        return target === pattern;
      }
    }
    module2.exports = deepMatches;
  }
});

// node_modules/mout/function/makeIterator_.js
var require_makeIterator = __commonJS({
  "node_modules/mout/function/makeIterator_.js"(exports, module2) {
    var identity2 = require_identity();
    var prop = require_prop();
    var deepMatches = require_deepMatches();
    function makeIterator(src, thisObj) {
      if (src == null) {
        return identity2;
      }
      switch (typeof src) {
        case "function":
          return typeof thisObj !== "undefined" ? function(val, i, arr) {
            return src.call(thisObj, val, i, arr);
          } : src;
        case "object":
          return function(val) {
            return deepMatches(val, src);
          };
        case "string":
        case "number":
          return prop(src);
      }
    }
    module2.exports = makeIterator;
  }
});

// node_modules/mout/object/every.js
var require_every = __commonJS({
  "node_modules/mout/object/every.js"(exports, module2) {
    var forOwn = require_forOwn();
    var makeIterator = require_makeIterator();
    function every(obj, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var result = true;
      forOwn(obj, function(val, key) {
        if (!callback(val, key, obj)) {
          result = false;
          return false;
        }
      });
      return result;
    }
    module2.exports = every;
  }
});

// node_modules/mout/object/equals.js
var require_equals = __commonJS({
  "node_modules/mout/object/equals.js"(exports, module2) {
    var hasOwn = require_hasOwn();
    var every = require_every();
    var isObject = require_isObject();
    var is = require_is();
    function makeCompare(callback) {
      return function(value, key) {
        return hasOwn(this, key) && callback(value, this[key]);
      };
    }
    function checkProperties(value, key) {
      return hasOwn(this, key);
    }
    function equals(a, b, callback) {
      callback = callback || is;
      if (!isObject(a) || !isObject(b)) {
        return callback(a, b);
      }
      return every(a, makeCompare(callback), b) && every(b, checkProperties, a);
    }
    module2.exports = equals;
  }
});

// node_modules/mout/array/every.js
var require_every2 = __commonJS({
  "node_modules/mout/array/every.js"(exports, module2) {
    var makeIterator = require_makeIterator();
    function every(arr, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var result = true;
      if (arr == null) {
        return result;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (!callback(arr[i], i, arr)) {
          result = false;
          break;
        }
      }
      return result;
    }
    module2.exports = every;
  }
});

// node_modules/mout/array/equals.js
var require_equals2 = __commonJS({
  "node_modules/mout/array/equals.js"(exports, module2) {
    var is = require_is();
    var isArray = require_isArray();
    var every = require_every2();
    function equals(a, b, callback) {
      callback = callback || is;
      if (!isArray(a) || !isArray(b)) {
        return callback(a, b);
      }
      if (a.length !== b.length) {
        return false;
      }
      return every(a, makeCompare(callback), b);
    }
    function makeCompare(callback) {
      return function(value, i) {
        return i in this && callback(value, this[i]);
      };
    }
    module2.exports = equals;
  }
});

// node_modules/mout/lang/deepEquals.js
var require_deepEquals = __commonJS({
  "node_modules/mout/lang/deepEquals.js"(exports, module2) {
    var is = require_is();
    var isObject = require_isObject();
    var isArray = require_isArray();
    var objEquals = require_equals();
    var arrEquals = require_equals2();
    function deepEquals(a, b, callback) {
      callback = callback || is;
      var bothObjects = isObject(a) && isObject(b);
      var bothArrays = !bothObjects && isArray(a) && isArray(b);
      if (!bothObjects && !bothArrays) {
        return callback(a, b);
      }
      function compare(a2, b2) {
        return deepEquals(a2, b2, callback);
      }
      var method = bothObjects ? objEquals : arrEquals;
      return method(a, b, compare);
    }
    module2.exports = deepEquals;
  }
});

// node_modules/chroma-js/chroma.js
var require_chroma = __commonJS({
  "node_modules/chroma-js/chroma.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.chroma = factory();
    })(exports, function() {
      "use strict";
      var limit = function(x, min3, max3) {
        if (min3 === void 0)
          min3 = 0;
        if (max3 === void 0)
          max3 = 1;
        return x < min3 ? min3 : x > max3 ? max3 : x;
      };
      var clip_rgb = function(rgb) {
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for (var i2 = 0; i2 <= 3; i2++) {
          if (i2 < 3) {
            if (rgb[i2] < 0 || rgb[i2] > 255) {
              rgb._clipped = true;
            }
            rgb[i2] = limit(rgb[i2], 0, 255);
          } else if (i2 === 3) {
            rgb[i2] = limit(rgb[i2], 0, 1);
          }
        }
        return rgb;
      };
      var classToType = {};
      for (var i = 0, list = ["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Undefined", "Null"]; i < list.length; i += 1) {
        var name = list[i];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      var type = function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || "object";
      };
      var unpack = function(args, keyOrder) {
        if (keyOrder === void 0)
          keyOrder = null;
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        }
        if (type(args[0]) == "object" && keyOrder) {
          return keyOrder.split("").filter(function(k) {
            return args[0][k] !== void 0;
          }).map(function(k) {
            return args[0][k];
          });
        }
        return args[0];
      };
      var last = function(args) {
        if (args.length < 2) {
          return null;
        }
        var l = args.length - 1;
        if (type(args[l]) == "string") {
          return args[l].toLowerCase();
        }
        return null;
      };
      var PI = Math.PI;
      var utils = {
        clip_rgb,
        limit,
        type,
        unpack,
        last,
        PI,
        TWOPI: PI * 2,
        PITHIRD: PI / 3,
        DEG2RAD: PI / 180,
        RAD2DEG: 180 / PI
      };
      var input = {
        format: {},
        autodetect: []
      };
      var last$1 = utils.last;
      var clip_rgb$1 = utils.clip_rgb;
      var type$1 = utils.type;
      var Color = function Color2() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var me = this;
        if (type$1(args[0]) === "object" && args[0].constructor && args[0].constructor === this.constructor) {
          return args[0];
        }
        var mode = last$1(args);
        var autodetect = false;
        if (!mode) {
          autodetect = true;
          if (!input.sorted) {
            input.autodetect = input.autodetect.sort(function(a, b) {
              return b.p - a.p;
            });
            input.sorted = true;
          }
          for (var i2 = 0, list2 = input.autodetect; i2 < list2.length; i2 += 1) {
            var chk = list2[i2];
            mode = chk.test.apply(chk, args);
            if (mode) {
              break;
            }
          }
        }
        if (input.format[mode]) {
          var rgb = input.format[mode].apply(null, autodetect ? args : args.slice(0, -1));
          me._rgb = clip_rgb$1(rgb);
        } else {
          throw new Error("unknown format: " + args);
        }
        if (me._rgb.length === 3) {
          me._rgb.push(1);
        }
      };
      Color.prototype.toString = function toString2() {
        if (type$1(this.hex) == "function") {
          return this.hex();
        }
        return "[" + this._rgb.join(",") + "]";
      };
      var Color_1 = Color;
      var chroma = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(chroma.Color, [null].concat(args)))();
      };
      chroma.Color = Color_1;
      chroma.version = "2.1.2";
      var chroma_1 = chroma;
      var unpack$1 = utils.unpack;
      var max2 = Math.max;
      var rgb2cmyk = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$1(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r = r / 255;
        g = g / 255;
        b = b / 255;
        var k = 1 - max2(r, max2(g, b));
        var f = k < 1 ? 1 / (1 - k) : 0;
        var c = (1 - r - k) * f;
        var m = (1 - g - k) * f;
        var y = (1 - b - k) * f;
        return [c, m, y, k];
      };
      var rgb2cmyk_1 = rgb2cmyk;
      var unpack$2 = utils.unpack;
      var cmyk2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$2(args, "cmyk");
        var c = args[0];
        var m = args[1];
        var y = args[2];
        var k = args[3];
        var alpha = args.length > 4 ? args[4] : 1;
        if (k === 1) {
          return [0, 0, 0, alpha];
        }
        return [
          c >= 1 ? 0 : 255 * (1 - c) * (1 - k),
          m >= 1 ? 0 : 255 * (1 - m) * (1 - k),
          y >= 1 ? 0 : 255 * (1 - y) * (1 - k),
          alpha
        ];
      };
      var cmyk2rgb_1 = cmyk2rgb;
      var unpack$3 = utils.unpack;
      var type$2 = utils.type;
      Color_1.prototype.cmyk = function() {
        return rgb2cmyk_1(this._rgb);
      };
      chroma_1.cmyk = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["cmyk"])))();
      };
      input.format.cmyk = cmyk2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$3(args, "cmyk");
          if (type$2(args) === "array" && args.length === 4) {
            return "cmyk";
          }
        }
      });
      var unpack$4 = utils.unpack;
      var last$2 = utils.last;
      var rnd = function(a) {
        return Math.round(a * 100) / 100;
      };
      var hsl2css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var hsla = unpack$4(args, "hsla");
        var mode = last$2(args) || "lsa";
        hsla[0] = rnd(hsla[0] || 0);
        hsla[1] = rnd(hsla[1] * 100) + "%";
        hsla[2] = rnd(hsla[2] * 100) + "%";
        if (mode === "hsla" || hsla.length > 3 && hsla[3] < 1) {
          hsla[3] = hsla.length > 3 ? hsla[3] : 1;
          mode = "hsla";
        } else {
          hsla.length = 3;
        }
        return mode + "(" + hsla.join(",") + ")";
      };
      var hsl2css_1 = hsl2css;
      var unpack$5 = utils.unpack;
      var rgb2hsl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$5(args, "rgba");
        var r = args[0];
        var g = args[1];
        var b = args[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var min3 = Math.min(r, g, b);
        var max3 = Math.max(r, g, b);
        var l = (max3 + min3) / 2;
        var s, h;
        if (max3 === min3) {
          s = 0;
          h = Number.NaN;
        } else {
          s = l < 0.5 ? (max3 - min3) / (max3 + min3) : (max3 - min3) / (2 - max3 - min3);
        }
        if (r == max3) {
          h = (g - b) / (max3 - min3);
        } else if (g == max3) {
          h = 2 + (b - r) / (max3 - min3);
        } else if (b == max3) {
          h = 4 + (r - g) / (max3 - min3);
        }
        h *= 60;
        if (h < 0) {
          h += 360;
        }
        if (args.length > 3 && args[3] !== void 0) {
          return [h, s, l, args[3]];
        }
        return [h, s, l];
      };
      var rgb2hsl_1 = rgb2hsl;
      var unpack$6 = utils.unpack;
      var last$3 = utils.last;
      var round2 = Math.round;
      var rgb2css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgba = unpack$6(args, "rgba");
        var mode = last$3(args) || "rgb";
        if (mode.substr(0, 3) == "hsl") {
          return hsl2css_1(rgb2hsl_1(rgba), mode);
        }
        rgba[0] = round2(rgba[0]);
        rgba[1] = round2(rgba[1]);
        rgba[2] = round2(rgba[2]);
        if (mode === "rgba" || rgba.length > 3 && rgba[3] < 1) {
          rgba[3] = rgba.length > 3 ? rgba[3] : 1;
          mode = "rgba";
        }
        return mode + "(" + rgba.slice(0, mode === "rgb" ? 3 : 4).join(",") + ")";
      };
      var rgb2css_1 = rgb2css;
      var unpack$7 = utils.unpack;
      var round$1 = Math.round;
      var hsl2rgb = function() {
        var assign2;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$7(args, "hsl");
        var h = args[0];
        var s = args[1];
        var l = args[2];
        var r, g, b;
        if (s === 0) {
          r = g = b = l * 255;
        } else {
          var t3 = [0, 0, 0];
          var c = [0, 0, 0];
          var t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var t1 = 2 * l - t2;
          var h_ = h / 360;
          t3[0] = h_ + 1 / 3;
          t3[1] = h_;
          t3[2] = h_ - 1 / 3;
          for (var i2 = 0; i2 < 3; i2++) {
            if (t3[i2] < 0) {
              t3[i2] += 1;
            }
            if (t3[i2] > 1) {
              t3[i2] -= 1;
            }
            if (6 * t3[i2] < 1) {
              c[i2] = t1 + (t2 - t1) * 6 * t3[i2];
            } else if (2 * t3[i2] < 1) {
              c[i2] = t2;
            } else if (3 * t3[i2] < 2) {
              c[i2] = t1 + (t2 - t1) * (2 / 3 - t3[i2]) * 6;
            } else {
              c[i2] = t1;
            }
          }
          assign2 = [round$1(c[0] * 255), round$1(c[1] * 255), round$1(c[2] * 255)], r = assign2[0], g = assign2[1], b = assign2[2];
        }
        if (args.length > 3) {
          return [r, g, b, args[3]];
        }
        return [r, g, b, 1];
      };
      var hsl2rgb_1 = hsl2rgb;
      var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
      var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
      var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
      var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
      var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
      var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
      var round$2 = Math.round;
      var css2rgb = function(css) {
        css = css.toLowerCase().trim();
        var m;
        if (input.format.named) {
          try {
            return input.format.named(css);
          } catch (e) {
          }
        }
        if (m = css.match(RE_RGB)) {
          var rgb = m.slice(1, 4);
          for (var i2 = 0; i2 < 3; i2++) {
            rgb[i2] = +rgb[i2];
          }
          rgb[3] = 1;
          return rgb;
        }
        if (m = css.match(RE_RGBA)) {
          var rgb$12 = m.slice(1, 5);
          for (var i$12 = 0; i$12 < 4; i$12++) {
            rgb$12[i$12] = +rgb$12[i$12];
          }
          return rgb$12;
        }
        if (m = css.match(RE_RGB_PCT)) {
          var rgb$2 = m.slice(1, 4);
          for (var i$2 = 0; i$2 < 3; i$2++) {
            rgb$2[i$2] = round$2(rgb$2[i$2] * 2.55);
          }
          rgb$2[3] = 1;
          return rgb$2;
        }
        if (m = css.match(RE_RGBA_PCT)) {
          var rgb$3 = m.slice(1, 5);
          for (var i$3 = 0; i$3 < 3; i$3++) {
            rgb$3[i$3] = round$2(rgb$3[i$3] * 2.55);
          }
          rgb$3[3] = +rgb$3[3];
          return rgb$3;
        }
        if (m = css.match(RE_HSL)) {
          var hsl = m.slice(1, 4);
          hsl[1] *= 0.01;
          hsl[2] *= 0.01;
          var rgb$4 = hsl2rgb_1(hsl);
          rgb$4[3] = 1;
          return rgb$4;
        }
        if (m = css.match(RE_HSLA)) {
          var hsl$12 = m.slice(1, 4);
          hsl$12[1] *= 0.01;
          hsl$12[2] *= 0.01;
          var rgb$5 = hsl2rgb_1(hsl$12);
          rgb$5[3] = +m[4];
          return rgb$5;
        }
      };
      css2rgb.test = function(s) {
        return RE_RGB.test(s) || RE_RGBA.test(s) || RE_RGB_PCT.test(s) || RE_RGBA_PCT.test(s) || RE_HSL.test(s) || RE_HSLA.test(s);
      };
      var css2rgb_1 = css2rgb;
      var type$3 = utils.type;
      Color_1.prototype.css = function(mode) {
        return rgb2css_1(this._rgb, mode);
      };
      chroma_1.css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["css"])))();
      };
      input.format.css = css2rgb_1;
      input.autodetect.push({
        p: 5,
        test: function(h) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$3(h) === "string" && css2rgb_1.test(h)) {
            return "css";
          }
        }
      });
      var unpack$8 = utils.unpack;
      input.format.gl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgb = unpack$8(args, "rgba");
        rgb[0] *= 255;
        rgb[1] *= 255;
        rgb[2] *= 255;
        return rgb;
      };
      chroma_1.gl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["gl"])))();
      };
      Color_1.prototype.gl = function() {
        var rgb = this._rgb;
        return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
      };
      var unpack$9 = utils.unpack;
      var rgb2hcg = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$9(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var min3 = Math.min(r, g, b);
        var max3 = Math.max(r, g, b);
        var delta = max3 - min3;
        var c = delta * 100 / 255;
        var _g = min3 / (255 - delta) * 100;
        var h;
        if (delta === 0) {
          h = Number.NaN;
        } else {
          if (r === max3) {
            h = (g - b) / delta;
          }
          if (g === max3) {
            h = 2 + (b - r) / delta;
          }
          if (b === max3) {
            h = 4 + (r - g) / delta;
          }
          h *= 60;
          if (h < 0) {
            h += 360;
          }
        }
        return [h, c, _g];
      };
      var rgb2hcg_1 = rgb2hcg;
      var unpack$a = utils.unpack;
      var floor = Math.floor;
      var hcg2rgb = function() {
        var assign2, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$a(args, "hcg");
        var h = args[0];
        var c = args[1];
        var _g = args[2];
        var r, g, b;
        _g = _g * 255;
        var _c = c * 255;
        if (c === 0) {
          r = g = b = _g;
        } else {
          if (h === 360) {
            h = 0;
          }
          if (h > 360) {
            h -= 360;
          }
          if (h < 0) {
            h += 360;
          }
          h /= 60;
          var i2 = floor(h);
          var f = h - i2;
          var p = _g * (1 - c);
          var q = p + _c * (1 - f);
          var t = p + _c * f;
          var v = p + _c;
          switch (i2) {
            case 0:
              assign2 = [v, t, p], r = assign2[0], g = assign2[1], b = assign2[2];
              break;
            case 1:
              assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2];
              break;
            case 2:
              assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2];
              break;
            case 3:
              assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2];
              break;
            case 4:
              assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2];
              break;
            case 5:
              assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2];
              break;
          }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };
      var hcg2rgb_1 = hcg2rgb;
      var unpack$b = utils.unpack;
      var type$4 = utils.type;
      Color_1.prototype.hcg = function() {
        return rgb2hcg_1(this._rgb);
      };
      chroma_1.hcg = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hcg"])))();
      };
      input.format.hcg = hcg2rgb_1;
      input.autodetect.push({
        p: 1,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$b(args, "hcg");
          if (type$4(args) === "array" && args.length === 3) {
            return "hcg";
          }
        }
      });
      var unpack$c = utils.unpack;
      var last$4 = utils.last;
      var round$3 = Math.round;
      var rgb2hex = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$c(args, "rgba");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var a = ref[3];
        var mode = last$4(args) || "auto";
        if (a === void 0) {
          a = 1;
        }
        if (mode === "auto") {
          mode = a < 1 ? "rgba" : "rgb";
        }
        r = round$3(r);
        g = round$3(g);
        b = round$3(b);
        var u = r << 16 | g << 8 | b;
        var str = "000000" + u.toString(16);
        str = str.substr(str.length - 6);
        var hxa = "0" + round$3(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        switch (mode.toLowerCase()) {
          case "rgba":
            return "#" + str + hxa;
          case "argb":
            return "#" + hxa + str;
          default:
            return "#" + str;
        }
      };
      var rgb2hex_1 = rgb2hex;
      var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
      var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;
      var hex2rgb = function(hex) {
        if (hex.match(RE_HEX)) {
          if (hex.length === 4 || hex.length === 7) {
            hex = hex.substr(1);
          }
          if (hex.length === 3) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
          }
          var u = parseInt(hex, 16);
          var r = u >> 16;
          var g = u >> 8 & 255;
          var b = u & 255;
          return [r, g, b, 1];
        }
        if (hex.match(RE_HEXA)) {
          if (hex.length === 5 || hex.length === 9) {
            hex = hex.substr(1);
          }
          if (hex.length === 4) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
          }
          var u$1 = parseInt(hex, 16);
          var r$1 = u$1 >> 24 & 255;
          var g$1 = u$1 >> 16 & 255;
          var b$1 = u$1 >> 8 & 255;
          var a = Math.round((u$1 & 255) / 255 * 100) / 100;
          return [r$1, g$1, b$1, a];
        }
        throw new Error("unknown hex color: " + hex);
      };
      var hex2rgb_1 = hex2rgb;
      var type$5 = utils.type;
      Color_1.prototype.hex = function(mode) {
        return rgb2hex_1(this._rgb, mode);
      };
      chroma_1.hex = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hex"])))();
      };
      input.format.hex = hex2rgb_1;
      input.autodetect.push({
        p: 4,
        test: function(h) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$5(h) === "string" && [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0) {
            return "hex";
          }
        }
      });
      var unpack$d = utils.unpack;
      var TWOPI = utils.TWOPI;
      var min2 = Math.min;
      var sqrt = Math.sqrt;
      var acos = Math.acos;
      var rgb2hsi = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$d(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var h;
        var min_ = min2(r, g, b);
        var i2 = (r + g + b) / 3;
        var s = i2 > 0 ? 1 - min_ / i2 : 0;
        if (s === 0) {
          h = NaN;
        } else {
          h = (r - g + (r - b)) / 2;
          h /= sqrt((r - g) * (r - g) + (r - b) * (g - b));
          h = acos(h);
          if (b > g) {
            h = TWOPI - h;
          }
          h /= TWOPI;
        }
        return [h * 360, s, i2];
      };
      var rgb2hsi_1 = rgb2hsi;
      var unpack$e = utils.unpack;
      var limit$1 = utils.limit;
      var TWOPI$1 = utils.TWOPI;
      var PITHIRD = utils.PITHIRD;
      var cos = Math.cos;
      var hsi2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$e(args, "hsi");
        var h = args[0];
        var s = args[1];
        var i2 = args[2];
        var r, g, b;
        if (isNaN(h)) {
          h = 0;
        }
        if (isNaN(s)) {
          s = 0;
        }
        if (h > 360) {
          h -= 360;
        }
        if (h < 0) {
          h += 360;
        }
        h /= 360;
        if (h < 1 / 3) {
          b = (1 - s) / 3;
          r = (1 + s * cos(TWOPI$1 * h) / cos(PITHIRD - TWOPI$1 * h)) / 3;
          g = 1 - (b + r);
        } else if (h < 2 / 3) {
          h -= 1 / 3;
          r = (1 - s) / 3;
          g = (1 + s * cos(TWOPI$1 * h) / cos(PITHIRD - TWOPI$1 * h)) / 3;
          b = 1 - (r + g);
        } else {
          h -= 2 / 3;
          g = (1 - s) / 3;
          b = (1 + s * cos(TWOPI$1 * h) / cos(PITHIRD - TWOPI$1 * h)) / 3;
          r = 1 - (g + b);
        }
        r = limit$1(i2 * r * 3);
        g = limit$1(i2 * g * 3);
        b = limit$1(i2 * b * 3);
        return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
      };
      var hsi2rgb_1 = hsi2rgb;
      var unpack$f = utils.unpack;
      var type$6 = utils.type;
      Color_1.prototype.hsi = function() {
        return rgb2hsi_1(this._rgb);
      };
      chroma_1.hsi = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hsi"])))();
      };
      input.format.hsi = hsi2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$f(args, "hsi");
          if (type$6(args) === "array" && args.length === 3) {
            return "hsi";
          }
        }
      });
      var unpack$g = utils.unpack;
      var type$7 = utils.type;
      Color_1.prototype.hsl = function() {
        return rgb2hsl_1(this._rgb);
      };
      chroma_1.hsl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hsl"])))();
      };
      input.format.hsl = hsl2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$g(args, "hsl");
          if (type$7(args) === "array" && args.length === 3) {
            return "hsl";
          }
        }
      });
      var unpack$h = utils.unpack;
      var min$1 = Math.min;
      var max$1 = Math.max;
      var rgb2hsl$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$h(args, "rgb");
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var min_ = min$1(r, g, b);
        var max_ = max$1(r, g, b);
        var delta = max_ - min_;
        var h, s, v;
        v = max_ / 255;
        if (max_ === 0) {
          h = Number.NaN;
          s = 0;
        } else {
          s = delta / max_;
          if (r === max_) {
            h = (g - b) / delta;
          }
          if (g === max_) {
            h = 2 + (b - r) / delta;
          }
          if (b === max_) {
            h = 4 + (r - g) / delta;
          }
          h *= 60;
          if (h < 0) {
            h += 360;
          }
        }
        return [h, s, v];
      };
      var rgb2hsv = rgb2hsl$1;
      var unpack$i = utils.unpack;
      var floor$1 = Math.floor;
      var hsv2rgb = function() {
        var assign2, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$i(args, "hsv");
        var h = args[0];
        var s = args[1];
        var v = args[2];
        var r, g, b;
        v *= 255;
        if (s === 0) {
          r = g = b = v;
        } else {
          if (h === 360) {
            h = 0;
          }
          if (h > 360) {
            h -= 360;
          }
          if (h < 0) {
            h += 360;
          }
          h /= 60;
          var i2 = floor$1(h);
          var f = h - i2;
          var p = v * (1 - s);
          var q = v * (1 - s * f);
          var t = v * (1 - s * (1 - f));
          switch (i2) {
            case 0:
              assign2 = [v, t, p], r = assign2[0], g = assign2[1], b = assign2[2];
              break;
            case 1:
              assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2];
              break;
            case 2:
              assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2];
              break;
            case 3:
              assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2];
              break;
            case 4:
              assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2];
              break;
            case 5:
              assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2];
              break;
          }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };
      var hsv2rgb_1 = hsv2rgb;
      var unpack$j = utils.unpack;
      var type$8 = utils.type;
      Color_1.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };
      chroma_1.hsv = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hsv"])))();
      };
      input.format.hsv = hsv2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$j(args, "hsv");
          if (type$8(args) === "array" && args.length === 3) {
            return "hsv";
          }
        }
      });
      var labConstants = {
        Kn: 18,
        Xn: 0.95047,
        Yn: 1,
        Zn: 1.08883,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 8856452e-9
      };
      var unpack$k = utils.unpack;
      var pow = Math.pow;
      var rgb2lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$k(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2xyz(r, g, b);
        var x = ref$1[0];
        var y = ref$1[1];
        var z = ref$1[2];
        var l = 116 * y - 16;
        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];
      };
      var rgb_xyz = function(r) {
        if ((r /= 255) <= 0.04045) {
          return r / 12.92;
        }
        return pow((r + 0.055) / 1.055, 2.4);
      };
      var xyz_lab = function(t) {
        if (t > labConstants.t3) {
          return pow(t, 1 / 3);
        }
        return t / labConstants.t2 + labConstants.t0;
      };
      var rgb2xyz = function(r, g, b) {
        r = rgb_xyz(r);
        g = rgb_xyz(g);
        b = rgb_xyz(b);
        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / labConstants.Xn);
        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / labConstants.Yn);
        var z = xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / labConstants.Zn);
        return [x, y, z];
      };
      var rgb2lab_1 = rgb2lab;
      var unpack$l = utils.unpack;
      var pow$1 = Math.pow;
      var lab2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$l(args, "lab");
        var l = args[0];
        var a = args[1];
        var b = args[2];
        var x, y, z, r, g, b_;
        y = (l + 16) / 116;
        x = isNaN(a) ? y : y + a / 500;
        z = isNaN(b) ? y : y - b / 200;
        y = labConstants.Yn * lab_xyz(y);
        x = labConstants.Xn * lab_xyz(x);
        z = labConstants.Zn * lab_xyz(z);
        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
        g = xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z);
        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
        return [r, g, b_, args.length > 3 ? args[3] : 1];
      };
      var xyz_rgb = function(r) {
        return 255 * (r <= 304e-5 ? 12.92 * r : 1.055 * pow$1(r, 1 / 2.4) - 0.055);
      };
      var lab_xyz = function(t) {
        return t > labConstants.t1 ? t * t * t : labConstants.t2 * (t - labConstants.t0);
      };
      var lab2rgb_1 = lab2rgb;
      var unpack$m = utils.unpack;
      var type$9 = utils.type;
      Color_1.prototype.lab = function() {
        return rgb2lab_1(this._rgb);
      };
      chroma_1.lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["lab"])))();
      };
      input.format.lab = lab2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$m(args, "lab");
          if (type$9(args) === "array" && args.length === 3) {
            return "lab";
          }
        }
      });
      var unpack$n = utils.unpack;
      var RAD2DEG = utils.RAD2DEG;
      var sqrt$1 = Math.sqrt;
      var atan2 = Math.atan2;
      var round$4 = Math.round;
      var lab2lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$n(args, "lab");
        var l = ref[0];
        var a = ref[1];
        var b = ref[2];
        var c = sqrt$1(a * a + b * b);
        var h = (atan2(b, a) * RAD2DEG + 360) % 360;
        if (round$4(c * 1e4) === 0) {
          h = Number.NaN;
        }
        return [l, c, h];
      };
      var lab2lch_1 = lab2lch;
      var unpack$o = utils.unpack;
      var rgb2lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$o(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2lab_1(r, g, b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch_1(l, a, b_);
      };
      var rgb2lch_1 = rgb2lch;
      var unpack$p = utils.unpack;
      var DEG2RAD = utils.DEG2RAD;
      var sin = Math.sin;
      var cos$1 = Math.cos;
      var lch2lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$p(args, "lch");
        var l = ref[0];
        var c = ref[1];
        var h = ref[2];
        if (isNaN(h)) {
          h = 0;
        }
        h = h * DEG2RAD;
        return [l, cos$1(h) * c, sin(h) * c];
      };
      var lch2lab_1 = lch2lab;
      var unpack$q = utils.unpack;
      var lch2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$q(args, "lch");
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab_1(l, c, h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = lab2rgb_1(L, a, b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };
      var lch2rgb_1 = lch2rgb;
      var unpack$r = utils.unpack;
      var hcl2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var hcl = unpack$r(args, "hcl").reverse();
        return lch2rgb_1.apply(void 0, hcl);
      };
      var hcl2rgb_1 = hcl2rgb;
      var unpack$s = utils.unpack;
      var type$a = utils.type;
      Color_1.prototype.lch = function() {
        return rgb2lch_1(this._rgb);
      };
      Color_1.prototype.hcl = function() {
        return rgb2lch_1(this._rgb).reverse();
      };
      chroma_1.lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["lch"])))();
      };
      chroma_1.hcl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hcl"])))();
      };
      input.format.lch = lch2rgb_1;
      input.format.hcl = hcl2rgb_1;
      ["lch", "hcl"].forEach(function(m) {
        return input.autodetect.push({
          p: 2,
          test: function() {
            var args = [], len = arguments.length;
            while (len--)
              args[len] = arguments[len];
            args = unpack$s(args, m);
            if (type$a(args) === "array" && args.length === 3) {
              return m;
            }
          }
        });
      });
      var w3cx11 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      };
      var w3cx11_1 = w3cx11;
      var type$b = utils.type;
      Color_1.prototype.name = function() {
        var hex = rgb2hex_1(this._rgb, "rgb");
        for (var i2 = 0, list2 = Object.keys(w3cx11_1); i2 < list2.length; i2 += 1) {
          var n = list2[i2];
          if (w3cx11_1[n] === hex) {
            return n.toLowerCase();
          }
        }
        return hex;
      };
      input.format.named = function(name2) {
        name2 = name2.toLowerCase();
        if (w3cx11_1[name2]) {
          return hex2rgb_1(w3cx11_1[name2]);
        }
        throw new Error("unknown color name: " + name2);
      };
      input.autodetect.push({
        p: 5,
        test: function(h) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$b(h) === "string" && w3cx11_1[h.toLowerCase()]) {
            return "named";
          }
        }
      });
      var unpack$t = utils.unpack;
      var rgb2num = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$t(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        return (r << 16) + (g << 8) + b;
      };
      var rgb2num_1 = rgb2num;
      var type$c = utils.type;
      var num2rgb = function(num) {
        if (type$c(num) == "number" && num >= 0 && num <= 16777215) {
          var r = num >> 16;
          var g = num >> 8 & 255;
          var b = num & 255;
          return [r, g, b, 1];
        }
        throw new Error("unknown num color: " + num);
      };
      var num2rgb_1 = num2rgb;
      var type$d = utils.type;
      Color_1.prototype.num = function() {
        return rgb2num_1(this._rgb);
      };
      chroma_1.num = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["num"])))();
      };
      input.format.num = num2rgb_1;
      input.autodetect.push({
        p: 5,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          if (args.length === 1 && type$d(args[0]) === "number" && args[0] >= 0 && args[0] <= 16777215) {
            return "num";
          }
        }
      });
      var unpack$u = utils.unpack;
      var type$e = utils.type;
      var round$5 = Math.round;
      Color_1.prototype.rgb = function(rnd2) {
        if (rnd2 === void 0)
          rnd2 = true;
        if (rnd2 === false) {
          return this._rgb.slice(0, 3);
        }
        return this._rgb.slice(0, 3).map(round$5);
      };
      Color_1.prototype.rgba = function(rnd2) {
        if (rnd2 === void 0)
          rnd2 = true;
        return this._rgb.slice(0, 4).map(function(v, i2) {
          return i2 < 3 ? rnd2 === false ? v : round$5(v) : v;
        });
      };
      chroma_1.rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["rgb"])))();
      };
      input.format.rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgba = unpack$u(args, "rgba");
        if (rgba[3] === void 0) {
          rgba[3] = 1;
        }
        return rgba;
      };
      input.autodetect.push({
        p: 3,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$u(args, "rgba");
          if (type$e(args) === "array" && (args.length === 3 || args.length === 4 && type$e(args[3]) == "number" && args[3] >= 0 && args[3] <= 1)) {
            return "rgb";
          }
        }
      });
      var log = Math.log;
      var temperature2rgb = function(kelvin) {
        var temp = kelvin / 100;
        var r, g, b;
        if (temp < 66) {
          r = 255;
          g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
          b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
        } else {
          r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
          g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
          b = 255;
        }
        return [r, g, b, 1];
      };
      var temperature2rgb_1 = temperature2rgb;
      var unpack$v = utils.unpack;
      var round$6 = Math.round;
      var rgb2temperature = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgb = unpack$v(args, "rgb");
        var r = rgb[0], b = rgb[2];
        var minTemp = 1e3;
        var maxTemp = 4e4;
        var eps = 0.4;
        var temp;
        while (maxTemp - minTemp > eps) {
          temp = (maxTemp + minTemp) * 0.5;
          var rgb$12 = temperature2rgb_1(temp);
          if (rgb$12[2] / rgb$12[0] >= b / r) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round$6(temp);
      };
      var rgb2temperature_1 = rgb2temperature;
      Color_1.prototype.temp = Color_1.prototype.kelvin = Color_1.prototype.temperature = function() {
        return rgb2temperature_1(this._rgb);
      };
      chroma_1.temp = chroma_1.kelvin = chroma_1.temperature = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["temp"])))();
      };
      input.format.temp = input.format.kelvin = input.format.temperature = temperature2rgb_1;
      var type$f = utils.type;
      Color_1.prototype.alpha = function(a, mutate) {
        if (mutate === void 0)
          mutate = false;
        if (a !== void 0 && type$f(a) === "number") {
          if (mutate) {
            this._rgb[3] = a;
            return this;
          }
          return new Color_1([this._rgb[0], this._rgb[1], this._rgb[2], a], "rgb");
        }
        return this._rgb[3];
      };
      Color_1.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };
      Color_1.prototype.darken = function(amount) {
        if (amount === void 0)
          amount = 1;
        var me = this;
        var lab = me.lab();
        lab[0] -= labConstants.Kn * amount;
        return new Color_1(lab, "lab").alpha(me.alpha(), true);
      };
      Color_1.prototype.brighten = function(amount) {
        if (amount === void 0)
          amount = 1;
        return this.darken(-amount);
      };
      Color_1.prototype.darker = Color_1.prototype.darken;
      Color_1.prototype.brighter = Color_1.prototype.brighten;
      Color_1.prototype.get = function(mc) {
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
          var i2 = mode.indexOf(channel);
          if (i2 > -1) {
            return src[i2];
          }
          throw new Error("unknown channel " + channel + " in mode " + mode);
        } else {
          return src;
        }
      };
      var type$g = utils.type;
      var pow$2 = Math.pow;
      var EPS = 1e-7;
      var MAX_ITER = 20;
      Color_1.prototype.luminance = function(lum) {
        if (lum !== void 0 && type$g(lum) === "number") {
          if (lum === 0) {
            return new Color_1([0, 0, 0, this._rgb[3]], "rgb");
          }
          if (lum === 1) {
            return new Color_1([255, 255, 255, this._rgb[3]], "rgb");
          }
          var cur_lum = this.luminance();
          var mode = "rgb";
          var max_iter = MAX_ITER;
          var test = function(low, high) {
            var mid = low.interpolate(high, 0.5, mode);
            var lm = mid.luminance();
            if (Math.abs(lum - lm) < EPS || !max_iter--) {
              return mid;
            }
            return lm > lum ? test(low, mid) : test(mid, high);
          };
          var rgb = (cur_lum > lum ? test(new Color_1([0, 0, 0]), this) : test(this, new Color_1([255, 255, 255]))).rgb();
          return new Color_1(rgb.concat([this._rgb[3]]));
        }
        return rgb2luminance.apply(void 0, this._rgb.slice(0, 3));
      };
      var rgb2luminance = function(r, g, b) {
        r = luminance_x(r);
        g = luminance_x(g);
        b = luminance_x(b);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
      };
      var luminance_x = function(x) {
        x /= 255;
        return x <= 0.03928 ? x / 12.92 : pow$2((x + 0.055) / 1.055, 2.4);
      };
      var interpolator = {};
      var type$h = utils.type;
      var mix = function(col1, col2, f) {
        if (f === void 0)
          f = 0.5;
        var rest = [], len = arguments.length - 3;
        while (len-- > 0)
          rest[len] = arguments[len + 3];
        var mode = rest[0] || "lrgb";
        if (!interpolator[mode] && !rest.length) {
          mode = Object.keys(interpolator)[0];
        }
        if (!interpolator[mode]) {
          throw new Error("interpolation mode " + mode + " is not defined");
        }
        if (type$h(col1) !== "object") {
          col1 = new Color_1(col1);
        }
        if (type$h(col2) !== "object") {
          col2 = new Color_1(col2);
        }
        return interpolator[mode](col1, col2, f).alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
      };
      Color_1.prototype.mix = Color_1.prototype.interpolate = function(col2, f) {
        if (f === void 0)
          f = 0.5;
        var rest = [], len = arguments.length - 2;
        while (len-- > 0)
          rest[len] = arguments[len + 2];
        return mix.apply(void 0, [this, col2, f].concat(rest));
      };
      Color_1.prototype.premultiply = function(mutate) {
        if (mutate === void 0)
          mutate = false;
        var rgb = this._rgb;
        var a = rgb[3];
        if (mutate) {
          this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];
          return this;
        } else {
          return new Color_1([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], "rgb");
        }
      };
      Color_1.prototype.saturate = function(amount) {
        if (amount === void 0)
          amount = 1;
        var me = this;
        var lch = me.lch();
        lch[1] += labConstants.Kn * amount;
        if (lch[1] < 0) {
          lch[1] = 0;
        }
        return new Color_1(lch, "lch").alpha(me.alpha(), true);
      };
      Color_1.prototype.desaturate = function(amount) {
        if (amount === void 0)
          amount = 1;
        return this.saturate(-amount);
      };
      var type$i = utils.type;
      Color_1.prototype.set = function(mc, value, mutate) {
        if (mutate === void 0)
          mutate = false;
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
          var i2 = mode.indexOf(channel);
          if (i2 > -1) {
            if (type$i(value) == "string") {
              switch (value.charAt(0)) {
                case "+":
                  src[i2] += +value;
                  break;
                case "-":
                  src[i2] += +value;
                  break;
                case "*":
                  src[i2] *= +value.substr(1);
                  break;
                case "/":
                  src[i2] /= +value.substr(1);
                  break;
                default:
                  src[i2] = +value;
              }
            } else if (type$i(value) === "number") {
              src[i2] = value;
            } else {
              throw new Error("unsupported value for Color.set");
            }
            var out = new Color_1(src, mode);
            if (mutate) {
              this._rgb = out._rgb;
              return this;
            }
            return out;
          }
          throw new Error("unknown channel " + channel + " in mode " + mode);
        } else {
          return src;
        }
      };
      var rgb$1 = function(col1, col2, f) {
        var xyz0 = col1._rgb;
        var xyz1 = col2._rgb;
        return new Color_1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "rgb");
      };
      interpolator.rgb = rgb$1;
      var sqrt$2 = Math.sqrt;
      var pow$3 = Math.pow;
      var lrgb = function(col1, col2, f) {
        var ref = col1._rgb;
        var x1 = ref[0];
        var y1 = ref[1];
        var z1 = ref[2];
        var ref$1 = col2._rgb;
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        return new Color_1(sqrt$2(pow$3(x1, 2) * (1 - f) + pow$3(x2, 2) * f), sqrt$2(pow$3(y1, 2) * (1 - f) + pow$3(y2, 2) * f), sqrt$2(pow$3(z1, 2) * (1 - f) + pow$3(z2, 2) * f), "rgb");
      };
      interpolator.lrgb = lrgb;
      var lab$1 = function(col1, col2, f) {
        var xyz0 = col1.lab();
        var xyz1 = col2.lab();
        return new Color_1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "lab");
      };
      interpolator.lab = lab$1;
      var _hsx = function(col1, col2, f, m) {
        var assign2, assign$1;
        var xyz0, xyz1;
        if (m === "hsl") {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m === "hsv") {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m === "hcg") {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m === "hsi") {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m === "lch" || m === "hcl") {
          m = "hcl";
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        }
        var hue0, hue1, sat0, sat1, lbv0, lbv1;
        if (m.substr(0, 1) === "h") {
          assign2 = xyz0, hue0 = assign2[0], sat0 = assign2[1], lbv0 = assign2[2];
          assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2];
        }
        var sat, hue, lbv, dh;
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh = hue1 + 360 - hue0;
          } else {
            dh = hue1 - hue0;
          }
          hue = hue0 + f * dh;
        } else if (!isNaN(hue0)) {
          hue = hue0;
          if ((lbv1 == 1 || lbv1 == 0) && m != "hsv") {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue = hue1;
          if ((lbv0 == 1 || lbv0 == 0) && m != "hsv") {
            sat = sat1;
          }
        } else {
          hue = Number.NaN;
        }
        if (sat === void 0) {
          sat = sat0 + f * (sat1 - sat0);
        }
        lbv = lbv0 + f * (lbv1 - lbv0);
        return new Color_1([hue, sat, lbv], m);
      };
      var lch$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "lch");
      };
      interpolator.lch = lch$1;
      interpolator.hcl = lch$1;
      var num$1 = function(col1, col2, f) {
        var c1 = col1.num();
        var c2 = col2.num();
        return new Color_1(c1 + f * (c2 - c1), "num");
      };
      interpolator.num = num$1;
      var hcg$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hcg");
      };
      interpolator.hcg = hcg$1;
      var hsi$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hsi");
      };
      interpolator.hsi = hsi$1;
      var hsl$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hsl");
      };
      interpolator.hsl = hsl$1;
      var hsv$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hsv");
      };
      interpolator.hsv = hsv$1;
      var clip_rgb$2 = utils.clip_rgb;
      var pow$4 = Math.pow;
      var sqrt$3 = Math.sqrt;
      var PI$1 = Math.PI;
      var cos$2 = Math.cos;
      var sin$1 = Math.sin;
      var atan2$1 = Math.atan2;
      var average = function(colors, mode, weights) {
        if (mode === void 0)
          mode = "lrgb";
        if (weights === void 0)
          weights = null;
        var l = colors.length;
        if (!weights) {
          weights = Array.from(new Array(l)).map(function() {
            return 1;
          });
        }
        var k = l / weights.reduce(function(a, b) {
          return a + b;
        });
        weights.forEach(function(w, i3) {
          weights[i3] *= k;
        });
        colors = colors.map(function(c) {
          return new Color_1(c);
        });
        if (mode === "lrgb") {
          return _average_lrgb(colors, weights);
        }
        var first = colors.shift();
        var xyz = first.get(mode);
        var cnt = [];
        var dx = 0;
        var dy = 0;
        for (var i2 = 0; i2 < xyz.length; i2++) {
          xyz[i2] = (xyz[i2] || 0) * weights[0];
          cnt.push(isNaN(xyz[i2]) ? 0 : weights[0]);
          if (mode.charAt(i2) === "h" && !isNaN(xyz[i2])) {
            var A = xyz[i2] / 180 * PI$1;
            dx += cos$2(A) * weights[0];
            dy += sin$1(A) * weights[0];
          }
        }
        var alpha = first.alpha() * weights[0];
        colors.forEach(function(c, ci) {
          var xyz2 = c.get(mode);
          alpha += c.alpha() * weights[ci + 1];
          for (var i3 = 0; i3 < xyz.length; i3++) {
            if (!isNaN(xyz2[i3])) {
              cnt[i3] += weights[ci + 1];
              if (mode.charAt(i3) === "h") {
                var A2 = xyz2[i3] / 180 * PI$1;
                dx += cos$2(A2) * weights[ci + 1];
                dy += sin$1(A2) * weights[ci + 1];
              } else {
                xyz[i3] += xyz2[i3] * weights[ci + 1];
              }
            }
          }
        });
        for (var i$12 = 0; i$12 < xyz.length; i$12++) {
          if (mode.charAt(i$12) === "h") {
            var A$1 = atan2$1(dy / cnt[i$12], dx / cnt[i$12]) / PI$1 * 180;
            while (A$1 < 0) {
              A$1 += 360;
            }
            while (A$1 >= 360) {
              A$1 -= 360;
            }
            xyz[i$12] = A$1;
          } else {
            xyz[i$12] = xyz[i$12] / cnt[i$12];
          }
        }
        alpha /= l;
        return new Color_1(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);
      };
      var _average_lrgb = function(colors, weights) {
        var l = colors.length;
        var xyz = [0, 0, 0, 0];
        for (var i2 = 0; i2 < colors.length; i2++) {
          var col = colors[i2];
          var f = weights[i2] / l;
          var rgb = col._rgb;
          xyz[0] += pow$4(rgb[0], 2) * f;
          xyz[1] += pow$4(rgb[1], 2) * f;
          xyz[2] += pow$4(rgb[2], 2) * f;
          xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt$3(xyz[0]);
        xyz[1] = sqrt$3(xyz[1]);
        xyz[2] = sqrt$3(xyz[2]);
        if (xyz[3] > 0.9999999) {
          xyz[3] = 1;
        }
        return new Color_1(clip_rgb$2(xyz));
      };
      var type$j = utils.type;
      var pow$5 = Math.pow;
      var scale = function(colors) {
        var _mode = "rgb";
        var _nacol = chroma_1("#ccc");
        var _spread = 0;
        var _domain = [0, 1];
        var _pos = [];
        var _padding = [0, 0];
        var _classes = false;
        var _colors = [];
        var _out = false;
        var _min = 0;
        var _max = 1;
        var _correctLightness = false;
        var _colorCache = {};
        var _useCache = true;
        var _gamma = 1;
        var setColors = function(colors2) {
          colors2 = colors2 || ["#fff", "#000"];
          if (colors2 && type$j(colors2) === "string" && chroma_1.brewer && chroma_1.brewer[colors2.toLowerCase()]) {
            colors2 = chroma_1.brewer[colors2.toLowerCase()];
          }
          if (type$j(colors2) === "array") {
            if (colors2.length === 1) {
              colors2 = [colors2[0], colors2[0]];
            }
            colors2 = colors2.slice(0);
            for (var c = 0; c < colors2.length; c++) {
              colors2[c] = chroma_1(colors2[c]);
            }
            _pos.length = 0;
            for (var c$1 = 0; c$1 < colors2.length; c$1++) {
              _pos.push(c$1 / (colors2.length - 1));
            }
          }
          resetCache();
          return _colors = colors2;
        };
        var getClass = function(value) {
          if (_classes != null) {
            var n = _classes.length - 1;
            var i2 = 0;
            while (i2 < n && value >= _classes[i2]) {
              i2++;
            }
            return i2 - 1;
          }
          return 0;
        };
        var tMapLightness = function(t) {
          return t;
        };
        var tMapDomain = function(t) {
          return t;
        };
        var getColor = function(val, bypassMap) {
          var col, t;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val) || val === null) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              var c = getClass(val);
              t = c / (_classes.length - 2);
            } else if (_max !== _min) {
              t = (val - _min) / (_max - _min);
            } else {
              t = 1;
            }
          } else {
            t = val;
          }
          t = tMapDomain(t);
          if (!bypassMap) {
            t = tMapLightness(t);
          }
          if (_gamma !== 1) {
            t = pow$5(t, _gamma);
          }
          t = _padding[0] + t * (1 - _padding[0] - _padding[1]);
          t = Math.min(1, Math.max(0, t));
          var k = Math.floor(t * 1e4);
          if (_useCache && _colorCache[k]) {
            col = _colorCache[k];
          } else {
            if (type$j(_colors) === "array") {
              for (var i2 = 0; i2 < _pos.length; i2++) {
                var p = _pos[i2];
                if (t <= p) {
                  col = _colors[i2];
                  break;
                }
                if (t >= p && i2 === _pos.length - 1) {
                  col = _colors[i2];
                  break;
                }
                if (t > p && t < _pos[i2 + 1]) {
                  t = (t - p) / (_pos[i2 + 1] - p);
                  col = chroma_1.interpolate(_colors[i2], _colors[i2 + 1], t, _mode);
                  break;
                }
              }
            } else if (type$j(_colors) === "function") {
              col = _colors(t);
            }
            if (_useCache) {
              _colorCache[k] = col;
            }
          }
          return col;
        };
        var resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors);
        var f = function(v) {
          var c = chroma_1(getColor(v));
          if (_out && c[_out]) {
            return c[_out]();
          } else {
            return c;
          }
        };
        f.classes = function(classes) {
          if (classes != null) {
            if (type$j(classes) === "array") {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              var d = chroma_1.analyze(_domain);
              if (classes === 0) {
                _classes = [d.min, d.max];
              } else {
                _classes = chroma_1.limits(d, "e", classes);
              }
            }
            return f;
          }
          return _classes;
        };
        f.domain = function(domain) {
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          var k = _colors.length;
          if (domain.length === k && _min !== _max) {
            for (var i2 = 0, list2 = Array.from(domain); i2 < list2.length; i2 += 1) {
              var d = list2[i2];
              _pos.push((d - _min) / (_max - _min));
            }
          } else {
            for (var c = 0; c < k; c++) {
              _pos.push(c / (k - 1));
            }
            if (domain.length > 2) {
              var tOut = domain.map(function(d2, i3) {
                return i3 / (domain.length - 1);
              });
              var tBreaks = domain.map(function(d2) {
                return (d2 - _min) / (_max - _min);
              });
              if (!tBreaks.every(function(val, i3) {
                return tOut[i3] === val;
              })) {
                tMapDomain = function(t) {
                  if (t <= 0 || t >= 1) {
                    return t;
                  }
                  var i3 = 0;
                  while (t >= tBreaks[i3 + 1]) {
                    i3++;
                  }
                  var f2 = (t - tBreaks[i3]) / (tBreaks[i3 + 1] - tBreaks[i3]);
                  var out = tOut[i3] + f2 * (tOut[i3 + 1] - tOut[i3]);
                  return out;
                };
              }
            }
          }
          _domain = [_min, _max];
          return f;
        };
        f.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f;
        };
        f.range = function(colors2, _pos2) {
          setColors(colors2, _pos2);
          return f;
        };
        f.out = function(_o) {
          _out = _o;
          return f;
        };
        f.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f;
        };
        f.correctLightness = function(v) {
          if (v == null) {
            v = true;
          }
          _correctLightness = v;
          resetCache();
          if (_correctLightness) {
            tMapLightness = function(t) {
              var L0 = getColor(0, true).lab()[0];
              var L1 = getColor(1, true).lab()[0];
              var pol = L0 > L1;
              var L_actual = getColor(t, true).lab()[0];
              var L_ideal = L0 + (L1 - L0) * t;
              var L_diff = L_actual - L_ideal;
              var t0 = 0;
              var t1 = 1;
              var max_iter = 20;
              while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t0 = t;
                    t += (t1 - t) * 0.5;
                  } else {
                    t1 = t;
                    t += (t0 - t) * 0.5;
                  }
                  L_actual = getColor(t, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t;
            };
          } else {
            tMapLightness = function(t) {
              return t;
            };
          }
          return f;
        };
        f.padding = function(p) {
          if (p != null) {
            if (type$j(p) === "number") {
              p = [p, p];
            }
            _padding = p;
            return f;
          } else {
            return _padding;
          }
        };
        f.colors = function(numColors, out) {
          if (arguments.length < 2) {
            out = "hex";
          }
          var result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f(0.5)];
          } else if (numColors > 1) {
            var dm = _domain[0];
            var dd = _domain[1] - dm;
            result = __range__(0, numColors, false).map(function(i3) {
              return f(dm + i3 / (numColors - 1) * dd);
            });
          } else {
            colors = [];
            var samples = [];
            if (_classes && _classes.length > 2) {
              for (var i2 = 1, end2 = _classes.length, asc = 1 <= end2; asc ? i2 < end2 : i2 > end2; asc ? i2++ : i2--) {
                samples.push((_classes[i2 - 1] + _classes[i2]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v) {
              return f(v);
            });
          }
          if (chroma_1[out]) {
            result = result.map(function(c) {
              return c[out]();
            });
          }
          return result;
        };
        f.cache = function(c) {
          if (c != null) {
            _useCache = c;
            return f;
          } else {
            return _useCache;
          }
        };
        f.gamma = function(g) {
          if (g != null) {
            _gamma = g;
            return f;
          } else {
            return _gamma;
          }
        };
        f.nodata = function(d) {
          if (d != null) {
            _nacol = chroma_1(d);
            return f;
          } else {
            return _nacol;
          }
        };
        return f;
      };
      function __range__(left2, right2, inclusive) {
        var range = [];
        var ascending = left2 < right2;
        var end2 = !inclusive ? right2 : ascending ? right2 + 1 : right2 - 1;
        for (var i2 = left2; ascending ? i2 < end2 : i2 > end2; ascending ? i2++ : i2--) {
          range.push(i2);
        }
        return range;
      }
      var bezier = function(colors) {
        var assign2, assign$1, assign$2;
        var I, lab0, lab1, lab2;
        colors = colors.map(function(c) {
          return new Color_1(c);
        });
        if (colors.length === 2) {
          assign2 = colors.map(function(c) {
            return c.lab();
          }), lab0 = assign2[0], lab1 = assign2[1];
          I = function(t) {
            var lab = [0, 1, 2].map(function(i2) {
              return lab0[i2] + t * (lab1[i2] - lab0[i2]);
            });
            return new Color_1(lab, "lab");
          };
        } else if (colors.length === 3) {
          assign$1 = colors.map(function(c) {
            return c.lab();
          }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2];
          I = function(t) {
            var lab = [0, 1, 2].map(function(i2) {
              return (1 - t) * (1 - t) * lab0[i2] + 2 * (1 - t) * t * lab1[i2] + t * t * lab2[i2];
            });
            return new Color_1(lab, "lab");
          };
        } else if (colors.length === 4) {
          var lab3;
          assign$2 = colors.map(function(c) {
            return c.lab();
          }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3];
          I = function(t) {
            var lab = [0, 1, 2].map(function(i2) {
              return (1 - t) * (1 - t) * (1 - t) * lab0[i2] + 3 * (1 - t) * (1 - t) * t * lab1[i2] + 3 * (1 - t) * t * t * lab2[i2] + t * t * t * lab3[i2];
            });
            return new Color_1(lab, "lab");
          };
        } else if (colors.length === 5) {
          var I0 = bezier(colors.slice(0, 3));
          var I1 = bezier(colors.slice(2, 5));
          I = function(t) {
            if (t < 0.5) {
              return I0(t * 2);
            } else {
              return I1((t - 0.5) * 2);
            }
          };
        }
        return I;
      };
      var bezier_1 = function(colors) {
        var f = bezier(colors);
        f.scale = function() {
          return scale(f);
        };
        return f;
      };
      var blend = function(bottom2, top2, mode) {
        if (!blend[mode]) {
          throw new Error("unknown blend mode " + mode);
        }
        return blend[mode](bottom2, top2);
      };
      var blend_f = function(f) {
        return function(bottom2, top2) {
          var c0 = chroma_1(top2).rgb();
          var c1 = chroma_1(bottom2).rgb();
          return chroma_1.rgb(f(c0, c1));
        };
      };
      var each = function(f) {
        return function(c0, c1) {
          var out = [];
          out[0] = f(c0[0], c1[0]);
          out[1] = f(c0[1], c1[1]);
          out[2] = f(c0[2], c1[2]);
          return out;
        };
      };
      var normal = function(a) {
        return a;
      };
      var multiply = function(a, b) {
        return a * b / 255;
      };
      var darken$1 = function(a, b) {
        return a > b ? b : a;
      };
      var lighten = function(a, b) {
        return a > b ? a : b;
      };
      var screen = function(a, b) {
        return 255 * (1 - (1 - a / 255) * (1 - b / 255));
      };
      var overlay = function(a, b) {
        return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
      };
      var burn = function(a, b) {
        return 255 * (1 - (1 - b / 255) / (a / 255));
      };
      var dodge = function(a, b) {
        if (a === 255) {
          return 255;
        }
        a = 255 * (b / 255) / (1 - a / 255);
        return a > 255 ? 255 : a;
      };
      blend.normal = blend_f(each(normal));
      blend.multiply = blend_f(each(multiply));
      blend.screen = blend_f(each(screen));
      blend.overlay = blend_f(each(overlay));
      blend.darken = blend_f(each(darken$1));
      blend.lighten = blend_f(each(lighten));
      blend.dodge = blend_f(each(dodge));
      blend.burn = blend_f(each(burn));
      var blend_1 = blend;
      var type$k = utils.type;
      var clip_rgb$3 = utils.clip_rgb;
      var TWOPI$2 = utils.TWOPI;
      var pow$6 = Math.pow;
      var sin$2 = Math.sin;
      var cos$3 = Math.cos;
      var cubehelix = function(start2, rotations, hue, gamma, lightness) {
        if (start2 === void 0)
          start2 = 300;
        if (rotations === void 0)
          rotations = -1.5;
        if (hue === void 0)
          hue = 1;
        if (gamma === void 0)
          gamma = 1;
        if (lightness === void 0)
          lightness = [0, 1];
        var dh = 0, dl;
        if (type$k(lightness) === "array") {
          dl = lightness[1] - lightness[0];
        } else {
          dl = 0;
          lightness = [lightness, lightness];
        }
        var f = function(fract) {
          var a = TWOPI$2 * ((start2 + 120) / 360 + rotations * fract);
          var l = pow$6(lightness[0] + dl * fract, gamma);
          var h = dh !== 0 ? hue[0] + fract * dh : hue;
          var amp = h * l * (1 - l) / 2;
          var cos_a = cos$3(a);
          var sin_a = sin$2(a);
          var r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          var g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          var b = l + amp * (1.97294 * cos_a);
          return chroma_1(clip_rgb$3([r * 255, g * 255, b * 255, 1]));
        };
        f.start = function(s) {
          if (s == null) {
            return start2;
          }
          start2 = s;
          return f;
        };
        f.rotations = function(r) {
          if (r == null) {
            return rotations;
          }
          rotations = r;
          return f;
        };
        f.gamma = function(g) {
          if (g == null) {
            return gamma;
          }
          gamma = g;
          return f;
        };
        f.hue = function(h) {
          if (h == null) {
            return hue;
          }
          hue = h;
          if (type$k(hue) === "array") {
            dh = hue[1] - hue[0];
            if (dh === 0) {
              hue = hue[1];
            }
          } else {
            dh = 0;
          }
          return f;
        };
        f.lightness = function(h) {
          if (h == null) {
            return lightness;
          }
          if (type$k(h) === "array") {
            lightness = h;
            dl = h[1] - h[0];
          } else {
            lightness = [h, h];
            dl = 0;
          }
          return f;
        };
        f.scale = function() {
          return chroma_1.scale(f);
        };
        f.hue(hue);
        return f;
      };
      var digits = "0123456789abcdef";
      var floor$2 = Math.floor;
      var random = Math.random;
      var random_1 = function() {
        var code = "#";
        for (var i2 = 0; i2 < 6; i2++) {
          code += digits.charAt(floor$2(random() * 16));
        }
        return new Color_1(code, "hex");
      };
      var log$1 = Math.log;
      var pow$7 = Math.pow;
      var floor$3 = Math.floor;
      var abs = Math.abs;
      var analyze = function(data, key2) {
        if (key2 === void 0)
          key2 = null;
        var r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (type(data) === "object") {
          data = Object.values(data);
        }
        data.forEach(function(val) {
          if (key2 && type(val) === "object") {
            val = val[key2];
          }
          if (val !== void 0 && val !== null && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) {
              r.min = val;
            }
            if (val > r.max) {
              r.max = val;
            }
            r.count += 1;
          }
        });
        r.domain = [r.min, r.max];
        r.limits = function(mode, num) {
          return limits(r, mode, num);
        };
        return r;
      };
      var limits = function(data, mode, num) {
        if (mode === void 0)
          mode = "equal";
        if (num === void 0)
          num = 7;
        if (type(data) == "array") {
          data = analyze(data);
        }
        var min3 = data.min;
        var max3 = data.max;
        var values = data.values.sort(function(a, b) {
          return a - b;
        });
        if (num === 1) {
          return [min3, max3];
        }
        var limits2 = [];
        if (mode.substr(0, 1) === "c") {
          limits2.push(min3);
          limits2.push(max3);
        }
        if (mode.substr(0, 1) === "e") {
          limits2.push(min3);
          for (var i2 = 1; i2 < num; i2++) {
            limits2.push(min3 + i2 / num * (max3 - min3));
          }
          limits2.push(max3);
        } else if (mode.substr(0, 1) === "l") {
          if (min3 <= 0) {
            throw new Error("Logarithmic scales are only possible for values > 0");
          }
          var min_log = Math.LOG10E * log$1(min3);
          var max_log = Math.LOG10E * log$1(max3);
          limits2.push(min3);
          for (var i$12 = 1; i$12 < num; i$12++) {
            limits2.push(pow$7(10, min_log + i$12 / num * (max_log - min_log)));
          }
          limits2.push(max3);
        } else if (mode.substr(0, 1) === "q") {
          limits2.push(min3);
          for (var i$2 = 1; i$2 < num; i$2++) {
            var p = (values.length - 1) * i$2 / num;
            var pb = floor$3(p);
            if (pb === p) {
              limits2.push(values[pb]);
            } else {
              var pr = p - pb;
              limits2.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
            }
          }
          limits2.push(max3);
        } else if (mode.substr(0, 1) === "k") {
          var cluster;
          var n = values.length;
          var assignments = new Array(n);
          var clusterSizes = new Array(num);
          var repeat = true;
          var nb_iters = 0;
          var centroids = null;
          centroids = [];
          centroids.push(min3);
          for (var i$3 = 1; i$3 < num; i$3++) {
            centroids.push(min3 + i$3 / num * (max3 - min3));
          }
          centroids.push(max3);
          while (repeat) {
            for (var j = 0; j < num; j++) {
              clusterSizes[j] = 0;
            }
            for (var i$4 = 0; i$4 < n; i$4++) {
              var value = values[i$4];
              var mindist = Number.MAX_VALUE;
              var best = void 0;
              for (var j$1 = 0; j$1 < num; j$1++) {
                var dist = abs(centroids[j$1] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j$1;
                }
                clusterSizes[best]++;
                assignments[i$4] = best;
              }
            }
            var newCentroids = new Array(num);
            for (var j$2 = 0; j$2 < num; j$2++) {
              newCentroids[j$2] = null;
            }
            for (var i$5 = 0; i$5 < n; i$5++) {
              cluster = assignments[i$5];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i$5];
              } else {
                newCentroids[cluster] += values[i$5];
              }
            }
            for (var j$3 = 0; j$3 < num; j$3++) {
              newCentroids[j$3] *= 1 / clusterSizes[j$3];
            }
            repeat = false;
            for (var j$4 = 0; j$4 < num; j$4++) {
              if (newCentroids[j$4] !== centroids[j$4]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          var kClusters = {};
          for (var j$5 = 0; j$5 < num; j$5++) {
            kClusters[j$5] = [];
          }
          for (var i$6 = 0; i$6 < n; i$6++) {
            cluster = assignments[i$6];
            kClusters[cluster].push(values[i$6]);
          }
          var tmpKMeansBreaks = [];
          for (var j$6 = 0; j$6 < num; j$6++) {
            tmpKMeansBreaks.push(kClusters[j$6][0]);
            tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
            return a - b;
          });
          limits2.push(tmpKMeansBreaks[0]);
          for (var i$7 = 1; i$7 < tmpKMeansBreaks.length; i$7 += 2) {
            var v = tmpKMeansBreaks[i$7];
            if (!isNaN(v) && limits2.indexOf(v) === -1) {
              limits2.push(v);
            }
          }
        }
        return limits2;
      };
      var analyze_1 = { analyze, limits };
      var contrast = function(a, b) {
        a = new Color_1(a);
        b = new Color_1(b);
        var l1 = a.luminance();
        var l2 = b.luminance();
        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
      };
      var sqrt$4 = Math.sqrt;
      var atan2$2 = Math.atan2;
      var abs$1 = Math.abs;
      var cos$4 = Math.cos;
      var PI$2 = Math.PI;
      var deltaE = function(a, b, L, C) {
        if (L === void 0)
          L = 1;
        if (C === void 0)
          C = 1;
        a = new Color_1(a);
        b = new Color_1(b);
        var ref = Array.from(a.lab());
        var L1 = ref[0];
        var a1 = ref[1];
        var b1 = ref[2];
        var ref$1 = Array.from(b.lab());
        var L2 = ref$1[0];
        var a2 = ref$1[1];
        var b2 = ref$1[2];
        var c1 = sqrt$4(a1 * a1 + b1 * b1);
        var c2 = sqrt$4(a2 * a2 + b2 * b2);
        var sl = L1 < 16 ? 0.511 : 0.040975 * L1 / (1 + 0.01765 * L1);
        var sc = 0.0638 * c1 / (1 + 0.0131 * c1) + 0.638;
        var h1 = c1 < 1e-6 ? 0 : atan2$2(b1, a1) * 180 / PI$2;
        while (h1 < 0) {
          h1 += 360;
        }
        while (h1 >= 360) {
          h1 -= 360;
        }
        var t = h1 >= 164 && h1 <= 345 ? 0.56 + abs$1(0.2 * cos$4(PI$2 * (h1 + 168) / 180)) : 0.36 + abs$1(0.4 * cos$4(PI$2 * (h1 + 35) / 180));
        var c4 = c1 * c1 * c1 * c1;
        var f = sqrt$4(c4 / (c4 + 1900));
        var sh = sc * (f * t + 1 - f);
        var delL = L1 - L2;
        var delC = c1 - c2;
        var delA = a1 - a2;
        var delB = b1 - b2;
        var dH2 = delA * delA + delB * delB - delC * delC;
        var v1 = delL / (L * sl);
        var v2 = delC / (C * sc);
        var v3 = sh;
        return sqrt$4(v1 * v1 + v2 * v2 + dH2 / (v3 * v3));
      };
      var distance = function(a, b, mode) {
        if (mode === void 0)
          mode = "lab";
        a = new Color_1(a);
        b = new Color_1(b);
        var l1 = a.get(mode);
        var l2 = b.get(mode);
        var sum_sq = 0;
        for (var i2 in l1) {
          var d = (l1[i2] || 0) - (l2[i2] || 0);
          sum_sq += d * d;
        }
        return Math.sqrt(sum_sq);
      };
      var valid = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        try {
          new (Function.prototype.bind.apply(Color_1, [null].concat(args)))();
          return true;
        } catch (e) {
          return false;
        }
      };
      var scales = {
        cool: function cool() {
          return scale([chroma_1.hsl(180, 1, 0.9), chroma_1.hsl(250, 0.7, 0.4)]);
        },
        hot: function hot() {
          return scale(["#000", "#f00", "#ff0", "#fff"], [0, 0.25, 0.75, 1]).mode("rgb");
        }
      };
      var colorbrewer = {
        OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
        PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
        BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
        Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
        BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
        YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
        YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
        Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
        RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
        Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
        YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
        Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
        GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
        Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
        YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
        PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
        Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
        PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
        Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
        Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
        RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
        RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
        PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
        PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
        RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
        BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
        RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
        PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
        Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
        Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
        Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
        Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
        Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
        Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
        Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
        Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
      };
      for (var i$1 = 0, list$1 = Object.keys(colorbrewer); i$1 < list$1.length; i$1 += 1) {
        var key = list$1[i$1];
        colorbrewer[key.toLowerCase()] = colorbrewer[key];
      }
      var colorbrewer_1 = colorbrewer;
      chroma_1.average = average;
      chroma_1.bezier = bezier_1;
      chroma_1.blend = blend_1;
      chroma_1.cubehelix = cubehelix;
      chroma_1.mix = chroma_1.interpolate = mix;
      chroma_1.random = random_1;
      chroma_1.scale = scale;
      chroma_1.analyze = analyze_1.analyze;
      chroma_1.contrast = contrast;
      chroma_1.deltaE = deltaE;
      chroma_1.distance = distance;
      chroma_1.limits = analyze_1.limits;
      chroma_1.valid = valid;
      chroma_1.scales = scales;
      chroma_1.colors = w3cx11_1;
      chroma_1.brewer = colorbrewer_1;
      var chroma_js = chroma_1;
      return chroma_js;
    });
  }
});

// node_modules/distinct-colors/lib/index.js
var require_lib = __commonJS({
  "node_modules/distinct-colors/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _utils = _interopRequireDefault(require_utils());
    var _deepClone = _interopRequireDefault(require_deepClone());
    var _deepEquals = _interopRequireDefault(require_deepEquals());
    var _chromaJs = _interopRequireDefault(require_chroma());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _createForOfIteratorHelper2(o) {
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (o = _unsupportedIterableToArray2(o))) {
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var it, normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = o[Symbol.iterator]();
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray2(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray2(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray2(o, minLen);
    }
    function _arrayLikeToArray2(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function ownKeys2(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys2(Object(source), true).forEach(function(key) {
            _defineProperty2(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var defaults = {
      count: 5,
      hueMin: 0,
      hueMax: 360,
      chromaMin: 0,
      chromaMax: 100,
      lightMin: 0,
      lightMax: 100,
      quality: 50,
      samples: 800
    };
    var getClosestIndex = function getClosestIndex2(colors, color) {
      var minDist = Number.MAX_SAFE_INTEGER;
      var nearest = 0;
      for (var idx = 0; idx < colors.length; idx += 1) {
        var sample = colors[idx];
        var dist = Math.sqrt(Math.pow(Math.abs(sample[0] - color[0]), 2) + Math.pow(Math.abs(sample[1] - color[1]), 2) + Math.pow(Math.abs(sample[2] - color[2]), 2));
        if (dist < minDist) {
          minDist = dist;
          nearest = idx;
        }
      }
      return nearest;
    };
    var checkColor = function checkColor2(lab, options) {
      var color = _chromaJs["default"].lab(lab);
      var hcl = color.hcl();
      var rgb = color.rgb();
      var compLab = _chromaJs["default"].rgb(rgb).lab();
      var labTolerance = 2;
      return hcl[0] >= options.hueMin && hcl[0] <= options.hueMax && hcl[1] >= options.chromaMin && hcl[1] <= options.chromaMax && hcl[2] >= options.lightMin && hcl[2] <= options.lightMax && compLab[0] >= lab[0] - labTolerance && compLab[0] <= lab[0] + labTolerance && compLab[1] >= lab[1] - labTolerance && compLab[1] <= lab[1] + labTolerance && compLab[2] >= lab[2] - labTolerance && compLab[2] <= lab[2] + labTolerance;
    };
    var sortByContrast = function sortByContrast2(colorList) {
      var unsortedColors = colorList.slice(0);
      var sortedColors = [unsortedColors.shift()];
      while (unsortedColors.length > 0) {
        var lastColor = sortedColors[sortedColors.length - 1];
        var nearest = 0;
        var maxDist = Number.MIN_SAFE_INTEGER;
        for (var i = 0; i < unsortedColors.length; i += 1) {
          var dist = Math.sqrt(Math.pow(Math.abs(lastColor[0] - unsortedColors[i][0]), 2) + Math.pow(Math.abs(lastColor[1] - unsortedColors[i][1]), 2) + Math.pow(Math.abs(lastColor[2] - unsortedColors[i][2]), 2));
          if (dist > maxDist) {
            maxDist = dist;
            nearest = i;
          }
        }
        sortedColors.push(unsortedColors.splice(nearest, 1)[0]);
      }
      return sortedColors;
    };
    var distinctColors = function distinctColors2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var options = _objectSpread({}, defaults, {}, opts);
      if (options.count <= 0) {
        return [];
      }
      if (options.samples < options.count * 3) {
        options.samples = Math.ceil(options.count * 3);
      }
      var colors = [];
      var zonesProto = [];
      var samples = new Set();
      var rangeDivider = Math.ceil(Math.cbrt(options.samples));
      var hStep = (options.hueMax - options.hueMin) / rangeDivider;
      var cStep = (options.chromaMax - options.chromaMin) / rangeDivider;
      var lStep = (options.lightMax - options.lightMin) / rangeDivider;
      if (hStep <= 0) {
        throw new Error("hueMax must be greater than hueMin!");
      }
      if (cStep <= 0) {
        throw new Error("chromaMax must be greater than chromaMin!");
      }
      if (lStep <= 0) {
        throw new Error("lightMax must be greater than lightMin!");
      }
      for (var h = options.hueMin + hStep / 2; h <= options.hueMax; h += hStep) {
        for (var c = options.chromaMin + cStep / 2; c <= options.chromaMax; c += cStep) {
          for (var l = options.lightMin + lStep / 2; l <= options.lightMax; l += lStep) {
            var color = _chromaJs["default"].hcl(h, c, l).lab();
            if (checkColor(color, options)) {
              samples.add(color.toString());
            }
          }
        }
      }
      samples = Array.from(samples);
      samples = samples.map(function(i2) {
        return i2.split(",").map(function(j) {
          return parseFloat(j);
        });
      });
      if (samples.length < options.count) {
        throw new Error("Not enough samples to generate palette, increase sample count.");
      }
      var sliceSize = Math.floor(samples.length / options.count);
      for (var i = 0; i < samples.length; i += sliceSize) {
        colors.push(samples[i]);
        zonesProto.push([]);
        if (colors.length >= options.count) {
          break;
        }
      }
      for (var step = 1; step <= options.quality; step += 1) {
        var zones = (0, _deepClone["default"])(zonesProto);
        var sampleList = (0, _deepClone["default"])(samples);
        for (var _i = 0; _i < colors.length; _i += 1) {
          var idx = getClosestIndex(sampleList, colors[_i]);
          zones[_i].push(sampleList[idx]);
          sampleList.splice(idx, 1);
        }
        for (var _i2 = 0; _i2 < sampleList.length; _i2 += 1) {
          var sample = samples[_i2];
          var nearest = getClosestIndex(colors, sample);
          zones[nearest].push(samples[_i2]);
        }
        var lastColors = (0, _deepClone["default"])(colors);
        for (var _i3 = 0; _i3 < zones.length; _i3 += 1) {
          var zone = zones[_i3];
          var size = zone.length;
          var Ls = [];
          var As = [];
          var Bs = [];
          var _iterator = _createForOfIteratorHelper2(zone), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _sample = _step.value;
              Ls.push(_sample[0]);
              As.push(_sample[1]);
              Bs.push(_sample[2]);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          var lAvg = _utils["default"].sum(Ls) / size;
          var aAvg = _utils["default"].sum(As) / size;
          var bAvg = _utils["default"].sum(Bs) / size;
          colors[_i3] = [lAvg, aAvg, bAvg];
        }
        if ((0, _deepEquals["default"])(lastColors, colors)) {
          break;
        }
      }
      colors = sortByContrast(colors);
      return colors.map(function(lab) {
        return _chromaJs["default"].lab(lab);
      });
    };
    var _default = distinctColors;
    exports["default"] = _default;
  }
});

// node_modules/he/he.js
var require_he = __commonJS({
  "node_modules/he/he.js"(exports, module2) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports;
      var freeModule = typeof module2 == "object" && module2 && module2.exports == freeExports && module2;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root = freeGlobal;
      }
      var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      var regexAsciiWhitelist = /[\x01-\x7F]/g;
      var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
      var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
      var encodeMap = { "\xAD": "shy", "\u200C": "zwnj", "\u200D": "zwj", "\u200E": "lrm", "\u2063": "ic", "\u2062": "it", "\u2061": "af", "\u200F": "rlm", "\u200B": "ZeroWidthSpace", "\u2060": "NoBreak", "\u0311": "DownBreve", "\u20DB": "tdot", "\u20DC": "DotDot", "	": "Tab", "\n": "NewLine", "\u2008": "puncsp", "\u205F": "MediumSpace", "\u2009": "thinsp", "\u200A": "hairsp", "\u2004": "emsp13", "\u2002": "ensp", "\u2005": "emsp14", "\u2003": "emsp", "\u2007": "numsp", "\xA0": "nbsp", "\u205F\u200A": "ThickSpace", "\u203E": "oline", "_": "lowbar", "\u2010": "dash", "\u2013": "ndash", "\u2014": "mdash", "\u2015": "horbar", ",": "comma", ";": "semi", "\u204F": "bsemi", ":": "colon", "\u2A74": "Colone", "!": "excl", "\xA1": "iexcl", "?": "quest", "\xBF": "iquest", ".": "period", "\u2025": "nldr", "\u2026": "mldr", "\xB7": "middot", "'": "apos", "\u2018": "lsquo", "\u2019": "rsquo", "\u201A": "sbquo", "\u2039": "lsaquo", "\u203A": "rsaquo", '"': "quot", "\u201C": "ldquo", "\u201D": "rdquo", "\u201E": "bdquo", "\xAB": "laquo", "\xBB": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "\u2308": "lceil", "\u2309": "rceil", "\u230A": "lfloor", "\u230B": "rfloor", "\u2985": "lopar", "\u2986": "ropar", "\u298B": "lbrke", "\u298C": "rbrke", "\u298D": "lbrkslu", "\u298E": "rbrksld", "\u298F": "lbrksld", "\u2990": "rbrkslu", "\u2991": "langd", "\u2992": "rangd", "\u2993": "lparlt", "\u2994": "rpargt", "\u2995": "gtlPar", "\u2996": "ltrPar", "\u27E6": "lobrk", "\u27E7": "robrk", "\u27E8": "lang", "\u27E9": "rang", "\u27EA": "Lang", "\u27EB": "Rang", "\u27EC": "loang", "\u27ED": "roang", "\u2772": "lbbrk", "\u2773": "rbbrk", "\u2016": "Vert", "\xA7": "sect", "\xB6": "para", "@": "commat", "*": "ast", "/": "sol", "undefined": null, "&": "amp", "#": "num", "%": "percnt", "\u2030": "permil", "\u2031": "pertenk", "\u2020": "dagger", "\u2021": "Dagger", "\u2022": "bull", "\u2043": "hybull", "\u2032": "prime", "\u2033": "Prime", "\u2034": "tprime", "\u2057": "qprime", "\u2035": "bprime", "\u2041": "caret", "`": "grave", "\xB4": "acute", "\u02DC": "tilde", "^": "Hat", "\xAF": "macr", "\u02D8": "breve", "\u02D9": "dot", "\xA8": "die", "\u02DA": "ring", "\u02DD": "dblac", "\xB8": "cedil", "\u02DB": "ogon", "\u02C6": "circ", "\u02C7": "caron", "\xB0": "deg", "\xA9": "copy", "\xAE": "reg", "\u2117": "copysr", "\u2118": "wp", "\u211E": "rx", "\u2127": "mho", "\u2129": "iiota", "\u2190": "larr", "\u219A": "nlarr", "\u2192": "rarr", "\u219B": "nrarr", "\u2191": "uarr", "\u2193": "darr", "\u2194": "harr", "\u21AE": "nharr", "\u2195": "varr", "\u2196": "nwarr", "\u2197": "nearr", "\u2198": "searr", "\u2199": "swarr", "\u219D": "rarrw", "\u219D\u0338": "nrarrw", "\u219E": "Larr", "\u219F": "Uarr", "\u21A0": "Rarr", "\u21A1": "Darr", "\u21A2": "larrtl", "\u21A3": "rarrtl", "\u21A4": "mapstoleft", "\u21A5": "mapstoup", "\u21A6": "map", "\u21A7": "mapstodown", "\u21A9": "larrhk", "\u21AA": "rarrhk", "\u21AB": "larrlp", "\u21AC": "rarrlp", "\u21AD": "harrw", "\u21B0": "lsh", "\u21B1": "rsh", "\u21B2": "ldsh", "\u21B3": "rdsh", "\u21B5": "crarr", "\u21B6": "cularr", "\u21B7": "curarr", "\u21BA": "olarr", "\u21BB": "orarr", "\u21BC": "lharu", "\u21BD": "lhard", "\u21BE": "uharr", "\u21BF": "uharl", "\u21C0": "rharu", "\u21C1": "rhard", "\u21C2": "dharr", "\u21C3": "dharl", "\u21C4": "rlarr", "\u21C5": "udarr", "\u21C6": "lrarr", "\u21C7": "llarr", "\u21C8": "uuarr", "\u21C9": "rrarr", "\u21CA": "ddarr", "\u21CB": "lrhar", "\u21CC": "rlhar", "\u21D0": "lArr", "\u21CD": "nlArr", "\u21D1": "uArr", "\u21D2": "rArr", "\u21CF": "nrArr", "\u21D3": "dArr", "\u21D4": "iff", "\u21CE": "nhArr", "\u21D5": "vArr", "\u21D6": "nwArr", "\u21D7": "neArr", "\u21D8": "seArr", "\u21D9": "swArr", "\u21DA": "lAarr", "\u21DB": "rAarr", "\u21DD": "zigrarr", "\u21E4": "larrb", "\u21E5": "rarrb", "\u21F5": "duarr", "\u21FD": "loarr", "\u21FE": "roarr", "\u21FF": "hoarr", "\u2200": "forall", "\u2201": "comp", "\u2202": "part", "\u2202\u0338": "npart", "\u2203": "exist", "\u2204": "nexist", "\u2205": "empty", "\u2207": "Del", "\u2208": "in", "\u2209": "notin", "\u220B": "ni", "\u220C": "notni", "\u03F6": "bepsi", "\u220F": "prod", "\u2210": "coprod", "\u2211": "sum", "+": "plus", "\xB1": "pm", "\xF7": "div", "\xD7": "times", "<": "lt", "\u226E": "nlt", "<\u20D2": "nvlt", "=": "equals", "\u2260": "ne", "=\u20E5": "bne", "\u2A75": "Equal", ">": "gt", "\u226F": "ngt", ">\u20D2": "nvgt", "\xAC": "not", "|": "vert", "\xA6": "brvbar", "\u2212": "minus", "\u2213": "mp", "\u2214": "plusdo", "\u2044": "frasl", "\u2216": "setmn", "\u2217": "lowast", "\u2218": "compfn", "\u221A": "Sqrt", "\u221D": "prop", "\u221E": "infin", "\u221F": "angrt", "\u2220": "ang", "\u2220\u20D2": "nang", "\u2221": "angmsd", "\u2222": "angsph", "\u2223": "mid", "\u2224": "nmid", "\u2225": "par", "\u2226": "npar", "\u2227": "and", "\u2228": "or", "\u2229": "cap", "\u2229\uFE00": "caps", "\u222A": "cup", "\u222A\uFE00": "cups", "\u222B": "int", "\u222C": "Int", "\u222D": "tint", "\u2A0C": "qint", "\u222E": "oint", "\u222F": "Conint", "\u2230": "Cconint", "\u2231": "cwint", "\u2232": "cwconint", "\u2233": "awconint", "\u2234": "there4", "\u2235": "becaus", "\u2236": "ratio", "\u2237": "Colon", "\u2238": "minusd", "\u223A": "mDDot", "\u223B": "homtht", "\u223C": "sim", "\u2241": "nsim", "\u223C\u20D2": "nvsim", "\u223D": "bsim", "\u223D\u0331": "race", "\u223E": "ac", "\u223E\u0333": "acE", "\u223F": "acd", "\u2240": "wr", "\u2242": "esim", "\u2242\u0338": "nesim", "\u2243": "sime", "\u2244": "nsime", "\u2245": "cong", "\u2247": "ncong", "\u2246": "simne", "\u2248": "ap", "\u2249": "nap", "\u224A": "ape", "\u224B": "apid", "\u224B\u0338": "napid", "\u224C": "bcong", "\u224D": "CupCap", "\u226D": "NotCupCap", "\u224D\u20D2": "nvap", "\u224E": "bump", "\u224E\u0338": "nbump", "\u224F": "bumpe", "\u224F\u0338": "nbumpe", "\u2250": "doteq", "\u2250\u0338": "nedot", "\u2251": "eDot", "\u2252": "efDot", "\u2253": "erDot", "\u2254": "colone", "\u2255": "ecolon", "\u2256": "ecir", "\u2257": "cire", "\u2259": "wedgeq", "\u225A": "veeeq", "\u225C": "trie", "\u225F": "equest", "\u2261": "equiv", "\u2262": "nequiv", "\u2261\u20E5": "bnequiv", "\u2264": "le", "\u2270": "nle", "\u2264\u20D2": "nvle", "\u2265": "ge", "\u2271": "nge", "\u2265\u20D2": "nvge", "\u2266": "lE", "\u2266\u0338": "nlE", "\u2267": "gE", "\u2267\u0338": "ngE", "\u2268\uFE00": "lvnE", "\u2268": "lnE", "\u2269": "gnE", "\u2269\uFE00": "gvnE", "\u226A": "ll", "\u226A\u0338": "nLtv", "\u226A\u20D2": "nLt", "\u226B": "gg", "\u226B\u0338": "nGtv", "\u226B\u20D2": "nGt", "\u226C": "twixt", "\u2272": "lsim", "\u2274": "nlsim", "\u2273": "gsim", "\u2275": "ngsim", "\u2276": "lg", "\u2278": "ntlg", "\u2277": "gl", "\u2279": "ntgl", "\u227A": "pr", "\u2280": "npr", "\u227B": "sc", "\u2281": "nsc", "\u227C": "prcue", "\u22E0": "nprcue", "\u227D": "sccue", "\u22E1": "nsccue", "\u227E": "prsim", "\u227F": "scsim", "\u227F\u0338": "NotSucceedsTilde", "\u2282": "sub", "\u2284": "nsub", "\u2282\u20D2": "vnsub", "\u2283": "sup", "\u2285": "nsup", "\u2283\u20D2": "vnsup", "\u2286": "sube", "\u2288": "nsube", "\u2287": "supe", "\u2289": "nsupe", "\u228A\uFE00": "vsubne", "\u228A": "subne", "\u228B\uFE00": "vsupne", "\u228B": "supne", "\u228D": "cupdot", "\u228E": "uplus", "\u228F": "sqsub", "\u228F\u0338": "NotSquareSubset", "\u2290": "sqsup", "\u2290\u0338": "NotSquareSuperset", "\u2291": "sqsube", "\u22E2": "nsqsube", "\u2292": "sqsupe", "\u22E3": "nsqsupe", "\u2293": "sqcap", "\u2293\uFE00": "sqcaps", "\u2294": "sqcup", "\u2294\uFE00": "sqcups", "\u2295": "oplus", "\u2296": "ominus", "\u2297": "otimes", "\u2298": "osol", "\u2299": "odot", "\u229A": "ocir", "\u229B": "oast", "\u229D": "odash", "\u229E": "plusb", "\u229F": "minusb", "\u22A0": "timesb", "\u22A1": "sdotb", "\u22A2": "vdash", "\u22AC": "nvdash", "\u22A3": "dashv", "\u22A4": "top", "\u22A5": "bot", "\u22A7": "models", "\u22A8": "vDash", "\u22AD": "nvDash", "\u22A9": "Vdash", "\u22AE": "nVdash", "\u22AA": "Vvdash", "\u22AB": "VDash", "\u22AF": "nVDash", "\u22B0": "prurel", "\u22B2": "vltri", "\u22EA": "nltri", "\u22B3": "vrtri", "\u22EB": "nrtri", "\u22B4": "ltrie", "\u22EC": "nltrie", "\u22B4\u20D2": "nvltrie", "\u22B5": "rtrie", "\u22ED": "nrtrie", "\u22B5\u20D2": "nvrtrie", "\u22B6": "origof", "\u22B7": "imof", "\u22B8": "mumap", "\u22B9": "hercon", "\u22BA": "intcal", "\u22BB": "veebar", "\u22BD": "barvee", "\u22BE": "angrtvb", "\u22BF": "lrtri", "\u22C0": "Wedge", "\u22C1": "Vee", "\u22C2": "xcap", "\u22C3": "xcup", "\u22C4": "diam", "\u22C5": "sdot", "\u22C6": "Star", "\u22C7": "divonx", "\u22C8": "bowtie", "\u22C9": "ltimes", "\u22CA": "rtimes", "\u22CB": "lthree", "\u22CC": "rthree", "\u22CD": "bsime", "\u22CE": "cuvee", "\u22CF": "cuwed", "\u22D0": "Sub", "\u22D1": "Sup", "\u22D2": "Cap", "\u22D3": "Cup", "\u22D4": "fork", "\u22D5": "epar", "\u22D6": "ltdot", "\u22D7": "gtdot", "\u22D8": "Ll", "\u22D8\u0338": "nLl", "\u22D9": "Gg", "\u22D9\u0338": "nGg", "\u22DA\uFE00": "lesg", "\u22DA": "leg", "\u22DB": "gel", "\u22DB\uFE00": "gesl", "\u22DE": "cuepr", "\u22DF": "cuesc", "\u22E6": "lnsim", "\u22E7": "gnsim", "\u22E8": "prnsim", "\u22E9": "scnsim", "\u22EE": "vellip", "\u22EF": "ctdot", "\u22F0": "utdot", "\u22F1": "dtdot", "\u22F2": "disin", "\u22F3": "isinsv", "\u22F4": "isins", "\u22F5": "isindot", "\u22F5\u0338": "notindot", "\u22F6": "notinvc", "\u22F7": "notinvb", "\u22F9": "isinE", "\u22F9\u0338": "notinE", "\u22FA": "nisd", "\u22FB": "xnis", "\u22FC": "nis", "\u22FD": "notnivc", "\u22FE": "notnivb", "\u2305": "barwed", "\u2306": "Barwed", "\u230C": "drcrop", "\u230D": "dlcrop", "\u230E": "urcrop", "\u230F": "ulcrop", "\u2310": "bnot", "\u2312": "profline", "\u2313": "profsurf", "\u2315": "telrec", "\u2316": "target", "\u231C": "ulcorn", "\u231D": "urcorn", "\u231E": "dlcorn", "\u231F": "drcorn", "\u2322": "frown", "\u2323": "smile", "\u232D": "cylcty", "\u232E": "profalar", "\u2336": "topbot", "\u233D": "ovbar", "\u233F": "solbar", "\u237C": "angzarr", "\u23B0": "lmoust", "\u23B1": "rmoust", "\u23B4": "tbrk", "\u23B5": "bbrk", "\u23B6": "bbrktbrk", "\u23DC": "OverParenthesis", "\u23DD": "UnderParenthesis", "\u23DE": "OverBrace", "\u23DF": "UnderBrace", "\u23E2": "trpezium", "\u23E7": "elinters", "\u2423": "blank", "\u2500": "boxh", "\u2502": "boxv", "\u250C": "boxdr", "\u2510": "boxdl", "\u2514": "boxur", "\u2518": "boxul", "\u251C": "boxvr", "\u2524": "boxvl", "\u252C": "boxhd", "\u2534": "boxhu", "\u253C": "boxvh", "\u2550": "boxH", "\u2551": "boxV", "\u2552": "boxdR", "\u2553": "boxDr", "\u2554": "boxDR", "\u2555": "boxdL", "\u2556": "boxDl", "\u2557": "boxDL", "\u2558": "boxuR", "\u2559": "boxUr", "\u255A": "boxUR", "\u255B": "boxuL", "\u255C": "boxUl", "\u255D": "boxUL", "\u255E": "boxvR", "\u255F": "boxVr", "\u2560": "boxVR", "\u2561": "boxvL", "\u2562": "boxVl", "\u2563": "boxVL", "\u2564": "boxHd", "\u2565": "boxhD", "\u2566": "boxHD", "\u2567": "boxHu", "\u2568": "boxhU", "\u2569": "boxHU", "\u256A": "boxvH", "\u256B": "boxVh", "\u256C": "boxVH", "\u2580": "uhblk", "\u2584": "lhblk", "\u2588": "block", "\u2591": "blk14", "\u2592": "blk12", "\u2593": "blk34", "\u25A1": "squ", "\u25AA": "squf", "\u25AB": "EmptyVerySmallSquare", "\u25AD": "rect", "\u25AE": "marker", "\u25B1": "fltns", "\u25B3": "xutri", "\u25B4": "utrif", "\u25B5": "utri", "\u25B8": "rtrif", "\u25B9": "rtri", "\u25BD": "xdtri", "\u25BE": "dtrif", "\u25BF": "dtri", "\u25C2": "ltrif", "\u25C3": "ltri", "\u25CA": "loz", "\u25CB": "cir", "\u25EC": "tridot", "\u25EF": "xcirc", "\u25F8": "ultri", "\u25F9": "urtri", "\u25FA": "lltri", "\u25FB": "EmptySmallSquare", "\u25FC": "FilledSmallSquare", "\u2605": "starf", "\u2606": "star", "\u260E": "phone", "\u2640": "female", "\u2642": "male", "\u2660": "spades", "\u2663": "clubs", "\u2665": "hearts", "\u2666": "diams", "\u266A": "sung", "\u2713": "check", "\u2717": "cross", "\u2720": "malt", "\u2736": "sext", "\u2758": "VerticalSeparator", "\u27C8": "bsolhsub", "\u27C9": "suphsol", "\u27F5": "xlarr", "\u27F6": "xrarr", "\u27F7": "xharr", "\u27F8": "xlArr", "\u27F9": "xrArr", "\u27FA": "xhArr", "\u27FC": "xmap", "\u27FF": "dzigrarr", "\u2902": "nvlArr", "\u2903": "nvrArr", "\u2904": "nvHarr", "\u2905": "Map", "\u290C": "lbarr", "\u290D": "rbarr", "\u290E": "lBarr", "\u290F": "rBarr", "\u2910": "RBarr", "\u2911": "DDotrahd", "\u2912": "UpArrowBar", "\u2913": "DownArrowBar", "\u2916": "Rarrtl", "\u2919": "latail", "\u291A": "ratail", "\u291B": "lAtail", "\u291C": "rAtail", "\u291D": "larrfs", "\u291E": "rarrfs", "\u291F": "larrbfs", "\u2920": "rarrbfs", "\u2923": "nwarhk", "\u2924": "nearhk", "\u2925": "searhk", "\u2926": "swarhk", "\u2927": "nwnear", "\u2928": "toea", "\u2929": "tosa", "\u292A": "swnwar", "\u2933": "rarrc", "\u2933\u0338": "nrarrc", "\u2935": "cudarrr", "\u2936": "ldca", "\u2937": "rdca", "\u2938": "cudarrl", "\u2939": "larrpl", "\u293C": "curarrm", "\u293D": "cularrp", "\u2945": "rarrpl", "\u2948": "harrcir", "\u2949": "Uarrocir", "\u294A": "lurdshar", "\u294B": "ldrushar", "\u294E": "LeftRightVector", "\u294F": "RightUpDownVector", "\u2950": "DownLeftRightVector", "\u2951": "LeftUpDownVector", "\u2952": "LeftVectorBar", "\u2953": "RightVectorBar", "\u2954": "RightUpVectorBar", "\u2955": "RightDownVectorBar", "\u2956": "DownLeftVectorBar", "\u2957": "DownRightVectorBar", "\u2958": "LeftUpVectorBar", "\u2959": "LeftDownVectorBar", "\u295A": "LeftTeeVector", "\u295B": "RightTeeVector", "\u295C": "RightUpTeeVector", "\u295D": "RightDownTeeVector", "\u295E": "DownLeftTeeVector", "\u295F": "DownRightTeeVector", "\u2960": "LeftUpTeeVector", "\u2961": "LeftDownTeeVector", "\u2962": "lHar", "\u2963": "uHar", "\u2964": "rHar", "\u2965": "dHar", "\u2966": "luruhar", "\u2967": "ldrdhar", "\u2968": "ruluhar", "\u2969": "rdldhar", "\u296A": "lharul", "\u296B": "llhard", "\u296C": "rharul", "\u296D": "lrhard", "\u296E": "udhar", "\u296F": "duhar", "\u2970": "RoundImplies", "\u2971": "erarr", "\u2972": "simrarr", "\u2973": "larrsim", "\u2974": "rarrsim", "\u2975": "rarrap", "\u2976": "ltlarr", "\u2978": "gtrarr", "\u2979": "subrarr", "\u297B": "suplarr", "\u297C": "lfisht", "\u297D": "rfisht", "\u297E": "ufisht", "\u297F": "dfisht", "\u299A": "vzigzag", "\u299C": "vangrt", "\u299D": "angrtvbd", "\u29A4": "ange", "\u29A5": "range", "\u29A6": "dwangle", "\u29A7": "uwangle", "\u29A8": "angmsdaa", "\u29A9": "angmsdab", "\u29AA": "angmsdac", "\u29AB": "angmsdad", "\u29AC": "angmsdae", "\u29AD": "angmsdaf", "\u29AE": "angmsdag", "\u29AF": "angmsdah", "\u29B0": "bemptyv", "\u29B1": "demptyv", "\u29B2": "cemptyv", "\u29B3": "raemptyv", "\u29B4": "laemptyv", "\u29B5": "ohbar", "\u29B6": "omid", "\u29B7": "opar", "\u29B9": "operp", "\u29BB": "olcross", "\u29BC": "odsold", "\u29BE": "olcir", "\u29BF": "ofcir", "\u29C0": "olt", "\u29C1": "ogt", "\u29C2": "cirscir", "\u29C3": "cirE", "\u29C4": "solb", "\u29C5": "bsolb", "\u29C9": "boxbox", "\u29CD": "trisb", "\u29CE": "rtriltri", "\u29CF": "LeftTriangleBar", "\u29CF\u0338": "NotLeftTriangleBar", "\u29D0": "RightTriangleBar", "\u29D0\u0338": "NotRightTriangleBar", "\u29DC": "iinfin", "\u29DD": "infintie", "\u29DE": "nvinfin", "\u29E3": "eparsl", "\u29E4": "smeparsl", "\u29E5": "eqvparsl", "\u29EB": "lozf", "\u29F4": "RuleDelayed", "\u29F6": "dsol", "\u2A00": "xodot", "\u2A01": "xoplus", "\u2A02": "xotime", "\u2A04": "xuplus", "\u2A06": "xsqcup", "\u2A0D": "fpartint", "\u2A10": "cirfnint", "\u2A11": "awint", "\u2A12": "rppolint", "\u2A13": "scpolint", "\u2A14": "npolint", "\u2A15": "pointint", "\u2A16": "quatint", "\u2A17": "intlarhk", "\u2A22": "pluscir", "\u2A23": "plusacir", "\u2A24": "simplus", "\u2A25": "plusdu", "\u2A26": "plussim", "\u2A27": "plustwo", "\u2A29": "mcomma", "\u2A2A": "minusdu", "\u2A2D": "loplus", "\u2A2E": "roplus", "\u2A2F": "Cross", "\u2A30": "timesd", "\u2A31": "timesbar", "\u2A33": "smashp", "\u2A34": "lotimes", "\u2A35": "rotimes", "\u2A36": "otimesas", "\u2A37": "Otimes", "\u2A38": "odiv", "\u2A39": "triplus", "\u2A3A": "triminus", "\u2A3B": "tritime", "\u2A3C": "iprod", "\u2A3F": "amalg", "\u2A40": "capdot", "\u2A42": "ncup", "\u2A43": "ncap", "\u2A44": "capand", "\u2A45": "cupor", "\u2A46": "cupcap", "\u2A47": "capcup", "\u2A48": "cupbrcap", "\u2A49": "capbrcup", "\u2A4A": "cupcup", "\u2A4B": "capcap", "\u2A4C": "ccups", "\u2A4D": "ccaps", "\u2A50": "ccupssm", "\u2A53": "And", "\u2A54": "Or", "\u2A55": "andand", "\u2A56": "oror", "\u2A57": "orslope", "\u2A58": "andslope", "\u2A5A": "andv", "\u2A5B": "orv", "\u2A5C": "andd", "\u2A5D": "ord", "\u2A5F": "wedbar", "\u2A66": "sdote", "\u2A6A": "simdot", "\u2A6D": "congdot", "\u2A6D\u0338": "ncongdot", "\u2A6E": "easter", "\u2A6F": "apacir", "\u2A70": "apE", "\u2A70\u0338": "napE", "\u2A71": "eplus", "\u2A72": "pluse", "\u2A73": "Esim", "\u2A77": "eDDot", "\u2A78": "equivDD", "\u2A79": "ltcir", "\u2A7A": "gtcir", "\u2A7B": "ltquest", "\u2A7C": "gtquest", "\u2A7D": "les", "\u2A7D\u0338": "nles", "\u2A7E": "ges", "\u2A7E\u0338": "nges", "\u2A7F": "lesdot", "\u2A80": "gesdot", "\u2A81": "lesdoto", "\u2A82": "gesdoto", "\u2A83": "lesdotor", "\u2A84": "gesdotol", "\u2A85": "lap", "\u2A86": "gap", "\u2A87": "lne", "\u2A88": "gne", "\u2A89": "lnap", "\u2A8A": "gnap", "\u2A8B": "lEg", "\u2A8C": "gEl", "\u2A8D": "lsime", "\u2A8E": "gsime", "\u2A8F": "lsimg", "\u2A90": "gsiml", "\u2A91": "lgE", "\u2A92": "glE", "\u2A93": "lesges", "\u2A94": "gesles", "\u2A95": "els", "\u2A96": "egs", "\u2A97": "elsdot", "\u2A98": "egsdot", "\u2A99": "el", "\u2A9A": "eg", "\u2A9D": "siml", "\u2A9E": "simg", "\u2A9F": "simlE", "\u2AA0": "simgE", "\u2AA1": "LessLess", "\u2AA1\u0338": "NotNestedLessLess", "\u2AA2": "GreaterGreater", "\u2AA2\u0338": "NotNestedGreaterGreater", "\u2AA4": "glj", "\u2AA5": "gla", "\u2AA6": "ltcc", "\u2AA7": "gtcc", "\u2AA8": "lescc", "\u2AA9": "gescc", "\u2AAA": "smt", "\u2AAB": "lat", "\u2AAC": "smte", "\u2AAC\uFE00": "smtes", "\u2AAD": "late", "\u2AAD\uFE00": "lates", "\u2AAE": "bumpE", "\u2AAF": "pre", "\u2AAF\u0338": "npre", "\u2AB0": "sce", "\u2AB0\u0338": "nsce", "\u2AB3": "prE", "\u2AB4": "scE", "\u2AB5": "prnE", "\u2AB6": "scnE", "\u2AB7": "prap", "\u2AB8": "scap", "\u2AB9": "prnap", "\u2ABA": "scnap", "\u2ABB": "Pr", "\u2ABC": "Sc", "\u2ABD": "subdot", "\u2ABE": "supdot", "\u2ABF": "subplus", "\u2AC0": "supplus", "\u2AC1": "submult", "\u2AC2": "supmult", "\u2AC3": "subedot", "\u2AC4": "supedot", "\u2AC5": "subE", "\u2AC5\u0338": "nsubE", "\u2AC6": "supE", "\u2AC6\u0338": "nsupE", "\u2AC7": "subsim", "\u2AC8": "supsim", "\u2ACB\uFE00": "vsubnE", "\u2ACB": "subnE", "\u2ACC\uFE00": "vsupnE", "\u2ACC": "supnE", "\u2ACF": "csub", "\u2AD0": "csup", "\u2AD1": "csube", "\u2AD2": "csupe", "\u2AD3": "subsup", "\u2AD4": "supsub", "\u2AD5": "subsub", "\u2AD6": "supsup", "\u2AD7": "suphsub", "\u2AD8": "supdsub", "\u2AD9": "forkv", "\u2ADA": "topfork", "\u2ADB": "mlcp", "\u2AE4": "Dashv", "\u2AE6": "Vdashl", "\u2AE7": "Barv", "\u2AE8": "vBar", "\u2AE9": "vBarv", "\u2AEB": "Vbar", "\u2AEC": "Not", "\u2AED": "bNot", "\u2AEE": "rnmid", "\u2AEF": "cirmid", "\u2AF0": "midcir", "\u2AF1": "topcir", "\u2AF2": "nhpar", "\u2AF3": "parsim", "\u2AFD": "parsl", "\u2AFD\u20E5": "nparsl", "\u266D": "flat", "\u266E": "natur", "\u266F": "sharp", "\xA4": "curren", "\xA2": "cent", "$": "dollar", "\xA3": "pound", "\xA5": "yen", "\u20AC": "euro", "\xB9": "sup1", "\xBD": "half", "\u2153": "frac13", "\xBC": "frac14", "\u2155": "frac15", "\u2159": "frac16", "\u215B": "frac18", "\xB2": "sup2", "\u2154": "frac23", "\u2156": "frac25", "\xB3": "sup3", "\xBE": "frac34", "\u2157": "frac35", "\u215C": "frac38", "\u2158": "frac45", "\u215A": "frac56", "\u215D": "frac58", "\u215E": "frac78", "\u{1D4B6}": "ascr", "\u{1D552}": "aopf", "\u{1D51E}": "afr", "\u{1D538}": "Aopf", "\u{1D504}": "Afr", "\u{1D49C}": "Ascr", "\xAA": "ordf", "\xE1": "aacute", "\xC1": "Aacute", "\xE0": "agrave", "\xC0": "Agrave", "\u0103": "abreve", "\u0102": "Abreve", "\xE2": "acirc", "\xC2": "Acirc", "\xE5": "aring", "\xC5": "angst", "\xE4": "auml", "\xC4": "Auml", "\xE3": "atilde", "\xC3": "Atilde", "\u0105": "aogon", "\u0104": "Aogon", "\u0101": "amacr", "\u0100": "Amacr", "\xE6": "aelig", "\xC6": "AElig", "\u{1D4B7}": "bscr", "\u{1D553}": "bopf", "\u{1D51F}": "bfr", "\u{1D539}": "Bopf", "\u212C": "Bscr", "\u{1D505}": "Bfr", "\u{1D520}": "cfr", "\u{1D4B8}": "cscr", "\u{1D554}": "copf", "\u212D": "Cfr", "\u{1D49E}": "Cscr", "\u2102": "Copf", "\u0107": "cacute", "\u0106": "Cacute", "\u0109": "ccirc", "\u0108": "Ccirc", "\u010D": "ccaron", "\u010C": "Ccaron", "\u010B": "cdot", "\u010A": "Cdot", "\xE7": "ccedil", "\xC7": "Ccedil", "\u2105": "incare", "\u{1D521}": "dfr", "\u2146": "dd", "\u{1D555}": "dopf", "\u{1D4B9}": "dscr", "\u{1D49F}": "Dscr", "\u{1D507}": "Dfr", "\u2145": "DD", "\u{1D53B}": "Dopf", "\u010F": "dcaron", "\u010E": "Dcaron", "\u0111": "dstrok", "\u0110": "Dstrok", "\xF0": "eth", "\xD0": "ETH", "\u2147": "ee", "\u212F": "escr", "\u{1D522}": "efr", "\u{1D556}": "eopf", "\u2130": "Escr", "\u{1D508}": "Efr", "\u{1D53C}": "Eopf", "\xE9": "eacute", "\xC9": "Eacute", "\xE8": "egrave", "\xC8": "Egrave", "\xEA": "ecirc", "\xCA": "Ecirc", "\u011B": "ecaron", "\u011A": "Ecaron", "\xEB": "euml", "\xCB": "Euml", "\u0117": "edot", "\u0116": "Edot", "\u0119": "eogon", "\u0118": "Eogon", "\u0113": "emacr", "\u0112": "Emacr", "\u{1D523}": "ffr", "\u{1D557}": "fopf", "\u{1D4BB}": "fscr", "\u{1D509}": "Ffr", "\u{1D53D}": "Fopf", "\u2131": "Fscr", "\uFB00": "fflig", "\uFB03": "ffilig", "\uFB04": "ffllig", "\uFB01": "filig", "fj": "fjlig", "\uFB02": "fllig", "\u0192": "fnof", "\u210A": "gscr", "\u{1D558}": "gopf", "\u{1D524}": "gfr", "\u{1D4A2}": "Gscr", "\u{1D53E}": "Gopf", "\u{1D50A}": "Gfr", "\u01F5": "gacute", "\u011F": "gbreve", "\u011E": "Gbreve", "\u011D": "gcirc", "\u011C": "Gcirc", "\u0121": "gdot", "\u0120": "Gdot", "\u0122": "Gcedil", "\u{1D525}": "hfr", "\u210E": "planckh", "\u{1D4BD}": "hscr", "\u{1D559}": "hopf", "\u210B": "Hscr", "\u210C": "Hfr", "\u210D": "Hopf", "\u0125": "hcirc", "\u0124": "Hcirc", "\u210F": "hbar", "\u0127": "hstrok", "\u0126": "Hstrok", "\u{1D55A}": "iopf", "\u{1D526}": "ifr", "\u{1D4BE}": "iscr", "\u2148": "ii", "\u{1D540}": "Iopf", "\u2110": "Iscr", "\u2111": "Im", "\xED": "iacute", "\xCD": "Iacute", "\xEC": "igrave", "\xCC": "Igrave", "\xEE": "icirc", "\xCE": "Icirc", "\xEF": "iuml", "\xCF": "Iuml", "\u0129": "itilde", "\u0128": "Itilde", "\u0130": "Idot", "\u012F": "iogon", "\u012E": "Iogon", "\u012B": "imacr", "\u012A": "Imacr", "\u0133": "ijlig", "\u0132": "IJlig", "\u0131": "imath", "\u{1D4BF}": "jscr", "\u{1D55B}": "jopf", "\u{1D527}": "jfr", "\u{1D4A5}": "Jscr", "\u{1D50D}": "Jfr", "\u{1D541}": "Jopf", "\u0135": "jcirc", "\u0134": "Jcirc", "\u0237": "jmath", "\u{1D55C}": "kopf", "\u{1D4C0}": "kscr", "\u{1D528}": "kfr", "\u{1D4A6}": "Kscr", "\u{1D542}": "Kopf", "\u{1D50E}": "Kfr", "\u0137": "kcedil", "\u0136": "Kcedil", "\u{1D529}": "lfr", "\u{1D4C1}": "lscr", "\u2113": "ell", "\u{1D55D}": "lopf", "\u2112": "Lscr", "\u{1D50F}": "Lfr", "\u{1D543}": "Lopf", "\u013A": "lacute", "\u0139": "Lacute", "\u013E": "lcaron", "\u013D": "Lcaron", "\u013C": "lcedil", "\u013B": "Lcedil", "\u0142": "lstrok", "\u0141": "Lstrok", "\u0140": "lmidot", "\u013F": "Lmidot", "\u{1D52A}": "mfr", "\u{1D55E}": "mopf", "\u{1D4C2}": "mscr", "\u{1D510}": "Mfr", "\u{1D544}": "Mopf", "\u2133": "Mscr", "\u{1D52B}": "nfr", "\u{1D55F}": "nopf", "\u{1D4C3}": "nscr", "\u2115": "Nopf", "\u{1D4A9}": "Nscr", "\u{1D511}": "Nfr", "\u0144": "nacute", "\u0143": "Nacute", "\u0148": "ncaron", "\u0147": "Ncaron", "\xF1": "ntilde", "\xD1": "Ntilde", "\u0146": "ncedil", "\u0145": "Ncedil", "\u2116": "numero", "\u014B": "eng", "\u014A": "ENG", "\u{1D560}": "oopf", "\u{1D52C}": "ofr", "\u2134": "oscr", "\u{1D4AA}": "Oscr", "\u{1D512}": "Ofr", "\u{1D546}": "Oopf", "\xBA": "ordm", "\xF3": "oacute", "\xD3": "Oacute", "\xF2": "ograve", "\xD2": "Ograve", "\xF4": "ocirc", "\xD4": "Ocirc", "\xF6": "ouml", "\xD6": "Ouml", "\u0151": "odblac", "\u0150": "Odblac", "\xF5": "otilde", "\xD5": "Otilde", "\xF8": "oslash", "\xD8": "Oslash", "\u014D": "omacr", "\u014C": "Omacr", "\u0153": "oelig", "\u0152": "OElig", "\u{1D52D}": "pfr", "\u{1D4C5}": "pscr", "\u{1D561}": "popf", "\u2119": "Popf", "\u{1D513}": "Pfr", "\u{1D4AB}": "Pscr", "\u{1D562}": "qopf", "\u{1D52E}": "qfr", "\u{1D4C6}": "qscr", "\u{1D4AC}": "Qscr", "\u{1D514}": "Qfr", "\u211A": "Qopf", "\u0138": "kgreen", "\u{1D52F}": "rfr", "\u{1D563}": "ropf", "\u{1D4C7}": "rscr", "\u211B": "Rscr", "\u211C": "Re", "\u211D": "Ropf", "\u0155": "racute", "\u0154": "Racute", "\u0159": "rcaron", "\u0158": "Rcaron", "\u0157": "rcedil", "\u0156": "Rcedil", "\u{1D564}": "sopf", "\u{1D4C8}": "sscr", "\u{1D530}": "sfr", "\u{1D54A}": "Sopf", "\u{1D516}": "Sfr", "\u{1D4AE}": "Sscr", "\u24C8": "oS", "\u015B": "sacute", "\u015A": "Sacute", "\u015D": "scirc", "\u015C": "Scirc", "\u0161": "scaron", "\u0160": "Scaron", "\u015F": "scedil", "\u015E": "Scedil", "\xDF": "szlig", "\u{1D531}": "tfr", "\u{1D4C9}": "tscr", "\u{1D565}": "topf", "\u{1D4AF}": "Tscr", "\u{1D517}": "Tfr", "\u{1D54B}": "Topf", "\u0165": "tcaron", "\u0164": "Tcaron", "\u0163": "tcedil", "\u0162": "Tcedil", "\u2122": "trade", "\u0167": "tstrok", "\u0166": "Tstrok", "\u{1D4CA}": "uscr", "\u{1D566}": "uopf", "\u{1D532}": "ufr", "\u{1D54C}": "Uopf", "\u{1D518}": "Ufr", "\u{1D4B0}": "Uscr", "\xFA": "uacute", "\xDA": "Uacute", "\xF9": "ugrave", "\xD9": "Ugrave", "\u016D": "ubreve", "\u016C": "Ubreve", "\xFB": "ucirc", "\xDB": "Ucirc", "\u016F": "uring", "\u016E": "Uring", "\xFC": "uuml", "\xDC": "Uuml", "\u0171": "udblac", "\u0170": "Udblac", "\u0169": "utilde", "\u0168": "Utilde", "\u0173": "uogon", "\u0172": "Uogon", "\u016B": "umacr", "\u016A": "Umacr", "\u{1D533}": "vfr", "\u{1D567}": "vopf", "\u{1D4CB}": "vscr", "\u{1D519}": "Vfr", "\u{1D54D}": "Vopf", "\u{1D4B1}": "Vscr", "\u{1D568}": "wopf", "\u{1D4CC}": "wscr", "\u{1D534}": "wfr", "\u{1D4B2}": "Wscr", "\u{1D54E}": "Wopf", "\u{1D51A}": "Wfr", "\u0175": "wcirc", "\u0174": "Wcirc", "\u{1D535}": "xfr", "\u{1D4CD}": "xscr", "\u{1D569}": "xopf", "\u{1D54F}": "Xopf", "\u{1D51B}": "Xfr", "\u{1D4B3}": "Xscr", "\u{1D536}": "yfr", "\u{1D4CE}": "yscr", "\u{1D56A}": "yopf", "\u{1D4B4}": "Yscr", "\u{1D51C}": "Yfr", "\u{1D550}": "Yopf", "\xFD": "yacute", "\xDD": "Yacute", "\u0177": "ycirc", "\u0176": "Ycirc", "\xFF": "yuml", "\u0178": "Yuml", "\u{1D4CF}": "zscr", "\u{1D537}": "zfr", "\u{1D56B}": "zopf", "\u2128": "Zfr", "\u2124": "Zopf", "\u{1D4B5}": "Zscr", "\u017A": "zacute", "\u0179": "Zacute", "\u017E": "zcaron", "\u017D": "Zcaron", "\u017C": "zdot", "\u017B": "Zdot", "\u01B5": "imped", "\xFE": "thorn", "\xDE": "THORN", "\u0149": "napos", "\u03B1": "alpha", "\u0391": "Alpha", "\u03B2": "beta", "\u0392": "Beta", "\u03B3": "gamma", "\u0393": "Gamma", "\u03B4": "delta", "\u0394": "Delta", "\u03B5": "epsi", "\u03F5": "epsiv", "\u0395": "Epsilon", "\u03DD": "gammad", "\u03DC": "Gammad", "\u03B6": "zeta", "\u0396": "Zeta", "\u03B7": "eta", "\u0397": "Eta", "\u03B8": "theta", "\u03D1": "thetav", "\u0398": "Theta", "\u03B9": "iota", "\u0399": "Iota", "\u03BA": "kappa", "\u03F0": "kappav", "\u039A": "Kappa", "\u03BB": "lambda", "\u039B": "Lambda", "\u03BC": "mu", "\xB5": "micro", "\u039C": "Mu", "\u03BD": "nu", "\u039D": "Nu", "\u03BE": "xi", "\u039E": "Xi", "\u03BF": "omicron", "\u039F": "Omicron", "\u03C0": "pi", "\u03D6": "piv", "\u03A0": "Pi", "\u03C1": "rho", "\u03F1": "rhov", "\u03A1": "Rho", "\u03C3": "sigma", "\u03A3": "Sigma", "\u03C2": "sigmaf", "\u03C4": "tau", "\u03A4": "Tau", "\u03C5": "upsi", "\u03A5": "Upsilon", "\u03D2": "Upsi", "\u03C6": "phi", "\u03D5": "phiv", "\u03A6": "Phi", "\u03C7": "chi", "\u03A7": "Chi", "\u03C8": "psi", "\u03A8": "Psi", "\u03C9": "omega", "\u03A9": "ohm", "\u0430": "acy", "\u0410": "Acy", "\u0431": "bcy", "\u0411": "Bcy", "\u0432": "vcy", "\u0412": "Vcy", "\u0433": "gcy", "\u0413": "Gcy", "\u0453": "gjcy", "\u0403": "GJcy", "\u0434": "dcy", "\u0414": "Dcy", "\u0452": "djcy", "\u0402": "DJcy", "\u0435": "iecy", "\u0415": "IEcy", "\u0451": "iocy", "\u0401": "IOcy", "\u0454": "jukcy", "\u0404": "Jukcy", "\u0436": "zhcy", "\u0416": "ZHcy", "\u0437": "zcy", "\u0417": "Zcy", "\u0455": "dscy", "\u0405": "DScy", "\u0438": "icy", "\u0418": "Icy", "\u0456": "iukcy", "\u0406": "Iukcy", "\u0457": "yicy", "\u0407": "YIcy", "\u0439": "jcy", "\u0419": "Jcy", "\u0458": "jsercy", "\u0408": "Jsercy", "\u043A": "kcy", "\u041A": "Kcy", "\u045C": "kjcy", "\u040C": "KJcy", "\u043B": "lcy", "\u041B": "Lcy", "\u0459": "ljcy", "\u0409": "LJcy", "\u043C": "mcy", "\u041C": "Mcy", "\u043D": "ncy", "\u041D": "Ncy", "\u045A": "njcy", "\u040A": "NJcy", "\u043E": "ocy", "\u041E": "Ocy", "\u043F": "pcy", "\u041F": "Pcy", "\u0440": "rcy", "\u0420": "Rcy", "\u0441": "scy", "\u0421": "Scy", "\u0442": "tcy", "\u0422": "Tcy", "\u045B": "tshcy", "\u040B": "TSHcy", "\u0443": "ucy", "\u0423": "Ucy", "\u045E": "ubrcy", "\u040E": "Ubrcy", "\u0444": "fcy", "\u0424": "Fcy", "\u0445": "khcy", "\u0425": "KHcy", "\u0446": "tscy", "\u0426": "TScy", "\u0447": "chcy", "\u0427": "CHcy", "\u045F": "dzcy", "\u040F": "DZcy", "\u0448": "shcy", "\u0428": "SHcy", "\u0449": "shchcy", "\u0429": "SHCHcy", "\u044A": "hardcy", "\u042A": "HARDcy", "\u044B": "ycy", "\u042B": "Ycy", "\u044C": "softcy", "\u042C": "SOFTcy", "\u044D": "ecy", "\u042D": "Ecy", "\u044E": "yucy", "\u042E": "YUcy", "\u044F": "yacy", "\u042F": "YAcy", "\u2135": "aleph", "\u2136": "beth", "\u2137": "gimel", "\u2138": "daleth" };
      var regexEscape = /["&'<>`]/g;
      var escapeMap = {
        '"': "&quot;",
        "&": "&amp;",
        "'": "&#x27;",
        "<": "&lt;",
        ">": "&gt;",
        "`": "&#x60;"
      };
      var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
      var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
      var decodeMap = { "aacute": "\xE1", "Aacute": "\xC1", "abreve": "\u0103", "Abreve": "\u0102", "ac": "\u223E", "acd": "\u223F", "acE": "\u223E\u0333", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "acy": "\u0430", "Acy": "\u0410", "aelig": "\xE6", "AElig": "\xC6", "af": "\u2061", "afr": "\u{1D51E}", "Afr": "\u{1D504}", "agrave": "\xE0", "Agrave": "\xC0", "alefsym": "\u2135", "aleph": "\u2135", "alpha": "\u03B1", "Alpha": "\u0391", "amacr": "\u0101", "Amacr": "\u0100", "amalg": "\u2A3F", "amp": "&", "AMP": "&", "and": "\u2227", "And": "\u2A53", "andand": "\u2A55", "andd": "\u2A5C", "andslope": "\u2A58", "andv": "\u2A5A", "ang": "\u2220", "ange": "\u29A4", "angle": "\u2220", "angmsd": "\u2221", "angmsdaa": "\u29A8", "angmsdab": "\u29A9", "angmsdac": "\u29AA", "angmsdad": "\u29AB", "angmsdae": "\u29AC", "angmsdaf": "\u29AD", "angmsdag": "\u29AE", "angmsdah": "\u29AF", "angrt": "\u221F", "angrtvb": "\u22BE", "angrtvbd": "\u299D", "angsph": "\u2222", "angst": "\xC5", "angzarr": "\u237C", "aogon": "\u0105", "Aogon": "\u0104", "aopf": "\u{1D552}", "Aopf": "\u{1D538}", "ap": "\u2248", "apacir": "\u2A6F", "ape": "\u224A", "apE": "\u2A70", "apid": "\u224B", "apos": "'", "ApplyFunction": "\u2061", "approx": "\u2248", "approxeq": "\u224A", "aring": "\xE5", "Aring": "\xC5", "ascr": "\u{1D4B6}", "Ascr": "\u{1D49C}", "Assign": "\u2254", "ast": "*", "asymp": "\u2248", "asympeq": "\u224D", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "awconint": "\u2233", "awint": "\u2A11", "backcong": "\u224C", "backepsilon": "\u03F6", "backprime": "\u2035", "backsim": "\u223D", "backsimeq": "\u22CD", "Backslash": "\u2216", "Barv": "\u2AE7", "barvee": "\u22BD", "barwed": "\u2305", "Barwed": "\u2306", "barwedge": "\u2305", "bbrk": "\u23B5", "bbrktbrk": "\u23B6", "bcong": "\u224C", "bcy": "\u0431", "Bcy": "\u0411", "bdquo": "\u201E", "becaus": "\u2235", "because": "\u2235", "Because": "\u2235", "bemptyv": "\u29B0", "bepsi": "\u03F6", "bernou": "\u212C", "Bernoullis": "\u212C", "beta": "\u03B2", "Beta": "\u0392", "beth": "\u2136", "between": "\u226C", "bfr": "\u{1D51F}", "Bfr": "\u{1D505}", "bigcap": "\u22C2", "bigcirc": "\u25EF", "bigcup": "\u22C3", "bigodot": "\u2A00", "bigoplus": "\u2A01", "bigotimes": "\u2A02", "bigsqcup": "\u2A06", "bigstar": "\u2605", "bigtriangledown": "\u25BD", "bigtriangleup": "\u25B3", "biguplus": "\u2A04", "bigvee": "\u22C1", "bigwedge": "\u22C0", "bkarow": "\u290D", "blacklozenge": "\u29EB", "blacksquare": "\u25AA", "blacktriangle": "\u25B4", "blacktriangledown": "\u25BE", "blacktriangleleft": "\u25C2", "blacktriangleright": "\u25B8", "blank": "\u2423", "blk12": "\u2592", "blk14": "\u2591", "blk34": "\u2593", "block": "\u2588", "bne": "=\u20E5", "bnequiv": "\u2261\u20E5", "bnot": "\u2310", "bNot": "\u2AED", "bopf": "\u{1D553}", "Bopf": "\u{1D539}", "bot": "\u22A5", "bottom": "\u22A5", "bowtie": "\u22C8", "boxbox": "\u29C9", "boxdl": "\u2510", "boxdL": "\u2555", "boxDl": "\u2556", "boxDL": "\u2557", "boxdr": "\u250C", "boxdR": "\u2552", "boxDr": "\u2553", "boxDR": "\u2554", "boxh": "\u2500", "boxH": "\u2550", "boxhd": "\u252C", "boxhD": "\u2565", "boxHd": "\u2564", "boxHD": "\u2566", "boxhu": "\u2534", "boxhU": "\u2568", "boxHu": "\u2567", "boxHU": "\u2569", "boxminus": "\u229F", "boxplus": "\u229E", "boxtimes": "\u22A0", "boxul": "\u2518", "boxuL": "\u255B", "boxUl": "\u255C", "boxUL": "\u255D", "boxur": "\u2514", "boxuR": "\u2558", "boxUr": "\u2559", "boxUR": "\u255A", "boxv": "\u2502", "boxV": "\u2551", "boxvh": "\u253C", "boxvH": "\u256A", "boxVh": "\u256B", "boxVH": "\u256C", "boxvl": "\u2524", "boxvL": "\u2561", "boxVl": "\u2562", "boxVL": "\u2563", "boxvr": "\u251C", "boxvR": "\u255E", "boxVr": "\u255F", "boxVR": "\u2560", "bprime": "\u2035", "breve": "\u02D8", "Breve": "\u02D8", "brvbar": "\xA6", "bscr": "\u{1D4B7}", "Bscr": "\u212C", "bsemi": "\u204F", "bsim": "\u223D", "bsime": "\u22CD", "bsol": "\\", "bsolb": "\u29C5", "bsolhsub": "\u27C8", "bull": "\u2022", "bullet": "\u2022", "bump": "\u224E", "bumpe": "\u224F", "bumpE": "\u2AAE", "bumpeq": "\u224F", "Bumpeq": "\u224E", "cacute": "\u0107", "Cacute": "\u0106", "cap": "\u2229", "Cap": "\u22D2", "capand": "\u2A44", "capbrcup": "\u2A49", "capcap": "\u2A4B", "capcup": "\u2A47", "capdot": "\u2A40", "CapitalDifferentialD": "\u2145", "caps": "\u2229\uFE00", "caret": "\u2041", "caron": "\u02C7", "Cayleys": "\u212D", "ccaps": "\u2A4D", "ccaron": "\u010D", "Ccaron": "\u010C", "ccedil": "\xE7", "Ccedil": "\xC7", "ccirc": "\u0109", "Ccirc": "\u0108", "Cconint": "\u2230", "ccups": "\u2A4C", "ccupssm": "\u2A50", "cdot": "\u010B", "Cdot": "\u010A", "cedil": "\xB8", "Cedilla": "\xB8", "cemptyv": "\u29B2", "cent": "\xA2", "centerdot": "\xB7", "CenterDot": "\xB7", "cfr": "\u{1D520}", "Cfr": "\u212D", "chcy": "\u0447", "CHcy": "\u0427", "check": "\u2713", "checkmark": "\u2713", "chi": "\u03C7", "Chi": "\u03A7", "cir": "\u25CB", "circ": "\u02C6", "circeq": "\u2257", "circlearrowleft": "\u21BA", "circlearrowright": "\u21BB", "circledast": "\u229B", "circledcirc": "\u229A", "circleddash": "\u229D", "CircleDot": "\u2299", "circledR": "\xAE", "circledS": "\u24C8", "CircleMinus": "\u2296", "CirclePlus": "\u2295", "CircleTimes": "\u2297", "cire": "\u2257", "cirE": "\u29C3", "cirfnint": "\u2A10", "cirmid": "\u2AEF", "cirscir": "\u29C2", "ClockwiseContourIntegral": "\u2232", "CloseCurlyDoubleQuote": "\u201D", "CloseCurlyQuote": "\u2019", "clubs": "\u2663", "clubsuit": "\u2663", "colon": ":", "Colon": "\u2237", "colone": "\u2254", "Colone": "\u2A74", "coloneq": "\u2254", "comma": ",", "commat": "@", "comp": "\u2201", "compfn": "\u2218", "complement": "\u2201", "complexes": "\u2102", "cong": "\u2245", "congdot": "\u2A6D", "Congruent": "\u2261", "conint": "\u222E", "Conint": "\u222F", "ContourIntegral": "\u222E", "copf": "\u{1D554}", "Copf": "\u2102", "coprod": "\u2210", "Coproduct": "\u2210", "copy": "\xA9", "COPY": "\xA9", "copysr": "\u2117", "CounterClockwiseContourIntegral": "\u2233", "crarr": "\u21B5", "cross": "\u2717", "Cross": "\u2A2F", "cscr": "\u{1D4B8}", "Cscr": "\u{1D49E}", "csub": "\u2ACF", "csube": "\u2AD1", "csup": "\u2AD0", "csupe": "\u2AD2", "ctdot": "\u22EF", "cudarrl": "\u2938", "cudarrr": "\u2935", "cuepr": "\u22DE", "cuesc": "\u22DF", "cularr": "\u21B6", "cularrp": "\u293D", "cup": "\u222A", "Cup": "\u22D3", "cupbrcap": "\u2A48", "cupcap": "\u2A46", "CupCap": "\u224D", "cupcup": "\u2A4A", "cupdot": "\u228D", "cupor": "\u2A45", "cups": "\u222A\uFE00", "curarr": "\u21B7", "curarrm": "\u293C", "curlyeqprec": "\u22DE", "curlyeqsucc": "\u22DF", "curlyvee": "\u22CE", "curlywedge": "\u22CF", "curren": "\xA4", "curvearrowleft": "\u21B6", "curvearrowright": "\u21B7", "cuvee": "\u22CE", "cuwed": "\u22CF", "cwconint": "\u2232", "cwint": "\u2231", "cylcty": "\u232D", "dagger": "\u2020", "Dagger": "\u2021", "daleth": "\u2138", "darr": "\u2193", "dArr": "\u21D3", "Darr": "\u21A1", "dash": "\u2010", "dashv": "\u22A3", "Dashv": "\u2AE4", "dbkarow": "\u290F", "dblac": "\u02DD", "dcaron": "\u010F", "Dcaron": "\u010E", "dcy": "\u0434", "Dcy": "\u0414", "dd": "\u2146", "DD": "\u2145", "ddagger": "\u2021", "ddarr": "\u21CA", "DDotrahd": "\u2911", "ddotseq": "\u2A77", "deg": "\xB0", "Del": "\u2207", "delta": "\u03B4", "Delta": "\u0394", "demptyv": "\u29B1", "dfisht": "\u297F", "dfr": "\u{1D521}", "Dfr": "\u{1D507}", "dHar": "\u2965", "dharl": "\u21C3", "dharr": "\u21C2", "DiacriticalAcute": "\xB4", "DiacriticalDot": "\u02D9", "DiacriticalDoubleAcute": "\u02DD", "DiacriticalGrave": "`", "DiacriticalTilde": "\u02DC", "diam": "\u22C4", "diamond": "\u22C4", "Diamond": "\u22C4", "diamondsuit": "\u2666", "diams": "\u2666", "die": "\xA8", "DifferentialD": "\u2146", "digamma": "\u03DD", "disin": "\u22F2", "div": "\xF7", "divide": "\xF7", "divideontimes": "\u22C7", "divonx": "\u22C7", "djcy": "\u0452", "DJcy": "\u0402", "dlcorn": "\u231E", "dlcrop": "\u230D", "dollar": "$", "dopf": "\u{1D555}", "Dopf": "\u{1D53B}", "dot": "\u02D9", "Dot": "\xA8", "DotDot": "\u20DC", "doteq": "\u2250", "doteqdot": "\u2251", "DotEqual": "\u2250", "dotminus": "\u2238", "dotplus": "\u2214", "dotsquare": "\u22A1", "doublebarwedge": "\u2306", "DoubleContourIntegral": "\u222F", "DoubleDot": "\xA8", "DoubleDownArrow": "\u21D3", "DoubleLeftArrow": "\u21D0", "DoubleLeftRightArrow": "\u21D4", "DoubleLeftTee": "\u2AE4", "DoubleLongLeftArrow": "\u27F8", "DoubleLongLeftRightArrow": "\u27FA", "DoubleLongRightArrow": "\u27F9", "DoubleRightArrow": "\u21D2", "DoubleRightTee": "\u22A8", "DoubleUpArrow": "\u21D1", "DoubleUpDownArrow": "\u21D5", "DoubleVerticalBar": "\u2225", "downarrow": "\u2193", "Downarrow": "\u21D3", "DownArrow": "\u2193", "DownArrowBar": "\u2913", "DownArrowUpArrow": "\u21F5", "DownBreve": "\u0311", "downdownarrows": "\u21CA", "downharpoonleft": "\u21C3", "downharpoonright": "\u21C2", "DownLeftRightVector": "\u2950", "DownLeftTeeVector": "\u295E", "DownLeftVector": "\u21BD", "DownLeftVectorBar": "\u2956", "DownRightTeeVector": "\u295F", "DownRightVector": "\u21C1", "DownRightVectorBar": "\u2957", "DownTee": "\u22A4", "DownTeeArrow": "\u21A7", "drbkarow": "\u2910", "drcorn": "\u231F", "drcrop": "\u230C", "dscr": "\u{1D4B9}", "Dscr": "\u{1D49F}", "dscy": "\u0455", "DScy": "\u0405", "dsol": "\u29F6", "dstrok": "\u0111", "Dstrok": "\u0110", "dtdot": "\u22F1", "dtri": "\u25BF", "dtrif": "\u25BE", "duarr": "\u21F5", "duhar": "\u296F", "dwangle": "\u29A6", "dzcy": "\u045F", "DZcy": "\u040F", "dzigrarr": "\u27FF", "eacute": "\xE9", "Eacute": "\xC9", "easter": "\u2A6E", "ecaron": "\u011B", "Ecaron": "\u011A", "ecir": "\u2256", "ecirc": "\xEA", "Ecirc": "\xCA", "ecolon": "\u2255", "ecy": "\u044D", "Ecy": "\u042D", "eDDot": "\u2A77", "edot": "\u0117", "eDot": "\u2251", "Edot": "\u0116", "ee": "\u2147", "efDot": "\u2252", "efr": "\u{1D522}", "Efr": "\u{1D508}", "eg": "\u2A9A", "egrave": "\xE8", "Egrave": "\xC8", "egs": "\u2A96", "egsdot": "\u2A98", "el": "\u2A99", "Element": "\u2208", "elinters": "\u23E7", "ell": "\u2113", "els": "\u2A95", "elsdot": "\u2A97", "emacr": "\u0113", "Emacr": "\u0112", "empty": "\u2205", "emptyset": "\u2205", "EmptySmallSquare": "\u25FB", "emptyv": "\u2205", "EmptyVerySmallSquare": "\u25AB", "emsp": "\u2003", "emsp13": "\u2004", "emsp14": "\u2005", "eng": "\u014B", "ENG": "\u014A", "ensp": "\u2002", "eogon": "\u0119", "Eogon": "\u0118", "eopf": "\u{1D556}", "Eopf": "\u{1D53C}", "epar": "\u22D5", "eparsl": "\u29E3", "eplus": "\u2A71", "epsi": "\u03B5", "epsilon": "\u03B5", "Epsilon": "\u0395", "epsiv": "\u03F5", "eqcirc": "\u2256", "eqcolon": "\u2255", "eqsim": "\u2242", "eqslantgtr": "\u2A96", "eqslantless": "\u2A95", "Equal": "\u2A75", "equals": "=", "EqualTilde": "\u2242", "equest": "\u225F", "Equilibrium": "\u21CC", "equiv": "\u2261", "equivDD": "\u2A78", "eqvparsl": "\u29E5", "erarr": "\u2971", "erDot": "\u2253", "escr": "\u212F", "Escr": "\u2130", "esdot": "\u2250", "esim": "\u2242", "Esim": "\u2A73", "eta": "\u03B7", "Eta": "\u0397", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "euro": "\u20AC", "excl": "!", "exist": "\u2203", "Exists": "\u2203", "expectation": "\u2130", "exponentiale": "\u2147", "ExponentialE": "\u2147", "fallingdotseq": "\u2252", "fcy": "\u0444", "Fcy": "\u0424", "female": "\u2640", "ffilig": "\uFB03", "fflig": "\uFB00", "ffllig": "\uFB04", "ffr": "\u{1D523}", "Ffr": "\u{1D509}", "filig": "\uFB01", "FilledSmallSquare": "\u25FC", "FilledVerySmallSquare": "\u25AA", "fjlig": "fj", "flat": "\u266D", "fllig": "\uFB02", "fltns": "\u25B1", "fnof": "\u0192", "fopf": "\u{1D557}", "Fopf": "\u{1D53D}", "forall": "\u2200", "ForAll": "\u2200", "fork": "\u22D4", "forkv": "\u2AD9", "Fouriertrf": "\u2131", "fpartint": "\u2A0D", "frac12": "\xBD", "frac13": "\u2153", "frac14": "\xBC", "frac15": "\u2155", "frac16": "\u2159", "frac18": "\u215B", "frac23": "\u2154", "frac25": "\u2156", "frac34": "\xBE", "frac35": "\u2157", "frac38": "\u215C", "frac45": "\u2158", "frac56": "\u215A", "frac58": "\u215D", "frac78": "\u215E", "frasl": "\u2044", "frown": "\u2322", "fscr": "\u{1D4BB}", "Fscr": "\u2131", "gacute": "\u01F5", "gamma": "\u03B3", "Gamma": "\u0393", "gammad": "\u03DD", "Gammad": "\u03DC", "gap": "\u2A86", "gbreve": "\u011F", "Gbreve": "\u011E", "Gcedil": "\u0122", "gcirc": "\u011D", "Gcirc": "\u011C", "gcy": "\u0433", "Gcy": "\u0413", "gdot": "\u0121", "Gdot": "\u0120", "ge": "\u2265", "gE": "\u2267", "gel": "\u22DB", "gEl": "\u2A8C", "geq": "\u2265", "geqq": "\u2267", "geqslant": "\u2A7E", "ges": "\u2A7E", "gescc": "\u2AA9", "gesdot": "\u2A80", "gesdoto": "\u2A82", "gesdotol": "\u2A84", "gesl": "\u22DB\uFE00", "gesles": "\u2A94", "gfr": "\u{1D524}", "Gfr": "\u{1D50A}", "gg": "\u226B", "Gg": "\u22D9", "ggg": "\u22D9", "gimel": "\u2137", "gjcy": "\u0453", "GJcy": "\u0403", "gl": "\u2277", "gla": "\u2AA5", "glE": "\u2A92", "glj": "\u2AA4", "gnap": "\u2A8A", "gnapprox": "\u2A8A", "gne": "\u2A88", "gnE": "\u2269", "gneq": "\u2A88", "gneqq": "\u2269", "gnsim": "\u22E7", "gopf": "\u{1D558}", "Gopf": "\u{1D53E}", "grave": "`", "GreaterEqual": "\u2265", "GreaterEqualLess": "\u22DB", "GreaterFullEqual": "\u2267", "GreaterGreater": "\u2AA2", "GreaterLess": "\u2277", "GreaterSlantEqual": "\u2A7E", "GreaterTilde": "\u2273", "gscr": "\u210A", "Gscr": "\u{1D4A2}", "gsim": "\u2273", "gsime": "\u2A8E", "gsiml": "\u2A90", "gt": ">", "Gt": "\u226B", "GT": ">", "gtcc": "\u2AA7", "gtcir": "\u2A7A", "gtdot": "\u22D7", "gtlPar": "\u2995", "gtquest": "\u2A7C", "gtrapprox": "\u2A86", "gtrarr": "\u2978", "gtrdot": "\u22D7", "gtreqless": "\u22DB", "gtreqqless": "\u2A8C", "gtrless": "\u2277", "gtrsim": "\u2273", "gvertneqq": "\u2269\uFE00", "gvnE": "\u2269\uFE00", "Hacek": "\u02C7", "hairsp": "\u200A", "half": "\xBD", "hamilt": "\u210B", "hardcy": "\u044A", "HARDcy": "\u042A", "harr": "\u2194", "hArr": "\u21D4", "harrcir": "\u2948", "harrw": "\u21AD", "Hat": "^", "hbar": "\u210F", "hcirc": "\u0125", "Hcirc": "\u0124", "hearts": "\u2665", "heartsuit": "\u2665", "hellip": "\u2026", "hercon": "\u22B9", "hfr": "\u{1D525}", "Hfr": "\u210C", "HilbertSpace": "\u210B", "hksearow": "\u2925", "hkswarow": "\u2926", "hoarr": "\u21FF", "homtht": "\u223B", "hookleftarrow": "\u21A9", "hookrightarrow": "\u21AA", "hopf": "\u{1D559}", "Hopf": "\u210D", "horbar": "\u2015", "HorizontalLine": "\u2500", "hscr": "\u{1D4BD}", "Hscr": "\u210B", "hslash": "\u210F", "hstrok": "\u0127", "Hstrok": "\u0126", "HumpDownHump": "\u224E", "HumpEqual": "\u224F", "hybull": "\u2043", "hyphen": "\u2010", "iacute": "\xED", "Iacute": "\xCD", "ic": "\u2063", "icirc": "\xEE", "Icirc": "\xCE", "icy": "\u0438", "Icy": "\u0418", "Idot": "\u0130", "iecy": "\u0435", "IEcy": "\u0415", "iexcl": "\xA1", "iff": "\u21D4", "ifr": "\u{1D526}", "Ifr": "\u2111", "igrave": "\xEC", "Igrave": "\xCC", "ii": "\u2148", "iiiint": "\u2A0C", "iiint": "\u222D", "iinfin": "\u29DC", "iiota": "\u2129", "ijlig": "\u0133", "IJlig": "\u0132", "Im": "\u2111", "imacr": "\u012B", "Imacr": "\u012A", "image": "\u2111", "ImaginaryI": "\u2148", "imagline": "\u2110", "imagpart": "\u2111", "imath": "\u0131", "imof": "\u22B7", "imped": "\u01B5", "Implies": "\u21D2", "in": "\u2208", "incare": "\u2105", "infin": "\u221E", "infintie": "\u29DD", "inodot": "\u0131", "int": "\u222B", "Int": "\u222C", "intcal": "\u22BA", "integers": "\u2124", "Integral": "\u222B", "intercal": "\u22BA", "Intersection": "\u22C2", "intlarhk": "\u2A17", "intprod": "\u2A3C", "InvisibleComma": "\u2063", "InvisibleTimes": "\u2062", "iocy": "\u0451", "IOcy": "\u0401", "iogon": "\u012F", "Iogon": "\u012E", "iopf": "\u{1D55A}", "Iopf": "\u{1D540}", "iota": "\u03B9", "Iota": "\u0399", "iprod": "\u2A3C", "iquest": "\xBF", "iscr": "\u{1D4BE}", "Iscr": "\u2110", "isin": "\u2208", "isindot": "\u22F5", "isinE": "\u22F9", "isins": "\u22F4", "isinsv": "\u22F3", "isinv": "\u2208", "it": "\u2062", "itilde": "\u0129", "Itilde": "\u0128", "iukcy": "\u0456", "Iukcy": "\u0406", "iuml": "\xEF", "Iuml": "\xCF", "jcirc": "\u0135", "Jcirc": "\u0134", "jcy": "\u0439", "Jcy": "\u0419", "jfr": "\u{1D527}", "Jfr": "\u{1D50D}", "jmath": "\u0237", "jopf": "\u{1D55B}", "Jopf": "\u{1D541}", "jscr": "\u{1D4BF}", "Jscr": "\u{1D4A5}", "jsercy": "\u0458", "Jsercy": "\u0408", "jukcy": "\u0454", "Jukcy": "\u0404", "kappa": "\u03BA", "Kappa": "\u039A", "kappav": "\u03F0", "kcedil": "\u0137", "Kcedil": "\u0136", "kcy": "\u043A", "Kcy": "\u041A", "kfr": "\u{1D528}", "Kfr": "\u{1D50E}", "kgreen": "\u0138", "khcy": "\u0445", "KHcy": "\u0425", "kjcy": "\u045C", "KJcy": "\u040C", "kopf": "\u{1D55C}", "Kopf": "\u{1D542}", "kscr": "\u{1D4C0}", "Kscr": "\u{1D4A6}", "lAarr": "\u21DA", "lacute": "\u013A", "Lacute": "\u0139", "laemptyv": "\u29B4", "lagran": "\u2112", "lambda": "\u03BB", "Lambda": "\u039B", "lang": "\u27E8", "Lang": "\u27EA", "langd": "\u2991", "langle": "\u27E8", "lap": "\u2A85", "Laplacetrf": "\u2112", "laquo": "\xAB", "larr": "\u2190", "lArr": "\u21D0", "Larr": "\u219E", "larrb": "\u21E4", "larrbfs": "\u291F", "larrfs": "\u291D", "larrhk": "\u21A9", "larrlp": "\u21AB", "larrpl": "\u2939", "larrsim": "\u2973", "larrtl": "\u21A2", "lat": "\u2AAB", "latail": "\u2919", "lAtail": "\u291B", "late": "\u2AAD", "lates": "\u2AAD\uFE00", "lbarr": "\u290C", "lBarr": "\u290E", "lbbrk": "\u2772", "lbrace": "{", "lbrack": "[", "lbrke": "\u298B", "lbrksld": "\u298F", "lbrkslu": "\u298D", "lcaron": "\u013E", "Lcaron": "\u013D", "lcedil": "\u013C", "Lcedil": "\u013B", "lceil": "\u2308", "lcub": "{", "lcy": "\u043B", "Lcy": "\u041B", "ldca": "\u2936", "ldquo": "\u201C", "ldquor": "\u201E", "ldrdhar": "\u2967", "ldrushar": "\u294B", "ldsh": "\u21B2", "le": "\u2264", "lE": "\u2266", "LeftAngleBracket": "\u27E8", "leftarrow": "\u2190", "Leftarrow": "\u21D0", "LeftArrow": "\u2190", "LeftArrowBar": "\u21E4", "LeftArrowRightArrow": "\u21C6", "leftarrowtail": "\u21A2", "LeftCeiling": "\u2308", "LeftDoubleBracket": "\u27E6", "LeftDownTeeVector": "\u2961", "LeftDownVector": "\u21C3", "LeftDownVectorBar": "\u2959", "LeftFloor": "\u230A", "leftharpoondown": "\u21BD", "leftharpoonup": "\u21BC", "leftleftarrows": "\u21C7", "leftrightarrow": "\u2194", "Leftrightarrow": "\u21D4", "LeftRightArrow": "\u2194", "leftrightarrows": "\u21C6", "leftrightharpoons": "\u21CB", "leftrightsquigarrow": "\u21AD", "LeftRightVector": "\u294E", "LeftTee": "\u22A3", "LeftTeeArrow": "\u21A4", "LeftTeeVector": "\u295A", "leftthreetimes": "\u22CB", "LeftTriangle": "\u22B2", "LeftTriangleBar": "\u29CF", "LeftTriangleEqual": "\u22B4", "LeftUpDownVector": "\u2951", "LeftUpTeeVector": "\u2960", "LeftUpVector": "\u21BF", "LeftUpVectorBar": "\u2958", "LeftVector": "\u21BC", "LeftVectorBar": "\u2952", "leg": "\u22DA", "lEg": "\u2A8B", "leq": "\u2264", "leqq": "\u2266", "leqslant": "\u2A7D", "les": "\u2A7D", "lescc": "\u2AA8", "lesdot": "\u2A7F", "lesdoto": "\u2A81", "lesdotor": "\u2A83", "lesg": "\u22DA\uFE00", "lesges": "\u2A93", "lessapprox": "\u2A85", "lessdot": "\u22D6", "lesseqgtr": "\u22DA", "lesseqqgtr": "\u2A8B", "LessEqualGreater": "\u22DA", "LessFullEqual": "\u2266", "LessGreater": "\u2276", "lessgtr": "\u2276", "LessLess": "\u2AA1", "lesssim": "\u2272", "LessSlantEqual": "\u2A7D", "LessTilde": "\u2272", "lfisht": "\u297C", "lfloor": "\u230A", "lfr": "\u{1D529}", "Lfr": "\u{1D50F}", "lg": "\u2276", "lgE": "\u2A91", "lHar": "\u2962", "lhard": "\u21BD", "lharu": "\u21BC", "lharul": "\u296A", "lhblk": "\u2584", "ljcy": "\u0459", "LJcy": "\u0409", "ll": "\u226A", "Ll": "\u22D8", "llarr": "\u21C7", "llcorner": "\u231E", "Lleftarrow": "\u21DA", "llhard": "\u296B", "lltri": "\u25FA", "lmidot": "\u0140", "Lmidot": "\u013F", "lmoust": "\u23B0", "lmoustache": "\u23B0", "lnap": "\u2A89", "lnapprox": "\u2A89", "lne": "\u2A87", "lnE": "\u2268", "lneq": "\u2A87", "lneqq": "\u2268", "lnsim": "\u22E6", "loang": "\u27EC", "loarr": "\u21FD", "lobrk": "\u27E6", "longleftarrow": "\u27F5", "Longleftarrow": "\u27F8", "LongLeftArrow": "\u27F5", "longleftrightarrow": "\u27F7", "Longleftrightarrow": "\u27FA", "LongLeftRightArrow": "\u27F7", "longmapsto": "\u27FC", "longrightarrow": "\u27F6", "Longrightarrow": "\u27F9", "LongRightArrow": "\u27F6", "looparrowleft": "\u21AB", "looparrowright": "\u21AC", "lopar": "\u2985", "lopf": "\u{1D55D}", "Lopf": "\u{1D543}", "loplus": "\u2A2D", "lotimes": "\u2A34", "lowast": "\u2217", "lowbar": "_", "LowerLeftArrow": "\u2199", "LowerRightArrow": "\u2198", "loz": "\u25CA", "lozenge": "\u25CA", "lozf": "\u29EB", "lpar": "(", "lparlt": "\u2993", "lrarr": "\u21C6", "lrcorner": "\u231F", "lrhar": "\u21CB", "lrhard": "\u296D", "lrm": "\u200E", "lrtri": "\u22BF", "lsaquo": "\u2039", "lscr": "\u{1D4C1}", "Lscr": "\u2112", "lsh": "\u21B0", "Lsh": "\u21B0", "lsim": "\u2272", "lsime": "\u2A8D", "lsimg": "\u2A8F", "lsqb": "[", "lsquo": "\u2018", "lsquor": "\u201A", "lstrok": "\u0142", "Lstrok": "\u0141", "lt": "<", "Lt": "\u226A", "LT": "<", "ltcc": "\u2AA6", "ltcir": "\u2A79", "ltdot": "\u22D6", "lthree": "\u22CB", "ltimes": "\u22C9", "ltlarr": "\u2976", "ltquest": "\u2A7B", "ltri": "\u25C3", "ltrie": "\u22B4", "ltrif": "\u25C2", "ltrPar": "\u2996", "lurdshar": "\u294A", "luruhar": "\u2966", "lvertneqq": "\u2268\uFE00", "lvnE": "\u2268\uFE00", "macr": "\xAF", "male": "\u2642", "malt": "\u2720", "maltese": "\u2720", "map": "\u21A6", "Map": "\u2905", "mapsto": "\u21A6", "mapstodown": "\u21A7", "mapstoleft": "\u21A4", "mapstoup": "\u21A5", "marker": "\u25AE", "mcomma": "\u2A29", "mcy": "\u043C", "Mcy": "\u041C", "mdash": "\u2014", "mDDot": "\u223A", "measuredangle": "\u2221", "MediumSpace": "\u205F", "Mellintrf": "\u2133", "mfr": "\u{1D52A}", "Mfr": "\u{1D510}", "mho": "\u2127", "micro": "\xB5", "mid": "\u2223", "midast": "*", "midcir": "\u2AF0", "middot": "\xB7", "minus": "\u2212", "minusb": "\u229F", "minusd": "\u2238", "minusdu": "\u2A2A", "MinusPlus": "\u2213", "mlcp": "\u2ADB", "mldr": "\u2026", "mnplus": "\u2213", "models": "\u22A7", "mopf": "\u{1D55E}", "Mopf": "\u{1D544}", "mp": "\u2213", "mscr": "\u{1D4C2}", "Mscr": "\u2133", "mstpos": "\u223E", "mu": "\u03BC", "Mu": "\u039C", "multimap": "\u22B8", "mumap": "\u22B8", "nabla": "\u2207", "nacute": "\u0144", "Nacute": "\u0143", "nang": "\u2220\u20D2", "nap": "\u2249", "napE": "\u2A70\u0338", "napid": "\u224B\u0338", "napos": "\u0149", "napprox": "\u2249", "natur": "\u266E", "natural": "\u266E", "naturals": "\u2115", "nbsp": "\xA0", "nbump": "\u224E\u0338", "nbumpe": "\u224F\u0338", "ncap": "\u2A43", "ncaron": "\u0148", "Ncaron": "\u0147", "ncedil": "\u0146", "Ncedil": "\u0145", "ncong": "\u2247", "ncongdot": "\u2A6D\u0338", "ncup": "\u2A42", "ncy": "\u043D", "Ncy": "\u041D", "ndash": "\u2013", "ne": "\u2260", "nearhk": "\u2924", "nearr": "\u2197", "neArr": "\u21D7", "nearrow": "\u2197", "nedot": "\u2250\u0338", "NegativeMediumSpace": "\u200B", "NegativeThickSpace": "\u200B", "NegativeThinSpace": "\u200B", "NegativeVeryThinSpace": "\u200B", "nequiv": "\u2262", "nesear": "\u2928", "nesim": "\u2242\u0338", "NestedGreaterGreater": "\u226B", "NestedLessLess": "\u226A", "NewLine": "\n", "nexist": "\u2204", "nexists": "\u2204", "nfr": "\u{1D52B}", "Nfr": "\u{1D511}", "nge": "\u2271", "ngE": "\u2267\u0338", "ngeq": "\u2271", "ngeqq": "\u2267\u0338", "ngeqslant": "\u2A7E\u0338", "nges": "\u2A7E\u0338", "nGg": "\u22D9\u0338", "ngsim": "\u2275", "ngt": "\u226F", "nGt": "\u226B\u20D2", "ngtr": "\u226F", "nGtv": "\u226B\u0338", "nharr": "\u21AE", "nhArr": "\u21CE", "nhpar": "\u2AF2", "ni": "\u220B", "nis": "\u22FC", "nisd": "\u22FA", "niv": "\u220B", "njcy": "\u045A", "NJcy": "\u040A", "nlarr": "\u219A", "nlArr": "\u21CD", "nldr": "\u2025", "nle": "\u2270", "nlE": "\u2266\u0338", "nleftarrow": "\u219A", "nLeftarrow": "\u21CD", "nleftrightarrow": "\u21AE", "nLeftrightarrow": "\u21CE", "nleq": "\u2270", "nleqq": "\u2266\u0338", "nleqslant": "\u2A7D\u0338", "nles": "\u2A7D\u0338", "nless": "\u226E", "nLl": "\u22D8\u0338", "nlsim": "\u2274", "nlt": "\u226E", "nLt": "\u226A\u20D2", "nltri": "\u22EA", "nltrie": "\u22EC", "nLtv": "\u226A\u0338", "nmid": "\u2224", "NoBreak": "\u2060", "NonBreakingSpace": "\xA0", "nopf": "\u{1D55F}", "Nopf": "\u2115", "not": "\xAC", "Not": "\u2AEC", "NotCongruent": "\u2262", "NotCupCap": "\u226D", "NotDoubleVerticalBar": "\u2226", "NotElement": "\u2209", "NotEqual": "\u2260", "NotEqualTilde": "\u2242\u0338", "NotExists": "\u2204", "NotGreater": "\u226F", "NotGreaterEqual": "\u2271", "NotGreaterFullEqual": "\u2267\u0338", "NotGreaterGreater": "\u226B\u0338", "NotGreaterLess": "\u2279", "NotGreaterSlantEqual": "\u2A7E\u0338", "NotGreaterTilde": "\u2275", "NotHumpDownHump": "\u224E\u0338", "NotHumpEqual": "\u224F\u0338", "notin": "\u2209", "notindot": "\u22F5\u0338", "notinE": "\u22F9\u0338", "notinva": "\u2209", "notinvb": "\u22F7", "notinvc": "\u22F6", "NotLeftTriangle": "\u22EA", "NotLeftTriangleBar": "\u29CF\u0338", "NotLeftTriangleEqual": "\u22EC", "NotLess": "\u226E", "NotLessEqual": "\u2270", "NotLessGreater": "\u2278", "NotLessLess": "\u226A\u0338", "NotLessSlantEqual": "\u2A7D\u0338", "NotLessTilde": "\u2274", "NotNestedGreaterGreater": "\u2AA2\u0338", "NotNestedLessLess": "\u2AA1\u0338", "notni": "\u220C", "notniva": "\u220C", "notnivb": "\u22FE", "notnivc": "\u22FD", "NotPrecedes": "\u2280", "NotPrecedesEqual": "\u2AAF\u0338", "NotPrecedesSlantEqual": "\u22E0", "NotReverseElement": "\u220C", "NotRightTriangle": "\u22EB", "NotRightTriangleBar": "\u29D0\u0338", "NotRightTriangleEqual": "\u22ED", "NotSquareSubset": "\u228F\u0338", "NotSquareSubsetEqual": "\u22E2", "NotSquareSuperset": "\u2290\u0338", "NotSquareSupersetEqual": "\u22E3", "NotSubset": "\u2282\u20D2", "NotSubsetEqual": "\u2288", "NotSucceeds": "\u2281", "NotSucceedsEqual": "\u2AB0\u0338", "NotSucceedsSlantEqual": "\u22E1", "NotSucceedsTilde": "\u227F\u0338", "NotSuperset": "\u2283\u20D2", "NotSupersetEqual": "\u2289", "NotTilde": "\u2241", "NotTildeEqual": "\u2244", "NotTildeFullEqual": "\u2247", "NotTildeTilde": "\u2249", "NotVerticalBar": "\u2224", "npar": "\u2226", "nparallel": "\u2226", "nparsl": "\u2AFD\u20E5", "npart": "\u2202\u0338", "npolint": "\u2A14", "npr": "\u2280", "nprcue": "\u22E0", "npre": "\u2AAF\u0338", "nprec": "\u2280", "npreceq": "\u2AAF\u0338", "nrarr": "\u219B", "nrArr": "\u21CF", "nrarrc": "\u2933\u0338", "nrarrw": "\u219D\u0338", "nrightarrow": "\u219B", "nRightarrow": "\u21CF", "nrtri": "\u22EB", "nrtrie": "\u22ED", "nsc": "\u2281", "nsccue": "\u22E1", "nsce": "\u2AB0\u0338", "nscr": "\u{1D4C3}", "Nscr": "\u{1D4A9}", "nshortmid": "\u2224", "nshortparallel": "\u2226", "nsim": "\u2241", "nsime": "\u2244", "nsimeq": "\u2244", "nsmid": "\u2224", "nspar": "\u2226", "nsqsube": "\u22E2", "nsqsupe": "\u22E3", "nsub": "\u2284", "nsube": "\u2288", "nsubE": "\u2AC5\u0338", "nsubset": "\u2282\u20D2", "nsubseteq": "\u2288", "nsubseteqq": "\u2AC5\u0338", "nsucc": "\u2281", "nsucceq": "\u2AB0\u0338", "nsup": "\u2285", "nsupe": "\u2289", "nsupE": "\u2AC6\u0338", "nsupset": "\u2283\u20D2", "nsupseteq": "\u2289", "nsupseteqq": "\u2AC6\u0338", "ntgl": "\u2279", "ntilde": "\xF1", "Ntilde": "\xD1", "ntlg": "\u2278", "ntriangleleft": "\u22EA", "ntrianglelefteq": "\u22EC", "ntriangleright": "\u22EB", "ntrianglerighteq": "\u22ED", "nu": "\u03BD", "Nu": "\u039D", "num": "#", "numero": "\u2116", "numsp": "\u2007", "nvap": "\u224D\u20D2", "nvdash": "\u22AC", "nvDash": "\u22AD", "nVdash": "\u22AE", "nVDash": "\u22AF", "nvge": "\u2265\u20D2", "nvgt": ">\u20D2", "nvHarr": "\u2904", "nvinfin": "\u29DE", "nvlArr": "\u2902", "nvle": "\u2264\u20D2", "nvlt": "<\u20D2", "nvltrie": "\u22B4\u20D2", "nvrArr": "\u2903", "nvrtrie": "\u22B5\u20D2", "nvsim": "\u223C\u20D2", "nwarhk": "\u2923", "nwarr": "\u2196", "nwArr": "\u21D6", "nwarrow": "\u2196", "nwnear": "\u2927", "oacute": "\xF3", "Oacute": "\xD3", "oast": "\u229B", "ocir": "\u229A", "ocirc": "\xF4", "Ocirc": "\xD4", "ocy": "\u043E", "Ocy": "\u041E", "odash": "\u229D", "odblac": "\u0151", "Odblac": "\u0150", "odiv": "\u2A38", "odot": "\u2299", "odsold": "\u29BC", "oelig": "\u0153", "OElig": "\u0152", "ofcir": "\u29BF", "ofr": "\u{1D52C}", "Ofr": "\u{1D512}", "ogon": "\u02DB", "ograve": "\xF2", "Ograve": "\xD2", "ogt": "\u29C1", "ohbar": "\u29B5", "ohm": "\u03A9", "oint": "\u222E", "olarr": "\u21BA", "olcir": "\u29BE", "olcross": "\u29BB", "oline": "\u203E", "olt": "\u29C0", "omacr": "\u014D", "Omacr": "\u014C", "omega": "\u03C9", "Omega": "\u03A9", "omicron": "\u03BF", "Omicron": "\u039F", "omid": "\u29B6", "ominus": "\u2296", "oopf": "\u{1D560}", "Oopf": "\u{1D546}", "opar": "\u29B7", "OpenCurlyDoubleQuote": "\u201C", "OpenCurlyQuote": "\u2018", "operp": "\u29B9", "oplus": "\u2295", "or": "\u2228", "Or": "\u2A54", "orarr": "\u21BB", "ord": "\u2A5D", "order": "\u2134", "orderof": "\u2134", "ordf": "\xAA", "ordm": "\xBA", "origof": "\u22B6", "oror": "\u2A56", "orslope": "\u2A57", "orv": "\u2A5B", "oS": "\u24C8", "oscr": "\u2134", "Oscr": "\u{1D4AA}", "oslash": "\xF8", "Oslash": "\xD8", "osol": "\u2298", "otilde": "\xF5", "Otilde": "\xD5", "otimes": "\u2297", "Otimes": "\u2A37", "otimesas": "\u2A36", "ouml": "\xF6", "Ouml": "\xD6", "ovbar": "\u233D", "OverBar": "\u203E", "OverBrace": "\u23DE", "OverBracket": "\u23B4", "OverParenthesis": "\u23DC", "par": "\u2225", "para": "\xB6", "parallel": "\u2225", "parsim": "\u2AF3", "parsl": "\u2AFD", "part": "\u2202", "PartialD": "\u2202", "pcy": "\u043F", "Pcy": "\u041F", "percnt": "%", "period": ".", "permil": "\u2030", "perp": "\u22A5", "pertenk": "\u2031", "pfr": "\u{1D52D}", "Pfr": "\u{1D513}", "phi": "\u03C6", "Phi": "\u03A6", "phiv": "\u03D5", "phmmat": "\u2133", "phone": "\u260E", "pi": "\u03C0", "Pi": "\u03A0", "pitchfork": "\u22D4", "piv": "\u03D6", "planck": "\u210F", "planckh": "\u210E", "plankv": "\u210F", "plus": "+", "plusacir": "\u2A23", "plusb": "\u229E", "pluscir": "\u2A22", "plusdo": "\u2214", "plusdu": "\u2A25", "pluse": "\u2A72", "PlusMinus": "\xB1", "plusmn": "\xB1", "plussim": "\u2A26", "plustwo": "\u2A27", "pm": "\xB1", "Poincareplane": "\u210C", "pointint": "\u2A15", "popf": "\u{1D561}", "Popf": "\u2119", "pound": "\xA3", "pr": "\u227A", "Pr": "\u2ABB", "prap": "\u2AB7", "prcue": "\u227C", "pre": "\u2AAF", "prE": "\u2AB3", "prec": "\u227A", "precapprox": "\u2AB7", "preccurlyeq": "\u227C", "Precedes": "\u227A", "PrecedesEqual": "\u2AAF", "PrecedesSlantEqual": "\u227C", "PrecedesTilde": "\u227E", "preceq": "\u2AAF", "precnapprox": "\u2AB9", "precneqq": "\u2AB5", "precnsim": "\u22E8", "precsim": "\u227E", "prime": "\u2032", "Prime": "\u2033", "primes": "\u2119", "prnap": "\u2AB9", "prnE": "\u2AB5", "prnsim": "\u22E8", "prod": "\u220F", "Product": "\u220F", "profalar": "\u232E", "profline": "\u2312", "profsurf": "\u2313", "prop": "\u221D", "Proportion": "\u2237", "Proportional": "\u221D", "propto": "\u221D", "prsim": "\u227E", "prurel": "\u22B0", "pscr": "\u{1D4C5}", "Pscr": "\u{1D4AB}", "psi": "\u03C8", "Psi": "\u03A8", "puncsp": "\u2008", "qfr": "\u{1D52E}", "Qfr": "\u{1D514}", "qint": "\u2A0C", "qopf": "\u{1D562}", "Qopf": "\u211A", "qprime": "\u2057", "qscr": "\u{1D4C6}", "Qscr": "\u{1D4AC}", "quaternions": "\u210D", "quatint": "\u2A16", "quest": "?", "questeq": "\u225F", "quot": '"', "QUOT": '"', "rAarr": "\u21DB", "race": "\u223D\u0331", "racute": "\u0155", "Racute": "\u0154", "radic": "\u221A", "raemptyv": "\u29B3", "rang": "\u27E9", "Rang": "\u27EB", "rangd": "\u2992", "range": "\u29A5", "rangle": "\u27E9", "raquo": "\xBB", "rarr": "\u2192", "rArr": "\u21D2", "Rarr": "\u21A0", "rarrap": "\u2975", "rarrb": "\u21E5", "rarrbfs": "\u2920", "rarrc": "\u2933", "rarrfs": "\u291E", "rarrhk": "\u21AA", "rarrlp": "\u21AC", "rarrpl": "\u2945", "rarrsim": "\u2974", "rarrtl": "\u21A3", "Rarrtl": "\u2916", "rarrw": "\u219D", "ratail": "\u291A", "rAtail": "\u291C", "ratio": "\u2236", "rationals": "\u211A", "rbarr": "\u290D", "rBarr": "\u290F", "RBarr": "\u2910", "rbbrk": "\u2773", "rbrace": "}", "rbrack": "]", "rbrke": "\u298C", "rbrksld": "\u298E", "rbrkslu": "\u2990", "rcaron": "\u0159", "Rcaron": "\u0158", "rcedil": "\u0157", "Rcedil": "\u0156", "rceil": "\u2309", "rcub": "}", "rcy": "\u0440", "Rcy": "\u0420", "rdca": "\u2937", "rdldhar": "\u2969", "rdquo": "\u201D", "rdquor": "\u201D", "rdsh": "\u21B3", "Re": "\u211C", "real": "\u211C", "realine": "\u211B", "realpart": "\u211C", "reals": "\u211D", "rect": "\u25AD", "reg": "\xAE", "REG": "\xAE", "ReverseElement": "\u220B", "ReverseEquilibrium": "\u21CB", "ReverseUpEquilibrium": "\u296F", "rfisht": "\u297D", "rfloor": "\u230B", "rfr": "\u{1D52F}", "Rfr": "\u211C", "rHar": "\u2964", "rhard": "\u21C1", "rharu": "\u21C0", "rharul": "\u296C", "rho": "\u03C1", "Rho": "\u03A1", "rhov": "\u03F1", "RightAngleBracket": "\u27E9", "rightarrow": "\u2192", "Rightarrow": "\u21D2", "RightArrow": "\u2192", "RightArrowBar": "\u21E5", "RightArrowLeftArrow": "\u21C4", "rightarrowtail": "\u21A3", "RightCeiling": "\u2309", "RightDoubleBracket": "\u27E7", "RightDownTeeVector": "\u295D", "RightDownVector": "\u21C2", "RightDownVectorBar": "\u2955", "RightFloor": "\u230B", "rightharpoondown": "\u21C1", "rightharpoonup": "\u21C0", "rightleftarrows": "\u21C4", "rightleftharpoons": "\u21CC", "rightrightarrows": "\u21C9", "rightsquigarrow": "\u219D", "RightTee": "\u22A2", "RightTeeArrow": "\u21A6", "RightTeeVector": "\u295B", "rightthreetimes": "\u22CC", "RightTriangle": "\u22B3", "RightTriangleBar": "\u29D0", "RightTriangleEqual": "\u22B5", "RightUpDownVector": "\u294F", "RightUpTeeVector": "\u295C", "RightUpVector": "\u21BE", "RightUpVectorBar": "\u2954", "RightVector": "\u21C0", "RightVectorBar": "\u2953", "ring": "\u02DA", "risingdotseq": "\u2253", "rlarr": "\u21C4", "rlhar": "\u21CC", "rlm": "\u200F", "rmoust": "\u23B1", "rmoustache": "\u23B1", "rnmid": "\u2AEE", "roang": "\u27ED", "roarr": "\u21FE", "robrk": "\u27E7", "ropar": "\u2986", "ropf": "\u{1D563}", "Ropf": "\u211D", "roplus": "\u2A2E", "rotimes": "\u2A35", "RoundImplies": "\u2970", "rpar": ")", "rpargt": "\u2994", "rppolint": "\u2A12", "rrarr": "\u21C9", "Rrightarrow": "\u21DB", "rsaquo": "\u203A", "rscr": "\u{1D4C7}", "Rscr": "\u211B", "rsh": "\u21B1", "Rsh": "\u21B1", "rsqb": "]", "rsquo": "\u2019", "rsquor": "\u2019", "rthree": "\u22CC", "rtimes": "\u22CA", "rtri": "\u25B9", "rtrie": "\u22B5", "rtrif": "\u25B8", "rtriltri": "\u29CE", "RuleDelayed": "\u29F4", "ruluhar": "\u2968", "rx": "\u211E", "sacute": "\u015B", "Sacute": "\u015A", "sbquo": "\u201A", "sc": "\u227B", "Sc": "\u2ABC", "scap": "\u2AB8", "scaron": "\u0161", "Scaron": "\u0160", "sccue": "\u227D", "sce": "\u2AB0", "scE": "\u2AB4", "scedil": "\u015F", "Scedil": "\u015E", "scirc": "\u015D", "Scirc": "\u015C", "scnap": "\u2ABA", "scnE": "\u2AB6", "scnsim": "\u22E9", "scpolint": "\u2A13", "scsim": "\u227F", "scy": "\u0441", "Scy": "\u0421", "sdot": "\u22C5", "sdotb": "\u22A1", "sdote": "\u2A66", "searhk": "\u2925", "searr": "\u2198", "seArr": "\u21D8", "searrow": "\u2198", "sect": "\xA7", "semi": ";", "seswar": "\u2929", "setminus": "\u2216", "setmn": "\u2216", "sext": "\u2736", "sfr": "\u{1D530}", "Sfr": "\u{1D516}", "sfrown": "\u2322", "sharp": "\u266F", "shchcy": "\u0449", "SHCHcy": "\u0429", "shcy": "\u0448", "SHcy": "\u0428", "ShortDownArrow": "\u2193", "ShortLeftArrow": "\u2190", "shortmid": "\u2223", "shortparallel": "\u2225", "ShortRightArrow": "\u2192", "ShortUpArrow": "\u2191", "shy": "\xAD", "sigma": "\u03C3", "Sigma": "\u03A3", "sigmaf": "\u03C2", "sigmav": "\u03C2", "sim": "\u223C", "simdot": "\u2A6A", "sime": "\u2243", "simeq": "\u2243", "simg": "\u2A9E", "simgE": "\u2AA0", "siml": "\u2A9D", "simlE": "\u2A9F", "simne": "\u2246", "simplus": "\u2A24", "simrarr": "\u2972", "slarr": "\u2190", "SmallCircle": "\u2218", "smallsetminus": "\u2216", "smashp": "\u2A33", "smeparsl": "\u29E4", "smid": "\u2223", "smile": "\u2323", "smt": "\u2AAA", "smte": "\u2AAC", "smtes": "\u2AAC\uFE00", "softcy": "\u044C", "SOFTcy": "\u042C", "sol": "/", "solb": "\u29C4", "solbar": "\u233F", "sopf": "\u{1D564}", "Sopf": "\u{1D54A}", "spades": "\u2660", "spadesuit": "\u2660", "spar": "\u2225", "sqcap": "\u2293", "sqcaps": "\u2293\uFE00", "sqcup": "\u2294", "sqcups": "\u2294\uFE00", "Sqrt": "\u221A", "sqsub": "\u228F", "sqsube": "\u2291", "sqsubset": "\u228F", "sqsubseteq": "\u2291", "sqsup": "\u2290", "sqsupe": "\u2292", "sqsupset": "\u2290", "sqsupseteq": "\u2292", "squ": "\u25A1", "square": "\u25A1", "Square": "\u25A1", "SquareIntersection": "\u2293", "SquareSubset": "\u228F", "SquareSubsetEqual": "\u2291", "SquareSuperset": "\u2290", "SquareSupersetEqual": "\u2292", "SquareUnion": "\u2294", "squarf": "\u25AA", "squf": "\u25AA", "srarr": "\u2192", "sscr": "\u{1D4C8}", "Sscr": "\u{1D4AE}", "ssetmn": "\u2216", "ssmile": "\u2323", "sstarf": "\u22C6", "star": "\u2606", "Star": "\u22C6", "starf": "\u2605", "straightepsilon": "\u03F5", "straightphi": "\u03D5", "strns": "\xAF", "sub": "\u2282", "Sub": "\u22D0", "subdot": "\u2ABD", "sube": "\u2286", "subE": "\u2AC5", "subedot": "\u2AC3", "submult": "\u2AC1", "subne": "\u228A", "subnE": "\u2ACB", "subplus": "\u2ABF", "subrarr": "\u2979", "subset": "\u2282", "Subset": "\u22D0", "subseteq": "\u2286", "subseteqq": "\u2AC5", "SubsetEqual": "\u2286", "subsetneq": "\u228A", "subsetneqq": "\u2ACB", "subsim": "\u2AC7", "subsub": "\u2AD5", "subsup": "\u2AD3", "succ": "\u227B", "succapprox": "\u2AB8", "succcurlyeq": "\u227D", "Succeeds": "\u227B", "SucceedsEqual": "\u2AB0", "SucceedsSlantEqual": "\u227D", "SucceedsTilde": "\u227F", "succeq": "\u2AB0", "succnapprox": "\u2ABA", "succneqq": "\u2AB6", "succnsim": "\u22E9", "succsim": "\u227F", "SuchThat": "\u220B", "sum": "\u2211", "Sum": "\u2211", "sung": "\u266A", "sup": "\u2283", "Sup": "\u22D1", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "supdot": "\u2ABE", "supdsub": "\u2AD8", "supe": "\u2287", "supE": "\u2AC6", "supedot": "\u2AC4", "Superset": "\u2283", "SupersetEqual": "\u2287", "suphsol": "\u27C9", "suphsub": "\u2AD7", "suplarr": "\u297B", "supmult": "\u2AC2", "supne": "\u228B", "supnE": "\u2ACC", "supplus": "\u2AC0", "supset": "\u2283", "Supset": "\u22D1", "supseteq": "\u2287", "supseteqq": "\u2AC6", "supsetneq": "\u228B", "supsetneqq": "\u2ACC", "supsim": "\u2AC8", "supsub": "\u2AD4", "supsup": "\u2AD6", "swarhk": "\u2926", "swarr": "\u2199", "swArr": "\u21D9", "swarrow": "\u2199", "swnwar": "\u292A", "szlig": "\xDF", "Tab": "	", "target": "\u2316", "tau": "\u03C4", "Tau": "\u03A4", "tbrk": "\u23B4", "tcaron": "\u0165", "Tcaron": "\u0164", "tcedil": "\u0163", "Tcedil": "\u0162", "tcy": "\u0442", "Tcy": "\u0422", "tdot": "\u20DB", "telrec": "\u2315", "tfr": "\u{1D531}", "Tfr": "\u{1D517}", "there4": "\u2234", "therefore": "\u2234", "Therefore": "\u2234", "theta": "\u03B8", "Theta": "\u0398", "thetasym": "\u03D1", "thetav": "\u03D1", "thickapprox": "\u2248", "thicksim": "\u223C", "ThickSpace": "\u205F\u200A", "thinsp": "\u2009", "ThinSpace": "\u2009", "thkap": "\u2248", "thksim": "\u223C", "thorn": "\xFE", "THORN": "\xDE", "tilde": "\u02DC", "Tilde": "\u223C", "TildeEqual": "\u2243", "TildeFullEqual": "\u2245", "TildeTilde": "\u2248", "times": "\xD7", "timesb": "\u22A0", "timesbar": "\u2A31", "timesd": "\u2A30", "tint": "\u222D", "toea": "\u2928", "top": "\u22A4", "topbot": "\u2336", "topcir": "\u2AF1", "topf": "\u{1D565}", "Topf": "\u{1D54B}", "topfork": "\u2ADA", "tosa": "\u2929", "tprime": "\u2034", "trade": "\u2122", "TRADE": "\u2122", "triangle": "\u25B5", "triangledown": "\u25BF", "triangleleft": "\u25C3", "trianglelefteq": "\u22B4", "triangleq": "\u225C", "triangleright": "\u25B9", "trianglerighteq": "\u22B5", "tridot": "\u25EC", "trie": "\u225C", "triminus": "\u2A3A", "TripleDot": "\u20DB", "triplus": "\u2A39", "trisb": "\u29CD", "tritime": "\u2A3B", "trpezium": "\u23E2", "tscr": "\u{1D4C9}", "Tscr": "\u{1D4AF}", "tscy": "\u0446", "TScy": "\u0426", "tshcy": "\u045B", "TSHcy": "\u040B", "tstrok": "\u0167", "Tstrok": "\u0166", "twixt": "\u226C", "twoheadleftarrow": "\u219E", "twoheadrightarrow": "\u21A0", "uacute": "\xFA", "Uacute": "\xDA", "uarr": "\u2191", "uArr": "\u21D1", "Uarr": "\u219F", "Uarrocir": "\u2949", "ubrcy": "\u045E", "Ubrcy": "\u040E", "ubreve": "\u016D", "Ubreve": "\u016C", "ucirc": "\xFB", "Ucirc": "\xDB", "ucy": "\u0443", "Ucy": "\u0423", "udarr": "\u21C5", "udblac": "\u0171", "Udblac": "\u0170", "udhar": "\u296E", "ufisht": "\u297E", "ufr": "\u{1D532}", "Ufr": "\u{1D518}", "ugrave": "\xF9", "Ugrave": "\xD9", "uHar": "\u2963", "uharl": "\u21BF", "uharr": "\u21BE", "uhblk": "\u2580", "ulcorn": "\u231C", "ulcorner": "\u231C", "ulcrop": "\u230F", "ultri": "\u25F8", "umacr": "\u016B", "Umacr": "\u016A", "uml": "\xA8", "UnderBar": "_", "UnderBrace": "\u23DF", "UnderBracket": "\u23B5", "UnderParenthesis": "\u23DD", "Union": "\u22C3", "UnionPlus": "\u228E", "uogon": "\u0173", "Uogon": "\u0172", "uopf": "\u{1D566}", "Uopf": "\u{1D54C}", "uparrow": "\u2191", "Uparrow": "\u21D1", "UpArrow": "\u2191", "UpArrowBar": "\u2912", "UpArrowDownArrow": "\u21C5", "updownarrow": "\u2195", "Updownarrow": "\u21D5", "UpDownArrow": "\u2195", "UpEquilibrium": "\u296E", "upharpoonleft": "\u21BF", "upharpoonright": "\u21BE", "uplus": "\u228E", "UpperLeftArrow": "\u2196", "UpperRightArrow": "\u2197", "upsi": "\u03C5", "Upsi": "\u03D2", "upsih": "\u03D2", "upsilon": "\u03C5", "Upsilon": "\u03A5", "UpTee": "\u22A5", "UpTeeArrow": "\u21A5", "upuparrows": "\u21C8", "urcorn": "\u231D", "urcorner": "\u231D", "urcrop": "\u230E", "uring": "\u016F", "Uring": "\u016E", "urtri": "\u25F9", "uscr": "\u{1D4CA}", "Uscr": "\u{1D4B0}", "utdot": "\u22F0", "utilde": "\u0169", "Utilde": "\u0168", "utri": "\u25B5", "utrif": "\u25B4", "uuarr": "\u21C8", "uuml": "\xFC", "Uuml": "\xDC", "uwangle": "\u29A7", "vangrt": "\u299C", "varepsilon": "\u03F5", "varkappa": "\u03F0", "varnothing": "\u2205", "varphi": "\u03D5", "varpi": "\u03D6", "varpropto": "\u221D", "varr": "\u2195", "vArr": "\u21D5", "varrho": "\u03F1", "varsigma": "\u03C2", "varsubsetneq": "\u228A\uFE00", "varsubsetneqq": "\u2ACB\uFE00", "varsupsetneq": "\u228B\uFE00", "varsupsetneqq": "\u2ACC\uFE00", "vartheta": "\u03D1", "vartriangleleft": "\u22B2", "vartriangleright": "\u22B3", "vBar": "\u2AE8", "Vbar": "\u2AEB", "vBarv": "\u2AE9", "vcy": "\u0432", "Vcy": "\u0412", "vdash": "\u22A2", "vDash": "\u22A8", "Vdash": "\u22A9", "VDash": "\u22AB", "Vdashl": "\u2AE6", "vee": "\u2228", "Vee": "\u22C1", "veebar": "\u22BB", "veeeq": "\u225A", "vellip": "\u22EE", "verbar": "|", "Verbar": "\u2016", "vert": "|", "Vert": "\u2016", "VerticalBar": "\u2223", "VerticalLine": "|", "VerticalSeparator": "\u2758", "VerticalTilde": "\u2240", "VeryThinSpace": "\u200A", "vfr": "\u{1D533}", "Vfr": "\u{1D519}", "vltri": "\u22B2", "vnsub": "\u2282\u20D2", "vnsup": "\u2283\u20D2", "vopf": "\u{1D567}", "Vopf": "\u{1D54D}", "vprop": "\u221D", "vrtri": "\u22B3", "vscr": "\u{1D4CB}", "Vscr": "\u{1D4B1}", "vsubne": "\u228A\uFE00", "vsubnE": "\u2ACB\uFE00", "vsupne": "\u228B\uFE00", "vsupnE": "\u2ACC\uFE00", "Vvdash": "\u22AA", "vzigzag": "\u299A", "wcirc": "\u0175", "Wcirc": "\u0174", "wedbar": "\u2A5F", "wedge": "\u2227", "Wedge": "\u22C0", "wedgeq": "\u2259", "weierp": "\u2118", "wfr": "\u{1D534}", "Wfr": "\u{1D51A}", "wopf": "\u{1D568}", "Wopf": "\u{1D54E}", "wp": "\u2118", "wr": "\u2240", "wreath": "\u2240", "wscr": "\u{1D4CC}", "Wscr": "\u{1D4B2}", "xcap": "\u22C2", "xcirc": "\u25EF", "xcup": "\u22C3", "xdtri": "\u25BD", "xfr": "\u{1D535}", "Xfr": "\u{1D51B}", "xharr": "\u27F7", "xhArr": "\u27FA", "xi": "\u03BE", "Xi": "\u039E", "xlarr": "\u27F5", "xlArr": "\u27F8", "xmap": "\u27FC", "xnis": "\u22FB", "xodot": "\u2A00", "xopf": "\u{1D569}", "Xopf": "\u{1D54F}", "xoplus": "\u2A01", "xotime": "\u2A02", "xrarr": "\u27F6", "xrArr": "\u27F9", "xscr": "\u{1D4CD}", "Xscr": "\u{1D4B3}", "xsqcup": "\u2A06", "xuplus": "\u2A04", "xutri": "\u25B3", "xvee": "\u22C1", "xwedge": "\u22C0", "yacute": "\xFD", "Yacute": "\xDD", "yacy": "\u044F", "YAcy": "\u042F", "ycirc": "\u0177", "Ycirc": "\u0176", "ycy": "\u044B", "Ycy": "\u042B", "yen": "\xA5", "yfr": "\u{1D536}", "Yfr": "\u{1D51C}", "yicy": "\u0457", "YIcy": "\u0407", "yopf": "\u{1D56A}", "Yopf": "\u{1D550}", "yscr": "\u{1D4CE}", "Yscr": "\u{1D4B4}", "yucy": "\u044E", "YUcy": "\u042E", "yuml": "\xFF", "Yuml": "\u0178", "zacute": "\u017A", "Zacute": "\u0179", "zcaron": "\u017E", "Zcaron": "\u017D", "zcy": "\u0437", "Zcy": "\u0417", "zdot": "\u017C", "Zdot": "\u017B", "zeetrf": "\u2128", "ZeroWidthSpace": "\u200B", "zeta": "\u03B6", "Zeta": "\u0396", "zfr": "\u{1D537}", "Zfr": "\u2128", "zhcy": "\u0436", "ZHcy": "\u0416", "zigrarr": "\u21DD", "zopf": "\u{1D56B}", "Zopf": "\u2124", "zscr": "\u{1D4CF}", "Zscr": "\u{1D4B5}", "zwj": "\u200D", "zwnj": "\u200C" };
      var decodeMapLegacy = { "aacute": "\xE1", "Aacute": "\xC1", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "aelig": "\xE6", "AElig": "\xC6", "agrave": "\xE0", "Agrave": "\xC0", "amp": "&", "AMP": "&", "aring": "\xE5", "Aring": "\xC5", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "brvbar": "\xA6", "ccedil": "\xE7", "Ccedil": "\xC7", "cedil": "\xB8", "cent": "\xA2", "copy": "\xA9", "COPY": "\xA9", "curren": "\xA4", "deg": "\xB0", "divide": "\xF7", "eacute": "\xE9", "Eacute": "\xC9", "ecirc": "\xEA", "Ecirc": "\xCA", "egrave": "\xE8", "Egrave": "\xC8", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "frac12": "\xBD", "frac14": "\xBC", "frac34": "\xBE", "gt": ">", "GT": ">", "iacute": "\xED", "Iacute": "\xCD", "icirc": "\xEE", "Icirc": "\xCE", "iexcl": "\xA1", "igrave": "\xEC", "Igrave": "\xCC", "iquest": "\xBF", "iuml": "\xEF", "Iuml": "\xCF", "laquo": "\xAB", "lt": "<", "LT": "<", "macr": "\xAF", "micro": "\xB5", "middot": "\xB7", "nbsp": "\xA0", "not": "\xAC", "ntilde": "\xF1", "Ntilde": "\xD1", "oacute": "\xF3", "Oacute": "\xD3", "ocirc": "\xF4", "Ocirc": "\xD4", "ograve": "\xF2", "Ograve": "\xD2", "ordf": "\xAA", "ordm": "\xBA", "oslash": "\xF8", "Oslash": "\xD8", "otilde": "\xF5", "Otilde": "\xD5", "ouml": "\xF6", "Ouml": "\xD6", "para": "\xB6", "plusmn": "\xB1", "pound": "\xA3", "quot": '"', "QUOT": '"', "raquo": "\xBB", "reg": "\xAE", "REG": "\xAE", "sect": "\xA7", "shy": "\xAD", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "szlig": "\xDF", "thorn": "\xFE", "THORN": "\xDE", "times": "\xD7", "uacute": "\xFA", "Uacute": "\xDA", "ucirc": "\xFB", "Ucirc": "\xDB", "ugrave": "\xF9", "Ugrave": "\xD9", "uml": "\xA8", "uuml": "\xFC", "Uuml": "\xDC", "yacute": "\xFD", "Yacute": "\xDD", "yen": "\xA5", "yuml": "\xFF" };
      var decodeMapNumeric = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
      var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65e3, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
      var stringFromCharCode = String.fromCharCode;
      var object = {};
      var hasOwnProperty = object.hasOwnProperty;
      var has = function(object2, propertyName) {
        return hasOwnProperty.call(object2, propertyName);
      };
      var contains2 = function(array, value) {
        var index = -1;
        var length = array.length;
        while (++index < length) {
          if (array[index] == value) {
            return true;
          }
        }
        return false;
      };
      var merge = function(options, defaults) {
        if (!options) {
          return defaults;
        }
        var result = {};
        var key2;
        for (key2 in defaults) {
          result[key2] = has(options, key2) ? options[key2] : defaults[key2];
        }
        return result;
      };
      var codePointToSymbol = function(codePoint, strict) {
        var output = "";
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          if (strict) {
            parseError("character reference outside the permissible Unicode range");
          }
          return "\uFFFD";
        }
        if (has(decodeMapNumeric, codePoint)) {
          if (strict) {
            parseError("disallowed character reference");
          }
          return decodeMapNumeric[codePoint];
        }
        if (strict && contains2(invalidReferenceCodePoints, codePoint)) {
          parseError("disallowed character reference");
        }
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += stringFromCharCode(codePoint);
        return output;
      };
      var hexEscape = function(codePoint) {
        return "&#x" + codePoint.toString(16).toUpperCase() + ";";
      };
      var decEscape = function(codePoint) {
        return "&#" + codePoint + ";";
      };
      var parseError = function(message) {
        throw Error("Parse error: " + message);
      };
      var encode = function(string, options) {
        options = merge(options, encode.options);
        var strict = options.strict;
        if (strict && regexInvalidRawCodePoint.test(string)) {
          parseError("forbidden code point");
        }
        var encodeEverything = options.encodeEverything;
        var useNamedReferences = options.useNamedReferences;
        var allowUnsafeSymbols = options.allowUnsafeSymbols;
        var escapeCodePoint = options.decimal ? decEscape : hexEscape;
        var escapeBmpSymbol = function(symbol) {
          return escapeCodePoint(symbol.charCodeAt(0));
        };
        if (encodeEverything) {
          string = string.replace(regexAsciiWhitelist, function(symbol) {
            if (useNamedReferences && has(encodeMap, symbol)) {
              return "&" + encodeMap[symbol] + ";";
            }
            return escapeBmpSymbol(symbol);
          });
          if (useNamedReferences) {
            string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
          }
          if (useNamedReferences) {
            string = string.replace(regexEncodeNonAscii, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          }
        } else if (useNamedReferences) {
          if (!allowUnsafeSymbols) {
            string = string.replace(regexEscape, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          }
          string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
          string = string.replace(regexEncodeNonAscii, function(string2) {
            return "&" + encodeMap[string2] + ";";
          });
        } else if (!allowUnsafeSymbols) {
          string = string.replace(regexEscape, escapeBmpSymbol);
        }
        return string.replace(regexAstralSymbols, function($0) {
          var high = $0.charCodeAt(0);
          var low = $0.charCodeAt(1);
          var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
          return escapeCodePoint(codePoint);
        }).replace(regexBmpWhitelist, escapeBmpSymbol);
      };
      encode.options = {
        "allowUnsafeSymbols": false,
        "encodeEverything": false,
        "strict": false,
        "useNamedReferences": false,
        "decimal": false
      };
      var decode2 = function(html, options) {
        options = merge(options, decode2.options);
        var strict = options.strict;
        if (strict && regexInvalidEntity.test(html)) {
          parseError("malformed character reference");
        }
        return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
          var codePoint;
          var semicolon;
          var decDigits;
          var hexDigits;
          var reference2;
          var next2;
          if ($1) {
            reference2 = $1;
            return decodeMap[reference2];
          }
          if ($2) {
            reference2 = $2;
            next2 = $3;
            if (next2 && options.isAttributeValue) {
              if (strict && next2 == "=") {
                parseError("`&` did not start a character reference");
              }
              return $0;
            } else {
              if (strict) {
                parseError("named character reference was not terminated by a semicolon");
              }
              return decodeMapLegacy[reference2] + (next2 || "");
            }
          }
          if ($4) {
            decDigits = $4;
            semicolon = $5;
            if (strict && !semicolon) {
              parseError("character reference was not terminated by a semicolon");
            }
            codePoint = parseInt(decDigits, 10);
            return codePointToSymbol(codePoint, strict);
          }
          if ($6) {
            hexDigits = $6;
            semicolon = $7;
            if (strict && !semicolon) {
              parseError("character reference was not terminated by a semicolon");
            }
            codePoint = parseInt(hexDigits, 16);
            return codePointToSymbol(codePoint, strict);
          }
          if (strict) {
            parseError("named character reference was not terminated by a semicolon");
          }
          return $0;
        });
      };
      decode2.options = {
        "isAttributeValue": false,
        "strict": false
      };
      var escape = function(string) {
        return string.replace(regexEscape, function($0) {
          return escapeMap[$0];
        });
      };
      var he = {
        "version": "1.2.0",
        "encode": encode,
        "decode": decode2,
        "escape": escape,
        "unescape": decode2
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define(function() {
          return he;
        });
      } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
          freeModule.exports = he;
        } else {
          for (var key in he) {
            has(he, key) && (freeExports[key] = he[key]);
          }
        }
      } else {
        root.he = he;
      }
    })(exports);
  }
});

// src/main.ts
__export(exports, {
  DEFAULT_CALENDAR: () => DEFAULT_CALENDAR,
  DEFAULT_DATA: () => DEFAULT_DATA,
  MODIFIER_KEY: () => MODIFIER_KEY2,
  default: () => FantasyCalendar2
});
var import_obsidian38 = __toModule(require("obsidian"));

// src/settings/settings.ts
var import_obsidian29 = __toModule(require("obsidian"));
var import_fast_copy2 = __toModule(require_fast_copy());

// src/settings/import/importer.ts
var import_distinct_colors = __toModule(require_lib());

// src/utils/functions.ts
function daysBetween(date1, date2) {
  const d1 = window.moment(date1);
  const d2 = window.moment(date2);
  let days = d2.diff(d1, "days");
  if ((d1.year() < d2.year() || d1.dayOfYear() < d2.dayOfYear()) && (d1.hour() > d2.hour() || d1.minute() > d2.minute() || d1.second() > d2.second() || d1.millisecond() > d2.millisecond())) {
    days += 1;
  }
  return days;
}
function wrap(value, size) {
  return (value % size + size) % size;
}
function nanoid(len) {
  return "ID_xyxyxyxyxyxy".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function getIntervalDescription(leapday) {
  if (!leapday.interval?.length)
    return "";
  const intervals = leapday.interval.sort((a, b) => a.interval - b.interval);
  let description = [];
  for (let interval of intervals) {
    const length = interval.interval + (interval.ignore ? 0 : leapday.offset);
    if (interval.exclusive) {
      description.push(`not every ${ordinal(length)} year`);
    } else {
      const index = intervals.indexOf(interval);
      const also = index > 0 && intervals[index - 1].exclusive;
      description.push(`${also ? "also " : ""}every ${ordinal(length)} year`);
    }
  }
  const join = description.join(", but ");
  return join[0].toUpperCase() + join.slice(1).toLowerCase();
}
function ordinal(i) {
  const j = i % 10, k = i % 100;
  if (j == 1 && k != 11) {
    return i + "st";
  }
  if (j == 2 && k != 12) {
    return i + "nd";
  }
  if (j == 3 && k != 13) {
    return i + "rd";
  }
  return i + "th";
}
function dateString(date, months, end2) {
  if (!date || date.day == void 0) {
    return "";
  }
  const { day, month, year } = date;
  if (month != void 0 && !months[month])
    return "Invalid Date";
  if (end2 && end2.day) {
    const endDay = end2.day;
    const endMonth = end2.month;
    const endYear = end2.year;
    if (endMonth != void 0 && endYear != void 0 && month != void 0 && year != void 0) {
      if (year != endYear) {
        return `${months[month].name} ${ordinal(day)}, ${year} - ${months[endMonth].name} ${ordinal(endDay)}, ${endYear}`;
      }
      if (endMonth == month) {
        return `${months[month].name} ${ordinal(day)}-${ordinal(endDay)}, ${year}`;
      }
      if (month != void 0 && year != void 0) {
        return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)}, ${year}`;
      }
      if (month != void 0) {
        return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)} of every year`;
      }
      return `${ordinal(day)}-${ordinal(endDay)} of every month`;
    }
  }
  if (month != void 0 && year != void 0) {
    return `${months[month].name} ${ordinal(day)}, ${year}`;
  }
  if (month != void 0) {
    return `${months[month].name} ${ordinal(day)} of every year`;
  }
  return `${ordinal(day)} of every month`;
}

// src/settings/import/importer.ts
var import_he = __toModule(require_he());
var Import = class {
  static import(objects) {
    const calendars = [];
    for (let data of objects) {
      const name = data.name ?? "Imported Calendar";
      const static_data = data.static_data;
      if (!static_data)
        continue;
      const year_data = static_data.year_data;
      if (!year_data)
        continue;
      const firstWeekDay = year_data.first_day - 1;
      const overflow = year_data.overflow ?? true;
      const global_week = year_data.global_week;
      if (!global_week)
        continue;
      const weekdays = global_week.map((n) => {
        return {
          type: "day",
          name: n,
          id: nanoid(6)
        };
      });
      const timespans = year_data.timespans;
      if (!timespans)
        continue;
      const months = timespans.map((m) => {
        return {
          name: (0, import_he.decode)(m.name),
          type: m.type,
          length: m.length,
          id: nanoid(6)
        };
      });
      const avgLength = months.reduce((a, b) => {
        if (b.type == "month") {
          return a + b.length;
        }
        return a;
      }, 0);
      const leapDays = [];
      if ("leap_days" in year_data) {
        for (let leap of year_data["leap_days"]) {
          const interval = leap.interval.split(",") ?? [
            "1"
          ];
          const intervals = interval.map((i) => {
            const ignore = /\+/.test(i);
            const exclusive = /\!/.test(i);
            const interval2 = i.match(/(\d+)/).first();
            return {
              ignore,
              exclusive,
              interval: Number(interval2)
            };
          });
          leapDays.push({
            name: leap.name ?? `Leap Day ${leapDays.length + 1}`,
            type: "leapday",
            interval: intervals,
            timespan: leap.timespan ?? 0,
            intercalary: leap.intercalary ?? false,
            offset: leap.offset ?? 0,
            id: nanoid(6)
          });
        }
      }
      const moons = [];
      if ("moons" in static_data) {
        for (let moon of static_data["moons"]) {
          moons.push({
            name: moon.name ?? `Moon ${moons.length + 1}`,
            cycle: Number(moon.cycle) ?? avgLength,
            offset: moon.shift ?? 0,
            faceColor: moon.color ?? "#ffffff",
            shadowColor: moon.shadow_color ?? "#000000",
            id: nanoid(6)
          });
        }
      }
      const eras = [];
      if ("eras" in static_data) {
        for (let era of static_data["eras"]) {
          eras.push({
            name: era.name ?? `Era ${eras.length + 1}`,
            description: era.description,
            format: era.formatting ?? "Year {{year}} - {{era_name}}",
            start: {
              year: era.date?.year ?? 1,
              month: era.date?.timespan ?? 0,
              day: era.date?.day ?? 0
            }
          });
        }
      }
      const staticData = {
        firstWeekDay,
        overflow,
        weekdays,
        months,
        moons,
        leapDays,
        eras,
        displayMoons: true,
        incrementDay: false,
        displayDayNumber: false
      };
      const dynamicData = {
        year: 1,
        day: 1,
        month: 0
      };
      if (data.dynamic_data) {
        dynamicData.year = data.dynamic_data.year ?? dynamicData.year;
        dynamicData.day = data.dynamic_data.day ?? dynamicData.day;
        dynamicData.month = data.dynamic_data.month ?? dynamicData.month;
      }
      const events = [];
      const existingCategories = new Map();
      if ("categories" in data) {
        for (let category of data.categories) {
          const name2 = category.name;
          const id = name2?.split(" ").join("-").toLowerCase() ?? nanoid(6);
          let color = category.event_settings.color;
          if (!(color in FantasyCalendarColorMap)) {
            color = color.split("-").join("");
            const canvas = createEl("canvas");
            const ctx = canvas.getContext("2d");
            ctx.fillStyle = color;
            color = ctx.fillStyle;
            canvas.detach();
          } else {
            color = FantasyCalendarColorMap[color];
          }
          existingCategories.set(id, { name: name2, id, color });
        }
      }
      if (data.events && Array.isArray(data.events) && data.events.length) {
        for (let event of data.events) {
          const date = {
            day: null,
            year: null,
            month: null
          };
          if (event.data && event.data.date && Array.isArray(event.data?.date) && event.data.date.length) {
            date.day = event.data.date[2];
            date.month = event.data.date[1];
            date.year = event.data.date[0];
          } else if (event.data && event.data.conditions && Array.isArray(event.data.conditions)) {
            const conditions = event.data.conditions;
            try {
              const year = conditions.find((c) => c[0] === "Year");
              const month = conditions.find((c) => c[0] === "Month");
              const day = conditions.find((c) => c[0] === "Day");
              if (year) {
                date.year = Number(year[2][0]);
              }
              if (month) {
                date.month = Number(month[2][0]);
              }
              if (day) {
                date.day = Number(day[2][0]);
              }
            } catch (e) {
            }
          }
          let description;
          if (event.description) {
            const descriptionEl = createDiv();
            descriptionEl.innerHTML = event.description;
            description = descriptionEl.textContent;
          }
          events.push({
            name: event.name,
            description,
            id: event.id,
            note: null,
            date,
            category: existingCategories.get(event.event_category_id)?.id ?? null
          });
        }
      }
      const colors = (0, import_distinct_colors.default)({
        count: existingCategories.size
      });
      for (let id of existingCategories.keys()) {
        const category = existingCategories.get(id);
        if (category.color)
          continue;
        category.color = colors.shift().hex();
        existingCategories.set(id, category);
      }
      const calendarData = {
        name,
        description: null,
        static: staticData,
        current: dynamicData,
        events,
        id: nanoid(6),
        categories: Array.from(existingCategories.values())
      };
      calendars.push(calendarData);
    }
    return calendars;
  }
};
var FantasyCalendarColorMap = {
  "Dark-Solid": "#000000",
  Red: "#9b2c2c",
  Pink: "#880E4F",
  Purple: "#4A148C",
  "Deep-Purple": "#311B92",
  Blue: "#0D47A1",
  "Light-Blue": "#0288D1",
  Cyan: "#006064",
  Teal: "#004D40",
  Green: "#2E7D32",
  "Light-Green": "#7CB342",
  Lime: "#9e9d24",
  Yellow: "#FFEB3B",
  Orange: "#FF9100",
  "Blue-Grey": "#455A64"
};

// src/utils/presets.ts
var PRESET_CALENDARS = [
  {
    name: "Gregorian Calendar",
    description: "A calendar for the real world.",
    static: {
      displayDayNumber: false,
      incrementDay: true,
      displayMoons: true,
      firstWeekDay: 6,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Sunday",
          id: "ID_19ea684b4a08"
        },
        {
          type: "day",
          name: "Monday",
          id: "ID_2928b90ab949"
        },
        {
          type: "day",
          name: "Tuesday",
          id: "ID_0ad9a8f9e95b"
        },
        {
          type: "day",
          name: "Wednesday",
          id: "ID_195a4b290bc9"
        },
        {
          type: "day",
          name: "Thursday",
          id: "ID_abe8c89b0999"
        },
        {
          type: "day",
          name: "Friday",
          id: "ID_2b5b8a79fa4a"
        },
        {
          type: "day",
          name: "Saturday",
          id: "ID_1a78cb79c8cb"
        }
      ],
      months: [
        {
          name: "January",
          type: "month",
          length: 31,
          id: "ID_e9997a780b3a"
        },
        {
          name: "February",
          type: "month",
          length: 28,
          id: "ID_b8c9ebeb0b89"
        },
        {
          name: "March",
          type: "month",
          length: 31,
          id: "ID_b83bda2b9be8"
        },
        {
          name: "April",
          type: "month",
          length: 30,
          id: "ID_29baea7b28ab"
        },
        {
          name: "May",
          type: "month",
          length: 31,
          id: "ID_6a3899fad909"
        },
        {
          name: "June",
          type: "month",
          length: 30,
          id: "ID_384aeb1afa8a"
        },
        {
          name: "July",
          type: "month",
          length: 31,
          id: "ID_48b8cba87b8a"
        },
        {
          name: "August",
          type: "month",
          length: 31,
          id: "ID_fa0b1a6bab8a"
        },
        {
          name: "September",
          type: "month",
          length: 30,
          id: "ID_da880b8af849"
        },
        {
          name: "October",
          type: "month",
          length: 31,
          id: "ID_babba8186968"
        },
        {
          name: "November",
          type: "month",
          length: 30,
          id: "ID_da582bfaf9b9"
        },
        {
          name: "December",
          type: "month",
          length: 31,
          id: "ID_ba1bab4a3a28"
        }
      ],
      moons: [
        {
          name: "Moon",
          cycle: 29.530588853,
          offset: 9.24953,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_a9ab186b1819"
        }
      ],
      leapDays: [
        {
          name: "Leap Day",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 400
            },
            {
              ignore: false,
              exclusive: true,
              interval: 100
            },
            {
              ignore: false,
              exclusive: false,
              interval: 4
            }
          ],
          offset: 0,
          timespan: 1,
          intercalary: false,
          id: "ID_b91ad86a887a"
        }
      ],
      eras: [
        {
          name: "Before Christ",
          description: "",
          format: "Year {{abs_year}} - {{era_name}}",
          start: {
            year: -1,
            month: 0,
            day: 31
          }
        },
        {
          name: "Anno Domini",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ],
      offset: 2
    },
    current: {
      year: null,
      day: null,
      month: null
    },
    events: [
      {
        name: "Summer Solstice",
        description: "At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824599",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824600",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824601",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824602",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Christmas",
        description: "Christmas is a Christian holiday celebrating the birth of Christ. Due to a combination of marketability and long lasting traditions it is popular even among many non-Christians, especially in countries that have a strong Christian tradition.",
        id: "824603",
        note: null,
        date: {
          day: 25,
          year: null,
          month: 11
        },
        category: "christian-holidays"
      },
      {
        name: "Paschal Full Moon",
        description: "The first full moon after march 21st, which is considered the fixed date for the spring equinox.",
        id: "824604",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Easter",
        description: "Easter is considered the most important feast for Christians, celebrating the resurrection of Christ. It is classed as a moveable feast occurring on the first full moon after the spring equinox, which is considered to be fixed at March 21st for the sake of computing the date.",
        id: "824605",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Easter Monday",
        description: "The Monday following the Easter Sunday is often considered part of the Easter Celebration and is a day off in many countries with a strong Christian tradition.",
        id: "824606",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Good Friday",
        description: "Good Friday is the Friday preceding Easter. It comemmorates the crucifixion of Christ according to the Bible.",
        id: "824607",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Pentecost",
        description: "Celebrated exactly 50 days after Easter, Pentecost is the celebration of the Holy Spirit appearing before the Apostles as described in the Bible.",
        id: "824608",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "New Year's Day",
        description: "New Year's Day marks the start of a new year on the Gregorian Calendar. It starts when the clock strikes midnight and is often celebrated with fireworks, champagne and kissing.",
        id: "824609",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: "secular-holidays"
      },
      {
        name: "Valentine's Day",
        description: "Valentine's day is a celebration of love and romance that is popular across the world. Many more cynically minded people mostly consider it an attempt to monetize the expectation of romantic gestures on the holiday through gift cards, flowers, chocolate and dates.",
        id: "824610",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 1
        },
        category: "secular-holidays"
      },
      {
        name: "Halloween",
        description: 'Halloween is holiday popular in the US, Canada and Ireland that has gradually been adopted by more and more countries. It is often celebrated by people dressing up, usually as something scary. Children will often go from door to door shouting "trick or treat" in the hopes of receiving candy, while adults tend to go to parties.',
        id: "824611",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 9
        },
        category: "secular-holidays"
      },
      {
        name: "Work on the first version of this calendar started.",
        description: "Aecius started work on the first version Gregorian Calendar for Fantasy Calendar on this day.",
        id: "824612",
        note: null,
        date: {
          day: 23,
          year: 2019,
          month: 5
        },
        category: "miscellaneous-events"
      },
      {
        name: "Work on this version of the Gregorian Calendar started.",
        description: "On this day, Aecius started to rework the Gregorian Calendar from scratch to make it work with the updates Wasp and Alex implemented since the summer of 2019.",
        id: "824613",
        note: null,
        date: {
          day: 21,
          year: 2020,
          month: 0
        },
        category: "miscellaneous-events"
      },
      {
        name: "Introduction of the Gregorian Calendar",
        description: "On this day in 1582 the Gregorian calendar was officially introduced, following Thursday October 4th on the Julian Calendar",
        id: "824614",
        note: null,
        date: {
          day: 15,
          year: 1582,
          month: 9
        },
        category: "historical-events"
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Christian Holidays",
        id: "christian-holidays",
        color: "#9b2c2c"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#0D47A1"
      },
      {
        name: "Historical Events",
        id: "historical-events",
        color: "#455A64"
      },
      {
        name: "Miscellaneous Events",
        id: "miscellaneous-events",
        color: "#0288D1"
      }
    ]
  },
  {
    name: "Calendar of Greyhawk",
    description: "Calendar of the world of Greyhawk.",
    static: {
      displayDayNumber: false,
      incrementDay: false,
      displayMoons: true,
      firstWeekDay: 0,
      overflow: false,
      weekdays: [
        {
          type: "day",
          name: "Starday",
          id: "ID_a8e979984938"
        },
        {
          type: "day",
          name: "Sunday",
          id: "ID_1b68bb78ca1b"
        },
        {
          type: "day",
          name: "Moonday",
          id: "ID_c8b86aea0998"
        },
        {
          type: "day",
          name: "Godsday",
          id: "ID_b8097a18e95b"
        },
        {
          type: "day",
          name: "Waterday",
          id: "ID_1918c99949ca"
        },
        {
          type: "day",
          name: "Earthday",
          id: "ID_fa295a1bab89"
        },
        {
          type: "day",
          name: "Freeday",
          id: "ID_6a485ada3ae8"
        }
      ],
      months: [
        {
          name: "Needfest",
          type: "month",
          length: 7,
          id: "ID_b8a9e9da8a48"
        },
        {
          name: "Fireseek",
          type: "month",
          length: 28,
          id: "ID_39b90bd8189a"
        },
        {
          name: "Readying",
          type: "month",
          length: 28,
          id: "ID_48a9081ad839"
        },
        {
          name: "Coldeven",
          type: "month",
          length: 28,
          id: "ID_5a7b6beadb68"
        },
        {
          name: "Growfest",
          type: "month",
          length: 7,
          id: "ID_48c8d82b1908"
        },
        {
          name: "Planting",
          type: "month",
          length: 28,
          id: "ID_081a793a49da"
        },
        {
          name: "Flocktime",
          type: "month",
          length: 28,
          id: "ID_eb68a89a0a2a"
        },
        {
          name: "Wealsun",
          type: "month",
          length: 28,
          id: "ID_9b3a098ae908"
        },
        {
          name: "Richfest",
          type: "month",
          length: 7,
          id: "ID_f99b4b3a08b8"
        },
        {
          name: "Reaping",
          type: "month",
          length: 28,
          id: "ID_ebe9eb68ea39"
        },
        {
          name: "Goodmonth",
          type: "month",
          length: 28,
          id: "ID_fb3b6af9895b"
        },
        {
          name: "Harvester",
          type: "month",
          length: 28,
          id: "ID_395bcb399b8a"
        },
        {
          name: "Brewfest",
          type: "month",
          length: 7,
          id: "ID_e8b908181afa"
        },
        {
          name: "Patchwall",
          type: "month",
          length: 28,
          id: "ID_cbda3b399969"
        },
        {
          name: "Ready'reat",
          type: "month",
          length: 28,
          id: "ID_592a2a690bf8"
        },
        {
          name: "Sunsebb",
          type: "month",
          length: 28,
          id: "ID_39e8faf8e9b8"
        }
      ],
      moons: [
        {
          name: "Luna",
          cycle: 28,
          offset: 3,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_f8997b39b8b8"
        },
        {
          name: "Celene",
          cycle: 91,
          offset: 46,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_7afbb9b88be8"
        }
      ],
      leapDays: [],
      eras: [
        {
          name: "Common Year",
          description: "",
          format: "Year {{year}} CY",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ]
    },
    current: {
      year: 591,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824573",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The 4th of Growfest is the first day of Low Summer in Oerth's Calendar. This is the point where the sun crosses Oerth's equator. Holidays celebrated on this date include Saint Cuthbert's Day, the Feast of Edoira, the Spring Feast, and Raxivort's Orgy. This is also the day on which the priests of Tlaloc ritually sacrifice and eat the flesh of human children or babies in their patron's honor. Worshippers of Rillifane Rallathil celebrate the Budding on this day, a joyful celebration of new life celebrated through dance and song in oak groves in the heart of the forest. A ritual hunt of a noble heart is held on this day, after which the venison is eaten in celebration of Rillifane's bounty.\n\nAlso celebrated on this date is the Sanctification of Renewal, a sacred holiday to the followers of Garyx.",
        id: "824574",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Summer Solstice",
        description: "	At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824575",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The 4th of Brewfest is the Autumnal Equinox, when the sun crosses the equator from north to south. This date is the official end of high summer and the beginning of autumn on the Greyhawk Calendar. This date is holy to Wenta and is sometimes regarded as an unofficial holy day of Velnius. Among the xvarts, it also marks the celebration of Raxivort's Orgy. The worshippers of Rillifane Rallathil celebrate the Transformation on this day, a time of dancing and spiritual rebirth marking the beginning of autumn and the promise that spring will come again.",
        id: "824576",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Great Moons Glory",
        description: "The night of Great Moon's Glory on Readying 11th, when Luna is full but Celene is new. It is holy to Celestian, and a time when offerings are left to Atroa to beg her to come early and to Telchur to request that he peacefully leave. Druids of the Old Faith are known to also hold this night as auspicious, but few outside their circles know the details.",
        id: "824577",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Dark Night",
        description: "Dark Night, also called Black Night, Star Night, and the Night of Hopeful Dawn, is observed on Goodmonth 11. It is a holy night for the church of Celestian because the stars are so easy to observe without the light of one of the moons getting in the way.\n\nIt is also a holy night for the church of Rao, who refer to it as the Night of Hopeful Judgment. They believe that Rao chooses this time to separate the sinful from the righteous in the afterworld. There is also a prophecy in the Raoan holy text, the Book of Incarum, that claims that Rao will cleanse the world of evil on this night, sometime in the future.\n\nThe priesthood of Kurell consider it holy, too, calling it Kurell's Night, requiring the faithful to undertake special missions on this night to prove their cleverness and skill. Kurell smiles particularly on acts of theft or vengeance performed on his holy night, blessing those who do so successfully. Donations to Kurell's church are encouraged afterwards, for Kurell may take vengeance against those who do not properly thank him for his aid.\n\nMost other people regard Dark Night as a time of ill omen, fearing it as much as the night of the Blood Moon Festival. Bonfires are burned from dusk till dawn, particularly in small villages and in Elmshire and Narwell. Orc and goblin religions view it as an excellent night for raiding settlements. Certain evil cults perform kidnappings, murders, and vile rites during this period. On the other hand, lycanthropic activity is at its lowest.\n\nIggwilv and Tuerny attempted to summon a demonic army to Luna on this night in 585 CY.",
        id: "824578",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Agelong",
        description: "Agelong, observed on the 4th of Richfest (the Summer Solstice), is the celebration of the legendary creation of the elves. According to myth, after Corellon Larethian spilled his blood during the battle with Gruumsh, the rest of the Seldarine gathered this sacred blood and mingled it with the tears shed during the same battle by Sehanine Moonbow. The Seldarine then infused these divine fluids into vessels they had created to be the bodies of the elven race.\n\nThis day is, among the elves, mostly an excuse to go orc-hunting. Elven warriors cut themselves with daggers carved from volcanic glass to remind themselves of Corellon's own wound from Gruumsh's spear, then strive to slaughter as many orcs as possible during the night.",
        id: "824579",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Blood Moon Festival",
        description: "The Blood Moon Festival is celebrated on Coldeven 11, the night when Luna is full just before the Spring Equinox. On this night, curses are said to be twice as powerful and the forces of evil are at their strongest. Fiends roam the lands, and human sacrifice is common. This night is held especially sacred by cultists of Nerull, but worshipers of Kurell also mark this night as especially auspicious for acts of vengeance. Goodly folk superstitiously guard their homes with horseshoes, holy water, bottles of milk, and iron filings.\n\nDemonic forces sent by Iuz destroyed the leadership of the Horned Society during the Blood Moon Festival of 583 CY.\n\nIt's possible that this is also the night the elves celebrate as Faerieluck.",
        id: "824580",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Breadgiving Day",
        description: `Celebrated on on the Winter Solstice (Needfest 4), Breadgiving Day, is a day of charity observed in the Free City of Greyhawk by the faiths of Pelor, Rao, and Saint Cuthbert.

This was not originally a religious holiday as such. It is a new practice that began after the Greyhawk Wars to feed the refugees that flooded the city during that time. Since of Old City who line up by the hundreds along the Processional from the Black Gate. The booths are worked by low-ranking priests from all three religions, with armed priests of St. Cuthbert providing security. A smaller event is held simultaneously below Wharfgate in Greyhawk City's Shacktown.

The clergies of Heironeous, Pholtus, and Trithereon do not participate, but they compete with one another to perform good deeds the whole week of Needfest. The rivalries between Trithereon and Pholtus, Trithereon and Heironeous, and Pholtus and St. Cuthbert are such that the faiths sometimes fall into arguments and even blows if their "good deeds" conflict with each other. Greyhawk's rowdy citizens often cheer and place bets on the outcomes of these quarrels.

The priests of Pelor hold a morning ceremony on this day with a sermon, singing, and music.`,
        id: "824581",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Brewfest",
        description: `Also called Drunken Days or the Feast of Brewers, Brewfest, the fourth festival week of Oerth's calendar, is a rowdy period unsurprisingly claimed as a holy time by the churches of Olidammara and Wenta. The Free City of Greyhawk does not celebrate the entire week, but Brewfest 1 and Brewfest 7 are both set aside as public holidays. In Elmshire, the week is spent in restful, carefree music, drinking, and dancing. In Hardby it is spent with fistfights, riots, and ensuing hangovers. In Narwell it is celebrated with ale-brewing contests, horse races, beatings, and robbery. In Safeton it is celebrated with nervous violence and nightly orc hunts. The week is also sacred to the Old Faith.

The elves call this week Fallrite, and use it to contemplate the spirits of their ancestors, the passage to the afterworld, and the fragility of life. They believe other races make merry during Brewfest because they are "hiding" to avoid facing death's reality. In contrast, the olvenfolk strive to fulfill the most important of their duties and reach the most crucial of their decisions during this time of year. The elven kings and queens traditionally judge capital cases during Fallrite.`,
        id: "824582",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 12
        },
        category: null
      },
      {
        name: "Faerieluck",
        description: "Faerieluck is a holiday celebrated by the elves in early spring, when the power of Faerie runs high and they celebrate with their fey cousins: the sprites, buckawns, pixies, nymphs and so forth. The point of the festival is to remind the elves of their ancient kinship with these creatures. The day is spent playing practical jokes, engaging in battles of wit, and general merriment.",
        id: "824583",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Feast of Edoira",
        description: "The Feast of Edoira is a holiday celebrated in the Domain of Greyhawk on Growfest 4, during the Spring Equinox. It is named after Edoira, a priest of Rao who centuries ago established the Edoiran Compact, a pact by which many of the lawful good-aligned faiths and people of the Domain could agree to cooperate. The Compact was later extended to non-lawful good and neutral faiths.\n\nEdoira was never deified but was revered by many good faiths in the Domain. The holiday was marked by religious services on Godsday of Growfest led by the clerics of the good faiths who partook of the Compact, and secular festivals by the ordinary citizenry. Observance of the holiday has declined over the years, though the clergies of Rao and Pelor still hold their traditional interfaith services, with occasional participation by the priesthoods of Heironeous and Mayaheine. Since the end of the Greyhawk Wars most of the Domain's outlying communities no longer observe the holiday. Only one church in Safeton still does so.",
        id: "824584",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Desportium of Magic",
        description: "The highlight of Growfest is the Desportium of Magic. During this day torchlight only, no magic illumination is supposed to be used. Wizards and Sorcerers then perform feats of illusion and magic trying to outdo one another with their displays. Usually there is a panel of judges to decide, in the larger cities there is usually a limit of 5-person teams competing. Each performance during the Desportium of Magic uses a long established theme, that of an attack on the town by various monsters and Dark Elves, repelled by brave warriors and spellcasters. The displays, made up of any number of spells cast without the use of magic devices, cannot actually cause any harm to property or people, but must be as wonderful, striking, detailed, and lifelike as possible.\n\nThis motif is based on actual attacks through the years from the Uttermost War to the most recent Great Slave Raids. The idea is to make the attackers as dreadful as possible and the defenders as heroic as possible, secondary is to make sure that people will always remember the terror of the Uttermost War. In large cities like the CSIO and CSWE and Tarantis, these performances last all night and are amazing to watch. In smaller villages without spellcasters, puppet plays are often done in its stead.",
        id: "824585",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Holy Day of Pelor",
        description: "The Holy Day of Pelor, also known as Giving Day and Midsummer's Day, is celebrated on the Summer Solstice.\n\nBecause Pelor is widely loved by the commoners, this day is set aside as a day of rest in the Free City of Greyhawk. Only essential work is done on this day. Many merchants close their shops on Giving Day as well out of respect for the Sun Father and his teachings. Gambling houses are closed, but not hostelries, for Giving Day is a day of feasting and goodwill, a time for enjoying the fruits of the Oerth.\n\nPublic services are held from dawn until noon by Pelor's priests, outdoors if the weather permits (which if almost always does, as the clerics use weather-controlling magic for maximum sunlight). Even Greyhawk City's large temple of Pelor is not big enough to hold the throngs who come to celebrate on this day, so throngs of the faithful fill the temple grounds in the Garden Quarter, spilling out from the Millstream to the Nobles' Wall, and to the road leading toward Greyhawk's Grand Theater. Many come, of course, for the free meal the priests provide after the service. The Pelorian priests are well aware of this, but believe that for the needy, a full stomach must come before wisdom and learning. Members of Greyhawk's Guild of Thieves and Beggar's Union, many of whom remember Midsummer's Day fondly from their orphaned childhoods, both protect priests of Pelor on this day, and woe onto those who attempt to test them on this matter.\n\nPriests of Pelor, bedecked in yellow and gold, parade about the streets, demanding donations for their charitable works, freely using guilt to squeeze more from stingy purses. Free healings are given out, particularly to children. Most Greyhawkers wear at least one item of yellow cloth on this day out of respect.\n\nSome crusading Pelorians crusade against evil lycanthropes on this night, since both Celene and Luna are full.",
        id: "824586",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Holy Day of Serenity",
        description: "The Holy Day of Serenity, on Reaping 10, is celebrated in Veluna as a holy day of Rao, though it's actually the anniversary of Veluna's secession from Furyondy in 476 CY. It is celebrated with religious singing and worship.",
        id: "824587",
        note: null,
        date: {
          day: 10,
          year: null,
          month: 9
        },
        category: null
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Religious Holidays",
        id: "religious-holidays",
        color: "#FFEB3B"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#0D47A1"
      },
      {
        name: "Magical Events",
        id: "magical-events",
        color: "#311B92"
      },
      {
        name: "Miscellaneous Events",
        id: "miscellaneous-events",
        color: "#0288D1"
      }
    ]
  },
  {
    name: "Calendar of Golarion",
    description: "Calendar for the world of Pathfinder.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Moonday",
          id: "ID_db8af8f85b8a"
        },
        {
          type: "day",
          name: "Toilday",
          id: "ID_f87a094b2849"
        },
        {
          type: "day",
          name: "Wealday",
          id: "ID_2a5bb88b3ae8"
        },
        {
          type: "day",
          name: "Oathday",
          id: "ID_c93a0be8981b"
        },
        {
          type: "day",
          name: "Fireday",
          id: "ID_2b7b59794a0b"
        },
        {
          type: "day",
          name: "Starday",
          id: "ID_baaa6a89ca1b"
        },
        {
          type: "day",
          name: "Sunday",
          id: "ID_f9baca088b28"
        }
      ],
      months: [
        {
          name: "Abadius",
          type: "month",
          length: 31,
          id: "ID_dad9da89f818"
        },
        {
          name: "Calistril",
          type: "month",
          length: 28,
          id: "ID_980a88cb9b68"
        },
        {
          name: "Pharast",
          type: "month",
          length: 31,
          id: "ID_a9c96ac80908"
        },
        {
          name: "Gozran",
          type: "month",
          length: 30,
          id: "ID_a99a697b9abb"
        },
        {
          name: "Desnus",
          type: "month",
          length: 31,
          id: "ID_8bcad9a8f84a"
        },
        {
          name: "Sarenith",
          type: "month",
          length: 30,
          id: "ID_484a49a998db"
        },
        {
          name: "Erastus",
          type: "month",
          length: 31,
          id: "ID_9a48e9b96938"
        },
        {
          name: "Arodus",
          type: "month",
          length: 31,
          id: "ID_bbe99b2afaea"
        },
        {
          name: "Rova",
          type: "month",
          length: 30,
          id: "ID_ba39fbe8c8b8"
        },
        {
          name: "Lamashan",
          type: "month",
          length: 31,
          id: "ID_69d93ba9dba8"
        },
        {
          name: "Neth",
          type: "month",
          length: 30,
          id: "ID_4ad8fb79eb6a"
        },
        {
          name: "Kuthona",
          type: "month",
          length: 31,
          id: "ID_9a3a8b388939"
        }
      ],
      moons: [
        {
          name: "Somal",
          cycle: 29.5,
          offset: 9.5,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_b87ab959cac9"
        }
      ],
      leapDays: [
        {
          name: "Leap Day",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 8
            }
          ],
          offset: 0,
          timespan: 1,
          intercalary: false,
          id: "ID_88c8da3b8b2b"
        }
      ],
      eras: [
        {
          name: "Age of Serpents",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 4720,
            month: 8,
            day: 15
          }
        },
        {
          name: "Age of Darkness",
          description: "",
          format: "Year {{abs_year}} - {{era_name}}",
          start: {
            year: -5300,
            month: 0,
            day: 1
          }
        },
        {
          name: "Age of Anguish",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -4500,
            month: 8,
            day: 1
          }
        },
        {
          name: "Age of Destiny",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -3500,
            month: 8,
            day: 1
          }
        },
        {
          name: "Age of Enthronement",
          description: "",
          format: "Year {{year}} AR - {{era_name}}",
          start: {
            year: 1,
            month: 8,
            day: 1
          }
        },
        {
          name: "Age of Lost Omens",
          description: "",
          format: "Year {{year}} AR - {{era_name}}",
          start: {
            year: 4606,
            month: 8,
            day: 1
          }
        }
      ]
    },
    current: {
      year: 4720,
      day: 15,
      month: 0
    },
    events: [
      {
        name: "Summer Solstice",
        description: "At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824492",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824493",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824494",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824495",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Eternal Kiss",
        description: "Zon-Kuthon\n\nCulminating on the first new moon of the new year, the Eternal Kiss is an 11 day ceremony honoring Zon-Kuthon. On the final day, a living sacrifice is made to the Dark Prince, after the victim is pampered and pleasured for the ten days prior. The sacrifice can either be an enemy or a great devotee of the church, and is kept alive for as long as possible during the torture using magic. This holiday often involves fortune-telling as a part of the torture, using the victim's entrails or their cries of pain to determine the Midnight Lord's will. Occasionally it is believed that the sacrifice will prophesy with the voice of Zon-Kuthon himself.",
        id: "824496",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Longnight",
        description: "Longnight is a holiday celebrated on the full moon in the winter month of Abadius. During the festival, revelers stay up all night to greet the dawn to defy the long winter months. It is even celebrated in Irrisen, where there are no natural seasons.",
        id: "824497",
        note: null,
        date: {
          day: null,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Foundation Day",
        description: "Absalom, Milani\n\nFoundation Day is a civil holiday celebrated on the New Year (1 Abadius) in Absalom to commemorate the city's founding by the god Aroden in 1 AR.",
        id: "824498",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Pjallarane Day",
        description: "Irrisen\n\nPjallarane Day is an ancient holiday in Irrisen celebrated on 1 Abadius (New Year's Day). Every 100 years, Baba Yaga returns to Golarion to remove her daughter from the throne of Irrisen, and put another daughter on the throne instead. In 3713 AR the third Queen of Irrisen, Pjallarane, and her children chose to resist. Baba Yaga ruthlessly crushed the rebellion in a single day, which is now celebrated as a holiday. The festival includes feasting and the burning of effigies of tar and straw. This is a reminder of the fate of Pjallarane's followers, who were burned alive as a warning to all those who would oppose Baba Yaga.",
        id: "824499",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Vault Day",
        description: "Abadar\n\nVault Day is a holiday held on 6 Abadius in honor of Abadar, Master of the First Vault.",
        id: "824500",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Ruby Prince's Birthday",
        description: "Osirion\n\nThe Ruby Prince's Birthday is a national holiday in Osirion in honor of the birthday of Khemet III, the Ruby Prince. It is celebrated annually on the 20 Abadius.",
        id: "824501",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Merrymead",
        description: "Druma, Cayden Cailean\n\nA holiday occurring on 2 Calistril, Merrymead was started in Druma and is supposed to be a time to share of the last of the previous year's mead with the rest of the community.\n\nIn current times, most people just use it as an excuse to drink excessively. The poor travel from bar to bar drinking whatever alcohol they can afford, while the wealthy will set aside specific vintages for this day. A known consequence of this day are 'mead riots' that happen when there are more celebrants than there is alcohol to serve them. This leads to a violent, destructive group of people in a crowded bar. If this is a common occurrence for particular cities, they may reinforce their guard force for the inevitably eventful night.",
        id: "824502",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "King Eodred II's Birthday",
        description: "Korvosa\n\nKing Eodred II's Birthday was a local holiday in the Varisian city-state of Korvosa and was celebrated on 16 Calistril. It commemorated the birthday of its former ruler, King Eodred Arabasti II, who decreed that on the day, scantily clad women would dance and serve free wine to celebrants.",
        id: "824503",
        note: null,
        date: {
          day: 16,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "Loyalty Day",
        description: "Cheliax, Asmodeus\n\nLoyalty Day is a holiday in the nation of Cheliax commemorating the date on Calistril 19, 4640 AR when House Thrune signed the Treaty of Egorian, declaring it the victor in the Chelish Civil War and ruler of the empire. Because of House Thrune's well-known ties to the infernal, this holiday is also observed by the Church of Asmodeus who consider it a feast day. The church along with local governments provide a free meal to all citizens to remind them of the benefits House Thrune provides them with.",
        id: "824504",
        note: null,
        date: {
          day: 19,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "Fateless Day",
        description: "Mahathallah\n\nFollowers of Mahathallah mark each leap day as Fateless Day, when the River of Souls temporarily stops and souls can escape Pharasma's judgment. They perform many sacrificial and suicidal rituals on Fateless Day.",
        id: "824505",
        note: null,
        date: {
          day: 29,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "Golemwalk Parade",
        description: "Magnimar, Varisia\n\nThe Golemwalk Parade is a parade of golems created by amateurs hoping to win a monetary grant, or even a job, from the Golemworks in Magnimar. At the end of the parade along the Avenue of Honors, the constructs are judged.",
        id: "824506",
        note: null,
        date: {
          day: null,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Day of Bones",
        description: "Pharasma\n\nPriests and worshipers of the Lady of Graves parade the bodies of the recently dead on this holiday, holding free burials afterwards.",
        id: "824507",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Sable Company Founding Day",
        description: "Korvosa\n\nSable Company Founding Day is a holiday marking the founding of the Sable Company of the Varisian city-state of Korvosa. Celebrated on 6 Pharast, the day is marked by somber military parades that generally preclude the consumption of alcohol, a staple on most other holidays.",
        id: "824508",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Night of Tears",
        description: "Solku\n\nThe Night of Tears held annually on 7 Pharast in the Katapeshi town of Solku. It is a solemn vigil commemorating those lost in the Battle of Red Hail in 4701 AR.",
        id: "824509",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Kaliashahrim",
        description: "Qadira\n\nKaliashahrim is a national holiday celebrated on Pharast 13 in Qadira that celebrates the Padishah Emperor of distant Katheer, and Qadira's loyalty to him.",
        id: "824510",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Conquest Day",
        description: "Nex\n\nEvery year, on the 26th of Pharast, Elder Architect Oblosk \u2014 oldest member of Nex's Council of Three and Nine \u2014 ascends to the highest balconies of the Bandeshar in Quantium. In a voice made thunderous by the platform's magic, the wizened pech councilman spends the hours from dusk to just past noon enumerating the atrocities committed by the necromancers of Geb upon the people of Nex, culminating with the disappearance of the archwizard Nex himself. At the conclusion of this record of national wounds, the country's eleven other council members join Oblosk in renewing their yearly vow to neither forget nor forgive the Gebbites' atrocities and to again swear in their lost ruler's name to endlessly wage war against their ancient enemies.\n\nOn this day, known as Conquest Day, all the people of Nex are expected to share in their leaders' oaths, to celebrate the shared patriotism of their wondrous nation, and to remember the sacrifices of heroes past. This also makes it a day for many Nexian wizards to reveal deadly new spells, gigantic constructs, and audacious arcane masterworks\u2014which many creators promise to be the doom of their foes. Even throughout the rest of the Inner Sea region, many crusaders, rebels, and zealots observe Conquest Day as a day to renew blood oaths, launch long-planned battles, and finally take revenge. It is a day for words of honor, a day for battle cries, and a day where glory most favors the bold.",
        id: "824511",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Days of Wrath",
        description: "Asmodeus, Cheliax\n\nThe Days of Wrath, or Dies Irae, are a holiday celebrated on both solstices and equinoxes in the nation of Cheliax and wherever Asmodeus is worshiped. They are primarily a national holiday and not truly a religious one, but the two are often confused due to Cheliax's current political climate. Various contests and blood sports are held on these days, promoting those elites who can clearly demonstrate their superiority over others. Some believe that these competitions are watched and judged by devils themselves. In the parts of the world where the Prince of Darkness is not openly venerated, these holidays take on a different tone: they are used to settle old grievances and also to end contracts.\n\nIn these days, bloodsports are organized into cities' stadiums. Slaves and servants of any master may choose to enter the arena for one-on-one bloody battles to the death. Free men and women of all classes are free to enter the arena as well. The entrants fight in rounds until at last one stands alone. The winner is granted freedom from slavery or servitude, erasure of all debts, and a purse of gold.\n\nThe winter solstice sees the culmination of the Dies Irae, with all the winners of the three previous bouts summoned to Egorian to fight to the death for the amusement of the nobles. The winner is given a title of baronet and a plot of land.",
        id: "824512",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Firstbloom",
        description: "Gozreh\n\nFirstbloom is a holiday celebrating the first planting of the agricultural season, and generally associated with the weather god Gozreh. It falls on the vernal equinox. Many farming communities see it as the beginning of the year, even though conventional calendars begin two months earlier. Despite weariness after a full day planting, many farming communities hold celebrations come the night: feasting, dancing and courtship feature showing the cycle of nature.",
        id: "824513",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "First Cut",
        description: "Falcon's Hollow\n\nThe First Cut celebration in Falcon's Hollow used to mark the start of the work in the woods each spring. Now, however, it is a meaningless ramshackle ceremony as Thuldrin Kreed forces the lumber crews to work through even during the coldest months in the winter. Still, First Cut brings people out to celebrate the start of the spring.",
        id: "824514",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Currentseve",
        description: "Gozreh\n\nOn this religious holiday, all who travel on the water make offerings to Gozreh in the hopes of safe passage for the coming year.",
        id: "824515",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Taxfest",
        description: "Abadar\n\nNo one enjoys paying taxes but the collection of fair taxes is considered an integral part of the maintenance of society, and is therefore holy to the god Abadar. Every year on the 15th of Gozran, priests of the church of Abadar spend the day walking city streets, doing what they can to make the bitter pill of annual taxes a bit easier to swallow.\n\nThe Business of the Day\n\nFrom dawn to dusk, clerics of Abadar attend the tax collectors of sizeable communities as the tax wagons roll from door to door. The church officials monitor these activities to make sure that the process is conducted respectfully and justly, and that citizens know that the process is monitored. More than just aiding in the yearly errand, the faithful personally thank every citizen for contributing to the improvement of their city, extol the public works funded by their contributions, and foretell the grandeur of civic projects to come. The disenfranchised and destitute they attempt to comfort as best they can, quoting from their god's dogma on work and worthiness, but this is not a day for discounts or deferrals. The citizens are able to voice their concerns and ideas as to where the monies levied should best be applied. Citizens are free to speak their mind on any issue here without fear of repercussion.\n\nThe Celebrations of the Day\n\nAt dusk, the Abadarans host several celebrations in parks, plazas, and other communal areas about the city, organizing donations and contributions from local vendors to feed and entertain all-comers. Having already preached to most of the city over the course of the day, the clerics perform only a brief opening ceremony, dedicating the feast to Abadar, the city, and its great people. These celebrations are often quite distinct from neighbourhood to neighbourhood and are almost always divided along economic boundaries.\n\nThe festivities involving the wealthiest citizens usually happen on the steps of city hall or other grand civic buildings and feature the best music and food, but often little more than polite card and guessing games. These galas usually wrap up by midnight.\n\nFor the common folk, the parks and marketplaces take on a carnival atmosphere, with simple but good food, local ales, performances by talented citizens, and games of chance going on well into the night. A prevailing superstition through these festivals is that, during the celebration, it is lucky to kiss\u2014or in some regions, pinch\u2014a cleric of Abadar, leading to many a rosy-cheeked cleric.\n\nEven the city's poor are given reason to celebrate, as the local temple of Abadar hosts a cheery but unabashedly religious gathering on its steps, feeding all comers, doling out a hearty ration of wine, singing hymns of the faith, and providing tokens for a second wine ration for any who return to attend a service within the month.\n\nFor a holiday that revolves around paying taxes, this Abadaran festival is not as reviled as one might expect.",
        id: "824516",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Wrights of Augustana",
        description: "Andoran, Brigh\n\nThis local festival in the Andoran port city of Augustana is held to honor and celebrate the local shipbuilding industry as well as the navy. The mathematics and engineering required for the building of the ships is praised by Brigh's faithful.",
        id: "824517",
        note: null,
        date: {
          day: 16,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Gala of Sails",
        description: "Absalom\n\nOne of two local festivals where kite-battlers compete.",
        id: "824518",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Remembrance Moon",
        description: "Iomedae, Lastwall, Ustalav\n\nA national holiday to commemorate those who died in the Shining Crusade against the Whispering Tyrant. Although not strictly a religious holiday, Iomedae's name is heavily invoked, due to her many military accomplishments during the war.",
        id: "824519",
        note: null,
        date: {
          day: null,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Angel Day",
        description: "Magnimar, Varisia\n\nAngel Day is a local Magnimarian holiday celebrated on 31 Desnus. The annual celebration marks the founding of the city, and its founders' flight from Korvosa. It also honors the presence and popular worship of the empyreal lords, which predates the city by centuries. During the festival, nearly all local businesses shut their doors and the citizens take part in countless feasts, masquerade balls dressed as angels, and the burning of devil effigies meant to symbolize infernally-influenced Korvosa.",
        id: "824520",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Old-Mage Day",
        description: "Holiday celebrating Old-Mage Jatembe, the father of Garundi magic.",
        id: "824521",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Multiple Events",
        description: "Festival of the Ruling Sun\n\nShizuru\n\nCelebrates the longest day.\n\nFounder's FollyUlar Kel\n\nAdventurers and children follow a hallucinatory red stripe along zigzagging paths, amusing residents.\n\nHarvest Bounty Festival\n\nSegada\n\nMarking the beginning of the harvest season, this festival involves sporting tournaments, dancing, storytelling, and feasts. Celebrants give thanks and eliminate grudges.\n\nLongwalk\n\nGrandmother Spider, Nurvatchta; southern hemisphere winter solstice\n\nCelebrates the escape of Nurvatchta's anadi people from bondage, in part thanks to Grandmother Spider lengthening their cover of darkness in their escape.\n\nRitual of Stardust\n\nDesna\n\nFestival held in the evening and through the night, where Desna's faithful sing songs and throw sand and powdered gems into bonfires.\n\nRunefeast\n\nMagrim\n\nDay marking the day dwarves learnt the first runes and the proper way to pray.\n\nSunwrought FestivalSarenrae, Brigh\n\nDay commemorating the defeat of Rovagug by Sarenrae, celebrated with the flying of kites, fireworks, and gift giving.",
        id: "824522",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Burning Blades",
        description: "Sarenrae\n\nThe holy, month-long festival ends on this day, featuring dances with flaming blades.",
        id: "824523",
        note: null,
        date: {
          day: 10,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Liberty Day",
        description: "Andoran, Milani\n\nHoliday celebrating Andoran's independence. Milanites celebrate that very little violence occurred.",
        id: "824524",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Talon Tag",
        description: "Andoran\n\nThe Eagle Knights perform aerial displays in Almas on this day.",
        id: "824525",
        note: null,
        date: {
          day: 21,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Riverwind Festival",
        description: "Korvosa\n\nAn early summer holiday that honors a cooling shift in the winds, celebrated with much drinking.",
        id: "824526",
        note: null,
        date: {
          day: 22,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Inheritor's Ascendance ",
        description: "Iomedae\n\nInheritor's Ascendance, originally called 'Herald's Day', honours the day that Iomedae was chosen by the god Aroden to become his herald (thus replacing Arazni), thus boosting her power beyond that of a fledgling goddess. This holiday was renamed after the demise of Aroden.",
        id: "824527",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "First Crusader Day",
        description: "Mendev\n\nHoliday in celebration of the continuing crusade against the demons of the Worldwound.",
        id: "824528",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Day of Silenced Whispers",
        description: "Ustalav\n\nThe Day of Silenced Whispers is an Ustalavic holiday celebrated every 9 Arodus marking the defeat of the Whispering Tyrant in 3827 AR by the coalition forces of the Shining Crusade and the liberation of the country after centuries of undead domination.",
        id: "824529",
        note: null,
        date: {
          day: 9,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Founding Day",
        description: "Ilsurian, Varisia\n\nFestival celebrating the founding by Ilsur of the town of Ilsurian in 4631 AR.",
        id: "824530",
        note: null,
        date: {
          day: 10,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Armasse",
        description: "Aroden, Iomedae, Milani\n\nThe raucous, week-long festival known as Armasse is held each year beginning on 16 Arodus. The celebration \u2014 once dedicated to the god Aroden \u2014 is still important to the faithful of Iomedae, who use it to train commoners in combat, ordain apprentice clergy, pick squires for knights, and teach military history, hoping to prevent the mistakes of the past from being repeated. Among those not dedicated to the Inheritor the holiday has lost most of its religious significance since Aroden's death, tending now only toward wild partying, a fact that has precluded the diabolist authorities of Cheliax from prohibiting Armasse outright. Nevertheless, in places where the church of Asmodeus is openly allowed, it hosts special activities for its parishioners during the same week in an effort to counter the influence of the holiday. The city of Corentyn is especially known for its extravagant Armasse festivities.",
        id: "824531",
        note: null,
        date: {
          day: 16,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Saint Alika's Birthday",
        description: "Korvosa\n\nQuiet holiday honoring the birth of Saint Alika the Martyr.",
        id: "824532",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Archerfeast",
        description: `Erastil

Archer's Day or Archerfeast is a holiday of the god Erastil held annually on the 3rd of Erastus. Despite the holiday's origins in the worship of Erastil, common country folk from the Lands of the Linnorm Kings to Taldor celebrate the height of summer with a day set aside for establishing new relationships, enjoying current camaraderie, and celebrating the gifts of the gods. Archery competitions are held frequently in which the men test their skill with the bow through progressively harder trials. The exact form of competition is different from place to place, and the winner is awarded a rack of elk horns and a quiver of blessed arrows. He is also given the title of "Protector", which he holds until the next year.

While the festival's traditions emphasize contests of marksmanship, most have expanded to exhibit talents of all types, from baking and storytelling to racing and mock combat. Aside from encouraging a fair-like atmosphere, many of the displays and competitions serve one of two secondary purposes: either as a way for merchants to show off their superior livestock and wares, or (more popularly) as a way for eligible men and women to show off to each other.

While the day's events at most Archerfeast fairs are filled with games, food, and crafts, the night brings dancing, drinking, pranks, and the crowning of the princes and princesses of spring and summer for the two single youths and two single adults who fared best in the day's events. The festivities continue late into the evening, but end promptly at midnight, so that in true Erastilian fashion the next day's responsibilities are not overly impeded. For those not of Erastil's flock, however, private parties, drinking, and trysting carry on long into the next morning.`,
        id: "824533",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Founding Festival",
        description: "Korvosa\n\nFounding Festival is a local Korvosan celebration marking the establishment of the city in 4407 AR. Held annually on 14 Erastus, the festival is a chance for the citizens to let off some steam, drink copiously, and watch magical light shows late into the night.",
        id: "824534",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Burning Night",
        description: "Razmiran\n\nItems or people who have transgressed against the god-king of Razmiran are burned on this day.",
        id: "824535",
        note: null,
        date: {
          day: 17,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Kianidi Festival",
        description: "Garundi\n\nThe Kianidi Festival is a week long event held annually between 15 and 21 Erastus by Garundi people everywhere. The Garundi have a powerful belief in belonging to a specific location in this world, with clans or tribes sometimes traveling for years in search of their true home. In these travels each individual will collect small mementos of the places she or he has visited in order to remember them and maintain a spiritual connection. During the Kianidi, a tribe will gather and display these mementos to the group. The best ones are chosen and made part of the clan or tribal history, something which Garundi feel is a great honor.",
        id: "824536",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Harvest Moon",
        description: null,
        id: "824537",
        note: null,
        date: {
          day: null,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Multiple Events",
        description: "Festival of Night's Return\n\nNidal\n\nCelebrated throughout Nidal, this holiday involves the burning of effigies and self-flagellation.\n\nSwallowtail Festival\n\nDesna\n\nHoliday celebrated with storytelling, feasting, and the release of butterflies.\n\nWaning Light Festival\n\nSegada\n\nAlso called Blessing of the Sun and Night of Spirits, participants bid farewell to the long days of sunshine with feasting, dancing, and music.",
        id: "824538",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Signing Day",
        description: "Andoran, Cheliax, Galt, Isger\n\nSigning Day is a Chelish holiday, dating back to the height of the empire. Observed on the second Oathday of Rova, this is the day on which new laws in the empire took effect. The significance of this day expanded over many years until imperial marriages, significant business arrangements and oaths of fealty were all conducted on this day.\n\nOriginally, the holiday began as a celebration of the mutual-defense pact between Cheliax, Isger, Galt and Andoran when the united nations threw off the shackles of Taldor, declaring themselves independent from the empire. Observances of the holiday vary, but often include firework displays, feats of strength, and public debates to showcase speaking and rhetorical skills.\n\nAs Cheliax degenerated to civil war and diabolism after 4606 AR, blood pacts and infernal contracts also began to be signed on this day. As a result of Cheliax's new affiliation, Andoran and Galt began to distance themselves from Cheliax and the original interpretation of the holiday. In Andoran it continues to be the day that most national laws take effect as well as being a traditional day of marriage, and the date on which new Steel Falcons are inducted.",
        id: "824539",
        note: null,
        date: {
          day: null,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Crabfest",
        description: "Korvosa\n\nCrabfest is a Korvosan holiday held on the first Wealday of Rova. It celebrates the return of the crabs from the cooler waters of the Jeggare River to their winter habitat in Conqueror's Bay, and is marked by crab boil feasts held throughout the city and its surrounding communities.",
        id: "824540",
        note: null,
        date: {
          day: null,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Feast of Szurpade",
        description: 'Irrisen\n\nThis "celebration of plenty" festival mocks the traditional harvest festivals celebrated in the region before Baba Yaga and her eternal winter descended upon the land.',
        id: "824541",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Day of Sundering",
        description: "Ydersius\n\nOnce many holidays were celebrated by the faith of Ydersius, but today only this date has much significance.",
        id: "824542",
        note: null,
        date: {
          day: 29,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Admani Upastuti",
        description: "Jalmeri\n\nAdmani Upastuti is a Jalmeri holiday celebrated on the first full moon of Lamashan that marks the founding of Jalmeray as a Vudran colony.",
        id: "824543",
        note: null,
        date: {
          day: null,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Ascendance Day",
        description: "Iomedae\n\nAscendance Day is an Iomedaean holiday, held on the 6th of Lamashan. The day marks the anniversary of the day Iomedae took the Test of the Starstone in the autumn of 3832 AR and ascended to godhood.\n\nCelebration\n\nThe day is a joyous celebration for the faithful, with singing, pledging of friendships, and forgiving of old grudges.\n\nTo many, the Test of the Starstone represents the greatest of all challenges, yet for Iomedae it was one of three storied promotions in her rise from Aroden's herald to a goddess in her own right. On the 6th of Lamashan, the Inheritor's faithful observe the heroism of Iomedae's life before her moment of ascension and celebrate the anniversary of the apotheosis itself.\n\nThe celebration takes place in several stages. Early in the day, troupes of performers\u2014as often passionate amateurs as professionals\u2014stage morality plays featuring the Eleven Acts of Iomedae, the heroic near-miracles and sacrifices she made leading up to her trials in the Starstone Cathedral. Scripts vary by region, city, and even neighborhood, but despite differences in setting, performance medium, and word choice, the themes and morals are all the same.\n\nAs the day continues, the priests organize jousts and mock battles, allowing anyone to participate so long as she can demonstrate enough skill to not be a risk to herself or others. The winners of these contests then face tests of mental acuity such as solving riddles, deciphering philosophical quandaries, and answering questions of honor and justice. Those who prove themselves in both contests are awarded a white cloak\u2014representing the Inheritor at peace\u2014styled after Iomedae's own red garment to wear for the rest of the celebration. Feasting and singing follow the competitions, mirroring the jubilation that followed Iomedae's ascension. This is occasion for making pledges of friendship and forgiving enemies, and priests circulate about the crowd offering the Inheritor's blessing to those who do and providing a moment's counsel or mediation for those who need an extra nudge.\n\nThe celebration typically ends before midnight, and the following day the priests and previous day's champions gather up the blunted swords from the mock battles, sharpen them, and distribute them among the church's armory and those of like-minded organizations so that all may remain vigilant against evil and prepared to strike it down.",
        id: "824544",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Bastion Day",
        description: "Solku\n\nBastion Day is a two-day festival held annually on 19 and 20 Lamashan in the Katapeshi town of Solku honoring the founding of the town, when it is traditional to host a stranger from one noon until the next.",
        id: "824545",
        note: null,
        date: {
          day: 19,
          year: 4712,
          month: 9
        },
        category: null
      },
      {
        name: "Jestercap",
        description: "Andoran, Druma, Taldor\n\nJestercap occurs at the end of the month of Lamashan, traditionally on the 27th (although a few regions have taken to moving the exact day around slightly so it always falls on the last Starday of the month, allowing people who wish to celebrate in excess to have the following day of rest to recover).\n\nHistory\n\nWhile Jestercap has been embraced with excited open arms by the gnome communities of the Inner Sea region, its original genesis is said to have been in one of Taldor's coastal cities not long after King Aspex the Even-Tongued broke from the nation, significantly weakening Taldor's power and beginning that nation's long decline. The holiday was originally intended to distract the distraught Taldan populace with a night of revelry and comedic entertainment, but the antics of jesters were simply not enough.\n\nOver the course of the first few years, Jestercap evolved from a holiday of observation to a holiday of participation. Today, the holiday is a time where anyone can pull pranks or jokes or japes on companions, on neighbors, and (most typically) on rivals, with the understanding that provided no lasting harm is done, any humiliations inflicted before midnight are to be taken in stride. Of course, come morning the day after, there are inevitably jokes that went too far, and grudges and feuds borne from Jestercap antics have a way of lingering for months to follow.\n\nIn Religion\n\nFollowers of Chaldira Zuzaristan, a halfling deity of mischief, treat Jestercap as a holy day and their pranks \u2014 often elaborate and extravagant in nature and plotted for months in advance \u2014 as displays of their faith.",
        id: "824546",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Feast of the Survivors",
        description: "Zon-Kuthon, Nidal\n\nA harvest festival signifying the centuries of Nidalese ancestors protected by Zon-Kuthon. The ceremonial tables are made of human bones of community members from past generations.",
        id: "824547",
        note: null,
        date: {
          day: null,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Kraken Carnival",
        description: "Absalom\n\nThe second of two local festivals where kite-battlers compete.",
        id: "824548",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Independence Day",
        description: "Galt\n\nMarks the beginning of the Red Revolution.",
        id: "824549",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Seven Veils",
        description: `Sivanah

The holiday known as Seven Veils, which takes place on the 23rd of Neth in most realms of the Inner Sea region, is a celebration of the region's diversity \u2014 a time when social boundaries break down even further in a day-long event filled with dancing, feasting, and courting. The evening traditionally closes out with the Seven Veil masquerade, a ball wherein the participants wear disguises that hide their race or gender (often using minor magical trinkets and spells) or disguise these features as entirely new characteristics. At the end of the ball, the participants remove their disguises to their partners, often with unpredictable and sometimes delightfully awkward results. Traditionalists and conservative minds often find the Seven Veils masquerades to be scandalous or off-putting, yet they remain particularly popular in most of the larger cities of the land.

Historians note that the original "Dance of the Seven Veils" has a much different genesis than one promoting diversity \u2014 the mysterious cult of Sivanah, goddess of illusions, mystery, and reflections, is generally cited as the source of this festival, and indeed, worshippers of the goddess (herself known as the Seventh Veil) count the 23rd of Neth as one of their most sacred of days. What rituals the church of Sivanah performs on this date, however, are unknown to outsiders, for the cult enjoys its secrets. This secrecy has, unsurprisingly, given rise to all manner of sinister rumour, yet when Seven Veils rolls around each year, its eager participants are quick to set aside rumour in preference for the night's fun and games.`,
        id: "824550",
        note: null,
        date: {
          day: 23,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Abjurant Day",
        description: "Nethys\n\nAbjurant Day occurs on 8 Neth and is known as a day of cooperation between neighbors to shore up mutual defenses and train allies in magic. Potential apprentices are often tested on the day.",
        id: "824551",
        note: null,
        date: {
          day: 8,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Great Fire Remembrance",
        description: "Korvosa\n\nGreat Fire Remembrance is a holiday celebrated on each 13 Neth in the Varisian city of Korvosa. It commemorates the Great Fire of 4429 AR, which devastated the then still fledgling Chelish colony of Fort Korvosa. On this somber day, most of the city shuts down and people generally remain at home. It has become tradition not to light any fires (not even cooking fires) on Great Fire Remembrance.",
        id: "824552",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Even-Tongued Day",
        description: "Cheliax, Asmodeus, Milani\n\nObserved on 14 of Neth, Even-Tongued Day was once a day of joy and celebration in Cheliax, but has become instead one of mourning.\n\nOriginally, the date marked the conquest of Aspex the Even-Tongued, who brought the nations of Galt, Andoran and Isger under Chelish control. Since the death of Aroden and the loss of these nations, the holiday instead marks the loss of territory and glory once held by Cheliax. Oaths are sometimes made, typically to Asmodeus, and rarely of a pleasant nature (such as the reclaiming of the lost empire and vengeance against treacherous former allies).\n\nCitizens wear black on this day, public speaking is forbidden, and old feuds and vendettas are rekindled.",
        id: "824553",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Evoking Day",
        description: "Nethys\n\nA holy day to followers of Nethys, Evoking Day is full of vibrant explosions, skillful wielding of spells, and much dancing. Evoking Day is observed on the 18th of Neth, and while this holiday is mostly celebrated in Garund, temples dedicated to Nethys host celebrations throughout the Inner Sea region. Traditional celebrations of Evoking Day have changed over the thousands of years since its first incarnation, but to this day every occurrence of Evoking Day still features a grand meal shared by celebrants during the afternoon and a wondrous exhibition of brilliant and explosive magic once the sun sets. These days, such colorful magical displays are augmented with fireworks of a dozen different colors and patterns.\n\nIn temples of Nethys dedicated to revering evocation magic, priests and prominent arcanists participate in spell duels where each contestant stands on a raised platform and takes turns trying to incapacitate her opponent. The magic wielded in theses duels favors the flashy over the dangerous, but clerics of Nethys are on hand to treat any injuries. These duels gather large crowds eager to lend their applause to their favorite contestant.\n\nIt is also during this festival when wizards who worship Nethys open their spellbooks to others who share their craft. Wizards normally guard their spellbooks with their lives and covet the eldritch information therein, but on Evoking Day these wizards meet with one another prior to the afternoon feast to share their spells just as they prepare to share a grand meal.\n\nThough Evoking Day is primarily a day of grand magic, those with no spellcasting talent still flock to local temples of Nethys to partake in the shared feast and flashy evening displays of magic and fireworks. Between the meal and into the night, celebrants wear black-and-white robes and perform joyous dances meant to give thanks to the wonders Nethys brought to humankind. These dances are grand affairs involving dozens of dancers all spinning and clapping to the accompanying music as their black-and-white robes fan out around them with each spin. As night descends and the fireworks and magical displays begin, the dancing rises to a climax erupting in shouts and calls to Nethys with each thunderous boom.",
        id: "824554",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Baptism of Ice",
        description: "Irrisen\n\nIn the Irriseni Baptism of Ice, an annual fertility festival held from the 24th to the 30th of Neth, locals parade all children born during the year through the town in fine clothes. In most towns, the festival ends with a symbolic sacrifice of a child to the cold. However, in Whitethrone and Irrisen's provincial capitals, a peasant child is killed through exposure.",
        id: "824555",
        note: null,
        date: {
          day: 24,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Transmutatum",
        description: "Nethys\n\nTransmutatum is one of the three major holidays of the church of Nethys, on 28th of Neth. It is a day of reflection and self-improvement. Many followers of Nethys begin research and crafting projects on this day.",
        id: "824556",
        note: null,
        date: {
          day: 28,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Winter Week",
        description: "Traditional feast; time for courting and spending time with friends.",
        id: "824557",
        note: null,
        date: {
          day: null,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "The Shadowchaining",
        description: "Zon-Kuthon, Nidal\n\nCommemorating the Midnight Lord's gift of shadow animals.",
        id: "824558",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Pseudodragon Festival",
        description: "Korvosa\n\nKorvosa's Pseudodragon Festival, a holiday celebrated annually on 7 Kuthona, marks the winter migration of wild pseudodragons from the Mindspin Mountains to Conqueror's Bay, which inspires the creatures already in the city\u2014even those domesticated\u2014to play with their wild kin in the skies over the city. Locals mark the day with a joyous inebriation.",
        id: "824559",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Ascension Day",
        description: "Cayden Cailean\n\nMuch like the god to whom it is dedicated, the Caydenite holiday of Ascension Day is generally celebrated in a very informal style. Occurring annually on 11 Kuthona, it commemorates the day Cayden Cailean passed the Test of the Starstone and ascended to godhood in 2765 AR. In all likelihood, the 11th of Kuthona is not the exact date on which it actually happened, but since the god was dead drunk when it happened, it will probably be never known.",
        id: "824560",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Winterbloom",
        description: "Naderi\n\nHoliday celebrating Naderi's ascension. Celebrations are typically understated but include readings of The Lay of Arden and Lysena.",
        id: "824561",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Final Day",
        description: "Groetus\n\nCultists of Groetus perform an hour's silence at dusk on the last day of the year and seek guidance from their god about the End Time.",
        id: "824562",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Night of the Pale",
        description: "Not all of Golarion's holidays and festivals are times of rejoicing and delight. Holidays worshiped by dark and sinister cults and religions tend to be hidden affairs, their rituals and ceremonies involving cruelties and vile practices that send shivers of fear through gentler society. Scholars suspect that the Night of the Pale\u2014a holiday that traditionally takes place on the last day of the year, the 31st of Kuthona\u2014has links to several sinister religions, but today no one church has specific association with the event. Nonetheless, the Night of the Pale is an event that many look forward to all year, whether in fear or excitement.\n\nOn the Night of the Pale, it is said that the ghosts of those who died during the previous year manifest upon the world and come to visit the homes they lived in during life. Although some might think that the chance of seeing even the shade of a dearly departed one might be a blessing, the Night of the Pale is not a time for tearful reunions, for these ghosts, tradition says, do not return out of love for those they left behind but out of darker compulsions. Lingering jealousy, unfinished arguments, or the simmering need for revenge are said to be what compels the dead to return to torment the living on the Night of the Pale.\n\nThe evening of this night in many communities is celebrated by a morbid feast, the food prepared with themes revolving around graveyards, the dead, and other spooky traditions. This feast, on one level, helps the celebrants to make light of their fears while sharing good company with similarly nervous neighbors, but at another level is believed to placate vengeful spirits as toasts are raised to the memories of the recently departed. These feasts include retellings of favorite memories of the departed, in hopes of reminding the approaching ghosts of brighter and kinder memories than those that compel them to return. The feast always ends at least an hour before midnight in order to give participants time to return home, decorate doors and windows with salt and other trinkets taken from the feasting table (salted bread baked into crook-like shapes are a favorite, as these can be hung from doorknobs and eaves) to ward off evil spirits, and hide in their bedrooms until dawn. Brave youths and adventurers often deliberately stay out after midnight, either to dare the ghosts to challenge them or simply for the thrill of bucking tradition. Every Night of the Pale, it seems, there are disappearances among those who stay out after midnight, although whether these vanishings are the result of dissatisfied locals taking the opportunity to run away from home, murderers or wild animals or other mundane dangers, or the vengeful spirits carrying off their victims depends upon the circumstances.\n\nThe morning after a Night of the Pale is also the first day of the new year\u2014a time that many celebrate more as a relief for surviving the night before than in anticipation of what the new year might bring, although regional preferences for how this day is celebrated vary enough that no single tradition holds over the other. Save, of course, the lingering fears of what dread spirits might come knocking upon warded doors one year away...",
        id: "824563",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Turning Day",
        description: "Alseta\n\nThe changing of the year is celebrated with the forgiveness of old debts and grudges, and embracing new opportunities.",
        id: "824564",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Ritual of Stardust",
        description: "Desna\n\nThe Ritual of Stardust is one of the few formal religious holidays in honor of the goddess Desna. It is held on both the summer and winter solstices.\n\nFollowers of the Song of Spheres gather at dusk and light enormous bonfires and hold feasts, watching the sparks and embers float out into the darkening sky. After it is fully dark, the celebrants chant and sing songs as they watch the fires burn low. When only embers remain, sand mixed with ground star gems (either star rubies, star sapphires, or rose quartz) is thrown on them or into the air downwind. At this point it is common to make proclamations of love and friendship and of promised journeys to come. The twinkling of the sand is thought to mirror the night sky and demonstrate Desna's witnessing of these pronouncements.",
        id: "824565",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Planting Week",
        description: "Erastil\n\nThis holy week to the god Erastil is a time of heavy work in the fields for farmers.",
        id: "824566",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Ascendance Night",
        description: "Norgorber\n\nDay marking the apotheosis of the Reaper of Reputation.",
        id: "824567",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Azvadeva Dejal",
        description: "Gruhastha\n\nCelebration of the revelation of the Azvadeva Pujila, with gifts of books, celebrations of knowledge, blessing of animals, and a vegetarian feast.",
        id: "824568",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Goblin Flea Market",
        description: "Andoran\n\nA market day that focuses on unusual crafts and offers games to children who dress up for the occasion.",
        id: "824569",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Breaching Festival",
        description: "Korvosa\n\nYearly festival in which contestants try to break through the magical wards protecting the Academae.",
        id: "824570",
        note: null,
        date: {
          day: null,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Silverglazer Sunday",
        description: "Andoran\n\nSilverglazer Sunday is a two-part Andoren national festival that is held on the last Sunday of Arodus and the first Sunday of Rova every year. Celebrants spend the two Sundays fishing, holding swimming competitions, and making enormous puppets.",
        id: "824571",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Batul al-Alim",
        description: "Qadira\n\nBatul al-Alim is a holiday celebrated on the last Oathday of Calistril in Qadira. It commemorates the birthday of the popular romantic poet of the same name.",
        id: "824572",
        note: null,
        date: {
          day: null,
          year: null,
          month: 1
        },
        category: null
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Religious Holidays",
        id: "religious-holidays",
        color: "#9b2c2c"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#0D47A1"
      },
      {
        name: "Historical Events",
        id: "historical-events",
        color: "#455A64"
      },
      {
        name: "Miscellaneous Events",
        id: "miscellaneous-events",
        color: "#0288D1"
      }
    ]
  },
  {
    name: "Calendar of Galifar",
    description: "Calendar of the world of Eberron.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: false,
      weekdays: [
        {
          type: "day",
          name: "Sul",
          id: "ID_598a7bd9b8b9"
        },
        {
          type: "day",
          name: "Mol",
          id: "ID_69088ac8f818"
        },
        {
          type: "day",
          name: "Zol",
          id: "ID_a8c85a98f8fa"
        },
        {
          type: "day",
          name: "Wir",
          id: "ID_fa4b687aaba9"
        },
        {
          type: "day",
          name: "Zor",
          id: "ID_58e9a82a6bc8"
        },
        {
          type: "day",
          name: "Far",
          id: "ID_9a18cb889ada"
        },
        {
          type: "day",
          name: "Sar",
          id: "ID_3b9bfa38c979"
        }
      ],
      months: [
        {
          name: "Zarantyr",
          type: "month",
          length: 28,
          id: "ID_7a8afb09aa6a"
        },
        {
          name: "Olarune",
          type: "month",
          length: 28,
          id: "ID_386b188b2a89"
        },
        {
          name: "Therendor",
          type: "month",
          length: 28,
          id: "ID_599a0ad859c8"
        },
        {
          name: "Eyre",
          type: "month",
          length: 28,
          id: "ID_98a95869e90b"
        },
        {
          name: "Dravago",
          type: "month",
          length: 28,
          id: "ID_eb5a194bcbf8"
        },
        {
          name: "Nymm",
          type: "month",
          length: 28,
          id: "ID_bb596aa9ca5b"
        },
        {
          name: "Lharvion",
          type: "month",
          length: 28,
          id: "ID_fb1bb9dabb88"
        },
        {
          name: "Barrakas",
          type: "month",
          length: 28,
          id: "ID_8bcb19c8f90a"
        },
        {
          name: "Rhaan",
          type: "month",
          length: 28,
          id: "ID_0a09eb5b7b9b"
        },
        {
          name: "Sypheros",
          type: "month",
          length: 28,
          id: "ID_3b98ab1a29e8"
        },
        {
          name: "Aryth",
          type: "month",
          length: 28,
          id: "ID_899b59faaba9"
        },
        {
          name: "Vult",
          type: "month",
          length: 28,
          id: "ID_8a286b78aac9"
        }
      ],
      moons: [
        {
          name: "Nymm",
          cycle: 28,
          offset: -14,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_a8b88988a94a"
        },
        {
          name: "Sypheros",
          cycle: 35,
          offset: -11,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_5ba80b4b096a"
        },
        {
          name: "Therendor",
          cycle: 42,
          offset: 21,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_c999085a499b"
        },
        {
          name: "Rhaan",
          cycle: 49,
          offset: 9,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_39f91ab8a85a"
        },
        {
          name: "Olarune",
          cycle: 56,
          offset: 27,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_2ada8b99788b"
        },
        {
          name: "Eyre",
          cycle: 63,
          offset: 10,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_49285b79d988"
        },
        {
          name: "Vult",
          cycle: 70,
          offset: 6,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_eaebb94a9acb"
        },
        {
          name: "Zarantyr",
          cycle: 77,
          offset: 31,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_98d86aabcbb9"
        },
        {
          name: "Aryth",
          cycle: 84,
          offset: 41,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_d989b809d97b"
        },
        {
          name: "Dravago",
          cycle: 91,
          offset: 31,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_1a293959eaab"
        },
        {
          name: "Lharvion",
          cycle: 98,
          offset: 34,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_cbf919491a5b"
        },
        {
          name: "Barrakas",
          cycle: 105,
          offset: -11,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_4a1a2a6b589b"
        }
      ],
      leapDays: [],
      eras: []
    },
    current: {
      year: 998,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "The Tain Gala - Sharn",
        description: "The Tain Gala is a notable event held on the first Far of each month in Sharn.",
        id: "824461",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Revelation Day - Blood of Vol",
        description: "Meditation ceremony for Seekers (also called Ascension Day).",
        id: "824462",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The longest night of the year.",
        id: "824463",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Rebirth Eve - The Silver Flame",
        description: "The Purified new year; a night for spiritual vigil and guarding against evil. ",
        id: "824464",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Crystalfall - Sharn",
        description: "A day of remembrance; Ice sculptures are created (and destroyed) to commemorate the destruction of the Glass Tower on 9 Olarune in 918 by abjurers. ",
        id: "824465",
        note: null,
        date: {
          day: 9,
          year: 998,
          month: 1
        },
        category: null
      },
      {
        name: "Bright Souls' Day - The Silver Flame",
        description: "On this day each year, the Purified celebrate the lives and sacrifice of all followers of the Flame who died while fighting evil and protecting the faithful. ",
        id: "824466",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "The Day of Mourning - Sharn",
        description: "In commemoration of the destruction of the nation of Cyre, those who survived gather to remember the loss of their kingdom on this date in the year 994. ",
        id: "824467",
        note: null,
        date: {
          day: 20,
          year: 995,
          month: 1
        },
        category: null
      },
      {
        name: "Tirasday - The Silver Flame",
        description: "On this day, the Silver Flame work, give gifts, and partake in joyous celebration out of thankfulness for the new planting season and the birth of Tira Miron - the Voice of the Silver Flame.",
        id: "824468",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Sun's Blessing - The Sovereign Host",
        description: "The Sovereign Host enjoys this festival of peace, and of setting aside differences, in the name of Dol Arrah.",
        id: "824469",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Initiation Day - The Silver Flame",
        description: "Seminary graduations and breaking grounds for new churches are common on this day as the Silver Flame recalls their declarations of independent faith and the construction of their first cathedral on this special day each year. ",
        id: "824470",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Baker's Night - The Silver Flame",
        description: "An old and misunderstood, yet immensely popular, holiday wherein followers of the Silver Flame gather to share pastries and treats created by bakers within their fold. ",
        id: "824471",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Aureon's Crown - Sharn and The Sovereign Host",
        description: "The Sovereign Host celebrate knowledge on this day with lectures and sermons.Secular institutions hold graduation and commencement ceremonies on this date, as do the monastic schools of the Silver Flame.In Sharn this has become a common secular holiday, wherein even non-devout members of the Five Nations attend lectures and sermons held by the priests of Aureon on philosophical, historical, and a range of other topics - including discussions on the nature of the gods.\n\n",
        id: "824472",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Promisetide - The Silver Flame",
        description: "A controversial holiday outside of the Silver Flame faith, on this day the Purified honor the Silver Flame for the promise of paradise. They also honor (without worship) the Sovereign Host for having created the world, before stepping aside to allow the Flame its rightful place as the last god of Eberron.\xA0 ",
        id: "824473",
        note: null,
        date: {
          day: 28,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Brightblade - Sharn and The Sovereign Host",
        description: "This Sovereign Host festival, dedicated to Dol Dorn, is marked by gladiatorial and athletic contests. \n\nIn Sharn, festival celebrations occur throughout the temple districts with events culminating in a combined contest of champions at the Cornerstone Arena. ",
        id: "824474",
        note: null,
        date: {
          day: 12,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "First Dawn - The Silver Flame",
        description: "On this day in 914, the Church of the Silver Flame officially assumed control of the government of Thrane. On each anniversary, the Purified give thanks for their just rule, while also honoring the memory of King Thalin, whose death paved the way for their governance.",
        id: "824475",
        note: null,
        date: {
          day: 21,
          year: 915,
          month: 5
        },
        category: null
      },
      {
        name: "Silvertide - The Silver Flame",
        description: "Commemoration of both the couatl sacrifice and the entry, thousands of years ago, of the Silver Flame into Eberron mark this highest of holy days. The vast majority of Purified spend this day in prayer and observance.\xA0 ",
        id: "824476",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "The Race of Eight Winds - Sharn",
        description: "Legend tells of King Galifar II's fascination with aerial scouts and cavalry. The evolution of this annual contest took centuries, but has given Sharn an exotic and well anticipated event involving beasts and their riders in a symbiotic quest for glory* over a course that finds them weaving through the spires of the city. \n\n\n\n*the winner also receives 500gp and a land grant located elsewhere in Breland.",
        id: "824477",
        note: null,
        date: {
          day: 21,
          year: 201,
          month: 6
        },
        category: null
      },
      {
        name: "The Hunt - Sharn and The Sovereign Host",
        description: "The Sovereign Host celebrate Balinor with communal hunts of dangerous creatures. \n\nIn Sharn, a dangerous beast*, whose transport to the city was arranged by the priests of Balinor, is released into the Depths of the Lower-City. Open to any who would participate (and pay an entry fee in the form of a 5gp donation), the victor must return with the beast's head to receive a 500gp purse, local fame, and the blessing of Balinor. \n\n\n\n*often a singular beast, it can be several - which then requires the victor to return with the most skins. ",
        id: "824478",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Victory Day - The Silver Flame",
        description: "Commemorating the conclusion of the lycanthropic purge (832 YK - 880 YK), on Victory Day the adult faithful of the Silver Flame attend sermons on triumph, defeat, and the somewhat questionable methods utilized by the templars during the purge - while the children of the faithful act out great battles with toy swords. ",
        id: "824479",
        note: null,
        date: {
          day: 9,
          year: 881,
          month: 7
        },
        category: null
      },
      {
        name: "Fathen's Fall - Sharn",
        description: "Honoring the memory of Fathen, a great hero of the Silver Crusade (832 YK - 880 YK), who, in the last days of the purge, was torn apart by wererats on the streets of North Market. Faithful gather on this day at the Shrine of Fathen the Martyr to listen to a sermon from the priest of High Hope. This holiday is often uncomfortable and tense for shifter communities in Sharn. ",
        id: "824480",
        note: null,
        date: {
          day: 25,
          year: 881,
          month: 7
        },
        category: null
      },
      {
        name: "Boldrei's Feast - Sharn and The Sovereign Host",
        description: "A feast of community in the name of Boldrei, extravagant parties are often held on this holiday and it has also become the traditional day for elections. \n\nIn Sharn, a great feast is held at the Pavilion of the Host with goods and services donated\xA0 from local merchants, as well as House Ghallanda. Many grand parties, some quite astonishing in their opulence, are hosted by the wealthiest members of varying districts - often in competition with one another for social standing. ",
        id: "824481",
        note: null,
        date: {
          day: 9,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "The Ascension - Sharn",
        description: "Each year on The Ascension, followers reaffirm their faith and give thanks as well as attend blessing ceremonies at temples throughout the city - the grandest of which occurs at the Cathedral of the Cleansing Flame. All of this is to honor the sacrifice of Tira Miron, the Voice of the Flame, without which there would be no Church of the Silver Flame. Contributions to their community on this day are a high priority for the faithful.",
        id: "824482",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Wildnight - Sharn",
        description: "With the The Fury (the Sovereign of Passion and Madness) reaching the height of her power on this night, people find it difficult to control or restrain their impulses - once the sun sets, public revelry in the streets climbs to joyous or, all too often, dangerous levels, calming only as the sun rises on the following morning. ",
        id: "824483",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Saint Voltros's Day - The Silver Flame",
        description: "Though one of the least high holy days, it is marked by brief prayers and church services in the honor of the birth of Saint Voltros - the first paladin called to only serve the Silver Flame.",
        id: "824484",
        note: null,
        date: {
          day: 25,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Thronehold - Sharn",
        description: "On this day in 996, the Treaty of Thronehold was signed, formally ending the Last War. Annual celebratory feasts are held throughout the Five Nations to mark this auspicious and long-awaited event. ",
        id: "824485",
        note: null,
        date: {
          day: 11,
          year: 997,
          month: 10
        },
        category: null
      },
      {
        name: "Rampartide - The Silver Flame",
        description: "In accordance with scripture, on this day the Purified steel themselves against wickedness, both without and within, through repentance and fasting. Children, elderly, and the sick are required only to give up their favorite foods for the day. ",
        id: "824486",
        note: null,
        date: {
          day: 24,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Long Shadows - Sharn",
        description: "As dark magic dominates over these three days of the Long Shadows, the myth of Sovereign Lord Aureon's stolen shadow is forefront in the minds of the people. Most will spend these days indoors huddled around the warmth of a fire, but those few who worship the dark deity use this time to prey upon the weak and the foolish. ",
        id: "824487",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Khybersef - The Silver Flame",
        description: `Originally called Khyber's Eve, the Purified spend the night in intense prayer and spiritual vigilance against the, according to scripture, "thinning of the bonds that hold the demon lords in Khyber" between now (the beginning of winter) and the solstice. Quests and crusades often begin on Khybersef. `,
        id: "824488",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The spring equinox is when the day and the night are equally as long, and are getting longer.",
        id: "824489",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Summer Solstice",
        description: "	At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824490",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The autumn equinox is when the day and the night are equally as long, and are getting shorter.",
        id: "824491",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      }
    ],
    id: null,
    categories: []
  },
  {
    name: "Barovian Calendar",
    description: "Calendar of the realm of Barovia, home of Strahd.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Monday",
          id: "ID_6a183b08c8eb"
        },
        {
          type: "day",
          name: "Tuesday",
          id: "ID_892b7b7a5ae9"
        },
        {
          type: "day",
          name: "Wednesday",
          id: "ID_6bb98899ba68"
        },
        {
          type: "day",
          name: "Thursday",
          id: "ID_4a7b683aea19"
        },
        {
          type: "day",
          name: "Friday",
          id: "ID_78690a099b89"
        },
        {
          type: "day",
          name: "Saturday",
          id: "ID_ba5b09ba5a89"
        },
        {
          type: "day",
          name: "Sunday",
          id: "ID_29b90acaead9"
        }
      ],
      months: [
        {
          name: "1st Moon",
          type: "month",
          length: 31,
          id: "ID_7b4978ab581a"
        },
        {
          name: "2nd Moon",
          type: "month",
          length: 28,
          id: "ID_cb99fbb9395b"
        },
        {
          name: "3rd Moon",
          type: "month",
          length: 31,
          id: "ID_79881a89cb18"
        },
        {
          name: "4th Moon",
          type: "month",
          length: 30,
          id: "ID_5b9a8a397908"
        },
        {
          name: "5th Moon",
          type: "month",
          length: 31,
          id: "ID_f8399ab80818"
        },
        {
          name: "6th Moon",
          type: "month",
          length: 30,
          id: "ID_3ac84a7bc869"
        },
        {
          name: "7th Moon",
          type: "month",
          length: 31,
          id: "ID_e98bc86bc809"
        },
        {
          name: "8th Moon",
          type: "month",
          length: 31,
          id: "ID_89ea78ca5988"
        },
        {
          name: "9th Moon",
          type: "month",
          length: 30,
          id: "ID_798a3b990a4b"
        },
        {
          name: "10th Moon",
          type: "month",
          length: 31,
          id: "ID_3a9999e8eb59"
        },
        {
          name: "11th Moon",
          type: "month",
          length: 30,
          id: "ID_db39383b990a"
        },
        {
          name: "12th Moon",
          type: "month",
          length: 31,
          id: "ID_1bfa3b180a48"
        }
      ],
      moons: [
        {
          name: "Moon",
          cycle: 29.530588853,
          offset: 10.24953,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_e98b3a8ab8da"
        }
      ],
      leapDays: [
        {
          name: "Leap Day",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 400
            },
            {
              ignore: false,
              exclusive: true,
              interval: 100
            },
            {
              ignore: false,
              exclusive: false,
              interval: 4
            }
          ],
          offset: 0,
          timespan: 1,
          intercalary: false,
          id: "ID_6a28dbb81a48"
        }
      ],
      eras: [
        {
          name: "Before Christ",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -9e3,
            month: 0,
            day: 0
          }
        },
        {
          name: "Anno Domini",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ]
    },
    current: {
      year: 735,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "Winter Solstice",
        description: "The Winter Solstice is the day of the year with the least time between sunrise and sunset. Many western cultures consider it the official start of winter.",
        id: "824455",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      },
      {
        name: "Summer Solstice",
        description: "The Summer Solstice is the day of the year with the most time between \nsunrise and sunset. Many western cultures consider it the official start\n of summer.",
        id: "824456",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      },
      {
        name: "Spring Equinox",
        description: "The Spring Equinox,\nalso called the Vernal Equinox, is the day between the winter and\nsummer solstices where the day is the exact same length as the night.\nMany western cultures consider it the official start of Spring.\n",
        id: "824457",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      },
      {
        name: "Autumnal Equinox",
        description: "The Autumnal Equinox,\nalso called the Fall Equinox, is the midpoint between the summer and\nwinter solstices, where the day is the exact same length as the night.\nMany western cultures consider it the official start of Autumn.\n",
        id: "824458",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "New Year's Day",
        description: "New Year's day marks the start of a new year.",
        id: "824459",
        note: null,
        date: {
          day: 1,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Paschal Full Moon",
        description: "The first full moon after march 21st, which is considered the fixed date for the spring equinox.",
        id: "824460",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Event",
        id: "natural-event",
        color: "#9e9d24"
      }
    ]
  },
  {
    name: "Exandrian Calendar",
    description: "Calendar of the world of Wildemount.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 2,
      incrementDay: false,
      displayMoons: true,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Miresen",
          id: "ID_3b38aaa81bca"
        },
        {
          type: "day",
          name: "Grissen",
          id: "ID_da6b19882baa"
        },
        {
          type: "day",
          name: "Whelsen",
          id: "ID_a9cae8f88b98"
        },
        {
          type: "day",
          name: "Conthsen",
          id: "ID_e87859eb5aaa"
        },
        {
          type: "day",
          name: "Folsen",
          id: "ID_59180abbea8a"
        },
        {
          type: "day",
          name: "Yulisen",
          id: "ID_98082bd8d8ca"
        },
        {
          type: "day",
          name: "Da'leysen",
          id: "ID_da4ba92b299a"
        }
      ],
      months: [
        {
          name: "Horisal",
          type: "month",
          length: 29,
          id: "ID_e89a4ab9995b"
        },
        {
          name: "Misuthar",
          type: "month",
          length: 30,
          id: "ID_18b8894bab7b"
        },
        {
          name: "Dualahei",
          type: "month",
          length: 30,
          id: "ID_0a9b29f8f8db"
        },
        {
          name: "Thunsheer",
          type: "month",
          length: 31,
          id: "ID_6a8a8a5bea5b"
        },
        {
          name: "Unndilar",
          type: "month",
          length: 28,
          id: "ID_b8295bdbcafa"
        },
        {
          name: "Brussendar",
          type: "month",
          length: 31,
          id: "ID_c92a489bb909"
        },
        {
          name: "Sydenstar",
          type: "month",
          length: 32,
          id: "ID_7b48bb1b0a4a"
        },
        {
          name: "Fessuran",
          type: "month",
          length: 29,
          id: "ID_289858c97849"
        },
        {
          name: "Quen'pillar",
          type: "month",
          length: 27,
          id: "ID_f8abd9a86aa9"
        },
        {
          name: "Cuersaar",
          type: "month",
          length: 29,
          id: "ID_7aba59fa2b69"
        },
        {
          name: "Duscar",
          type: "month",
          length: 32,
          id: "ID_5819f86b99cb"
        }
      ],
      moons: [
        {
          name: "Catha",
          cycle: 33,
          offset: 7,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_0ab929092b5b"
        },
        {
          name: "Ruidus",
          cycle: 328,
          offset: 80,
          faceColor: "#ff6161",
          shadowColor: "#1f1f1f",
          id: "ID_b9783ac818e9"
        }
      ],
      leapDays: [],
      eras: [
        {
          name: "The Founding",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        },
        {
          name: "Age of Arcanum",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -1500,
            month: 0,
            day: 1
          }
        },
        {
          name: "The Calamity",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -665,
            month: 0,
            day: 1
          }
        },
        {
          name: "Post-Divergence",
          description: "",
          format: "Year {{year}} P.D.",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ]
    },
    current: {
      day: 1,
      month: 0,
      year: 836
    },
    events: [
      {
        name: "Spring Equinox",
        description: "The spring equinox is when the day and the night are equally as long, and are getting longer.",
        id: "824430",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Summer Solstice",
        description: "	At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824431",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The autumn equinox is when the day and the night are equally as long, and are getting shorter.",
        id: "824432",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824433",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "New Dawn",
        description: "The first day of the new year is also the holy day of the Changebringer, as the old year gives way to a new path.\n\nIn Tal'Dorei, Emon celebrates New Dawn with a grand midnight feast, which commonly features a short play celebrating the changes witnessed in the past year.\n\nOn the Menagerie Coast, people celebrate by having a feast on the shore at dusk to watch the sunset. They feast and discuss their hopes for the new year until the sun rises.",
        id: "824434",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: "religious-holidays"
      },
      {
        name: "Hillsgold",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824435",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 0
        },
        category: "secular-holidays"
      },
      {
        name: "Day of Challenging",
        description: `The holy day of the Stormlord is one of the most raucous holidays in Emon. Thousands of spectators attend the annual Godsbrawl, which is held in the fighting ring within the Temple of the Stormlord. The people root for their deity's favored champion, and there is a fierce (yet friendly) rivalry between the Champion of the Stormlord and the Champion of the Platinum Dragon. The winner earns the title of "Supreme Champion" for an entire year.

The Day of Challenging is one of the most raucous holidays in Port Damali, and thousands of spectators attend the annual Godsbrawl held in the Temple of\xA0Kord to root for their favored deity's champion, particularly the chosen champions of the Storm Lord and the\xA0All-Hammer.\xA0`,
        id: "824436",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 1
        },
        category: "religious-holidays"
      },
      {
        name: "Renewal Festival",
        description: "Spring begins early in the month of Dualahei, officially starting on the 13th with the Renewal Festival.",
        id: "824437",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 2
        },
        category: "secular-holidays"
      },
      {
        name: "Wild's Grandeur",
        description: "Though the Archeart is the god of spring, the peak of the spring season is the holy day of the Wildmother.\n\nThe people in the southern wilds of Tal'Dorei celebrate the Wildmother's strength by journeying to a place of great natural beauty. This could be the top of a mountainous waterfall, the center of a desert, or even an old and peaceful city park (such as Azalea Street Park in Emon). Though Emon rarely celebrates Wild's Grandeur, the few who do will plant trees in observance of the holiday.\n\nThe people of the Menagerie Coast set aside this day to sail for no reason other than the pleasure of observing the natural beauty of their surroundings. Those who still partake in elements of Ki'Nau culture take this day to appreciate the fruits and foods granted by the sea, leaving offerings of delicacies and small handmade crafts at temporary altars of twisted roots and grasses.",
        id: "824438",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 2
        },
        category: "religious-holidays"
      },
      {
        name: "Harvest's Rise",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824439",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 3
        },
        category: "secular-holidays"
      },
      {
        name: "Merryfrond's Day",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824440",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 3
        },
        category: "secular-holidays"
      },
      {
        name: "Deep Solace",
        description: "Moradin's holy day is Deep Solace, which is celebrated on the eighteenth day of the fifth month. Especially devout followers of the All-Hammer spend the day in isolation, meditating on the meaning of family and how they may be better mothers, fathers, siblings, and children.\n\nThe dwarven communities across Exandria, such as the ones in Grimgolir and Kraghammer, celebrate with a full day of feasting and drinking.\xA0",
        id: "824441",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 4
        },
        category: "religious-holidays"
      },
      {
        name: "Zenith",
        description: "Summer begins in the middle of Unndilar, officially starting at noon on the 26th day known as the Zenith.",
        id: "824442",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 4
        },
        category: "secular-holidays"
      },
      {
        name: "Artisan's Faire",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824443",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 5
        },
        category: "secular-holidays"
      },
      {
        name: "Elvendawn",
        description: "Corellon's holy day is called Elvendawn,\nor Midsummer. It is celebrated on the twentieth day\nof the sixth month, and commemorates the elves' first\nemergence from the Feywild.\n\nIn Syngorn, the Elves open small doorways into the Feywild and celebrate alongside the wild fey with uncharacteristic vigor.\n\nThough the Dwendalian\nEmpire doesn't promote the worship of the Arch Heart,\nthe elves of Bysaes Tyl quietly celebrate in private by\nopening small doors to the Feywild and having a little\nmore wine than usual.\xA0",
        id: "824444",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 5
        },
        category: "religious-holidays"
      },
      {
        name: "Highsummer",
        description: "The holy day of the Dawnfather is the peak of the summer season.\n\nEmon celebrates with an entire week of gift-giving and feasting, ending at midnight on the 21st of Sydenstar (the anniversary of the Battle of the Umbra Hills, where Zan Tal'Dorei dethroned Trist Drassig).\n\nWhitestone (where the Dawnfather is the city's patron god) celebrates with gift-giving and a festival of lights around the Sun Tree. Due to the Briarwood occupation, money is thin, so most Whitestone folk choose to recount the small things they are thankful for, rather than buy gifts.\n\nWhile other parts of Exandria feast, the Dwendalian\nEmpire uses this day as an opportunity to enlist more\nsoldiers in its army. The military holds great feasts and\nhands out toy soldiers and other propaganda, encouraging people to enlist and help fight against the evil that\nthreatens the king.\xA0",
        id: "824445",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 6
        },
        category: "religious-holidays"
      },
      {
        name: "Morn of Largesse",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824446",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 6
        },
        category: "secular-holidays"
      },
      {
        name: "Harvest's Close",
        description: "Autumn begins on the 3rd of Fessuran\xA0and is typically celebrated with feasting in rural regions and with carnivals in the cities.\xA0",
        id: "824447",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 7
        },
        category: "secular-holidays"
      },
      {
        name: "The Hazel Festival",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824448",
        note: null,
        date: {
          day: 12,
          year: null,
          month: 8
        },
        category: "secular-holidays"
      },
      {
        name: "Civilization's Dawn",
        description: "The Law Bearer's holy day is Civilization's\nDawn, which is celebrated on the autumnal equinox,\nusually the twenty-second day of the ninth month.\n\nEmon celebrates with a great bonfire in the square of each neighborhood, around which each community dances and gives gifts.\n\nIn the\nDwendalian Empire, people celebrate by having feasts \nin honor of the laws of the Dwendal bloodline. One seat\nat every table is left open for the king, who eats in spirit\nwith the people he rules.\xA0",
        id: "824449",
        note: null,
        date: {
          day: 22,
          year: null,
          month: 8
        },
        category: "religious-holidays"
      },
      {
        name: "Night of Ascension",
        description: "The Raven Queen's holy day is called the Night of Ascension, celebrating her apotheosis. The actual date of the her rise to divinity is unclear, but the Night of Ascension is celebrated on the thirteenth day of the tenth month.\n\nThough most in Emon see this celebration of the dead as unnerving and macabre, the followers of the Matron of Ravens believe that the honored dead would prefer to be venerated with cheer, not misery.\n\nWhat was once a night of cheery celebration of the dead in the Dwendalian Empire has recently become an occasion to burn effigies and decry the Kryn Dynasty for their unnatural relationship with death.",
        id: "824450",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 9
        },
        category: "religious-holidays"
      },
      {
        name: "Zan's Cup",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824451",
        note: null,
        date: {
          day: 21,
          year: null,
          month: 9
        },
        category: "secular-holidays"
      },
      {
        name: "Barren Eve",
        description: "Winter begins on the 2nd day of Duscar, the Barren Eve, which is a nighttime celebration and remembrance of those who fell in battle.",
        id: "824452",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 10
        },
        category: "secular-holidays"
      },
      {
        name: "Embertide",
        description: "Bahamut's holy day is called Embertide,\xA0and is celebrated on the fifth day of Duscar. This is a day\xA0of remembrance, solemnity, and respect for those who\xA0have fallen in the defense of others.",
        id: "824453",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 10
        },
        category: "religious-holidays"
      },
      {
        name: "Winter's Crest",
        description: "This day celebrates the freedom of Tal'Dorei from Errevon the Rimelord. It is the peak of the winter season, so devout followers of the Matron of Ravens (as the goddess of winter) consider it to be one of her holy days.\n\nHowever, in most of the land, people see Winter's Crest as a secular holiday, often celebrated with omnipresent music in public areas, lavish gift-giving to relatives and loved ones, and the cutting and decorating of trees placed indoors. The Sun Tree in Whitestone is often decorated with lights and other baubles for Winter's Crest.",
        id: "824454",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 10
        },
        category: "secular-holidays"
      }
    ],
    id: null,
    categories: [
      {
        name: "Religious Holidays",
        id: "religious-holidays",
        color: "#0D47A1"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#4A148C"
      }
    ]
  },
  {
    name: "Calendar of Harptos",
    description: "Calendar of Faer\xFBn of the Forgotten Realms.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: false,
      weekdays: [
        {
          type: "day",
          name: "I",
          id: "ID_9999882bb94a"
        },
        {
          type: "day",
          name: "II",
          id: "ID_8a0b4b79d888"
        },
        {
          type: "day",
          name: "III",
          id: "ID_da483aca8bf9"
        },
        {
          type: "day",
          name: "IV",
          id: "ID_a8fbea39cac8"
        },
        {
          type: "day",
          name: "V",
          id: "ID_9b19d9787b0b"
        },
        {
          type: "day",
          name: "VI",
          id: "ID_382a590a8a28"
        },
        {
          type: "day",
          name: "VII",
          id: "ID_fbca0ab80afb"
        },
        {
          type: "day",
          name: "VIII",
          id: "ID_ca093bca5ad9"
        },
        {
          type: "day",
          name: "IX",
          id: "ID_d95b39098bf8"
        },
        {
          type: "day",
          name: "X",
          id: "ID_389bfb5858db"
        }
      ],
      months: [
        {
          name: "Hammer (Deepwinter)",
          type: "month",
          length: 30,
          id: "ID_cbeb4b190b6a"
        },
        {
          name: "Midwinter",
          type: "intercalary",
          length: 1,
          id: "ID_89bad9089b7b"
        },
        {
          name: "Alturiak (The Claw of Winter)",
          type: "month",
          length: 30,
          id: "ID_6a08a8aacb7b"
        },
        {
          name: "Ches (The Claw of the Sunsets)",
          type: "month",
          length: 30,
          id: "ID_db2a7bf97afa"
        },
        {
          name: "Tarsakh (The Claw of Storms)",
          type: "month",
          length: 30,
          id: "ID_6b48982b0bda"
        },
        {
          name: "Greengrass",
          type: "intercalary",
          length: 1,
          id: "ID_08790af92809"
        },
        {
          name: "Mirtul (The Melting)",
          type: "month",
          length: 30,
          id: "ID_b91b39f95a28"
        },
        {
          name: "Kythorn (The Time of Flowers)",
          type: "month",
          length: 30,
          id: "ID_f8e9585a2bf8"
        },
        {
          name: "Flamerule (Summertide)",
          type: "month",
          length: 30,
          id: "ID_fa895bdb38e9"
        },
        {
          name: "Midsummer",
          type: "intercalary",
          length: 1,
          id: "ID_a9181b5a683a"
        },
        {
          name: "Eleasis (Highsun)",
          type: "month",
          length: 30,
          id: "ID_1b1b1b287b0a"
        },
        {
          name: "Eleint (The Fading)",
          type: "month",
          length: 30,
          id: "ID_1aca5918993a"
        },
        {
          name: "Highharvestide",
          type: "intercalary",
          length: 1,
          id: "ID_a94a183b4b88"
        },
        {
          name: "Marpenoth (Leaffall)",
          type: "month",
          length: 30,
          id: "ID_58d97969eb79"
        },
        {
          name: "Uktar (The Rotting)",
          type: "month",
          length: 30,
          id: "ID_4b090b787b18"
        },
        {
          name: "The Feast of the Moon",
          type: "intercalary",
          length: 1,
          id: "ID_1b0ae8dbdb4a"
        },
        {
          name: "Nightal (The Drawing Down)",
          type: "month",
          length: 30,
          id: "ID_abb82afab80a"
        }
      ],
      moons: [
        {
          name: "Sel\xFAne",
          cycle: 30.4375,
          offset: 13.9,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_48ea2a69a888"
        }
      ],
      leapDays: [
        {
          name: "Shieldsmeet",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 4
            }
          ],
          offset: 0,
          timespan: 9,
          intercalary: false,
          id: "ID_5b08faa88ada"
        }
      ],
      eras: []
    },
    current: {
      year: 1491,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "Winter Solstice",
        description: null,
        id: "824588",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Vernal Equinox",
        description: null,
        id: "824589",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Summer Solstice",
        description: null,
        id: "824590",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Autumnal Equinox",
        description: null,
        id: "824591",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Shieldmeet",
        description: `Shieldmeet was the equivalent of a leap year day in the Calendar of Harptos, occurring once every four years, adding a day after the festival of Midsummer and before Eleasis 1. Traditionally the day was used for fairs, bazaars, musical and theatrical performances, and tournaments of skill and magical ability. Nobles usually held court to hear the petitions of their people and to make or renew trade pacts, alliances, and agreements. Shieldmeet was known as Cinnaelos'Cor (also seen as Cinnaeloscor), "the Day of Corellon's Peace" in elvish and marked the end of an aeloulaev and the beginning of a new one in the elven Aryselmalyn calendar.`,
        id: "824592",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 9
        },
        category: "festivals"
      },
      {
        name: "Feast of the Moon",
        description: "The Feast of the Moon, or Moonfest, was an annual festival in the Calendar of Harptos, occurring between the final night of Uktar and the first day of Nightal. It was the last great festival of the calendar year.\n\nThe day traditionally marked the onset of winter. It was also a time to celebrate and honor the ancestors and the respected dead. On this day, folk blessed their ancestors' graves and performed the Ritual of Remembrance. People also gathered to tell stories of the deeds of their ancestors and of the gods until deep into the night, until they merged and became legend. This was a time to hear of past heroes, great treasures, and lost cities.\n\nIn Faer\xC3\u0192\xC2\xBBn, battles were typically fought between harvest-time and the coming of winter. This meant that most of the fighting usually occurred in the month of Uktar. The timing of the Feast of the Moon\xC3\xA2\xE2\u201A\xAC\xE2\u20ACafter recently slain soldiers had joined the ranks of the dead\xC3\xA2\xE2\u201A\xAC\xE2\u20ACwas thus practical, if sadly ironic.\n\nThe Heralds of Faer\xC3\u0192\xC2\xBBn had a number of special duties on the Feast of the Moon. Prime among these was to perform the Bloodsong ceremony, at which a Herald publicly recited the genealogies of each noble family in the area. In this way, the Heralds reaffirmed a noble family's traditional authority and status, as well as the respect accorded to them.\n\nPriests of a number of deities of various pantheons held rites, ceremonies, and festivals on the Feast of the Moon. Many, though not all, focused on remembering the dead in one way or another.",
        id: "824593",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 15
        },
        category: "festivals"
      },
      {
        name: "Highharvesttide",
        description: 'Highharvestide was an annual festival in the Calendar of Harptos, taking place between 30 Eleint and 1 Marpenoth. It was traditionally a feast to celebrate the harvest and the abundance of food, but also the time when those wishing to travel left on their journeys before winter set in.\n\nPreparations for the feast started as early as a tenday before, while preparing, cooking, and preserving the harvest for the cold winter months. Traditions varied from community to community, but examples of festive activity included food-related contests; races and challenges of skill and strength; receiving homemade sweets from the local clergy; and priests blessing larders, wine cellars, grain bins, and food preserves.\n\nThis day was often an important anniversary to various governments. Often, taxes and tithes came due, rulers held "open courts" to hear the concerns of their citizens, oaths were publicly renewed, troops received marching orders to new duty stations, and guilds met to confer on prices and rate changes for goods and services.\n\nAccording to tradition, dwarves only drank water and elves drank only dew on this day. However, these traditions began to fade in the 14th and 15th century DR.\n\nIt was said that children born on this day were favored by Tymora to have lifelong good luck but be smitten with wanderlust. Another legend was that human females born on this day had control over their reproductive system (i.e., got pregnant only when they wanted to) by force of will alone, and that they could instantly sense when they had been poisoned, either by ingestion or being bitten by a venomous creature for example.',
        id: "824594",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 12
        },
        category: "festivals"
      },
      {
        name: "Greengrass",
        description: "Greengrass was a festival to welcome in the first day of spring in the Calendar of Harptos. It occured annually on a special day between Tarsakh 30 and Mirtul 1. Traditionally, the wealthier people brought out flowers to give to the less wealthy, who either wore them or spread them on the ground to encourage the deities to usher in the summer.",
        id: "824595",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 5
        },
        category: "festivals"
      },
      {
        name: "Midwinter",
        description: "Midwinter (also known as Deadwinter Day) was a festival to mark the midpoint of winter in the Calendar of Harptos. It occured on a special day between Hammer 30 and Alturiak 1. Amongst nobles and monarchs it was known as Midwinter and was traditionally used to make or renew alliances, although the common people called it Deadwinter Day, a reference to the cold and hard times that remained before the spring.\n\nOn Midwinter Day the Red Fellowship of the Deity known as the Red Knight observes the Retreat. This solemn ceremony consists of an assembly wherein the clergy discuss the previous year's campaigns. Strategies are discussed, battles analyzed, and the accumulated lore integrated into the church's teachings.\n\nThe holiest day of the year for the Church of Shevarash is Midwinter Night, during which the Dark Court Slaughter is remembered. Inductions into the ranks of the clergy occur at this time. Each new cleric screams vows of vengeance into the night air and swears neither to laugh nor smile until the Spider Queen and her followers are no more.",
        id: "824596",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 1
        },
        category: "festivals"
      },
      {
        name: "Midsummer",
        description: "Midsummer was a festival that celebrated love and music through feast. It occurred between Flamerule 30 and Eleasis 1 on the Calendar of Harptos. It was a time when love advanced, and it was said the deities themselves took a hand to ensure good weather. If bad weather was experienced on this night it was considered an extremely bad omen. Shieldmeet occurred the day after Midsummer on leap years.",
        id: "824597",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 9
        },
        category: "festivals"
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Festivals",
        id: "festivals",
        color: "#9b2c2c"
      }
    ]
  }
];

// node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function run(fn2) {
  return fn2();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn2) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn2);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn2) {
  return definition[1] && fn2 ? assign($$scope.ctx.slice(), definition[1](fn2(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn2) {
  if (definition[2] && fn2) {
    const lets = definition[2](fn2(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function to_number(value) {
  return value === "" ? null : +value;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  select.selectedIndex = -1;
}
function select_value(select) {
  const selected_option = select.querySelector(":checked") || select.options[0];
  return selected_option && selected_option.__value;
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, bubbles = false) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, false, detail);
  return e;
}
var managed_styles = new Map();
var active = 0;
function hash(str) {
  let hash4 = 5381;
  let i = str.length;
  while (i--)
    hash4 = (hash4 << 5) - hash4 ^ str.charCodeAt(i);
  return hash4 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn2, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn2(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn2(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1);
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { stylesheet } = info;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      info.rules = {};
    });
    managed_styles.clear();
  });
}
function create_animation(node, from, fn2, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end: end2 = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn2(node, { from, to }, params);
  let running = true;
  let started = false;
  let name;
  function start2() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end2) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start2();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn2) {
  get_current_component().$$.on_mount.push(fn2);
}
function onDestroy(fn2) {
  get_current_component().$$.on_destroy.push(fn2);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn2) => {
        fn2.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn2) => fn2.call(this, event));
  }
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn2) {
  render_callbacks.push(fn2);
}
var seen_callbacks = new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn2, params, intro) {
  let config = fn2(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block19, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block19(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = new Set();
  const did_move = new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
var boolean_attributes = new Set([
  "allowfullscreen",
  "allowpaymentrequest",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "defer",
  "disabled",
  "formnovalidate",
  "hidden",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "selected"
]);
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance45, create_fragment45, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance45 ? instance45(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment45 ? create_fragment45($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/settings/creator/Creator.svelte
var import_fast_copy = __toModule(require_fast_copy());
var import_obsidian13 = __toModule(require("obsidian"));

// node_modules/svelte/easing/index.mjs
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}

// node_modules/svelte/transition/index.mjs
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
  const style = getComputedStyle(node);
  const target_opacity = +style.opacity;
  const transform = style.transform === "none" ? "" : style.transform;
  const od = target_opacity * (1 - opacity);
  return {
    delay,
    duration,
    easing,
    css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - od * u}`
  };
}

// src/settings/creator/Utilities/Details.svelte
var import_obsidian = __toModule(require("obsidian"));
function add_css(target) {
  append_styles(target, "svelte-1x6uecm", 'summary.svelte-1x6uecm.svelte-1x6uecm{outline:none;display:block !important;list-style:none !important;list-style-type:none !important;min-height:1rem;border-top-left-radius:0.1rem;border-top-right-radius:0.1rem;cursor:pointer;position:relative}summary.svelte-1x6uecm.svelte-1x6uecm::-webkit-details-marker,summary.svelte-1x6uecm.svelte-1x6uecm::marker{display:none !important}.collapser.svelte-1x6uecm.svelte-1x6uecm{position:absolute;top:50%;right:8px;transform:translateY(-50%);content:""}.handle.svelte-1x6uecm.svelte-1x6uecm{transform:rotate(0deg);transition:transform 0.25s;background-color:currentColor;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:contain;mask-size:contain;-webkit-mask-image:var(--admonition-details-icon);mask-image:var(--admonition-details-icon);width:20px;height:20px}details[open].svelte-1x6uecm .handle.svelte-1x6uecm{transform:rotate(90deg)}');
}
function create_fragment(ctx) {
  let details_1;
  let summary_1;
  let div0;
  let summary_action;
  let t0;
  let div2;
  let t1;
  let details_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[5].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[4], null);
  return {
    c() {
      details_1 = element("details");
      summary_1 = element("summary");
      div0 = element("div");
      t0 = space();
      div2 = element("div");
      div2.innerHTML = `<div class="handle svelte-1x6uecm"></div>`;
      t1 = space();
      if (default_slot)
        default_slot.c();
      attr(div2, "class", "collapser svelte-1x6uecm");
      attr(summary_1, "class", "svelte-1x6uecm");
      attr(details_1, "class", "fantasy-calendar-nested-settings svelte-1x6uecm");
    },
    m(target, anchor) {
      insert(target, details_1, anchor);
      append(details_1, summary_1);
      append(summary_1, div0);
      append(summary_1, t0);
      append(summary_1, div2);
      append(details_1, t1);
      if (default_slot) {
        default_slot.m(details_1, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(summary_action = ctx[1].call(null, div0)),
          action_destroyer(details_action = ctx[0].call(null, details_1))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 16)) {
          update_slot_base(default_slot, default_slot_template, ctx2, ctx2[4], !current ? get_all_dirty_from_scope(ctx2[4]) : get_slot_changes(default_slot_template, ctx2[4], dirty, null), null);
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(details_1);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { open = true } = $$props;
  let { name } = $$props;
  const details = (node) => {
    if (open)
      node.setAttr("open", "open");
  };
  const summary = (node) => {
    new import_obsidian.Setting(node).setHeading().setName(name);
  };
  $$self.$$set = ($$props2) => {
    if ("open" in $$props2)
      $$invalidate(2, open = $$props2.open);
    if ("name" in $$props2)
      $$invalidate(3, name = $$props2.name);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [details, summary, open, name, $$scope, slots];
}
var Details = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { open: 2, name: 3 }, add_css);
  }
};
var Details_default = Details;

// src/settings/creator/Utilities/DateFields.svelte
var import_obsidian2 = __toModule(require("obsidian"));
function add_css2(target) {
  append_styles(target, "svelte-qonio8", ".fantasy-calendar-date-field-container.svelte-qonio8{display:flex;gap:1rem;border:0}.fantasy-calendar-date-field.svelte-qonio8{display:flex;flex-flow:column nowrap;flex:1 1 0}");
}
function create_fragment2(ctx) {
  let div3;
  let div0;
  let day_action;
  let t0;
  let div1;
  let month_action;
  let t1;
  let div2;
  let year_action;
  let mounted;
  let dispose;
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      attr(div0, "class", "fantasy-calendar-date-field svelte-qonio8");
      attr(div1, "class", "fantasy-calendar-date-field svelte-qonio8");
      attr(div2, "class", "fantasy-calendar-date-field svelte-qonio8");
      attr(div3, "class", "fantasy-calendar-date-field-container setting-item svelte-qonio8");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      if (!mounted) {
        dispose = [
          action_destroyer(day_action = ctx[0].call(null, div0)),
          action_destroyer(month_action = ctx[1].call(null, div1)),
          action_destroyer(year_action = ctx[2].call(null, div2))
        ];
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let current;
  let { calendar } = $$props;
  const day = (node) => {
    const label = node.createEl("label", { text: "Day" });
    new import_obsidian2.TextComponent(node).setPlaceholder("Day");
  };
  const month = (node) => {
    const label = node.createEl("label", { text: "Month" });
    new import_obsidian2.DropdownComponent(node);
  };
  const year = (node) => {
    const label = node.createEl("label", { text: "Year" });
    new import_obsidian2.TextComponent(node).setPlaceholder("Year");
  };
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(3, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 8) {
      $:
        current = calendar.current;
    }
  };
  return [day, month, year, calendar];
}
var DateFields = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, { calendar: 3 }, add_css2);
  }
};
var DateFields_default = DateFields;

// src/settings/creator/Settings/TextAreaComponent.svelte
function add_css3(target) {
  append_styles(target, "svelte-1ezzfh1", ".text-area-component.svelte-1ezzfh1{display:flex;flex-flow:column nowrap;align-items:flex-start;width:100%}textarea.svelte-1ezzfh1{width:100%}");
}
function create_fragment3(ctx) {
  let div;
  let label;
  let t0;
  let t1;
  let textarea;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      label = element("label");
      t0 = text(ctx[1]);
      t1 = space();
      textarea = element("textarea");
      attr(textarea, "spellcheck", "false");
      attr(textarea, "placeholder", ctx[2]);
      attr(textarea, "class", "svelte-1ezzfh1");
      attr(div, "class", "text-area-component setting-item svelte-1ezzfh1");
      toggle_class(div, "cls", ctx[3]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, label);
      append(label, t0);
      append(div, t1);
      append(div, textarea);
      set_input_value(textarea, ctx[0]);
      if (!mounted) {
        dispose = [
          listen(textarea, "input", ctx[5]),
          listen(textarea, "blur", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2)
        set_data(t0, ctx2[1]);
      if (dirty & 4) {
        attr(textarea, "placeholder", ctx2[2]);
      }
      if (dirty & 1) {
        set_input_value(textarea, ctx2[0]);
      }
      if (dirty & 8) {
        toggle_class(div, "cls", ctx2[3]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { value } = $$props;
  let { name } = $$props;
  let { placeholder = name } = $$props;
  let { cls = "" } = $$props;
  function textarea_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  const blur_handler = () => dispatch2("blur", value);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
    if ("placeholder" in $$props2)
      $$invalidate(2, placeholder = $$props2.placeholder);
    if ("cls" in $$props2)
      $$invalidate(3, cls = $$props2.cls);
  };
  return [value, name, placeholder, cls, dispatch2, textarea_input_handler, blur_handler];
}
var TextAreaComponent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, {
      value: 0,
      name: 1,
      placeholder: 2,
      cls: 3
    }, add_css3);
  }
};
var TextAreaComponent_default = TextAreaComponent;

// src/settings/creator/Settings/TextComponent.svelte
function create_fragment4(ctx) {
  let div4;
  let div2;
  let div0;
  let t0;
  let t1;
  let div1;
  let t2;
  let t3;
  let div3;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      div4 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = text(ctx[1]);
      t1 = space();
      div1 = element("div");
      t2 = text(ctx[2]);
      t3 = space();
      div3 = element("div");
      input = element("input");
      attr(div0, "class", "setting-item-name");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "setting-item-info");
      attr(input, "type", "text");
      attr(input, "spellcheck", "false");
      attr(input, "placeholder", ctx[3]);
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div2);
      append(div2, div0);
      append(div0, t0);
      append(div2, t1);
      append(div2, div1);
      append(div1, t2);
      append(div4, t3);
      append(div4, div3);
      append(div3, input);
      set_input_value(input, ctx[0]);
      if (!mounted) {
        dispose = [
          listen(input, "input", ctx[5]),
          listen(input, "blur", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2)
        set_data(t0, ctx2[1]);
      if (dirty & 4)
        set_data(t2, ctx2[2]);
      if (dirty & 8) {
        attr(input, "placeholder", ctx2[3]);
      }
      if (dirty & 1 && input.value !== ctx2[0]) {
        set_input_value(input, ctx2[0]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div4);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { value } = $$props;
  let { name } = $$props;
  let { desc = "" } = $$props;
  let { placeholder = name } = $$props;
  function input_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  const blur_handler = () => {
    dispatch2("blur", value);
  };
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
    if ("desc" in $$props2)
      $$invalidate(2, desc = $$props2.desc);
    if ("placeholder" in $$props2)
      $$invalidate(3, placeholder = $$props2.placeholder);
  };
  return [value, name, desc, placeholder, dispatch2, input_input_handler, blur_handler];
}
var TextComponent2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, {
      value: 0,
      name: 1,
      desc: 2,
      placeholder: 3
    });
  }
};
var TextComponent_default = TextComponent2;

// src/settings/creator/Settings/ToggleComponent.svelte
function create_if_block(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (typeof ctx2[1] == "string")
      return create_if_block_1;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_else_block(ctx) {
  let div;
  let descEl_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "setting-item-description");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(descEl_action = ctx[3].call(null, div));
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1(ctx) {
  let div;
  let t;
  return {
    c() {
      div = element("div");
      t = text(ctx[1]);
      attr(div, "class", "setting-item-description");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment5(ctx) {
  let div4;
  let div1;
  let div0;
  let t0;
  let t1;
  let t2;
  let div3;
  let div2;
  let mounted;
  let dispose;
  let if_block = ctx[1] && create_if_block(ctx);
  return {
    c() {
      div4 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = text(ctx[0]);
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      div3 = element("div");
      div2 = element("div");
      attr(div0, "class", "setting-item-name");
      attr(div1, "class", "setting-item-info");
      attr(div2, "class", "checkbox-container");
      toggle_class(div2, "is-enabled", ctx[2]);
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item mod-toggle");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div1);
      append(div1, div0);
      append(div0, t0);
      append(div1, t1);
      if (if_block)
        if_block.m(div1, null);
      append(div4, t2);
      append(div4, div3);
      append(div3, div2);
      if (!mounted) {
        dispose = listen(div2, "click", ctx[4]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t0, ctx2[0]);
      if (ctx2[1]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(div1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & 4) {
        toggle_class(div2, "is-enabled", ctx2[2]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let { name } = $$props;
  let { desc } = $$props;
  let { value } = $$props;
  const descEl = (node) => {
    node.append(desc);
  };
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(0, name = $$props2.name);
    if ("desc" in $$props2)
      $$invalidate(1, desc = $$props2.desc);
    if ("value" in $$props2)
      $$invalidate(2, value = $$props2.value);
  };
  return [name, desc, value, descEl, click_handler];
}
var ToggleComponent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, { name: 0, desc: 1, value: 2 });
  }
};
var ToggleComponent_default = ToggleComponent;

// src/settings/creator/Containers/Info.svelte
function add_css4(target) {
  append_styles(target, "svelte-1uda69j", ".fantasy-calendar-info.svelte-1uda69j .setting-item{padding-top:18px}.fantasy-calendar-info.svelte-1uda69j .fantasy-calendar-description{display:flex;flex-flow:column;align-items:flex-start}.fantasy-calendar-info.svelte-1uda69j .fantasy-calendar-description textarea{width:100%}");
}
function create_fragment6(ctx) {
  let div;
  let textcomponent;
  let t0;
  let textareacomponent;
  let t1;
  let togglecomponent0;
  let t2;
  let togglecomponent1;
  let current;
  textcomponent = new TextComponent_default({
    props: {
      name: "Calendar Name",
      value: ctx[0].name
    }
  });
  textcomponent.$on("blur", ctx[3]);
  textareacomponent = new TextAreaComponent_default({
    props: {
      name: "Calendar Description",
      value: ctx[0].description
    }
  });
  textareacomponent.$on("blur", ctx[4]);
  togglecomponent0 = new ToggleComponent_default({
    props: {
      name: "Display Day Number",
      desc: "Display day of year in Day View",
      value: ctx[2]
    }
  });
  togglecomponent0.$on("click", ctx[5]);
  togglecomponent1 = new ToggleComponent_default({
    props: {
      name: "Auto Increment Day",
      desc: "Automatically increment the current day every real-world day.",
      value: ctx[1]
    }
  });
  togglecomponent1.$on("click", ctx[6]);
  return {
    c() {
      div = element("div");
      create_component(textcomponent.$$.fragment);
      t0 = space();
      create_component(textareacomponent.$$.fragment);
      t1 = space();
      create_component(togglecomponent0.$$.fragment);
      t2 = space();
      create_component(togglecomponent1.$$.fragment);
      attr(div, "class", "fantasy-calendar-info svelte-1uda69j");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(textcomponent, div, null);
      append(div, t0);
      mount_component(textareacomponent, div, null);
      append(div, t1);
      mount_component(togglecomponent0, div, null);
      append(div, t2);
      mount_component(togglecomponent1, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const textcomponent_changes = {};
      if (dirty & 1)
        textcomponent_changes.value = ctx2[0].name;
      textcomponent.$set(textcomponent_changes);
      const textareacomponent_changes = {};
      if (dirty & 1)
        textareacomponent_changes.value = ctx2[0].description;
      textareacomponent.$set(textareacomponent_changes);
      const togglecomponent0_changes = {};
      if (dirty & 4)
        togglecomponent0_changes.value = ctx2[2];
      togglecomponent0.$set(togglecomponent0_changes);
      const togglecomponent1_changes = {};
      if (dirty & 2)
        togglecomponent1_changes.value = ctx2[1];
      togglecomponent1.$set(togglecomponent1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcomponent.$$.fragment, local);
      transition_in(textareacomponent.$$.fragment, local);
      transition_in(togglecomponent0.$$.fragment, local);
      transition_in(togglecomponent1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcomponent.$$.fragment, local);
      transition_out(textareacomponent.$$.fragment, local);
      transition_out(togglecomponent0.$$.fragment, local);
      transition_out(togglecomponent1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(textcomponent);
      destroy_component(textareacomponent);
      destroy_component(togglecomponent0);
      destroy_component(togglecomponent1);
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let displayDayNumber;
  let incrementDay;
  let { calendar } = $$props;
  const blur_handler = (evt) => $$invalidate(0, calendar.name = evt.detail, calendar);
  const blur_handler_1 = (evt) => $$invalidate(0, calendar.description = evt.detail, calendar);
  const click_handler = () => {
    $$invalidate(0, calendar.static.displayDayNumber = !calendar.static.displayDayNumber, calendar);
  };
  const click_handler_1 = () => {
    $$invalidate(0, calendar.static.incrementDay = !calendar.static.incrementDay, calendar);
  };
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, displayDayNumber = calendar.static.displayDayNumber);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, incrementDay = calendar.static.incrementDay);
    }
  };
  return [
    calendar,
    incrementDay,
    displayDayNumber,
    blur_handler,
    blur_handler_1,
    click_handler,
    click_handler_1
  ];
}
var Info = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, { calendar: 0 }, add_css4);
  }
};
var Info_default = Info;

// node_modules/svelte/animate/index.mjs
function flip(node, { from, to }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to.width - (to.left + ox);
  const dy = from.top + from.height * oy / to.height - (to.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t, u) => {
      const x = u * dx;
      const y = u * dy;
      const sx = t + u * from.width / to.width;
      const sy = t + u * from.height / to.height;
      return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
    }
  };
}

// node_modules/svelte-dnd-action/dist/index.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = o[Symbol.iterator]();
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var FINALIZE_EVENT_NAME = "finalize";
var CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
var DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
      theOtherDz
    }
  }));
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
    }
  }));
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2
    }
  }));
}
var TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
var SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
var ITEM_ID_KEY = "id";
var activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
var isOnServer = typeof window === "undefined";
var printDebug = function printDebug2() {
};
function getBoundingRectNoTransforms(el) {
  var ta;
  var rect = el.getBoundingClientRect();
  var style = getComputedStyle(el);
  var tx = style.transform;
  if (tx) {
    var sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    var to = style.transformOrigin;
    var x = rect.x - dx - (1 - sx) * parseFloat(to);
    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
    var w = sx ? rect.width / sx : el.offsetWidth;
    var h = sy ? rect.height / sy : el.offsetHeight;
    return {
      x,
      y,
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  var rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  var rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  var rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
var dzToShadowIndexToRect;
function resetIndexesCache() {
  printDebug(function() {
    return "resetting indexes cache";
  });
  dzToShadowIndexToRect = new Map();
}
resetIndexesCache();
function cacheShadowRect(dz) {
  var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
    return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  });
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  var children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return {
      index: 0,
      isProximityBased: true
    };
  }
  var shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (var i = 0; i < children2.length; i++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
      var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return {
            index: shadowElIndex,
            isProximityBased: false
          };
        }
      }
      return {
        index: i,
        isProximityBased: false
      };
    }
  }
  var minDistanceSoFar = Number.MAX_VALUE;
  var indexOfMin = void 0;
  for (var _i = 0; _i < children2.length; _i++) {
    var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = _i;
    }
  }
  return {
    index: indexOfMin,
    isProximityBased: true
  };
}
var SCROLL_ZONE_PX = 25;
function makeScroller() {
  var scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = {
      directionObj: void 0,
      stepPx: 0
    };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(function() {
        return scrollContainer(containerEl);
      });
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    var isAlreadyScrolling = !!scrollingInfo.directionObj;
    var scrollingVertically = false, scrollingHorizontally = false;
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: 1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: -1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: 1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: -1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node) {
  var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (var keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }
  return true;
}
var INTERVAL_MS = 200;
var TOLERANCE_PX = 10;
var _makeScroller = makeScroller();
var scrollIfNeeded = _makeScroller.scrollIfNeeded;
var resetScrolling = _makeScroller.resetScrolling;
var next;
function observe(draggedEl2, dropZones) {
  var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
  var lastDropZoneFound;
  var lastIndexFound;
  var lastIsDraggedInADropZone = false;
  var lastCentrePositionOfDragged;
  var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
    return getDepth(dz2) - getDepth(dz1);
  });
  function andNow() {
    var currentCenterOfDragged = findCenterOfElement(draggedEl2);
    var scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      printDebug(function() {
        return "off document";
      });
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    var isDraggedInADropZone = false;
    var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        var indexObj = findWouldBeIndex(draggedEl2, dz);
        if (indexObj === null) {
          continue;
        }
        var index = indexObj.index;
        isDraggedInADropZone = true;
        if (dz !== lastDropZoneFound) {
          lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
          dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
          lastDropZoneFound = dz;
        } else if (index !== lastIndexFound) {
          dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
          lastIndexFound = index;
        }
        break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  printDebug(function() {
    return "unobserving";
  });
  clearTimeout(next);
  resetScrolling();
  resetIndexesCache();
}
var INTERVAL_MS$1 = 300;
var mousePosition;
function updateMousePosition(e) {
  var c = e.touches ? e.touches[0] : e;
  mousePosition = {
    x: c.clientX,
    y: c.clientY
  };
}
var _makeScroller$1 = makeScroller();
var scrollIfNeeded$1 = _makeScroller$1.scrollIfNeeded;
var resetScrolling$1 = _makeScroller$1.resetScrolling;
var next$1;
function loop2() {
  if (mousePosition) {
    scrollIfNeeded$1(mousePosition, document.documentElement);
  }
  next$1 = window.setTimeout(loop2, INTERVAL_MS$1);
}
function armWindowScroller() {
  printDebug(function() {
    return "arming window scroller";
  });
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop2();
}
function disarmWindowScroller() {
  printDebug(function() {
    return "disarming window scroller";
  });
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next$1);
  resetScrolling$1();
}
var TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  var rect = originalElement.getBoundingClientRect();
  var draggedEl2 = originalElement.cloneNode(true);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  var elTopPx = rect.top;
  var elLeftPx = rect.left;
  draggedEl2.style.top = "".concat(elTopPx, "px");
  draggedEl2.style.left = "".concat(elLeftPx, "px");
  if (positionCenterOnXY) {
    var center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(function() {
      draggedEl2.style.top = "".concat(elTopPx, "px");
      draggedEl2.style.left = "".concat(elLeftPx, "px");
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = "".concat(rect.height, "px");
  draggedEl2.style.width = "".concat(rect.width, "px");
  draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
  window.setTimeout(function() {
    return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
  }, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY, transformDraggedElement) {
  var newRect = copyFromEl.getBoundingClientRect();
  var draggedElRect = draggedEl2.getBoundingClientRect();
  var widthChange = newRect.width - draggedElRect.width;
  var heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    var relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    draggedEl2.style.height = "".concat(newRect.height, "px");
    draggedEl2.style.width = "".concat(newRect.width, "px");
    draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
    draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
  }
  copyStylesFromTo(copyFromEl, draggedEl2);
  transformDraggedElement();
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  var computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(function(s) {
    return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type";
  }).forEach(function(s) {
    return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
  });
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = function() {
    return false;
  };
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideOriginalDragTarget(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.add(c);
    });
  });
}
function styleInactiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = "";
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.contains(c) && dz.classList.remove(c);
    });
  });
}
function preventShrinking(el) {
  var originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  var originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
var DEFAULT_DROP_ZONE_TYPE = "--any--";
var MIN_OBSERVATION_INTERVAL_MS = 100;
var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
var DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var originalDragTarget;
var draggedEl;
var draggedElData;
var draggedElType;
var originDropZone;
var originIndex;
var shadowElData;
var shadowElDropZone;
var dragStartMousePosition;
var currentMousePosition;
var isWorkingOnPreviousDrag = false;
var finalizingPreviousDrag = false;
var unlockOriginDzMinDimensions;
var isDraggedOutsideOfAnyDz = false;
var typeToDropZones = new Map();
var dzToConfig = new Map();
var elToMouseDownListener = new WeakMap();
function registerDropZone(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  typeToDropZones.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones["delete"](type);
  }
}
function watchDraggedElement() {
  printDebug(function() {
    return "watching dragged element";
  });
  armWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator = _createForOfIteratorHelper(dropZones), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var dz = _step.value;
      dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  var observationIntervalMs = Math.max.apply(Math, [MIN_OBSERVATION_INTERVAL_MS].concat(_toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
    return dzToConfig.get(dz2).dropAnimationDurationMs;
  }))));
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  printDebug(function() {
    return "unwatching dragged element";
  });
  disarmWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var dz = _step2.value;
      dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  unobserve();
}
function findShadowPlaceHolderIdx(items) {
  return items.findIndex(function(item) {
    return item[ITEM_ID_KEY] === SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function findShadowElementIdx(items) {
  return items.findIndex(function(item) {
    return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[ITEM_ID_KEY] !== SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function handleDraggedEntered(e) {
  printDebug(function() {
    return ["dragged entered", e.currentTarget, e.detail];
  });
  var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "ignoring dragged entered because drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter(function(item) {
    return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
  });
  printDebug(function() {
    return "dragged entered items ".concat(toString(items));
  });
  if (originDropZone !== e.currentTarget) {
    var originZoneItems = dzToConfig.get(originDropZone).items;
    var newOriginZoneItems = originZoneItems.filter(function(item) {
      return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  } else {
    var shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
    if (shadowPlaceHolderIdx !== -1) {
      printDebug(function() {
        return "removing placeholder item from origin dz";
      });
      items.splice(shadowPlaceHolderIdx, 1);
    }
  }
  var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
  var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
  shadowElDropZone = e.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_ENTERED,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedLeft(e) {
  if (!isWorkingOnPreviousDrag)
    return;
  printDebug(function() {
    return ["dragged left", e.currentTarget, e.detail];
  });
  var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  var shadowElIdx = findShadowElementIdx(items);
  var shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  var _e$detail = e.detail, type = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
    printDebug(function() {
      return "dragged left all, putting shadow element back in the origin dz";
    });
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    var originZoneItems = dzToConfig.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e) {
  printDebug(function() {
    return ["dragged is over index", e.currentTarget, e.detail];
  });
  var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  var index = e.detail.indexObj.index;
  var shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_OVER_INDEX,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleMouseMove(e) {
  e.preventDefault();
  var c = e.touches ? e.touches[0] : e;
  currentMousePosition = {
    x: c.clientX,
    y: c.clientY
  };
  draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
}
function handleDrop() {
  printDebug(function() {
    return "dropped";
  });
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop);
  window.removeEventListener("touchend", handleDrop);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    printDebug(function() {
      return "element was dropped right after it left origin but before entering somewhere else";
    });
    shadowElDropZone = originDropZone;
  }
  printDebug(function() {
    return ["dropped in dz", shadowElDropZone];
  });
  var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type = _dzToConfig$get4.type;
  styleInactiveDropZones(typeToDropZones.get(type), function(dz) {
    return dzToConfig.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig.get(dz).dropTargetClasses;
  });
  var shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map(function(item) {
    return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
  });
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback) {
  var shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  var newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
  var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
  window.setTimeout(callback, dropAnimationDurationMs);
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    transformDraggedElement: function transformDraggedElement() {
    },
    centreDraggedOnCursor: false
  };
  printDebug(function() {
    return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
      node
    }];
  });
  var elToIdx = new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleFalseAlarm, {
      passive: false
    });
    window.addEventListener("touchend", handleFalseAlarm, {
      passive: false
    });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e) {
    if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
      printDebug(function() {
        return "won't initiate drag on a nested input element";
      });
      return;
    }
    if (e.button) {
      printDebug(function() {
        return "ignoring none left click button: ".concat(e.button);
      });
      return;
    }
    if (isWorkingOnPreviousDrag) {
      printDebug(function() {
        return "cannot start a new drag before finalizing previous one";
      });
      return;
    }
    e.stopPropagation();
    var c = e.touches ? e.touches[0] : e;
    dragStartMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    currentMousePosition = _objectSpread2({}, dragStartMousePosition);
    originalDragTarget = e.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    printDebug(function() {
      return ["drag start config: ".concat(toString(config)), originalDragTarget];
    });
    isWorkingOnPreviousDrag = true;
    var currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    var rootNode = originDropZone.getRootNode();
    var originDropZoneRoot = rootNode.body || rootNode;
    var items = config.items, type = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
    draggedElData = _objectSpread2({}, items[currentIdx]);
    draggedElType = type;
    shadowElData = _objectSpread2(_objectSpread2({}, draggedElData), {}, _defineProperty({}, SHADOW_ITEM_MARKER_PROPERTY_NAME, true));
    var placeHolderElData = _objectSpread2(_objectSpread2({}, shadowElData), {}, _defineProperty({}, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID));
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideOriginalDragTarget(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
      return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
    }), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    items.splice(currentIdx, 1, placeHolderElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    window.addEventListener("mousemove", handleMouseMove, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMove, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleDrop, {
      passive: false
    });
    window.addEventListener("touchend", handleDrop, {
      passive: false
    });
  }
  function configure(_ref) {
    var _ref$items = _ref.items, items = _ref$items === void 0 ? void 0 : _ref$items, _ref$flipDurationMs = _ref.flipDurationMs, dropAnimationDurationMs = _ref$flipDurationMs === void 0 ? 0 : _ref$flipDurationMs, _ref$type = _ref.type, newType = _ref$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref$type, _ref$dragDisabled = _ref.dragDisabled, dragDisabled = _ref$dragDisabled === void 0 ? false : _ref$dragDisabled, _ref$morphDisabled = _ref.morphDisabled, morphDisabled = _ref$morphDisabled === void 0 ? false : _ref$morphDisabled, _ref$dropFromOthersDi = _ref.dropFromOthersDisabled, dropFromOthersDisabled = _ref$dropFromOthersDi === void 0 ? false : _ref$dropFromOthersDi, _ref$dropTargetStyle = _ref.dropTargetStyle, dropTargetStyle = _ref$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref$dropTargetStyle, _ref$dropTargetClasse = _ref.dropTargetClasses, dropTargetClasses = _ref$dropTargetClasse === void 0 ? [] : _ref$dropTargetClasse, _ref$transformDragged = _ref.transformDraggedElement, transformDraggedElement = _ref$transformDragged === void 0 ? function() {
    } : _ref$transformDragged, _ref$centreDraggedOnC = _ref.centreDraggedOnCursor, centreDraggedOnCursor = _ref$centreDraggedOnC === void 0 ? false : _ref$centreDraggedOnC;
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones([node], function() {
        return config.dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
      styleActiveDropZones([node], function() {
        return dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
    function getConfigProp(dz, propName) {
      return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
    }
    if (isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      } else {
        styleActiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig.set(node, config);
    var shadowElIdx = findShadowElementIdx(config.items);
    var _loop = function _loop2(idx2) {
      var draggableEl = node.children[idx2];
      styleDraggable(draggableEl, dragDisabled);
      if (idx2 === shadowElIdx) {
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y, function() {
            return config.transformDraggedElement(draggedEl, draggedElData, idx2);
          });
        }
        decorateShadowEl(draggableEl);
        return "continue";
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx2);
    };
    for (var idx = 0; idx < node.children.length; idx++) {
      var _ret = _loop(idx);
      if (_ret === "continue")
        continue;
    }
  }
  configure(options);
  return {
    update: function update2(newOptions) {
      printDebug(function() {
        return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "pointer dndzone will destroy";
      });
      unregisterDropZone(node, config.type);
      dzToConfig["delete"](node);
    }
  };
}
var _ID_TO_INSTRUCTION;
var INSTRUCTION_IDs = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
var ALERT_DIV_ID = "dnd-action-aria-alert";
var alertsDiv;
function initAriaOnBrowser() {
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), id = _ref2[0], txt = _ref2[1];
    return document.body.prepend(instructionToHiddenDiv(id, txt));
  });
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return _objectSpread2({}, INSTRUCTION_IDs);
}
function instructionToHiddenDiv(id, txt) {
  var div = document.createElement("div");
  div.id = id;
  div.innerHTML = "<p>".concat(txt, "</p>");
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  alertsDiv.innerHTML = "";
  var alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
var DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var isDragging = false;
var draggedItemType;
var focusedDz;
var focusedDzLabel = "";
var focusedItem;
var focusedItemId;
var focusedItemLabel = "";
var allDragTargets = new WeakSet();
var elToKeyDownListeners = new WeakMap();
var elToFocusListeners = new WeakMap();
var dzToHandles = new Map();
var dzToConfig$1 = new Map();
var typeToDropZones$1 = new Map();
var INSTRUCTION_IDs$1 = initAria();
function registerDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "adding global keydown and click handlers";
    });
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "unregistering drop-zone";
  });
  if (focusedDz === dropZoneEl) {
    handleDrop$1();
  }
  typeToDropZones$1.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1["delete"](type);
  }
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "removing global keydown and click handlers";
    });
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
  }
}
function globalKeyDownHandler(e) {
  if (!isDragging)
    return;
  switch (e.key) {
    case "Escape": {
      handleDrop$1();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    printDebug(function() {
      return "clicked outside of any draggable";
    });
    handleDrop$1();
  }
}
function handleZoneFocus(e) {
  printDebug(function() {
    return "zone focus";
  });
  if (!isDragging)
    return;
  var newlyFocusedDz = e.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
  var originItem = originItems.find(function(item) {
    return item[ITEM_ID_KEY] === focusedItemId;
  });
  var originIdx = originItems.indexOf(originItem);
  var itemToMove = originItems.splice(originIdx, 1)[0];
  var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
    }
  }
  var dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, {
    trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
    trigger: TRIGGERS.DROPPED_INTO_ZONE,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(function(_ref, dz) {
    var update2 = _ref.update;
    return update2(dzToConfig$1.get(dz));
  });
}
function handleDrop$1() {
  var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  printDebug(function() {
    return "drop";
  });
  if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
    return dzToConfig$1.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig$1.get(dz).dropTargetClasses;
  });
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap(arr, i, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
  }
  function handleKeyDown(e) {
    printDebug(function() {
      return ["handling key down", e.key];
    });
    switch (e.key) {
      case "Enter":
      case " ": {
        if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        if (isDragging) {
          handleDrop$1();
        } else {
          handleDragStart(e);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
        var children2 = Array.from(node.children);
        var idx = children2.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow down", idx];
        });
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
          }
          swap(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
        var _children = Array.from(node.children);
        var _idx = _children.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow up", _idx];
        });
        if (_idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
          }
          swap(_items, _idx, _idx - 1);
          dispatchFinalizeEvent(node, _items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
    }
  }
  function handleDragStart(e) {
    printDebug(function() {
      return "drag start";
    });
    setCurrentFocusedItem(e.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
      return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
    });
    styleActiveDropZones(dropTargets, function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    if (!config.autoAriaDisabled) {
      var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
      if (dropTargets.length > 1) {
        msg += ", or tab to another list in order to move the item into it";
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    triggerAllDzsUpdate();
  }
  function handleClick(e) {
    if (!isDragging)
      return;
    if (e.currentTarget === focusedItem)
      return;
    e.stopPropagation();
    handleDrop$1(false);
    handleDragStart(e);
  }
  function setCurrentFocusedItem(draggableEl) {
    var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
    var children2 = Array.from(node.children);
    var focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
    }
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    registerDropZone$1(node, newType);
    dzToConfig$1.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    var _loop = function _loop2(i2) {
      var draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        printDebug(function() {
          return ["focusing on", {
            i: i2,
            focusedItemId
          }];
        });
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    };
    for (var i = 0; i < node.children.length; i++) {
      _loop(i);
    }
  }
  configure(options);
  var handles = {
    update: function update2(newOptions) {
      printDebug(function() {
        return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "keyboard dndzone will destroy";
      });
      unregisterDropZone$1(node, config.type);
      dzToConfig$1["delete"](node);
      dzToHandles["delete"](node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
function dndzone$2(node, options) {
  validateOptions(options);
  var pointerZone = dndzone(node, options);
  var keyboardZone = dndzone$1(node, options);
  return {
    update: function update2(newOptions) {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: function destroy() {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function validateOptions(options) {
  var items = options.items, flipDurationMs7 = options.flipDurationMs, type = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"]);
  if (Object.keys(rest).length > 0) {
    console.warn("dndzone will ignore unknown options", rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  var itemWithMissingId = items.find(function(item) {
    return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
  });
  if (itemWithMissingId) {
    throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
  }
}
function isInt(value) {
  return !isNaN(value) && function(x) {
    return (x | 0) === x;
  }(parseFloat(value));
}

// src/settings/creator/Containers/WeekdayContainer.svelte
var import_obsidian4 = __toModule(require("obsidian"));

// src/settings/creator/Utilities/AddNew.svelte
var import_obsidian3 = __toModule(require("obsidian"));
function add_css5(target) {
  append_styles(target, "svelte-ig4czu", ".add-new.svelte-ig4czu,.add-new.svelte-ig4czu button{width:100%}");
}
function create_fragment7(ctx) {
  let div;
  let add_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "add-new setting-item svelte-ig4czu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(add_action = ctx[0].call(null, div)),
          listen(div, "click", ctx[1])
        ];
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance7($$self) {
  const add = (node) => {
    new import_obsidian3.ButtonComponent(node).setTooltip("Add New").setButtonText("+");
  };
  function click_handler(event) {
    bubble.call(this, $$self, event);
  }
  return [add, click_handler];
}
var AddNew = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, {}, add_css5);
  }
};
var AddNew_default = AddNew;

// src/settings/creator/Utilities/NoExistingItems.svelte
function add_css6(target) {
  append_styles(target, "svelte-u7oux9", ".no-existing-items.svelte-u7oux9 span.svelte-u7oux9{width:100%;text-align:center;color:var(--text-faint)}");
}
function create_fragment8(ctx) {
  let div;
  let span;
  let t;
  return {
    c() {
      div = element("div");
      span = element("span");
      t = text(ctx[0]);
      attr(span, "class", "svelte-u7oux9");
      attr(div, "class", "no-existing-items setting-item svelte-u7oux9");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(span, t);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let { message } = $$props;
  $$self.$$set = ($$props2) => {
    if ("message" in $$props2)
      $$invalidate(0, message = $$props2.message);
  };
  return [message];
}
var NoExistingItems = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, { message: 0 }, add_css6);
  }
};
var NoExistingItems_default = NoExistingItems;

// src/settings/creator/Containers/WeekdayContainer.svelte
function add_css7(target) {
  append_styles(target, "svelte-1ddbnom", ".existing-items.svelte-1ddbnom.svelte-1ddbnom{width:100%}.weekday.svelte-1ddbnom.svelte-1ddbnom{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem;width:100%}.weekday.svelte-1ddbnom .icon.svelte-1ddbnom{align-items:center}.weekday.svelte-1ddbnom.svelte-1ddbnom{margin-top:0.5rem}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[15] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i];
  child_ctx[20] = i;
  return child_ctx;
}
function create_each_block_1(ctx) {
  let option;
  let t0_value = (ctx[18].name ?? "") + "";
  let t0;
  let t1;
  let option_disabled_value;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t0 = text(t0_value);
      t1 = space();
      option.disabled = option_disabled_value = !ctx[2];
      option.__value = option_value_value = ctx[20];
      option.value = option.__value;
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t0);
      append(option, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t0_value !== (t0_value = (ctx2[18].name ?? "") + ""))
        set_data(t0, t0_value);
      if (dirty & 4 && option_disabled_value !== (option_disabled_value = !ctx2[2])) {
        option.disabled = option_disabled_value;
      }
    },
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_else_block2(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value = ctx[1];
  const get_key = (ctx2) => ctx2[15].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items svelte-1ddbnom");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[1],
            flipDurationMs,
            dragDisabled: ctx[3]
          })),
          listen(div, "consider", ctx[7]),
          listen(div, "finalize", ctx[8])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 66) {
        each_value = ctx2[1];
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_destroy_block, create_each_block, null, get_each_context);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 10)
        dndzone_action.update.call(null, {
          items: ctx2[1],
          flipDurationMs,
          dragDisabled: ctx2[3]
        });
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block2(ctx) {
  let noexistingitems;
  let current;
  noexistingitems = new NoExistingItems_default({
    props: {
      message: "Create a new weekday to see it here."
    }
  });
  return {
    c() {
      create_component(noexistingitems.$$.fragment);
    },
    m(target, anchor) {
      mount_component(noexistingitems, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(noexistingitems.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(noexistingitems.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(noexistingitems, detaching);
    }
  };
}
function create_each_block(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(div0, "class", "icon svelte-1ddbnom");
      attr(div2, "class", "icon svelte-1ddbnom");
      attr(div3, "class", "weekday svelte-1ddbnom");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[6]),
          listen(div0, "touchstart", ctx[6]),
          action_destroyer(name_action = ctx[9].call(null, div1, ctx[15])),
          action_destroyer(trash_action = ctx[5].call(null, div2, ctx[15]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 2)
        name_action.update.call(null, ctx[15]);
      if (trash_action && is_function(trash_action.update) && dirty & 2)
        trash_action.update.call(null, ctx[15]);
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs });
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment9(ctx) {
  let togglecomponent;
  let t0;
  let div4;
  let div2;
  let t4;
  let div3;
  let select;
  let option;
  let select_aria_label_value;
  let t6;
  let addnew;
  let t7;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  togglecomponent = new ToggleComponent_default({
    props: {
      name: "Overflow Weeks",
      desc: "Turn this off to make each month start on the first of the week.",
      value: ctx[0].static.overflow
    }
  });
  togglecomponent.$on("click", ctx[11]);
  let each_value_1 = ctx[1].filter(func);
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  addnew = new AddNew_default({});
  addnew.$on("click", ctx[13]);
  const if_block_creators = [create_if_block2, create_else_block2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[1].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      create_component(togglecomponent.$$.fragment);
      t0 = space();
      div4 = element("div");
      div2 = element("div");
      div2.innerHTML = `<div class="setting-item-name">First Day</div> 
        <div class="setting-item-description">The day of the week the first year starts on.</div>`;
      t4 = space();
      div3 = element("div");
      select = element("select");
      option = element("option");
      option.textContent = "Select a Weekday";
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t6 = space();
      create_component(addnew.$$.fragment);
      t7 = space();
      if_block.c();
      if_block_anchor = empty();
      attr(div2, "class", "setting-item-info");
      option.selected = true;
      option.hidden = true;
      option.disabled = true;
      option.__value = "Select a Weekday";
      option.value = option.__value;
      attr(select, "class", "dropdown");
      attr(select, "aria-label", select_aria_label_value = ctx[1].filter(func_1).length ? null : "Named Weekday Required");
      if (ctx[0].static.firstWeekDay === void 0)
        add_render_callback(() => ctx[12].call(select));
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item");
    },
    m(target, anchor) {
      mount_component(togglecomponent, target, anchor);
      insert(target, t0, anchor);
      insert(target, div4, anchor);
      append(div4, div2);
      append(div4, t4);
      append(div4, div3);
      append(div3, select);
      append(select, option);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(select, null);
      }
      select_option(select, ctx[0].static.firstWeekDay);
      insert(target, t6, anchor);
      mount_component(addnew, target, anchor);
      insert(target, t7, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(select, "change", ctx[12]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const togglecomponent_changes = {};
      if (dirty & 1)
        togglecomponent_changes.value = ctx2[0].static.overflow;
      togglecomponent.$set(togglecomponent_changes);
      if (dirty & 6) {
        each_value_1 = ctx2[1].filter(func);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
      if (!current || dirty & 2 && select_aria_label_value !== (select_aria_label_value = ctx2[1].filter(func_1).length ? null : "Named Weekday Required")) {
        attr(select, "aria-label", select_aria_label_value);
      }
      if (dirty & 1) {
        select_option(select, ctx2[0].static.firstWeekDay);
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(togglecomponent.$$.fragment, local);
      transition_in(addnew.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(togglecomponent.$$.fragment, local);
      transition_out(addnew.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(togglecomponent, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div4);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(t6);
      destroy_component(addnew, detaching);
      if (detaching)
        detach(t7);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
var flipDurationMs = 300;
var func = (v) => v.name?.length;
var func_1 = (v) => v.name?.length;
function instance9($$self, $$props, $$invalidate) {
  let weekdays;
  let overflow;
  const dispatch2 = createEventDispatcher();
  let { calendar } = $$props;
  let firstWeekday = calendar.static.firstWeekDay;
  const grip = (node) => {
    (0, import_obsidian4.setIcon)(node, "fantasy-calendar-grip");
  };
  const trash = (node, item) => {
    new import_obsidian4.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(1, weekdays = weekdays.filter((day) => day.id !== item.id)));
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(3, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(1, weekdays = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(1, weekdays = newItems);
    if (source === SOURCES.POINTER) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  const name = (node, item) => {
    new import_obsidian4.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange((v) => {
      item.name = v;
      dispatch2("weekday-update", weekdays);
      $$invalidate(1, weekdays), $$invalidate(0, calendar);
    }).inputEl.setAttr("style", "width: 100%;");
  };
  const click_handler = () => $$invalidate(0, calendar.static.overflow = !calendar.static.overflow, calendar);
  function select_change_handler() {
    calendar.static.firstWeekDay = select_value(this);
    $$invalidate(0, calendar);
  }
  const click_handler_1 = () => $$invalidate(0, calendar.static.weekdays = [...weekdays, { type: "day", name: null, id: nanoid(6) }], calendar);
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, weekdays = calendar.static.weekdays);
    }
    if ($$self.$$.dirty & 1025) {
      $: {
        $$invalidate(10, firstWeekday = calendar.static.firstWeekDay);
        console.log(firstWeekday, calendar.static.firstWeekDay);
      }
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, overflow = calendar.static.overflow);
    }
    if ($$self.$$.dirty & 2) {
      $: {
        dispatch2("weekday-update", weekdays);
      }
    }
    if ($$self.$$.dirty & 1024) {
      $: {
        dispatch2("first-weekday-update", firstWeekday);
      }
    }
    if ($$self.$$.dirty & 4) {
      $: {
        dispatch2("overflow-update", overflow);
      }
    }
  };
  return [
    calendar,
    weekdays,
    overflow,
    dragDisabled,
    grip,
    trash,
    startDrag,
    handleConsider,
    handleFinalize,
    name,
    firstWeekday,
    click_handler,
    select_change_handler,
    click_handler_1
  ];
}
var WeekdayContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, { calendar: 0 }, add_css7);
  }
};
var WeekdayContainer_default = WeekdayContainer;

// src/settings/creator/Containers/MonthContainer.svelte
var import_obsidian6 = __toModule(require("obsidian"));

// src/settings/creator/Containers/MonthInstance.svelte
var import_obsidian5 = __toModule(require("obsidian"));
function add_css8(target) {
  append_styles(target, "svelte-1nt6wkb", ".month.svelte-1nt6wkb.svelte-1nt6wkb{display:grid;grid-template-columns:1fr 1fr auto auto;align-items:center;justify-content:space-between;gap:1rem}.month.svelte-1nt6wkb .icon.svelte-1nt6wkb{align-items:center}");
}
function create_fragment10(ctx) {
  let div1;
  let input0;
  let t0;
  let input1;
  let t1;
  let select;
  let option0;
  let option1;
  let t4;
  let div0;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      input0 = element("input");
      t0 = space();
      input1 = element("input");
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = "Month";
      option1 = element("option");
      option1.textContent = "Intercalary";
      t4 = space();
      div0 = element("div");
      attr(input0, "type", "text");
      attr(input0, "spellcheck", "false");
      attr(input0, "placeholder", "Name");
      set_style(input0, "width", "100%");
      attr(input1, "type", "number");
      attr(input1, "spellcheck", "false");
      attr(input1, "placeholder", "Length");
      set_style(input1, "width", "100%");
      attr(input1, "min", "0");
      option0.__value = "month";
      option0.value = option0.__value;
      option1.__value = "intercalary";
      option1.value = option1.__value;
      attr(select, "class", "dropdown");
      if (ctx[0] === void 0)
        add_render_callback(() => ctx[8].call(select));
      attr(div0, "class", "icon svelte-1nt6wkb");
      attr(div1, "class", "month svelte-1nt6wkb");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, input0);
      set_input_value(input0, ctx[1]);
      append(div1, t0);
      append(div1, input1);
      set_input_value(input1, ctx[2]);
      append(div1, t1);
      append(div1, select);
      append(select, option0);
      append(select, option1);
      select_option(select, ctx[0]);
      append(div1, t4);
      append(div1, div0);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[6]),
          listen(input0, "input", ctx[4]),
          listen(input1, "input", ctx[7]),
          listen(input1, "input", ctx[4]),
          listen(select, "change", ctx[8]),
          listen(select, "input", ctx[4]),
          action_destroyer(trash_action = ctx[3].call(null, div0))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2 && input0.value !== ctx2[1]) {
        set_input_value(input0, ctx2[1]);
      }
      if (dirty & 4 && to_number(input1.value) !== ctx2[2]) {
        set_input_value(input1, ctx2[2]);
      }
      if (dirty & 1) {
        select_option(select, ctx2[0]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance10($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { month } = $$props;
  let name = month.name;
  let type = month.type;
  let length = month.length;
  const trash = (node) => {
    new import_obsidian5.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      dispatch2("month-delete");
    });
  };
  const update2 = (0, import_obsidian5.debounce)(() => {
    $$invalidate(5, month.name = name, month);
    $$invalidate(5, month.type = type, month);
    $$invalidate(5, month.length = length, month);
    dispatch2("month-update");
  }, 300, true);
  function input0_input_handler() {
    name = this.value;
    $$invalidate(1, name);
  }
  function input1_input_handler() {
    length = to_number(this.value);
    $$invalidate(2, length);
  }
  function select_change_handler() {
    type = select_value(this);
    $$invalidate(0, type);
  }
  $$self.$$set = ($$props2) => {
    if ("month" in $$props2)
      $$invalidate(5, month = $$props2.month);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $: {
        $$invalidate(5, month.type = type, month);
      }
    }
  };
  return [
    type,
    name,
    length,
    trash,
    update2,
    month,
    input0_input_handler,
    input1_input_handler,
    select_change_handler
  ];
}
var MonthInstance = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, { month: 5 }, add_css8);
  }
};
var MonthInstance_default = MonthInstance;

// src/settings/creator/Containers/MonthContainer.svelte
function add_css9(target) {
  append_styles(target, "svelte-xv4vbj", ".month.svelte-xv4vbj{display:flex;align-items:center;margin-top:0.5rem;gap:1rem}");
}
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_else_block3(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[2];
  const get_key = (ctx2) => ctx2[12].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context2(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block2(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[2],
            flipDurationMs: flipDurationMs2,
            dragDisabled: ctx[1]
          })),
          listen(div, "consider", ctx[6]),
          listen(div, "finalize", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 300) {
        each_value = ctx2[2];
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block2, null, get_each_context2);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 6)
        dndzone_action.update.call(null, {
          items: ctx2[2],
          flipDurationMs: flipDurationMs2,
          dragDisabled: ctx2[1]
        });
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block3(ctx) {
  let noexistingitems;
  let current;
  noexistingitems = new NoExistingItems_default({
    props: {
      message: "Create a new month to see it here."
    }
  });
  return {
    c() {
      create_component(noexistingitems.$$.fragment);
    },
    m(target, anchor) {
      mount_component(noexistingitems, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(noexistingitems.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(noexistingitems.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(noexistingitems, detaching);
    }
  };
}
function create_each_block2(key_1, ctx) {
  let div1;
  let div0;
  let grip_action;
  let t0;
  let monthinstance;
  let t1;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  function month_delete_handler() {
    return ctx[10](ctx[12]);
  }
  monthinstance = new MonthInstance_default({ props: { month: ctx[12] } });
  monthinstance.$on("mousedown", ctx[5]);
  monthinstance.$on("month-delete", month_delete_handler);
  monthinstance.$on("month-update", ctx[11]);
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      create_component(monthinstance.$$.fragment);
      t1 = space();
      attr(div0, "class", "icon");
      attr(div1, "class", "month svelte-xv4vbj");
      this.first = div1;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div1, t0);
      mount_component(monthinstance, div1, null);
      append(div1, t1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[5]),
          listen(div0, "touchstart", ctx[5])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const monthinstance_changes = {};
      if (dirty & 4)
        monthinstance_changes.month = ctx[12];
      monthinstance.$set(monthinstance_changes);
    },
    r() {
      rect = div1.getBoundingClientRect();
    },
    f() {
      fix_position(div1);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div1, rect, flip, { duration: flipDurationMs2 });
    },
    i(local) {
      if (current)
        return;
      transition_in(monthinstance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(monthinstance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(monthinstance);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment11(ctx) {
  let addnew;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  addnew = new AddNew_default({});
  addnew.$on("click", ctx[9]);
  const if_block_creators = [create_if_block3, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      create_component(addnew.$$.fragment);
      t = space();
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(addnew, target, anchor);
      insert(target, t, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(addnew.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(addnew.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(addnew, detaching);
      if (detaching)
        detach(t);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
var flipDurationMs2 = 300;
function instance11($$self, $$props, $$invalidate) {
  let months;
  let { calendar } = $$props;
  const deleteMonth = (month) => {
    $$invalidate(2, months = months.filter((m) => m.id != month.id));
    dispatch2("month-update", months);
  };
  const grip = (node) => {
    (0, import_obsidian6.setIcon)(node, "fantasy-calendar-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(1, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(2, months = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(1, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(2, months = newItems);
    dispatch2("month-update", months);
    if (source === SOURCES.POINTER) {
      $$invalidate(1, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  const click_handler = () => $$invalidate(0, calendar.static.months = [
    ...months,
    {
      type: "month",
      name: null,
      length: null,
      id: nanoid(6)
    }
  ], calendar);
  const month_delete_handler = (month) => deleteMonth(month);
  const month_update_handler = () => dispatch2("month-update", months);
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, months = calendar.static.months);
    }
  };
  return [
    calendar,
    dragDisabled,
    months,
    deleteMonth,
    grip,
    startDrag,
    handleConsider,
    handleFinalize,
    dispatch2,
    click_handler,
    month_delete_handler,
    month_update_handler
  ];
}
var MonthContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, { calendar: 0 }, add_css9);
  }
};
var MonthContainer_default = MonthContainer;

// src/settings/creator/Containers/YearContainer.svelte
var import_obsidian8 = __toModule(require("obsidian"));

// src/settings/modals/confirm.ts
var import_obsidian7 = __toModule(require("obsidian"));
async function confirmWithModal(app, text2, buttons = {
  cta: "Yes",
  secondary: "No"
}) {
  return new Promise((resolve, reject) => {
    const modal = new ConfirmModal(app, text2, buttons);
    modal.onClose = () => {
      resolve(modal.confirmed);
    };
    modal.open();
  });
}
var ConfirmModal = class extends import_obsidian7.Modal {
  constructor(app, text2, buttons) {
    super(app);
    this.text = text2;
    this.buttons = buttons;
    this.confirmed = false;
  }
  async display() {
    new Promise((resolve) => {
      this.contentEl.empty();
      this.contentEl.addClass("confirm-modal");
      this.contentEl.createEl("p", {
        text: this.text
      });
      const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
      new import_obsidian7.ButtonComponent(buttonEl).setButtonText(this.buttons.cta).setCta().onClick(() => {
        this.confirmed = true;
        this.close();
      });
      new import_obsidian7.ButtonComponent(buttonEl).setButtonText(this.buttons.secondary).onClick(() => {
        this.close();
      });
    });
  }
  onOpen() {
    this.display();
  }
};

// src/settings/creator/Containers/YearContainer.svelte
function add_css10(target) {
  append_styles(target, "svelte-1f06yhl", ".weekday.svelte-1f06yhl.svelte-1f06yhl{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1f06yhl .icon.svelte-1f06yhl{align-items:center}.weekday.svelte-1f06yhl.svelte-1f06yhl{margin-top:0.5rem}");
}
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_if_block4(ctx) {
  let addnew;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  addnew = new AddNew_default({});
  addnew.$on("click", ctx[14]);
  const if_block_creators = [create_if_block_12, create_else_block4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2] || !ctx2[2].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      create_component(addnew.$$.fragment);
      t = space();
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(addnew, target, anchor);
      insert(target, t, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(addnew.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(addnew.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(addnew, detaching);
      if (detaching)
        detach(t);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_else_block4(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value = ctx[2];
  const get_key = (ctx2) => ctx2[16].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context3(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block3(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[2],
            flipDurationMs: flipDurationMs3,
            dragDisabled: ctx[3]
          })),
          listen(div, "consider", ctx[10]),
          listen(div, "finalize", ctx[11])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 516) {
        each_value = ctx2[2];
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_destroy_block, create_each_block3, null, get_each_context3);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 12)
        dndzone_action.update.call(null, {
          items: ctx2[2],
          flipDurationMs: flipDurationMs3,
          dragDisabled: ctx2[3]
        });
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_12(ctx) {
  let noexistingitems;
  let current;
  noexistingitems = new NoExistingItems_default({
    props: {
      message: "Create a new year to see it here."
    }
  });
  return {
    c() {
      create_component(noexistingitems.$$.fragment);
    },
    m(target, anchor) {
      mount_component(noexistingitems, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(noexistingitems.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(noexistingitems.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(noexistingitems, detaching);
    }
  };
}
function create_each_block3(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(div0, "class", "icon svelte-1f06yhl");
      attr(div2, "class", "icon svelte-1f06yhl");
      attr(div3, "class", "weekday svelte-1f06yhl");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[9]),
          listen(div0, "touchstart", ctx[9]),
          action_destroyer(name_action = ctx[6].call(null, div1, ctx[16])),
          action_destroyer(trash_action = ctx[5].call(null, div2, ctx[16]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 4)
        name_action.update.call(null, ctx[16]);
      if (trash_action && is_function(trash_action.update) && dirty & 4)
        trash_action.update.call(null, ctx[16]);
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs3 });
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment12(ctx) {
  let togglecomponent;
  let t;
  let if_block_anchor;
  let current;
  togglecomponent = new ToggleComponent_default({
    props: {
      name: "Use Custom Years",
      desc: ctx[7],
      value: ctx[1]
    }
  });
  togglecomponent.$on("click", ctx[13]);
  let if_block = ctx[1] && create_if_block4(ctx);
  return {
    c() {
      create_component(togglecomponent.$$.fragment);
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(togglecomponent, target, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const togglecomponent_changes = {};
      if (dirty & 2)
        togglecomponent_changes.value = ctx2[1];
      togglecomponent.$set(togglecomponent_changes);
      if (ctx2[1]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(togglecomponent.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(togglecomponent.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(togglecomponent, detaching);
      if (detaching)
        detach(t);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
var flipDurationMs3 = 300;
function instance12($$self, $$props, $$invalidate) {
  let years;
  let useCustomYears;
  let { calendar } = $$props;
  const grip = (node) => {
    (0, import_obsidian8.setIcon)(node, "fantasy-calendar-grip");
  };
  const trash = (node, item) => {
    new import_obsidian8.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(2, years = years.filter((year) => year.id !== item.id)));
  };
  const name = (node, item) => {
    const comp = new import_obsidian8.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange((v) => {
      item.name = v;
      dispatch2("years-update", years);
      $$invalidate(2, years), $$invalidate(0, calendar);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  let { app } = $$props;
  const customDesc = createFragment((el) => {
    el.createSpan({
      text: "Create custom years to display instead of incrementing from 1."
    });
    el.createEl("br");
    el.createSpan({ text: "If on, " });
    el.createEl("strong", {
      text: "only the years added below will be displayed."
    });
    return el;
  });
  const confirmCustom = async () => {
    if (calendar.static.useCustomYears && years.length && await confirmWithModal(app, "The custom years you have created will be removed. Proceed?")) {
      $$invalidate(0, calendar.static.years = [], calendar);
    }
    $$invalidate(0, calendar.static.useCustomYears = !calendar.static.useCustomYears, calendar);
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(3, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(2, years = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(2, years = newItems);
    if (source === SOURCES.POINTER) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  const click_handler = () => confirmCustom();
  const click_handler_1 = () => $$invalidate(0, calendar.static.years = [...years ?? [], { name: null, id: nanoid(6), type: "year" }], calendar);
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
    if ("app" in $$props2)
      $$invalidate(12, app = $$props2.app);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, years = calendar.static.years);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, useCustomYears = calendar.static.useCustomYears);
    }
    if ($$self.$$.dirty & 4) {
      $: {
        dispatch2("years-update", years);
      }
    }
    if ($$self.$$.dirty & 2) {
      $: {
        dispatch2("use-custom-update", useCustomYears);
      }
    }
  };
  return [
    calendar,
    useCustomYears,
    years,
    dragDisabled,
    grip,
    trash,
    name,
    customDesc,
    confirmCustom,
    startDrag,
    handleConsider,
    handleFinalize,
    app,
    click_handler,
    click_handler_1
  ];
}
var YearContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, { calendar: 0, app: 12 }, add_css10);
  }
};
var YearContainer_default = YearContainer;

// src/settings/creator/Containers/EventInstance.svelte
var import_obsidian9 = __toModule(require("obsidian"));

// src/settings/creator/Utilities/Dot.svelte
function add_css11(target) {
  append_styles(target, "svelte-1ldxqlp", ".dot.svelte-1ldxqlp{display:inline-block;height:0.875em;width:0.875em;margin:0 1px}");
}
function create_fragment13(ctx) {
  let svg;
  let circle;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "stroke", ctx[0]);
      attr(circle, "fill", ctx[0]);
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", "dot svelte-1ldxqlp");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "aria-label", ctx[1]);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        attr(circle, "stroke", ctx2[0]);
      }
      if (dirty & 1) {
        attr(circle, "fill", ctx2[0]);
      }
      if (dirty & 2) {
        attr(svg, "aria-label", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let { color } = $$props;
  let { label } = $$props;
  $$self.$$set = ($$props2) => {
    if ("color" in $$props2)
      $$invalidate(0, color = $$props2.color);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
  };
  return [color, label];
}
var Dot = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, { color: 0, label: 1 }, add_css11);
  }
};
var Dot_default = Dot;

// src/settings/creator/Containers/EventInstance.svelte
function add_css12(target) {
  append_styles(target, "svelte-3snb0d", ".event.svelte-3snb0d.svelte-3snb0d{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.event-info.svelte-3snb0d.svelte-3snb0d{width:100%}.icons.svelte-3snb0d.svelte-3snb0d{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.event.svelte-3snb0d .icon.svelte-3snb0d{align-items:center}.date.svelte-3snb0d.svelte-3snb0d{display:flex;justify-content:flex-start;gap:0.25rem}.clamp.svelte-3snb0d.svelte-3snb0d{display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;width:calc(var(--event-max-width) * 0.75)}");
}
function create_if_block5(ctx) {
  let dot;
  let current;
  dot = new Dot_default({
    props: {
      color: ctx[1].color,
      label: ctx[1].name
    }
  });
  return {
    c() {
      create_component(dot.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dot, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dot_changes = {};
      if (dirty & 2)
        dot_changes.color = ctx2[1].color;
      if (dirty & 2)
        dot_changes.label = ctx2[1].name;
      dot.$set(dot_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dot.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dot.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dot, detaching);
    }
  };
}
function create_fragment14(ctx) {
  let div6;
  let div2;
  let span0;
  let t0;
  let t1_value = ctx[0].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4;
  let span1;
  let t5_value = (ctx[0].description ?? "") + "";
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[1] != null && create_if_block5(ctx);
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      span0 = element("span");
      if (if_block)
        if_block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      div0 = element("div");
      t3 = text(ctx[2]);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      div5 = element("div");
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      attr(span0, "class", "setting-item-name");
      attr(div0, "class", "date svelte-3snb0d");
      attr(span1, "class", "clamp svelte-3snb0d");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "event-info svelte-3snb0d");
      attr(div3, "class", "icon svelte-3snb0d");
      attr(div4, "class", "icon svelte-3snb0d");
      attr(div5, "class", "icons svelte-3snb0d");
      attr(div6, "class", "event svelte-3snb0d");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div2, span0);
      if (if_block)
        if_block.m(span0, null);
      append(span0, t0);
      append(span0, t1);
      append(div2, t2);
      append(div2, div1);
      append(div1, div0);
      append(div0, t3);
      append(div1, t4);
      append(div1, span1);
      append(span1, t5);
      append(div6, t6);
      append(div6, div5);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[5].call(null, div3)),
          listen(div3, "click", ctx[6]),
          action_destroyer(trash_action = ctx[4].call(null, div4)),
          listen(div4, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (ctx2[1] != null) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(span0, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & 1) && t1_value !== (t1_value = ctx2[0].name + ""))
        set_data(t1, t1_value);
      if (!current || dirty & 4)
        set_data(t3, ctx2[2]);
      if ((!current || dirty & 1) && t5_value !== (t5_value = (ctx2[0].description ?? "") + ""))
        set_data(t5, t5_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  const trash = (node) => {
    let b = new import_obsidian9.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian9.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  let { event } = $$props;
  let { category } = $$props;
  let { date } = $$props;
  const click_handler = () => dispatch2("edit");
  const click_handler_1 = () => dispatch2("delete");
  $$self.$$set = ($$props2) => {
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("category" in $$props2)
      $$invalidate(1, category = $$props2.category);
    if ("date" in $$props2)
      $$invalidate(2, date = $$props2.date);
  };
  return [event, category, date, dispatch2, trash, edit, click_handler, click_handler_1];
}
var EventInstance = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment14, safe_not_equal, { event: 0, category: 1, date: 2 }, add_css12);
  }
};
var EventInstance_default = EventInstance;

// src/settings/creator/Containers/EventContainer.svelte
var import_obsidian10 = __toModule(require("obsidian"));
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block5(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 31) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block6(ctx) {
  let noexistingitems;
  let current;
  noexistingitems = new NoExistingItems_default({
    props: {
      message: "Create a new event to see it here."
    }
  });
  return {
    c() {
      create_component(noexistingitems.$$.fragment);
    },
    m(target, anchor) {
      mount_component(noexistingitems, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(noexistingitems.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(noexistingitems.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(noexistingitems, detaching);
    }
  };
}
function create_each_block4(ctx) {
  let eventinstance;
  let current;
  function edit_handler() {
    return ctx[6](ctx[10]);
  }
  function delete_handler() {
    return ctx[7](ctx[10]);
  }
  eventinstance = new EventInstance_default({
    props: {
      event: ctx[10],
      category: ctx[4](ctx[10].category),
      date: dateString(ctx[10].date, ctx[1], ctx[10].end)
    }
  });
  eventinstance.$on("edit", edit_handler);
  eventinstance.$on("delete", delete_handler);
  return {
    c() {
      create_component(eventinstance.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eventinstance, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const eventinstance_changes = {};
      if (dirty & 1)
        eventinstance_changes.event = ctx[10];
      if (dirty & 1)
        eventinstance_changes.category = ctx[4](ctx[10].category);
      if (dirty & 3)
        eventinstance_changes.date = dateString(ctx[10].date, ctx[1], ctx[10].end);
      eventinstance.$set(eventinstance_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(eventinstance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eventinstance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eventinstance, detaching);
    }
  };
}
function create_fragment15(ctx) {
  let addnew;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  addnew = new AddNew_default({});
  const if_block_creators = [create_if_block6, create_else_block5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      create_component(addnew.$$.fragment);
      t = space();
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(addnew, target, anchor);
      insert(target, t, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(addnew.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(addnew.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(addnew, detaching);
      if (detaching)
        detach(t);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  let categories;
  let events;
  let months;
  let { calendar } = $$props;
  const dispatch2 = createEventDispatcher();
  const editEvent = (item) => {
    dispatch2("new-item", item);
  };
  const deleteEvent = (item) => {
    $$invalidate(0, events = events.filter((event) => event.id !== item.id));
    dispatch2("edit-events", events);
  };
  const getCategory = (category) => {
    return categories.find(({ id }) => id == category);
  };
  const edit_handler = (event) => editEvent(event);
  const delete_handler = (event) => deleteEvent(event);
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(5, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 32) {
      $:
        categories = calendar.categories;
    }
    if ($$self.$$.dirty & 32) {
      $:
        $$invalidate(0, events = calendar.events);
    }
    if ($$self.$$.dirty & 32) {
      $:
        $$invalidate(1, months = calendar.static.months);
    }
    if ($$self.$$.dirty & 1) {
      $: {
        events.sort((a, b) => {
          if (a.date.year != b.date.year) {
            return a.date.year - b.date.year;
          }
          if (a.date.month != b.date.month) {
            return a.date.month - b.date.month;
          }
          return a.date.day - b.date.day;
        });
      }
    }
  };
  return [
    events,
    months,
    editEvent,
    deleteEvent,
    getCategory,
    calendar,
    edit_handler,
    delete_handler
  ];
}
var EventContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment15, safe_not_equal, { calendar: 5 });
  }
};
var EventContainer_default = EventContainer;

// src/settings/creator/Containers/CategoryContainer.svelte
var import_obsidian11 = __toModule(require("obsidian"));

// src/utils/constants.ts
var DEFAULT_CATEGORY_COLOR = "#808080";
var MOON_SHADOWS = [
  "M6.5,16a9.5,9.5 0 1,0 19,0a9.5,9.5 0 1,0 -19,0",
  "M19.79,6C22.25,7.2,25,9.92,25,16s-2.75,8.8-5.21,10a10.59,10.59,0,0,1-3.79.71A10.72,10.72,0,0,1,16,5.28,10.59,10.59,0,0,1,19.79,6Z",
  "M19.43,5.86C21.79,7,24.5,9.7,24.5,16s-2.71,9-5.07,10.14a10.55,10.55,0,0,1-3.43.58A10.72,10.72,0,0,1,16,5.28,10.55,10.55,0,0,1,19.43,5.86Z",
  "M17.87,5.46C20.23,6.34,24,8.88,24,16.17c0,6.85-3.33,9.36-5.69,10.29a11,11,0,0,1-2.31.26A10.72,10.72,0,0,1,16,5.28,10.49,10.49,0,0,1,17.87,5.46Z",
  "M17.79,5.45C20,6.3,23.5,8.77,23.5,15.88c0,7.37-3.75,9.87-5.95,10.71a9.92,9.92,0,0,1-1.55.13A10.72,10.72,0,0,1,16,5.28,10.54,10.54,0,0,1,17.79,5.45Z",
  "M17.35,5.38c1.9.79,5.15,3.25,5.15,10.72,0,7.25-3.06,9.68-5,10.5a10.87,10.87,0,0,1-1.52.12A10.72,10.72,0,0,1,16,5.28,10.1,10.1,0,0,1,17.35,5.38Z",
  "M17.05,5.34c1.6.75,4.45,3.17,4.45,10.79,0,7.39-2.68,9.76-4.3,10.52a11.9,11.9,0,0,1-1.2.07A10.72,10.72,0,0,1,16,5.28,9,9,0,0,1,17.05,5.34Z",
  "M16.85,5.33c1.3.74,3.65,3.12,3.65,10.67s-2.35,9.93-3.65,10.67c-.28,0-.56,0-.85,0A10.72,10.72,0,0,1,16,5.28,7.92,7.92,0,0,1,16.85,5.33Z",
  "M16.46,5.31c.95.78,3,3.34,3,10.69s-2.09,9.91-3,10.69l-.46,0A10.72,10.72,0,0,1,16,5.28Z",
  "M16.29,5.3c.65.8,2.21,3.48,2.21,10.78S17,25.91,16.3,26.7l-.3,0A10.72,10.72,0,0,1,16,5.28Z",
  "M16.13,5.29c.37.89,1.37,3.92,1.37,10.79s-1,9.76-1.36,10.63H16A10.72,10.72,0,0,1,16,5.28Z",
  "M16,5.29A85.5,85.5,0,0,1,16.5,16,85.5,85.5,0,0,1,16,26.71h0A10.72,10.72,0,0,1,16,5.28Z",
  "M16,26.72A10.72,10.72,0,0,1,16,5.28Z",
  "M15.5,16A85.59,85.59,0,0,0,16,26.72,10.72,10.72,0,0,1,16,5.28,85.59,85.59,0,0,0,15.5,16Z",
  "M14.5,16.08c0,6.84,1,9.77,1.36,10.63a10.71,10.71,0,0,1,0-21.42C15.5,6.17,14.5,9.2,14.5,16.08Z",
  "M15.7,26.7a10.7,10.7,0,0,1,0-21.4c-.65.8-2.21,3.47-2.21,10.78S15,25.92,15.7,26.7Z",
  "M15.55,26.7a10.71,10.71,0,0,1,0-21.4c-1,.78-3.05,3.34-3.05,10.7S14.6,25.92,15.55,26.7Z",
  "M15.16,26.68a10.71,10.71,0,0,1,0-21.36C13.85,6.06,11.5,8.43,11.5,16S13.85,25.94,15.16,26.68Z",
  "M14.81,26.65A10.72,10.72,0,0,1,15,5.33c-1.59.76-4.45,3.17-4.45,10.8C10.5,23.53,13.19,25.9,14.81,26.65Z",
  "M14.49,26.6a10.71,10.71,0,0,1,.17-21.23c-1.9.8-5.16,3.24-5.16,10.73C9.5,23.37,12.57,25.79,14.49,26.6Z",
  "M14.46,26.6a10.71,10.71,0,0,1-.24-21.16C12,6.29,8.5,8.76,8.5,15.88,8.5,23.26,12.27,25.76,14.46,26.6Z",
  "M13.72,26.47a10.71,10.71,0,0,1,.43-21C11.78,6.33,8,8.87,8,16.17,8,23,11.35,25.55,13.72,26.47Z",
  "M12.6,26.19a10.73,10.73,0,0,1,0-20.35C10.23,7,7.5,9.67,7.5,16s2.73,9,5.1,10.16Z",
  "M12.23,26a10.7,10.7,0,0,1,0-20C9.77,7.19,7,9.9,7,16S9.77,24.81,12.23,26Z",
  null,
  "M19.77,26C22.23,24.81,25,22.1,25,16S22.23,7.19,19.77,6a10.7,10.7,0,0,1,0,20Z",
  "M19.4,26.16C21.77,25,24.5,22.33,24.5,16S21.77,7,19.4,5.84a10.71,10.71,0,0,1,0,20.32Z",
  "M18.28,26.47C20.65,25.55,24,23,24,16.17c0-7.3-3.78-9.84-6.15-10.72a10.71,10.71,0,0,1,.43,21Z",
  "M17.54,26.6c2.19-.84,6-3.34,6-10.72,0-7.12-3.5-9.59-5.72-10.44a10.71,10.71,0,0,1-.24,21.16Z",
  "M17.51,26.6c1.92-.81,5-3.23,5-10.5,0-7.49-3.26-9.93-5.16-10.73a10.71,10.71,0,0,1,.17,21.23Z",
  "M17.19,26.65c1.62-.75,4.31-3.12,4.31-10.52,0-7.63-2.86-10-4.45-10.8a10.72,10.72,0,0,1,.14,21.32Z",
  "M16.84,26.68c1.31-.74,3.66-3.11,3.66-10.68S18.15,6.06,16.84,5.32a10.71,10.71,0,0,1,0,21.36Z",
  "M16.45,26.7c.95-.78,3.05-3.34,3.05-10.7S17.4,6.08,16.45,5.3a10.71,10.71,0,0,1,0,21.4Z",
  "M16.3,26.7c.67-.78,2.2-3.37,2.2-10.62S16.94,6.1,16.29,5.3a10.7,10.7,0,0,1,0,21.4Z",
  "M16.14,26.71c.37-.86,1.36-3.79,1.36-10.63s-1-9.91-1.37-10.79a10.71,10.71,0,0,1,0,21.42Z",
  "M16,26.72A85.59,85.59,0,0,0,16.5,16,85.59,85.59,0,0,0,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72V5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72h0A85.59,85.59,0,0,1,15.5,16,85.59,85.59,0,0,1,16,5.28h0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72h-.14c-.37-.86-1.36-3.79-1.36-10.63s1-9.91,1.37-10.79H16a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72l-.3,0c-.67-.78-2.2-3.37-2.2-10.62s1.56-10,2.21-10.78l.29,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72l-.45,0c-1-.78-3.05-3.34-3.05-10.7s2.1-9.92,3.05-10.7l.45,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72c-.28,0-.56,0-.84,0C13.85,25.94,11.5,23.57,11.5,16s2.35-9.94,3.66-10.68c.28,0,.56,0,.84,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a11.7,11.7,0,0,1-1.19-.07c-1.62-.75-4.31-3.12-4.31-10.52,0-7.63,2.86-10,4.45-10.8.35,0,.7,0,1.05,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a10.85,10.85,0,0,1-1.51-.12c-1.92-.81-5-3.23-5-10.5,0-7.49,3.26-9.93,5.16-10.73A11.9,11.9,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a11.16,11.16,0,0,1-1.54-.12c-2.19-.84-6-3.34-6-10.72,0-7.12,3.5-9.59,5.72-10.44A10.43,10.43,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a10.69,10.69,0,0,1-2.28-.25C11.35,25.55,8,23,8,16.17c0-7.3,3.78-9.84,6.15-10.72A11.26,11.26,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a10.63,10.63,0,0,1-3.4-.56C10.23,25,7.5,22.33,7.5,16s2.73-9,5.1-10.16A10.72,10.72,0,1,1,16,26.72Z",
  "M16,26.72a10.52,10.52,0,0,1-3.77-.7C9.77,24.81,7,22.1,7,16S9.77,7.19,12.23,6A10.52,10.52,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z"
];
var SHADOW_MAP = {
  "New Moon": MOON_SHADOWS[0],
  "New Moon Fading": MOON_SHADOWS[1],
  "New Moon Faded": MOON_SHADOWS[2],
  "Waxing Crescent Rising": MOON_SHADOWS[3],
  "Waxing Crescent Risen": MOON_SHADOWS[4],
  "Waxing Crescent": MOON_SHADOWS[6],
  "Waxing Crescent Fading": MOON_SHADOWS[7],
  "Waxing Crescent Faded": MOON_SHADOWS[8],
  "First Quarter Rising": MOON_SHADOWS[9],
  "First Quarter Risen": MOON_SHADOWS[10],
  "First Quarter": MOON_SHADOWS[12],
  "First Quarter Fading": MOON_SHADOWS[13],
  "First Quarter Faded": MOON_SHADOWS[14],
  "Waxing Gibbous Rising": MOON_SHADOWS[15],
  "Waxing Gibbous Risen": MOON_SHADOWS[16],
  "Waxing Gibbous": MOON_SHADOWS[18],
  "Waxing Gibbous Fading": MOON_SHADOWS[19],
  "Waxing Gibbous Faded": MOON_SHADOWS[20],
  "Full Moon Rising": MOON_SHADOWS[21],
  "Full Moon Risen": MOON_SHADOWS[22],
  "Full Moon": MOON_SHADOWS[24],
  "Full Moon Fading": MOON_SHADOWS[25],
  "Full Moon Faded": MOON_SHADOWS[26],
  "Waning Gibbous Rising": MOON_SHADOWS[27],
  "Waning Gibbous Risen": MOON_SHADOWS[28],
  "Waning Gibbous": MOON_SHADOWS[30],
  "Waning Gibbous Fading": MOON_SHADOWS[31],
  "Waning Gibbous Faded": MOON_SHADOWS[32],
  "Last Quarter Rising": MOON_SHADOWS[33],
  "Last Quarter Risen": MOON_SHADOWS[34],
  "Last Quarter": MOON_SHADOWS[36],
  "Last Quarter Fading": MOON_SHADOWS[37],
  "Last Quarter Faded": MOON_SHADOWS[38],
  "Waning Crescent Rising": MOON_SHADOWS[39],
  "Waning Crescent Risen": MOON_SHADOWS[40],
  "Waning Crescent": MOON_SHADOWS[42],
  "Waning Crescent Fading": MOON_SHADOWS[43],
  "Waning Crescent Faded": MOON_SHADOWS[44],
  "New Moon Rising": MOON_SHADOWS[45],
  "New Moon Risen": MOON_SHADOWS[46]
};
var MOON_PHASES = {
  4: ["New Moon", "First Quarter", "Full Moon", "Last Quarter"],
  8: [
    "New Moon",
    "Waxing Crescent",
    "First Quarter",
    "Waxing Gibbous",
    "Full Moon",
    "Waning Gibbous",
    "Last Quarter",
    "Waning Crescent"
  ],
  16: [
    "New Moon",
    "New Moon Fading",
    "Waxing Crescent",
    "Waxing Crescent Fading",
    "First Quarter",
    "First Quarter Fading",
    "Waxing Gibbous",
    "Waxing Gibbous Fading",
    "Full Moon",
    "Full Moon Fading",
    "Waning Gibbous",
    "Waning Gibbous Fading",
    "Last Quarter",
    "Last Quarter Fading",
    "Waning Crescent",
    "Waning Crescent Fading"
  ],
  24: [
    "New Moon",
    "New Moon Fading",
    "Waxing Crescent Rising",
    "Waxing Crescent",
    "Waxing Crescent Fading",
    "First Quarter Rising",
    "First Quarter",
    "First Quarter Fading",
    "Waxing Gibbous Rising",
    "Waxing Gibbous",
    "Waxing Gibbous Fading",
    "Full Moon Rising",
    "Full Moon",
    "Full Moon Fading",
    "Waning Gibbous Rising",
    "Waning Gibbous",
    "Waning Gibbous Fading",
    "Last Quarter Rising",
    "Last Quarter",
    "Last Quarter Fading",
    "Waning Crescent Rising",
    "Waning Crescent",
    "Waning Crescent Fading",
    "New Moon Rising"
  ],
  40: [
    "New Moon",
    "New Moon Fading",
    "New Moon Faded",
    "Waxing Crescent Rising",
    "Waxing Crescent Risen",
    "Waxing Crescent",
    "Waxing Crescent Fading",
    "Waxing Crescent Faded",
    "First Quarter Rising",
    "First Quarter Risen",
    "First Quarter",
    "First Quarter Fading",
    "First Quarter Faded",
    "Waxing Gibbous Rising",
    "Waxing Gibbous Risen",
    "Waxing Gibbous",
    "Waxing Gibbous Fading",
    "Waxing Gibbous Faded",
    "Full Moon Rising",
    "Full Moon Risen",
    "Full Moon",
    "Full Moon Fading",
    "Full Moon Faded",
    "Waning Gibbous Rising",
    "Waning Gibbous Risen",
    "Waning Gibbous",
    "Waning Gibbous Fading",
    "Waning Gibbous Faded",
    "Last Quarter Rising",
    "Last Quarter Risen",
    "Last Quarter",
    "Last Quarter Fading",
    "Last Quarter Faded",
    "Waning Crescent Rising",
    "Waning Crescent Risen",
    "Waning Crescent",
    "Waning Crescent Fading",
    "Waning Crescent Faded",
    "New Moon Rising",
    "New Moon Risen"
  ]
};

// src/settings/creator/Containers/CategoryContainer.svelte
function add_css13(target) {
  append_styles(target, "svelte-1ok7o99", ".category.svelte-1ok7o99{display:grid;grid-template-columns:1fr auto auto;align-items:center;gap:0.5rem;padding-top:0.75rem}");
}
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function create_else_block6(ctx) {
  let div;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty & 18) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block7(ctx) {
  let noexistingitems;
  let current;
  noexistingitems = new NoExistingItems_default({
    props: {
      message: "Create a new event category to see it here."
    }
  });
  return {
    c() {
      create_component(noexistingitems.$$.fragment);
    },
    m(target, anchor) {
      mount_component(noexistingitems, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(noexistingitems.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(noexistingitems.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(noexistingitems, detaching);
    }
  };
}
function create_each_block5(ctx) {
  let div3;
  let div0;
  let name_action;
  let t0;
  let div1;
  let input;
  let input_value_value;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let mounted;
  let dispose;
  function change_handler(...args) {
    return ctx[6](ctx[9], ...args);
  }
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      input = element("input");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(input, "type", "color");
      input.value = input_value_value = ctx[9].color;
      attr(div1, "class", "color");
      attr(div3, "class", "category svelte-1ok7o99");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div1, input);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(name_action = ctx[2].call(null, div0, ctx[9])),
          listen(input, "change", change_handler),
          action_destroyer(trash_action = ctx[3].call(null, div2, ctx[9]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 2)
        name_action.update.call(null, ctx[9]);
      if (dirty & 2 && input_value_value !== (input_value_value = ctx[9].color)) {
        input.value = input_value_value;
      }
      if (trash_action && is_function(trash_action.update) && dirty & 2)
        trash_action.update.call(null, ctx[9]);
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment16(ctx) {
  let addnew;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  addnew = new AddNew_default({});
  addnew.$on("click", ctx[5]);
  const if_block_creators = [create_if_block7, create_else_block6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[1].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      create_component(addnew.$$.fragment);
      t = space();
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(addnew, target, anchor);
      insert(target, t, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(addnew.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(addnew.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(addnew, detaching);
      if (detaching)
        detach(t);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let categories;
  const dispatch2 = createEventDispatcher();
  let { calendar } = $$props;
  const name = (node, category) => {
    const comp = new import_obsidian11.TextComponent(node).setValue(category.name).setPlaceholder("Name").onChange((v) => {
      category.name = v;
      dispatch2("update", category);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  const trash = (node, item) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      $$invalidate(1, categories = categories.filter((category) => category.id !== item.id));
      dispatch2("delete", item);
    });
  };
  const updateColor = (event, category) => {
    const { target } = event;
    if (!(target instanceof HTMLInputElement))
      return;
    category.color = target.value;
    dispatch2("update", category);
  };
  const add = (node) => {
    new import_obsidian11.ButtonComponent(node).setTooltip("Add New").setButtonText("+").onClick(async () => {
      $$invalidate(0, calendar.categories = [
        ...categories,
        {
          id: nanoid(6),
          color: DEFAULT_CATEGORY_COLOR,
          name: "Category"
        }
      ], calendar);
    }).buttonEl.style.width = "100%";
  };
  const click_handler = () => $$invalidate(0, calendar.categories = [
    ...categories,
    {
      id: nanoid(6),
      color: DEFAULT_CATEGORY_COLOR,
      name: "Category"
    }
  ], calendar);
  const change_handler = (category, evt) => updateColor(evt, category);
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, categories = calendar.categories);
    }
  };
  return [calendar, categories, name, trash, updateColor, click_handler, change_handler];
}
var CategoryContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment16, safe_not_equal, { calendar: 0 }, add_css13);
  }
};
var CategoryContainer_default = CategoryContainer;

// src/settings/creator/Containers/MoonContainer.svelte
var import_obsidian12 = __toModule(require("obsidian"));

// src/view/ui/Moon.svelte
function create_fragment17(ctx) {
  let svg;
  let circle0;
  let circle0_fill_value;
  let path_1;
  let path_1_fill_value;
  let circle1;
  let svg_id_value;
  let svg_aria_label_value;
  return {
    c() {
      svg = svg_element("svg");
      circle0 = svg_element("circle");
      path_1 = svg_element("path");
      circle1 = svg_element("circle");
      attr(circle0, "cx", "16");
      attr(circle0, "cy", "16");
      attr(circle0, "r", "10");
      attr(circle0, "fill", circle0_fill_value = ctx[0].faceColor);
      attr(path_1, "class", "shadow");
      attr(path_1, "fill", path_1_fill_value = ctx[0].shadowColor);
      attr(path_1, "d", ctx[4]);
      attr(circle1, "cx", "16");
      attr(circle1, "cy", "16");
      attr(circle1, "r", "10");
      attr(circle1, "fill", "none");
      attr(circle1, "stroke", "#000");
      attr(circle1, "stroke-width", "2px");
      attr(svg, "class", "moon");
      attr(svg, "id", svg_id_value = ctx[0].id);
      attr(svg, "preserveAspectRatio", "xMidYMid");
      attr(svg, "aria-label", svg_aria_label_value = ctx[1] ? `${ctx[0].name}
${ctx[3]}` : null);
      attr(svg, "width", ctx[2]);
      attr(svg, "height", ctx[2]);
      attr(svg, "viewBox", "0 0 32 32");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle0);
      append(svg, path_1);
      append(svg, circle1);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && circle0_fill_value !== (circle0_fill_value = ctx2[0].faceColor)) {
        attr(circle0, "fill", circle0_fill_value);
      }
      if (dirty & 1 && path_1_fill_value !== (path_1_fill_value = ctx2[0].shadowColor)) {
        attr(path_1, "fill", path_1_fill_value);
      }
      if (dirty & 16) {
        attr(path_1, "d", ctx2[4]);
      }
      if (dirty & 1 && svg_id_value !== (svg_id_value = ctx2[0].id)) {
        attr(svg, "id", svg_id_value);
      }
      if (dirty & 11 && svg_aria_label_value !== (svg_aria_label_value = ctx2[1] ? `${ctx2[0].name}
${ctx2[3]}` : null)) {
        attr(svg, "aria-label", svg_aria_label_value);
      }
      if (dirty & 4) {
        attr(svg, "width", ctx2[2]);
      }
      if (dirty & 4) {
        attr(svg, "height", ctx2[2]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let path;
  let { moon } = $$props;
  let { label = true } = $$props;
  let { size = 28 } = $$props;
  let { phase } = $$props;
  $$self.$$set = ($$props2) => {
    if ("moon" in $$props2)
      $$invalidate(0, moon = $$props2.moon);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("size" in $$props2)
      $$invalidate(2, size = $$props2.size);
    if ("phase" in $$props2)
      $$invalidate(3, phase = $$props2.phase);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 8) {
      $:
        $$invalidate(4, path = SHADOW_MAP[phase]);
    }
  };
  return [moon, label, size, phase, path];
}
var Moon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment17, safe_not_equal, { moon: 0, label: 1, size: 2, phase: 3 });
  }
};
var Moon_default = Moon;

// src/settings/creator/Containers/MoonContainer.svelte
function add_css14(target) {
  append_styles(target, "svelte-v24qmo", ".moon.svelte-v24qmo{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.setting-item-name.svelte-v24qmo{display:flex;align-items:center}.icons.svelte-v24qmo{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.icon.svelte-v24qmo{align-items:center}");
}
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block7(ctx) {
  let div;
  let current;
  let each_value = ctx[2];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 76) {
        each_value = ctx2[2];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block8(ctx) {
  let noexistingitems;
  let current;
  noexistingitems = new NoExistingItems_default({
    props: {
      message: "Create a new moon to see it here."
    }
  });
  return {
    c() {
      create_component(noexistingitems.$$.fragment);
    },
    m(target, anchor) {
      mount_component(noexistingitems, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(noexistingitems.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(noexistingitems.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(noexistingitems, detaching);
    }
  };
}
function create_each_block6(ctx) {
  let div6;
  let div2;
  let span;
  let moonsvg;
  let t0;
  let t1_value = ctx[10].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4_value = ctx[10].cycle + "";
  let t4;
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let t8;
  let current;
  let mounted;
  let dispose;
  moonsvg = new Moon_default({
    props: {
      moon: ctx[10],
      phase: "First Quarter",
      label: false,
      size: 20
    }
  });
  function click_handler_1() {
    return ctx[8](ctx[10]);
  }
  function click_handler_2() {
    return ctx[9](ctx[10]);
  }
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      span = element("span");
      create_component(moonsvg.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      div0 = element("div");
      t3 = text("Cycle: ");
      t4 = text(t4_value);
      t5 = text(" days");
      t6 = space();
      div5 = element("div");
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      t8 = space();
      attr(span, "class", "setting-item-name svelte-v24qmo");
      attr(div0, "class", "date");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "moon-info");
      attr(div3, "class", "icon svelte-v24qmo");
      attr(div4, "class", "icon svelte-v24qmo");
      attr(div5, "class", "icons svelte-v24qmo");
      attr(div6, "class", "moon svelte-v24qmo");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div2, span);
      mount_component(moonsvg, span, null);
      append(span, t0);
      append(span, t1);
      append(div2, t2);
      append(div2, div1);
      append(div1, div0);
      append(div0, t3);
      append(div0, t4);
      append(div0, t5);
      append(div6, t6);
      append(div6, div5);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      append(div6, t8);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[5].call(null, div3)),
          listen(div3, "click", click_handler_1),
          action_destroyer(trash_action = ctx[4].call(null, div4)),
          listen(div4, "click", click_handler_2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const moonsvg_changes = {};
      if (dirty & 4)
        moonsvg_changes.moon = ctx[10];
      moonsvg.$set(moonsvg_changes);
      if ((!current || dirty & 4) && t1_value !== (t1_value = ctx[10].name + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & 4) && t4_value !== (t4_value = ctx[10].cycle + ""))
        set_data(t4, t4_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(moonsvg.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moonsvg.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      destroy_component(moonsvg);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment18(ctx) {
  let togglecomponent;
  let t0;
  let addnew;
  let t1;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  togglecomponent = new ToggleComponent_default({
    props: {
      name: "Display Moons",
      desc: "Display moons by default when viewing this calendar.",
      value: ctx[1]
    }
  });
  togglecomponent.$on("click", ctx[7]);
  addnew = new AddNew_default({});
  const if_block_creators = [create_if_block8, create_else_block7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      create_component(togglecomponent.$$.fragment);
      t0 = space();
      create_component(addnew.$$.fragment);
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(togglecomponent, target, anchor);
      insert(target, t0, anchor);
      mount_component(addnew, target, anchor);
      insert(target, t1, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const togglecomponent_changes = {};
      if (dirty & 2)
        togglecomponent_changes.value = ctx2[1];
      togglecomponent.$set(togglecomponent_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(togglecomponent.$$.fragment, local);
      transition_in(addnew.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(togglecomponent.$$.fragment, local);
      transition_out(addnew.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(togglecomponent, detaching);
      if (detaching)
        detach(t0);
      destroy_component(addnew, detaching);
      if (detaching)
        detach(t1);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  let moons;
  let displayMoons;
  let { calendar } = $$props;
  const dispatch2 = createEventDispatcher();
  const trash = (node) => {
    let b = new import_obsidian12.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
  };
  const edit = (node) => {
    new import_obsidian12.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  const deleteMoon = (item) => {
    $$invalidate(0, calendar.static.moons = calendar.static.moons.filter((moon) => moon.id !== item.id), calendar);
  };
  const click_handler = () => $$invalidate(0, calendar.static.displayMoons = !calendar.static.displayMoons, calendar);
  const click_handler_1 = (moon) => dispatch2("new-item", moon);
  const click_handler_2 = (moon) => deleteMoon(moon);
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, moons = calendar.static.moons);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, displayMoons = calendar.static.displayMoons);
    }
  };
  return [
    calendar,
    displayMoons,
    moons,
    dispatch2,
    trash,
    edit,
    deleteMoon,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
var MoonContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment18, safe_not_equal, { calendar: 0 }, add_css14);
  }
};
var MoonContainer_default = MoonContainer;

// src/settings/creator/Creator.svelte
var import_console = __toModule(require("console"));
function add_css15(target) {
  append_styles(target, "svelte-1o9isn5", ".fantasy-calendar-creator.svelte-1o9isn5,.inherit.svelte-1o9isn5{background-color:inherit}.fantasy-calendar-creator-header.svelte-1o9isn5{margin:0}.top-nav.svelte-1o9isn5{position:sticky;top:0px;padding:10px 0px;background-color:inherit;z-index:1}.icons.svelte-1o9isn5{display:flex;justify-content:space-between}.back.svelte-1o9isn5{width:min-content}.back.svelte-1o9isn5 .clickable-icon{margin-left:0}");
}
function create_if_block9(ctx) {
  let div6;
  let div3;
  let div2;
  let div0;
  let back_action;
  let t0;
  let div1;
  let cancel_action;
  let t1;
  let h3;
  let t3;
  let div4;
  let preset_action;
  let t4;
  let div5;
  let details0;
  let t5;
  let details1;
  let t6;
  let details2;
  let t7;
  let details3;
  let t8;
  let details4;
  let t9;
  let details5;
  let t10;
  let details6;
  let t11;
  let details7;
  let div6_transition;
  let current;
  let mounted;
  let dispose;
  details0 = new Details_default({
    props: {
      name: "Basic Info",
      $$slots: { default: [create_default_slot_7] },
      $$scope: { ctx }
    }
  });
  details1 = new Details_default({
    props: {
      name: "Weekdays",
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    }
  });
  details2 = new Details_default({
    props: {
      name: "Months",
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    }
  });
  details3 = new Details_default({
    props: {
      name: "Years",
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  details4 = new Details_default({
    props: {
      name: "Current Date",
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    }
  });
  details5 = new Details_default({
    props: {
      name: "Events",
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    }
  });
  details6 = new Details_default({
    props: {
      name: "Categories",
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  details7 = new Details_default({
    props: {
      name: "Moons",
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div6 = element("div");
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      h3 = element("h3");
      h3.textContent = "Calendar Creator";
      t3 = space();
      div4 = element("div");
      t4 = space();
      div5 = element("div");
      create_component(details0.$$.fragment);
      t5 = space();
      create_component(details1.$$.fragment);
      t6 = space();
      create_component(details2.$$.fragment);
      t7 = space();
      create_component(details3.$$.fragment);
      t8 = space();
      create_component(details4.$$.fragment);
      t9 = space();
      create_component(details5.$$.fragment);
      t10 = space();
      create_component(details6.$$.fragment);
      t11 = space();
      create_component(details7.$$.fragment);
      attr(div0, "class", "back svelte-1o9isn5");
      attr(div1, "class", "cancel");
      attr(div2, "class", "icons svelte-1o9isn5");
      attr(h3, "class", "fantasy-calendar-creator-header svelte-1o9isn5");
      attr(div3, "class", "top-nav svelte-1o9isn5");
      attr(div5, "class", "fantasy-creator-app");
      attr(div6, "class", "inherit svelte-1o9isn5");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div3);
      append(div3, div2);
      append(div2, div0);
      append(div2, t0);
      append(div2, div1);
      append(div3, t1);
      append(div3, h3);
      append(div6, t3);
      append(div6, div4);
      append(div6, t4);
      append(div6, div5);
      mount_component(details0, div5, null);
      append(div5, t5);
      mount_component(details1, div5, null);
      append(div5, t6);
      mount_component(details2, div5, null);
      append(div5, t7);
      mount_component(details3, div5, null);
      append(div5, t8);
      mount_component(details4, div5, null);
      append(div5, t9);
      mount_component(details5, div5, null);
      append(div5, t10);
      mount_component(details6, div5, null);
      append(div5, t11);
      mount_component(details7, div5, null);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(back_action = ctx[6].call(null, div0)),
          listen(div0, "click", ctx[9]),
          action_destroyer(cancel_action = ctx[7].call(null, div1)),
          listen(div1, "click", ctx[10]),
          action_destroyer(preset_action = ctx[8].call(null, div4)),
          listen(div5, "scroll", ctx[11]),
          listen(div6, "introend", ctx[12]),
          listen(div6, "outroend", ctx[13])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const details0_changes = {};
      if (dirty & 16777217) {
        details0_changes.$$scope = { dirty, ctx };
      }
      details0.$set(details0_changes);
      const details1_changes = {};
      if (dirty & 16777217) {
        details1_changes.$$scope = { dirty, ctx };
      }
      details1.$set(details1_changes);
      const details2_changes = {};
      if (dirty & 16777217) {
        details2_changes.$$scope = { dirty, ctx };
      }
      details2.$set(details2_changes);
      const details3_changes = {};
      if (dirty & 16777219) {
        details3_changes.$$scope = { dirty, ctx };
      }
      details3.$set(details3_changes);
      const details4_changes = {};
      if (dirty & 16777217) {
        details4_changes.$$scope = { dirty, ctx };
      }
      details4.$set(details4_changes);
      const details5_changes = {};
      if (dirty & 16777217) {
        details5_changes.$$scope = { dirty, ctx };
      }
      details5.$set(details5_changes);
      const details6_changes = {};
      if (dirty & 16777217) {
        details6_changes.$$scope = { dirty, ctx };
      }
      details6.$set(details6_changes);
      const details7_changes = {};
      if (dirty & 16777217) {
        details7_changes.$$scope = { dirty, ctx };
      }
      details7.$set(details7_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(details0.$$.fragment, local);
      transition_in(details1.$$.fragment, local);
      transition_in(details2.$$.fragment, local);
      transition_in(details3.$$.fragment, local);
      transition_in(details4.$$.fragment, local);
      transition_in(details5.$$.fragment, local);
      transition_in(details6.$$.fragment, local);
      transition_in(details7.$$.fragment, local);
      add_render_callback(() => {
        if (!div6_transition)
          div6_transition = create_bidirectional_transition(div6, fly, { x: ctx[3] }, true);
        div6_transition.run(1);
      });
      current = true;
    },
    o(local) {
      transition_out(details0.$$.fragment, local);
      transition_out(details1.$$.fragment, local);
      transition_out(details2.$$.fragment, local);
      transition_out(details3.$$.fragment, local);
      transition_out(details4.$$.fragment, local);
      transition_out(details5.$$.fragment, local);
      transition_out(details6.$$.fragment, local);
      transition_out(details7.$$.fragment, local);
      if (!div6_transition)
        div6_transition = create_bidirectional_transition(div6, fly, { x: ctx[3] }, false);
      div6_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      destroy_component(details0);
      destroy_component(details1);
      destroy_component(details2);
      destroy_component(details3);
      destroy_component(details4);
      destroy_component(details5);
      destroy_component(details6);
      destroy_component(details7);
      if (detaching && div6_transition)
        div6_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot_7(ctx) {
  let info_1;
  let current;
  info_1 = new Info_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(info_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(info_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const info_1_changes = {};
      if (dirty & 1)
        info_1_changes.calendar = ctx2[0];
      info_1.$set(info_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(info_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(info_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(info_1, detaching);
    }
  };
}
function create_default_slot_6(ctx) {
  let weekdaycontainer;
  let current;
  weekdaycontainer = new WeekdayContainer_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(weekdaycontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(weekdaycontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const weekdaycontainer_changes = {};
      if (dirty & 1)
        weekdaycontainer_changes.calendar = ctx2[0];
      weekdaycontainer.$set(weekdaycontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(weekdaycontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(weekdaycontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(weekdaycontainer, detaching);
    }
  };
}
function create_default_slot_5(ctx) {
  let monthcontainer;
  let current;
  monthcontainer = new MonthContainer_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(monthcontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(monthcontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const monthcontainer_changes = {};
      if (dirty & 1)
        monthcontainer_changes.calendar = ctx2[0];
      monthcontainer.$set(monthcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(monthcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(monthcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(monthcontainer, detaching);
    }
  };
}
function create_default_slot_4(ctx) {
  let yearcontainer;
  let current;
  yearcontainer = new YearContainer_default({
    props: {
      calendar: ctx[0],
      app: ctx[1].app
    }
  });
  return {
    c() {
      create_component(yearcontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(yearcontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const yearcontainer_changes = {};
      if (dirty & 1)
        yearcontainer_changes.calendar = ctx2[0];
      if (dirty & 2)
        yearcontainer_changes.app = ctx2[1].app;
      yearcontainer.$set(yearcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(yearcontainer, detaching);
    }
  };
}
function create_default_slot_3(ctx) {
  let datefields;
  let current;
  datefields = new DateFields_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(datefields.$$.fragment);
    },
    m(target, anchor) {
      mount_component(datefields, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const datefields_changes = {};
      if (dirty & 1)
        datefields_changes.calendar = ctx2[0];
      datefields.$set(datefields_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(datefields.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(datefields.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(datefields, detaching);
    }
  };
}
function create_default_slot_2(ctx) {
  let eventcontainer;
  let current;
  eventcontainer = new EventContainer_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(eventcontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eventcontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const eventcontainer_changes = {};
      if (dirty & 1)
        eventcontainer_changes.calendar = ctx2[0];
      eventcontainer.$set(eventcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(eventcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eventcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eventcontainer, detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let categorycontainer;
  let current;
  categorycontainer = new CategoryContainer_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(categorycontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(categorycontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const categorycontainer_changes = {};
      if (dirty & 1)
        categorycontainer_changes.calendar = ctx2[0];
      categorycontainer.$set(categorycontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(categorycontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(categorycontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(categorycontainer, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let mooncontainer;
  let current;
  mooncontainer = new MoonContainer_default({ props: { calendar: ctx[0] } });
  return {
    c() {
      create_component(mooncontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mooncontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mooncontainer_changes = {};
      if (dirty & 1)
        mooncontainer_changes.calendar = ctx2[0];
      mooncontainer.$set(mooncontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mooncontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mooncontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mooncontainer, detaching);
    }
  };
}
function create_fragment19(ctx) {
  let div;
  let current;
  let if_block = ctx[2] && create_if_block9(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "class", "fantasy-calendar-creator svelte-1o9isn5");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      ctx[14](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[2]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      ctx[14](null);
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  let ready = false;
  let width;
  let creator;
  onMount(() => {
    $$invalidate(3, width = creator.clientWidth);
    $$invalidate(2, ready = true);
  });
  const dispatch2 = createEventDispatcher();
  let { calendar } = $$props;
  let { plugin } = $$props;
  const back = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("left-arrow-with-tail").setTooltip("Save and exit");
  };
  const cancel = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("cross").setTooltip("Exit without saving");
  };
  const preset = (node) => {
    const presetEl = node.createDiv("fantasy-calendar-apply-preset");
    new import_obsidian13.Setting(presetEl).setName("Apply Preset").setDesc("Apply a common fantasy calendar as a preset.").addButton((b) => {
      b.setCta().setButtonText("Choose Preset").onClick(() => {
        const modal = new CalendarPresetModal(plugin.app);
        modal.onClose = () => {
          if (!modal.saved)
            return;
          $$invalidate(0, calendar = { ...(0, import_fast_copy.default)(modal.preset), id: calendar.id });
          if (calendar?.name == "Gregorian Calendar") {
            const today = new Date();
            $$invalidate(0, calendar.current = {
              year: today.getFullYear(),
              month: today.getMonth(),
              day: today.getDate()
            }, calendar);
          }
        };
        modal.open();
      });
    });
  };
  const info = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("info");
  };
  const weeks = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("info");
  };
  const months = (node) => {
  };
  const years = (node) => {
  };
  const date = (node) => {
  };
  const events = (node) => {
  };
  const cats = (node) => {
  };
  const moons = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("fc-moon");
  };
  let y;
  const click_handler = () => $$invalidate(2, ready = false);
  const click_handler_1 = () => $$invalidate(2, ready = false);
  const scroll_handler = (evt) => console.log(evt);
  const introend_handler = () => dispatch2("flown");
  const outroend_handler = () => dispatch2("exit");
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      creator = $$value;
      $$invalidate(4, creator);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(0, calendar = $$props2.calendar);
    if ("plugin" in $$props2)
      $$invalidate(1, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        window.calendar = calendar;
    }
  };
  return [
    calendar,
    plugin,
    ready,
    width,
    creator,
    dispatch2,
    back,
    cancel,
    preset,
    click_handler,
    click_handler_1,
    scroll_handler,
    introend_handler,
    outroend_handler,
    div_binding
  ];
}
var Creator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment19, safe_not_equal, { calendar: 0, plugin: 1 }, add_css15);
  }
};
var Creator_default = Creator;

// src/settings/ui/Weekdays.svelte
var import_obsidian15 = __toModule(require("obsidian"));

// src/settings/ui/Detail.svelte
var import_obsidian14 = __toModule(require("obsidian"));
function add_css16(target) {
  append_styles(target, "svelte-lbt0gy", ".add-new.svelte-lbt0gy{padding-top:0.75rem;padding-bottom:0.75rem;display:flex;width:100%}");
}
var get_pre_add_slot_changes = (dirty) => ({});
var get_pre_add_slot_context = (ctx) => ({});
function create_fragment20(ctx) {
  let details;
  let summary;
  let h4;
  let t0;
  let t1;
  let t2;
  let div0;
  let add_action;
  let t3;
  let div1;
  let current;
  let mounted;
  let dispose;
  const pre_add_slot_template = ctx[6]["pre-add"];
  const pre_add_slot = create_slot(pre_add_slot_template, ctx, ctx[5], get_pre_add_slot_context);
  const default_slot_template = ctx[6].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[5], null);
  return {
    c() {
      details = element("details");
      summary = element("summary");
      h4 = element("h4");
      t0 = text(ctx[0]);
      t1 = space();
      if (pre_add_slot)
        pre_add_slot.c();
      t2 = space();
      div0 = element("div");
      t3 = space();
      div1 = element("div");
      if (default_slot)
        default_slot.c();
      attr(div0, "class", "add-new svelte-lbt0gy");
      attr(div1, "class", "fantasy-calendar-container");
      details.open = ctx[1];
    },
    m(target, anchor) {
      insert(target, details, anchor);
      append(details, summary);
      append(summary, h4);
      append(h4, t0);
      append(details, t1);
      if (pre_add_slot) {
        pre_add_slot.m(details, null);
      }
      append(details, t2);
      append(details, div0);
      append(details, t3);
      append(details, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      current = true;
      if (!mounted) {
        dispose = action_destroyer(add_action = ctx[2].call(null, div0));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 1)
        set_data(t0, ctx2[0]);
      if (pre_add_slot) {
        if (pre_add_slot.p && (!current || dirty & 32)) {
          update_slot_base(pre_add_slot, pre_add_slot_template, ctx2, ctx2[5], !current ? get_all_dirty_from_scope(ctx2[5]) : get_slot_changes(pre_add_slot_template, ctx2[5], dirty, get_pre_add_slot_changes), get_pre_add_slot_context);
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 32)) {
          update_slot_base(default_slot, default_slot_template, ctx2, ctx2[5], !current ? get_all_dirty_from_scope(ctx2[5]) : get_slot_changes(default_slot_template, ctx2[5], dirty, null), null);
        }
      }
      if (!current || dirty & 2) {
        details.open = ctx2[1];
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(pre_add_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(pre_add_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(details);
      if (pre_add_slot)
        pre_add_slot.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch2 = createEventDispatcher();
  let { label } = $$props;
  let { open = false } = $$props;
  let { disabled = false } = $$props;
  let button;
  const add = (node) => {
    $$invalidate(4, button = new import_obsidian14.ButtonComponent(node).setTooltip("Add New").setButtonText("+").setDisabled(disabled).onClick(async () => {
      dispatch2("new-item");
    }));
    $$invalidate(4, button.buttonEl.style.width = "100%", button);
  };
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(0, label = $$props2.label);
    if ("open" in $$props2)
      $$invalidate(1, open = $$props2.open);
    if ("disabled" in $$props2)
      $$invalidate(3, disabled = $$props2.disabled);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 24) {
      $: {
        if (button) {
          button.setDisabled(disabled);
        }
      }
    }
  };
  return [label, open, add, disabled, button, $$scope, slots];
}
var Detail = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment20, safe_not_equal, { label: 0, open: 1, disabled: 3 }, add_css16);
  }
};
var Detail_default = Detail;

// src/settings/ui/Weekdays.svelte
function add_css17(target) {
  append_styles(target, "svelte-1xaj2n2", ".overflow.svelte-1xaj2n2.svelte-1xaj2n2{padding-top:0.75rem}.weekday.svelte-1xaj2n2.svelte-1xaj2n2{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1xaj2n2 .icon.svelte-1xaj2n2{align-items:center}.weekday.svelte-1xaj2n2.svelte-1xaj2n2{margin-top:0.5rem}");
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i];
  return child_ctx;
}
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  child_ctx[16] = i;
  return child_ctx;
}
function create_else_block8(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value_1 = ctx[2];
  const get_key = (ctx2) => ctx2[17].id;
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_12(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block_12(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[2],
            flipDurationMs: flipDurationMs4,
            dragDisabled: ctx[3]
          })),
          listen(div, "consider", ctx[10]),
          listen(div, "finalize", ctx[11])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 516) {
        each_value_1 = ctx2[2];
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_1, each_1_lookup, div, fix_and_destroy_block, create_each_block_12, null, get_each_context_12);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 12)
        dndzone_action.update.call(null, {
          items: ctx2[2],
          flipDurationMs: flipDurationMs4,
          dragDisabled: ctx2[3]
        });
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_13(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new weekday to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block_12(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(div0, "class", "icon svelte-1xaj2n2");
      attr(div2, "class", "icon svelte-1xaj2n2");
      attr(div3, "class", "weekday svelte-1xaj2n2");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[5].call(null, div0)),
          listen(div0, "mousedown", ctx[9]),
          listen(div0, "touchstart", ctx[9]),
          action_destroyer(name_action = ctx[7].call(null, div1, ctx[17])),
          action_destroyer(trash_action = ctx[6].call(null, div2, ctx[17]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 4)
        name_action.update.call(null, ctx[17]);
      if (trash_action && is_function(trash_action.update) && dirty & 4)
        trash_action.update.call(null, ctx[17]);
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs4 });
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot2(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2].length)
      return create_if_block_13;
    return create_else_block8;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block10(ctx) {
  let div5;
  let div4;
  let div2;
  let t3;
  let div3;
  let select;
  let select_aria_label_value;
  let mounted;
  let dispose;
  let each_value = ctx[2];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  return {
    c() {
      div5 = element("div");
      div4 = element("div");
      div2 = element("div");
      div2.innerHTML = `<div class="setting-item-name">First Day</div> 
                        <div class="setting-item-description">This only effects which day of the week the first
                            year starts on.</div>`;
      t3 = space();
      div3 = element("div");
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div2, "class", "setting-item-info");
      attr(select, "class", "dropdown");
      attr(select, "aria-label", select_aria_label_value = !ctx[1] ? "Cannot be modified without overflow." : void 0);
      if (ctx[0] === void 0)
        add_render_callback(() => ctx[12].call(select));
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item");
      attr(div5, "class", "first-weekday");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div4);
      append(div4, div2);
      append(div4, t3);
      append(div4, div3);
      append(div3, select);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(select, null);
      }
      select_option(select, ctx[0]);
      if (!mounted) {
        dispose = listen(select, "change", ctx[12]);
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 7) {
        each_value = ctx2[2];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & 2 && select_aria_label_value !== (select_aria_label_value = !ctx2[1] ? "Cannot be modified without overflow." : void 0)) {
        attr(select, "aria-label", select_aria_label_value);
      }
      if (dirty & 1) {
        select_option(select, ctx2[0]);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block7(ctx) {
  let option;
  let t_value = (ctx[14].name ?? "") + "";
  let t;
  let option_disabled_value;
  let option_value_value;
  let option_selected_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.disabled = option_disabled_value = !ctx[1];
      option.__value = option_value_value = ctx[16];
      option.value = option.__value;
      option.selected = option_selected_value = ctx[16] == ctx[0];
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t_value !== (t_value = (ctx2[14].name ?? "") + ""))
        set_data(t, t_value);
      if (dirty & 2 && option_disabled_value !== (option_disabled_value = !ctx2[1])) {
        option.disabled = option_disabled_value;
      }
      if (dirty & 1 && option_selected_value !== (option_selected_value = ctx2[16] == ctx2[0])) {
        option.selected = option_selected_value;
      }
    },
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_pre_add_slot(ctx) {
  let div;
  let overflowNode_action;
  let t;
  let if_block_anchor;
  let mounted;
  let dispose;
  let if_block = ctx[2].length && create_if_block10(ctx);
  return {
    c() {
      div = element("div");
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(div, "class", "overflow svelte-1xaj2n2");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      if (!mounted) {
        dispose = action_destroyer(overflowNode_action = ctx[8].call(null, div));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (ctx2[2].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching)
        detach(t);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment21(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Weekdays",
      $$slots: {
        "pre-add": [create_pre_add_slot],
        default: [create_default_slot2]
      },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[4]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1048591) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
var flipDurationMs4 = 300;
function instance21($$self, $$props, $$invalidate) {
  let { firstWeekday = 0 } = $$props;
  let { overflow = true } = $$props;
  const addNew = () => {
    $$invalidate(2, weekdays = [...weekdays, { type: "day", name: null, id: nanoid(6) }]);
  };
  const grip = (node) => {
    (0, import_obsidian15.setIcon)(node, "fantasy-calendar-grip");
  };
  const trash = (node, item) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(2, weekdays = weekdays.filter((day) => day.id !== item.id)));
  };
  const name = (node, item) => {
    const comp = new import_obsidian15.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange((v) => {
      item.name = v;
      dispatch2("weekday-update", weekdays);
      $$invalidate(2, weekdays);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  const overflowNode = (node) => {
    new import_obsidian15.Setting(node).setName("Overflow Weeks").setDesc("Turn this off to make each month start on the first of the week.").addToggle((t) => {
      t.setValue(overflow).onChange((v) => {
        $$invalidate(1, overflow = v);
      });
    });
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(3, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(2, weekdays = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(2, weekdays = newItems);
    if (source === SOURCES.POINTER) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  let { weekdays = [] } = $$props;
  function select_change_handler() {
    firstWeekday = select_value(this);
    $$invalidate(0, firstWeekday);
  }
  $$self.$$set = ($$props2) => {
    if ("firstWeekday" in $$props2)
      $$invalidate(0, firstWeekday = $$props2.firstWeekday);
    if ("overflow" in $$props2)
      $$invalidate(1, overflow = $$props2.overflow);
    if ("weekdays" in $$props2)
      $$invalidate(2, weekdays = $$props2.weekdays);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 4) {
      $: {
        dispatch2("weekday-update", weekdays);
      }
    }
    if ($$self.$$.dirty & 1) {
      $: {
        dispatch2("first-weekday-update", firstWeekday);
      }
    }
    if ($$self.$$.dirty & 2) {
      $: {
        dispatch2("overflow-update", overflow);
      }
    }
  };
  return [
    firstWeekday,
    overflow,
    weekdays,
    dragDisabled,
    addNew,
    grip,
    trash,
    name,
    overflowNode,
    startDrag,
    handleConsider,
    handleFinalize,
    select_change_handler
  ];
}
var Weekdays = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment21, safe_not_equal, {
      firstWeekday: 0,
      overflow: 1,
      weekdays: 2
    }, add_css17);
  }
};
var Weekdays_default = Weekdays;

// src/settings/ui/Months.svelte
var import_obsidian17 = __toModule(require("obsidian"));

// src/settings/ui/Month.svelte
var import_obsidian16 = __toModule(require("obsidian"));
function add_css18(target) {
  append_styles(target, "svelte-1nt6wkb", ".month.svelte-1nt6wkb.svelte-1nt6wkb{display:grid;grid-template-columns:1fr 1fr auto auto;align-items:center;justify-content:space-between;gap:1rem}.month.svelte-1nt6wkb .icon.svelte-1nt6wkb{align-items:center}");
}
function create_fragment22(ctx) {
  let div1;
  let input0;
  let t0;
  let input1;
  let t1;
  let select;
  let option0;
  let option1;
  let t4;
  let div0;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      input0 = element("input");
      t0 = space();
      input1 = element("input");
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = "Month";
      option1 = element("option");
      option1.textContent = "Intercalary";
      t4 = space();
      div0 = element("div");
      attr(input0, "type", "text");
      attr(input0, "spellcheck", "false");
      attr(input0, "placeholder", "Name");
      set_style(input0, "width", "100%");
      attr(input1, "type", "number");
      attr(input1, "spellcheck", "false");
      attr(input1, "placeholder", "Length");
      set_style(input1, "width", "100%");
      attr(input1, "min", "0");
      option0.__value = "month";
      option0.value = option0.__value;
      option1.__value = "intercalary";
      option1.value = option1.__value;
      attr(select, "class", "dropdown");
      if (ctx[0] === void 0)
        add_render_callback(() => ctx[8].call(select));
      attr(div0, "class", "icon svelte-1nt6wkb");
      attr(div1, "class", "month svelte-1nt6wkb");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, input0);
      set_input_value(input0, ctx[1]);
      append(div1, t0);
      append(div1, input1);
      set_input_value(input1, ctx[2]);
      append(div1, t1);
      append(div1, select);
      append(select, option0);
      append(select, option1);
      select_option(select, ctx[0]);
      append(div1, t4);
      append(div1, div0);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[6]),
          listen(input0, "input", ctx[4]),
          listen(input1, "input", ctx[7]),
          listen(input1, "input", ctx[4]),
          listen(select, "change", ctx[8]),
          listen(select, "input", ctx[4]),
          action_destroyer(trash_action = ctx[3].call(null, div0))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2 && input0.value !== ctx2[1]) {
        set_input_value(input0, ctx2[1]);
      }
      if (dirty & 4 && to_number(input1.value) !== ctx2[2]) {
        set_input_value(input1, ctx2[2]);
      }
      if (dirty & 1) {
        select_option(select, ctx2[0]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { month } = $$props;
  let name = month.name;
  let type = month.type;
  let length = month.length;
  const trash = (node) => {
    new import_obsidian16.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      dispatch2("month-delete");
    });
  };
  const update2 = (0, import_obsidian16.debounce)(() => {
    $$invalidate(5, month.name = name, month);
    $$invalidate(5, month.type = type, month);
    $$invalidate(5, month.length = length, month);
    dispatch2("month-update");
  }, 300, true);
  function input0_input_handler() {
    name = this.value;
    $$invalidate(1, name);
  }
  function input1_input_handler() {
    length = to_number(this.value);
    $$invalidate(2, length);
  }
  function select_change_handler() {
    type = select_value(this);
    $$invalidate(0, type);
  }
  $$self.$$set = ($$props2) => {
    if ("month" in $$props2)
      $$invalidate(5, month = $$props2.month);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $: {
        $$invalidate(5, month.type = type, month);
      }
    }
  };
  return [
    type,
    name,
    length,
    trash,
    update2,
    month,
    input0_input_handler,
    input1_input_handler,
    select_change_handler
  ];
}
var Month = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment22, safe_not_equal, { month: 5 }, add_css18);
  }
};
var Month_default = Month;

// src/settings/ui/Months.svelte
function add_css19(target) {
  append_styles(target, "svelte-xv4vbj", ".month.svelte-xv4vbj{display:flex;align-items:center;margin-top:0.5rem;gap:1rem}");
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_else_block9(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[0];
  const get_key = (ctx2) => ctx2[12].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context8(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block8(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[0],
            flipDurationMs: flipDurationMs5,
            dragDisabled: ctx[1]
          })),
          listen(div, "consider", ctx[6]),
          listen(div, "finalize", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 297) {
        each_value = ctx2[0];
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block8, null, get_each_context8);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 3)
        dndzone_action.update.call(null, {
          items: ctx2[0],
          flipDurationMs: flipDurationMs5,
          dragDisabled: ctx2[1]
        });
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block11(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new month to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block8(key_1, ctx) {
  let div1;
  let div0;
  let grip_action;
  let t0;
  let monthinstance;
  let t1;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  function month_delete_handler() {
    return ctx[9](ctx[12]);
  }
  monthinstance = new Month_default({ props: { month: ctx[12] } });
  monthinstance.$on("mousedown", ctx[5]);
  monthinstance.$on("month-delete", month_delete_handler);
  monthinstance.$on("month-update", ctx[10]);
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      create_component(monthinstance.$$.fragment);
      t1 = space();
      attr(div0, "class", "icon");
      attr(div1, "class", "month svelte-xv4vbj");
      this.first = div1;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div1, t0);
      mount_component(monthinstance, div1, null);
      append(div1, t1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[5]),
          listen(div0, "touchstart", ctx[5])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const monthinstance_changes = {};
      if (dirty & 1)
        monthinstance_changes.month = ctx[12];
      monthinstance.$set(monthinstance_changes);
    },
    r() {
      rect = div1.getBoundingClientRect();
    },
    f() {
      fix_position(div1);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div1, rect, flip, { duration: flipDurationMs5 });
    },
    i(local) {
      if (current)
        return;
      transition_in(monthinstance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(monthinstance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(monthinstance);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot3(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block11, create_else_block9];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment23(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Months",
      $$slots: { default: [create_default_slot3] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[2]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 32771) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
var flipDurationMs5 = 300;
function instance23($$self, $$props, $$invalidate) {
  const addNew = () => {
    $$invalidate(0, months = [
      ...months,
      {
        type: "month",
        name: null,
        length: null,
        id: nanoid(6)
      }
    ]);
    dispatch2("month-update", months);
  };
  const deleteMonth = (month) => {
    $$invalidate(0, months = months.filter((m) => m.id != month.id));
    dispatch2("month-update", months);
  };
  const updateMonth = (month) => {
  };
  const grip = (node) => {
    (0, import_obsidian17.setIcon)(node, "fantasy-calendar-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(1, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(0, months = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(1, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(0, months = newItems);
    dispatch2("month-update", months);
    if (source === SOURCES.POINTER) {
      $$invalidate(1, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  let { months = [] } = $$props;
  const month_delete_handler = (month) => deleteMonth(month);
  const month_update_handler = () => dispatch2("month-update", months);
  $$self.$$set = ($$props2) => {
    if ("months" in $$props2)
      $$invalidate(0, months = $$props2.months);
  };
  return [
    months,
    dragDisabled,
    addNew,
    deleteMonth,
    grip,
    startDrag,
    handleConsider,
    handleFinalize,
    dispatch2,
    month_delete_handler,
    month_update_handler
  ];
}
var Months = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance23, create_fragment23, safe_not_equal, { months: 0 }, add_css19);
  }
};
var Months_default = Months;

// src/settings/ui/Event.svelte
var import_obsidian18 = __toModule(require("obsidian"));

// src/settings/ui/Dot.svelte
function add_css20(target) {
  append_styles(target, "svelte-1ldxqlp", ".dot.svelte-1ldxqlp{display:inline-block;height:0.875em;width:0.875em;margin:0 1px}");
}
function create_fragment24(ctx) {
  let svg;
  let circle;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "stroke", ctx[0]);
      attr(circle, "fill", ctx[0]);
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", "dot svelte-1ldxqlp");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "aria-label", ctx[1]);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        attr(circle, "stroke", ctx2[0]);
      }
      if (dirty & 1) {
        attr(circle, "fill", ctx2[0]);
      }
      if (dirty & 2) {
        attr(svg, "aria-label", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance24($$self, $$props, $$invalidate) {
  let { color } = $$props;
  let { label } = $$props;
  $$self.$$set = ($$props2) => {
    if ("color" in $$props2)
      $$invalidate(0, color = $$props2.color);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
  };
  return [color, label];
}
var Dot2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance24, create_fragment24, safe_not_equal, { color: 0, label: 1 }, add_css20);
  }
};
var Dot_default2 = Dot2;

// src/settings/ui/Event.svelte
function add_css21(target) {
  append_styles(target, "svelte-3snb0d", ".event.svelte-3snb0d.svelte-3snb0d{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.event-info.svelte-3snb0d.svelte-3snb0d{width:100%}.icons.svelte-3snb0d.svelte-3snb0d{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.event.svelte-3snb0d .icon.svelte-3snb0d{align-items:center}.date.svelte-3snb0d.svelte-3snb0d{display:flex;justify-content:flex-start;gap:0.25rem}.clamp.svelte-3snb0d.svelte-3snb0d{display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;width:calc(var(--event-max-width) * 0.75)}");
}
function create_if_block12(ctx) {
  let dot;
  let current;
  dot = new Dot_default2({
    props: {
      color: ctx[1].color,
      label: ctx[1].name
    }
  });
  return {
    c() {
      create_component(dot.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dot, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dot_changes = {};
      if (dirty & 2)
        dot_changes.color = ctx2[1].color;
      if (dirty & 2)
        dot_changes.label = ctx2[1].name;
      dot.$set(dot_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dot.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dot.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dot, detaching);
    }
  };
}
function create_fragment25(ctx) {
  let div6;
  let div2;
  let span0;
  let t0;
  let t1_value = ctx[0].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4;
  let span1;
  let t5_value = (ctx[0].description ?? "") + "";
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[1] != null && create_if_block12(ctx);
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      span0 = element("span");
      if (if_block)
        if_block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      div0 = element("div");
      t3 = text(ctx[2]);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      div5 = element("div");
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      attr(span0, "class", "setting-item-name");
      attr(div0, "class", "date svelte-3snb0d");
      attr(span1, "class", "clamp svelte-3snb0d");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "event-info svelte-3snb0d");
      attr(div3, "class", "icon svelte-3snb0d");
      attr(div4, "class", "icon svelte-3snb0d");
      attr(div5, "class", "icons svelte-3snb0d");
      attr(div6, "class", "event svelte-3snb0d");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div2, span0);
      if (if_block)
        if_block.m(span0, null);
      append(span0, t0);
      append(span0, t1);
      append(div2, t2);
      append(div2, div1);
      append(div1, div0);
      append(div0, t3);
      append(div1, t4);
      append(div1, span1);
      append(span1, t5);
      append(div6, t6);
      append(div6, div5);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[5].call(null, div3)),
          listen(div3, "click", ctx[6]),
          action_destroyer(trash_action = ctx[4].call(null, div4)),
          listen(div4, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (ctx2[1] != null) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block12(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(span0, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & 1) && t1_value !== (t1_value = ctx2[0].name + ""))
        set_data(t1, t1_value);
      if (!current || dirty & 4)
        set_data(t3, ctx2[2]);
      if ((!current || dirty & 1) && t5_value !== (t5_value = (ctx2[0].description ?? "") + ""))
        set_data(t5, t5_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance25($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  const trash = (node) => {
    let b = new import_obsidian18.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian18.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  let { event } = $$props;
  let { category } = $$props;
  let { date } = $$props;
  const click_handler = () => dispatch2("edit");
  const click_handler_1 = () => dispatch2("delete");
  $$self.$$set = ($$props2) => {
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("category" in $$props2)
      $$invalidate(1, category = $$props2.category);
    if ("date" in $$props2)
      $$invalidate(2, date = $$props2.date);
  };
  return [event, category, date, dispatch2, trash, edit, click_handler, click_handler_1];
}
var Event = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance25, create_fragment25, safe_not_equal, { event: 0, category: 1, date: 2 }, add_css21);
  }
};
var Event_default = Event;

// src/settings/ui/Events.svelte
function get_each_context9(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block10(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 31) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context9(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block9(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block13(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new event to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block9(ctx) {
  let eventui;
  let current;
  function edit_handler() {
    return ctx[6](ctx[10]);
  }
  function delete_handler() {
    return ctx[7](ctx[10]);
  }
  eventui = new Event_default({
    props: {
      event: ctx[10],
      category: ctx[4](ctx[10].category),
      date: dateString(ctx[10].date, ctx[1], ctx[10].end)
    }
  });
  eventui.$on("edit", edit_handler);
  eventui.$on("delete", delete_handler);
  return {
    c() {
      create_component(eventui.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eventui, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const eventui_changes = {};
      if (dirty & 1)
        eventui_changes.event = ctx[10];
      if (dirty & 1)
        eventui_changes.category = ctx[4](ctx[10].category);
      if (dirty & 3)
        eventui_changes.date = dateString(ctx[10].date, ctx[1], ctx[10].end);
      eventui.$set(eventui_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(eventui.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eventui.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eventui, detaching);
    }
  };
}
function create_default_slot4(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block13, create_else_block10];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment26(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Event",
      $$slots: { default: [create_default_slot4] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[8]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 8195) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance26($$self, $$props, $$invalidate) {
  let { categories = [] } = $$props;
  let { events = [] } = $$props;
  let { months = [] } = $$props;
  const dispatch2 = createEventDispatcher();
  const editEvent = (item) => {
    dispatch2("new-item", item);
  };
  const deleteEvent = (item) => {
    $$invalidate(0, events = events.filter((event) => event.id !== item.id));
    dispatch2("edit-events", events);
  };
  const getCategory = (category) => {
    return categories.find(({ id }) => id == category);
  };
  const edit_handler = (event) => editEvent(event);
  const delete_handler = (event) => deleteEvent(event);
  function new_item_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("categories" in $$props2)
      $$invalidate(5, categories = $$props2.categories);
    if ("events" in $$props2)
      $$invalidate(0, events = $$props2.events);
    if ("months" in $$props2)
      $$invalidate(1, months = $$props2.months);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $: {
        events.sort((a, b) => {
          if (a.date.year != b.date.year) {
            return a.date.year - b.date.year;
          }
          if (a.date.month != b.date.month) {
            return a.date.month - b.date.month;
          }
          return a.date.day - b.date.day;
        });
      }
    }
  };
  return [
    events,
    months,
    editEvent,
    deleteEvent,
    getCategory,
    categories,
    edit_handler,
    delete_handler,
    new_item_handler
  ];
}
var Events = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance26, create_fragment26, safe_not_equal, { categories: 5, events: 0, months: 1 });
  }
};
var Events_default = Events;

// src/settings/ui/Categories.svelte
var import_obsidian19 = __toModule(require("obsidian"));
function add_css22(target) {
  append_styles(target, "svelte-1ok7o99", ".category.svelte-1ok7o99{display:grid;grid-template-columns:1fr auto auto;align-items:center;gap:0.5rem;padding-top:0.75rem}");
}
function get_each_context10(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_else_block11(ctx) {
  let div;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block10(get_each_context10(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty & 9) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context10(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block10(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block14(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new category to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block10(ctx) {
  let div3;
  let div0;
  let name_action;
  let t0;
  let div1;
  let input;
  let input_value_value;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let mounted;
  let dispose;
  function change_handler(...args) {
    return ctx[5](ctx[7], ...args);
  }
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      input = element("input");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(input, "type", "color");
      input.value = input_value_value = ctx[7].color;
      attr(div1, "class", "color");
      attr(div3, "class", "category svelte-1ok7o99");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div1, input);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(name_action = ctx[1].call(null, div0, ctx[7])),
          listen(input, "change", change_handler),
          action_destroyer(trash_action = ctx[2].call(null, div2, ctx[7]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 1)
        name_action.update.call(null, ctx[7]);
      if (dirty & 1 && input_value_value !== (input_value_value = ctx[7].color)) {
        input.value = input_value_value;
      }
      if (trash_action && is_function(trash_action.update) && dirty & 1)
        trash_action.update.call(null, ctx[7]);
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot5(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return create_if_block14;
    return create_else_block11;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment27(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Event Categories",
      $$slots: { default: [create_default_slot5] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[4]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1025) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance27($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { categories = [] } = $$props;
  const name = (node, category) => {
    const comp = new import_obsidian19.TextComponent(node).setValue(category.name).setPlaceholder("Name").onChange((v) => {
      category.name = v;
      dispatch2("update", category);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  const trash = (node, item) => {
    new import_obsidian19.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      $$invalidate(0, categories = categories.filter((category) => category.id !== item.id));
      dispatch2("delete", item);
    });
  };
  const updateColor = (event, category) => {
    const { target } = event;
    if (!(target instanceof HTMLInputElement))
      return;
    category.color = target.value;
    dispatch2("update", category);
  };
  const addNew = () => {
    const cat = {
      id: nanoid(6),
      color: DEFAULT_CATEGORY_COLOR,
      name: "Category"
    };
    $$invalidate(0, categories);
    dispatch2("new", cat);
  };
  const change_handler = (category, evt) => updateColor(evt, category);
  $$self.$$set = ($$props2) => {
    if ("categories" in $$props2)
      $$invalidate(0, categories = $$props2.categories);
  };
  return [categories, name, trash, updateColor, addNew, change_handler];
}
var Categories = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance27, create_fragment27, safe_not_equal, { categories: 0 }, add_css22);
  }
};
var Categories_default = Categories;

// src/settings/ui/Year.svelte
var import_obsidian20 = __toModule(require("obsidian"));
function add_css23(target) {
  append_styles(target, "svelte-1f06yhl", ".use-custom.svelte-1f06yhl.svelte-1f06yhl{padding-top:0.75rem}.weekday.svelte-1f06yhl.svelte-1f06yhl{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1f06yhl .icon.svelte-1f06yhl{align-items:center}.weekday.svelte-1f06yhl.svelte-1f06yhl{margin-top:0.5rem}");
}
function get_each_context11(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
}
function create_else_block12(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value = ctx[1];
  const get_key = (ctx2) => ctx2[13].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context11(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block11(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[1],
            flipDurationMs: flipDurationMs6,
            dragDisabled: ctx[2]
          })),
          listen(div, "consider", ctx[9]),
          listen(div, "finalize", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 258) {
        each_value = ctx2[1];
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_destroy_block, create_each_block11, null, get_each_context11);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 6)
        dndzone_action.update.call(null, {
          items: ctx2[1],
          flipDurationMs: flipDurationMs6,
          dragDisabled: ctx2[2]
        });
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block15(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new year to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block11(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(div0, "class", "icon svelte-1f06yhl");
      attr(div2, "class", "icon svelte-1f06yhl");
      attr(div3, "class", "weekday svelte-1f06yhl");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[8]),
          listen(div0, "touchstart", ctx[8]),
          action_destroyer(name_action = ctx[6].call(null, div1, ctx[13])),
          action_destroyer(trash_action = ctx[5].call(null, div2, ctx[13]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 2)
        name_action.update.call(null, ctx[13]);
      if (trash_action && is_function(trash_action.update) && dirty & 2)
        trash_action.update.call(null, ctx[13]);
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs6 });
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot6(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[1] || !ctx2[1].length)
      return create_if_block15;
    return create_else_block12;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_pre_add_slot2(ctx) {
  let div;
  let customNode_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "use-custom svelte-1f06yhl");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(customNode_action = ctx[7].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment28(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Years",
      disabled: !ctx[0],
      $$slots: {
        "pre-add": [create_pre_add_slot2],
        default: [create_default_slot6]
      },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[3]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1)
        detail_changes.disabled = !ctx2[0];
      if (dirty & 65542) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
var flipDurationMs6 = 300;
function instance28($$self, $$props, $$invalidate) {
  let { useCustomYears } = $$props;
  let { years } = $$props;
  const addNew = () => {
    if (!years)
      $$invalidate(1, years = []);
    $$invalidate(1, years = [...years, { name: null, id: nanoid(6), type: "year" }]);
  };
  const grip = (node) => {
    (0, import_obsidian20.setIcon)(node, "fantasy-calendar-grip");
  };
  const trash = (node, item) => {
    new import_obsidian20.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(1, years = years.filter((year) => year.id !== item.id)));
  };
  const name = (node, item) => {
    const comp = new import_obsidian20.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange((v) => {
      item.name = v;
      dispatch2("years-update", years);
      $$invalidate(1, years);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  let { app } = $$props;
  const customNode = (node) => {
    new import_obsidian20.Setting(node).setName("Use Custom Years").setDesc(createFragment((el) => {
      el.createSpan({
        text: "Create custom years to display instead of incrementing from 1."
      });
      el.createEl("br");
      el.createSpan({ text: "If on, " });
      el.createEl("strong", {
        text: "only the years added below will be displayed."
      });
      return el;
    })).addToggle((t) => {
      let skip = false;
      t.setValue(useCustomYears).onChange(async (v) => {
        if (!skip && useCustomYears && years?.length) {
          if (await confirmWithModal(app, "The custom years you have created will be removed. Proceed?")) {
            $$invalidate(1, years = []);
            $$invalidate(0, useCustomYears = v);
            skip = false;
          }
          skip = true;
          t.setValue(useCustomYears);
        } else {
          skip = false;
          $$invalidate(0, useCustomYears = v);
        }
      });
    });
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(2, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(1, years = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(2, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(1, years = newItems);
    if (source === SOURCES.POINTER) {
      $$invalidate(2, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  $$self.$$set = ($$props2) => {
    if ("useCustomYears" in $$props2)
      $$invalidate(0, useCustomYears = $$props2.useCustomYears);
    if ("years" in $$props2)
      $$invalidate(1, years = $$props2.years);
    if ("app" in $$props2)
      $$invalidate(11, app = $$props2.app);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2) {
      $: {
        dispatch2("years-update", years);
      }
    }
    if ($$self.$$.dirty & 1) {
      $: {
        dispatch2("use-custom-update", useCustomYears);
      }
    }
  };
  return [
    useCustomYears,
    years,
    dragDisabled,
    addNew,
    grip,
    trash,
    name,
    customNode,
    startDrag,
    handleConsider,
    handleFinalize,
    app
  ];
}
var Year = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance28, create_fragment28, safe_not_equal, { useCustomYears: 0, years: 1, app: 11 }, add_css23);
  }
};
var Year_default = Year;

// src/settings/modals/event.ts
var import_obsidian23 = __toModule(require("obsidian"));

// src/suggester/suggester.ts
var import_obsidian21 = __toModule(require("obsidian"));

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element2 = state.elements[name];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element2.removeAttribute(name2);
      } else {
        element2.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element2 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element2, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle2(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets;
  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === "function" ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref4) {
  var state = _ref4.state, options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance45 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance45.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance45.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance45.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance45.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash2 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash3 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash3[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element2) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle2(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element2) {
  var rect = getBoundingClientRect(element2);
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip2(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip2,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = popperOffsets2[mainAxis] + overflow[mainSide];
    var max2 = popperOffsets2[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets2[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets2[mainAxis] + maxOffset - offsetModifierValue;
    if (checkMainAxis) {
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = rect.width / element2.offsetWidth || 1;
  var scaleY = rect.height / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce3(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
      return self2.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance45 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance45.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance45
            }) || state;
          }
        }
      },
      update: debounce3(function() {
        return new Promise(function(resolve) {
          instance45.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance45;
    }
    instance45.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance45,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance45;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggester/suggester.ts
var Suggester = class {
  constructor(owner, containerEl, scope) {
    this.containerEl = containerEl;
    this.owner = owner;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", () => {
      this.setSelectedItem(this.selectedItem - 1, true);
      return false;
    });
    scope.register([], "ArrowDown", () => {
      this.setSelectedItem(this.selectedItem + 1, true);
      return false;
    });
    scope.register([], "Enter", (evt) => {
      this.useSelectedItem(evt);
      return false;
    });
    scope.register([], "Tab", (evt) => {
      this.chooseSuggestion(evt);
      return false;
    });
  }
  chooseSuggestion(evt) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.onChooseSuggestion(currentValue, evt);
    }
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(event, el) {
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  empty() {
    this.containerEl.empty();
  }
  setSuggestions(items) {
    this.containerEl.empty();
    const els = [];
    items.forEach((item) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(item, suggestionEl);
      els.push(suggestionEl);
    });
    this.items = items;
    this.suggestions = els;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  wrap(value, size) {
    return (value % size + size) % size;
  }
  setSelectedItem(index, scroll) {
    const nIndex = this.wrap(index, this.suggestions.length);
    const prev = this.suggestions[this.selectedItem];
    const next2 = this.suggestions[nIndex];
    if (prev)
      prev.removeClass("is-selected");
    if (next2)
      next2.addClass("is-selected");
    this.selectedItem = nIndex;
    if (scroll) {
      next2.scrollIntoView(false);
    }
  }
};
var SuggestionModal = class extends import_obsidian21.FuzzySuggestModal {
  constructor(app, inputEl, items) {
    super(app);
    this.items = [];
    this.scope = new import_obsidian21.Scope();
    this.emptyStateText = "No match found";
    this.limit = 100;
    this.inputEl = inputEl;
    this.items = items;
    this.suggestEl = createDiv("suggestion-container");
    this.contentEl = this.suggestEl.createDiv("suggestion");
    this.suggester = new Suggester(this, this.contentEl, this.scope);
    this.scope.register([], "Escape", this.onEscape.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onFocus.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  empty() {
    this.suggester.empty();
  }
  onInputChanged() {
    if (this.shouldNotOpen)
      return;
    const inputStr = this.modifyInput(this.inputEl.value);
    const suggestions = this.getSuggestions(inputStr);
    if (suggestions.length > 0) {
      this.suggester.setSuggestions(suggestions.slice(0, this.limit));
    } else {
      this.onNoSuggestion();
    }
    this.open();
  }
  onFocus() {
    this.shouldNotOpen = false;
    this.onInputChanged();
  }
  modifyInput(input) {
    return input;
  }
  onNoSuggestion() {
    this.empty();
    this.renderSuggestion(null, this.contentEl.createDiv("suggestion-item"));
  }
  open() {
    this.app.keymap.pushScope(this.scope);
    document.body.appendChild(this.suggestEl);
    this.popper = createPopper(this.inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 10]
          }
        },
        {
          name: "flip",
          options: {
            fallbackPlacements: ["top"]
          }
        }
      ]
    });
  }
  onEscape() {
    this.close();
    this.shouldNotOpen = true;
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggester.setSuggestions([]);
    if (this.popper) {
      this.popper.destroy();
    }
    this.suggestEl.detach();
  }
  createPrompt(prompts) {
    if (!this.promptEl)
      this.promptEl = this.suggestEl.createDiv("prompt-instructions");
    let prompt = this.promptEl.createDiv("prompt-instruction");
    for (let p of prompts) {
      prompt.appendChild(p);
    }
  }
};

// src/suggester/path.ts
var import_obsidian22 = __toModule(require("obsidian"));
var PathSuggestionModal = class extends SuggestionModal {
  constructor(app, input, items) {
    super(app, input.inputEl, items);
    this.files = [...items];
    this.text = input;
    this.createPrompts();
    this.inputEl.addEventListener("input", this.getFile.bind(this));
  }
  createPrompts() {
    this.createPrompt([
      createSpan({
        cls: "prompt-instruction-command",
        text: "Type #"
      }),
      createSpan({ text: "to link heading" })
    ]);
    this.createPrompt([
      createSpan({
        cls: "prompt-instruction-command",
        text: "Type ^"
      }),
      createSpan({ text: "to link blocks" })
    ]);
    this.createPrompt([
      createSpan({
        cls: "prompt-instruction-command",
        text: "Note: "
      }),
      createSpan({
        text: "Blocks must have been created already"
      })
    ]);
  }
  getFile() {
    const v = this.inputEl.value, file = this.app.metadataCache.getFirstLinkpathDest(v.split(/[\^#]/).shift() || "", "");
    if (file == this.file)
      return;
    this.file = file;
    if (this.file)
      this.cache = this.app.metadataCache.getFileCache(this.file);
    this.onInputChanged();
  }
  getItemText(item) {
    if (item instanceof import_obsidian22.TFile)
      return item.path;
    if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      return item.heading;
    }
    if (Object.prototype.hasOwnProperty.call(item, "id")) {
      return item.id;
    }
  }
  onChooseItem(item) {
    if (item instanceof import_obsidian22.TFile) {
      this.text.setValue(item.basename);
      this.file = item;
      this.cache = this.app.metadataCache.getFileCache(this.file);
    } else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      this.text.setValue(this.file.basename + "#" + item.heading);
    } else if (Object.prototype.hasOwnProperty.call(item, "id")) {
      this.text.setValue(this.file.basename + "^" + item.id);
    }
  }
  selectSuggestion({ item }) {
    let link;
    if (item instanceof import_obsidian22.TFile) {
      this.file = item;
      link = item.basename;
    } else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      link = this.file.basename + "#" + item.heading;
    } else if (Object.prototype.hasOwnProperty.call(item, "id")) {
      link = this.file.basename + "^" + item.id;
    }
    this.text.setValue(link);
    this.close();
    this.onClose();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    if (item instanceof import_obsidian22.TFile) {
      let pathLength = item.path.length - item.name.length;
      const matchElements = matches.matches.map((m) => {
        return createSpan("suggestion-highlight");
      });
      for (let i = pathLength; i < item.path.length - item.extension.length - 1; i++) {
        let match = matches.matches.find((m) => m[0] === i);
        if (match) {
          let element2 = matchElements[matches.matches.indexOf(match)];
          content.appendChild(element2);
          element2.appendText(item.path.substring(match[0], match[1]));
          i += match[1] - match[0] - 1;
          continue;
        }
        content.appendText(item.path[i]);
      }
      el.createDiv({
        cls: "suggestion-note",
        text: item.path
      });
    } else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      content.setText(item.heading);
      content.prepend(createSpan({
        cls: "suggestion-flair",
        text: `H${item.level}`
      }));
    } else if (Object.prototype.hasOwnProperty.call(item, "id")) {
      content.setText(item.id);
    }
  }
  get headings() {
    if (!this.file)
      return [];
    if (!this.cache) {
      this.cache = this.app.metadataCache.getFileCache(this.file);
    }
    return this.cache.headings || [];
  }
  get blocks() {
    if (!this.file)
      return [];
    if (!this.cache) {
      this.cache = this.app.metadataCache.getFileCache(this.file);
    }
    return Object.values(this.cache.blocks || {}) || [];
  }
  getItems() {
    const v = this.inputEl.value;
    if (/#/.test(v)) {
      this.modifyInput = (i) => i.split(/#/).pop();
      return this.headings;
    } else if (/\^/.test(v)) {
      this.modifyInput = (i) => i.split(/\^/).pop();
      return this.blocks;
    }
    return this.files;
  }
};

// src/settings/modals/event.ts
var CreateEventModal = class extends import_obsidian23.Modal {
  constructor(app, calendar, event, date) {
    super(app);
    this.calendar = calendar;
    this.saved = false;
    this.event = {
      name: null,
      description: null,
      date: {
        month: null,
        day: null,
        year: null
      },
      id: nanoid(6),
      note: null,
      category: null
    };
    if (event) {
      this.event = { ...event };
      this.editing = true;
    }
    if (date) {
      this.event.date = { ...date };
    }
    this.containerEl.addClass("fantasy-calendar-create-event");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Event" : "New Event"
    });
    this.infoEl = this.contentEl.createDiv("event-info");
    this.buildInfo();
    this.dateEl = this.contentEl.createDiv("event-date");
    this.buildDate();
    new import_obsidian23.Setting(this.contentEl).addButton((b) => {
      b.setButtonText("Save").setCta().onClick(() => {
        if (!this.event.name?.length) {
          new import_obsidian23.Notice("The event must have a name.");
          return;
        }
        if (this.event.end) {
          this.event.end = {
            year: this.event.end.year ?? this.event.date.year,
            month: this.event.end.month ?? this.event.date.month,
            day: this.event.end.day ?? this.event.date.day
          };
          const date = this.event.date;
          const end2 = this.event.end;
          const maxDays = Math.max(...this.calendar.static.months.map((m) => m.length));
          const totalDays = maxDays * this.calendar.static.months.length;
          const dateNumber = (date.year - 1) * totalDays + (date.month ?? -1) * maxDays + date.day;
          const endNumber = (end2.year - 1) * totalDays + (end2.month ?? -1) * maxDays + end2.day;
          if (dateNumber > endNumber) {
            const temp = { ...this.event.end };
            this.event.end = { ...this.event.date };
            this.event.date = { ...temp };
          }
        }
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
    });
  }
  buildDate() {
    this.dateEl.empty();
    this.buildStartDate();
    this.endEl = this.dateEl.createDiv();
    if (!this.event.end) {
      new import_obsidian23.Setting(this.endEl).setName("Add End Date").addToggle((t) => {
        t.setValue(false).onChange((v) => this.buildEndDate());
      });
    } else {
      this.buildEndDate();
    }
    this.stringEl = this.dateEl.createDiv("event-date-string setting-item-description");
    this.buildDateString();
  }
  buildStartDate() {
    this.startEl = this.dateEl.createDiv("fantasy-calendar-event-date");
    this.startEl.createSpan({ text: "Start:" });
    this.startDateEl = this.startEl.createDiv("fantasy-calendar-date-fields");
    this.buildDateFields(this.startDateEl, this.event.date);
  }
  buildEndDate() {
    this.event.end = this.event.end ?? { ...this.event.date };
    this.endEl.empty();
    this.endEl.addClass("fantasy-calendar-event-date");
    this.endEl.createSpan({ text: "End:" });
    this.endDateEl = this.endEl.createDiv("fantasy-calendar-date-fields");
    this.buildDateFields(this.endDateEl, this.event.end);
  }
  buildDateString() {
    this.stringEl.empty();
    this.stringEl.createSpan({
      text: dateString(this.event.date, this.calendar.static.months, this.event.end)
    });
  }
  buildDateFields(el, field = this.event.date) {
    el.empty();
    const dayEl = el.createDiv("fantasy-calendar-date-field");
    dayEl.createEl("label", { text: "Day" });
    const day = new import_obsidian23.TextComponent(dayEl).setPlaceholder("Day").setValue(`${field.day}`).onChange((v) => {
      field.day = Number(v);
      this.buildDateString();
    });
    day.inputEl.setAttr("type", "number");
    const monthEl = el.createDiv("fantasy-calendar-date-field");
    monthEl.createEl("label", { text: "Month" });
    new import_obsidian23.DropdownComponent(monthEl).addOptions(Object.fromEntries([
      ["select", "Select Month"],
      ...this.calendar.static.months.map((month) => [
        month.name,
        month.name
      ])
    ])).setValue(field.month != void 0 ? this.calendar.static.months[field.month].name : "select").onChange((v) => {
      if (v === "select")
        field.month = null;
      const index = this.calendar.static.months.find((m) => m.name == v);
      field.month = this.calendar.static.months.indexOf(index);
      this.buildDateString();
    });
    const yearEl = el.createDiv("fantasy-calendar-date-field");
    yearEl.createEl("label", { text: "Year" });
    const year = new import_obsidian23.TextComponent(yearEl).setPlaceholder("Year").setValue(`${field.year}`).onChange((v) => {
      if (!v || v == void 0) {
        field.year = void 0;
      } else {
        field.year = Number(v);
      }
      this.buildDateString();
    });
    year.inputEl.setAttr("type", "number");
  }
  buildInfo() {
    this.infoEl.empty();
    new import_obsidian23.Setting(this.infoEl).setName("Note").setDesc("Link the event to a note.").addText((text2) => {
      let files = this.app.vault.getFiles();
      text2.setPlaceholder("Path");
      if (this.event.note) {
        const note = this.app.vault.getAbstractFileByPath(this.event.note);
        if (note && note instanceof import_obsidian23.TFile) {
          text2.setValue(note.basename);
        }
      }
      const modal = new PathSuggestionModal(this.app, text2, [
        ...files
      ]);
      modal.onClose = async () => {
        text2.inputEl.blur();
        this.event.note = modal.file.path;
        this.tryParse(modal.file);
      };
    });
    new import_obsidian23.Setting(this.infoEl).setName("Event Name").addText((t) => t.setPlaceholder("Event Name").setValue(this.event.name).onChange((v) => {
      this.event.name = v;
    }));
    const descriptionEl = this.infoEl.createDiv("event-description");
    descriptionEl.createEl("label", { text: "Event Description" });
    new import_obsidian23.TextAreaComponent(descriptionEl).setPlaceholder("Event Description").setValue(this.event.description).onChange((v) => {
      this.event.description = v;
    });
    new import_obsidian23.Setting(this.infoEl).setName("Event Category").addDropdown((d) => {
      const options = Object.fromEntries(this.calendar.categories.map((category) => {
        return [category.id, category.name];
      }));
      d.addOptions(options).setValue(this.event.category).onChange((v) => this.event.category = v);
    });
  }
  async tryParse(file) {
    this.event.name = file.basename;
    const cache = this.app.metadataCache.getFileCache(file);
    const { frontmatter } = cache;
    if (frontmatter) {
      if ("fc-date" in frontmatter) {
        const { day, month, year } = frontmatter["fc-date"];
        if (day)
          this.event.date.day = day;
        if (month) {
          if (typeof month === "string") {
            const indexer = this.calendar.static.months?.find((m) => m.name == month) ?? this.calendar.static.months?.[0];
            this.event.date.month = this.calendar.static.months?.indexOf(indexer);
          }
          if (typeof month == "number") {
            this.event.date.month = month - 1;
          }
        }
        if (year)
          this.event.date.year = year;
      }
      if ("fc-category" in frontmatter) {
        if (!this.calendar.categories.find((c) => c.name === frontmatter["fc-category"])) {
          this.calendar.categories.push({
            name: frontmatter["fantasy-category"],
            color: "#808080",
            id: nanoid(6)
          });
        }
        this.event.category = this.calendar.categories.find((c) => c.name === frontmatter["fc-category"])?.id;
      }
    }
    await this.display();
  }
  async onOpen() {
    await this.display();
  }
};

// src/settings/ui/Moons.svelte
var import_obsidian24 = __toModule(require("obsidian"));
function add_css24(target) {
  append_styles(target, "svelte-v24qmo", ".moon.svelte-v24qmo{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.setting-item-name.svelte-v24qmo{display:flex;align-items:center}.icons.svelte-v24qmo{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.icon.svelte-v24qmo{align-items:center}");
}
function get_each_context12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block13(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block12(get_each_context12(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 35) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context12(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block12(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block16(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new moon to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block12(ctx) {
  let div6;
  let div2;
  let span;
  let moonsvg;
  let t0;
  let t1_value = ctx[10].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4_value = ctx[10].cycle + "";
  let t4;
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let t8;
  let current;
  let mounted;
  let dispose;
  moonsvg = new Moon_default({
    props: {
      moon: ctx[10],
      phase: "First Quarter",
      label: false,
      size: 20
    }
  });
  function click_handler() {
    return ctx[7](ctx[10]);
  }
  function click_handler_1() {
    return ctx[8](ctx[10]);
  }
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      span = element("span");
      create_component(moonsvg.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      div0 = element("div");
      t3 = text("Cycle: ");
      t4 = text(t4_value);
      t5 = text(" days");
      t6 = space();
      div5 = element("div");
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      t8 = space();
      attr(span, "class", "setting-item-name svelte-v24qmo");
      attr(div0, "class", "date");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "moon-info");
      attr(div3, "class", "icon svelte-v24qmo");
      attr(div4, "class", "icon svelte-v24qmo");
      attr(div5, "class", "icons svelte-v24qmo");
      attr(div6, "class", "moon svelte-v24qmo");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div2, span);
      mount_component(moonsvg, span, null);
      append(span, t0);
      append(span, t1);
      append(div2, t2);
      append(div2, div1);
      append(div1, div0);
      append(div0, t3);
      append(div0, t4);
      append(div0, t5);
      append(div6, t6);
      append(div6, div5);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      append(div6, t8);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[4].call(null, div3)),
          listen(div3, "click", click_handler),
          action_destroyer(trash_action = ctx[3].call(null, div4)),
          listen(div4, "click", click_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const moonsvg_changes = {};
      if (dirty & 1)
        moonsvg_changes.moon = ctx[10];
      moonsvg.$set(moonsvg_changes);
      if ((!current || dirty & 1) && t1_value !== (t1_value = ctx[10].name + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & 1) && t4_value !== (t4_value = ctx[10].cycle + ""))
        set_data(t4, t4_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(moonsvg.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moonsvg.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      destroy_component(moonsvg);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot7(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block16, create_else_block13];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_pre_add_slot3(ctx) {
  let div;
  let display_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(display_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment29(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Moons",
      $$slots: {
        "pre-add": [create_pre_add_slot3],
        default: [create_default_slot7]
      },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[9]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 8193) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance29($$self, $$props, $$invalidate) {
  let { moons = [] } = $$props;
  let { displayMoons = true } = $$props;
  const dispatch2 = createEventDispatcher();
  const display = (node) => {
    new import_obsidian24.Setting(node).setName("Display Moons").setDesc("Display moons by default when viewing this calendar.").addToggle((t) => {
      t.setValue(displayMoons).onChange((v) => dispatch2("display-toggle", v));
    });
  };
  const trash = (node) => {
    let b = new import_obsidian24.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian24.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  const deleteMoon = (item) => {
    $$invalidate(0, moons = moons.filter((moon) => moon.id !== item.id));
    dispatch2("edit-moons", moons);
  };
  const click_handler = (moon) => dispatch2("new-item", moon);
  const click_handler_1 = (moon) => deleteMoon(moon);
  function new_item_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("moons" in $$props2)
      $$invalidate(0, moons = $$props2.moons);
    if ("displayMoons" in $$props2)
      $$invalidate(6, displayMoons = $$props2.displayMoons);
  };
  return [
    moons,
    dispatch2,
    display,
    trash,
    edit,
    deleteMoon,
    displayMoons,
    click_handler,
    click_handler_1,
    new_item_handler
  ];
}
var Moons = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance29, create_fragment29, safe_not_equal, { moons: 0, displayMoons: 6 }, add_css24);
  }
};
var Moons_default = Moons;

// src/settings/ui/LeapDay.svelte
var import_obsidian25 = __toModule(require("obsidian"));
function add_css25(target) {
  append_styles(target, "svelte-1rh93fc", ".leapday.svelte-1rh93fc.svelte-1rh93fc{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.leapday-info.svelte-1rh93fc.svelte-1rh93fc{width:100%}.icons.svelte-1rh93fc.svelte-1rh93fc{display:flex;align-self:center;justify-self:flex-end;align-items:center}.leapday.svelte-1rh93fc .icon.svelte-1rh93fc{align-items:center}");
}
function create_fragment30(ctx) {
  let div5;
  let div1;
  let span;
  let t0_value = ctx[0].name + "";
  let t0;
  let t1;
  let div0;
  let t2;
  let t3;
  let div4;
  let div2;
  let edit_action;
  let t4;
  let div3;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div5 = element("div");
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = text(ctx[1]);
      t3 = space();
      div4 = element("div");
      div2 = element("div");
      t4 = space();
      div3 = element("div");
      attr(span, "class", "setting-item-name");
      attr(div0, "class", "setting-item-description");
      attr(div1, "class", "leapday-info svelte-1rh93fc");
      attr(div2, "class", "icon svelte-1rh93fc");
      attr(div3, "class", "icon svelte-1rh93fc");
      attr(div4, "class", "icons svelte-1rh93fc");
      attr(div5, "class", "leapday svelte-1rh93fc");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div1);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      append(div0, t2);
      append(div5, t3);
      append(div5, div4);
      append(div4, div2);
      append(div4, t4);
      append(div4, div3);
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[4].call(null, div2)),
          listen(div2, "click", ctx[5]),
          action_destroyer(trash_action = ctx[3].call(null, div3)),
          listen(div3, "click", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & 2)
        set_data(t2, ctx2[1]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div5);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance30($$self, $$props, $$invalidate) {
  let description;
  const dispatch2 = createEventDispatcher();
  const trash = (node) => {
    let b = new import_obsidian25.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian25.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  let { leapday } = $$props;
  const click_handler = () => dispatch2("edit");
  const click_handler_1 = () => dispatch2("delete");
  $$self.$$set = ($$props2) => {
    if ("leapday" in $$props2)
      $$invalidate(0, leapday = $$props2.leapday);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, description = getIntervalDescription(leapday));
    }
  };
  return [leapday, description, dispatch2, trash, edit, click_handler, click_handler_1];
}
var LeapDay = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance30, create_fragment30, safe_not_equal, { leapday: 0 }, add_css25);
  }
};
var LeapDay_default = LeapDay;

// src/settings/ui/LeapDays.svelte
function get_each_context13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_else_block14(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block13(get_each_context13(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 7) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context13(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block13(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block17(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new leap day to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block13(ctx) {
  let leapdayui;
  let current;
  function edit_handler() {
    return ctx[3](ctx[7]);
  }
  function delete_handler() {
    return ctx[4](ctx[7]);
  }
  leapdayui = new LeapDay_default({ props: { leapday: ctx[7] } });
  leapdayui.$on("edit", edit_handler);
  leapdayui.$on("delete", delete_handler);
  return {
    c() {
      create_component(leapdayui.$$.fragment);
    },
    m(target, anchor) {
      mount_component(leapdayui, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const leapdayui_changes = {};
      if (dirty & 1)
        leapdayui_changes.leapday = ctx[7];
      leapdayui.$set(leapdayui_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(leapdayui.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(leapdayui.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(leapdayui, detaching);
    }
  };
}
function create_default_slot8(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block17, create_else_block14];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment31(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Leap Days",
      $$slots: { default: [create_default_slot8] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[5]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1025) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance31($$self, $$props, $$invalidate) {
  let { leapdays = [] } = $$props;
  const dispatch2 = createEventDispatcher();
  const editLeapDay = (item) => {
    dispatch2("new-item", item);
  };
  const deleteLeapDay = (item) => {
    $$invalidate(0, leapdays = leapdays.filter((leapday) => leapday.id !== item.id));
    dispatch2("edit-leapdays", leapdays);
  };
  const edit_handler = (leapday) => editLeapDay(leapday);
  const delete_handler = (leapday) => deleteLeapDay(leapday);
  function new_item_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("leapdays" in $$props2)
      $$invalidate(0, leapdays = $$props2.leapdays);
  };
  return [
    leapdays,
    editLeapDay,
    deleteLeapDay,
    edit_handler,
    delete_handler,
    new_item_handler
  ];
}
var LeapDays = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance31, create_fragment31, safe_not_equal, { leapdays: 0 });
  }
};
var LeapDays_default = LeapDays;

// src/settings/modals/moons.ts
var import_obsidian26 = __toModule(require("obsidian"));
var CreateMoonModal = class extends import_obsidian26.Modal {
  constructor(app, calendar, moon) {
    super(app);
    this.calendar = calendar;
    this.saved = false;
    this.moon = {
      name: null,
      cycle: null,
      offset: null,
      faceColor: "#fff",
      shadowColor: "#000",
      id: nanoid(6)
    };
    if (moon) {
      this.moon = { ...moon };
      this.editing = true;
    }
    this.containerEl.addClass("fantasy-calendar-create-moon");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Moon" : "New Moon"
    });
    this.infoEl = this.contentEl.createDiv("moon-info");
    this.buildInfo();
    new import_obsidian26.Setting(this.contentEl).addButton((b) => {
      b.setButtonText("Save").setCta().onClick(() => {
        if (!this.moon.name?.length) {
          new import_obsidian26.Notice("The moon must have a name.");
          return;
        }
        if (!this.moon.cycle) {
          new import_obsidian26.Notice("The moon must have a positive cycle.");
          return;
        }
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
    });
  }
  buildInfo() {
    this.infoEl.empty();
    new import_obsidian26.Setting(this.infoEl).setName("Name").addText((t) => {
      t.setValue(this.moon.name).onChange((v) => {
        this.moon.name = v;
      });
    });
    new import_obsidian26.Setting(this.infoEl).setName("Cycle").setDesc("How many days it takes for the moon to complete a full cycle.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.moon.cycle}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.moon.cycle = Number(v);
      });
    });
    new import_obsidian26.Setting(this.infoEl).setName("Offset").setDesc("Shift the starting moon phase by a number of days.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.moon.offset}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.moon.offset = Number(v);
      });
    });
    new import_obsidian26.Setting(this.infoEl).setName("Face Color").addText((t) => {
      t.inputEl.setAttr("type", "color");
      t.setValue(this.moon.faceColor).onChange((v) => {
        this.moon.faceColor = v;
      });
    });
    new import_obsidian26.Setting(this.infoEl).setName("Shadow Color").addText((t) => {
      t.inputEl.setAttr("type", "color");
      t.setValue(this.moon.shadowColor).onChange((v) => {
        this.moon.shadowColor = v;
      });
    });
  }
  async onOpen() {
    await this.display();
  }
};

// src/settings/modals/leapday.ts
var import_obsidian27 = __toModule(require("obsidian"));
var CreateLeapDayModal = class extends import_obsidian27.Modal {
  constructor(app, calendar, leapday) {
    super(app);
    this.calendar = calendar;
    this.saved = false;
    this.leapday = {
      id: nanoid(6),
      name: "Leap Day",
      interval: [],
      intercalary: false,
      timespan: null,
      offset: 0,
      type: "leapday"
    };
    if (leapday) {
      this.leapday = { ...leapday };
      this.editing = true;
    }
    this.containerEl.addClass("fantasy-calendar-create-leapday");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Leap Day" : "New Leap Day"
    });
    this.infoEl = this.contentEl.createDiv("leapday-info");
    this.buildInfo();
    new import_obsidian27.Setting(this.contentEl).addButton((b) => {
      b.setButtonText("Save").setCta().onClick(() => {
        if (!this.leapday.interval.length) {
          new import_obsidian27.Notice("The leap day must have an interval.");
          return;
        }
        if (this.leapday.timespan == void 0) {
          new import_obsidian27.Notice("The leap day must be attached to a Month.");
          return;
        }
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
    });
  }
  buildInfo() {
    this.infoEl.empty();
    new import_obsidian27.Setting(this.infoEl).setName("Name").addText((t) => {
      t.setValue(this.leapday.name).onChange((v) => {
        this.leapday.name = v;
      });
    });
    new import_obsidian27.Setting(this.infoEl).setName("Month").setDesc("The leap day will be added to this month.").addDropdown((d) => {
      for (let month of this.calendar.static.months) {
        const index = this.calendar.static.months.indexOf(month);
        d.addOption(`${index}`, month.name);
      }
      d.setValue(`${this.leapday.timespan}`).onChange((v) => this.leapday.timespan = Number(v));
    });
    new import_obsidian27.Setting(this.infoEl).setName("Offset").setDesc("Shift the years the leap day is applied to.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.leapday.offset}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.leapday.offset = Number(v);
      });
    });
    this.conditionsEl = this.infoEl.createDiv();
    this.buildConditions();
  }
  buildConditions() {
    this.conditionsEl.empty();
    const b = new import_obsidian27.ButtonComponent(this.conditionsEl).setTooltip("Add New").setButtonText("+").onClick(async () => {
      const modal = new IntervalModal(this.app, this.intervals.length > 0);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        this.leapday.interval.push(modal.condition);
        this.buildConditions();
      };
      modal.open();
    });
    b.buttonEl.style.width = "100%";
    this.conditionsEl.createSpan({
      text: getIntervalDescription(this.leapday),
      cls: "fantasy-leap-day-interval-description setting-item"
    });
    for (let interval of this.intervals) {
      new import_obsidian27.Setting(this.conditionsEl).setName(this.getIntervalName(interval)).addExtraButton((b2) => {
        b2.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new IntervalModal(this.app, this.intervals.indexOf(interval) != 0, interval);
          modal.onClose = () => {
            if (!modal.saved)
              return;
            this.leapday.interval.splice(this.leapday.interval.indexOf(interval), 1, modal.condition);
            this.buildConditions();
          };
          modal.open();
        });
      }).addExtraButton((b2) => {
        b2.setIcon("trash").setTooltip("Delete").onClick(() => {
          this.leapday.interval.splice(this.leapday.interval.indexOf(interval), 1);
          if (this.intervals.length && this.intervals[0].exclusive) {
            this.intervals[0].exclusive = false;
          }
          this.buildConditions();
        });
      });
    }
  }
  get intervals() {
    return this.leapday.interval.sort((a, b) => a.interval - b.interval);
  }
  getIntervalName(interval) {
    const name = [`${interval.interval}`];
    if (interval.exclusive) {
      name.push("(Exclusive)");
    }
    if (interval.ignore) {
      name.push(" - Ignoring Offset");
    }
    return name.join(" ");
  }
  async onOpen() {
    await this.display();
  }
};
var IntervalModal = class extends import_obsidian27.Modal {
  constructor(app, canBeExclusive, condition) {
    super(app);
    this.app = app;
    this.canBeExclusive = canBeExclusive;
    this.saved = false;
    this.editing = false;
    this.condition = {
      interval: null,
      exclusive: false,
      ignore: false
    };
    if (condition) {
      this.condition = { ...condition };
      this.editing = true;
    }
  }
  onOpen() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", { text: "Leap Day Condition" });
    new import_obsidian27.Setting(this.contentEl).setName("Interval").setDesc("How often the condition applies.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.condition.interval}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.condition.interval = Number(v);
      });
    });
    new import_obsidian27.Setting(this.contentEl).setName("Exclusive").setDesc("If true, the leap day will not apply when the year meets the condition.\n\nRequires the leap day to have at least one non-exclusive condition.").addToggle((t) => t.setDisabled(!this.canBeExclusive).setValue(this.condition.exclusive).onChange((v) => this.condition.exclusive = v));
    new import_obsidian27.Setting(this.contentEl).setName("Ignore Offset").setDesc("The condition will ignore the leap day's offset when checking to apply.").addToggle((t) => t.setValue(this.condition.ignore).onChange((v) => this.condition.ignore = v));
    this.buttonsEl = this.contentEl.createDiv("fantasy-context-buttons");
    new import_obsidian27.ButtonComponent(this.buttonsEl).setCta().setButtonText(this.editing ? "Save" : "Create").onClick(() => {
      if (!this.condition.interval) {
        new import_obsidian27.Notice("The condition requires an interval.");
        return;
      }
      this.saved = true;
      this.close();
    });
    new import_obsidian27.ExtraButtonComponent(this.buttonsEl).setTooltip("Cancel").setIcon("cross").onClick(() => this.close());
  }
};

// src/suggester/folder.ts
var import_obsidian28 = __toModule(require("obsidian"));
var FolderSuggestionModal = class extends SuggestionModal {
  constructor(app, input, items) {
    super(app, input.inputEl, items);
    this.folders = [...items];
    this.text = input;
    this.inputEl.addEventListener("input", () => this.getFolder());
  }
  getFolder() {
    const v = this.inputEl.value, folder = this.app.vault.getAbstractFileByPath(v);
    if (folder == this.folder)
      return;
    if (!(folder instanceof import_obsidian28.TFolder))
      return;
    this.folder = folder;
    this.onInputChanged();
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item) {
    this.text.setValue(item.path);
    this.folder = item;
  }
  selectSuggestion({ item }) {
    let link = item.path;
    this.text.setValue(link);
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    let pathLength = item.path.length - item.name.length;
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = pathLength; i < item.path.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.path.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.path[i]);
    }
    el.createDiv({
      cls: "suggestion-note",
      text: item.path
    });
  }
  getItems() {
    return this.folders;
  }
};

// src/settings/settings.ts
var Recurring;
(function(Recurring2) {
  Recurring2["none"] = "None";
  Recurring2["monthly"] = "Monthly";
  Recurring2["yearly"] = "Yearly";
})(Recurring || (Recurring = {}));
(0, import_obsidian29.addIcon)("fantasy-calendar-grip", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-lines" class="svg-inline--fa fa-grip-lines fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M496 288H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-128H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"/></svg>`);
(0, import_obsidian29.addIcon)("fantasy-calendar-warning", `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="exclamation-triangle" class="svg-inline--fa fa-exclamation-triangle fa-w-18" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor" d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"></path></svg>`);
var FantasyCalendarSettings = class extends import_obsidian29.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  get data() {
    return this.plugin.data;
  }
  async display() {
    this.containerEl.empty();
    console.log("display");
    this.containerEl.createEl("h2", { text: "Fantasy Calendars" });
    this.containerEl.addClass("fantasy-calendar-settings");
    this.buildInfo(this.containerEl.createDiv("fantasy-calendar-nested-settings"));
    this.buildCalendars(this.containerEl.createEl("details", {
      cls: "fantasy-calendar-nested-settings",
      attr: {
        ...this.data.settingsToggleState.calendars ? { open: `open` } : {}
      }
    }));
    this.buildEvents(this.containerEl.createEl("details", {
      cls: "fantasy-calendar-nested-settings",
      attr: {
        ...this.data.settingsToggleState.events ? { open: `open` } : {}
      }
    }));
  }
  buildInfo(containerEl) {
    containerEl.empty();
    new import_obsidian29.Setting(containerEl).setName(createFragment((e) => {
      const span = e.createSpan("fantasy-calendar-warning");
      (0, import_obsidian29.setIcon)(span.createSpan("fantasy-calendar-warning"), "fantasy-calendar-warning");
      span.createSpan({ text: "Default Config Directory" });
    })).setDesc(createFragment((e) => {
      e.createSpan({
        text: "Please back up your data before changing this setting. Hidden directories must be manually entered."
      });
      e.createEl("br");
      e.createSpan({
        text: `Current directory: `
      });
      const configDirectory = this.data.configDirectory ?? this.app.vault.configDir;
      e.createEl("code", {
        text: configDirectory
      });
    })).addText(async (text2) => {
      let folders = this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian29.TFolder);
      text2.setPlaceholder(this.data.configDirectory ?? this.app.vault.configDir);
      const modal = new FolderSuggestionModal(this.app, text2, [
        ...folders
      ]);
      modal.onClose = async () => {
        if (!text2.inputEl.value) {
          this.data.configDirectory = null;
        } else {
          const exists = await this.app.vault.adapter.exists(text2.inputEl.value);
          if (!exists) {
            this.data.configDirectory = text2.inputEl.value;
            await this.plugin.saveSettings();
          }
        }
      };
      text2.inputEl.onblur = async () => {
        if (!text2.inputEl.value) {
          return;
        }
        const exists = await this.app.vault.adapter.exists(text2.inputEl.value);
        this.data.configDirectory = text2.inputEl.value;
        await this.plugin.saveSettings();
        this.display();
      };
    }).addExtraButton((b) => {
      b.setTooltip("Reset to Default").setIcon("reset").onClick(async () => {
        this.data.configDirectory = null;
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  buildCalendars(containerEl) {
    containerEl.empty();
    containerEl.ontoggle = () => {
      this.data.settingsToggleState.calendars = containerEl.open;
    };
    const summary = containerEl.createEl("summary");
    new import_obsidian29.Setting(summary).setHeading().setName("Calendar Management");
    summary.createDiv("collapser").createDiv("handle");
    new import_obsidian29.Setting(containerEl).setName("Default Calendar").setDesc("Views will open to this calendar by default.").addDropdown((d) => {
      d.addOption("none", "None");
      for (let calendar of this.data.calendars) {
        d.addOption(calendar.id, calendar.name);
      }
      d.setValue(this.plugin.data.defaultCalendar);
      d.onChange((v) => {
        if (v === "none") {
          this.plugin.data.defaultCalendar = null;
          this.plugin.saveSettings();
          return;
        }
        this.plugin.data.defaultCalendar = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian29.Setting(containerEl).setName("Import Calendar").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Import calendar from "
      });
      e.createEl("a", {
        href: "https://app.fantasy-calendar.com",
        text: "Fantasy Calendar",
        cls: "external-link"
      });
    })).addButton((b) => {
      const input = createEl("input", {
        attr: {
          type: "file",
          name: "merge",
          accept: ".json",
          multiple: true,
          style: "display: none;"
        }
      });
      input.onchange = async () => {
        const { files } = input;
        if (!files.length)
          return;
        try {
          const data = [];
          for (let file of Array.from(files)) {
            data.push(JSON.parse(await file.text()));
          }
          const calendars = Import.import(data);
          this.plugin.data.calendars.push(...calendars);
          await this.plugin.saveCalendar();
          this.showCalendars(existing);
        } catch (e) {
          new import_obsidian29.Notice(`There was an error while importing the calendar${files.length == 1 ? "" : "s"}.`);
          console.error(e);
        }
        input.value = null;
      };
      b.setButtonText("Choose Files");
      b.buttonEl.addClass("calendar-file-upload");
      b.buttonEl.appendChild(input);
      b.onClick(() => input.click());
    });
    new import_obsidian29.Setting(containerEl).setName("Create New Calendar").addButton((button) => button.setTooltip("Launch Calendar Creator").setIcon("plus-with-circle").onClick(async () => {
      try {
        await this.launchCalendarCreator();
      } catch (e) {
      } finally {
        this.display();
      }
    }));
    const existing = containerEl.createDiv("existing-calendars");
    this.showCalendars(existing);
  }
  showCalendars(element2) {
    element2.empty();
    if (!this.data.calendars.length) {
      element2.createSpan({
        text: "No calendars created! Create a calendar to see it here."
      });
      return;
    }
    for (let calendar of this.data.calendars) {
      new import_obsidian29.Setting(element2).setName(calendar.name).setDesc(calendar.description ?? "").addExtraButton((b) => {
        b.setIcon("pencil").onClick(() => {
          const modal = new CreateCalendarModal(this.plugin, calendar);
          modal.onClose = async () => {
            if (!modal.saved) {
              this.showCalendars(element2);
              return;
            }
            this.data.calendars.splice(this.data.calendars.indexOf(calendar), 1, (0, import_fast_copy2.default)(modal.calendar));
            await this.plugin.saveCalendar();
            this.showCalendars(element2);
          };
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").onClick(async () => {
          if (!await confirmWithModal(this.app, "Are you sure you want to delete this calendar?", {
            cta: "Delete",
            secondary: "Cancel"
          }))
            return;
          this.plugin.data.calendars = this.plugin.data.calendars.filter((c) => c.id != calendar.id);
          await this.plugin.saveCalendar();
          if (calendar.name == this.plugin.data.defaultCalendar) {
            this.display();
          } else {
            this.showCalendars(element2);
          }
        });
      });
    }
  }
  buildEvents(containerEl) {
    containerEl.empty();
    containerEl.ontoggle = () => {
      this.data.settingsToggleState.events = containerEl.open;
    };
    const summary = containerEl.createEl("summary");
    new import_obsidian29.Setting(summary).setHeading().setName("Events");
    summary.createDiv("collapser").createDiv("handle");
    new import_obsidian29.Setting(containerEl).setName("Display Event Previews").setDesc("Use the core Note Preview plugin to display event notes when hovered.").addToggle((t) => {
      t.setValue(this.data.eventPreview).onChange((v) => {
        this.data.eventPreview = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian29.Setting(containerEl).setName("Automatically Parse for Events").setDesc("The plugin will automatically parse files in the vault for events.").addToggle((t) => {
      t.setValue(this.data.autoParse).onChange((v) => {
        this.data.autoParse = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian29.Setting(containerEl).setName("Events Folder").setDesc("The plugin will only watch for changes in this folder.").addText((text2) => {
      let folders = this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian29.TFolder);
      text2.setPlaceholder(this.plugin.data.path ?? "/");
      const modal = new FolderSuggestionModal(this.app, text2, [
        ...folders
      ]);
      modal.onClose = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        this.plugin.data.path = (0, import_obsidian29.normalizePath)(v);
      };
      text2.inputEl.onblur = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        this.plugin.data.path = (0, import_obsidian29.normalizePath)(v);
      };
    });
    new import_obsidian29.Setting(containerEl).setName("Parse Note Titles for Event Dates").setDesc("The plugin will parse note titles for event dates.").addToggle((t) => {
      t.setValue(this.data.parseDates).onChange((v) => {
        this.data.parseDates = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian29.Setting(containerEl).setName("Date Format").setClass(this.data.dailyNotes ? "daily-notes" : "no-daily-notes").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Event dates will be parsed using this format."
      });
      e.createSpan({ text: "Only the " });
      e.createEl("code", { text: "Y" });
      e.createSpan({
        text: ", "
      });
      e.createEl("code", { text: "M" });
      e.createSpan({
        text: ", and "
      });
      e.createEl("code", { text: "D" });
      e.createEl("a", {
        text: "tokens",
        href: "https://momentjs.com/docs/#/displaying/format/",
        cls: "external-link"
      });
      e.createSpan({
        text: " are supported."
      });
      if (["Y", "M", "D"].some((token) => !this.data.dateFormat.includes(token))) {
        e.createEl("br");
        const span = e.createSpan({
          cls: "fantasy-calendar-warning date-format"
        });
        (0, import_obsidian29.setIcon)(span.createSpan("fantasy-calendar-warning"), "fantasy-calendar-warning");
        let missing = ["Y", "M", "D"].filter((token) => !this.data.dateFormat.includes(token));
        span.createSpan({
          text: ` Date format is missing: ${missing.join(", ").replace(/, ([^,]*)$/, " and $1")}`
        });
      }
    })).addText((t) => {
      t.setDisabled(this.data.dailyNotes).setValue(this.plugin.format).onChange((v) => {
        this.data.dateFormat = v;
        this.plugin.saveSettings();
      });
      t.inputEl.onblur = () => this.buildEvents(containerEl);
    }).addExtraButton((b) => {
      if (!this.plugin.canUseDailyNotes) {
        b.extraSettingsEl.detach();
        return;
      }
      if (this.data.dailyNotes) {
        b.setIcon("checkmark").setTooltip("Unlink from Daily Notes").onClick(() => {
          this.data.dailyNotes = false;
          this.buildEvents(containerEl);
        });
      } else {
        b.setIcon("sync").setTooltip("Link with Daily Notes").onClick(() => {
          this.data.dailyNotes = true;
          this.buildEvents(containerEl);
        });
      }
    });
    new import_obsidian29.Setting(containerEl).setName("Support Timelines Events").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Support <span> elements used by the "
      });
      e.createEl("a", {
        text: "Obsidian Timelines",
        href: "obsidian://show-plugin?id=obsidian-timelines"
      });
      e.createSpan({
        text: " plugin (by Darakah)."
      });
    })).addToggle((t) => {
      t.setValue(this.data.supportTimelines).onChange((v) => {
        this.data.supportTimelines = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian29.Setting(containerEl).setName("Default tag marking pages containing Timelines data").setDesc("Tag to specify which notes to include in created timelines e.g. timeline to use the #timeline tag").addText((text2) => text2.setPlaceholder(this.data.timelineTag).setValue(this.data.timelineTag.replace("#", "")).setDisabled(this.plugin.syncTimelines).onChange((v) => {
      this.data.timelineTag = v.startsWith("#") ? v : `#${v}`;
      this.plugin.saveSettings();
    })).addExtraButton((b) => {
      if (!this.plugin.canUseTimelines) {
        this.data.syncTimelines = false;
        b.extraSettingsEl.detach();
        return;
      }
      if (this.data.syncTimelines) {
        b.setIcon("checkmark").setTooltip("Unsync from Timelines Plugin").onClick(async () => {
          this.data.syncTimelines = false;
          await this.plugin.saveSettings();
          this.buildEvents(containerEl);
        });
      } else {
        b.setIcon("sync").setTooltip("Sync with Timelines Plugin").onClick(async () => {
          this.data.syncTimelines = true;
          this.data.timelineTag = this.plugin.app.plugins.getPlugin("obsidian-timelines").settings.timelineTag;
          await this.plugin.saveSettings();
          this.buildEvents(containerEl);
        });
      }
    });
  }
  launchCalendarCreator(calendar = DEFAULT_CALENDAR) {
    return new Promise((resolve, reject) => {
      try {
        this.containerEl.empty();
        this.containerEl.addClass("fantasy-calendar-creator-open");
        const clone = (0, import_fast_copy2.default)(calendar);
        const $app = new Creator_default({
          target: this.containerEl,
          props: {
            calendar,
            plugin: this.plugin
          }
        });
        $app.$on("flown", () => {
        });
        $app.$on("cancel", () => {
          this.containerEl.removeClass("fantasy-calendar-creator-open");
          console.log("cancel");
          resolve(clone);
        });
        $app.$on("save", () => {
          this.containerEl.removeClass("fantasy-calendar-creator-open");
          console.log("save");
          resolve(calendar);
        });
      } catch (e) {
        reject(e);
      }
    });
  }
};
var CreateCalendarModal = class extends import_obsidian29.Modal {
  constructor(plugin, existing) {
    super(plugin.app);
    this.plugin = plugin;
    this.calendar = (0, import_fast_copy2.default)(DEFAULT_CALENDAR);
    this.saved = false;
    this.editing = false;
    this.canSave = false;
    this.tempCurrentDays = this.calendar.current.day;
    this.calendar.id = nanoid(6);
    if (existing) {
      this.editing = true;
      this.calendar = (0, import_fast_copy2.default)(existing);
    }
    this.containerEl.addClass("fantasy-calendar-create-calendar");
  }
  get static() {
    return this.calendar.static;
  }
  get week() {
    return this.static.weekdays;
  }
  get months() {
    return this.static.months;
  }
  get events() {
    return this.calendar.events;
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Calendar" : "New Calendar"
    });
    const presetEl = this.contentEl.createDiv("fantasy-calendar-apply-preset");
    new import_obsidian29.Setting(presetEl).setName("Apply Preset").setDesc("Apply a common fantasy calendar as a preset.").addButton((b) => {
      b.setCta().setButtonText("Choose Preset").onClick(() => {
        const modal = new CalendarPresetModal(this.app);
        modal.onClose = () => {
          if (!modal.saved)
            return;
          if (modal.preset?.name == "Gregorian Calendar") {
            const today = new Date();
            modal.preset.current = {
              year: today.getFullYear(),
              month: today.getMonth(),
              day: today.getDate()
            };
          }
          this.calendar = {
            ...modal.preset,
            id: this.calendar.id
          };
          this.display();
        };
        modal.open();
      });
    });
    this.uiEl = this.contentEl.createDiv("fantasy-calendar-ui");
    this.buttonsEl = this.contentEl.createDiv("fantasy-context-buttons");
    this.buildButtons();
    this.infoEl = this.uiEl.createDiv("calendar-info");
    this.buildInfo();
    this.weekdayEl = this.uiEl.createDiv();
    this.buildWeekdays();
    this.monthEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildMonths();
    this.yearEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildYear();
    this.leapdayEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildLeapDays();
    this.eventEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildEvents();
    this.categoryEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildCategories();
    this.moonEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildMoons();
  }
  buildInfo() {
    this.infoEl.empty();
    this.infoDetailEl = this.infoEl.createEl("details", {
      attr: { open: true }
    });
    this.infoDetailEl.createEl("summary").createEl("h4", { text: "Basic Info" });
    new import_obsidian29.Setting(this.infoDetailEl).setName("Calendar Name").addText((t) => {
      t.setValue(this.calendar.name).onChange((v) => this.calendar.name = v);
    });
    const descriptionEl = this.infoDetailEl.createDiv("calendar-description");
    descriptionEl.createEl("label", { text: "Calendar Description" });
    new import_obsidian29.TextAreaComponent(descriptionEl).setPlaceholder("Calendar Description").setValue(this.calendar.description).onChange((v) => {
      this.calendar.description = v;
    });
    new import_obsidian29.Setting(this.infoDetailEl).setName("Display Day Number").setDesc("Display the day of the year.").addToggle((t) => {
      t.setValue(this.static.displayDayNumber).onChange((v) => {
        this.static.displayDayNumber = v;
        this.buildInfo();
      });
    });
    new import_obsidian29.Setting(this.infoDetailEl).setName("Auto Increment Day").setDesc("Automatically increment the calendar day every real day.").addToggle((t) => {
      t.setValue(this.static.incrementDay).onChange((v) => {
        this.static.incrementDay = v;
      });
    });
    this.dateFieldEl = this.infoDetailEl.createDiv();
    this.buildDateFields();
  }
  buildDateFields() {
    this.dateFieldEl.empty();
    new import_obsidian29.Setting(this.dateFieldEl).setClass("fantasy-calendar-date-fields-heading").setHeading().setName("Current Date");
    const dateFieldEl = this.dateFieldEl.createDiv("fantasy-calendar-date-fields");
    if (this.tempCurrentDays == null && this.calendar.current.day) {
      this.tempCurrentDays = this.calendar.current.day;
    }
    if (this.tempCurrentDays != void 0 && this.calendar.current.month != void 0 && this.tempCurrentDays > this.calendar.static.months[this.calendar.current.month]?.length) {
      this.tempCurrentDays = this.calendar.static.months[this.calendar.current.month]?.length;
    }
    const dayEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
    dayEl.createEl("label", { text: "Day" });
    const day = new import_obsidian29.TextComponent(dayEl).setPlaceholder("Day").setValue(`${this.tempCurrentDays}`).setDisabled(this.calendar.current.month == void 0).onChange((v) => {
      if (Number(v) < 1 || Number(v) > this.calendar.static.months[this.calendar.current.month]?.length) {
        new import_obsidian29.Notice(`The current day must be between 1 and ${this.calendar.static.months[this.calendar.current.month].length}`);
        this.tempCurrentDays = this.calendar.current.day;
        this.buildDateFields();
        return;
      }
      this.tempCurrentDays = Number(v);
    });
    day.inputEl.setAttr("type", "number");
    const monthEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
    monthEl.createEl("label", { text: "Month" });
    new import_obsidian29.DropdownComponent(monthEl).addOptions(Object.fromEntries([
      ["select", "Select Month"],
      ...this.calendar.static.months.map((month) => [
        month.name,
        month.name
      ])
    ])).setValue(this.calendar.current.month != void 0 ? this.calendar.static.months[this.calendar.current.month].name : "select").onChange((v) => {
      if (v === "select")
        this.calendar.current.month = null;
      const index = this.calendar.static.months.find((m) => m.name == v);
      this.calendar.current.month = this.calendar.static.months.indexOf(index);
      this.buildDateFields();
    });
    const yearEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
    yearEl.createEl("label", { text: "Year" });
    if (this.calendar.static.useCustomYears) {
      const yearDrop = new import_obsidian29.DropdownComponent(yearEl);
      (this.calendar.static.years ?? []).forEach((year) => {
        yearDrop.addOption(year.id, year.name);
      });
      if (this.calendar.current.year > this.calendar.static.years?.length) {
        this.calendar.current.year = this.calendar.static.years ? this.calendar.static.years.length : null;
      }
      yearDrop.setValue(this.calendar.static.years?.[this.calendar.current.year - 1]?.id).onChange((v) => {
        this.calendar.current.year = this.calendar.static.years.findIndex((y) => y.id == v) + 1;
      });
    } else {
      const year = new import_obsidian29.TextComponent(yearEl).setPlaceholder("Year").setValue(`${this.calendar.current.year}`).onChange((v) => {
        this.calendar.current.year = Number(v);
      });
      year.inputEl.setAttr("type", "number");
    }
  }
  buildWeekdays() {
    this.weekdayEl.empty();
    const weekday = new Weekdays_default({
      target: this.weekdayEl,
      props: {
        weekdays: this.week,
        firstWeekday: this.calendar.static.firstWeekDay,
        overflow: this.calendar.static.overflow
      }
    });
    weekday.$on("weekday-update", (e) => {
      this.calendar.static.weekdays = e.detail;
      if (!this.calendar.static.firstWeekDay && this.calendar.static.weekdays.length) {
        this.calendar.static.firstWeekDay = 0;
        weekday.$set({
          firstWeekday: this.calendar.static.firstWeekDay
        });
      }
      this.checkCanSave();
    });
    weekday.$on("first-weekday-update", (e) => {
      this.calendar.static.firstWeekDay = e.detail;
    });
    weekday.$on("overflow-update", (e) => {
      this.calendar.static.overflow = e.detail;
      if (!this.calendar.static.overflow)
        this.calendar.static.firstWeekDay = 0;
      weekday.$set({
        firstWeekday: this.calendar.static.firstWeekDay
      });
    });
  }
  buildMonths() {
    this.monthEl.empty();
    const months = new Months_default({
      target: this.monthEl,
      props: {
        months: this.months
      }
    });
    months.$on("month-update", (e) => {
      this.calendar.static.months = e.detail;
      this.buildDateFields();
      this.checkCanSave();
    });
  }
  buildYear() {
    this.yearEl.empty();
    const years = new Year_default({
      target: this.yearEl,
      props: {
        useCustomYears: this.static.useCustomYears,
        years: this.static.years,
        app: this.app
      }
    });
    years.$on("years-update", (e) => {
      this.calendar.static.years = e.detail;
      this.buildDateFields();
      this.buildEvents();
    });
    years.$on("use-custom-update", (e) => {
      this.calendar.static.useCustomYears = e.detail;
      this.buildDateFields();
      this.buildEvents();
    });
  }
  buildLeapDays() {
    this.leapdayEl.empty();
    const leapdayUI = new LeapDays_default({
      target: this.leapdayEl,
      props: {
        leapdays: this.static.leapDays
      }
    });
    leapdayUI.$on("new-item", async (e) => {
      const modal = new CreateLeapDayModal(this.app, this.calendar, e.detail);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        if (modal.editing) {
          const index = this.calendar.static.moons.indexOf(this.calendar.static.moons.find((e2) => e2.id === modal.leapday.id));
          this.calendar.static.leapDays.splice(index, 1, {
            ...modal.leapday
          });
        } else {
          this.calendar.static.leapDays.push({ ...modal.leapday });
        }
        leapdayUI.$set({ leapdays: this.calendar.static.leapDays });
        this.plugin.saveCalendar();
      };
      modal.open();
    });
    leapdayUI.$on("edit-leapdays", (e) => {
      this.calendar.static.leapDays = e.detail;
    });
  }
  buildEvents() {
    this.eventEl.empty();
    this.eventsUI = new Events_default({
      target: this.eventEl,
      props: {
        events: this.events,
        months: this.calendar.static.months,
        categories: this.calendar.categories
      }
    });
    this.eventsUI.$on("new-item", async (e) => {
      const modal = new CreateEventModal(this.app, this.calendar, e.detail);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        if (modal.editing) {
          const index = this.calendar.events.indexOf(this.calendar.events.find((e2) => e2.id === modal.event.id));
          this.calendar.events.splice(index, 1, { ...modal.event });
        } else {
          this.calendar.events.push({ ...modal.event });
        }
        this.eventsUI.$set({ events: this.events });
        this.plugin.saveCalendar();
      };
      modal.open();
    });
    this.eventsUI.$on("edit-events", (e) => {
      this.calendar.events = e.detail;
    });
    this.eventEl.setAttr(`style`, `--event-max-width: ${this.eventEl.getBoundingClientRect().width}px;`);
  }
  buildCategories() {
    this.categoryEl.empty();
    const category = new Categories_default({
      target: this.categoryEl,
      props: {
        categories: this.calendar.categories
      }
    });
    category.$on("new", (event) => {
      this.calendar.categories.push(event.detail);
      this.eventsUI.$set({
        categories: this.calendar.categories
      });
    });
    category.$on("update", (event) => {
      const existing = this.calendar.categories.find((c) => c.id == event.detail.id);
      this.calendar.categories.splice(this.calendar.categories.indexOf(existing), 1, event.detail);
      this.eventsUI.$set({
        categories: this.calendar.categories,
        events: this.events
      });
    });
    category.$on("delete", (event) => {
      this.calendar.categories.splice(this.calendar.categories.indexOf(event.detail), 1);
      this.eventsUI.$set({
        categories: this.calendar.categories,
        events: this.events
      });
    });
  }
  buildMoons() {
    this.moonEl.empty();
    this.static.displayMoons = this.static.displayMoons ?? true;
    const moonsUI = new Moons_default({
      target: this.moonEl,
      props: {
        moons: this.static.moons,
        displayMoons: this.static.displayMoons
      }
    });
    moonsUI.$on("display-toggle", (e) => {
      this.static.displayMoons = e.detail;
      moonsUI.$set({ displayMoons: this.static.displayMoons });
    });
    moonsUI.$on("new-item", async (e) => {
      const modal = new CreateMoonModal(this.app, this.calendar, e.detail);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        if (modal.editing) {
          const index = this.calendar.static.moons.indexOf(this.calendar.static.moons.find((e2) => e2.id === modal.moon.id));
          this.calendar.static.moons.splice(index, 1, {
            ...modal.moon
          });
        } else {
          this.calendar.static.moons.push({ ...modal.moon });
        }
        moonsUI.$set({ moons: this.calendar.static.moons });
        this.plugin.saveCalendar();
      };
      modal.open();
    });
    moonsUI.$on("edit-moons", (e) => {
      this.calendar.static.moons = e.detail;
    });
  }
  checkCanSave() {
    if (this.months?.length && this.months?.every((m) => m.name?.length) && this.months?.every((m) => m.length > 0) && this.week?.length && this.week?.every((d) => d.name?.length) && this.calendar.name?.length && this.calendar.static.firstWeekDay < (this.week?.length ?? Infinity) && (!this.calendar.static.useCustomYears || this.calendar.static.useCustomYears && this.calendar.static.years?.length && this.calendar.static.years.every((y) => y.name?.length))) {
      this.canSave = true;
    }
  }
  buildButtons() {
    this.buttonsEl.empty();
    new import_obsidian29.ButtonComponent(this.buttonsEl).setCta().setButtonText(this.editing ? "Save" : "Create").onClick(() => {
      if (!this.canSave) {
        this.checkCanSave();
      }
      if (!this.canSave) {
        if (!this.calendar.name?.length) {
          new import_obsidian29.Notice("The calendar name is required!");
        } else if (!this.week.length) {
          new import_obsidian29.Notice("At least one weekday is required.");
        } else if (!this.week.every((w) => w.name?.length)) {
          new import_obsidian29.Notice("Every weekday must have a name.");
        } else if (!this.months.length) {
          new import_obsidian29.Notice("At least one month is required.");
        } else if (!this.months.every((m) => m.name?.length)) {
          new import_obsidian29.Notice("Every month must have a name.");
        } else if (!this.months.every((m) => m.length)) {
          new import_obsidian29.Notice("Every month must have a length.");
        } else if (this.calendar.static.useCustomYears && !this.calendar.static.years?.length) {
          new import_obsidian29.Notice("Custom years must be defined.");
        } else if (this.calendar.static.useCustomYears && !this.calendar.static.years.every((y) => y.name?.length)) {
          new import_obsidian29.Notice("Each custom year must be named.");
        } else if (this.calendar.static.firstWeekDay >= this.week.length) {
          new import_obsidian29.Notice("The first day of the week must be a valid weekday.");
        }
        return;
      }
      this.calendar.current.day = this.tempCurrentDays;
      this.saved = true;
      this.close();
    });
    new import_obsidian29.ExtraButtonComponent(this.buttonsEl).setTooltip("Cancel").setIcon("cross").onClick(() => this.close());
  }
  onOpen() {
    this.display();
  }
};
var CalendarPresetModal = class extends import_obsidian29.Modal {
  async onOpen() {
    await this.display();
  }
  async display() {
    this.containerEl.addClass("fantasy-calendar-choose-preset");
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: "Choose a Preset Calendar"
    });
    const presetEl = this.contentEl.createDiv("fantasy-calendar-preset-container");
    for (const preset of PRESET_CALENDARS) {
      const button = new import_obsidian29.ButtonComponent(presetEl).onClick(() => {
        this.preset = preset;
        this.display();
      });
      if (this.preset == preset)
        button.setCta();
      button.buttonEl.createDiv({
        cls: "setting-item-name",
        text: preset.name
      });
      button.buttonEl.createDiv({
        cls: "setting-item-description",
        text: preset.description
      });
    }
    const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
    new import_obsidian29.ButtonComponent(buttonEl).setButtonText("Apply").onClick(() => {
      this.saved = true;
      this.preset = (0, import_fast_copy2.default)(this.preset);
      this.close();
    }).setCta();
    new import_obsidian29.ExtraButtonComponent(buttonEl).setIcon("cross").onClick(() => {
      this.close();
    });
  }
};

// src/view/view.ts
var import_obsidian36 = __toModule(require("obsidian"));

// src/helper/index.ts
var import_obsidian30 = __toModule(require("obsidian"));
var MonthHelper = class {
  constructor(data, number, year, calendar) {
    this.data = data;
    this.number = number;
    this.year = year;
    this.calendar = calendar;
    this.days = [];
    this.leapDays = [];
    this.shouldUpdateEvents = false;
    this.shouldUpdateMoons = false;
    this.leapDays = this.calendar.leapDaysForMonth(this.number, year);
    this.daysBefore = this.calendar.daysBeforeMonth(this.number, this.year);
    this.days = [
      ...new Array(data.length + this.leapDays.length).keys()
    ].map((k) => new DayHelper(this, k + 1));
  }
  get id() {
    return this.data.id;
  }
  get index() {
    return this.calendar.data.months.indexOf(this.data);
  }
  get name() {
    return this.data.name;
  }
  get length() {
    return this.days.length;
  }
  get firstWeekday() {
    if (!this.calendar.data.overflow)
      return 0;
    return this.days[0].weekday;
  }
  get lastWeekday() {
    return this.days[this.days.length - 1].weekday;
  }
  get type() {
    return this.data.type;
  }
  getEventsOnDay(day) {
    if (!this.events || !this.events.length || this.shouldUpdateEvents) {
      this.events = this.calendar.eventsForMonth(this);
    }
    return this.events.filter((event) => {
      if (event.date.day == day.day)
        return true;
      if (!event.end)
        return false;
      const start2 = { ...event.date };
      const end2 = { ...event.end };
      if (!start2.year)
        start2.year = end2.year = this.year;
      if (!start2.month)
        start2.month = end2.month = this.number;
      const hash4 = Number(this.calendar.hash(day));
      if (Number(this.calendar.hash(start2)) <= hash4 && hash4 <= Number(this.calendar.hash(end2)))
        return true;
    });
  }
  getMoonsForDay(day) {
    if (!this.moons || !this.moons.length || this.shouldUpdateMoons) {
      this.moons = this.calendar.getMoonsForMonth(this);
    }
    return this.moons[day.day - 1];
  }
};
var DayHelper = class {
  constructor(month, number) {
    this.month = month;
    this.number = number;
  }
  get calendar() {
    return this.month.calendar;
  }
  get date() {
    return {
      day: this.number,
      month: this.month.number,
      year: this.year
    };
  }
  get events() {
    if (!this._events || !this._events.length || this.month.shouldUpdateEvents) {
      this._events = this.month.getEventsOnDay(this.date);
    }
    return this._events;
  }
  get longDate() {
    return {
      day: this.number,
      month: this.month.name,
      year: this.year
    };
  }
  get daysBefore() {
    return this.month.daysBefore + this.number - 1;
  }
  get year() {
    return this.month.year;
  }
  get weekday() {
    const firstOfYear = this.calendar.firstDayOfYear(this.year);
    return wrap(this.daysBefore % this.calendar.weekdays.length + firstOfYear, this.calendar.weekdays.length);
  }
  get isCurrentDay() {
    return this.number == this.calendar.current.day && this.month.number == this.calendar.current.month && this.month.year == this.calendar.current.year;
  }
  get isDisplaying() {
    return this.number == this.calendar.viewing.day && this.calendar.displayed.year == this.calendar.viewing.year && this.calendar.displayed.month == this.calendar.viewing.month;
  }
  get moons() {
    if (!this._moons || !this._moons.length) {
      this._moons = this.month.getMoonsForDay(this.date);
    }
    return this._moons;
  }
};
var CalendarHelper = class extends import_obsidian30.Events {
  constructor(calendar, plugin) {
    super();
    this.calendar = calendar;
    this.plugin = plugin;
    this._cache = new Map();
    this.displayed = {
      year: null,
      month: null,
      day: null
    };
    this.viewing = {
      year: null,
      month: null,
      day: null
    };
    this.displayed = { ...this.current };
    this.update(this.calendar);
    this.plugin.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-event-update", (tree) => {
      if (!tree.has(this.calendar.id))
        return;
      const years = tree.get(this.calendar.id);
      for (const [year, months] of years) {
        if (!this._cache.has(year))
          continue;
        for (const month of months) {
          if (!this._cache.get(year).has(month))
            continue;
          this._cache.get(year).get(month).shouldUpdateEvents = true;
          if (year == this.displayed.year && month == this.displayed.month || year == this.viewing.year && month == this.viewing.month) {
            this.trigger("month-update");
          }
        }
      }
    }));
  }
  getDayForDate(date) {
    const month = this.getMonth(date.month, date.year);
    const day = month.days[date.day - 1];
    return day;
  }
  eventsForMonth(helper) {
    const { year, number: month } = helper;
    const events = this.calendar.events.filter((event) => {
      const date = { ...event.date };
      const end2 = { ...event.end };
      if (date.month == void 0)
        return true;
      if ((date.year == year || date.year == void 0) && date.month == month)
        return true;
      if (date.year > year || date.year == year && date.month > month)
        return false;
      if (!end2 && (date.month != month || date.year < year))
        return false;
      if (date.year == void 0)
        end2.year = date.year = year;
      if ((date.year <= year || date.month <= month) && end2.year >= year && end2.month >= month)
        return true;
      return false;
    });
    return events;
  }
  getNameForYear(year) {
    if (!this.data.useCustomYears)
      return `${year}`;
    if (this.data.useCustomYears && year - 1 >= 0 && year <= this.data.years?.length) {
      return this.data.years[year - 1].name;
    }
  }
  get displayWeeks() {
    return this.calendar.displayWeeks;
  }
  getMonthsForYear(year) {
    if (!this._cache.has(year)) {
      this._cache.set(year, new Map(this.data.months.map((m, i) => [
        i,
        new MonthHelper(m, i, year, this)
      ])));
    }
    return Array.from(this._cache.get(year).values());
  }
  hash(date) {
    if (date.year == null || date.month == null || date.day == null)
      return null;
    const months = `${this.data.months.length}`.length;
    const month = `${date.month}`.padStart(months, "0");
    const days = `${this.maxDays}`.length;
    const day = `${date.day}`.padStart(days, "0");
    return `${date.year}${month}${day}`;
  }
  update(calendar) {
    this.calendar = calendar ?? this.calendar;
    this.maxDays = Math.max(...this.data.months.map((m) => m.length));
    this.trigger("month-update");
    this.trigger("day-update");
  }
  get categories() {
    return this.calendar.categories;
  }
  get data() {
    return this.calendar.static;
  }
  get current() {
    return this.calendar.current;
  }
  get leapdays() {
    return this.data.leapDays;
  }
  get currentDate() {
    return dateString(this.current, this.data.months);
  }
  get displayedDate() {
    return dateString(this.displayed, this.data.months);
  }
  get viewedDate() {
    return dateString(this.viewing, this.data.months);
  }
  reset() {
    this.displayed = { ...this.current };
    this.viewing = { ...this.current };
    this.trigger("month-update");
    this.trigger("day-update");
  }
  setCurrentMonth(n) {
    this.displayed.month = n;
    this.trigger("month-update");
  }
  goToNextDay() {
    this.viewing.day += 1;
    const currentMonth = this.getMonth(this.displayed.month, this.displayed.year);
    if (this.viewing.day > currentMonth.days.length) {
      this.goToNext();
      this.viewing.month = this.displayed.month;
      this.viewing.year = this.displayed.year;
      this.viewing.day = 1;
    }
    this.trigger("day-update");
  }
  goToNextCurrentDay() {
    this.current.day += 1;
    const currentMonth = this.getMonth(this.current.month, this.current.year);
    if (this.current.day >= currentMonth.days.length) {
      this.current.day = 1;
      this.current.month += 1;
      if (this.current.month >= this.data.months.length) {
        this.current.month = 0;
        this.current.year += 1;
      }
    }
    this.trigger("day-update");
  }
  get nextMonthIndex() {
    return wrap(this.displayed.month + 1, this.data.months.length);
  }
  get nextMonth() {
    return this.getMonth(this.displayed.month + 1, this.displayed.year);
  }
  canGoToNextYear(year = this.displayed.year) {
    return !this.data.useCustomYears || year < this.data.years.length;
  }
  goToNext() {
    if (this.nextMonthIndex < this.displayed.month) {
      if (!this.canGoToNextYear()) {
        new import_obsidian30.Notice("This is the last year. Additional years can be created in settings.");
        return;
      }
      this.goToNextYear();
    }
    this.setCurrentMonth(this.nextMonthIndex);
  }
  goToNextYear() {
    this.displayed.year += 1;
    this.trigger("year-update");
  }
  get prevMonthIndex() {
    return wrap(this.displayed.month - 1, this.data.months.length);
  }
  get previousMonth() {
    return this.getMonth(this.displayed.month - 1, this.displayed.year);
  }
  goToPrevious() {
    if (this.prevMonthIndex > this.displayed.month) {
      if (this.displayed.year == 1) {
        new import_obsidian30.Notice("This is the earliest year.");
        return;
      }
      this.goToPreviousYear();
    }
    this.setCurrentMonth(this.prevMonthIndex);
  }
  goToPreviousDay() {
    this.viewing.day -= 1;
    if (this.viewing.day < 1) {
      this.goToPrevious();
      this.viewing.month = this.displayed.month;
      this.viewing.year = this.displayed.year;
      this.viewing.day = this.currentMonth.days.length;
    }
    this.trigger("day-update");
  }
  goToPreviousYear() {
    this.displayed.year -= 1;
    this.trigger("year-update");
  }
  get weekdays() {
    return this.data.weekdays;
  }
  get currentMonth() {
    return this.getMonth(this.displayed.month, this.displayed.year);
  }
  testLeapDay(leapday, year) {
    return leapday.interval.sort((a, b) => a.interval - b.interval).some(({ interval, exclusive }, index, array) => {
      if (exclusive && index == 0) {
        return (year - leapday.offset) % interval != 0;
      }
      if (exclusive)
        return;
      if (array[index + 1] && array[index + 1].exclusive) {
        return (year - leapday.offset) % interval == 0 && (year - leapday.offset) % array[index + 1].interval != 0;
      }
      return (year - leapday.offset) % interval == 0;
    });
  }
  leapDaysForYear(year) {
    return this.leapdays.filter((l) => {
      return this.testLeapDay(l, year);
    });
  }
  leapDaysForMonth(month, year = this.displayed.year) {
    return this.leapdays.filter((l) => {
      if (l.timespan != month)
        return false;
      return this.testLeapDay(l, year);
    });
  }
  getMonth(number, year, direction = 0) {
    const months = this.data.months;
    let index = wrap(number, months.length);
    if (number < 0)
      year -= 1;
    if (year == 0)
      return null;
    if (number >= months.length)
      year += 1;
    if (this._cache.has(year)) {
      if (this._cache.get(year).has(index)) {
        return this._cache.get(year).get(index);
      }
    } else {
      this._cache.set(year, new Map());
    }
    if (months[index].type == "intercalary" && direction != 0) {
      return this.getMonth(number + direction, year, direction);
    }
    const helper = new MonthHelper(months[index], index, year, this);
    this._cache.set(year, this._cache.get(year).set(index, helper));
    return helper;
  }
  getPaddedDaysForMonth(month) {
    let current = month.days;
    let previous = [];
    const previousMonth = this.getMonth(month.index - 1, this.displayed.year, -1);
    if (month.firstWeekday > 0 && month.type == "month") {
      previous = previousMonth != null ? previousMonth.days.slice(-month.firstWeekday) : Array(month.firstWeekday).fill(null);
    }
    let next2 = [];
    const nextMonth = this.getMonth(month.index + 1, this.displayed.year, 1);
    if (month.lastWeekday < this.weekdays.length - 1 && month.type == "month") {
      next2 = nextMonth.days.slice(0, this.weekdays.length - month.lastWeekday - 1);
    }
    return {
      previous,
      current,
      next: next2
    };
  }
  get weeksPerCurrentMonth() {
    return Math.ceil(this.getMonth(this.displayed.month, this.displayed.year).length / this.data.weekdays.length);
  }
  weeksOfMonth(month) {
    return Math.ceil((month.length + month.firstWeekday) / this.data.weekdays.length);
  }
  weekNumbersOfMonth(month) {
    const daysBefore = month.daysBefore + this.firstDayOfYear(month.year);
    return Math.floor(daysBefore / this.data.weekdays.length);
  }
  get daysPerYear() {
    return this.data.months.filter((m) => m.type === "month").reduce((a, b) => a + b.length, 0);
  }
  daysBeforeMonth(month, year, all = false) {
    if (!month || month == 0)
      return 0;
    return this.data.months.slice(0, month).filter((m) => all ? true : m.type == "month").map((m, i) => m.length + this.leapDaysForMonth(i, year).length).reduce((a, b) => a + b, 0);
  }
  areDatesEqual(date, date2) {
    if (date.day != date2.day)
      return false;
    if (date.month != date2.month && date.month != void 0 && date2.month != void 0)
      return false;
    if (date.year != date2.year && date.year != void 0 && date2.year != void 0)
      return false;
    return true;
  }
  dayNumberForDate(date) {
    return this.daysBeforeMonth(date.month, date.year, true) + date.day;
  }
  get firstWeekday() {
    return this.data.firstWeekDay;
  }
  get leapDaysBefore() {
    if (this.displayed.year == 1)
      return 0;
    return this.leapDaysBeforeYear(this.displayed.year - 1);
  }
  leapDaysBeforeYear(tester) {
    if (tester == 1)
      return 0;
    const year = tester - 1;
    let total = 0;
    for (const { interval, offset: offset2 } of this.leapdays) {
      let leapdays = 0;
      for (let i = 0; i < interval.length; i++) {
        const condition = interval[i];
        const rest = interval.slice(i + 1).filter((c) => !c.exclusive).map((c) => Math.floor((year + (c.ignore ? 0 : offset2)) / c.interval)).reduce((a, b) => a + b, 0);
        const calc = Math.floor((year + (condition.ignore ? 0 : offset2)) / condition.interval);
        if (condition.exclusive) {
          leapdays -= calc;
          leapdays += rest;
        } else {
          leapdays += calc;
          leapdays -= rest;
        }
      }
      total += leapdays;
    }
    return total;
  }
  get totalDaysBefore() {
    return this.totalDaysBeforeYear(this.displayed.year);
  }
  totalDaysBeforeYear(year, all = false) {
    if (year < 1)
      return 0;
    return Math.abs(year - 1) * this.data.months.filter((m) => all || m.type == "month").reduce((a, b) => a + b.length, 0) + this.leapDaysBeforeYear(year);
  }
  firstDayOfYear(year = this.displayed.year) {
    if (!this.data.overflow)
      return 0;
    if (year == 1)
      return this.firstWeekday;
    return wrap(this.totalDaysBeforeYear(year) % this.data.weekdays.length + this.firstWeekday + (this.data.offset ?? 0), this.data.weekdays.length);
  }
  get moons() {
    return this.data.moons;
  }
  getMoonsForMonth(month) {
    const phases = [];
    for (const day of month.days) {
      const daysBefore = this.totalDaysBeforeYear(month.year, true) + this.daysBeforeMonth(month.number, month.year, true) + day.number - 1;
      const moons = [];
      for (let moon of this.moons) {
        const { offset: offset2, cycle } = moon;
        const granularity = 24;
        let data = (daysBefore - offset2) / cycle;
        let position = data - Math.floor(data);
        const phase = position * granularity % granularity;
        const options = MOON_PHASES[granularity];
        moons.push([
          moon,
          options[wrap(Math.round(phase), options.length)]
        ]);
      }
      phases.push(moons);
    }
    return phases;
  }
};

// node_modules/svelte/store/index.mjs
var subscriber_queue = [];
function writable(value, start2 = noop) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn2) {
    set(fn2(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/view/ui/DayView.svelte
var import_obsidian32 = __toModule(require("obsidian"));

// src/view/ui/Flag.svelte
var import_obsidian31 = __toModule(require("obsidian"));
function add_css26(target) {
  append_styles(target, "svelte-1e1nyi2", ".flag.svelte-1e1nyi2.svelte-1e1nyi2{cursor:pointer;position:relative;padding-left:0.125rem;text-align:left;width:100%;background-color:var(--hex-alpha);border-left:2px solid var(--color)}.flag-content.svelte-1e1nyi2.svelte-1e1nyi2{display:flex;gap:0.25rem;align-items:flex-start;justify-content:space-between}.day-view.svelte-1e1nyi2 .flag-content.svelte-1e1nyi2{justify-content:space-between}.clamp.svelte-1e1nyi2.svelte-1e1nyi2{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;text-overflow:ellipsis}.note.svelte-1e1nyi2.svelte-1e1nyi2{display:flex;align-self:center}.multi.svelte-1e1nyi2.svelte-1e1nyi2{flex-shrink:0;overflow:visible;width:unset}.multi.svelte-1e1nyi2 .clamp.svelte-1e1nyi2{-webkit-line-clamp:1;overflow:visible}.multi.start.svelte-1e1nyi2.svelte-1e1nyi2{margin-left:0}.multi.end.svelte-1e1nyi2.svelte-1e1nyi2{margin-right:0}.multi.first.svelte-1e1nyi2.svelte-1e1nyi2{overflow:visible;white-space:nowrap}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.first){color:transparent;overflow:hidden}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.start){border:0;margin-left:-6px}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.end){margin-right:-6px}.start.svelte-1e1nyi2>.flag-content.svelte-1e1nyi2{justify-content:flex-start;gap:1em}");
}
function create_if_block18(ctx) {
  let div;
  let note_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "note svelte-1e1nyi2");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(note_action = ctx[9].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment32(ctx) {
  let div1;
  let div0;
  let span;
  let t0_value = ctx[0].name + "";
  let t0;
  let t1;
  let div1_aria_label_value;
  let mounted;
  let dispose;
  let if_block = ctx[0].note && create_if_block18(ctx);
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      attr(span, "class", "svelte-1e1nyi2");
      toggle_class(span, "clamp", !ctx[1]);
      toggle_class(span, "day-view", ctx[1]);
      attr(div0, "class", "flag-content svelte-1e1nyi2");
      attr(div1, "class", "flag svelte-1e1nyi2");
      attr(div1, "aria-label", div1_aria_label_value = !ctx[1] ? ctx[0].name : null);
      set_style(div1, "--hex-alpha", ctx[6] + "40");
      set_style(div1, "--color", ctx[6]);
      toggle_class(div1, "multi", ctx[4]);
      toggle_class(div1, "start", ctx[2]);
      toggle_class(div1, "end", ctx[3]);
      toggle_class(div1, "first", ctx[5]);
      toggle_class(div1, "day-view", ctx[1]);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, span);
      append(span, t0);
      append(div0, t1);
      if (if_block)
        if_block.m(div0, null);
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[12]),
          listen(div1, "mouseover", ctx[13]),
          listen(div1, "focus", focus_handler),
          listen(div1, "contextmenu", ctx[14])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & 2) {
        toggle_class(span, "clamp", !ctx2[1]);
      }
      if (dirty & 2) {
        toggle_class(span, "day-view", ctx2[1]);
      }
      if (ctx2[0].note) {
        if (if_block) {
        } else {
          if_block = create_if_block18(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & 3 && div1_aria_label_value !== (div1_aria_label_value = !ctx2[1] ? ctx2[0].name : null)) {
        attr(div1, "aria-label", div1_aria_label_value);
      }
      if (dirty & 64) {
        set_style(div1, "--hex-alpha", ctx2[6] + "40");
      }
      if (dirty & 64) {
        set_style(div1, "--color", ctx2[6]);
      }
      if (dirty & 16) {
        toggle_class(div1, "multi", ctx2[4]);
      }
      if (dirty & 4) {
        toggle_class(div1, "start", ctx2[2]);
      }
      if (dirty & 8) {
        toggle_class(div1, "end", ctx2[3]);
      }
      if (dirty & 32) {
        toggle_class(div1, "first", ctx2[5]);
      }
      if (dirty & 2) {
        toggle_class(div1, "day-view", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
var focus_handler = () => {
};
function instance32($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { event } = $$props;
  let { date } = $$props;
  let { dayView = false } = $$props;
  let multi = false, start2 = false, end2 = false, first = false;
  let { categories } = $$props;
  let color = categories.find((c) => c.id == event.category)?.color ?? DEFAULT_CATEGORY_COLOR;
  const meta = import_obsidian31.Platform.isMacOS ? "Meta" : "Control";
  const note = (node) => {
    (0, import_obsidian31.setIcon)(node, "note-glyph");
  };
  const click_handler = (evt) => {
    evt.stopPropagation();
    dispatch2("event-click", {
      event,
      modifier: evt.getModifierState(meta)
    });
  };
  const mouseover_handler = (evt) => dispatch2("event-mouseover", { target: evt.target, event });
  const contextmenu_handler = (evt) => {
    evt.stopPropagation();
    dispatch2("event-context", { evt, event });
  };
  $$self.$$set = ($$props2) => {
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("date" in $$props2)
      $$invalidate(10, date = $$props2.date);
    if ("dayView" in $$props2)
      $$invalidate(1, dayView = $$props2.dayView);
    if ("categories" in $$props2)
      $$invalidate(11, categories = $$props2.categories);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1039) {
      $: {
        if (event.end != void 0 && !dayView) {
          $$invalidate(4, multi = true);
          $$invalidate(2, start2 = date.day === event.date.day && (event.date.month == void 0 || date.month == event.date.month) && (event.date.year == void 0 || date.year === event.date.year));
          $$invalidate(5, first = start2 || date.day == 1);
          $$invalidate(3, end2 = date.day === event.end.day && (event.end.month == void 0 || date.month == event.end.month) && (event.end.year == void 0 || date.year === event.end.year));
          if (start2 && end2) {
            $$invalidate(4, multi = false);
            $$invalidate(2, start2 = false);
            $$invalidate(3, end2 = false);
          }
        }
      }
    }
    if ($$self.$$.dirty & 2049) {
      $:
        $$invalidate(6, color = categories.find((c) => c.id == event.category)?.color ?? DEFAULT_CATEGORY_COLOR);
    }
  };
  return [
    event,
    dayView,
    start2,
    end2,
    multi,
    first,
    color,
    dispatch2,
    meta,
    note,
    date,
    categories,
    click_handler,
    mouseover_handler,
    contextmenu_handler
  ];
}
var Flag = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance32, create_fragment32, safe_not_equal, {
      event: 0,
      date: 10,
      dayView: 1,
      categories: 11
    }, add_css26);
  }
};
var Flag_default = Flag;

// src/view/ui/Flags.svelte
function add_css27(target) {
  append_styles(target, "svelte-qnut28", ".flags-container.svelte-qnut28{height:100%}.flag-container.svelte-qnut28{display:flex;flex-flow:column nowrap;gap:0.25rem}.overflow.svelte-qnut28{color:var(--text-muted);display:flex;justify-content:flex-end;width:100%}");
}
function create_key_block(ctx) {
  let div;
  let addEvents_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "flag-container svelte-qnut28");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(addEvents_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block19(ctx) {
  let span;
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text("+");
      t1 = text(ctx[1]);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t1, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment33(ctx) {
  let div1;
  let previous_key = ctx[0];
  let t;
  let div0;
  let key_block = create_key_block(ctx);
  let if_block = ctx[1] > 0 && create_if_block19(ctx);
  return {
    c() {
      div1 = element("div");
      key_block.c();
      t = space();
      div0 = element("div");
      if (if_block)
        if_block.c();
      attr(div0, "class", "overflow svelte-qnut28");
      attr(div1, "class", "flags-container svelte-qnut28");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      key_block.m(div1, null);
      append(div1, t);
      append(div1, div0);
      if (if_block)
        if_block.m(div0, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(div1, t);
      }
      if (ctx2[1] > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block19(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      key_block.d(detaching);
      if (if_block)
        if_block.d();
    }
  };
}
function instance33($$self, $$props, $$invalidate) {
  let { events = [] } = $$props;
  let { categories } = $$props;
  let { dayView = false } = $$props;
  let { date } = $$props;
  let { calendar } = $$props;
  let overflow = 0;
  const dispatch2 = createEventDispatcher();
  let flagContainer;
  let previousHeight = 0;
  const addEvents = (flags) => {
    if (events.length) {
      const height = flags?.parentElement?.getBoundingClientRect()?.height;
      if (!dayView && (height == null || Math.floor(height) == Math.floor(previousHeight)))
        return;
      previousHeight = height;
      flagContainer = flags;
      flags.empty();
      $$invalidate(1, overflow = 0);
      let remaining = height;
      for (const event of events) {
        const flag = new Flag_default({
          target: flags,
          props: { event, categories, dayView, date }
        });
        flag.$on("event-click", (e) => dispatch2("event-click", e.detail));
        flag.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
        flag.$on("event-context", (e) => dispatch2("event-context", e.detail));
        if (!dayView) {
          remaining = height - flags.getBoundingClientRect().height;
          if (remaining < 0) {
            flags.lastElementChild.detach();
            $$invalidate(1, overflow = events.length - events.indexOf(event));
            break;
          } else if (remaining == 0) {
            $$invalidate(1, overflow = events.length - events.indexOf(event) - 1);
            break;
          }
        }
      }
    }
  };
  calendar.on("view-resized", () => {
    if (dayView)
      return;
    addEvents(flagContainer);
  });
  $$self.$$set = ($$props2) => {
    if ("events" in $$props2)
      $$invalidate(0, events = $$props2.events);
    if ("categories" in $$props2)
      $$invalidate(3, categories = $$props2.categories);
    if ("dayView" in $$props2)
      $$invalidate(4, dayView = $$props2.dayView);
    if ("date" in $$props2)
      $$invalidate(5, date = $$props2.date);
    if ("calendar" in $$props2)
      $$invalidate(6, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(0, events = [...events]);
    }
  };
  return [events, overflow, addEvents, categories, dayView, date, calendar];
}
var Flags = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance33, create_fragment33, safe_not_equal, {
      events: 0,
      categories: 3,
      dayView: 4,
      date: 5,
      calendar: 6
    }, add_css27);
  }
};
var Flags_default = Flags;

// src/view/ui/DayView.svelte
function add_css28(target) {
  append_styles(target, "svelte-1uhffao", ".day-view.svelte-1uhffao{padding:5px 15px;display:flex;flex-flow:column nowrap;gap:0.5rem}.nav.svelte-1uhffao,.date.svelte-1uhffao{display:flex;justify-content:space-between;align-items:center}.left-nav.svelte-1uhffao{display:flex}.left-nav.svelte-1uhffao .clickable-icon{margin-right:0}.calendar-clickable.svelte-1uhffao{align-items:center;cursor:pointer;display:flex;justify-content:center}h3.svelte-1uhffao{margin:0}.day-view.svelte-1uhffao .flag-container > .flag{padding-left:0.5rem}.title-container.svelte-1uhffao{display:flex;flex-flow:column nowrap;align-items:center;justify-content:center}.day-number.svelte-1uhffao{font-size:small}");
}
function get_each_context14(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i][0];
  child_ctx[25] = list[i][1];
  return child_ctx;
}
function create_if_block_14(ctx) {
  let div;
  let em;
  let t0;
  let t1;
  return {
    c() {
      div = element("div");
      em = element("em");
      t0 = text("Day ");
      t1 = text(ctx[8]);
      attr(div, "class", "day-number svelte-1uhffao");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, em);
      append(em, t0);
      append(em, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 256)
        set_data(t1, ctx2[8]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block20(ctx) {
  let div;
  let current;
  let each_value = ctx[5];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block14(get_each_context14(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "moon-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 32) {
        each_value = ctx2[5];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context14(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block14(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block14(ctx) {
  let moon;
  let current;
  moon = new Moon_default({
    props: {
      moon: ctx[24],
      phase: ctx[25]
    }
  });
  return {
    c() {
      create_component(moon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(moon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const moon_changes = {};
      if (dirty & 32)
        moon_changes.moon = ctx2[24];
      if (dirty & 32)
        moon_changes.phase = ctx2[25];
      moon.$set(moon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(moon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(moon, detaching);
    }
  };
}
function create_fragment34(ctx) {
  let div9;
  let div4;
  let div2;
  let div0;
  let reveal_action;
  let t0;
  let div1;
  let event_action;
  let t1;
  let div3;
  let close_action;
  let t2;
  let div8;
  let div5;
  let left_action;
  let t3;
  let div6;
  let h3;
  let span;
  let t4;
  let t5;
  let t6;
  let div7;
  let right_action;
  let t7;
  let t8;
  let flags;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[0] && create_if_block_14(ctx);
  let if_block1 = ctx[4] && ctx[5] && ctx[5].length && create_if_block20(ctx);
  flags = new Flags_default({
    props: {
      events: ctx[3].events,
      categories: ctx[7],
      date: ctx[2],
      dayView: true,
      calendar: ctx[1]
    }
  });
  flags.$on("event-click", ctx[19]);
  flags.$on("event-mouseover", ctx[20]);
  flags.$on("event-context", ctx[21]);
  return {
    c() {
      div9 = element("div");
      div4 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div3 = element("div");
      t2 = space();
      div8 = element("div");
      div5 = element("div");
      t3 = space();
      div6 = element("div");
      h3 = element("h3");
      span = element("span");
      t4 = text(ctx[6]);
      t5 = space();
      if (if_block0)
        if_block0.c();
      t6 = space();
      div7 = element("div");
      t7 = space();
      if (if_block1)
        if_block1.c();
      t8 = space();
      create_component(flags.$$.fragment);
      attr(div2, "class", "left-nav svelte-1uhffao");
      attr(div4, "class", "nav svelte-1uhffao");
      attr(div5, "class", "arrow calendar-clickable svelte-1uhffao");
      attr(div5, "aria-label", "Previous");
      attr(span, "class", "current");
      attr(h3, "class", "fantasy-title title svelte-1uhffao");
      attr(div6, "class", "title-container svelte-1uhffao");
      attr(div7, "class", "arrow right calendar-clickable svelte-1uhffao");
      attr(div7, "aria-label", "Next");
      attr(div8, "class", "date svelte-1uhffao");
      attr(div9, "class", "day-view svelte-1uhffao");
    },
    m(target, anchor) {
      insert(target, div9, anchor);
      append(div9, div4);
      append(div4, div2);
      append(div2, div0);
      append(div2, t0);
      append(div2, div1);
      append(div4, t1);
      append(div4, div3);
      append(div9, t2);
      append(div9, div8);
      append(div8, div5);
      append(div8, t3);
      append(div8, div6);
      append(div6, h3);
      append(h3, span);
      append(span, t4);
      append(div6, t5);
      if (if_block0)
        if_block0.m(div6, null);
      append(div8, t6);
      append(div8, div7);
      append(div9, t7);
      if (if_block1)
        if_block1.m(div9, null);
      append(div9, t8);
      mount_component(flags, div9, null);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(reveal_action = ctx[11].call(null, div0)),
          listen(div0, "click", ctx[15]),
          action_destroyer(event_action = ctx[12].call(null, div1)),
          action_destroyer(close_action = ctx[10].call(null, div3)),
          listen(div3, "click", ctx[16]),
          action_destroyer(left_action = ctx[13].call(null, div5)),
          listen(div5, "click", ctx[17]),
          action_destroyer(right_action = ctx[14].call(null, div7)),
          listen(div7, "click", ctx[18])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 64)
        set_data(t4, ctx2[6]);
      if (ctx2[0]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_14(ctx2);
          if_block0.c();
          if_block0.m(div6, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (ctx2[4] && ctx2[5] && ctx2[5].length) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & 48) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block20(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div9, t8);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const flags_changes = {};
      if (dirty & 8)
        flags_changes.events = ctx2[3].events;
      if (dirty & 128)
        flags_changes.categories = ctx2[7];
      if (dirty & 4)
        flags_changes.date = ctx2[2];
      if (dirty & 2)
        flags_changes.calendar = ctx2[1];
      flags.$set(flags_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(flags.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(flags.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div9);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      destroy_component(flags);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance34($$self, $$props, $$invalidate) {
  let currentDate;
  let date;
  let day;
  let dayNumber;
  let moons;
  let categories;
  let { displayDayNumber } = $$props;
  const calendarStore = getContext("calendar");
  let calendar;
  calendarStore.subscribe((c) => {
    $$invalidate(1, calendar = c);
  });
  let displayMoons;
  const moonStore = getContext("displayMoons");
  moonStore.subscribe((v) => $$invalidate(4, displayMoons = v));
  calendar.on("day-update", () => {
    $$invalidate(2, date = calendar.viewing);
    $$invalidate(6, currentDate = calendar.viewedDate);
    $$invalidate(3, day = calendar.getDayForDate(date));
    $$invalidate(5, moons = day.moons);
  });
  const dispatch2 = createEventDispatcher();
  const close = (node) => {
    new import_obsidian32.ExtraButtonComponent(node).setIcon("cross").setTooltip("Close");
  };
  const reveal = (node) => {
    new import_obsidian32.ExtraButtonComponent(node).setIcon("fantasy-calendar-reveal").setTooltip("Show on Calendar").onClick(() => {
      $$invalidate(1, calendar.displayed.year = calendar.viewing.year, calendar);
      calendar.setCurrentMonth(calendar.viewing.month);
    });
  };
  const event = (node) => {
    new import_obsidian32.ExtraButtonComponent(node).setIcon("plus-with-circle").setTooltip("New Event").onClick(() => dispatch2("event", date));
  };
  const left2 = (node) => {
    new import_obsidian32.ExtraButtonComponent(node).setIcon("left-arrow");
  };
  const right2 = (node) => {
    new import_obsidian32.ExtraButtonComponent(node).setIcon("right-arrow");
  };
  const click_handler = () => dispatch2("reveal");
  const click_handler_1 = () => dispatch2("close");
  const click_handler_2 = () => calendar.goToPreviousDay();
  const click_handler_3 = () => calendar.goToNextDay();
  function event_click_handler(event2) {
    bubble.call(this, $$self, event2);
  }
  function event_mouseover_handler(event2) {
    bubble.call(this, $$self, event2);
  }
  function event_context_handler(event2) {
    bubble.call(this, $$self, event2);
  }
  $$self.$$set = ($$props2) => {
    if ("displayDayNumber" in $$props2)
      $$invalidate(0, displayDayNumber = $$props2.displayDayNumber);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(6, currentDate = calendar.viewedDate);
    }
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(2, date = calendar.viewing);
    }
    if ($$self.$$.dirty & 6) {
      $:
        $$invalidate(3, day = calendar.getDayForDate(date));
    }
    if ($$self.$$.dirty & 6) {
      $:
        $$invalidate(8, dayNumber = calendar.dayNumberForDate(date));
    }
    if ($$self.$$.dirty & 8) {
      $:
        $$invalidate(5, moons = day.moons);
    }
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(7, categories = calendar.categories);
    }
  };
  return [
    displayDayNumber,
    calendar,
    date,
    day,
    displayMoons,
    moons,
    currentDate,
    categories,
    dayNumber,
    dispatch2,
    close,
    reveal,
    event,
    left2,
    right2,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    event_click_handler,
    event_mouseover_handler,
    event_context_handler
  ];
}
var DayView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance34, create_fragment34, safe_not_equal, { displayDayNumber: 0 }, add_css28);
  }
};
var DayView_default = DayView;

// src/view/ui/Dot.svelte
function add_css29(target) {
  append_styles(target, "svelte-1gou5hh", ".dot.svelte-1gou5hh{display:inline-block;min-height:6px;min-width:6px;height:6px;width:6px;margin:0 2px}.active.svelte-1gou5hh{color:var(--text-on-accent)}");
}
function create_fragment35(ctx) {
  let svg;
  let circle;
  let circle_stroke_value;
  let circle_fill_value;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "stroke", circle_stroke_value = ctx[2] ?? "currentColor");
      attr(circle, "fill", circle_fill_value = ctx[2] ?? "currentColor");
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", "dot svelte-1gou5hh");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      toggle_class(svg, "filled", ctx[0]);
      toggle_class(svg, "active", ctx[1]);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, [dirty]) {
      if (dirty & 4 && circle_stroke_value !== (circle_stroke_value = ctx2[2] ?? "currentColor")) {
        attr(circle, "stroke", circle_stroke_value);
      }
      if (dirty & 4 && circle_fill_value !== (circle_fill_value = ctx2[2] ?? "currentColor")) {
        attr(circle, "fill", circle_fill_value);
      }
      if (dirty & 1) {
        toggle_class(svg, "filled", ctx2[0]);
      }
      if (dirty & 2) {
        toggle_class(svg, "active", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance35($$self, $$props, $$invalidate) {
  let { isFilled = true } = $$props;
  let { isActive = false } = $$props;
  let { color } = $$props;
  $$self.$$set = ($$props2) => {
    if ("isFilled" in $$props2)
      $$invalidate(0, isFilled = $$props2.isFilled);
    if ("isActive" in $$props2)
      $$invalidate(1, isActive = $$props2.isActive);
    if ("color" in $$props2)
      $$invalidate(2, color = $$props2.color);
  };
  return [isFilled, isActive, color];
}
var Dot3 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance35, create_fragment35, safe_not_equal, { isFilled: 0, isActive: 1, color: 2 }, add_css29);
  }
};
var Dot_default3 = Dot3;

// src/view/ui/Dots.svelte
function add_css30(target) {
  append_styles(target, "svelte-1w3ytba", ".dots-container.svelte-1w3ytba{width:100%}.dot-container.svelte-1w3ytba{display:flex;flex-flow:row nowrap;width:fit-content;margin:auto;line-height:6px;min-height:6px}.centered.svelte-1w3ytba{justify-content:center;align-items:center}.overflow.svelte-1w3ytba{color:var(--text-muted);font-size:xx-small;display:flex;justify-content:flex-end;width:100%;line-height:1.25}");
}
function create_key_block2(ctx) {
  let div;
  let addEvents_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "dot-container centered svelte-1w3ytba");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(addEvents_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block21(ctx) {
  let span;
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text("+");
      t1 = text(ctx[1]);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t1, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment36(ctx) {
  let div1;
  let previous_key = ctx[0];
  let t;
  let div0;
  let key_block = create_key_block2(ctx);
  let if_block = ctx[1] > 0 && create_if_block21(ctx);
  return {
    c() {
      div1 = element("div");
      key_block.c();
      t = space();
      div0 = element("div");
      if (if_block)
        if_block.c();
      attr(div0, "class", "overflow svelte-1w3ytba");
      attr(div1, "class", "dots-container svelte-1w3ytba");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      key_block.m(div1, null);
      append(div1, t);
      append(div1, div0);
      if (if_block)
        if_block.m(div0, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block2(ctx2);
        key_block.c();
        key_block.m(div1, t);
      }
      if (ctx2[1] > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block21(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      key_block.d(detaching);
      if (if_block)
        if_block.d();
    }
  };
}
function instance36($$self, $$props, $$invalidate) {
  let { events = [] } = $$props;
  let { categories } = $$props;
  let { calendar } = $$props;
  let overflow = 0;
  let dotContainer;
  let previousWidth = 0;
  const addEvents = (dots) => {
    dotContainer = dots;
    if (events.length) {
      const width = dots.parentElement?.getBoundingClientRect()?.width;
      if (!width || Math.floor(width) == Math.floor(previousWidth))
        return;
      previousWidth = width;
      let remaining = width;
      dots.empty();
      $$invalidate(1, overflow = 0);
      for (const event of events) {
        new Dot_default3({
          target: dots,
          props: { color: color(event) }
        });
        remaining = width - dots.getBoundingClientRect().width;
        if (remaining < 0) {
          dots.lastElementChild.detach();
          $$invalidate(1, overflow = events.length - events.indexOf(event));
          break;
        } else if (remaining == 0) {
          $$invalidate(1, overflow = events.length - events.indexOf(event) - 1);
          break;
        }
      }
    }
  };
  calendar.on("view-resized", () => {
    if (!dotContainer)
      return;
    addEvents(dotContainer);
  });
  const color = (event) => {
    return categories.find((c) => c.id == event.category)?.color;
  };
  $$self.$$set = ($$props2) => {
    if ("events" in $$props2)
      $$invalidate(0, events = $$props2.events);
    if ("categories" in $$props2)
      $$invalidate(3, categories = $$props2.categories);
    if ("calendar" in $$props2)
      $$invalidate(4, calendar = $$props2.calendar);
  };
  return [events, overflow, addEvents, categories, calendar];
}
var Dots = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance36, create_fragment36, safe_not_equal, { events: 0, categories: 3, calendar: 4 }, add_css30);
  }
};
var Dots_default = Dots;

// src/view/ui/Day.svelte
function add_css31(target) {
  append_styles(target, "svelte-3pptg2", ".day.svelte-3pptg2{background-color:transparent;border:2px solid transparent;border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:2px;position:relative;text-align:center;vertical-align:baseline;overflow:visible;display:flex;flex-flow:column nowrap}.active.svelte-3pptg2{background-color:var(--background-secondary)}.viewing.svelte-3pptg2{border:2px solid var(--background-modifier-border)}.adjacent-month.svelte-3pptg2{opacity:0.25}");
}
function get_each_context15(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i][0];
  child_ctx[21] = list[i][1];
  return child_ctx;
}
function create_else_block15(ctx) {
  let dots;
  let current;
  dots = new Dots_default({
    props: {
      events: ctx[4],
      categories: ctx[9],
      calendar: ctx[0].calendar
    }
  });
  return {
    c() {
      create_component(dots.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dots, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dots_changes = {};
      if (dirty & 16)
        dots_changes.events = ctx2[4];
      if (dirty & 512)
        dots_changes.categories = ctx2[9];
      if (dirty & 1)
        dots_changes.calendar = ctx2[0].calendar;
      dots.$set(dots_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dots.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dots.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dots, detaching);
    }
  };
}
function create_if_block22(ctx) {
  let t;
  let flags;
  let current;
  let if_block = ctx[5] && ctx[10] && ctx[10].length && create_if_block_15(ctx);
  flags = new Flags_default({
    props: {
      events: ctx[4],
      categories: ctx[9],
      date: ctx[8],
      calendar: ctx[0].calendar
    }
  });
  flags.$on("event-click", ctx[12]);
  flags.$on("event-mouseover", ctx[13]);
  flags.$on("event-context", ctx[14]);
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
      create_component(flags.$$.fragment);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
      mount_component(flags, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[5] && ctx2[10] && ctx2[10].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1056) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_15(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const flags_changes = {};
      if (dirty & 16)
        flags_changes.events = ctx2[4];
      if (dirty & 512)
        flags_changes.categories = ctx2[9];
      if (dirty & 256)
        flags_changes.date = ctx2[8];
      if (dirty & 1)
        flags_changes.calendar = ctx2[0].calendar;
      flags.$set(flags_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(flags.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(flags.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t);
      destroy_component(flags, detaching);
    }
  };
}
function create_if_block_15(ctx) {
  let div;
  let current;
  let each_value = ctx[10];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block15(get_each_context15(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "moon-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 1024) {
        each_value = ctx2[10];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context15(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block15(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block15(ctx) {
  let moon;
  let current;
  moon = new Moon_default({
    props: {
      moon: ctx[20],
      phase: ctx[21]
    }
  });
  return {
    c() {
      create_component(moon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(moon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const moon_changes = {};
      if (dirty & 1024)
        moon_changes.moon = ctx2[20];
      if (dirty & 1024)
        moon_changes.phase = ctx2[21];
      moon.$set(moon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(moon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(moon, detaching);
    }
  };
}
function create_fragment37(ctx) {
  let div;
  let span;
  let t0_value = ctx[0].number + "";
  let t0;
  let t1;
  let current_block_type_index;
  let if_block;
  let div_class_value;
  let div_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block22, create_else_block15];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[2])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if_block.c();
      attr(div, "class", div_class_value = "" + (null_to_empty(ctx[1] ? "adjacent-month fantasy-adjacent-month" : "") + " svelte-3pptg2"));
      attr(div, "aria-label", div_aria_label_value = !ctx[2] && ctx[4].length ? `${ctx[4].length} event${ctx[4].length == 1 ? "" : "s"}` : void 0);
      toggle_class(div, "day", true);
      toggle_class(div, "fantasy-day", true);
      toggle_class(div, "active", ctx[7] && !ctx[1]);
      toggle_class(div, "viewing", ctx[3] && ctx[6] && !ctx[1]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(span, t0);
      append(div, t1);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div, "click", ctx[15]),
          listen(div, "dblclick", ctx[16]),
          listen(div, "contextmenu", ctx[17])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & 1) && t0_value !== (t0_value = ctx2[0].number + ""))
        set_data(t0, t0_value);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & 2 && div_class_value !== (div_class_value = "" + (null_to_empty(ctx2[1] ? "adjacent-month fantasy-adjacent-month" : "") + " svelte-3pptg2"))) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty & 20 && div_aria_label_value !== (div_aria_label_value = !ctx2[2] && ctx2[4].length ? `${ctx2[4].length} event${ctx2[4].length == 1 ? "" : "s"}` : void 0)) {
        attr(div, "aria-label", div_aria_label_value);
      }
      if (dirty & 2) {
        toggle_class(div, "day", true);
      }
      if (dirty & 2) {
        toggle_class(div, "fantasy-day", true);
      }
      if (dirty & 130) {
        toggle_class(div, "active", ctx2[7] && !ctx2[1]);
      }
      if (dirty & 74) {
        toggle_class(div, "viewing", ctx2[3] && ctx2[6] && !ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance37($$self, $$props, $$invalidate) {
  let moons;
  let categories;
  let date;
  let today;
  let displaying;
  const dispatch2 = createEventDispatcher();
  let { day } = $$props;
  let { adjacent } = $$props;
  let { fullView } = $$props;
  let events = [];
  let dayView;
  const dayViewStore = getContext("dayView");
  dayViewStore.subscribe((v) => $$invalidate(3, dayView = v));
  let displayMoons;
  const moonStore = getContext("displayMoons");
  moonStore.subscribe((v) => $$invalidate(5, displayMoons = v));
  day.calendar.on("month-update", () => {
    $$invalidate(7, today = day.isCurrentDay);
    $$invalidate(6, displaying = day.isDisplaying);
    $$invalidate(4, events = day.events);
  });
  day.calendar.on("day-update", () => {
    $$invalidate(7, today = day.isCurrentDay);
    $$invalidate(6, displaying = day.isDisplaying);
  });
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = () => dispatch2("day-click", day);
  const dblclick_handler = () => dispatch2("day-doubleclick", day);
  const contextmenu_handler = (evt) => dispatch2("day-context-menu", { day, evt });
  $$self.$$set = ($$props2) => {
    if ("day" in $$props2)
      $$invalidate(0, day = $$props2.day);
    if ("adjacent" in $$props2)
      $$invalidate(1, adjacent = $$props2.adjacent);
    if ("fullView" in $$props2)
      $$invalidate(2, fullView = $$props2.fullView);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 3) {
      $: {
        if (!adjacent) {
          $$invalidate(4, events = day.events);
        }
      }
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(10, moons = day.moons);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(9, categories = day.calendar.categories);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(8, date = day.date);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(7, today = day.isCurrentDay);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(6, displaying = day.isDisplaying);
    }
    if ($$self.$$.dirty & 8) {
      $:
        $$invalidate(3, dayView);
    }
  };
  return [
    day,
    adjacent,
    fullView,
    dayView,
    events,
    displayMoons,
    displaying,
    today,
    date,
    categories,
    moons,
    dispatch2,
    event_click_handler,
    event_mouseover_handler,
    event_context_handler,
    click_handler,
    dblclick_handler,
    contextmenu_handler
  ];
}
var Day = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance37, create_fragment37, safe_not_equal, { day: 0, adjacent: 1, fullView: 2 }, add_css31);
  }
};
var Day_default = Day;

// src/view/ui/Month.svelte
function add_css32(target) {
  append_styles(target, "svelte-1xujcmn", ".fantasy-month.svelte-1xujcmn{display:grid;grid-template-columns:repeat(\n            var(--calendar-columns),\n            var(--column-widths)\n        );grid-auto-rows:var(--calendar-rows)}.full-view.svelte-1xujcmn{height:100%;margin-bottom:0.5rem}.month.svelte-1xujcmn{border-radius:1rem;padding:0.25rem}.month-name.svelte-1xujcmn{margin:0}.month.svelte-1xujcmn .fantasy-day.day{padding:0px}");
}
function get_each_context16(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_if_block_2(ctx) {
  let h3;
  let t_value = ctx[1].name + "";
  let t;
  return {
    c() {
      h3 = element("h3");
      t = text(t_value);
      attr(h3, "class", "month-name svelte-1xujcmn");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      append(h3, t);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t_value !== (t_value = ctx2[1].name + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(h3);
    }
  };
}
function create_else_block_1(ctx) {
  let div;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block_16(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      day: ctx[16],
      adjacent: true,
      fullView: ctx[3]
    }
  });
  return {
    c() {
      create_component(day.$$.fragment);
    },
    m(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const day_changes = {};
      if (dirty & 256)
        day_changes.day = ctx2[16];
      if (dirty & 8)
        day_changes.fullView = ctx2[3];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(day, detaching);
    }
  };
}
function create_each_block_2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_16, create_else_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[5] && ctx2[16] != null)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block_13(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      day: ctx[16],
      adjacent: false,
      fullView: ctx[3]
    }
  });
  day.$on("day-click", ctx[10]);
  day.$on("day-doubleclick", ctx[11]);
  day.$on("day-context-menu", ctx[12]);
  day.$on("event-click", ctx[13]);
  day.$on("event-mouseover", ctx[14]);
  day.$on("event-context", ctx[15]);
  return {
    c() {
      create_component(day.$$.fragment);
    },
    m(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const day_changes = {};
      if (dirty & 128)
        day_changes.day = ctx2[16];
      if (dirty & 8)
        day_changes.fullView = ctx2[3];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(day, detaching);
    }
  };
}
function create_else_block16(ctx) {
  let div;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block23(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      day: ctx[16],
      adjacent: true,
      fullView: ctx[3]
    }
  });
  return {
    c() {
      create_component(day.$$.fragment);
    },
    m(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const day_changes = {};
      if (dirty & 64)
        day_changes.day = ctx2[16];
      if (dirty & 8)
        day_changes.fullView = ctx2[3];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(day, detaching);
    }
  };
}
function create_each_block16(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block23, create_else_block16];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[5])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_key_block3(ctx) {
  let div;
  let t0;
  let t1;
  let current;
  let each_value_2 = ctx[8];
  let each_blocks_2 = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  const out = (i) => transition_out(each_blocks_2[i], 1, 1, () => {
    each_blocks_2[i] = null;
  });
  let each_value_1 = ctx[7];
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  const out_1 = (i) => transition_out(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });
  let each_value = ctx[6];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block16(get_each_context16(ctx, each_value, i));
  }
  const out_2 = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }
      t0 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "fantasy-month svelte-1xujcmn");
      set_style(div, "--calendar-columns", ctx[2]);
      set_style(div, "--calendar-rows", ctx[3] ? `${1 / ctx[4] * 100}%` : "1fr");
      toggle_class(div, "full-view", ctx[3]);
      toggle_class(div, "year-view", ctx[0]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].m(div, null);
      }
      append(div, t0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(div, null);
      }
      append(div, t1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 296) {
        each_value_2 = ctx2[8];
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks_2[i]) {
            each_blocks_2[i].p(child_ctx, dirty);
            transition_in(each_blocks_2[i], 1);
          } else {
            each_blocks_2[i] = create_each_block_2(child_ctx);
            each_blocks_2[i].c();
            transition_in(each_blocks_2[i], 1);
            each_blocks_2[i].m(div, t0);
          }
        }
        group_outros();
        for (i = each_value_2.length; i < each_blocks_2.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty & 136) {
        each_value_1 = ctx2[7];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            transition_in(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_13(child_ctx);
            each_blocks_1[i].c();
            transition_in(each_blocks_1[i], 1);
            each_blocks_1[i].m(div, t1);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
          out_1(i);
        }
        check_outros();
      }
      if (dirty & 104) {
        each_value = ctx2[6];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context16(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block16(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out_2(i);
        }
        check_outros();
      }
      if (!current || dirty & 4) {
        set_style(div, "--calendar-columns", ctx2[2]);
      }
      if (!current || dirty & 24) {
        set_style(div, "--calendar-rows", ctx2[3] ? `${1 / ctx2[4] * 100}%` : "1fr");
      }
      if (dirty & 8) {
        toggle_class(div, "full-view", ctx2[3]);
      }
      if (dirty & 1) {
        toggle_class(div, "year-view", ctx2[0]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks_2[i]);
      }
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks_2 = each_blocks_2.filter(Boolean);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        transition_out(each_blocks_2[i]);
      }
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks_2, detaching);
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment38(ctx) {
  let div;
  let t;
  let previous_key = ctx[7];
  let div_data_id_value;
  let div_id_value;
  let current;
  let if_block = ctx[0] && create_if_block_2(ctx);
  let key_block = create_key_block3(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t = space();
      key_block.c();
      attr(div, "class", "month svelte-1xujcmn");
      attr(div, "data-id", div_data_id_value = ctx[1].id);
      attr(div, "id", div_id_value = `MONTH-${ctx[1].id}-${ctx[1].year}`);
      toggle_class(div, "full-view", ctx[3]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append(div, t);
      key_block.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          if_block.m(div, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & 128 && safe_not_equal(previous_key, previous_key = ctx2[7])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block3(ctx2);
        key_block.c();
        transition_in(key_block);
        key_block.m(div, null);
      } else {
        key_block.p(ctx2, dirty);
      }
      if (!current || dirty & 2 && div_data_id_value !== (div_data_id_value = ctx2[1].id)) {
        attr(div, "data-id", div_data_id_value);
      }
      if (!current || dirty & 2 && div_id_value !== (div_id_value = `MONTH-${ctx2[1].id}-${ctx2[1].year}`)) {
        attr(div, "id", div_id_value);
      }
      if (dirty & 8) {
        toggle_class(div, "full-view", ctx2[3]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      key_block.d(detaching);
    }
  };
}
function instance38($$self, $$props, $$invalidate) {
  let padded;
  let previous;
  let current;
  let next2;
  let { yearView = false } = $$props;
  let { month } = $$props;
  let { columns } = $$props;
  let { fullView = false } = $$props;
  let { weeks } = $$props;
  let { showPad = true } = $$props;
  function day_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("yearView" in $$props2)
      $$invalidate(0, yearView = $$props2.yearView);
    if ("month" in $$props2)
      $$invalidate(1, month = $$props2.month);
    if ("columns" in $$props2)
      $$invalidate(2, columns = $$props2.columns);
    if ("fullView" in $$props2)
      $$invalidate(3, fullView = $$props2.fullView);
    if ("weeks" in $$props2)
      $$invalidate(4, weeks = $$props2.weeks);
    if ("showPad" in $$props2)
      $$invalidate(5, showPad = $$props2.showPad);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(9, padded = month.calendar.getPaddedDaysForMonth(month));
    }
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(8, previous = padded.previous);
    }
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(7, current = month.days);
    }
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(6, next2 = padded.next);
    }
  };
  return [
    yearView,
    month,
    columns,
    fullView,
    weeks,
    showPad,
    next2,
    current,
    previous,
    padded,
    day_click_handler,
    day_doubleclick_handler,
    day_context_menu_handler,
    event_click_handler,
    event_mouseover_handler,
    event_context_handler
  ];
}
var Month2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance38, create_fragment38, safe_not_equal, {
      yearView: 0,
      month: 1,
      columns: 2,
      fullView: 3,
      weeks: 4,
      showPad: 5
    }, add_css32);
  }
};
var Month_default2 = Month2;

// src/view/ui/Nav.svelte
var import_obsidian33 = __toModule(require("obsidian"));
function add_css33(target) {
  append_styles(target, "svelte-131055d", ".fantasy-nav.nav.nav.svelte-131055d{padding:10px 0px;margin:0;display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:stretch}.container.svelte-131055d{display:flex;align-items:center}.fantasy-title.svelte-131055d{margin:0;line-height:1.25}.fantasy-right-nav.svelte-131055d{display:flex;justify-content:center;align-items:flex-start}.calendar-clickable.svelte-131055d{align-items:center;cursor:pointer;display:flex;justify-content:center}.title-container.svelte-131055d{display:flex;flex-flow:column nowrap;align-items:flex-start}");
}
function create_fragment39(ctx) {
  let div7;
  let div0;
  let h3;
  let span0;
  let t0;
  let t1;
  let span1;
  let t2;
  let t3;
  let div6;
  let div5;
  let div1;
  let left_action;
  let t4;
  let div2;
  let span2;
  let div2_aria_label_value;
  let t6;
  let div3;
  let right_action;
  let t7;
  let div4;
  let settings_action;
  let mounted;
  let dispose;
  return {
    c() {
      div7 = element("div");
      div0 = element("div");
      h3 = element("h3");
      span0 = element("span");
      t0 = text(ctx[0]);
      t1 = space();
      span1 = element("span");
      t2 = text(ctx[1]);
      t3 = space();
      div6 = element("div");
      div5 = element("div");
      div1 = element("div");
      t4 = space();
      div2 = element("div");
      span2 = element("span");
      span2.textContent = "Today";
      t6 = space();
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      attr(span0, "class", "fantasy-month month");
      attr(span1, "class", "fantasy-year year");
      attr(h3, "class", "fantasy-title title svelte-131055d");
      attr(div0, "class", "title-container svelte-131055d");
      attr(div1, "class", "arrow calendar-clickable svelte-131055d");
      attr(div1, "aria-label", "Previous Month");
      attr(div2, "class", "reset-button calendar-clickable svelte-131055d");
      attr(div2, "aria-label", div2_aria_label_value = "Today is " + ctx[2]);
      attr(div3, "class", "arrow right calendar-clickable svelte-131055d");
      attr(div3, "aria-label", "Next Month");
      attr(div4, "class", "calendar-clickable svelte-131055d");
      attr(div4, "aria-label", "Calendar Settings");
      attr(div5, "class", "container svelte-131055d");
      attr(div6, "class", "right-nav fantasy-right-nav svelte-131055d");
      attr(div7, "class", "fantasy-nav nav svelte-131055d");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, div0);
      append(div0, h3);
      append(h3, span0);
      append(span0, t0);
      append(h3, t1);
      append(h3, span1);
      append(span1, t2);
      append(div7, t3);
      append(div7, div6);
      append(div6, div5);
      append(div5, div1);
      append(div5, t4);
      append(div5, div2);
      append(div2, span2);
      append(div5, t6);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      if (!mounted) {
        dispose = [
          action_destroyer(left_action = ctx[4].call(null, div1)),
          listen(div1, "click", ctx[7]),
          listen(div2, "click", ctx[8]),
          action_destroyer(right_action = ctx[5].call(null, div3)),
          listen(div3, "click", ctx[9]),
          action_destroyer(settings_action = ctx[6].call(null, div4)),
          listen(div4, "click", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t0, ctx2[0]);
      if (dirty & 2)
        set_data(t2, ctx2[1]);
      if (dirty & 4 && div2_aria_label_value !== (div2_aria_label_value = "Today is " + ctx2[2])) {
        attr(div2, "aria-label", div2_aria_label_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div7);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance39($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { month } = $$props;
  let { year } = $$props;
  let { current } = $$props;
  const left2 = (node) => {
    new import_obsidian33.ExtraButtonComponent(node).setIcon("left-arrow");
  };
  const right2 = (node) => {
    new import_obsidian33.ExtraButtonComponent(node).setIcon("right-arrow");
  };
  const settings = (node) => {
    new import_obsidian33.ExtraButtonComponent(node).setIcon("gear");
  };
  const click_handler = () => dispatch2("previous");
  const click_handler_1 = () => dispatch2("reset");
  const click_handler_2 = (evt) => dispatch2("next");
  const click_handler_3 = (evt) => dispatch2("settings", evt);
  $$self.$$set = ($$props2) => {
    if ("month" in $$props2)
      $$invalidate(0, month = $$props2.month);
    if ("year" in $$props2)
      $$invalidate(1, year = $$props2.year);
    if ("current" in $$props2)
      $$invalidate(2, current = $$props2.current);
  };
  return [
    month,
    year,
    current,
    dispatch2,
    left2,
    right2,
    settings,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var Nav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance39, create_fragment39, safe_not_equal, { month: 0, year: 1, current: 2 }, add_css33);
  }
};
var Nav_default = Nav;

// src/view/ui/YearNav.svelte
var import_obsidian34 = __toModule(require("obsidian"));
function add_css34(target) {
  append_styles(target, "svelte-i3pajt", "#calendar-container .fantasy-nav.nav.nav.svelte-i3pajt{padding:0;margin:0;display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:center;position:sticky;top:0;z-index:2}.fantasy-year-nav.svelte-i3pajt{display:flex;align-items:center;margin-right:auto}.container.svelte-i3pajt{display:flex;align-items:center}.fantasy-title.svelte-i3pajt{margin:0}.fantasy-right-nav.svelte-i3pajt{display:flex;justify-content:center;align-items:flex-start}.calendar-clickable.svelte-i3pajt{align-items:center;cursor:pointer;display:flex;justify-content:center}");
}
function create_if_block_17(ctx) {
  let div;
  let left_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "arrow calendar-clickable svelte-i3pajt");
      attr(div, "aria-label", "Previous Year");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(left_action = ctx[4].call(null, div)),
          listen(div, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block24(ctx) {
  let div;
  let right_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "arrow right calendar-clickable svelte-i3pajt");
      attr(div, "aria-label", "Next Year");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(right_action = ctx[5].call(null, div)),
          listen(div, "click", ctx[9])
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment40(ctx) {
  let div5;
  let div0;
  let h2;
  let span0;
  let t0;
  let t1;
  let div4;
  let div3;
  let t2;
  let div1;
  let span1;
  let div1_aria_label_value;
  let t4;
  let t5;
  let div2;
  let settings_action;
  let mounted;
  let dispose;
  let if_block0 = ctx[1] && create_if_block_17(ctx);
  let if_block1 = ctx[1] && create_if_block24(ctx);
  return {
    c() {
      div5 = element("div");
      div0 = element("div");
      h2 = element("h2");
      span0 = element("span");
      t0 = text(ctx[0]);
      t1 = space();
      div4 = element("div");
      div3 = element("div");
      if (if_block0)
        if_block0.c();
      t2 = space();
      div1 = element("div");
      span1 = element("span");
      span1.textContent = "Today";
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      div2 = element("div");
      attr(span0, "class", "fantasy-year");
      attr(h2, "class", "fantasy-title svelte-i3pajt");
      attr(div0, "class", "fantasy-year-nav svelte-i3pajt");
      attr(div1, "class", "reset-button calendar-clickable svelte-i3pajt");
      attr(div1, "aria-label", div1_aria_label_value = "Today is " + ctx[2]);
      attr(div2, "class", "calendar-clickable svelte-i3pajt");
      attr(div2, "aria-label", "Calendar Settings");
      attr(div3, "class", "container svelte-i3pajt");
      attr(div4, "class", "right-nav fantasy-right-nav svelte-i3pajt");
      attr(div5, "class", "fantasy-nav nav svelte-i3pajt");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div0);
      append(div0, h2);
      append(h2, span0);
      append(span0, t0);
      append(div5, t1);
      append(div5, div4);
      append(div4, div3);
      if (if_block0)
        if_block0.m(div3, null);
      append(div3, t2);
      append(div3, div1);
      append(div1, span1);
      append(div3, t4);
      if (if_block1)
        if_block1.m(div3, null);
      append(div3, t5);
      append(div3, div2);
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[8]),
          action_destroyer(settings_action = ctx[6].call(null, div2)),
          listen(div2, "click", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t0, ctx2[0]);
      if (ctx2[1]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_17(ctx2);
          if_block0.c();
          if_block0.m(div3, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & 4 && div1_aria_label_value !== (div1_aria_label_value = "Today is " + ctx2[2])) {
        attr(div1, "aria-label", div1_aria_label_value);
      }
      if (ctx2[1]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block24(ctx2);
          if_block1.c();
          if_block1.m(div3, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div5);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance40($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { year } = $$props;
  let { arrows = false } = $$props;
  let { current } = $$props;
  const left2 = (node) => {
    new import_obsidian34.ExtraButtonComponent(node).setIcon("left-arrow");
  };
  const right2 = (node) => {
    new import_obsidian34.ExtraButtonComponent(node).setIcon("right-arrow");
  };
  const settings = (node) => {
    new import_obsidian34.ExtraButtonComponent(node).setIcon("gear");
  };
  const click_handler = () => dispatch2("previous");
  const click_handler_1 = () => dispatch2("reset");
  const click_handler_2 = (evt) => dispatch2("next");
  const click_handler_3 = (evt) => dispatch2("settings", evt);
  $$self.$$set = ($$props2) => {
    if ("year" in $$props2)
      $$invalidate(0, year = $$props2.year);
    if ("arrows" in $$props2)
      $$invalidate(1, arrows = $$props2.arrows);
    if ("current" in $$props2)
      $$invalidate(2, current = $$props2.current);
  };
  return [
    year,
    arrows,
    current,
    dispatch2,
    left2,
    right2,
    settings,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var YearNav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance40, create_fragment40, safe_not_equal, { year: 0, arrows: 1, current: 2 }, add_css34);
  }
};
var YearNav_default = YearNav;

// src/view/ui/YearView.svelte
function add_css35(target) {
  append_styles(target, "svelte-15hvixf", ".year-view.svelte-15hvixf{height:100%;position:relative;display:flex;flex-direction:column}.year.svelte-15hvixf{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;overflow:auto;flex:1}.year.svelte-15hvixf:not(.full-view){grid-template-columns:1fr}");
}
function create_fragment41(ctx) {
  let div1;
  let yearnav;
  let t;
  let div0;
  let current;
  let mounted;
  let dispose;
  yearnav = new YearNav_default({
    props: {
      year: ctx[3],
      current: ctx[0]
    }
  });
  yearnav.$on("next", ctx[9]);
  yearnav.$on("previous", ctx[10]);
  yearnav.$on("reset", ctx[11]);
  yearnav.$on("settings", ctx[12]);
  return {
    c() {
      div1 = element("div");
      create_component(yearnav.$$.fragment);
      t = space();
      div0 = element("div");
      attr(div0, "class", "year svelte-15hvixf");
      toggle_class(div0, "full-view", ctx[1]);
      attr(div1, "class", "year-view svelte-15hvixf");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(yearnav, div1, null);
      append(div1, t);
      append(div1, div0);
      ctx[13](div0);
      current = true;
      if (!mounted) {
        dispose = listen(div0, "scroll", ctx[5], { once: true });
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const yearnav_changes = {};
      if (dirty & 8)
        yearnav_changes.year = ctx2[3];
      if (dirty & 1)
        yearnav_changes.current = ctx2[0];
      yearnav.$set(yearnav_changes);
      if (dirty & 2) {
        toggle_class(div0, "full-view", ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(yearnav.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearnav.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(yearnav);
      ctx[13](null);
      mounted = false;
      dispose();
    }
  };
}
function instance41($$self, $$props, $$invalidate) {
  let yearDisplay;
  const dispatch2 = createEventDispatcher();
  let { current } = $$props;
  let { year } = $$props;
  let { columns } = $$props;
  let { fullView } = $$props;
  let yearContainer;
  let firstMonth;
  let lastMonth;
  const calendarStore = getContext("calendar");
  let calendar;
  calendarStore.subscribe((c) => {
    $$invalidate(8, calendar = c);
  });
  const trackedMonths = [];
  const dayViewStore = getContext("dayView");
  const moonStore = getContext("displayMoons");
  const appendObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== appendObserver)
      return;
    if (!entries.length)
      return;
    if (!entries[0].isIntersecting)
      return;
    appendObserver.disconnect();
    if (!calendar.canGoToNextYear(lastMonth.year) && lastMonth.number === calendar.data.months.length - 1)
      return;
    appendMonth();
    destroy(trackedMonths.shift());
    resetAppend();
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0.25
  });
  const resetAppend = () => {
    const el = yearContainer.children[yearContainer.children.length - 2];
    if (!el)
      return;
    appendObserver.observe(el);
  };
  const appendHeaderObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== appendHeaderObserver)
      return;
    if (!entries && !entries.length)
      return;
    if (entries[0].isIntersecting)
      return;
    const yearRect = yearContainer.getBoundingClientRect();
    if (entries[0].boundingClientRect.top < yearRect.top) {
      $$invalidate(6, year += 1);
      prependHeaderObserver.observe(entries[0].target);
      appendHeaderObserver.disconnect();
    }
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0
  });
  const appendMonth = (reset2 = true) => {
    if (!calendar.canGoToNextYear(lastMonth.year) && lastMonth.number === calendar.data.months.length - 1)
      return;
    lastMonth = calendar.getMonth(lastMonth.number + 1, lastMonth.year);
    if (lastMonth.number === 0 && !(yearContainer.lastElementChild instanceof HTMLHeadingElement)) {
      const header = yearContainer.createEl("h2", {
        text: calendar.getNameForYear(lastMonth.year),
        cls: "fantasy-title"
      });
      trackedMonths.push(header);
      appendHeaderObserver.disconnect();
      appendHeaderObserver.observe(header);
    }
    trackedMonths.push(createMonth(lastMonth, false));
    if (reset2) {
      firstMonth = calendar.getMonth((firstMonth?.number ?? 0) + 1, firstMonth?.year ?? 1);
    }
    resetPrepend();
  };
  const prependObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== prependObserver)
      return;
    if (!entries.length)
      return;
    if (!entries[0].isIntersecting)
      return;
    prependObserver.disconnect();
    if (!firstMonth)
      return;
    prependMonth();
    destroy(trackedMonths.pop());
    resetPrepend();
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0.25
  });
  const resetPrepend = () => {
    const el = yearContainer.children[1];
    if (!el)
      return;
    prependObserver.observe(el);
  };
  const prependHeaderObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== prependHeaderObserver)
      return;
    if (!entries && !entries.length)
      return;
    if (entries[0].isIntersecting) {
      $$invalidate(6, year -= 1);
      appendHeaderObserver.observe(entries[0].target);
      prependHeaderObserver.disconnect();
    }
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0
  });
  const prependMonth = (reset2 = true) => {
    firstMonth = calendar.getMonth(firstMonth.number - 1, firstMonth.year);
    if (!firstMonth)
      return;
    trackedMonths.unshift(createMonth(firstMonth, true));
    if (firstMonth.number === 0 && !(yearContainer.firstElementChild instanceof HTMLHeadingElement)) {
      const header = createEl("h2", {
        text: calendar.getNameForYear(firstMonth.year),
        cls: "fantasy-title"
      });
      yearContainer.prepend(header);
      trackedMonths.unshift(header);
      prependHeaderObserver.disconnect();
      prependHeaderObserver.observe(header);
    }
    if (reset2) {
      lastMonth = calendar.getMonth(lastMonth.number - 1, lastMonth.year);
    }
    resetAppend();
  };
  const createMonth = (month, anchor) => {
    const svelteInstance = new Month_default2({
      target: yearContainer,
      anchor: anchor ? yearContainer.children[0] : null,
      props: {
        month,
        fullView: false,
        yearView: true,
        columns,
        weeks: calendar.weekdays.length,
        showPad: false
      },
      context: new Map([["dayView", dayViewStore], ["displayMoons", moonStore]])
    });
    svelteInstance.$on("day-click", (e) => dispatch2("day-click", e.detail));
    svelteInstance.$on("day-doubleclick", (e) => dispatch2("day-doubleclick", e.detail));
    svelteInstance.$on("day-context-menu", (e) => dispatch2("day-context-menu", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    return svelteInstance;
  };
  const destroy = (item) => {
    if (item instanceof HTMLHeadingElement) {
      item.detach();
    } else {
      item.$destroy();
    }
  };
  const reset = async (full = false) => {
    for (let item of trackedMonths) {
      destroy(item);
    }
    trackedMonths.splice(0, trackedMonths.length);
    yearContainer.empty();
    await tick();
    $$invalidate(6, year = calendar.current.year);
    firstMonth = calendar.getMonth(calendar.displayed.month - 1, calendar.displayed.year);
    lastMonth = firstMonth;
    for (let i = 0; i < calendar.data.months.length; i++) {
      appendMonth(false);
    }
    prependMonth(false);
    await tick();
    const currentEl = yearContainer.querySelector(`#MONTH-${calendar.currentMonth.id}-${year}`);
    currentEl.scrollIntoView(true);
    if (full) {
      scroll();
    }
  };
  onDestroy(() => {
    prependObserver.disconnect();
    appendObserver.disconnect();
    prependHeaderObserver.disconnect();
    appendHeaderObserver.disconnect();
  });
  onMount(reset);
  const scroll = async () => {
    await tick();
    prependObserver.observe(yearContainer.children[1]);
    appendObserver.observe(yearContainer.children[yearContainer.children.length - 2]);
  };
  function next_handler(event) {
    bubble.call(this, $$self, event);
  }
  function previous_handler(event) {
    bubble.call(this, $$self, event);
  }
  const reset_handler = () => reset(true);
  function settings_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      yearContainer = $$value;
      $$invalidate(2, yearContainer);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("current" in $$props2)
      $$invalidate(0, current = $$props2.current);
    if ("year" in $$props2)
      $$invalidate(6, year = $$props2.year);
    if ("columns" in $$props2)
      $$invalidate(7, columns = $$props2.columns);
    if ("fullView" in $$props2)
      $$invalidate(1, fullView = $$props2.fullView);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 320) {
      $:
        $$invalidate(3, yearDisplay = calendar.getNameForYear(year));
    }
  };
  return [
    current,
    fullView,
    yearContainer,
    yearDisplay,
    reset,
    scroll,
    year,
    columns,
    calendar,
    next_handler,
    previous_handler,
    reset_handler,
    settings_handler,
    div0_binding
  ];
}
var YearView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance41, create_fragment41, safe_not_equal, {
      current: 0,
      year: 6,
      columns: 7,
      fullView: 1
    }, add_css35);
  }
};
var YearView_default = YearView;

// src/view/ui/YearViewBig.svelte
var import_obsidian35 = __toModule(require("obsidian"));

// src/view/ui/YearViewContainer.svelte
function add_css36(target) {
  append_styles(target, "svelte-ztrrn8", ".year.svelte-ztrrn8{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;overflow:auto;flex:1}.year.svelte-ztrrn8:not(.full-view){grid-template-columns:1fr}");
}
function get_each_context17(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
}
function create_each_block17(ctx) {
  let month;
  let current;
  month = new Month_default2({
    props: {
      month: ctx[8],
      fullView: false,
      yearView: true,
      columns: ctx[2],
      weeks: ctx[8].calendar.weekdays.length,
      showPad: false
    }
  });
  month.$on("day-click", ctx[3]);
  month.$on("day-doubleclick", ctx[4]);
  month.$on("day-context-menu", ctx[5]);
  month.$on("event-click", ctx[6]);
  month.$on("event-mouseover", ctx[7]);
  return {
    c() {
      create_component(month.$$.fragment);
    },
    m(target, anchor) {
      mount_component(month, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const month_changes = {};
      if (dirty & 2)
        month_changes.month = ctx2[8];
      if (dirty & 4)
        month_changes.columns = ctx2[2];
      if (dirty & 2)
        month_changes.weeks = ctx2[8].calendar.weekdays.length;
      month.$set(month_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(month.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(month.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(month, detaching);
    }
  };
}
function create_fragment42(ctx) {
  let div;
  let current;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block17(get_each_context17(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "year svelte-ztrrn8");
      toggle_class(div, "full-view", ctx[0]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & 6) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context17(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block17(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty & 1) {
        toggle_class(div, "full-view", ctx2[0]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance42($$self, $$props, $$invalidate) {
  let { fullView } = $$props;
  let { months } = $$props;
  let { columns } = $$props;
  function day_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("fullView" in $$props2)
      $$invalidate(0, fullView = $$props2.fullView);
    if ("months" in $$props2)
      $$invalidate(1, months = $$props2.months);
    if ("columns" in $$props2)
      $$invalidate(2, columns = $$props2.columns);
  };
  return [
    fullView,
    months,
    columns,
    day_click_handler,
    day_doubleclick_handler,
    day_context_menu_handler,
    event_click_handler,
    event_mouseover_handler
  ];
}
var YearViewContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance42, create_fragment42, safe_not_equal, { fullView: 0, months: 1, columns: 2 }, add_css36);
  }
};
var YearViewContainer_default = YearViewContainer;

// src/view/ui/YearViewBig.svelte
function add_css37(target) {
  append_styles(target, "svelte-1xpvbi", ".year-view.svelte-1xpvbi{height:100%;position:relative;display:flex;flex-direction:column}.year-container.svelte-1xpvbi{flex:1;overflow:auto}");
}
function create_fragment43(ctx) {
  let div1;
  let yearnav;
  let t;
  let div0;
  let current;
  yearnav = new YearNav_default({
    props: {
      year: ctx[2],
      current: ctx[0],
      arrows: true
    }
  });
  yearnav.$on("next", ctx[9]);
  yearnav.$on("previous", ctx[10]);
  yearnav.$on("reset", ctx[11]);
  yearnav.$on("settings", ctx[12]);
  return {
    c() {
      div1 = element("div");
      create_component(yearnav.$$.fragment);
      t = space();
      div0 = element("div");
      attr(div0, "class", "year-container svelte-1xpvbi");
      attr(div1, "class", "year-view svelte-1xpvbi");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(yearnav, div1, null);
      append(div1, t);
      append(div1, div0);
      ctx[13](div0);
      current = true;
    },
    p(ctx2, [dirty]) {
      const yearnav_changes = {};
      if (dirty & 4)
        yearnav_changes.year = ctx2[2];
      if (dirty & 1)
        yearnav_changes.current = ctx2[0];
      yearnav.$set(yearnav_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearnav.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearnav.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(yearnav);
      ctx[13](null);
    }
  };
}
function instance43($$self, $$props, $$invalidate) {
  let yearDisplay;
  const dispatch2 = createEventDispatcher();
  const calendarStore = getContext("calendar");
  const dayViewStore = getContext("dayView");
  const moonStore = getContext("displayMoons");
  let calendar;
  calendarStore.subscribe((c) => {
    $$invalidate(8, calendar = c);
  });
  let { year } = $$props;
  let { current } = $$props;
  let { columns } = $$props;
  let yearContainer;
  const createYear = (year2, anchor = false) => {
    const months = calendar.getMonthsForYear(year2);
    const svelteInstance = new YearViewContainer_default({
      target: yearContainer,
      anchor: anchor ? yearContainer.children[0] : null,
      props: { months, fullView: true, columns },
      context: new Map([["dayView", dayViewStore], ["displayMoons", moonStore]])
    });
    svelteInstance.$on("day-click", (e) => dispatch2("day-click", e.detail));
    svelteInstance.$on("day-doubleclick", (e) => dispatch2("day-doubleclick", e.detail));
    svelteInstance.$on("day-context-menu", (e) => dispatch2("day-context-menu", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    return svelteInstance;
  };
  const destroy = (item) => {
    if (item instanceof HTMLHeadingElement) {
      item.detach();
    } else {
      item.$destroy();
    }
  };
  const years = [];
  const next2 = () => {
    if (!calendar.canGoToNextYear(year)) {
      new import_obsidian35.Notice("This is the last year. Additional years can be created in settings.");
      return;
    }
    $$invalidate(6, year = year + 1);
    reset(year);
  };
  const previous = () => {
    if (year === 1) {
      new import_obsidian35.Notice("This is the earliest year.");
      return;
    }
    $$invalidate(6, year = year - 1);
    reset(year);
  };
  const currentYear = () => {
    $$invalidate(6, year = calendar.current.year);
    reset(year);
  };
  const reset = async (year2) => {
    years.forEach((el) => destroy(el));
    yearContainer.empty();
    await tick();
    year2 = year2;
    years.push(createYear(year2));
  };
  onMount(() => years.push(createYear(year)));
  const next_handler = () => next2();
  const previous_handler = () => previous();
  const reset_handler = () => currentYear();
  function settings_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      yearContainer = $$value;
      $$invalidate(1, yearContainer);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("year" in $$props2)
      $$invalidate(6, year = $$props2.year);
    if ("current" in $$props2)
      $$invalidate(0, current = $$props2.current);
    if ("columns" in $$props2)
      $$invalidate(7, columns = $$props2.columns);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 320) {
      $:
        $$invalidate(2, yearDisplay = calendar.getNameForYear(year));
    }
  };
  return [
    current,
    yearContainer,
    yearDisplay,
    next2,
    previous,
    currentYear,
    year,
    columns,
    calendar,
    next_handler,
    previous_handler,
    reset_handler,
    settings_handler,
    div0_binding
  ];
}
var YearViewBig = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance43, create_fragment43, safe_not_equal, { year: 6, current: 0, columns: 7 }, add_css37);
  }
};
var YearViewBig_default = YearViewBig;

// src/view/ui/Calendar.svelte
function add_css38(target) {
  append_styles(target, "svelte-1kty1w6", "#calendar-container.year-view.svelte-1kty1w6.svelte-1kty1w6{height:100%}#calendar-container.fantasy-calendar.full-view.svelte-1kty1w6.svelte-1kty1w6{width:100%;padding:0 0.5rem 0.5rem;height:100%;display:flex;flex-flow:column}.fantasy-calendar.full-view.svelte-1kty1w6 .month-container.svelte-1kty1w6{height:100%}.month-container.svelte-1kty1w6.svelte-1kty1w6{display:flex}.month-view.svelte-1kty1w6.svelte-1kty1w6{flex-grow:2}.weeks.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-rows:auto 1fr}.week-num-container.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-rows:repeat(var(--calendar-rows), auto);padding:0.25rem 0}.week-num.svelte-1kty1w6.svelte-1kty1w6{background-color:transparent;border:2px solid transparent;border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:2px;position:relative;text-align:center;vertical-align:baseline;overflow:visible}.weekdays.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-columns:repeat(var(--calendar-columns), 1fr);grid-template-rows:auto;padding:0 0.25rem;gap:2px}.weekday.svelte-1kty1w6.svelte-1kty1w6{background-color:var(--color-background-heading);color:var(--color-text-heading);font-size:0.6em;letter-spacing:1px;padding:4px;text-transform:uppercase;text-align:center;border:2px solid transparent}hr.svelte-1kty1w6.svelte-1kty1w6{margin:1rem 0}.moon-container{display:flex;flex-flow:row wrap;align-items:center;justify-content:center}");
}
function get_each_context18(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[49] = list[i];
  return child_ctx;
}
function get_each_context_14(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[52] = list[i];
  return child_ctx;
}
function create_else_block17(ctx) {
  let nav;
  let t0;
  let div3;
  let div0;
  let t1;
  let div2;
  let div1;
  let t2;
  let monthview;
  let current;
  nav = new Nav_default({
    props: {
      month: ctx[6].name,
      year: ctx[9],
      current: ctx[3].displayedDate
    }
  });
  nav.$on("next", ctx[31]);
  nav.$on("previous", ctx[32]);
  nav.$on("reset", ctx[33]);
  nav.$on("settings", ctx[34]);
  let if_block = ctx[5] && create_if_block_3(ctx);
  let each_value = ctx[11];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block18(get_each_context18(ctx, each_value, i));
  }
  monthview = new Month_default2({
    props: {
      columns: ctx[11].length,
      weeks: ctx[7],
      month: ctx[6],
      fullView: ctx[1]
    }
  });
  monthview.$on("day-click", ctx[35]);
  monthview.$on("day-doubleclick", ctx[36]);
  monthview.$on("day-context-menu", ctx[37]);
  monthview.$on("event-click", ctx[38]);
  monthview.$on("event-mouseover", ctx[39]);
  monthview.$on("event-context", ctx[40]);
  return {
    c() {
      create_component(nav.$$.fragment);
      t0 = space();
      div3 = element("div");
      div0 = element("div");
      if (if_block)
        if_block.c();
      t1 = space();
      div2 = element("div");
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      create_component(monthview.$$.fragment);
      attr(div0, "class", "weeks svelte-1kty1w6");
      attr(div1, "class", "weekdays svelte-1kty1w6");
      attr(div2, "class", "month-view svelte-1kty1w6");
      attr(div3, "class", "month-container svelte-1kty1w6");
    },
    m(target, anchor) {
      mount_component(nav, target, anchor);
      insert(target, t0, anchor);
      insert(target, div3, anchor);
      append(div3, div0);
      if (if_block)
        if_block.m(div0, null);
      append(div3, t1);
      append(div3, div2);
      append(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div1, null);
      }
      append(div2, t2);
      mount_component(monthview, div2, null);
      current = true;
    },
    p(ctx2, dirty) {
      const nav_changes = {};
      if (dirty[0] & 64)
        nav_changes.month = ctx2[6].name;
      if (dirty[0] & 512)
        nav_changes.year = ctx2[9];
      if (dirty[0] & 8)
        nav_changes.current = ctx2[3].displayedDate;
      nav.$set(nav_changes);
      if (ctx2[5]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty[0] & 2048) {
        each_value = ctx2[11];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context18(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block18(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      const monthview_changes = {};
      if (dirty[0] & 2048)
        monthview_changes.columns = ctx2[11].length;
      if (dirty[0] & 128)
        monthview_changes.weeks = ctx2[7];
      if (dirty[0] & 64)
        monthview_changes.month = ctx2[6];
      if (dirty[0] & 2)
        monthview_changes.fullView = ctx2[1];
      monthview.$set(monthview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(nav.$$.fragment, local);
      transition_in(monthview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(nav.$$.fragment, local);
      transition_out(monthview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(nav, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div3);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
      destroy_component(monthview);
    }
  };
}
function create_if_block_22(ctx) {
  let yearviewbig;
  let current;
  yearviewbig = new YearViewBig_default({
    props: {
      year: ctx[10],
      columns: ctx[11].length,
      current: ctx[3].displayedDate
    }
  });
  yearviewbig.$on("next", ctx[22]);
  yearviewbig.$on("previous", ctx[23]);
  yearviewbig.$on("reset", ctx[24]);
  yearviewbig.$on("settings", ctx[25]);
  yearviewbig.$on("day-click", ctx[26]);
  yearviewbig.$on("day-doubleclick", ctx[27]);
  yearviewbig.$on("day-context-menu", ctx[28]);
  yearviewbig.$on("event-click", ctx[29]);
  yearviewbig.$on("event-mouseover", ctx[30]);
  return {
    c() {
      create_component(yearviewbig.$$.fragment);
    },
    m(target, anchor) {
      mount_component(yearviewbig, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const yearviewbig_changes = {};
      if (dirty[0] & 1024)
        yearviewbig_changes.year = ctx2[10];
      if (dirty[0] & 2048)
        yearviewbig_changes.columns = ctx2[11].length;
      if (dirty[0] & 8)
        yearviewbig_changes.current = ctx2[3].displayedDate;
      yearviewbig.$set(yearviewbig_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearviewbig.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearviewbig.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(yearviewbig, detaching);
    }
  };
}
function create_if_block_18(ctx) {
  let yearview;
  let current;
  yearview = new YearView_default({
    props: {
      year: ctx[10],
      fullView: ctx[1],
      columns: ctx[11].length,
      current: ctx[3].displayedDate
    }
  });
  yearview.$on("next", ctx[13]);
  yearview.$on("previous", ctx[14]);
  yearview.$on("reset", ctx[15]);
  yearview.$on("settings", ctx[16]);
  yearview.$on("day-click", ctx[17]);
  yearview.$on("day-doubleclick", ctx[18]);
  yearview.$on("day-context-menu", ctx[19]);
  yearview.$on("event-click", ctx[20]);
  yearview.$on("event-mouseover", ctx[21]);
  return {
    c() {
      create_component(yearview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(yearview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const yearview_changes = {};
      if (dirty[0] & 1024)
        yearview_changes.year = ctx2[10];
      if (dirty[0] & 2)
        yearview_changes.fullView = ctx2[1];
      if (dirty[0] & 2048)
        yearview_changes.columns = ctx2[11].length;
      if (dirty[0] & 8)
        yearview_changes.current = ctx2[3].displayedDate;
      yearview.$set(yearview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(yearview, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let span;
  let t1;
  let div;
  let each_value_1 = [...Array(ctx[7]).keys()];
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_14(get_each_context_14(ctx, each_value_1, i));
  }
  return {
    c() {
      span = element("span");
      span.textContent = "W";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(span, "class", "week-num weekday fantasy-weekday svelte-1kty1w6");
      attr(div, "class", "week-num-container svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & 384) {
        each_value_1 = [...Array(ctx2[7]).keys()];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_14(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_14(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_14(ctx) {
  let span;
  let t_value = ctx[8] + 1 + ctx[52] + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "week-num svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 384 && t_value !== (t_value = ctx2[8] + 1 + ctx2[52] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block18(ctx) {
  let span;
  let t_value = ctx[49].name.slice(0, 3) + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "weekday fantasy-weekday svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 2048 && t_value !== (t_value = ctx2[49].name.slice(0, 3) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block25(ctx) {
  let hr;
  let t;
  let dayview;
  let current;
  dayview = new DayView_default({
    props: {
      displayDayNumber: ctx[4]
    }
  });
  dayview.$on("close", ctx[41]);
  dayview.$on("event-click", ctx[42]);
  dayview.$on("event-mouseover", ctx[43]);
  dayview.$on("event-context", ctx[44]);
  dayview.$on("event", ctx[45]);
  return {
    c() {
      hr = element("hr");
      t = space();
      create_component(dayview.$$.fragment);
      attr(hr, "class", "svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, hr, anchor);
      insert(target, t, anchor);
      mount_component(dayview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dayview_changes = {};
      if (dirty[0] & 16)
        dayview_changes.displayDayNumber = ctx2[4];
      dayview.$set(dayview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dayview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dayview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(hr);
      if (detaching)
        detach(t);
      destroy_component(dayview, detaching);
    }
  };
}
function create_fragment44(ctx) {
  let div;
  let current_block_type_index;
  let if_block0;
  let t;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_18, create_if_block_22, create_else_block17];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[2] && !ctx2[1])
      return 0;
    if (ctx2[2])
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = ctx[0] && !ctx[1] && create_if_block25(ctx);
  return {
    c() {
      div = element("div");
      if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(div, "id", "calendar-container");
      attr(div, "class", "fantasy-calendar svelte-1kty1w6");
      set_style(div, "--calendar-columns", ctx[3].weekdays.length);
      set_style(div, "--column-widths", 1 / ctx[3].weekdays.length * 100 + "%");
      set_style(div, "--calendar-rows", ctx[3].weeksPerCurrentMonth);
      toggle_class(div, "full-view", ctx[1]);
      toggle_class(div, "year-view", ctx[2]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div, null);
      }
      if (!current || dirty[0] & 8) {
        set_style(div, "--calendar-columns", ctx2[3].weekdays.length);
      }
      if (!current || dirty[0] & 8) {
        set_style(div, "--column-widths", 1 / ctx2[3].weekdays.length * 100 + "%");
      }
      if (!current || dirty[0] & 8) {
        set_style(div, "--calendar-rows", ctx2[3].weeksPerCurrentMonth);
      }
      if (dirty[0] & 2) {
        toggle_class(div, "full-view", ctx2[1]);
      }
      if (dirty[0] & 4) {
        toggle_class(div, "year-view", ctx2[2]);
      }
      if (ctx2[0] && !ctx2[1]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & 3) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block25(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      if (detaching)
        detach(t);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
    }
  };
}
function instance44($$self, $$props, $$invalidate) {
  let weekdays;
  let year;
  let yearDisplay;
  let month;
  let firstWeek;
  let weeks;
  let { fullView = false } = $$props;
  let { dayView = false } = $$props;
  let { yearView = false } = $$props;
  let { calendar } = $$props;
  let { moons } = $$props;
  let { displayDayNumber } = $$props;
  let { displayWeeks } = $$props;
  const dayViewStore = writable(dayView);
  const moonStore = writable(moons);
  const calendarStore = writable(calendar);
  setContext("dayView", dayViewStore);
  setContext("displayMoons", moonStore);
  setContext("calendar", calendarStore);
  calendar.on("month-update", () => {
    $$invalidate(10, year = calendar.displayed.year);
    $$invalidate(9, yearDisplay = calendar.getNameForYear(calendar.displayed.year));
    $$invalidate(6, month = calendar.currentMonth);
    $$invalidate(7, weeks = calendar.weeksOfMonth(month));
    $$invalidate(8, firstWeek = calendar.weekNumbersOfMonth(month));
  });
  const next_handler = () => calendar.goToNextYear();
  const previous_handler = () => calendar.goToPreviousYear();
  function reset_handler(event) {
    bubble.call(this, $$self, event);
  }
  function settings_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  const next_handler_1 = () => calendar.goToNextYear();
  const previous_handler_1 = () => calendar.goToPreviousYear();
  function reset_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function settings_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function day_click_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  const next_handler_2 = () => calendar.goToNext();
  const previous_handler_2 = () => calendar.goToPrevious();
  function reset_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function settings_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function day_click_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler(event) {
    bubble.call(this, $$self, event);
  }
  const close_handler = () => $$invalidate(0, dayView = false);
  function event_click_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function event_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("fullView" in $$props2)
      $$invalidate(1, fullView = $$props2.fullView);
    if ("dayView" in $$props2)
      $$invalidate(0, dayView = $$props2.dayView);
    if ("yearView" in $$props2)
      $$invalidate(2, yearView = $$props2.yearView);
    if ("calendar" in $$props2)
      $$invalidate(3, calendar = $$props2.calendar);
    if ("moons" in $$props2)
      $$invalidate(12, moons = $$props2.moons);
    if ("displayDayNumber" in $$props2)
      $$invalidate(4, displayDayNumber = $$props2.displayDayNumber);
    if ("displayWeeks" in $$props2)
      $$invalidate(5, displayWeeks = $$props2.displayWeeks);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 4) {
      $: {
        if (yearView)
          $$invalidate(0, dayView = false);
      }
    }
    if ($$self.$$.dirty[0] & 1) {
      $:
        dayViewStore.set(dayView);
    }
    if ($$self.$$.dirty[0] & 4096) {
      $:
        moonStore.set(moons);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        calendarStore.set(calendar);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(11, weekdays = calendar.weekdays);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(10, year = calendar.displayed.year);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(9, yearDisplay = calendar.getNameForYear(calendar.displayed.year));
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(6, month = calendar.currentMonth);
    }
    if ($$self.$$.dirty[0] & 72) {
      $:
        $$invalidate(8, firstWeek = calendar.weekNumbersOfMonth(month));
    }
    if ($$self.$$.dirty[0] & 72) {
      $:
        $$invalidate(7, weeks = calendar.weeksOfMonth(month));
    }
  };
  return [
    dayView,
    fullView,
    yearView,
    calendar,
    displayDayNumber,
    displayWeeks,
    month,
    weeks,
    firstWeek,
    yearDisplay,
    year,
    weekdays,
    moons,
    next_handler,
    previous_handler,
    reset_handler,
    settings_handler,
    day_click_handler,
    day_doubleclick_handler,
    day_context_menu_handler,
    event_click_handler,
    event_mouseover_handler,
    next_handler_1,
    previous_handler_1,
    reset_handler_1,
    settings_handler_1,
    day_click_handler_1,
    day_doubleclick_handler_1,
    day_context_menu_handler_1,
    event_click_handler_1,
    event_mouseover_handler_1,
    next_handler_2,
    previous_handler_2,
    reset_handler_2,
    settings_handler_2,
    day_click_handler_2,
    day_doubleclick_handler_2,
    day_context_menu_handler_2,
    event_click_handler_2,
    event_mouseover_handler_2,
    event_context_handler,
    close_handler,
    event_click_handler_3,
    event_mouseover_handler_3,
    event_context_handler_1,
    event_handler
  ];
}
var Calendar = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance44, create_fragment44, safe_not_equal, {
      fullView: 1,
      dayView: 0,
      yearView: 2,
      calendar: 3,
      moons: 12,
      displayDayNumber: 4,
      displayWeeks: 5
    }, add_css38, [-1, -1]);
  }
};
var Calendar_default = Calendar;

// src/view/view.ts
var VIEW_TYPE = "FANTASY_CALENDAR";
var FULL_VIEW = "FANTASY_CALENDAR_FULL_VIEW";
(0, import_obsidian36.addIcon)(VIEW_TYPE, `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="calendar" class="svg-inline--fa fa-calendar fa-w-14" role="img" viewBox="0 0 448 512"><path xmlns="http://www.w3.org/2000/svg" fill="currentColor" d="M400 64h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V160h352v298c0 3.3-2.7 6-6 6z"/><path fill="currentColor" d="M18.32 255.78L192 223.96l-91.28 68.69c-10.08 10.08-2.94 27.31 11.31 27.31h222.7c-9.44-26.4-14.73-54.47-14.73-83.38v-42.27l-119.73-87.6c-23.82-15.88-55.29-14.01-77.06 4.59L5.81 227.64c-12.38 10.33-3.45 30.42 12.51 28.14zm556.87 34.1l-100.66-50.31A47.992 47.992 0 0 1 448 196.65v-36.69h64l28.09 22.63c6 6 14.14 9.37 22.63 9.37h30.97a32 32 0 0 0 28.62-17.69l14.31-28.62a32.005 32.005 0 0 0-3.02-33.51l-74.53-99.38C553.02 4.7 543.54 0 533.47 0H296.02c-7.13 0-10.7 8.57-5.66 13.61L352 63.96 292.42 88.8c-5.9 2.95-5.9 11.36 0 14.31L352 127.96v108.62c0 72.08 36.03 139.39 96 179.38-195.59 6.81-344.56 41.01-434.1 60.91C5.78 478.67 0 485.88 0 494.2 0 504 7.95 512 17.76 512h499.08c63.29.01 119.61-47.56 122.99-110.76 2.52-47.28-22.73-90.4-64.64-111.36zM489.18 66.25l45.65 11.41c-2.75 10.91-12.47 18.89-24.13 18.26-12.96-.71-25.85-12.53-21.52-29.67z" style="&#10;    transform: scale(0.4125) translate(50%, 95%);&#10;"/></svg>`);
(0, import_obsidian36.addIcon)("fantasy-calendar-reveal", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="calendar-day" class="svg-inline--fa fa-calendar-day fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm64-192c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-96zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"/></svg>`);
var FantasyCalendarView = class extends import_obsidian36.ItemView {
  constructor(plugin, leaf, options = {}) {
    super(leaf);
    this.plugin = plugin;
    this.leaf = leaf;
    this.options = options;
    this.updateMe = true;
    this.yearView = false;
    this.moons = true;
    this.containerEl.addClass("fantasy-calendar-view");
    this.contentEl.addClass("fantasy-calendar-view-content");
    this.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-updated", () => {
      this.updateCalendars();
    }));
    this.registerEvent(this.plugin.app.workspace.on("layout-change", () => {
      if (!this._app)
        return;
      this._app.$set({
        fullView: this.full,
        ...this.full ? { dayView: false } : {}
      });
    }));
  }
  get root() {
    return this.leaf.getRoot();
  }
  get full() {
    return !("collapse" in this.root);
  }
  updateCalendars() {
    if (!this.updateMe) {
      this.updateMe = true;
      return;
    }
    if (!this.plugin.data.calendars.length) {
      this._app?.$destroy();
      this.contentEl.empty();
      this.noCalendarEl = this.contentEl.createDiv("fantasy-no-calendar");
      this.noCalendarEl.createSpan({
        text: "No calendars created! Create a calendar to see it here."
      });
      return;
    }
    const calendar = this.plugin.data.calendars.find((c) => c.id == this.calendar?.id) ?? this.plugin.defaultCalendar ?? this.plugin.data.calendars[0];
    if (this.helper && this.helper.calendar.id == calendar.id) {
      this.update(calendar);
    } else {
      this.setCurrentCalendar(calendar);
    }
  }
  update(calendar) {
    this.calendar = calendar;
    this.helper.update(this.calendar);
    this.registerCalendarInterval();
    if (!this._app) {
      this.build();
    } else {
      this._app.$set({ calendar: this.helper });
    }
  }
  registerCalendarInterval() {
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    if (this.calendar.static.incrementDay) {
      let current = new Date();
      if (!this.calendar.date) {
        this.calendar.date = current.valueOf();
      }
      const dif = daysBetween(new Date(this.calendar.date), current);
      if (dif >= 1) {
        for (let i = 0; i < dif; i++) {
          this.helper.goToNextCurrentDay();
        }
        this.calendar.date = current.valueOf();
        this.plugin.saveSettings();
      }
      this.interval = window.setInterval(() => {
        if (daysBetween(new Date(), current) >= 1) {
          this.helper.goToNextCurrentDay();
          this.helper.current;
          current = new Date();
          this.calendar.date = current.valueOf();
          this.plugin.saveSettings();
        }
      }, 60 * 1e3);
      this.registerInterval(this.interval);
    }
  }
  setCurrentCalendar(calendar) {
    this.noCalendarEl?.detach();
    this.calendar = calendar;
    this.moons = this.calendar.static.displayMoons;
    this.dayNumber = this.calendar.static.displayDayNumber;
    this.helper = new CalendarHelper(this.calendar, this.plugin);
    this.registerCalendarInterval();
    this.build();
  }
  createEventForDay(date) {
    const modal = new CreateEventModal(this.app, this.calendar, null, date);
    modal.onClose = () => {
      if (!modal.saved)
        return;
      this.calendar.events.push(modal.event);
      this.plugin.saveSettings();
      this._app.$set({
        calendar: this.helper
      });
      this.triggerHelperEvent("day-update");
    };
    modal.open();
  }
  async onOpen() {
    this.updateCalendars();
  }
  build() {
    this.contentEl.empty();
    this._app = new Calendar_default({
      target: this.contentEl,
      props: {
        calendar: this.helper,
        fullView: this.full,
        yearView: this.yearView,
        moons: this.moons,
        displayWeeks: this.helper.displayWeeks,
        displayDayNumber: this.dayNumber
      }
    });
    this._app.$on("day-click", (event) => {
      const day = event.detail;
      if (day.events.length)
        return;
      this.createEventForDay(day.date);
    });
    this._app.$on("day-doubleclick", (event) => {
      const day = event.detail;
      if (!day.events.length)
        return;
      this.helper.viewing.day = day.number;
      this.helper.viewing.month = this.helper.displayed.month;
      this.helper.viewing.year = this.helper.displayed.year;
      this.yearView = false;
      this._app.$set({ yearView: false });
      this._app.$set({ dayView: true });
      this.triggerHelperEvent("day-update", false);
    });
    this._app.$on("day-context-menu", (event) => {
      const { day, evt } = event.detail;
      const menu = new import_obsidian36.Menu(this.app);
      menu.setNoIcon();
      if (!this.full) {
        menu.addItem((item) => {
          item.setTitle("Open Day").onClick(() => {
            this.openDay({
              day: day.number,
              month: this.helper.displayed.month,
              year: this.helper.displayed.year
            });
          });
        });
      }
      menu.addItem((item) => {
        item.setTitle("Set as Today").onClick(() => {
          this.calendar.current = day.date;
          this.helper.current.day = day.number;
          this.triggerHelperEvent("day-update");
          this.plugin.saveSettings();
        });
      });
      menu.addItem((item) => item.setTitle("New Event").onClick(() => {
        this.createEventForDay(day.date);
      }));
      menu.showAtMouseEvent(evt);
    });
    this._app.$on("settings", (event) => {
      const evt = event.detail;
      const menu = new import_obsidian36.Menu(this.app);
      menu.setNoIcon();
      menu.addItem((item) => {
        item.setTitle(`${this.calendar.displayWeeks ? "Hide" : "Show"} Weeks`).onClick(() => {
          this.calendar.displayWeeks = !this.calendar.displayWeeks;
          this.helper.update(this.calendar);
          this._app.$set({
            displayWeeks: this.calendar.displayWeeks
          });
          this.plugin.saveSettings();
        });
      });
      menu.addItem((item) => {
        item.setTitle(`Open ${this.yearView ? "Month" : "Year"}`).onClick(() => {
          this.yearView = !this.yearView;
          this._app.$set({ yearView: this.yearView });
        });
      });
      menu.addItem((item) => {
        item.setTitle(this.moons ? "Hide Moons" : "Display Moons").onClick(() => {
          this.toggleMoons();
        });
      });
      menu.addItem((item) => {
        item.setTitle(this.dayNumber ? "Hide Day Number" : "Display Day Number").onClick(() => {
          this.dayNumber = !this.dayNumber;
          this.calendar.static.displayDayNumber = this.dayNumber;
          this._app.$set({ displayDayNumber: this.dayNumber });
          this.plugin.saveSettings();
        });
      });
      menu.addItem((item) => {
        item.setTitle("View Day");
        item.onClick(() => {
          this.openDate();
        });
      });
      menu.addItem((item) => {
        item.setTitle("Switch Calendars");
        item.setDisabled(this.plugin.data.calendars.length <= 1);
        item.onClick(() => {
          const modal = new SwitchModal(this.plugin, this.calendar);
          modal.onClose = () => {
            if (!modal.confirmed)
              return;
            this.setCurrentCalendar(modal.calendar);
          };
          modal.open();
        });
      });
      menu.showAtMouseEvent(evt);
    });
    this._app.$on("event-click", (evt) => {
      const { event, modifier } = evt.detail;
      if (event.note) {
        let leaves = [];
        this.app.workspace.iterateAllLeaves((leaf) => {
          if (!(leaf.view instanceof import_obsidian36.MarkdownView))
            return;
          if (leaf.view.file.basename === event.note) {
            leaves.push(leaf);
          }
        });
        if (leaves.length) {
          this.app.workspace.setActiveLeaf(leaves[0]);
        } else {
          this.app.workspace.openLinkText(event.note, "", this.full || modifier);
        }
      } else {
        const modal = new ViewEventModal(event, this.plugin);
        modal.open();
      }
    });
    this._app.$on("event-mouseover", (evt) => {
      if (!this.plugin.data.eventPreview)
        return;
      const { target, event } = evt.detail;
      if (event.note) {
        this.app.workspace.trigger("link-hover", this, target, event.note, "");
      }
    });
    this._app.$on("event-context", (custom) => {
      const { evt, event } = custom.detail;
      const menu = new import_obsidian36.Menu(this.app);
      menu.setNoIcon();
      if (!event.note) {
        menu.addItem((item) => {
          item.setTitle("Create Note").onClick(async () => {
            const path = this.app.workspace.getActiveFile()?.path;
            const newFilePath = path ? this.app.fileManager.getNewFileParent(path)?.parent ?? "/" : "/";
            const date = `${event.date.year}-${event.date.month + 1}-${event.date.day}`;
            let end2;
            if (event.end) {
              end2 = `${event.end.year}-${event.end.month + 1}-${event.end.day}`;
            }
            const content = {
              "fc-calendar": this.calendar.name,
              "fc-date": date,
              ...event.end ? { "fc-end": end2 } : {},
              ...event.category ? {
                "fc-category": this.calendar.categories.find((cat) => cat.id == event.category)?.name
              } : {}
            };
            event.note = (0, import_obsidian36.normalizePath)(`${newFilePath}/${event.name}.md`);
            let file = this.app.vault.getAbstractFileByPath(event.note);
            if (!file) {
              file = await this.app.vault.create(event.note, `---
${(0, import_obsidian36.stringifyYaml)(content)}
---`);
            }
            this.plugin.saveCalendar();
            if (file instanceof import_obsidian36.TFile) {
              const fileViews = this.app.workspace.getLeavesOfType("markdown");
              const existing = fileViews.find((l) => {
                l.view instanceof import_obsidian36.FileView && l.view.file.path == event.note;
              });
              if (existing) {
                this.app.workspace.setActiveLeaf(existing);
              } else {
                await this.app.workspace.getUnpinnedLeaf().openFile(file, {
                  active: true
                });
              }
            }
          });
        });
      }
      menu.addItem((item) => {
        item.setTitle("Edit Event").onClick(() => {
          const modal = new CreateEventModal(this.app, this.calendar, event);
          modal.onClose = () => {
            if (!modal.saved)
              return;
            const existing = this.calendar.events.find((e) => e.id == event.id);
            this.calendar.events.splice(this.calendar.events.indexOf(existing), 1, modal.event);
            this.plugin.saveSettings();
            this._app.$set({
              calendar: this.helper
            });
            this.triggerHelperEvent("day-update");
          };
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("Delete Event").onClick(async () => {
          if (await confirmWithModal(this.app, "Are you sure you wish to delete this event?", {
            cta: "Delete",
            secondary: "Cancel"
          })) {
            const existing = this.calendar.events.find((e) => e.id == event.id);
            this.calendar.events.splice(this.calendar.events.indexOf(existing), 1);
            this.plugin.saveSettings();
            this._app.$set({
              calendar: this.helper
            });
            this.triggerHelperEvent("day-update");
          }
        });
      });
      menu.showAtMouseEvent(evt);
    });
    this._app.$on("event", (e) => {
      const date = e.detail;
      this.createEventForDay(date);
    });
    this._app.$on("reset", () => {
      this.helper.reset();
      this.yearView = false;
      this._app.$set({ yearView: false });
      this._app.$set({ dayView: true });
      this.triggerHelperEvent("day-update", false);
    });
  }
  openDay(date) {
    this.helper.viewing.day = date.day;
    this.helper.viewing.month = date.month;
    this.helper.viewing.year = date.year;
    this.yearView = false;
    this._app.$set({ yearView: false });
    this._app.$set({ dayView: true });
    this.triggerHelperEvent("day-update", false);
  }
  openDate() {
    if (!this.helper)
      return;
    if (!this.calendar)
      return;
    const modal = new ChangeDateModal(this.plugin, this.calendar);
    modal.onClose = () => {
      if (!modal.confirmed)
        return;
      if (modal.setCurrent) {
        this.calendar.current = { ...modal.date };
        this.setCurrentCalendar(this.calendar);
      } else {
        this.helper.displayed = { ...modal.date };
        this.helper.update();
        this._app.$set({ calendar: this.helper });
      }
      this.plugin.saveSettings();
    };
    modal.open();
  }
  toggleMoons() {
    this.moons = !this.moons;
    this._app.$set({ moons: this.moons });
  }
  async onClose() {
  }
  onResize() {
    this.triggerHelperEvent("view-resized", false);
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "Fantasy Calendar";
  }
  getIcon() {
    return VIEW_TYPE;
  }
  triggerHelperEvent(event, full = true) {
    if (!this.helper)
      return;
    this.helper.trigger(event);
    if (full) {
      this.updateMe = false;
      this.plugin.app.workspace.trigger("fantasy-calendars-updated");
    }
  }
  async onunload() {
  }
};
var SwitchModal = class extends import_obsidian36.Modal {
  constructor(plugin, calendar) {
    super(plugin.app);
    this.plugin = plugin;
    this.calendar = calendar;
    this.confirmed = false;
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h4", { text: "Switch Calendars" });
    const dropdownEl = this.contentEl.createDiv("fantasy-calendar-dropdown");
    dropdownEl.createEl("label", {
      text: "Choose a Calendar"
    });
    const dropdown = new import_obsidian36.DropdownComponent(dropdownEl).onChange((v) => {
      this.calendar = this.plugin.data.calendars.find((c) => c.id == v);
    });
    dropdown.addOptions(Object.fromEntries(this.plugin.data.calendars.map((c) => [c.id, c.name]))).setValue(this.calendar ? this.calendar.id : null);
    const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
    new import_obsidian36.ButtonComponent(buttonEl).setButtonText("Switch").setCta().onClick(() => {
      this.confirmed = true;
      this.close();
    });
    new import_obsidian36.ButtonComponent(buttonEl).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onOpen() {
    this.display();
  }
};
var ChangeDateModal = class extends import_obsidian36.Modal {
  constructor(plugin, calendar) {
    super(plugin.app);
    this.plugin = plugin;
    this.calendar = calendar;
    this.confirmed = false;
    this.setCurrent = false;
    this.date = { ...this.calendar.current };
    this.tempCurrentDays = this.date.day;
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h4", { text: "View Day" });
    this.dateFieldEl = this.contentEl.createDiv("fantasy-calendar-date-fields");
    this.buildDateFields();
    new import_obsidian36.Setting(this.contentEl).setName("Set as Current Date").setDesc("Also set this date to today's date.").addToggle((t) => t.setValue(this.setCurrent).onChange((v) => {
      this.setCurrent = v;
    }));
    const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
    new import_obsidian36.ButtonComponent(buttonEl).setButtonText("Switch").setCta().onClick(() => {
      this.confirmed = true;
      this.date.day = this.tempCurrentDays;
      this.close();
    });
    new import_obsidian36.ButtonComponent(buttonEl).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  buildDateFields() {
    this.dateFieldEl.empty();
    if (this.tempCurrentDays != void 0 && this.date.month != void 0 && this.tempCurrentDays > this.calendar.static.months[this.date.month]?.length) {
      this.tempCurrentDays = this.calendar.static.months[this.date.month]?.length;
    }
    const dayEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
    dayEl.createEl("label", { text: "Day" });
    const day = new import_obsidian36.TextComponent(dayEl).setPlaceholder("Day").setValue(`${this.tempCurrentDays}`).setDisabled(this.date.month == void 0).onChange((v) => {
      if (Number(v) < 1 || Number(v) > this.calendar.static.months[this.date.month]?.length) {
        new import_obsidian36.Notice(`The current day must be between 1 and ${this.calendar.static.months[this.date.month].length}`);
        this.tempCurrentDays = this.date.day;
        this.buildDateFields();
        return;
      }
      this.tempCurrentDays = Number(v);
    });
    day.inputEl.setAttr("type", "number");
    const monthEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
    monthEl.createEl("label", { text: "Month" });
    new import_obsidian36.DropdownComponent(monthEl).addOptions(Object.fromEntries([
      ["select", "Select Month"],
      ...this.calendar.static.months.map((month) => [
        month.name,
        month.name
      ])
    ])).setValue(this.date.month != void 0 ? this.calendar.static.months[this.date.month].name : "select").onChange((v) => {
      if (v === "select")
        this.date.month = null;
      const index = this.calendar.static.months.find((m) => m.name == v);
      this.date.month = this.calendar.static.months.indexOf(index);
      this.buildDateFields();
    });
    const yearEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
    yearEl.createEl("label", { text: "Year" });
    if (this.calendar.static.useCustomYears) {
      const yearDrop = new import_obsidian36.DropdownComponent(yearEl);
      (this.calendar.static.years ?? []).forEach((year) => {
        yearDrop.addOption(year.id, year.name);
      });
      if (this.date.year > this.calendar.static.years?.length) {
        this.date.year = this.calendar.static.years ? this.calendar.static.years.length : null;
      }
      yearDrop.setValue(this.calendar.static.years?.[this.date.year - 1]?.id).onChange((v) => {
        this.date.year = this.calendar.static.years.findIndex((y) => y.id == v) + 1;
      });
    } else {
      const year = new import_obsidian36.TextComponent(yearEl).setPlaceholder("Year").setValue(`${this.date.year}`).onChange((v) => {
        this.date.year = Number(v);
      });
      year.inputEl.setAttr("type", "number");
    }
  }
  onOpen() {
    this.display();
  }
};
var ViewEventModal = class extends import_obsidian36.Modal {
  constructor(event, plugin) {
    super(plugin.app);
    this.event = event;
    this.plugin = plugin;
    this.containerEl.addClass("fantasy-calendar-view-event");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h4", { text: this.event.name });
    await import_obsidian36.MarkdownRenderer.renderMarkdown(this.event.description, this.contentEl, this.event.note, null);
  }
  async onOpen() {
    await this.display();
  }
};

// src/watcher/watcher.ts
var import_fs = __toModule(require("fs"));
var import_obsidian37 = __toModule(require("obsidian"));

// inline-worker:__inline-worker
function inlineWorker(scriptText) {
  let blob = new Blob([scriptText], { type: "text/javascript" });
  let url = URL.createObjectURL(blob);
  let worker = new Worker(url);
  URL.revokeObjectURL(url);
  return worker;
}

// src/watcher/watcher.worker.ts
function Worker2() {
  return inlineWorker(`var ee=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Re=ee(Ie=>{Ie.entityMap={lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"\\xC0",Aacute:"\\xC1",Acirc:"\\xC2",Atilde:"\\xC3",Auml:"\\xC4",Aring:"\\xC5",AElig:"\\xC6",Ccedil:"\\xC7",Egrave:"\\xC8",Eacute:"\\xC9",Ecirc:"\\xCA",Euml:"\\xCB",Igrave:"\\xCC",Iacute:"\\xCD",Icirc:"\\xCE",Iuml:"\\xCF",ETH:"\\xD0",Ntilde:"\\xD1",Ograve:"\\xD2",Oacute:"\\xD3",Ocirc:"\\xD4",Otilde:"\\xD5",Ouml:"\\xD6",Oslash:"\\xD8",Ugrave:"\\xD9",Uacute:"\\xDA",Ucirc:"\\xDB",Uuml:"\\xDC",Yacute:"\\xDD",THORN:"\\xDE",szlig:"\\xDF",agrave:"\\xE0",aacute:"\\xE1",acirc:"\\xE2",atilde:"\\xE3",auml:"\\xE4",aring:"\\xE5",aelig:"\\xE6",ccedil:"\\xE7",egrave:"\\xE8",eacute:"\\xE9",ecirc:"\\xEA",euml:"\\xEB",igrave:"\\xEC",iacute:"\\xED",icirc:"\\xEE",iuml:"\\xEF",eth:"\\xF0",ntilde:"\\xF1",ograve:"\\xF2",oacute:"\\xF3",ocirc:"\\xF4",otilde:"\\xF5",ouml:"\\xF6",oslash:"\\xF8",ugrave:"\\xF9",uacute:"\\xFA",ucirc:"\\xFB",uuml:"\\xFC",yacute:"\\xFD",thorn:"\\xFE",yuml:"\\xFF",nbsp:"\\xA0",iexcl:"\\xA1",cent:"\\xA2",pound:"\\xA3",curren:"\\xA4",yen:"\\xA5",brvbar:"\\xA6",sect:"\\xA7",uml:"\\xA8",copy:"\\xA9",ordf:"\\xAA",laquo:"\\xAB",not:"\\xAC",shy:"\\xAD\\xAD",reg:"\\xAE",macr:"\\xAF",deg:"\\xB0",plusmn:"\\xB1",sup2:"\\xB2",sup3:"\\xB3",acute:"\\xB4",micro:"\\xB5",para:"\\xB6",middot:"\\xB7",cedil:"\\xB8",sup1:"\\xB9",ordm:"\\xBA",raquo:"\\xBB",frac14:"\\xBC",frac12:"\\xBD",frac34:"\\xBE",iquest:"\\xBF",times:"\\xD7",divide:"\\xF7",forall:"\\u2200",part:"\\u2202",exist:"\\u2203",empty:"\\u2205",nabla:"\\u2207",isin:"\\u2208",notin:"\\u2209",ni:"\\u220B",prod:"\\u220F",sum:"\\u2211",minus:"\\u2212",lowast:"\\u2217",radic:"\\u221A",prop:"\\u221D",infin:"\\u221E",ang:"\\u2220",and:"\\u2227",or:"\\u2228",cap:"\\u2229",cup:"\\u222A",int:"\\u222B",there4:"\\u2234",sim:"\\u223C",cong:"\\u2245",asymp:"\\u2248",ne:"\\u2260",equiv:"\\u2261",le:"\\u2264",ge:"\\u2265",sub:"\\u2282",sup:"\\u2283",nsub:"\\u2284",sube:"\\u2286",supe:"\\u2287",oplus:"\\u2295",otimes:"\\u2297",perp:"\\u22A5",sdot:"\\u22C5",Alpha:"\\u0391",Beta:"\\u0392",Gamma:"\\u0393",Delta:"\\u0394",Epsilon:"\\u0395",Zeta:"\\u0396",Eta:"\\u0397",Theta:"\\u0398",Iota:"\\u0399",Kappa:"\\u039A",Lambda:"\\u039B",Mu:"\\u039C",Nu:"\\u039D",Xi:"\\u039E",Omicron:"\\u039F",Pi:"\\u03A0",Rho:"\\u03A1",Sigma:"\\u03A3",Tau:"\\u03A4",Upsilon:"\\u03A5",Phi:"\\u03A6",Chi:"\\u03A7",Psi:"\\u03A8",Omega:"\\u03A9",alpha:"\\u03B1",beta:"\\u03B2",gamma:"\\u03B3",delta:"\\u03B4",epsilon:"\\u03B5",zeta:"\\u03B6",eta:"\\u03B7",theta:"\\u03B8",iota:"\\u03B9",kappa:"\\u03BA",lambda:"\\u03BB",mu:"\\u03BC",nu:"\\u03BD",xi:"\\u03BE",omicron:"\\u03BF",pi:"\\u03C0",rho:"\\u03C1",sigmaf:"\\u03C2",sigma:"\\u03C3",tau:"\\u03C4",upsilon:"\\u03C5",phi:"\\u03C6",chi:"\\u03C7",psi:"\\u03C8",omega:"\\u03C9",thetasym:"\\u03D1",upsih:"\\u03D2",piv:"\\u03D6",OElig:"\\u0152",oelig:"\\u0153",Scaron:"\\u0160",scaron:"\\u0161",Yuml:"\\u0178",fnof:"\\u0192",circ:"\\u02C6",tilde:"\\u02DC",ensp:"\\u2002",emsp:"\\u2003",thinsp:"\\u2009",zwnj:"\\u200C",zwj:"\\u200D",lrm:"\\u200E",rlm:"\\u200F",ndash:"\\u2013",mdash:"\\u2014",lsquo:"\\u2018",rsquo:"\\u2019",sbquo:"\\u201A",ldquo:"\\u201C",rdquo:"\\u201D",bdquo:"\\u201E",dagger:"\\u2020",Dagger:"\\u2021",bull:"\\u2022",hellip:"\\u2026",permil:"\\u2030",prime:"\\u2032",Prime:"\\u2033",lsaquo:"\\u2039",rsaquo:"\\u203A",oline:"\\u203E",euro:"\\u20AC",trade:"\\u2122",larr:"\\u2190",uarr:"\\u2191",rarr:"\\u2192",darr:"\\u2193",harr:"\\u2194",crarr:"\\u21B5",lceil:"\\u2308",rceil:"\\u2309",lfloor:"\\u230A",rfloor:"\\u230B",loz:"\\u25CA",spades:"\\u2660",clubs:"\\u2663",hearts:"\\u2665",diams:"\\u2666"}});var Pe=ee(pe=>{var fe=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/,Oe=new RegExp("[\\\\-\\\\.0-9"+fe.source.slice(1,-1)+"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]"),Se=new RegExp("^"+fe.source+Oe.source+"*(?::"+fe.source+Oe.source+"*)?$"),z=0,O=1,$=2,j=3,F=4,L=5,G=6,te=7;function P(e,t){this.message=e,this.locator=t,Error.captureStackTrace&&Error.captureStackTrace(this,P)}P.prototype=new Error;P.prototype.name=P.name;function Me(){}Me.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),Fe(t,t={}),vt(e,t,n,r,this.errorHandler),r.endDocument()}};function vt(e,t,n,r,a){function i(v){if(v>65535){v-=65536;var C=55296+(v>>10),dt=56320+(v&1023);return String.fromCharCode(C,dt)}else return String.fromCharCode(v)}function o(v){var C=v.slice(1,-1);return C in n?n[C]:C.charAt(0)==="#"?i(parseInt(C.substr(1).replace("x","0x"))):(a.error("entity not found:"+v),v)}function c(v){if(v>m){var C=e.substring(m,v).replace(/&#?\\w+;/g,o);p&&l(m),r.characters(C,0,v-m),m=v}}function l(v,C){for(;v>=u&&(C=h.exec(e));)s=C.index,u=s+C[0].length,p.lineNumber++;p.columnNumber=v-s+1}for(var s=0,u=0,h=/.*(?:\\r\\n?|\\n)|.*$/g,p=r.locator,d=[{currentNSMap:t}],T={},m=0;;){try{var f=e.indexOf("<",m);if(f<0){if(!e.substr(m).match(/^\\s*$/)){var A=r.doc,be=A.createTextNode(e.substr(m));A.appendChild(be),r.currentElement=be}return}switch(f>m&&c(f),e.charAt(f+1)){case"/":var y=e.indexOf(">",f+3),_=e.substring(f+2,y),I=d.pop();y<0?(_=e.substring(f+2).replace(/[\\s<].*/,""),a.error("end tag name: "+_+" is not complete:"+I.tagName),y=f+1+_.length):_.match(/\\s</)&&(_=_.replace(/[\\s<].*/,""),a.error("end tag name: "+_+" maybe not complete"),y=f+1+_.length);var _e=I.localNSMap,Ce=I.tagName==_,pt=Ce||I.tagName&&I.tagName.toLowerCase()==_.toLowerCase();if(pt){if(r.endElement(I.uri,I.localName,_),_e)for(var mt in _e)r.endPrefixMapping(mt);Ce||a.fatalError("end tag name: "+_+" is not match the current start tagName:"+I.tagName)}else d.push(I);y++;break;case"?":p&&l(f),y=Dt(e,f,r);break;case"!":p&&l(f),y=yt(e,f,r,a);break;default:p&&l(f);var b=new Le,se=d[d.length-1].currentNSMap,y=gt(e,f,b,se,o,a),xe=b.length;if(!b.closed&&Nt(e,y,b.tagName,T)&&(b.closed=!0,n.nbsp||a.warning("unclosed xml attribute")),p&&xe){for(var ht=Ue(p,{}),ue=0;ue<xe;ue++){var Ae=b[ue];l(Ae.offset),Ae.locator=Ue(p,{})}r.locator=ht,$e(b,r,se)&&d.push(b),r.locator=p}else $e(b,r,se)&&d.push(b);b.uri==="http://www.w3.org/1999/xhtml"&&!b.closed?y=Et(e,y,b.tagName,o,r):y++}}catch(v){if(v instanceof P)throw v;a.error("element parse error: "+v),y=-1}y>m?m=y:c(Math.max(f,m)+1)}}function Ue(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function gt(e,t,n,r,a,i){function o(d,T,m){d in n.attributeNames&&i.fatalError("Attribute "+d+" redefined"),n.addValue(d,T,m)}for(var c,l,s=++t,u=z;;){var h=e.charAt(s);switch(h){case"=":if(u===O)c=e.slice(t,s),u=j;else if(u===$)u=j;else throw new Error("attribute equal must after attrName");break;case"'":case'"':if(u===j||u===O)if(u===O&&(i.warning('attribute value must after "="'),c=e.slice(t,s)),t=s+1,s=e.indexOf(h,t),s>0)l=e.slice(t,s).replace(/&#?\\w+;/g,a),o(c,l,t-1),u=L;else throw new Error("attribute value no end '"+h+"' match");else if(u==F)l=e.slice(t,s).replace(/&#?\\w+;/g,a),o(c,l,t),i.warning('attribute "'+c+'" missed start quot('+h+")!!"),t=s+1,u=L;else throw new Error('attribute value must after "="');break;case"/":switch(u){case z:n.setTagName(e.slice(t,s));case L:case G:case te:u=te,n.closed=!0;case F:case O:case $:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return i.error("unexpected end of input"),u==z&&n.setTagName(e.slice(t,s)),s;case">":switch(u){case z:n.setTagName(e.slice(t,s));case L:case G:case te:break;case F:case O:l=e.slice(t,s),l.slice(-1)==="/"&&(n.closed=!0,l=l.slice(0,-1));case $:u===$&&(l=c),u==F?(i.warning('attribute "'+l+'" missed quot(")!'),o(c,l.replace(/&#?\\w+;/g,a),t)):((r[""]!=="http://www.w3.org/1999/xhtml"||!l.match(/^(?:disabled|checked|selected)$/i))&&i.warning('attribute "'+l+'" missed value!! "'+l+'" instead!!'),o(l,l,t));break;case j:throw new Error("attribute value missed!!")}return s;case"\\x80":h=" ";default:if(h<=" ")switch(u){case z:n.setTagName(e.slice(t,s)),u=G;break;case O:c=e.slice(t,s),u=$;break;case F:var l=e.slice(t,s).replace(/&#?\\w+;/g,a);i.warning('attribute "'+l+'" missed quot(")!!'),o(c,l,t);case L:u=G;break}else switch(u){case $:var p=n.tagName;(r[""]!=="http://www.w3.org/1999/xhtml"||!c.match(/^(?:disabled|checked|selected)$/i))&&i.warning('attribute "'+c+'" missed value!! "'+c+'" instead2!!'),o(c,c,t),t=s,u=O;break;case L:i.warning('attribute space is required"'+c+'"!!');case G:u=O,t=s;break;case j:u=F,t=s;break;case te:throw new Error("elements closed character '/' and '>' must be connected to")}}s++}}function $e(e,t,n){for(var r=e.tagName,a=null,i=e.length;i--;){var o=e[i],c=o.qName,l=o.value,p=c.indexOf(":");if(p>0)var s=o.prefix=c.slice(0,p),u=c.slice(p+1),h=s==="xmlns"&&u;else u=c,s=null,h=c==="xmlns"&&"";o.localName=u,h!==!1&&(a==null&&(a={},Fe(n,n={})),n[h]=a[h]=l,o.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(h,l))}for(var i=e.length;i--;){o=e[i];var s=o.prefix;s&&(s==="xml"&&(o.uri="http://www.w3.org/XML/1998/namespace"),s!=="xmlns"&&(o.uri=n[s||""]))}var p=r.indexOf(":");p>0?(s=e.prefix=r.slice(0,p),u=e.localName=r.slice(p+1)):(s=null,u=e.localName=r);var d=e.uri=n[s||""];if(t.startElement(d,u,r,e),e.closed){if(t.endElement(d,u,r),a)for(s in a)t.endPrefixMapping(s)}else return e.currentNSMap=n,e.localNSMap=a,!0}function Et(e,t,n,r,a){if(/^(?:script|textarea)$/i.test(n)){var i=e.indexOf("</"+n+">",t),o=e.substring(t+1,i);if(/[&<]/.test(o))return/^script$/i.test(n)?(a.characters(o,0,o.length),i):(o=o.replace(/&#?\\w+;/g,r),a.characters(o,0,o.length),i)}return t+1}function Nt(e,t,n,r){var a=r[n];return a==null&&(a=e.lastIndexOf("</"+n+">"),a<t&&(a=e.lastIndexOf("</"+n)),r[n]=a),a<t}function Fe(e,t){for(var n in e)t[n]=e[n]}function yt(e,t,n,r){var a=e.charAt(t+2);switch(a){case"-":if(e.charAt(t+3)==="-"){var i=e.indexOf("-->",t+4);return i>t?(n.comment(e,t+4,i-t-4),i+3):(r.error("Unclosed comment"),-1)}else return-1;default:if(e.substr(t+3,6)=="CDATA["){var i=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,i-t-9),n.endCDATA(),i+3}var o=wt(e,t),c=o.length;if(c>1&&/!doctype/i.test(o[0][0])){var l=o[1][0],s=!1,u=!1;c>3&&(/^public$/i.test(o[2][0])?(s=o[3][0],u=c>4&&o[4][0]):/^system$/i.test(o[2][0])&&(u=o[3][0]));var h=o[c-1];return n.startDTD(l,s,u),n.endDTD(),h.index+h[0].length}}return-1}function Dt(e,t,n){var r=e.indexOf("?>",t);if(r){var a=e.substring(t,r).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(a){var i=a[0].length;return n.processingInstruction(a[1],a[2]),r+2}else return-1}return-1}function Le(){this.attributeNames={}}Le.prototype={setTagName:function(e){if(!Se.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},addValue:function(e,t,n){if(!Se.test(e))throw new Error("invalid attribute:"+e);this.attributeNames[e]=this.length,this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}};function wt(e,t){var n,r=[],a=/'[^']+'|"[^"]+"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;for(a.lastIndex=t,a.exec(e);n=a.exec(e);)if(r.push(n),n[1])return r}pe.XMLReader=Me;pe.ParseError=P});var we=ee(K=>{function W(e,t){for(var n in e)t[n]=e[n]}function D(e,t){var n=e.prototype;if(!(n instanceof t)){let a=function(){};var r=a;a.prototype=t.prototype,a=new a,W(n,a),e.prototype=n=a}n.constructor!=e&&(typeof e!="function"&&console.error("unknow Class:"+e),n.constructor=e)}var Tt="http://www.w3.org/1999/xhtml",w={},x=w.ELEMENT_NODE=1,k=w.ATTRIBUTE_NODE=2,ne=w.TEXT_NODE=3,ke=w.CDATA_SECTION_NODE=4,Ve=w.ENTITY_REFERENCE_NODE=5,bt=w.ENTITY_NODE=6,qe=w.PROCESSING_INSTRUCTION_NODE=7,Xe=w.COMMENT_NODE=8,Ye=w.DOCUMENT_NODE=9,ze=w.DOCUMENT_TYPE_NODE=10,R=w.DOCUMENT_FRAGMENT_NODE=11,_t=w.NOTATION_NODE=12,E={},g={},qt=E.INDEX_SIZE_ERR=(g[1]="Index size error",1),Xt=E.DOMSTRING_SIZE_ERR=(g[2]="DOMString size error",2),Ct=E.HIERARCHY_REQUEST_ERR=(g[3]="Hierarchy request error",3),Yt=E.WRONG_DOCUMENT_ERR=(g[4]="Wrong document",4),zt=E.INVALID_CHARACTER_ERR=(g[5]="Invalid character",5),jt=E.NO_DATA_ALLOWED_ERR=(g[6]="No data allowed",6),Gt=E.NO_MODIFICATION_ALLOWED_ERR=(g[7]="No modification allowed",7),xt=E.NOT_FOUND_ERR=(g[8]="Not found",8),Wt=E.NOT_SUPPORTED_ERR=(g[9]="Not supported",9),je=E.INUSE_ATTRIBUTE_ERR=(g[10]="Attribute in use",10),Qt=E.INVALID_STATE_ERR=(g[11]="Invalid state",11),Bt=E.SYNTAX_ERR=(g[12]="Syntax error",12),Zt=E.INVALID_MODIFICATION_ERR=(g[13]="Invalid modification",13),Kt=E.NAMESPACE_ERR=(g[14]="Invalid namespace",14),Jt=E.INVALID_ACCESS_ERR=(g[15]="Invalid access",15);function M(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,g[e]),this.message=g[e],Error.captureStackTrace&&Error.captureStackTrace(this,M);return n.code=e,t&&(this.message=this.message+": "+t),n}M.prototype=Error.prototype;W(E,M);function S(){}S.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)X(this[r],n,e,t);return n.join("")}};function V(e,t){this._node=e,this._refresh=t,me(this)}function me(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var n=e._refresh(e._node);ot(e,"length",n.length),W(n,e),e._inc=t}}V.prototype.item=function(e){return me(this),this[e]};D(V,S);function re(){}function Ge(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function We(e,t,n,r){if(r?t[Ge(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var a=e.ownerDocument;a&&(r&&Ke(a,e,r),At(a,e,n))}}function Qe(e,t,n){var r=Ge(t,n);if(r>=0){for(var a=t.length-1;r<a;)t[r]=t[++r];if(t.length=a,e){var i=e.ownerDocument;i&&(Ke(i,e,n),n.ownerElement=null)}}else throw M(xt,new Error(e.tagName+"@"+n))}re.prototype={length:0,item:S.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new M(je);var n=this.getNamedItem(e.nodeName);return We(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t=e.ownerElement,n;if(t&&t!=this._ownerElement)throw new M(je);return n=this.getNamedItemNS(e.namespaceURI,e.localName),We(this._ownerElement,this,e,n),n},removeNamedItem:function(e){var t=this.getNamedItem(e);return Qe(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return Qe(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}};function Be(e){if(this._features={},e)for(var t in e)this._features=e[t]}Be.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!!(n&&(!t||t in n))},createDocument:function(e,t,n){var r=new B;if(r.implementation=this,r.childNodes=new S,r.doctype=n,n&&r.appendChild(n),t){var a=r.createElementNS(e,t);r.appendChild(a)}return r},createDocumentType:function(e,t,n){var r=new Ee;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}};function N(){}N.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return He(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return Je(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(e){return De(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==ne&&e.nodeType==ne?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n){for(var r in n)if(n[r]==e)return r}t=t.nodeType==k?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==k?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){var t=this.lookupPrefix(e);return t==null}};function Ze(e){return e=="<"&&"&lt;"||e==">"&&"&gt;"||e=="&"&&"&amp;"||e=='"'&&"&quot;"||"&#"+e.charCodeAt()+";"}W(w,N);W(w,N.prototype);function Q(e,t){if(t(e))return!0;if(e=e.firstChild)do if(Q(e,t))return!0;while(e=e.nextSibling)}function B(){}function At(e,t,n){e&&e._inc++;var r=n.namespaceURI;r=="http://www.w3.org/2000/xmlns/"&&(t._nsMap[n.prefix?n.localName:""]=n.value)}function Ke(e,t,n,r){e&&e._inc++;var a=n.namespaceURI;a=="http://www.w3.org/2000/xmlns/"&&delete t._nsMap[n.prefix?n.localName:""]}function he(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var a=t.firstChild,i=0;a;)r[i++]=a,a=a.nextSibling;r.length=i}}}function Je(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,he(e.ownerDocument,e),t}function He(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===R){var a=t.firstChild;if(a==null)return t;var i=t.lastChild}else a=i=t;var o=n?n.previousSibling:e.lastChild;a.previousSibling=o,i.nextSibling=n,o?o.nextSibling=a:e.firstChild=a,n==null?e.lastChild=i:n.previousSibling=i;do a.parentNode=e;while(a!==i&&(a=a.nextSibling));return he(e.ownerDocument||e,e),t.nodeType==R&&(t.firstChild=t.lastChild=null),t}function It(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t);var r=e.lastChild}var r=e.lastChild;return t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,he(e.ownerDocument,e,t),t}B.prototype={nodeName:"#document",nodeType:Ye,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==R){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return this.documentElement==null&&e.nodeType==x&&(this.documentElement=e),He(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),Je(this,e)},importNode:function(e,t){return it(this,e,t)},getElementById:function(e){var t=null;return Q(this.documentElement,function(n){if(n.nodeType==x&&n.getAttribute("id")==e)return t=n,!0}),t},getElementsByClassName:function(e){var t=new RegExp("(^|\\\\s)"+e+"(\\\\s|$)");return new V(this,function(n){var r=[];return Q(n.documentElement,function(a){a!==n&&a.nodeType==x&&t.test(a.getAttribute("class"))&&r.push(a)}),r})},createElement:function(e){var t=new q;t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new S;var n=t.attributes=new re;return n._ownerElement=t,t},createDocumentFragment:function(){var e=new ie;return e.ownerDocument=this,e.childNodes=new S,e},createTextNode:function(e){var t=new de;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new ve;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new ge;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new ye;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new ae;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new Ne;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new q,r=t.split(":"),a=n.attributes=new re;return n.childNodes=new S,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=t,a._ownerElement=n,n},createAttributeNS:function(e,t){var n=new ae,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}};D(B,N);function q(){this._nsMap={}}q.prototype={nodeType:x,hasAttribute:function(e){return this.getAttributeNode(e)!=null},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===R?this.insertBefore(e,null):It(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return this.getAttributeNodeNS(e,t)!=null},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new V(this,function(t){var n=[];return Q(t,function(r){r!==t&&r.nodeType==x&&(e==="*"||r.tagName==e)&&n.push(r)}),n})},getElementsByTagNameNS:function(e,t){return new V(this,function(n){var r=[];return Q(n,function(a){a!==n&&a.nodeType===x&&(e==="*"||a.namespaceURI===e)&&(t==="*"||a.localName==t)&&r.push(a)}),r})}};B.prototype.getElementsByTagName=q.prototype.getElementsByTagName;B.prototype.getElementsByTagNameNS=q.prototype.getElementsByTagNameNS;D(q,N);function ae(){}ae.prototype.nodeType=k;D(ae,N);function Z(){}Z.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(g[Ct])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){var r=this.data.substring(0,e),a=this.data.substring(e+t);n=r+n+a,this.nodeValue=this.data=n,this.length=n.length}};D(Z,N);function de(){}de.prototype={nodeName:"#text",nodeType:ne,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}};D(de,Z);function ve(){}ve.prototype={nodeName:"#comment",nodeType:Xe};D(ve,Z);function ge(){}ge.prototype={nodeName:"#cdata-section",nodeType:ke};D(ge,Z);function Ee(){}Ee.prototype.nodeType=ze;D(Ee,N);function et(){}et.prototype.nodeType=_t;D(et,N);function tt(){}tt.prototype.nodeType=bt;D(tt,N);function Ne(){}Ne.prototype.nodeType=Ve;D(Ne,N);function ie(){}ie.prototype.nodeName="#document-fragment";ie.prototype.nodeType=R;D(ie,N);function ye(){}ye.prototype.nodeType=qe;D(ye,N);function nt(){}nt.prototype.serializeToString=function(e,t,n){return rt.call(e,t,n)};N.prototype.toString=rt;function rt(e,t){var n=[],r=this.nodeType==9&&this.documentElement||this,a=r.prefix,i=r.namespaceURI;if(i&&a==null){var a=r.lookupPrefix(i);if(a==null)var o=[{namespace:i,prefix:null}]}return X(this,n,e,t,o),n.join("")}function at(e,t,n){var r=e.prefix||"",a=e.namespaceURI;if(!r&&!a||r==="xml"&&a==="http://www.w3.org/XML/1998/namespace"||a=="http://www.w3.org/2000/xmlns/")return!1;for(var i=n.length;i--;){var o=n[i];if(o.prefix==r)return o.namespace!=a}return!0}function X(e,t,n,r,a){if(r)if(e=r(e),e){if(typeof e=="string"){t.push(e);return}}else return;switch(e.nodeType){case x:a||(a=[]);var i=a.length,o=e.attributes,c=o.length,l=e.firstChild,s=e.tagName;n=Tt===e.namespaceURI||n,t.push("<",s);for(var u=0;u<c;u++){var h=o.item(u);h.prefix=="xmlns"?a.push({prefix:h.localName,namespace:h.value}):h.nodeName=="xmlns"&&a.push({prefix:"",namespace:h.value})}for(var u=0;u<c;u++){var h=o.item(u);if(at(h,n,a)){var p=h.prefix||"",d=h.namespaceURI,T=p?" xmlns:"+p:" xmlns";t.push(T,'="',d,'"'),a.push({prefix:p,namespace:d})}X(h,t,n,r,a)}if(at(e,n,a)){var p=e.prefix||"",d=e.namespaceURI;if(d){var T=p?" xmlns:"+p:" xmlns";t.push(T,'="',d,'"'),a.push({prefix:p,namespace:d})}}if(l||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(s)){if(t.push(">"),n&&/^script$/i.test(s))for(;l;)l.data?t.push(l.data):X(l,t,n,r,a),l=l.nextSibling;else for(;l;)X(l,t,n,r,a),l=l.nextSibling;t.push("</",s,">")}else t.push("/>");return;case Ye:case R:for(var l=e.firstChild;l;)X(l,t,n,r,a),l=l.nextSibling;return;case k:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,Ze),'"');case ne:return t.push(e.data.replace(/[<&]/g,Ze).replace(/]]>/g,"]]&gt;"));case ke:return t.push("<![CDATA[",e.data,"]]>");case Xe:return t.push("<!--",e.data,"-->");case ze:var m=e.publicId,f=e.systemId;if(t.push("<!DOCTYPE ",e.name),m)t.push(" PUBLIC ",m),f&&f!="."&&t.push(" ",f),t.push(">");else if(f&&f!=".")t.push(" SYSTEM ",f,">");else{var A=e.internalSubset;A&&t.push(" [",A,"]"),t.push(">")}return;case qe:return t.push("<?",e.target," ",e.data,"?>");case Ve:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function it(e,t,n){var r;switch(t.nodeType){case x:r=t.cloneNode(!1),r.ownerDocument=e;case R:break;case k:n=!0;break}if(r||(r=t.cloneNode(!1)),r.ownerDocument=e,r.parentNode=null,n)for(var a=t.firstChild;a;)r.appendChild(it(e,a,n)),a=a.nextSibling;return r}function De(e,t,n){var r=new t.constructor;for(var a in t){var i=t[a];typeof i!="object"&&i!=r[a]&&(r[a]=i)}switch(t.childNodes&&(r.childNodes=new S),r.ownerDocument=e,r.nodeType){case x:var o=t.attributes,c=r.attributes=new re,l=o.length;c._ownerElement=r;for(var s=0;s<l;s++)r.setAttributeNode(De(e,o.item(s),!0));break;case k:n=!0}if(n)for(var u=t.firstChild;u;)r.appendChild(De(e,u,n)),u=u.nextSibling;return r}function ot(e,t,n){e[t]=n}try{if(Object.defineProperty){let e=function(t){switch(t.nodeType){case x:case R:var n=[];for(t=t.firstChild;t;)t.nodeType!==7&&t.nodeType!==8&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}};Ht=e,Object.defineProperty(V.prototype,"length",{get:function(){return me(this),this.$$length}}),Object.defineProperty(N.prototype,"textContent",{get:function(){return e(this)},set:function(t){switch(this.nodeType){case x:case R:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),ot=function(t,n,r){t["$$"+n]=r}}}catch(e){}var Ht;K.Node=N;K.DOMException=M;K.DOMImplementation=Be;K.XMLSerializer=nt});var ct=ee(H=>{function st(e){this.options=e||{locator:{}}}st.prototype.parseFromString=function(e,t){var n=this.options,r=new St,a=n.domBuilder||new J,i=n.errorHandler,o=n.locator,c=n.xmlns||{},l=/\\/x?html?$/.test(t),s=l?Ot.entityMap:{lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return o&&a.setDocumentLocator(o),r.errorHandler=Rt(i,a,o),r.domBuilder=n.domBuilder||a,l&&(c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",e&&typeof e=="string"?r.parse(e,c,s):r.errorHandler.error("invalid doc source"),a.doc};function Rt(e,t,n){if(!e){if(t instanceof J)return t;e=t}var r={},a=e instanceof Function;n=n||{};function i(o){var c=e[o];!c&&a&&(c=e.length==2?function(l){e(o,l)}:e),r[o]=c&&function(l){c("[xmldom "+o+"]	"+l+Te(n))}||function(){}}return i("warning"),i("error"),i("fatalError"),r}function J(){this.cdata=!1}function Y(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}J.prototype={startDocument:function(){this.doc=new Ut().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var a=this.doc,i=a.createElementNS(e,n||t),o=r.length;oe(this,i),this.currentElement=i,this.locator&&Y(this.locator,i);for(var c=0;c<o;c++){var e=r.getURI(c),l=r.getValue(c),n=r.getQName(c),s=a.createAttributeNS(e,n);this.locator&&Y(r.getLocator(c),s),s.value=s.nodeValue=l,i.setAttributeNode(s)}},endElement:function(e,t,n){var r=this.currentElement,a=r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&Y(this.locator,n),oe(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=ut.apply(this,arguments),e){if(this.cdata)var r=this.doc.createCDATASection(e);else var r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&Y(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=ut.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&Y(this.locator,r),oe(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var a=r.createDocumentType(e,t,n);this.locator&&Y(this.locator,a),oe(this,a)}},warning:function(e){console.warn("[xmldom warning]	"+e,Te(this.locator))},error:function(e){console.error("[xmldom error]	"+e,Te(this.locator))},fatalError:function(e){throw new Mt(e,this.locator)}};function Te(e){if(e)return\`
@\`+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function ut(e,t,n){return typeof e=="string"?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\\w+/g,function(e){J.prototype[e]=function(){return null}});function oe(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}var Ot=Re(),lt=Pe(),St=lt.XMLReader,Mt=lt.ParseError,Ut=H.DOMImplementation=we().DOMImplementation;H.XMLSerializer=we().XMLSerializer;H.DOMParser=st;H.__DOMHandler=J});function le(e,t){return(e%t+t)%t}function ce(e){return"ID_xyxyxyxyxyxy".replace(/[xy]/g,function(t){var n=Math.random()*16|0,r=t=="x"?n:n&3|8;return r.toString(16)})}var{DOMParser:$t}=ct(),Ft=/(<(span|div).*?<\\/(span|div)>)/g,U=self,ft=class{constructor(){this.queue=[];this.parsing=!1;this.parseTitle=!1;U.addEventListener("message",t=>{if(t.data.type=="options"){let{defaultCalendar:n,format:r,parseTitle:a,supportsTimelines:i,timelineTag:o}=t.data;this.defaultCalendar=n,this.format=r,this.parseTitle=a,this.supportsTimelines=i,this.timelineTag=o}}),U.addEventListener("message",t=>{if(t.data.type=="calendars"){let{calendars:n}=t.data;this.calendars=[...n]}}),U.addEventListener("message",t=>{t.data.type=="queue"&&this.add(...t.data.paths)})}add(...t){this.queue.push(...t),this.parsing||this.parse()}async parse(){for(this.parsing=!0;this.queue.length;){let t=this.queue.shift(),{data:n,file:r,cache:a,allTags:i}=await this.getFileData(t);this.parseFileForEvents(n,a,i,r)}this.parsing=!1,U.postMessage({type:"save"})}async getFileData(t){return new Promise(n=>{U.addEventListener("message",r=>{n(r.data)}),U.postMessage({path:t,type:"get"})})}getDataFromFrontmatter(t){let n,r;return t&&(n=t==null?void 0:t["fc-calendar"],r=t==null?void 0:t["fc-category"]),(!n||!n.length)&&(n=this.defaultCalendar),n=n.toLowerCase(),{calendar:this.calendars.find(i=>n==i.name.toLowerCase()),fcCategory:r}}parseFileForEvents(t,n,r,a){var s,u,h,p,d,T;let i=[],{frontmatter:o}=n!=null?n:{},{calendar:c,fcCategory:l}=this.getDataFromFrontmatter(o);if(!!c){this.supportsTimelines&&r&&r.includes(this.timelineTag)&&i.push(...this.parseTimelineEvents(c,t,a,l)),i.push(...this.parseFrontmatterEvents(c,l,o,a));for(let m of i){let f=c.events.find(A=>A.note==a.path&&(!m.timestamp||A.timestamp==m.timestamp));(f==null?void 0:f.date.day)==m.date.day&&(f==null?void 0:f.date.month)==m.date.month&&(f==null?void 0:f.date.year)==m.date.year&&((s=f==null?void 0:f.end)==null?void 0:s.day)==((u=m.end)==null?void 0:u.day)&&((h=f==null?void 0:f.end)==null?void 0:h.month)==((p=m.end)==null?void 0:p.month)&&((d=f==null?void 0:f.end)==null?void 0:d.year)==((T=m.end)==null?void 0:T.year)&&(f==null?void 0:f.category)==m.category&&(!m.timestamp&&!(f==null?void 0:f.timestamp)||(f==null?void 0:f.timestamp)==m.timestamp)||U.postMessage({type:"update",id:c.id,index:f?c.events.findIndex(A=>A.id==(f==null?void 0:f.id)):-1,event:m,original:f})}}}parseFrontmatterEvents(t,n,r,a){let{date:i,end:o}=this.getDates(r,this.parseTitle?a.basename:"");if(!i)return[];if((i==null?void 0:i.month)&&typeof(i==null?void 0:i.month)=="string"){let s=t.static.months.find(u=>u.name==i.month);s?i.month=t.static.months.indexOf(s):i.month=null}else(i==null?void 0:i.month)&&typeof(i==null?void 0:i.month)=="number"&&(i.month=le(i.month-1,t.static.months.length));if((o==null?void 0:o.month)&&typeof(o==null?void 0:o.month)=="string"){let s=t.static.months.find(u=>u.name==o.month);s?o.month=t.static.months.indexOf(s):o.month=null}else(o==null?void 0:o.month)&&typeof(o==null?void 0:o.month)=="number"&&(o.month=le(o.month-1,t.static.months.length));let c=Number(\`\${i.year}\${i.month}\${i.day}00\`),l=t.categories.find(s=>(s==null?void 0:s.name)==n);return[{id:ce(6),name:a.basename,note:a.path,date:i,end:o,category:l==null?void 0:l.id,description:""}]}parseTimelineEvents(t,n,r,a){var c;let i=[],o=new $t;for(let l of n.matchAll(Ft)){let s=o.parseFromString(l[0],"text/html"),u={class:s.documentElement.getAttribute("class"),dataset:{date:s.documentElement.getAttribute("data-date"),title:s.documentElement.getAttribute("data-title"),class:s.documentElement.getAttribute("data-class"),end:s.documentElement.getAttribute("data-end")},content:s.documentElement.textContent};if(u.class!=="ob-timelines"||!u.dataset.date)continue;let h=Number(u.dataset.date[0]=="-"?+u.dataset.date.substring(1,u.dataset.date.length).split("-").join("")*-1:+u.dataset.date.split("-").join("")),p=u.dataset.date.split(/(?<!^)-/),d={year:parseInt(p[0]),month:parseInt(p[1]),day:parseInt(p[2])},T;u.dataset.end&&(p=u.dataset.end.split(/(?<!^)-/),T={year:parseInt(p[0]),month:parseInt(p[1]),day:parseInt(p[2])});let m=t.categories.find(f=>(f==null?void 0:f.name)==a);i.push({id:ce(6),name:(c=u.dataset.title)!=null?c:r.basename,note:r.path,date:d,end:T,timestamp:h,category:m==null?void 0:m.id,description:u.content})}return i}parseDate(t){var n;if(typeof t=="string"){if(!/\\d+[./-]\\d+[./-]\\d+/.test(t))return;try{let[r]=(n=t.match(/\\d+[./-]\\d+[./-]\\d+/))!=null?n:[];if(!r)return;let a=r.split(/[.\\-\\/]/).map(o=>Number(o)),i=[...new Set(this.format.replace(/[^\\w]/g,"").toUpperCase().split(""))];return{year:a[i.indexOf("Y")],month:a[i.indexOf("M")],day:a[i.indexOf("D")]}}catch(r){return}}else return t}getDates(t={},n){let r="fc-date"in t?"fc-date":"fc-start",a;t&&r in t&&(a=t[r]),a||(a=n);let i=this.parseDate(a),o="fc-end"in t?t["fc-end"]:null,c=this.parseDate(o);return{date:i,end:c}}};new ft;
`);
}

// src/watcher/watcher.ts
var Watcher = class extends import_obsidian37.Component {
  constructor(plugin) {
    super();
    this.plugin = plugin;
    this.parsing = new Set();
    this.tree = new Map();
    this.worker = new Worker2();
  }
  get calendars() {
    return this.plugin.data.calendars;
  }
  get metadataCache() {
    return this.plugin.app.metadataCache;
  }
  get vault() {
    return this.plugin.app.vault;
  }
  onload() {
    this.worker.postMessage({
      type: "calendars",
      calendars: this.calendars
    });
    this.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-updated", () => {
      this.worker.postMessage({
        type: "calendars",
        calendars: this.calendars
      });
    }));
    this.worker.postMessage({
      type: "options",
      parseTitle: this.plugin.data.parseDates,
      format: this.plugin.format,
      defaultCalendar: this.plugin.defaultCalendar?.name,
      supportsTimelines: this.plugin.data.supportTimelines,
      timelineTag: this.plugin.data.timelineTag
    });
    this.registerEvent(this.plugin.app.workspace.on("fantasy-calendar-settings-change", () => {
      this.worker.postMessage({
        type: "options",
        parseTitle: this.plugin.data.parseDates,
        format: this.plugin.format,
        defaultCalendar: this.plugin.defaultCalendar?.name,
        supportsTimelines: this.plugin.data.supportTimelines,
        timelineTag: this.plugin.data.timelineTag
      });
    }));
    this.registerEvent(this.metadataCache.on("changed", (file) => {
      const parsing2 = new Set();
      for (const path of this.getFiles(file))
        parsing2.add(path);
      this.startParsing([...parsing2]);
    }));
    this.registerEvent(this.vault.on("rename", (abstractFile, oldPath) => {
      if (!this.calendars.length)
        return;
      if (!(abstractFile instanceof import_obsidian37.TFile))
        return;
      this.worker.postMessage({
        type: "rename",
        file: {
          path: abstractFile.path,
          basename: abstractFile.basename,
          oldPath
        },
        sourceCalendars: this.calendars
      });
    }));
    this.registerEvent(this.vault.on("delete", (abstractFile) => {
      if (!(abstractFile instanceof import_obsidian37.TFile))
        return;
      for (let calendar of this.calendars) {
        for (let event of calendar.events) {
          if (!event.note)
            continue;
          if (event.note === abstractFile.path) {
            event.note = null;
          }
        }
      }
      this.plugin.saveCalendar();
    }));
    this.worker.addEventListener("message", async (event) => {
      if (event.data.type == "get") {
        const { path } = event.data;
        const data = await this.getFileInformation(path);
        this.worker.postMessage({
          type: "file",
          path,
          ...data
        });
      }
    });
    this.worker.addEventListener("message", async (evt) => {
      if (evt.data.type == "update") {
        const { id, index, event, original } = evt.data;
        const calendar = this.calendars.find((c) => c.id == id);
        if (!calendar)
          return;
        calendar.events.splice(index, index >= 0 ? 1 : 0, event);
        this.addToTree(calendar, event);
        if (original) {
          this.addToTree(calendar, original);
        }
      }
    });
    this.worker.addEventListener("message", async (evt) => {
      if (evt.data.type == "save") {
        this.plugin.app.workspace.trigger("fantasy-calendars-event-update", this.tree);
        this.tree = new Map();
        await this.plugin.saveCalendar();
      }
    });
    if (!this.calendars.length)
      return;
    const folder = this.vault.getAbstractFileByPath(this.plugin.data.path);
    if (!folder || !(folder instanceof import_obsidian37.TFolder))
      return;
    const parsing = new Set();
    for (const path of this.getFiles(folder))
      parsing.add(path);
    this.startParsing([...parsing]);
  }
  addToTree(calendar, event) {
    if (!this.tree.has(calendar.id)) {
      this.tree.set(calendar.id, new Map());
    }
    const calendarTree = this.tree.get(calendar.id);
    if (!calendarTree.has(event.date.year)) {
      calendarTree.set(event.date.year, new Set());
    }
    const yearSet = calendarTree.get(event.date.year);
    this.tree.set(calendar.id, calendarTree.set(event.date.year, yearSet.add(event.date.month)));
  }
  startParsing(paths) {
    if (paths.length) {
      this.worker.postMessage({
        type: "queue",
        paths
      });
    }
  }
  async getFileInformation(path) {
    const file = this.plugin.app.vault.getAbstractFileByPath(path);
    if (!(file instanceof import_obsidian37.TFile))
      return;
    const cache = this.metadataCache.getFileCache(file);
    const allTags = (0, import_obsidian37.getAllTags)(cache);
    const data = await this.vault.cachedRead(file);
    return {
      cache,
      file: { path: file.path, basename: file.basename },
      allTags,
      data
    };
  }
  getFiles(folder) {
    if (!this.plugin.data.autoParse)
      return [];
    let files = [];
    if (folder instanceof import_obsidian37.TFolder) {
      for (const child of folder.children) {
        files.push(...this.getFiles(child));
      }
    }
    if (folder instanceof import_obsidian37.TFile) {
      files.push(folder.path);
    }
    return files;
  }
  onunload() {
    this.worker.terminate();
    this.worker = null;
  }
};

// src/api/api.ts
var API = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  getMoons(date, name) {
    const calendar = name ? this.plugin.data.calendars.find(({ name: c_name }) => c_name == name) : this.plugin.defaultCalendar ?? this.plugin.defaultCalendar;
    const helper = this._getHelper(calendar);
    const dateToGet = date ? date : helper.current;
    const day = helper.getDayForDate(dateToGet);
    let moons = [];
    for (const [moon, phase] of day.moons) {
      const target = createSpan();
      new Moon_default({
        target,
        props: {
          moon,
          phase
        }
      });
      moons.push({ icon: target, moon, phase });
    }
    return moons;
  }
  _getHelper(calendar = this.plugin.defaultCalendar) {
    return new CalendarHelper(calendar, this.plugin);
  }
};

// src/main.ts
var import_fast_copy3 = __toModule(require_fast_copy());
var MODIFIER_KEY2 = import_obsidian38.Platform.isMacOS ? "Meta" : "Control";
var DEFAULT_CALENDAR = {
  name: null,
  description: null,
  id: null,
  static: {
    incrementDay: false,
    firstWeekDay: null,
    overflow: true,
    weekdays: [],
    months: [],
    moons: [],
    displayMoons: true,
    displayDayNumber: false,
    leapDays: [],
    eras: []
  },
  current: {
    year: 1,
    month: null,
    day: null
  },
  events: [],
  categories: []
};
var DEFAULT_DATA = {
  calendars: [],
  currentCalendar: null,
  defaultCalendar: null,
  eventPreview: false,
  configDirectory: null,
  path: "/",
  parseDates: false,
  dateFormat: "YYYY-MM-DD",
  dailyNotes: false,
  version: {
    major: null,
    minor: null,
    patch: null
  },
  supportTimelines: false,
  timelineTag: "#timeline",
  syncTimelines: true,
  autoParse: true,
  settingsToggleState: {
    calendars: false,
    events: false
  }
};
var FantasyCalendar2 = class extends import_obsidian38.Plugin {
  constructor() {
    super(...arguments);
    this.api = new API(this);
    this.watcher = new Watcher(this);
  }
  async addNewCalendar(calendar) {
    this.data.calendars.push({ ...calendar });
    if (!this.data.defaultCalendar) {
      this.data.defaultCalendar = calendar.id;
    }
    await this.saveCalendar();
  }
  get currentCalendar() {
    return this.data.calendars.find((c) => c.id == this.data.currentCalendar);
  }
  get canUseDailyNotes() {
    return this.dailyNotes._loaded;
  }
  get dailyNotes() {
    return this.app.internalPlugins.getPluginById("daily-notes");
  }
  get canUseTimelines() {
    return this.app.plugins.getPlugin("obsidian-timelines") != null;
  }
  get syncTimelines() {
    return this.data.syncTimelines && this.canUseTimelines;
  }
  get timelineTag() {
    if (this.syncTimelines) {
      return this.app.plugins.getPlugin("obsidian-timelines").settings.timelineTag;
    } else {
      return this.data.timelineTag;
    }
  }
  get format() {
    return (this.data.dailyNotes && this.canUseDailyNotes ? this.dailyNotes.instance.options.format : this.data.dateFormat) ?? "YYYY-MM-DD";
  }
  get defaultCalendar() {
    return this.data.calendars.find((c) => c.id == this.data.defaultCalendar) ?? this.data.calendars[0];
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE);
    const leaf = leaves.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof FantasyCalendarView)
      return leaf.view;
  }
  get full() {
    const leaves = this.app.workspace.getLeavesOfType(FULL_VIEW);
    const leaf = leaves.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof FantasyCalendarView)
      return leaf.view;
  }
  async onload() {
    console.log("Loading Fantasy Calendars v" + this.manifest.version);
    await this.loadSettings();
    this.watcher.load();
    (0, import_obsidian38.addIcon)("fc-moon", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="moon" class="svg-inline--fa fa-moon fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M279.135 512c78.756 0 150.982-35.804 198.844-94.775 28.27-34.831-2.558-85.722-46.249-77.401-82.348 15.683-158.272-47.268-158.272-130.792 0-48.424 26.06-92.292 67.434-115.836 38.745-22.05 28.999-80.788-15.022-88.919A257.936 257.936 0 0 0 279.135 0c-141.36 0-256 114.575-256 256 0 141.36 114.576 256 256 256zm0-464c12.985 0 25.689 1.201 38.016 3.478-54.76 31.163-91.693 90.042-91.693 157.554 0 113.848 103.641 199.2 215.252 177.944C402.574 433.964 344.366 464 279.135 464c-114.875 0-208-93.125-208-208s93.125-208 208-208z"/></svg>`);
    this.addSettingTab(new FantasyCalendarSettings(this));
    this.registerView(VIEW_TYPE, (leaf) => new FantasyCalendarView(this, leaf));
    this.app.workspace.onLayoutReady(() => this.addCalendarView(true));
    this.addRibbonIcon(VIEW_TYPE, "Open Large Fantasy Calendar", (evt) => {
      this.app.workspace.getLeaf(evt.getModifierState(MODIFIER_KEY2)).setViewState({ type: FULL_VIEW });
    });
    this.registerView(FULL_VIEW, (leaf) => {
      return new FantasyCalendarView(this, leaf, { full: true });
    });
    this.addCommand({
      id: "open-fantasy-calendar",
      name: "Open Fantasy Calendar",
      callback: () => {
        this.addCalendarView();
      }
    });
    this.addCommand({
      id: "open-big-fantasy-calendar",
      name: "Open Large Fantasy Calendar",
      callback: () => {
        this.addFullCalendarView();
      }
    });
    this.addCommand({
      id: "toggle-moons",
      name: "Toggle Moons",
      checkCallback: (checking) => {
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE);
        if (views && views.length) {
          if (!checking) {
            views[0].view.toggleMoons();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "view-date",
      name: "View Date",
      checkCallback: (checking) => {
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE);
        if (views && views.length) {
          if (!checking) {
            views[0].view.openDate();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "view-date",
      name: "View Note Event",
      checkCallback: (checking) => {
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE);
        if (views && views.length && views[0].view instanceof FantasyCalendarView) {
          const file = this.app.workspace.getActiveFile();
          if (file) {
            const event = views[0].view.calendar.events.find((e) => e.note == file.path);
            if (event) {
              if (!checking) {
                views[0].view.openDay(event.date);
              }
              return true;
            }
          }
        }
      }
    });
  }
  async onunload() {
    console.log("Unloading Fantasy Calendars v" + this.manifest.version);
    this.app.workspace.getLeavesOfType(VIEW_TYPE).forEach((leaf) => leaf.detach());
    this.app.workspace.getLeavesOfType(FULL_VIEW).forEach((leaf) => leaf.detach());
    this.watcher.unload();
  }
  async addCalendarView(startup = false) {
    if (startup && this.app.workspace.getLeavesOfType(VIEW_TYPE)?.length)
      return;
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE
    });
    if (this.view)
      this.app.workspace.revealLeaf(this.view.leaf);
  }
  async addFullCalendarView(startup = false) {
    if (startup && this.app.workspace.getLeavesOfType(FULL_VIEW)?.length)
      return;
    this.app.workspace.getLeaf(false).setViewState({ type: FULL_VIEW });
    if (this.full)
      this.app.workspace.revealLeaf(this.full.leaf);
  }
  async loadSettings() {
    this.data = {
      ...(0, import_fast_copy3.default)(DEFAULT_DATA),
      ...await this.loadData()
    };
    if (this.configDirectory && await this.app.vault.adapter.exists(this.configFilePath)) {
      this.data = Object.assign({}, this.data, JSON.parse(await this.app.vault.adapter.read(this.configFilePath)));
    }
    if (!this.data.defaultCalendar && this.data.calendars.length) {
      this.data.defaultCalendar = this.data.calendars[0].id;
    }
  }
  async saveCalendar() {
    await this.saveSettings();
    this.app.workspace.trigger("fantasy-calendars-updated");
  }
  get configDirectory() {
    if (!this.data || !this.data.configDirectory)
      return;
    return `${this.data.configDirectory}/plugins/fantasy-calendar`;
  }
  get configFilePath() {
    if (!this.data.configDirectory)
      return;
    return `${this.configDirectory}/data.json`;
  }
  async saveSettings() {
    await this.saveData(this.data);
    this.app.workspace.trigger("fantasy-calendar-settings-change");
  }
  async saveData(data) {
    if (this.configDirectory) {
      try {
        if (!await this.app.vault.adapter.exists(this.configDirectory)) {
          await this.app.vault.adapter.mkdir(this.configDirectory);
        }
        await this.app.vault.adapter.write(this.configFilePath, JSON.stringify(data));
      } catch (e) {
        console.error(e);
        new import_obsidian38.Notice("There was an error saving into the configured directory.");
      }
    }
    await super.saveData(data);
  }
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL2Zhc3QtY29weS9zcmMvdXRpbHMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL2Zhc3QtY29weS9zcmMvaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL2Rpc3RpbmN0LWNvbG9ycy9saWIvdXRpbHMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL21vdXQvbGFuZy9raW5kT2YuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL21vdXQvbGFuZy9pc1BsYWluT2JqZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L29iamVjdC9oYXNPd24uanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL21vdXQvb2JqZWN0L2ZvckluLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L29iamVjdC9mb3JPd24uanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL21vdXQvb2JqZWN0L21peEluLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L2xhbmcvY2xvbmUuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL21vdXQvbGFuZy9kZWVwQ2xvbmUuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL21vdXQvbGFuZy9pcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9sYW5nL2lzS2luZC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9sYW5nL2lzT2JqZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L2xhbmcvaXNBcnJheS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9mdW5jdGlvbi9pZGVudGl0eS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9mdW5jdGlvbi9wcm9wLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L29iamVjdC9kZWVwTWF0Y2hlcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9mdW5jdGlvbi9tYWtlSXRlcmF0b3JfLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L29iamVjdC9ldmVyeS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9vYmplY3QvZXF1YWxzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L2FycmF5L2V2ZXJ5LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9tb3V0L2FycmF5L2VxdWFscy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvbW91dC9sYW5nL2RlZXBFcXVhbHMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL2Nocm9tYS1qcy9jaHJvbWEuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL2Rpc3RpbmN0LWNvbG9ycy9saWIvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL2hlL2hlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9tYWluLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9zZXR0aW5ncy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvaW1wb3J0L2ltcG9ydGVyLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy91dGlscy9mdW5jdGlvbnMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3V0aWxzL3ByZXNldHMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9pbnRlcm5hbC9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvQ3JlYXRvci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9lYXNpbmcvaW5kZXgubWpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9zdmVsdGUvdHJhbnNpdGlvbi9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvVXRpbGl0aWVzL0RldGFpbHMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9jcmVhdG9yL1V0aWxpdGllcy9EYXRlRmllbGRzLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvY3JlYXRvci9TZXR0aW5ncy9UZXh0QXJlYUNvbXBvbmVudC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvU2V0dGluZ3MvVGV4dENvbXBvbmVudC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvU2V0dGluZ3MvVG9nZ2xlQ29tcG9uZW50LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvY3JlYXRvci9Db250YWluZXJzL0luZm8uc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9zdmVsdGUvYW5pbWF0ZS9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1kbmQtYWN0aW9uL2Rpc3QvaW5kZXgubWpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9jcmVhdG9yL0NvbnRhaW5lcnMvV2Vla2RheUNvbnRhaW5lci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvVXRpbGl0aWVzL0FkZE5ldy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvVXRpbGl0aWVzL05vRXhpc3RpbmdJdGVtcy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvQ29udGFpbmVycy9Nb250aENvbnRhaW5lci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvQ29udGFpbmVycy9Nb250aEluc3RhbmNlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvY3JlYXRvci9Db250YWluZXJzL1llYXJDb250YWluZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9tb2RhbHMvY29uZmlybS50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvY3JlYXRvci9Db250YWluZXJzL0V2ZW50SW5zdGFuY2Uuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9jcmVhdG9yL1V0aWxpdGllcy9Eb3Quc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9jcmVhdG9yL0NvbnRhaW5lcnMvRXZlbnRDb250YWluZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9jcmVhdG9yL0NvbnRhaW5lcnMvQ2F0ZWdvcnlDb250YWluZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy91dGlscy9jb25zdGFudHMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL2NyZWF0b3IvQ29udGFpbmVycy9Nb29uQ29udGFpbmVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvdmlldy91aS9Nb29uLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvdWkvV2Vla2RheXMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy91aS9EZXRhaWwuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy91aS9Nb250aHMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy91aS9Nb250aC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL3VpL0V2ZW50LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvdWkvRG90LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvdWkvRXZlbnRzLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvdWkvQ2F0ZWdvcmllcy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL3VpL1llYXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9tb2RhbHMvZXZlbnQudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3N1Z2dlc3Rlci9zdWdnZXN0ZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldExheW91dFJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvd2l0aGluLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZXhwYW5kVG9IYXNoTWFwLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0U2Nyb2xsUGFyZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL29mZnNldC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QWx0QXhpcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZVNjcm9sbC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZWJvdW5jZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2Zvcm1hdC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdW5pcXVlQnkuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc3VnZ2VzdGVyL3BhdGgudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL3VpL01vb25zLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvdWkvTGVhcERheS5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3NldHRpbmdzL3VpL0xlYXBEYXlzLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc2V0dGluZ3MvbW9kYWxzL21vb25zLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9zZXR0aW5ncy9tb2RhbHMvbGVhcGRheS50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvc3VnZ2VzdGVyL2ZvbGRlci50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvdmlldy92aWV3LnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy9oZWxwZXIvaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zdG9yZS9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvRGF5Vmlldy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvRmxhZy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvRmxhZ3Muc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy92aWV3L3VpL0RvdC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvRG90cy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvRGF5LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvdmlldy91aS9Nb250aC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvTmF2LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvdmlldy91aS9ZZWFyTmF2LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvdmlldy91aS9ZZWFyVmlldy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3ZpZXcvdWkvWWVhclZpZXdCaWcuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1mYW50YXN5LWNhbGVuZGFyL3NyYy92aWV3L3VpL1llYXJWaWV3Q29udGFpbmVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvdmlldy91aS9DYWxlbmRhci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWZhbnRhc3ktY2FsZW5kYXIvc3JjL3dhdGNoZXIvd2F0Y2hlci50cyIsICJpbmxpbmUtd29ya2VyOl9faW5saW5lLXdvcmtlciIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvd2F0Y2hlci93YXRjaGVyLndvcmtlci50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tZmFudGFzeS1jYWxlbmRhci9zcmMvYXBpL2FwaS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgeyB0b1N0cmluZzogdG9TdHJpbmdGdW5jdGlvbiB9ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuY29uc3Qge1xuICBjcmVhdGUsXG4gIGRlZmluZVByb3BlcnR5LFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIGdldE93blByb3BlcnR5TmFtZXMsXG4gIGdldE93blByb3BlcnR5U3ltYm9scyxcbiAgZ2V0UHJvdG90eXBlT2YsXG59ID0gT2JqZWN0O1xuY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSwgcHJvcGVydHlJc0VudW1lcmFibGUgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQGVudW1cbiAqXG4gKiBAY29uc3Qge09iamVjdH0gU1VQUE9SVFNcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFNZTUJPTF9QUk9QRVJUSUVTIGFyZSBzeW1ib2wgcHJvcGVydGllcyBzdXBwb3J0ZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gV0VBS01BUCBpcyBXZWFrTWFwIHN1cHBvcnRlZFxuICovXG5leHBvcnQgY29uc3QgU1VQUE9SVFMgPSB7XG4gIFNZTUJPTF9QUk9QRVJUSUVTOiB0eXBlb2YgZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nLFxuICBXRUFLTUFQOiB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyxcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGNyZWF0ZUNhY2hlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgYSBuZXcgY2FjaGUgb2JqZWN0IHRvIHByZXZlbnQgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICpcbiAqIEByZXR1cm5zIHRoZSBuZXcgY2FjaGUgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVDYWNoZSA9ICgpOiBGYXN0Q29weS5DYWNoZSA9PiB7XG4gIGlmIChTVVBQT1JUUy5XRUFLTUFQKSB7XG4gICAgcmV0dXJuIG5ldyBXZWFrTWFwKCk7XG4gIH1cblxuICAvLyB0aW55IGltcGxlbWVudGF0aW9uIG9mIFdlYWtNYXBcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKHtcbiAgICBoYXM6IChrZXk6IGFueSkgPT4gISF+b2JqZWN0Ll9rZXlzLmluZGV4T2Yoa2V5KSxcbiAgICBzZXQ6IChrZXk6IGFueSwgdmFsdWU6IGFueSkgPT4ge1xuICAgICAgb2JqZWN0Ll9rZXlzLnB1c2goa2V5KTtcbiAgICAgIG9iamVjdC5fdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH0sXG4gICAgZ2V0OiAoa2V5OiBhbnkpID0+IG9iamVjdC5fdmFsdWVzW29iamVjdC5fa2V5cy5pbmRleE9mKGtleSldLFxuICB9KTtcblxuICBvYmplY3QuX2tleXMgPSBbXTtcbiAgb2JqZWN0Ll92YWx1ZXMgPSBbXTtcblxuICByZXR1cm4gb2JqZWN0O1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gZ2V0Q2xlYW5DbG9uZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogZ2V0IGFuIGVtcHR5IHZlcnNpb24gb2YgdGhlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3RvdHlwZSBpdCBoYXNcbiAqXG4gKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gYnVpbGQgYSBjbGVhbiBjbG9uZSBmcm9tXG4gKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICogQHJldHVybnMgdGhlIGVtcHR5IGNsb25lZCBvYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGdldENsZWFuQ2xvbmUgPSAob2JqZWN0OiBhbnksIHJlYWxtOiBGYXN0Q29weS5SZWFsbSk6IGFueSA9PiB7XG4gIGlmICghb2JqZWN0LmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIGNvbnN0IHsgY29uc3RydWN0b3I6IENvbnN0cnVjdG9yIH0gPSBvYmplY3Q7XG4gIGNvbnN0IHByb3RvdHlwZSA9IG9iamVjdC5fX3Byb3RvX18gfHwgZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcblxuICBpZiAoQ29uc3RydWN0b3IgPT09IHJlYWxtLk9iamVjdCkge1xuICAgIHJldHVybiBwcm90b3R5cGUgPT09IHJlYWxtLk9iamVjdC5wcm90b3R5cGUgPyB7fSA6IGNyZWF0ZShwcm90b3R5cGUpO1xuICB9XG5cbiAgaWYgKH50b1N0cmluZ0Z1bmN0aW9uLmNhbGwoQ29uc3RydWN0b3IpLmluZGV4T2YoJ1tuYXRpdmUgY29kZV0nKSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgfSBjYXRjaCB7fVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZShwcm90b3R5cGUpO1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gZ2V0T2JqZWN0Q2xvbmVMb29zZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogZ2V0IGEgY29weSBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIGxvb3NlIHJ1bGVzLCBtZWFuaW5nIGFsbCBlbnVtZXJhYmxlIGtleXNcbiAqIGFuZCBzeW1ib2xzIGFyZSBjb3BpZWQsIGJ1dCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBhcmUgbm90IGNvbnNpZGVyZWRcbiAqXG4gKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gY2xvbmVcbiAqIEBwYXJhbSByZWFsbSB0aGUgcmVhbG0gdGhlIG9iamVjdCByZXNpZGVzIGluXG4gKiBAcGFyYW0gaGFuZGxlQ29weSB0aGUgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIGNvcHlpbmcgdGhlIG9iamVjdFxuICogQHJldHVybnMgdGhlIGNvcGllZCBvYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE9iamVjdENsb25lTG9vc2U6IEZhc3RDb3B5Lk9iamVjdENsb25lciA9IChcbiAgb2JqZWN0OiBhbnksXG4gIHJlYWxtOiBGYXN0Q29weS5SZWFsbSxcbiAgaGFuZGxlQ29weTogRmFzdENvcHkuQ29waWVyLFxuICBjYWNoZTogRmFzdENvcHkuQ2FjaGUsXG4pOiBhbnkgPT4ge1xuICBjb25zdCBjbG9uZTogYW55ID0gZ2V0Q2xlYW5DbG9uZShvYmplY3QsIHJlYWxtKTtcbiAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuXG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgY2xvbmVba2V5XSA9IGhhbmRsZUNvcHkob2JqZWN0W2tleV0sIGNhY2hlKTtcbiAgICB9XG4gIH1cblxuICBpZiAoU1VQUE9SVFMuU1lNQk9MX1BST1BFUlRJRVMpIHtcbiAgICBjb25zdCBzeW1ib2xzOiBzeW1ib2xbXSA9IGdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHN5bWJvbHM7XG5cbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDAsIHN5bWJvbDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3ltYm9sID0gc3ltYm9sc1tpbmRleF07XG5cbiAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpKSB7XG4gICAgICAgICAgY2xvbmVbc3ltYm9sXSA9IGhhbmRsZUNvcHkob2JqZWN0W3N5bWJvbF0sIGNhY2hlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGdldE9iamVjdENsb25lU3RyaWN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgYSBjb3B5IG9mIHRoZSBvYmplY3QgYmFzZWQgb24gc3RyaWN0IHJ1bGVzLCBtZWFuaW5nIGFsbCBrZXlzIGFuZCBzeW1ib2xzXG4gKiBhcmUgY29waWVkIGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZXNjcmlwdG9yc1xuICpcbiAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBjbG9uZVxuICogQHBhcmFtIHJlYWxtIHRoZSByZWFsbSB0aGUgb2JqZWN0IHJlc2lkZXMgaW5cbiAqIEBwYXJhbSBoYW5kbGVDb3B5IHRoZSBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgY29weWluZyB0aGUgb2JqZWN0XG4gKiBAcmV0dXJucyB0aGUgY29waWVkIG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgZ2V0T2JqZWN0Q2xvbmVTdHJpY3Q6IEZhc3RDb3B5Lk9iamVjdENsb25lciA9IChcbiAgb2JqZWN0OiBhbnksXG4gIHJlYWxtOiBGYXN0Q29weS5SZWFsbSxcbiAgaGFuZGxlQ29weTogRmFzdENvcHkuQ29waWVyLFxuICBjYWNoZTogRmFzdENvcHkuQ2FjaGUsXG4pOiBhbnkgPT4ge1xuICBjb25zdCBjbG9uZTogYW55ID0gZ2V0Q2xlYW5DbG9uZShvYmplY3QsIHJlYWxtKTtcbiAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuXG4gIGNvbnN0IHByb3BlcnRpZXM6IChzdHJpbmcgfCBzeW1ib2wpW10gPSBTVVBQT1JUUy5TWU1CT0xfUFJPUEVSVElFU1xuICAgID8gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpLmNvbmNhdCgoZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkgYXMgdW5rbm93bikgYXMgc3RyaW5nW10pXG4gICAgOiBnZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgY29uc3QgeyBsZW5ndGggfSA9IHByb3BlcnRpZXM7XG5cbiAgaWYgKGxlbmd0aCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gMCwgcHJvcGVydHksIGRlc2NyaXB0b3I7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaW5kZXhdO1xuXG4gICAgICBpZiAocHJvcGVydHkgIT09ICdjYWxsZWUnICYmIHByb3BlcnR5ICE9PSAnY2FsbGVyJykge1xuICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgLy8gT25seSBjbG9uZSB0aGUgdmFsdWUgaWYgYWN0dWFsbHkgYSB2YWx1ZSwgbm90IGEgZ2V0dGVyIC8gc2V0dGVyLlxuICAgICAgICAgIGlmICghZGVzY3JpcHRvci5nZXQgJiYgIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gaGFuZGxlQ29weShvYmplY3RbcHJvcGVydHldLCBjYWNoZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KGNsb25lLCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFRlZSBhYm92ZSBjYW4gZmFpbCBvbiBub2RlIGluIGVkZ2UgY2FzZXMsIHNvIGZhbGwgYmFjayB0byB0aGUgbG9vc2UgYXNzaWdubWVudC5cbiAgICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEluIGV4dHJhIGVkZ2UgY2FzZXMgd2hlcmUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgY2Fubm90IGJlIHJldHJpdmVkLCBmYWxsIGJhY2sgdG9cbiAgICAgICAgICAvLyB0aGUgbG9vc2UgYXNzaWdubWVudC5cbiAgICAgICAgICBjbG9uZVtwcm9wZXJ0eV0gPSBoYW5kbGVDb3B5KG9iamVjdFtwcm9wZXJ0eV0sIGNhY2hlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGdldFJlZ0V4cEZsYWdzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgdGhlIGZsYWdzIHRvIGFwcGx5IHRvIHRoZSBjb3BpZWQgcmVnZXhwXG4gKlxuICogQHBhcmFtIHJlZ0V4cCB0aGUgcmVnZXhwIHRvIGdldCB0aGUgZmxhZ3Mgb2ZcbiAqIEByZXR1cm5zIHRoZSBmbGFncyBmb3IgdGhlIHJlZ2V4cFxuICovXG5leHBvcnQgY29uc3QgZ2V0UmVnRXhwRmxhZ3MgPSAocmVnRXhwOiBSZWdFeHApOiBzdHJpbmcgPT4ge1xuICBsZXQgZmxhZ3MgPSAnJztcblxuICBpZiAocmVnRXhwLmdsb2JhbCkge1xuICAgIGZsYWdzICs9ICdnJztcbiAgfVxuXG4gIGlmIChyZWdFeHAuaWdub3JlQ2FzZSkge1xuICAgIGZsYWdzICs9ICdpJztcbiAgfVxuXG4gIGlmIChyZWdFeHAubXVsdGlsaW5lKSB7XG4gICAgZmxhZ3MgKz0gJ20nO1xuICB9XG5cbiAgaWYgKHJlZ0V4cC51bmljb2RlKSB7XG4gICAgZmxhZ3MgKz0gJ3UnO1xuICB9XG5cbiAgaWYgKHJlZ0V4cC5zdGlja3kpIHtcbiAgICBmbGFncyArPSAneSc7XG4gIH1cblxuICByZXR1cm4gZmxhZ3M7XG59O1xuIiwgIi8vIHV0aWxzXG5pbXBvcnQgeyBjcmVhdGVDYWNoZSwgZ2V0T2JqZWN0Q2xvbmVMb29zZSwgZ2V0T2JqZWN0Q2xvbmVTdHJpY3QsIGdldFJlZ0V4cEZsYWdzIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IHsgaXNBcnJheSB9ID0gQXJyYXk7XG5cbmNvbnN0IEdMT0JBTF9USElTID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cblxuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0LCByZXR1cm5pbmcgXCJ0aGlzXCIuJyk7XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uIGNvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGNvcHkgYW4gb2JqZWN0IGRlZXBseSBhcyBtdWNoIGFzIHBvc3NpYmxlXG4gKlxuICogSWYgYHN0cmljdGAgaXMgYXBwbGllZCwgdGhlbiBhbGwgcHJvcGVydGllcyAoaW5jbHVkaW5nIG5vbi1lbnVtZXJhYmxlIG9uZXMpXG4gKiBhcmUgY29waWVkIHdpdGggdGhlaXIgb3JpZ2luYWwgcHJvcGVydHkgZGVzY3JpcHRvcnMgb24gYm90aCBvYmplY3RzIGFuZCBhcnJheXMuXG4gKlxuICogVGhlIG9iamVjdCBpcyBjb21wYXJlZCB0byB0aGUgZ2xvYmFsIGNvbnN0cnVjdG9ycyBpbiB0aGUgYHJlYWxtYCBwcm92aWRlZCxcbiAqIGFuZCB0aGUgbmF0aXZlIGNvbnN0cnVjdG9yIGlzIGFsd2F5cyB1c2VkIHRvIGVuc3VyZSB0aGF0IGV4dGVuc2lvbnMgb2YgbmF0aXZlXG4gKiBvYmplY3RzIChhbGxvd3MgaW4gRVMyMDE1KykgYXJlIG1haW50YWluZWQuXG4gKlxuICogQHBhcmFtIG9iamVjdCB0aGUgb2JqZWN0IHRvIGNvcHlcbiAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgZm9yIGNvcHlpbmcgd2l0aFxuICogQHBhcmFtIFtvcHRpb25zLmlzU3RyaWN0XSBzaG91bGQgdGhlIGNvcHkgYmUgc3RyaWN0XG4gKiBAcGFyYW0gW29wdGlvbnMucmVhbG1dIHRoZSByZWFsbSAodGhpcykgb2JqZWN0IHRoZSBvYmplY3QgaXMgY29waWVkIGZyb21cbiAqIEByZXR1cm5zIHRoZSBjb3BpZWQgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNvcHk8VD4ob2JqZWN0OiBULCBvcHRpb25zPzogRmFzdENvcHkuT3B0aW9ucyk6IFQge1xuICAvLyBtYW51YWxseSBjb2FsZXNjZWQgaW5zdGVhZCBvZiBkZWZhdWx0IHBhcmFtZXRlcnMgZm9yIHBlcmZvcm1hbmNlXG4gIGNvbnN0IGlzU3RyaWN0OiBib29sZWFuID0gISEob3B0aW9ucyAmJiBvcHRpb25zLmlzU3RyaWN0KTtcbiAgY29uc3QgcmVhbG06IEZhc3RDb3B5LlJlYWxtID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFsbSkgfHwgR0xPQkFMX1RISVM7XG5cbiAgY29uc3QgZ2V0T2JqZWN0Q2xvbmU6IEZhc3RDb3B5Lk9iamVjdENsb25lciA9IGlzU3RyaWN0XG4gICAgPyBnZXRPYmplY3RDbG9uZVN0cmljdFxuICAgIDogZ2V0T2JqZWN0Q2xvbmVMb29zZTtcblxuICAvKipcbiAgICogQGZ1bmN0aW9uIGhhbmRsZUNvcHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIGNvcHkgdGhlIG9iamVjdCByZWN1cnNpdmVseSBiYXNlZCBvbiBpdHMgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gY29weVxuICAgKiBAcmV0dXJucyB0aGUgY29waWVkIG9iamVjdFxuICAgKi9cbiAgY29uc3QgaGFuZGxlQ29weTogRmFzdENvcHkuQ29waWVyID0gKG9iamVjdDogYW55LCBjYWNoZTogRmFzdENvcHkuQ2FjaGUpOiBhbnkgPT4ge1xuICAgIGlmICghb2JqZWN0IHx8IHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0gaWYgKGNhY2hlLmhhcyhvYmplY3QpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjb25zdHJ1Y3RvcjogQ29uc3RydWN0b3IgfSA9IG9iamVjdDtcblxuICAgIC8vIHBsYWluIG9iamVjdHNcbiAgICBpZiAoQ29uc3RydWN0b3IgPT09IHJlYWxtLk9iamVjdCkge1xuICAgICAgcmV0dXJuIGdldE9iamVjdENsb25lKG9iamVjdCwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICB9XG5cbiAgICBsZXQgY2xvbmU6IGFueTtcbiAgICAvLyBhcnJheXNcbiAgICBpZiAoaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAvLyBpZiBzdHJpY3QsIGluY2x1ZGUgbm9uLXN0YW5kYXJkIHByb3BlcnRpZXNcbiAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICByZXR1cm4gZ2V0T2JqZWN0Q2xvbmVTdHJpY3Qob2JqZWN0LCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGxlbmd0aCB9ID0gb2JqZWN0O1xuXG4gICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuXG4gICAgICBmb3IgKGxldCBpbmRleDogbnVtYmVyID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY2xvbmVbaW5kZXhdID0gaGFuZGxlQ29weShvYmplY3RbaW5kZXhdLCBjYWNoZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBkYXRlc1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiByZWFsbS5EYXRlKSB7XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKG9iamVjdC5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIC8vIHJlZ2V4cHNcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgcmVhbG0uUmVnRXhwKSB7XG4gICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3RvcihvYmplY3Quc291cmNlLCBvYmplY3QuZmxhZ3MgfHwgZ2V0UmVnRXhwRmxhZ3Mob2JqZWN0KSk7XG5cbiAgICAgIGNsb25lLmxhc3RJbmRleCA9IG9iamVjdC5sYXN0SW5kZXg7XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBtYXBzXG4gICAgaWYgKHJlYWxtLk1hcCAmJiBvYmplY3QgaW5zdGFuY2VvZiByZWFsbS5NYXApIHtcbiAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBjYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG5cbiAgICAgIG9iamVjdC5mb3JFYWNoKCh2YWx1ZTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBjbG9uZS5zZXQoa2V5LCBoYW5kbGVDb3B5KHZhbHVlLCBjYWNoZSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBzZXRzXG4gICAgaWYgKHJlYWxtLlNldCAmJiBvYmplY3QgaW5zdGFuY2VvZiByZWFsbS5TZXQpIHtcbiAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBjYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG5cbiAgICAgIG9iamVjdC5mb3JFYWNoKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGNsb25lLmFkZChoYW5kbGVDb3B5KHZhbHVlLCBjYWNoZSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBibG9ic1xuICAgIGlmIChyZWFsbS5CbG9iICYmIG9iamVjdCBpbnN0YW5jZW9mIHJlYWxtLkJsb2IpIHtcbiAgICAgIHJldHVybiBvYmplY3Quc2xpY2UoMCwgb2JqZWN0LnNpemUsIG9iamVjdC50eXBlKTtcbiAgICB9XG5cbiAgICAvLyBidWZmZXJzIChub2RlLW9ubHkpXG4gICAgaWYgKHJlYWxtLkJ1ZmZlciAmJiByZWFsbS5CdWZmZXIuaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgY2xvbmUgPSByZWFsbS5CdWZmZXIuYWxsb2NVbnNhZmVcbiAgICAgICAgPyByZWFsbS5CdWZmZXIuYWxsb2NVbnNhZmUob2JqZWN0Lmxlbmd0aClcbiAgICAgICAgOiBuZXcgQ29uc3RydWN0b3Iob2JqZWN0Lmxlbmd0aCk7XG5cbiAgICAgIGNhY2hlLnNldChvYmplY3QsIGNsb25lKTtcbiAgICAgIG9iamVjdC5jb3B5KGNsb25lKTtcblxuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuICAgIC8vIGFycmF5YnVmZmVycyAvIGRhdGF2aWV3c1xuICAgIGlmIChyZWFsbS5BcnJheUJ1ZmZlcikge1xuICAgICAgLy8gZGF0YXZpZXdzXG4gICAgICBpZiAocmVhbG0uQXJyYXlCdWZmZXIuaXNWaWV3KG9iamVjdCkpIHtcbiAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3Iob2JqZWN0LmJ1ZmZlci5zbGljZSgwKSk7XG4gICAgICAgIGNhY2hlLnNldChvYmplY3QsIGNsb25lKTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgfVxuXG4gICAgICAvLyBhcnJheWJ1ZmZlcnNcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiByZWFsbS5BcnJheUJ1ZmZlcikge1xuICAgICAgICBjbG9uZSA9IG9iamVjdC5zbGljZSgwKTtcbiAgICAgICAgY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIG9iamVjdCBjYW5ub3QgLyBzaG91bGQgbm90IGJlIGNsb25lZCwgZG9uJ3RcbiAgICBpZiAoXG4gICAgICAvLyBwcm9taXNlLWxpa2VcbiAgICAgIHR5cGVvZiBvYmplY3QudGhlbiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgLy8gZXJyb3JzXG4gICAgICBvYmplY3QgaW5zdGFuY2VvZiBFcnJvciB8fFxuICAgICAgLy8gd2Vha21hcHNcbiAgICAgIChyZWFsbS5XZWFrTWFwICYmIG9iamVjdCBpbnN0YW5jZW9mIHJlYWxtLldlYWtNYXApIHx8XG4gICAgICAvLyB3ZWFrc2V0c1xuICAgICAgKHJlYWxtLldlYWtTZXQgJiYgb2JqZWN0IGluc3RhbmNlb2YgcmVhbG0uV2Vha1NldClcbiAgICApIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gYXNzdW1lIGFueXRoaW5nIGxlZnQgaXMgYSBjdXN0b20gY29uc3RydWN0b3JcbiAgICByZXR1cm4gZ2V0T2JqZWN0Q2xvbmUob2JqZWN0LCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpO1xuICB9O1xuXG4gIHJldHVybiBoYW5kbGVDb3B5KG9iamVjdCwgY3JlYXRlQ2FjaGUoKSk7XG59XG5cbi8vIEFkZGluZyByZWZlcmVuY2UgdG8gYWxsb3cgdXNhZ2UgaW4gQ29tbW9uSlMgbGlicmFyaWVzIGNvbXBpbGVkIHVzaW5nIFRTQywgd2hpY2hcbi8vIGV4cGVjdHMgdGhlcmUgdG8gYmUgYSBkZWZhdWx0IHByb3BlcnR5IG9uIHRoZSBleHBvcnRlZCBvYmplY3QuIFNlZVxuLy8gWyMzN10oaHR0cHM6Ly9naXRodWIuY29tL3BsYW50dGhlaWRlYS9mYXN0LWNvcHkvaXNzdWVzLzM3KSBmb3IgZGV0YWlscy5cbmNvcHkuZGVmYXVsdCA9IGNvcHk7XG5cbi8qKlxuICogQGZ1bmN0aW9uIHN0cmljdENvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGNvcHkgdGhlIG9iamVjdCB3aXRoIGBzdHJpY3RgIG9wdGlvbiBwcmUtYXBwbGllZFxuICpcbiAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBjb3B5XG4gKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGZvciBjb3B5aW5nIHdpdGhcbiAqIEBwYXJhbSBbb3B0aW9ucy5yZWFsbV0gdGhlIHJlYWxtICh0aGlzKSBvYmplY3QgdGhlIG9iamVjdCBpcyBjb3BpZWQgZnJvbVxuICogQHJldHVybnMgdGhlIGNvcGllZCBvYmplY3RcbiAqL1xuY29weS5zdHJpY3QgPSBmdW5jdGlvbiBzdHJpY3RDb3B5KG9iamVjdDogYW55LCBvcHRpb25zPzogRmFzdENvcHkuT3B0aW9ucykge1xuICByZXR1cm4gY29weShvYmplY3QsIHtcbiAgICBpc1N0cmljdDogdHJ1ZSxcbiAgICByZWFsbTogb3B0aW9ucyA/IG9wdGlvbnMucmVhbG0gOiB2b2lkIDAsXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29weTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIHV0aWxzID0ge1xuICBzdW06IGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhICsgYjtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHV0aWxzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCAiXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgXCJraW5kXCIgb2YgdmFsdWUuIChlLmcuIFwiU3RyaW5nXCIsIFwiTnVtYmVyXCIsIGV0YylcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0ga2luZE9mO1xuXG4iLCAiXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHZhbHVlIGlzIGNyZWF0ZWQgYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICghIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcblxuXG4iLCAiXG5cbiAgICAvKipcbiAgICAgKiBTYWZlciBPYmplY3QuaGFzT3duUHJvcGVydHlcbiAgICAgKi9cbiAgICAgZnVuY3Rpb24gaGFzT3duKG9iaiwgcHJvcCl7XG4gICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG4gICAgIH1cblxuICAgICBtb2R1bGUuZXhwb3J0cyA9IGhhc093bjtcblxuXG4iLCAidmFyIGhhc093biA9IHJlcXVpcmUoJy4vaGFzT3duJyk7XG5cbiAgICB2YXIgX2hhc0RvbnRFbnVtQnVnLFxuICAgICAgICBfZG9udEVudW1zO1xuXG4gICAgZnVuY3Rpb24gY2hlY2tEb250RW51bSgpe1xuICAgICAgICBfZG9udEVudW1zID0gW1xuICAgICAgICAgICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICAgICAgICAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAndmFsdWVPZicsXG4gICAgICAgICAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAgICAgICAgICAgICAnY29uc3RydWN0b3InXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgIF9oYXNEb250RW51bUJ1ZyA9IHRydWU7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHsndG9TdHJpbmcnOiBudWxsfSkge1xuICAgICAgICAgICAgX2hhc0RvbnRFbnVtQnVnID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaW1pbGFyIHRvIEFycmF5L2ZvckVhY2ggYnV0IHdvcmtzIG92ZXIgb2JqZWN0IHByb3BlcnRpZXMgYW5kIGZpeGVzIERvbid0XG4gICAgICogRW51bSBidWcgb24gSUUuXG4gICAgICogYmFzZWQgb246IGh0dHA6Ly93aGF0dGhlaGVhZHNhaWQuY29tLzIwMTAvMTAvYS1zYWZlci1vYmplY3Qta2V5cy1jb21wYXRpYmlsaXR5LWltcGxlbWVudGF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqLCBmbiwgdGhpc09iail7XG4gICAgICAgIHZhciBrZXksIGkgPSAwO1xuICAgICAgICAvLyBubyBuZWVkIHRvIGNoZWNrIGlmIGFyZ3VtZW50IGlzIGEgcmVhbCBvYmplY3QgdGhhdCB3YXkgd2UgY2FuIHVzZVxuICAgICAgICAvLyBpdCBmb3IgYXJyYXlzLCBmdW5jdGlvbnMsIGRhdGUsIGV0Yy5cblxuICAgICAgICAvL3Bvc3QtcG9uZSBjaGVjayB0aWxsIG5lZWRlZFxuICAgICAgICBpZiAoX2hhc0RvbnRFbnVtQnVnID09IG51bGwpIGNoZWNrRG9udEVudW0oKTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChleGVjKGZuLCBvYmosIGtleSwgdGhpc09iaikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChfaGFzRG9udEVudW1CdWcpIHtcbiAgICAgICAgICAgIHZhciBjdG9yID0gb2JqLmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgICAgIGlzUHJvdG8gPSAhIWN0b3IgJiYgb2JqID09PSBjdG9yLnByb3RvdHlwZTtcblxuICAgICAgICAgICAgd2hpbGUgKGtleSA9IF9kb250RW51bXNbaSsrXSkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBjb25zdHJ1Y3RvciwgaWYgaXQgaXMgYSBwcm90b3R5cGUgb2JqZWN0IHRoZSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIC8vIGlzIGFsd2F5cyBub24tZW51bWVyYWJsZSB1bmxlc3MgZGVmaW5lZCBvdGhlcndpc2UgKGFuZFxuICAgICAgICAgICAgICAgIC8vIGVudW1lcmF0ZWQgYWJvdmUpLiAgRm9yIG5vbi1wcm90b3R5cGUgb2JqZWN0cywgaXQgd2lsbCBoYXZlXG4gICAgICAgICAgICAgICAgLy8gdG8gYmUgZGVmaW5lZCBvbiB0aGlzIG9iamVjdCwgc2luY2UgaXQgY2Fubm90IGJlIGRlZmluZWQgb25cbiAgICAgICAgICAgICAgICAvLyBhbnkgcHJvdG90eXBlIG9iamVjdHMuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBGb3Igb3RoZXIgW1tEb250RW51bV1dIHByb3BlcnRpZXMsIGNoZWNrIGlmIHRoZSB2YWx1ZSBpc1xuICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVudCB0aGFuIE9iamVjdCBwcm90b3R5cGUgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoa2V5ICE9PSAnY29uc3RydWN0b3InIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoIWlzUHJvdG8gJiYgaGFzT3duKG9iaiwga2V5KSkpICYmXG4gICAgICAgICAgICAgICAgICAgIG9ialtrZXldICE9PSBPYmplY3QucHJvdG90eXBlW2tleV1cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4ZWMoZm4sIG9iaiwga2V5LCB0aGlzT2JqKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlYyhmbiwgb2JqLCBrZXksIHRoaXNPYmope1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzT2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gZm9ySW47XG5cblxuIiwgInZhciBoYXNPd24gPSByZXF1aXJlKCcuL2hhc093bicpO1xudmFyIGZvckluID0gcmVxdWlyZSgnLi9mb3JJbicpO1xuXG4gICAgLyoqXG4gICAgICogU2ltaWxhciB0byBBcnJheS9mb3JFYWNoIGJ1dCB3b3JrcyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzIGFuZCBmaXhlcyBEb24ndFxuICAgICAqIEVudW0gYnVnIG9uIElFLlxuICAgICAqIGJhc2VkIG9uOiBodHRwOi8vd2hhdHRoZWhlYWRzYWlkLmNvbS8yMDEwLzEwL2Etc2FmZXItb2JqZWN0LWtleXMtY29tcGF0aWJpbGl0eS1pbXBsZW1lbnRhdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmosIGZuLCB0aGlzT2JqKXtcbiAgICAgICAgZm9ySW4ob2JqLCBmdW5jdGlvbih2YWwsIGtleSl7XG4gICAgICAgICAgICBpZiAoaGFzT3duKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXNPYmosIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gZm9yT3duO1xuXG5cbiIsICJ2YXIgZm9yT3duID0gcmVxdWlyZSgnLi9mb3JPd24nKTtcblxuICAgIC8qKlxuICAgICogQ29tYmluZSBwcm9wZXJ0aWVzIGZyb20gYWxsIHRoZSBvYmplY3RzIGludG8gZmlyc3Qgb25lLlxuICAgICogLSBUaGlzIG1ldGhvZCBhZmZlY3RzIHRhcmdldCBvYmplY3QgaW4gcGxhY2UsIGlmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBPYmplY3QgcGFzcyBhbiBlbXB0eSBvYmplY3QgYXMgZmlyc3QgcGFyYW0uXG4gICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0ICAgIFRhcmdldCBPYmplY3RcbiAgICAqIEBwYXJhbSB7Li4ub2JqZWN0fSBvYmplY3RzICAgIE9iamVjdHMgdG8gYmUgY29tYmluZWQgKDAuLi5uIG9iamVjdHMpLlxuICAgICogQHJldHVybiB7b2JqZWN0fSBUYXJnZXQgT2JqZWN0LlxuICAgICovXG4gICAgZnVuY3Rpb24gbWl4SW4odGFyZ2V0LCBvYmplY3RzKXtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBvYmo7XG4gICAgICAgIHdoaWxlKCsraSA8IG4pe1xuICAgICAgICAgICAgb2JqID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yT3duKG9iaiwgY29weVByb3AsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3B5UHJvcCh2YWwsIGtleSl7XG4gICAgICAgIHRoaXNba2V5XSA9IHZhbDtcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IG1peEluO1xuXG4iLCAidmFyIGtpbmRPZiA9IHJlcXVpcmUoJy4va2luZE9mJyk7XG52YXIgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNQbGFpbk9iamVjdCcpO1xudmFyIG1peEluID0gcmVxdWlyZSgnLi4vb2JqZWN0L21peEluJyk7XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSBuYXRpdmUgdHlwZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsKXtcbiAgICAgICAgc3dpdGNoIChraW5kT2YodmFsKSkge1xuICAgICAgICAgICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVPYmplY3QodmFsKTtcbiAgICAgICAgICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheSh2YWwpO1xuICAgICAgICAgICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAodmFsKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZURhdGUodmFsKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lT2JqZWN0KHNvdXJjZSkge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWl4SW4oe30sIHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocikge1xuICAgICAgICB2YXIgZmxhZ3MgPSAnJztcbiAgICAgICAgZmxhZ3MgKz0gci5tdWx0aWxpbmUgPyAnbScgOiAnJztcbiAgICAgICAgZmxhZ3MgKz0gci5nbG9iYWwgPyAnZycgOiAnJztcbiAgICAgICAgZmxhZ3MgKz0gci5pZ25vcmVDYXNlID8gJ2knIDogJyc7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHIuc291cmNlLCBmbGFncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRlKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCtkYXRlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5KGFycikge1xuICAgICAgICByZXR1cm4gYXJyLnNsaWNlKCk7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcblxuXG4iLCAidmFyIGNsb25lID0gcmVxdWlyZSgnLi9jbG9uZScpO1xudmFyIGZvck93biA9IHJlcXVpcmUoJy4uL29iamVjdC9mb3JPd24nKTtcbnZhciBraW5kT2YgPSByZXF1aXJlKCcuL2tpbmRPZicpO1xudmFyIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKTtcblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGNsb25lIG5hdGl2ZSB0eXBlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWVwQ2xvbmUodmFsLCBpbnN0YW5jZUNsb25lKSB7XG4gICAgICAgIHN3aXRjaCAoIGtpbmRPZih2YWwpICkge1xuICAgICAgICAgICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVPYmplY3QodmFsLCBpbnN0YW5jZUNsb25lKTtcbiAgICAgICAgICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheSh2YWwsIGluc3RhbmNlQ2xvbmUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmUodmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lT2JqZWN0KHNvdXJjZSwgaW5zdGFuY2VDbG9uZSkge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0ge307XG4gICAgICAgICAgICBmb3JPd24oc291cmNlLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IGRlZXBDbG9uZSh2YWwsIGluc3RhbmNlQ2xvbmUpO1xuICAgICAgICAgICAgfSwgb3V0KTtcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2VDbG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlQ2xvbmUoc291cmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5KGFyciwgaW5zdGFuY2VDbG9uZSkge1xuICAgICAgICB2YXIgb3V0ID0gW10sXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBuID0gYXJyLmxlbmd0aCxcbiAgICAgICAgICAgIHZhbDtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGRlZXBDbG9uZShhcnJbaV0sIGluc3RhbmNlQ2xvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBkZWVwQ2xvbmU7XG5cblxuXG4iLCAiXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBib3RoIGFyZ3VtZW50cyBhcmUgZWdhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh4LCB5KXtcbiAgICAgICAgLy8gaW1wbGVtZW50YXRpb24gYm9ycm93ZWQgZnJvbSBoYXJtb255OmVnYWwgc3BlY1xuICAgICAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAgIC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbFxuICAgICAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5hTiAhPT0gTmFOLCBidXQgdGhleSBhcmUgaWRlbnRpY2FsLlxuICAgICAgICAvLyBOYU5zIGFyZSB0aGUgb25seSBub24tcmVmbGV4aXZlIHZhbHVlLCBpLmUuLCBpZiB4ICE9PSB4LFxuICAgICAgICAvLyB0aGVuIHggaXMgYSBOYU4uXG4gICAgICAgIC8vIGlzTmFOIGlzIGJyb2tlbjogaXQgY29udmVydHMgaXRzIGFyZ3VtZW50IHRvIG51bWJlciwgc29cbiAgICAgICAgLy8gaXNOYU4oXCJmb29cIikgPT4gdHJ1ZVxuICAgICAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gaXM7XG5cblxuIiwgInZhciBraW5kT2YgPSByZXF1aXJlKCcuL2tpbmRPZicpO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHZhbHVlIGlzIGZyb20gYSBzcGVjaWZpYyBcImtpbmRcIi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tpbmQodmFsLCBraW5kKXtcbiAgICAgICAgcmV0dXJuIGtpbmRPZih2YWwpID09PSBraW5kO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGlzS2luZDtcblxuIiwgInZhciBpc0tpbmQgPSByZXF1aXJlKCcuL2lzS2luZCcpO1xuICAgIC8qKlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICAgICAgICByZXR1cm4gaXNLaW5kKHZhbCwgJ09iamVjdCcpO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuXG4iLCAidmFyIGlzS2luZCA9IHJlcXVpcmUoJy4vaXNLaW5kJyk7XG4gICAgLyoqXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIGlzS2luZCh2YWwsICdBcnJheScpO1xuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuXG4iLCAiXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBwcm92aWRlZCB0byBpdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWwpe1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG5cblxuIiwgIlxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyBhIHByb3BlcnR5IG9mIHRoZSBwYXNzZWQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcChuYW1lKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iail7XG4gICAgICAgICAgICByZXR1cm4gb2JqW25hbWVdO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gcHJvcDtcblxuXG4iLCAidmFyIGZvck93biA9IHJlcXVpcmUoJy4vZm9yT3duJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2xhbmcvaXNBcnJheScpO1xuXG4gICAgZnVuY3Rpb24gY29udGFpbnNNYXRjaChhcnJheSwgcGF0dGVybikge1xuICAgICAgICB2YXIgaSA9IC0xLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChkZWVwTWF0Y2hlcyhhcnJheVtpXSwgcGF0dGVybikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEFycmF5KHRhcmdldCwgcGF0dGVybikge1xuICAgICAgICB2YXIgaSA9IC0xLCBwYXR0ZXJuTGVuZ3RoID0gcGF0dGVybi5sZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2kgPCBwYXR0ZXJuTGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5zTWF0Y2godGFyZ2V0LCBwYXR0ZXJuW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoT2JqZWN0KHRhcmdldCwgcGF0dGVybikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgZm9yT3duKHBhdHRlcm4sIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICAgICAgICBpZiAoIWRlZXBNYXRjaGVzKHRhcmdldFtrZXldLCB2YWwpKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGZhbHNlIHRvIGJyZWFrIG91dCBvZiBmb3JPd24gZWFybHlcbiAgICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBjaGVjayBpZiB0aGUgb2JqZWN0cyBtYXRjaC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWVwTWF0Y2hlcyh0YXJnZXQsIHBhdHRlcm4pe1xuICAgICAgICBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBwYXR0ZXJuICYmIHR5cGVvZiBwYXR0ZXJuID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoQXJyYXkodGFyZ2V0LCBwYXR0ZXJuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoT2JqZWN0KHRhcmdldCwgcGF0dGVybik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0ID09PSBwYXR0ZXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBkZWVwTWF0Y2hlcztcblxuXG4iLCAidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xudmFyIHByb3AgPSByZXF1aXJlKCcuL3Byb3AnKTtcbnZhciBkZWVwTWF0Y2hlcyA9IHJlcXVpcmUoJy4uL29iamVjdC9kZWVwTWF0Y2hlcycpO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYXJndW1lbnQgaW50byBhIHZhbGlkIGl0ZXJhdG9yLlxuICAgICAqIFVzZWQgaW50ZXJuYWxseSBvbiBtb3N0IGFycmF5L29iamVjdC9jb2xsZWN0aW9uIG1ldGhvZHMgdGhhdCByZWNlaXZlcyBhXG4gICAgICogY2FsbGJhY2svaXRlcmF0b3IgcHJvdmlkaW5nIGEgc2hvcnRjdXQgc3ludGF4LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VJdGVyYXRvcihzcmMsIHRoaXNPYmope1xuICAgICAgICBpZiAoc3JjID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2godHlwZW9mIHNyYykge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGlzIHRoZSBmaXJzdCB0byBpbXByb3ZlIHBlcmYgKG1vc3QgY29tbW9uIGNhc2UpXG4gICAgICAgICAgICAgICAgLy8gYWxzbyBhdm9pZCB1c2luZyBgRnVuY3Rpb24jY2FsbGAgaWYgbm90IG5lZWRlZCwgd2hpY2ggYm9vc3RzXG4gICAgICAgICAgICAgICAgLy8gcGVyZiBhIGxvdCBpbiBzb21lIGNhc2VzXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgdGhpc09iaiAhPT0gJ3VuZGVmaW5lZCcpPyBmdW5jdGlvbih2YWwsIGksIGFycil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzcmMuY2FsbCh0aGlzT2JqLCB2YWwsIGksIGFycik7XG4gICAgICAgICAgICAgICAgfSA6IHNyYztcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWVwTWF0Y2hlcyh2YWwsIHNyYyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wKHNyYyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IG1ha2VJdGVyYXRvcjtcblxuXG4iLCAidmFyIGZvck93biA9IHJlcXVpcmUoJy4vZm9yT3duJyk7XG52YXIgbWFrZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vZnVuY3Rpb24vbWFrZUl0ZXJhdG9yXycpO1xuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IGV2ZXJ5XG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkob2JqLCBjYWxsYmFjaywgdGhpc09iaikge1xuICAgICAgICBjYWxsYmFjayA9IG1ha2VJdGVyYXRvcihjYWxsYmFjaywgdGhpc09iaik7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgICBmb3JPd24ob2JqLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgICAgICAgLy8gd2UgY29uc2lkZXIgYW55IGZhbHN5IHZhbHVlcyBhcyBcImZhbHNlXCIgb24gcHVycG9zZSBzbyBzaG9ydGhhbmRcbiAgICAgICAgICAgIC8vIHN5bnRheCBjYW4gYmUgdXNlZCB0byBjaGVjayBwcm9wZXJ0eSBleGlzdGVuY2VcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2sodmFsLCBrZXksIG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gZXZlcnk7XG5cblxuIiwgInZhciBoYXNPd24gPSByZXF1aXJlKCcuL2hhc093bicpO1xudmFyIGV2ZXJ5ID0gcmVxdWlyZSgnLi9ldmVyeScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vbGFuZy9pc09iamVjdCcpO1xudmFyIGlzID0gcmVxdWlyZSgnLi4vbGFuZy9pcycpO1xuXG4gICAgLy8gTWFrZXMgYSBmdW5jdGlvbiB0byBjb21wYXJlIHRoZSBvYmplY3QgdmFsdWVzIGZyb20gdGhlIHNwZWNpZmllZCBjb21wYXJlXG4gICAgLy8gb3BlcmF0aW9uIGNhbGxiYWNrLlxuICAgIGZ1bmN0aW9uIG1ha2VDb21wYXJlKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzT3duKHRoaXMsIGtleSkgJiYgY2FsbGJhY2sodmFsdWUsIHRoaXNba2V5XSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tQcm9wZXJ0aWVzKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGhhc093bih0aGlzLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0d28gb2JqZWN0cyBoYXZlIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbHMoYSwgYiwgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBpcztcblxuICAgICAgICBpZiAoIWlzT2JqZWN0KGEpIHx8ICFpc09iamVjdChiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGEsIGIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChldmVyeShhLCBtYWtlQ29tcGFyZShjYWxsYmFjayksIGIpICYmXG4gICAgICAgICAgICAgICAgZXZlcnkoYiwgY2hlY2tQcm9wZXJ0aWVzLCBhKSk7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBlcXVhbHM7XG5cbiIsICJ2YXIgbWFrZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vZnVuY3Rpb24vbWFrZUl0ZXJhdG9yXycpO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgZXZlcnlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShhcnIsIGNhbGxiYWNrLCB0aGlzT2JqKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbWFrZUl0ZXJhdG9yKGNhbGxiYWNrLCB0aGlzT2JqKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICAgIGlmIChhcnIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gLTEsIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgICAgICAgIC8vIHdlIGl0ZXJhdGUgb3ZlciBzcGFyc2UgaXRlbXMgc2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIG1ha2UgaXRcbiAgICAgICAgICAgIC8vIHdvcmsgcHJvcGVybHkgb24gSUUgNy04LiBzZWUgIzY0XG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrKGFycltpXSwgaSwgYXJyKSApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBldmVyeTtcblxuIiwgInZhciBpcyA9IHJlcXVpcmUoJy4uL2xhbmcvaXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vbGFuZy9pc0FycmF5Jyk7XG52YXIgZXZlcnkgPSByZXF1aXJlKCcuL2V2ZXJ5Jyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyBpZiBib3RoIGFycmF5cyBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIsIGNhbGxiYWNrKXtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBpcztcblxuICAgICAgICBpZiAoIWlzQXJyYXkoYSkgfHwgIWlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhhLCBiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBldmVyeShhLCBtYWtlQ29tcGFyZShjYWxsYmFjayksIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VDb21wYXJlKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgaW4gdGhpcyAmJiBjYWxsYmFjayh2YWx1ZSwgdGhpc1tpXSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBlcXVhbHM7XG5cblxuIiwgInZhciBpcyA9IHJlcXVpcmUoJy4vaXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG52YXIgb2JqRXF1YWxzID0gcmVxdWlyZSgnLi4vb2JqZWN0L2VxdWFscycpO1xudmFyIGFyckVxdWFscyA9IHJlcXVpcmUoJy4uL2FycmF5L2VxdWFscycpO1xuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgY2hlY2tzIGZvciBzYW1lIHByb3BlcnRpZXMgYW5kIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWVwRXF1YWxzKGEsIGIsIGNhbGxiYWNrKXtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBpcztcblxuICAgICAgICB2YXIgYm90aE9iamVjdHMgPSBpc09iamVjdChhKSAmJiBpc09iamVjdChiKTtcbiAgICAgICAgdmFyIGJvdGhBcnJheXMgPSAhYm90aE9iamVjdHMgJiYgaXNBcnJheShhKSAmJiBpc0FycmF5KGIpO1xuXG4gICAgICAgIGlmICghYm90aE9iamVjdHMgJiYgIWJvdGhBcnJheXMpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhhLCBiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYil7XG4gICAgICAgICAgICByZXR1cm4gZGVlcEVxdWFscyhhLCBiLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWV0aG9kID0gYm90aE9iamVjdHMgPyBvYmpFcXVhbHMgOiBhcnJFcXVhbHM7XG4gICAgICAgIHJldHVybiBtZXRob2QoYSwgYiwgY29tcGFyZSk7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWxzO1xuXG5cbiIsICIvKipcbiAqIGNocm9tYS5qcyAtIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgY29sb3IgY29udmVyc2lvbnNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxOSwgR3JlZ29yIEFpc2NoXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAzLiBUaGUgbmFtZSBHcmVnb3IgQWlzY2ggbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgR1JFR09SIEFJU0NIIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsXG4gKiBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORyxcbiAqIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZXG4gKiBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuICogRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogY2hyb21hLmpzIGluY2x1ZGVzIGNvbG9ycyBmcm9tIGNvbG9yYnJld2VyMi5vcmcsIHdoaWNoIGFyZSByZWxlYXNlZCB1bmRlclxuICogdGhlIGZvbGxvd2luZyBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAwMiBDeW50aGlhIEJyZXdlciwgTWFyayBIYXJyb3dlcixcbiAqIGFuZCBUaGUgUGVubnN5bHZhbmlhIFN0YXRlIFVuaXZlcnNpdHkuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsXG4gKiBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpY1xuICogbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBOYW1lZCBjb2xvcnMgYXJlIHRha2VuIGZyb20gWDExIENvbG9yIE5hbWVzLlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yXG4gKlxuICogQHByZXNlcnZlXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmNocm9tYSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBsaW1pdCA9IGZ1bmN0aW9uICh4LCBtaW4sIG1heCkge1xuICAgICAgICBpZiAoIG1pbiA9PT0gdm9pZCAwICkgbWluPTA7XG4gICAgICAgIGlmICggbWF4ID09PSB2b2lkIDAgKSBtYXg9MTtcblxuICAgICAgICByZXR1cm4geCA8IG1pbiA/IG1pbiA6IHggPiBtYXggPyBtYXggOiB4O1xuICAgIH07XG5cbiAgICB2YXIgY2xpcF9yZ2IgPSBmdW5jdGlvbiAocmdiKSB7XG4gICAgICAgIHJnYi5fY2xpcHBlZCA9IGZhbHNlO1xuICAgICAgICByZ2IuX3VuY2xpcHBlZCA9IHJnYi5zbGljZSgwKTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPD0zOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIDwgMykge1xuICAgICAgICAgICAgICAgIGlmIChyZ2JbaV0gPCAwIHx8IHJnYltpXSA+IDI1NSkgeyByZ2IuX2NsaXBwZWQgPSB0cnVlOyB9XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gbGltaXQocmdiW2ldLCAwLCAyNTUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gbGltaXQocmdiW2ldLCAwLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmdiO1xuICAgIH07XG5cbiAgICAvLyBwb3J0ZWQgZnJvbSBqUXVlcnkncyAkLnR5cGVcbiAgICB2YXIgY2xhc3NUb1R5cGUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IFsnQm9vbGVhbicsICdOdW1iZXInLCAnU3RyaW5nJywgJ0Z1bmN0aW9uJywgJ0FycmF5JywgJ0RhdGUnLCAnUmVnRXhwJywgJ1VuZGVmaW5lZCcsICdOdWxsJ107IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBuYW1lID0gbGlzdFtpXTtcblxuICAgICAgICBjbGFzc1RvVHlwZVsoXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiKV0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHZhciB0eXBlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBjbGFzc1RvVHlwZVtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKV0gfHwgXCJvYmplY3RcIjtcbiAgICB9O1xuXG4gICAgdmFyIHVucGFjayA9IGZ1bmN0aW9uIChhcmdzLCBrZXlPcmRlcikge1xuICAgICAgICBpZiAoIGtleU9yZGVyID09PSB2b2lkIDAgKSBrZXlPcmRlcj1udWxsO1xuXG4gICAgXHQvLyBpZiBjYWxsZWQgd2l0aCBtb3JlIHRoYW4gMyBhcmd1bWVudHMsIHdlIHJldHVybiB0aGUgYXJndW1lbnRzXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+PSAzKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTsgfVxuICAgICAgICAvLyB3aXRoIGxlc3MgdGhhbiAzIGFyZ3Mgd2UgY2hlY2sgaWYgZmlyc3QgYXJnIGlzIG9iamVjdFxuICAgICAgICAvLyBhbmQgdXNlIHRoZSBrZXlPcmRlciBzdHJpbmcgdG8gZXh0cmFjdCBhbmQgc29ydCBwcm9wZXJ0aWVzXG4gICAgXHRpZiAodHlwZShhcmdzWzBdKSA9PSAnb2JqZWN0JyAmJiBrZXlPcmRlcikge1xuICAgIFx0XHRyZXR1cm4ga2V5T3JkZXIuc3BsaXQoJycpXG4gICAgXHRcdFx0LmZpbHRlcihmdW5jdGlvbiAoaykgeyByZXR1cm4gYXJnc1swXVtrXSAhPT0gdW5kZWZpbmVkOyB9KVxuICAgIFx0XHRcdC5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGFyZ3NbMF1ba107IH0pO1xuICAgIFx0fVxuICAgIFx0Ly8gb3RoZXJ3aXNlIHdlIGp1c3QgcmV0dXJuIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgIFx0Ly8gKHdoaWNoIHdlIHN1cHBvc2UgaXMgYW4gYXJyYXkgb2YgYXJncylcbiAgICAgICAgcmV0dXJuIGFyZ3NbMF07XG4gICAgfTtcblxuICAgIHZhciBsYXN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICB2YXIgbCA9IGFyZ3MubGVuZ3RoLTE7XG4gICAgICAgIGlmICh0eXBlKGFyZ3NbbF0pID09ICdzdHJpbmcnKSB7IHJldHVybiBhcmdzW2xdLnRvTG93ZXJDYXNlKCk7IH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBQSSA9IE1hdGguUEk7XG5cbiAgICB2YXIgdXRpbHMgPSB7XG4gICAgXHRjbGlwX3JnYjogY2xpcF9yZ2IsXG4gICAgXHRsaW1pdDogbGltaXQsXG4gICAgXHR0eXBlOiB0eXBlLFxuICAgIFx0dW5wYWNrOiB1bnBhY2ssXG4gICAgXHRsYXN0OiBsYXN0LFxuICAgIFx0UEk6IFBJLFxuICAgIFx0VFdPUEk6IFBJKjIsXG4gICAgXHRQSVRISVJEOiBQSS8zLFxuICAgIFx0REVHMlJBRDogUEkgLyAxODAsXG4gICAgXHRSQUQyREVHOiAxODAgLyBQSVxuICAgIH07XG5cbiAgICB2YXIgaW5wdXQgPSB7XG4gICAgXHRmb3JtYXQ6IHt9LFxuICAgIFx0YXV0b2RldGVjdDogW11cbiAgICB9O1xuXG4gICAgdmFyIGxhc3QkMSA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIGNsaXBfcmdiJDEgPSB1dGlscy5jbGlwX3JnYjtcbiAgICB2YXIgdHlwZSQxID0gdXRpbHMudHlwZTtcblxuXG4gICAgdmFyIENvbG9yID0gZnVuY3Rpb24gQ29sb3IoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGUkMShhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGFyZ3NbMF0uY29uc3RydWN0b3IgJiZcbiAgICAgICAgICAgIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudCBpcyBhbHJlYWR5IGEgQ29sb3IgaW5zdGFuY2VcbiAgICAgICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGFzdCBhcmd1bWVudCBjb3VsZCBiZSB0aGUgbW9kZVxuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMShhcmdzKTtcbiAgICAgICAgdmFyIGF1dG9kZXRlY3QgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIW1vZGUpIHtcbiAgICAgICAgICAgIGF1dG9kZXRlY3QgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFpbnB1dC5zb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5hdXRvZGV0ZWN0ID0gaW5wdXQuYXV0b2RldGVjdC5zb3J0KGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIGIucCAtIGEucDsgfSk7XG4gICAgICAgICAgICAgICAgaW5wdXQuc29ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF1dG8tZGV0ZWN0IGZvcm1hdFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBpbnB1dC5hdXRvZGV0ZWN0OyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGsgPSBsaXN0W2ldO1xuXG4gICAgICAgICAgICAgICAgbW9kZSA9IGNoay50ZXN0LmFwcGx5KGNoaywgYXJncyk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dC5mb3JtYXRbbW9kZV0pIHtcbiAgICAgICAgICAgIHZhciByZ2IgPSBpbnB1dC5mb3JtYXRbbW9kZV0uYXBwbHkobnVsbCwgYXV0b2RldGVjdCA/IGFyZ3MgOiBhcmdzLnNsaWNlKDAsLTEpKTtcbiAgICAgICAgICAgIG1lLl9yZ2IgPSBjbGlwX3JnYiQxKHJnYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gZm9ybWF0OiAnK2FyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGFscGhhIGNoYW5uZWxcbiAgICAgICAgaWYgKG1lLl9yZ2IubGVuZ3RoID09PSAzKSB7IG1lLl9yZ2IucHVzaCgxKTsgfVxuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIGlmICh0eXBlJDEodGhpcy5oZXgpID09ICdmdW5jdGlvbicpIHsgcmV0dXJuIHRoaXMuaGV4KCk7IH1cbiAgICAgICAgcmV0dXJuIChcIltcIiArICh0aGlzLl9yZ2Iuam9pbignLCcpKSArIFwiXVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIENvbG9yXzEgPSBDb2xvcjtcblxuICAgIHZhciBjaHJvbWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgXHR2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIFx0d2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIFx0cmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIGNocm9tYS5Db2xvciwgWyBudWxsIF0uY29uY2F0KCBhcmdzKSApKTtcbiAgICB9O1xuXG4gICAgY2hyb21hLkNvbG9yID0gQ29sb3JfMTtcbiAgICBjaHJvbWEudmVyc2lvbiA9ICcyLjEuMic7XG5cbiAgICB2YXIgY2hyb21hXzEgPSBjaHJvbWE7XG5cbiAgICB2YXIgdW5wYWNrJDEgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4O1xuXG4gICAgdmFyIHJnYjJjbXlrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skMShhcmdzLCAncmdiJyk7XG4gICAgICAgIHZhciByID0gcmVmWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHIgPSByIC8gMjU1O1xuICAgICAgICBnID0gZyAvIDI1NTtcbiAgICAgICAgYiA9IGIgLyAyNTU7XG4gICAgICAgIHZhciBrID0gMSAtIG1heChyLG1heChnLGIpKTtcbiAgICAgICAgdmFyIGYgPSBrIDwgMSA/IDEgLyAoMS1rKSA6IDA7XG4gICAgICAgIHZhciBjID0gKDEtci1rKSAqIGY7XG4gICAgICAgIHZhciBtID0gKDEtZy1rKSAqIGY7XG4gICAgICAgIHZhciB5ID0gKDEtYi1rKSAqIGY7XG4gICAgICAgIHJldHVybiBbYyxtLHksa107XG4gICAgfTtcblxuICAgIHZhciByZ2IyY215a18xID0gcmdiMmNteWs7XG5cbiAgICB2YXIgdW5wYWNrJDIgPSB1dGlscy51bnBhY2s7XG5cbiAgICB2YXIgY215azJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayQyKGFyZ3MsICdjbXlrJyk7XG4gICAgICAgIHZhciBjID0gYXJnc1swXTtcbiAgICAgICAgdmFyIG0gPSBhcmdzWzFdO1xuICAgICAgICB2YXIgeSA9IGFyZ3NbMl07XG4gICAgICAgIHZhciBrID0gYXJnc1szXTtcbiAgICAgICAgdmFyIGFscGhhID0gYXJncy5sZW5ndGggPiA0ID8gYXJnc1s0XSA6IDE7XG4gICAgICAgIGlmIChrID09PSAxKSB7IHJldHVybiBbMCwwLDAsYWxwaGFdOyB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjID49IDEgPyAwIDogMjU1ICogKDEtYykgKiAoMS1rKSwgLy8gclxuICAgICAgICAgICAgbSA+PSAxID8gMCA6IDI1NSAqICgxLW0pICogKDEtayksIC8vIGdcbiAgICAgICAgICAgIHkgPj0gMSA/IDAgOiAyNTUgKiAoMS15KSAqICgxLWspLCAvLyBiXG4gICAgICAgICAgICBhbHBoYVxuICAgICAgICBdO1xuICAgIH07XG5cbiAgICB2YXIgY215azJyZ2JfMSA9IGNteWsycmdiO1xuXG4gICAgdmFyIHVucGFjayQzID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJDIgPSB1dGlscy50eXBlO1xuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLmNteWsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJjbXlrXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuY215ayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2NteWsnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5jbXlrID0gY215azJyZ2JfMTtcblxuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDIsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJDMoYXJncywgJ2NteWsnKTtcbiAgICAgICAgICAgIGlmICh0eXBlJDIoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NteWsnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJDQgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIGxhc3QkMiA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIHJuZCA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBNYXRoLnJvdW5kKGEqMTAwKS8xMDA7IH07XG5cbiAgICAvKlxuICAgICAqIHN1cHBvcnRlZCBhcmd1bWVudHM6XG4gICAgICogLSBoc2wyY3NzKGgscyxsKVxuICAgICAqIC0gaHNsMmNzcyhoLHMsbCxhKVxuICAgICAqIC0gaHNsMmNzcyhbaCxzLGxdLCBtb2RlKVxuICAgICAqIC0gaHNsMmNzcyhbaCxzLGwsYV0sIG1vZGUpXG4gICAgICogLSBoc2wyY3NzKHtoLHMsbCxhfSwgbW9kZSlcbiAgICAgKi9cbiAgICB2YXIgaHNsMmNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgaHNsYSA9IHVucGFjayQ0KGFyZ3MsICdoc2xhJyk7XG4gICAgICAgIHZhciBtb2RlID0gbGFzdCQyKGFyZ3MpIHx8ICdsc2EnO1xuICAgICAgICBoc2xhWzBdID0gcm5kKGhzbGFbMF0gfHwgMCk7XG4gICAgICAgIGhzbGFbMV0gPSBybmQoaHNsYVsxXSoxMDApICsgJyUnO1xuICAgICAgICBoc2xhWzJdID0gcm5kKGhzbGFbMl0qMTAwKSArICclJztcbiAgICAgICAgaWYgKG1vZGUgPT09ICdoc2xhJyB8fCAoaHNsYS5sZW5ndGggPiAzICYmIGhzbGFbM108MSkpIHtcbiAgICAgICAgICAgIGhzbGFbM10gPSBoc2xhLmxlbmd0aCA+IDMgPyBoc2xhWzNdIDogMTtcbiAgICAgICAgICAgIG1vZGUgPSAnaHNsYSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoc2xhLmxlbmd0aCA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChtb2RlICsgXCIoXCIgKyAoaHNsYS5qb2luKCcsJykpICsgXCIpXCIpO1xuICAgIH07XG5cbiAgICB2YXIgaHNsMmNzc18xID0gaHNsMmNzcztcblxuICAgIHZhciB1bnBhY2skNSA9IHV0aWxzLnVucGFjaztcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIHJnYjJoc2wocixnLGIpXG4gICAgICogLSByZ2IyaHNsKHIsZyxiLGEpXG4gICAgICogLSByZ2IyaHNsKFtyLGcsYl0pXG4gICAgICogLSByZ2IyaHNsKFtyLGcsYixhXSlcbiAgICAgKiAtIHJnYjJoc2woe3IsZyxiLGF9KVxuICAgICAqL1xuICAgIHZhciByZ2IyaHNsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIGFyZ3MgPSB1bnBhY2skNShhcmdzLCAncmdiYScpO1xuICAgICAgICB2YXIgciA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBnID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGIgPSBhcmdzWzJdO1xuXG4gICAgICAgIHIgLz0gMjU1O1xuICAgICAgICBnIC89IDI1NTtcbiAgICAgICAgYiAvPSAyNTU7XG5cbiAgICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cbiAgICAgICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgICAgIHZhciBzLCBoO1xuXG4gICAgICAgIGlmIChtYXggPT09IG1pbil7XG4gICAgICAgICAgICBzID0gMDtcbiAgICAgICAgICAgIGggPSBOdW1iZXIuTmFOO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyA9IGwgPCAwLjUgPyAobWF4IC0gbWluKSAvIChtYXggKyBtaW4pIDogKG1heCAtIG1pbikgLyAoMiAtIG1heCAtIG1pbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAociA9PSBtYXgpIHsgaCA9IChnIC0gYikgLyAobWF4IC0gbWluKTsgfVxuICAgICAgICBlbHNlIGlmIChnID09IG1heCkgeyBoID0gMiArIChiIC0gcikgLyAobWF4IC0gbWluKTsgfVxuICAgICAgICBlbHNlIGlmIChiID09IG1heCkgeyBoID0gNCArIChyIC0gZykgLyAobWF4IC0gbWluKTsgfVxuXG4gICAgICAgIGggKj0gNjA7XG4gICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICBpZiAoYXJncy5sZW5ndGg+MyAmJiBhcmdzWzNdIT09dW5kZWZpbmVkKSB7IHJldHVybiBbaCxzLGwsYXJnc1szXV07IH1cbiAgICAgICAgcmV0dXJuIFtoLHMsbF07XG4gICAgfTtcblxuICAgIHZhciByZ2IyaHNsXzEgPSByZ2IyaHNsO1xuXG4gICAgdmFyIHVucGFjayQ2ID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBsYXN0JDMgPSB1dGlscy5sYXN0O1xuXG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuXG4gICAgLypcbiAgICAgKiBzdXBwb3J0ZWQgYXJndW1lbnRzOlxuICAgICAqIC0gcmdiMmNzcyhyLGcsYilcbiAgICAgKiAtIHJnYjJjc3MocixnLGIsYSlcbiAgICAgKiAtIHJnYjJjc3MoW3IsZyxiXSwgbW9kZSlcbiAgICAgKiAtIHJnYjJjc3MoW3IsZyxiLGFdLCBtb2RlKVxuICAgICAqIC0gcmdiMmNzcyh7cixnLGIsYX0sIG1vZGUpXG4gICAgICovXG4gICAgdmFyIHJnYjJjc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJnYmEgPSB1bnBhY2skNihhcmdzLCAncmdiYScpO1xuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMyhhcmdzKSB8fCAncmdiJztcbiAgICAgICAgaWYgKG1vZGUuc3Vic3RyKDAsMykgPT0gJ2hzbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBoc2wyY3NzXzEocmdiMmhzbF8xKHJnYmEpLCBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZ2JhWzBdID0gcm91bmQocmdiYVswXSk7XG4gICAgICAgIHJnYmFbMV0gPSByb3VuZChyZ2JhWzFdKTtcbiAgICAgICAgcmdiYVsyXSA9IHJvdW5kKHJnYmFbMl0pO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ3JnYmEnIHx8IChyZ2JhLmxlbmd0aCA+IDMgJiYgcmdiYVszXTwxKSkge1xuICAgICAgICAgICAgcmdiYVszXSA9IHJnYmEubGVuZ3RoID4gMyA/IHJnYmFbM10gOiAxO1xuICAgICAgICAgICAgbW9kZSA9ICdyZ2JhJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG1vZGUgKyBcIihcIiArIChyZ2JhLnNsaWNlKDAsbW9kZT09PSdyZ2InPzM6NCkuam9pbignLCcpKSArIFwiKVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJjc3NfMSA9IHJnYjJjc3M7XG5cbiAgICB2YXIgdW5wYWNrJDcgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHJvdW5kJDEgPSBNYXRoLnJvdW5kO1xuXG4gICAgdmFyIGhzbDJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhc3NpZ247XG5cbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICAgICAgYXJncyA9IHVucGFjayQ3KGFyZ3MsICdoc2wnKTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzBdO1xuICAgICAgICB2YXIgcyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBsID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHIsZyxiO1xuICAgICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAgICAgciA9IGcgPSBiID0gbCoyNTU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdDMgPSBbMCwwLDBdO1xuICAgICAgICAgICAgdmFyIGMgPSBbMCwwLDBdO1xuICAgICAgICAgICAgdmFyIHQyID0gbCA8IDAuNSA/IGwgKiAoMStzKSA6IGwrcy1sKnM7XG4gICAgICAgICAgICB2YXIgdDEgPSAyICogbCAtIHQyO1xuICAgICAgICAgICAgdmFyIGhfID0gaCAvIDM2MDtcbiAgICAgICAgICAgIHQzWzBdID0gaF8gKyAxLzM7XG4gICAgICAgICAgICB0M1sxXSA9IGhfO1xuICAgICAgICAgICAgdDNbMl0gPSBoXyAtIDEvMztcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTwzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodDNbaV0gPCAwKSB7IHQzW2ldICs9IDE7IH1cbiAgICAgICAgICAgICAgICBpZiAodDNbaV0gPiAxKSB7IHQzW2ldIC09IDE7IH1cbiAgICAgICAgICAgICAgICBpZiAoNiAqIHQzW2ldIDwgMSlcbiAgICAgICAgICAgICAgICAgICAgeyBjW2ldID0gdDEgKyAodDIgLSB0MSkgKiA2ICogdDNbaV07IH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgyICogdDNbaV0gPCAxKVxuICAgICAgICAgICAgICAgICAgICB7IGNbaV0gPSB0MjsgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKDMgKiB0M1tpXSA8IDIpXG4gICAgICAgICAgICAgICAgICAgIHsgY1tpXSA9IHQxICsgKHQyIC0gdDEpICogKCgyIC8gMykgLSB0M1tpXSkgKiA2OyB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB7IGNbaV0gPSB0MTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKGFzc2lnbiA9IFtyb3VuZCQxKGNbMF0qMjU1KSxyb3VuZCQxKGNbMV0qMjU1KSxyb3VuZCQxKGNbMl0qMjU1KV0sIHIgPSBhc3NpZ25bMF0sIGcgPSBhc3NpZ25bMV0sIGIgPSBhc3NpZ25bMl0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIC8vIGtlZXAgYWxwaGEgY2hhbm5lbFxuICAgICAgICAgICAgcmV0dXJuIFtyLGcsYixhcmdzWzNdXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsZyxiLDFdO1xuICAgIH07XG5cbiAgICB2YXIgaHNsMnJnYl8xID0gaHNsMnJnYjtcblxuICAgIHZhciBSRV9SR0IgPSAvXnJnYlxcKFxccyooLT9cXGQrKSxcXHMqKC0/XFxkKylcXHMqLFxccyooLT9cXGQrKVxccypcXCkkLztcbiAgICB2YXIgUkVfUkdCQSA9IC9ecmdiYVxcKFxccyooLT9cXGQrKSxcXHMqKC0/XFxkKylcXHMqLFxccyooLT9cXGQrKVxccyosXFxzKihbMDFdfFswMV0/XFwuXFxkKylcXCkkLztcbiAgICB2YXIgUkVfUkdCX1BDVCA9IC9ecmdiXFwoXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJSxcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyklXFxzKlxcKSQvO1xuICAgIHZhciBSRV9SR0JBX1BDVCA9IC9ecmdiYVxcKFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSUsXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbMDFdfFswMV0/XFwuXFxkKylcXCkkLztcbiAgICB2YXIgUkVfSFNMID0gL15oc2xcXChcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyksXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccypcXCkkLztcbiAgICB2YXIgUkVfSFNMQSA9IC9eaHNsYVxcKFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSxcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFswMV18WzAxXT9cXC5cXGQrKVxcKSQvO1xuXG4gICAgdmFyIHJvdW5kJDIgPSBNYXRoLnJvdW5kO1xuXG4gICAgdmFyIGNzczJyZ2IgPSBmdW5jdGlvbiAoY3NzKSB7XG4gICAgICAgIGNzcyA9IGNzcy50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgdmFyIG07XG5cbiAgICAgICAgaWYgKGlucHV0LmZvcm1hdC5uYW1lZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQuZm9ybWF0Lm5hbWVkKGNzcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZ2IoMjUwLDIwLDApXG4gICAgICAgIGlmICgobSA9IGNzcy5tYXRjaChSRV9SR0IpKSkge1xuICAgICAgICAgICAgdmFyIHJnYiA9IG0uc2xpY2UoMSw0KTtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTwzOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZ2JbaV0gPSArcmdiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmdiWzNdID0gMTsgIC8vIGRlZmF1bHQgYWxwaGFcbiAgICAgICAgICAgIHJldHVybiByZ2I7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZ2JhKDI1MCwyMCwwLDAuNClcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX1JHQkEpKSkge1xuICAgICAgICAgICAgdmFyIHJnYiQxID0gbS5zbGljZSgxLDUpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxPTA7IGkkMTw0OyBpJDErKykge1xuICAgICAgICAgICAgICAgIHJnYiQxW2kkMV0gPSArcmdiJDFbaSQxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZ2IkMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJnYigxMDAlLDAlLDAlKVxuICAgICAgICBpZiAoKG0gPSBjc3MubWF0Y2goUkVfUkdCX1BDVCkpKSB7XG4gICAgICAgICAgICB2YXIgcmdiJDIgPSBtLnNsaWNlKDEsNCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDI9MDsgaSQyPDM7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgcmdiJDJbaSQyXSA9IHJvdW5kJDIocmdiJDJbaSQyXSAqIDIuNTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmdiJDJbM10gPSAxOyAgLy8gZGVmYXVsdCBhbHBoYVxuICAgICAgICAgICAgcmV0dXJuIHJnYiQyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmdiYSgxMDAlLDAlLDAlLDAuNClcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX1JHQkFfUENUKSkpIHtcbiAgICAgICAgICAgIHZhciByZ2IkMyA9IG0uc2xpY2UoMSw1KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMz0wOyBpJDM8MzsgaSQzKyspIHtcbiAgICAgICAgICAgICAgICByZ2IkM1tpJDNdID0gcm91bmQkMihyZ2IkM1tpJDNdICogMi41NSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZ2IkM1szXSA9ICtyZ2IkM1szXTtcbiAgICAgICAgICAgIHJldHVybiByZ2IkMztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhzbCgwLDEwMCUsNTAlKVxuICAgICAgICBpZiAoKG0gPSBjc3MubWF0Y2goUkVfSFNMKSkpIHtcbiAgICAgICAgICAgIHZhciBoc2wgPSBtLnNsaWNlKDEsNCk7XG4gICAgICAgICAgICBoc2xbMV0gKj0gMC4wMTtcbiAgICAgICAgICAgIGhzbFsyXSAqPSAwLjAxO1xuICAgICAgICAgICAgdmFyIHJnYiQ0ID0gaHNsMnJnYl8xKGhzbCk7XG4gICAgICAgICAgICByZ2IkNFszXSA9IDE7XG4gICAgICAgICAgICByZXR1cm4gcmdiJDQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoc2xhKDAsMTAwJSw1MCUsMC41KVxuICAgICAgICBpZiAoKG0gPSBjc3MubWF0Y2goUkVfSFNMQSkpKSB7XG4gICAgICAgICAgICB2YXIgaHNsJDEgPSBtLnNsaWNlKDEsNCk7XG4gICAgICAgICAgICBoc2wkMVsxXSAqPSAwLjAxO1xuICAgICAgICAgICAgaHNsJDFbMl0gKj0gMC4wMTtcbiAgICAgICAgICAgIHZhciByZ2IkNSA9IGhzbDJyZ2JfMShoc2wkMSk7XG4gICAgICAgICAgICByZ2IkNVszXSA9ICttWzRdOyAgLy8gZGVmYXVsdCBhbHBoYSA9IDFcbiAgICAgICAgICAgIHJldHVybiByZ2IkNTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjc3MycmdiLnRlc3QgPSBmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gUkVfUkdCLnRlc3QocykgfHxcbiAgICAgICAgICAgIFJFX1JHQkEudGVzdChzKSB8fFxuICAgICAgICAgICAgUkVfUkdCX1BDVC50ZXN0KHMpIHx8XG4gICAgICAgICAgICBSRV9SR0JBX1BDVC50ZXN0KHMpIHx8XG4gICAgICAgICAgICBSRV9IU0wudGVzdChzKSB8fFxuICAgICAgICAgICAgUkVfSFNMQS50ZXN0KHMpO1xuICAgIH07XG5cbiAgICB2YXIgY3NzMnJnYl8xID0gY3NzMnJnYjtcblxuICAgIHZhciB0eXBlJDMgPSB1dGlscy50eXBlO1xuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuY3NzID0gZnVuY3Rpb24obW9kZSkge1xuICAgICAgICByZXR1cm4gcmdiMmNzc18xKHRoaXMuX3JnYiwgbW9kZSk7XG4gICAgfTtcblxuICAgIGNocm9tYV8xLmNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2NzcyddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQuZm9ybWF0LmNzcyA9IGNzczJyZ2JfMTtcblxuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDUsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdCA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICAgICAgaWYgKCFyZXN0Lmxlbmd0aCAmJiB0eXBlJDMoaCkgPT09ICdzdHJpbmcnICYmIGNzczJyZ2JfMS50ZXN0KGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjc3MnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJDggPSB1dGlscy51bnBhY2s7XG5cbiAgICBpbnB1dC5mb3JtYXQuZ2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJnYiA9IHVucGFjayQ4KGFyZ3MsICdyZ2JhJyk7XG4gICAgICAgIHJnYlswXSAqPSAyNTU7XG4gICAgICAgIHJnYlsxXSAqPSAyNTU7XG4gICAgICAgIHJnYlsyXSAqPSAyNTU7XG4gICAgICAgIHJldHVybiByZ2I7XG4gICAgfTtcblxuICAgIGNocm9tYV8xLmdsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnZ2wnXSkgKSk7XG4gICAgfTtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmdsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgICAgIHJldHVybiBbcmdiWzBdLzI1NSwgcmdiWzFdLzI1NSwgcmdiWzJdLzI1NSwgcmdiWzNdXTtcbiAgICB9O1xuXG4gICAgdmFyIHVucGFjayQ5ID0gdXRpbHMudW5wYWNrO1xuXG4gICAgdmFyIHJnYjJoY2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayQ5KGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICAgIHZhciBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgICAgdmFyIGMgPSBkZWx0YSAqIDEwMCAvIDI1NTtcbiAgICAgICAgdmFyIF9nID0gbWluIC8gKDI1NSAtIGRlbHRhKSAqIDEwMDtcbiAgICAgICAgdmFyIGg7XG4gICAgICAgIGlmIChkZWx0YSA9PT0gMCkge1xuICAgICAgICAgICAgaCA9IE51bWJlci5OYU47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAociA9PT0gbWF4KSB7IGggPSAoZyAtIGIpIC8gZGVsdGE7IH1cbiAgICAgICAgICAgIGlmIChnID09PSBtYXgpIHsgaCA9IDIrKGIgLSByKSAvIGRlbHRhOyB9XG4gICAgICAgICAgICBpZiAoYiA9PT0gbWF4KSB7IGggPSA0KyhyIC0gZykgLyBkZWx0YTsgfVxuICAgICAgICAgICAgaCAqPSA2MDtcbiAgICAgICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaCwgYywgX2ddO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMmhjZ18xID0gcmdiMmhjZztcblxuICAgIHZhciB1bnBhY2skYSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gICAgLypcbiAgICAgKiB0aGlzIGlzIGJhc2ljYWxseSBqdXN0IEhTViB3aXRoIHNvbWUgbWlub3IgdHdlYWtzXG4gICAgICpcbiAgICAgKiBodWUuLiBbMC4uMzYwXVxuICAgICAqIGNocm9tYSAuLiBbMC4uMV1cbiAgICAgKiBncmF5bmVzcyAuLiBbMC4uMV1cbiAgICAgKi9cblxuICAgIHZhciBoY2cycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXNzaWduLCBhc3NpZ24kMSwgYXNzaWduJDIsIGFzc2lnbiQzLCBhc3NpZ24kNCwgYXNzaWduJDU7XG5cbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICAgICAgYXJncyA9IHVucGFjayRhKGFyZ3MsICdoY2cnKTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzBdO1xuICAgICAgICB2YXIgYyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBfZyA9IGFyZ3NbMl07XG4gICAgICAgIHZhciByLGcsYjtcbiAgICAgICAgX2cgPSBfZyAqIDI1NTtcbiAgICAgICAgdmFyIF9jID0gYyAqIDI1NTtcbiAgICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IF9nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGggPT09IDM2MCkgeyBoID0gMDsgfVxuICAgICAgICAgICAgaWYgKGggPiAzNjApIHsgaCAtPSAzNjA7IH1cbiAgICAgICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICAgICAgaCAvPSA2MDtcbiAgICAgICAgICAgIHZhciBpID0gZmxvb3IoaCk7XG4gICAgICAgICAgICB2YXIgZiA9IGggLSBpO1xuICAgICAgICAgICAgdmFyIHAgPSBfZyAqICgxIC0gYyk7XG4gICAgICAgICAgICB2YXIgcSA9IHAgKyBfYyAqICgxIC0gZik7XG4gICAgICAgICAgICB2YXIgdCA9IHAgKyBfYyAqIGY7XG4gICAgICAgICAgICB2YXIgdiA9IHAgKyBfYztcbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogKGFzc2lnbiA9IFt2LCB0LCBwXSwgciA9IGFzc2lnblswXSwgZyA9IGFzc2lnblsxXSwgYiA9IGFzc2lnblsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAxOiAoYXNzaWduJDEgPSBbcSwgdiwgcF0sIHIgPSBhc3NpZ24kMVswXSwgZyA9IGFzc2lnbiQxWzFdLCBiID0gYXNzaWduJDFbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMjogKGFzc2lnbiQyID0gW3AsIHYsIHRdLCByID0gYXNzaWduJDJbMF0sIGcgPSBhc3NpZ24kMlsxXSwgYiA9IGFzc2lnbiQyWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IChhc3NpZ24kMyA9IFtwLCBxLCB2XSwgciA9IGFzc2lnbiQzWzBdLCBnID0gYXNzaWduJDNbMV0sIGIgPSBhc3NpZ24kM1syXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSA0OiAoYXNzaWduJDQgPSBbdCwgcCwgdl0sIHIgPSBhc3NpZ24kNFswXSwgZyA9IGFzc2lnbiQ0WzFdLCBiID0gYXNzaWduJDRbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgNTogKGFzc2lnbiQ1ID0gW3YsIHAsIHFdLCByID0gYXNzaWduJDVbMF0sIGcgPSBhc3NpZ24kNVsxXSwgYiA9IGFzc2lnbiQ1WzJdKTsgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsIGcsIGIsIGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIGhjZzJyZ2JfMSA9IGhjZzJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJGIgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkNCA9IHV0aWxzLnR5cGU7XG5cblxuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuaGNnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IyaGNnXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuaGNnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaGNnJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQuaGNnID0gaGNnMnJnYl8xO1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMSxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skYihhcmdzLCAnaGNnJyk7XG4gICAgICAgICAgICBpZiAodHlwZSQ0KGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoY2cnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJGMgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIGxhc3QkNCA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIHJvdW5kJDMgPSBNYXRoLnJvdW5kO1xuXG4gICAgdmFyIHJnYjJoZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRjKGFyZ3MsICdyZ2JhJyk7XG4gICAgICAgIHZhciByID0gcmVmWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHZhciBhID0gcmVmWzNdO1xuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkNChhcmdzKSB8fCAnYXV0byc7XG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHsgYSA9IDE7IH1cbiAgICAgICAgaWYgKG1vZGUgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgbW9kZSA9IGEgPCAxID8gJ3JnYmEnIDogJ3JnYic7XG4gICAgICAgIH1cbiAgICAgICAgciA9IHJvdW5kJDMocik7XG4gICAgICAgIGcgPSByb3VuZCQzKGcpO1xuICAgICAgICBiID0gcm91bmQkMyhiKTtcbiAgICAgICAgdmFyIHUgPSByIDw8IDE2IHwgZyA8PCA4IHwgYjtcbiAgICAgICAgdmFyIHN0ciA9IFwiMDAwMDAwXCIgKyB1LnRvU3RyaW5nKDE2KTsgLy8jLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoc3RyLmxlbmd0aCAtIDYpO1xuICAgICAgICB2YXIgaHhhID0gJzAnICsgcm91bmQkMyhhICogMjU1KS50b1N0cmluZygxNik7XG4gICAgICAgIGh4YSA9IGh4YS5zdWJzdHIoaHhhLmxlbmd0aCAtIDIpO1xuICAgICAgICBzd2l0Y2ggKG1vZGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSAncmdiYSc6IHJldHVybiAoXCIjXCIgKyBzdHIgKyBoeGEpO1xuICAgICAgICAgICAgY2FzZSAnYXJnYic6IHJldHVybiAoXCIjXCIgKyBoeGEgKyBzdHIpO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIChcIiNcIiArIHN0cik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJnYjJoZXhfMSA9IHJnYjJoZXg7XG5cbiAgICB2YXIgUkVfSEVYID0gL14jPyhbQS1GYS1mMC05XXs2fXxbQS1GYS1mMC05XXszfSkkLztcbiAgICB2YXIgUkVfSEVYQSA9IC9eIz8oW0EtRmEtZjAtOV17OH18W0EtRmEtZjAtOV17NH0pJC87XG5cbiAgICB2YXIgaGV4MnJnYiA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICAgICAgaWYgKGhleC5tYXRjaChSRV9IRVgpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb3B0aW9uYWwgbGVhZGluZyAjXG4gICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gNCB8fCBoZXgubGVuZ3RoID09PSA3KSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnN1YnN0cigxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGV4cGFuZCBzaG9ydC1ub3RhdGlvbiB0byBmdWxsIHNpeC1kaWdpdFxuICAgICAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICBoZXggPSBoZXguc3BsaXQoJycpO1xuICAgICAgICAgICAgICAgIGhleCA9IGhleFswXStoZXhbMF0raGV4WzFdK2hleFsxXStoZXhbMl0raGV4WzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHUgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgICAgICAgIHZhciByID0gdSA+PiAxNjtcbiAgICAgICAgICAgIHZhciBnID0gdSA+PiA4ICYgMHhGRjtcbiAgICAgICAgICAgIHZhciBiID0gdSAmIDB4RkY7XG4gICAgICAgICAgICByZXR1cm4gW3IsZyxiLDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWF0Y2ggcmdiYSBoZXggZm9ybWF0LCBlZyAjRkYwMDAwNzdcbiAgICAgICAgaWYgKGhleC5tYXRjaChSRV9IRVhBKSkge1xuICAgICAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDUgfHwgaGV4Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvcHRpb25hbCBsZWFkaW5nICNcbiAgICAgICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXhwYW5kIHNob3J0LW5vdGF0aW9uIHRvIGZ1bGwgZWlnaHQtZGlnaXRcbiAgICAgICAgICAgIGlmIChoZXgubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnNwbGl0KCcnKTtcbiAgICAgICAgICAgICAgICBoZXggPSBoZXhbMF0raGV4WzBdK2hleFsxXStoZXhbMV0raGV4WzJdK2hleFsyXStoZXhbM10raGV4WzNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHUkMSA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgICAgICAgICAgdmFyIHIkMSA9IHUkMSA+PiAyNCAmIDB4RkY7XG4gICAgICAgICAgICB2YXIgZyQxID0gdSQxID4+IDE2ICYgMHhGRjtcbiAgICAgICAgICAgIHZhciBiJDEgPSB1JDEgPj4gOCAmIDB4RkY7XG4gICAgICAgICAgICB2YXIgYSA9IE1hdGgucm91bmQoKHUkMSAmIDB4RkYpIC8gMHhGRiAqIDEwMCkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gW3IkMSxnJDEsYiQxLGFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2UgdXNlZCB0byBjaGVjayBmb3IgY3NzIGNvbG9ycyBoZXJlXG4gICAgICAgIC8vIGlmIF9pbnB1dC5jc3M/IGFuZCByZ2IgPSBfaW5wdXQuY3NzIGhleFxuICAgICAgICAvLyAgICAgcmV0dXJuIHJnYlxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJ1bmtub3duIGhleCBjb2xvcjogXCIgKyBoZXgpKTtcbiAgICB9O1xuXG4gICAgdmFyIGhleDJyZ2JfMSA9IGhleDJyZ2I7XG5cbiAgICB2YXIgdHlwZSQ1ID0gdXRpbHMudHlwZTtcblxuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJoZXhfMSh0aGlzLl9yZ2IsIG1vZGUpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5oZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydoZXgnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5oZXggPSBoZXgycmdiXzE7XG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogNCxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICAgIHZhciByZXN0ID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSByZXN0WyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3QubGVuZ3RoICYmIHR5cGUkNShoKSA9PT0gJ3N0cmluZycgJiYgWzMsNCw1LDYsNyw4LDldLmluZGV4T2YoaC5sZW5ndGgpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hleCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skZCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgVFdPUEkgPSB1dGlscy5UV09QSTtcbiAgICB2YXIgbWluID0gTWF0aC5taW47XG4gICAgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG4gICAgdmFyIGFjb3MgPSBNYXRoLmFjb3M7XG5cbiAgICB2YXIgcmdiMmhzaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAvKlxuICAgICAgICBib3Jyb3dlZCBmcm9tIGhlcmU6XG4gICAgICAgIGh0dHA6Ly9odW1tZXIuc3RhbmZvcmQuZWR1L211c2VpbmZvL2RvYy9leGFtcGxlcy9odW1kcnVtL2tleXNjYXBlMi9yZ2IyaHNpLmNwcFxuICAgICAgICAqL1xuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJGQoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICByIC89IDI1NTtcbiAgICAgICAgZyAvPSAyNTU7XG4gICAgICAgIGIgLz0gMjU1O1xuICAgICAgICB2YXIgaDtcbiAgICAgICAgdmFyIG1pbl8gPSBtaW4ocixnLGIpO1xuICAgICAgICB2YXIgaSA9IChyK2crYikgLyAzO1xuICAgICAgICB2YXIgcyA9IGkgPiAwID8gMSAtIG1pbl8vaSA6IDA7XG4gICAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgICAgICBoID0gTmFOO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaCA9ICgoci1nKSsoci1iKSkgLyAyO1xuICAgICAgICAgICAgaCAvPSBzcXJ0KChyLWcpKihyLWcpICsgKHItYikqKGctYikpO1xuICAgICAgICAgICAgaCA9IGFjb3MoaCk7XG4gICAgICAgICAgICBpZiAoYiA+IGcpIHtcbiAgICAgICAgICAgICAgICBoID0gVFdPUEkgLSBoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCAvPSBUV09QSTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2gqMzYwLHMsaV07XG4gICAgfTtcblxuICAgIHZhciByZ2IyaHNpXzEgPSByZ2IyaHNpO1xuXG4gICAgdmFyIHVucGFjayRlID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBsaW1pdCQxID0gdXRpbHMubGltaXQ7XG4gICAgdmFyIFRXT1BJJDEgPSB1dGlscy5UV09QSTtcbiAgICB2YXIgUElUSElSRCA9IHV0aWxzLlBJVEhJUkQ7XG4gICAgdmFyIGNvcyA9IE1hdGguY29zO1xuXG4gICAgLypcbiAgICAgKiBodWUgWzAuLjM2MF1cbiAgICAgKiBzYXR1cmF0aW9uIFswLi4xXVxuICAgICAqIGludGVuc2l0eSBbMC4uMV1cbiAgICAgKi9cbiAgICB2YXIgaHNpMnJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAvKlxuICAgICAgICBib3Jyb3dlZCBmcm9tIGhlcmU6XG4gICAgICAgIGh0dHA6Ly9odW1tZXIuc3RhbmZvcmQuZWR1L211c2VpbmZvL2RvYy9leGFtcGxlcy9odW1kcnVtL2tleXNjYXBlMi9oc2kycmdiLmNwcFxuICAgICAgICAqL1xuICAgICAgICBhcmdzID0gdW5wYWNrJGUoYXJncywgJ2hzaScpO1xuICAgICAgICB2YXIgaCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBzID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGkgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcixnLGI7XG5cbiAgICAgICAgaWYgKGlzTmFOKGgpKSB7IGggPSAwOyB9XG4gICAgICAgIGlmIChpc05hTihzKSkgeyBzID0gMDsgfVxuICAgICAgICAvLyBub3JtYWxpemUgaHVlXG4gICAgICAgIGlmIChoID4gMzYwKSB7IGggLT0gMzYwOyB9XG4gICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICBoIC89IDM2MDtcbiAgICAgICAgaWYgKGggPCAxLzMpIHtcbiAgICAgICAgICAgIGIgPSAoMS1zKS8zO1xuICAgICAgICAgICAgciA9ICgxK3MqY29zKFRXT1BJJDEqaCkvY29zKFBJVEhJUkQtVFdPUEkkMSpoKSkvMztcbiAgICAgICAgICAgIGcgPSAxIC0gKGIrcik7XG4gICAgICAgIH0gZWxzZSBpZiAoaCA8IDIvMykge1xuICAgICAgICAgICAgaCAtPSAxLzM7XG4gICAgICAgICAgICByID0gKDEtcykvMztcbiAgICAgICAgICAgIGcgPSAoMStzKmNvcyhUV09QSSQxKmgpL2NvcyhQSVRISVJELVRXT1BJJDEqaCkpLzM7XG4gICAgICAgICAgICBiID0gMSAtIChyK2cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaCAtPSAyLzM7XG4gICAgICAgICAgICBnID0gKDEtcykvMztcbiAgICAgICAgICAgIGIgPSAoMStzKmNvcyhUV09QSSQxKmgpL2NvcyhQSVRISVJELVRXT1BJJDEqaCkpLzM7XG4gICAgICAgICAgICByID0gMSAtIChnK2IpO1xuICAgICAgICB9XG4gICAgICAgIHIgPSBsaW1pdCQxKGkqciozKTtcbiAgICAgICAgZyA9IGxpbWl0JDEoaSpnKjMpO1xuICAgICAgICBiID0gbGltaXQkMShpKmIqMyk7XG4gICAgICAgIHJldHVybiBbcioyNTUsIGcqMjU1LCBiKjI1NSwgYXJncy5sZW5ndGggPiAzID8gYXJnc1szXSA6IDFdO1xuICAgIH07XG5cbiAgICB2YXIgaHNpMnJnYl8xID0gaHNpMnJnYjtcblxuICAgIHZhciB1bnBhY2skZiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSQ2ID0gdXRpbHMudHlwZTtcblxuXG5cblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5oc2kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJoc2lfMSh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5oc2kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydoc2knXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5oc2kgPSBoc2kycmdiXzE7XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRmKGFyZ3MsICdoc2knKTtcbiAgICAgICAgICAgIGlmICh0eXBlJDYoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hzaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skZyA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSQ3ID0gdXRpbHMudHlwZTtcblxuXG5cblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5oc2wgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJoc2xfMSh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5oc2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydoc2wnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5oc2wgPSBoc2wycmdiXzE7XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRnKGFyZ3MsICdoc2wnKTtcbiAgICAgICAgICAgIGlmICh0eXBlJDcoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hzbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skaCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbWluJDEgPSBNYXRoLm1pbjtcbiAgICB2YXIgbWF4JDEgPSBNYXRoLm1heDtcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIHJnYjJoc3YocixnLGIpXG4gICAgICogLSByZ2IyaHN2KFtyLGcsYl0pXG4gICAgICogLSByZ2IyaHN2KHtyLGcsYn0pXG4gICAgICovXG4gICAgdmFyIHJnYjJoc2wkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICBhcmdzID0gdW5wYWNrJGgoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBnID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGIgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgbWluXyA9IG1pbiQxKHIsIGcsIGIpO1xuICAgICAgICB2YXIgbWF4XyA9IG1heCQxKHIsIGcsIGIpO1xuICAgICAgICB2YXIgZGVsdGEgPSBtYXhfIC0gbWluXztcbiAgICAgICAgdmFyIGgscyx2O1xuICAgICAgICB2ID0gbWF4XyAvIDI1NS4wO1xuICAgICAgICBpZiAobWF4XyA9PT0gMCkge1xuICAgICAgICAgICAgaCA9IE51bWJlci5OYU47XG4gICAgICAgICAgICBzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMgPSBkZWx0YSAvIG1heF87XG4gICAgICAgICAgICBpZiAociA9PT0gbWF4XykgeyBoID0gKGcgLSBiKSAvIGRlbHRhOyB9XG4gICAgICAgICAgICBpZiAoZyA9PT0gbWF4XykgeyBoID0gMisoYiAtIHIpIC8gZGVsdGE7IH1cbiAgICAgICAgICAgIGlmIChiID09PSBtYXhfKSB7IGggPSA0KyhyIC0gZykgLyBkZWx0YTsgfVxuICAgICAgICAgICAgaCAqPSA2MDtcbiAgICAgICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaCwgcywgdl1cbiAgICB9O1xuXG4gICAgdmFyIHJnYjJoc3YgPSByZ2IyaHNsJDE7XG5cbiAgICB2YXIgdW5wYWNrJGkgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIGZsb29yJDEgPSBNYXRoLmZsb29yO1xuXG4gICAgdmFyIGhzdjJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhc3NpZ24sIGFzc2lnbiQxLCBhc3NpZ24kMiwgYXNzaWduJDMsIGFzc2lnbiQ0LCBhc3NpZ24kNTtcblxuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuICAgICAgICBhcmdzID0gdW5wYWNrJGkoYXJncywgJ2hzdicpO1xuICAgICAgICB2YXIgaCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBzID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIHYgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcixnLGI7XG4gICAgICAgIHYgKj0gMjU1O1xuICAgICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAgICAgciA9IGcgPSBiID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoID09PSAzNjApIHsgaCA9IDA7IH1cbiAgICAgICAgICAgIGlmIChoID4gMzYwKSB7IGggLT0gMzYwOyB9XG4gICAgICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgICAgIGggLz0gNjA7XG5cbiAgICAgICAgICAgIHZhciBpID0gZmxvb3IkMShoKTtcbiAgICAgICAgICAgIHZhciBmID0gaCAtIGk7XG4gICAgICAgICAgICB2YXIgcCA9IHYgKiAoMSAtIHMpO1xuICAgICAgICAgICAgdmFyIHEgPSB2ICogKDEgLSBzICogZik7XG4gICAgICAgICAgICB2YXIgdCA9IHYgKiAoMSAtIHMgKiAoMSAtIGYpKTtcblxuICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiAoYXNzaWduID0gW3YsIHQsIHBdLCByID0gYXNzaWduWzBdLCBnID0gYXNzaWduWzFdLCBiID0gYXNzaWduWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IChhc3NpZ24kMSA9IFtxLCB2LCBwXSwgciA9IGFzc2lnbiQxWzBdLCBnID0gYXNzaWduJDFbMV0sIGIgPSBhc3NpZ24kMVsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAyOiAoYXNzaWduJDIgPSBbcCwgdiwgdF0sIHIgPSBhc3NpZ24kMlswXSwgZyA9IGFzc2lnbiQyWzFdLCBiID0gYXNzaWduJDJbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMzogKGFzc2lnbiQzID0gW3AsIHEsIHZdLCByID0gYXNzaWduJDNbMF0sIGcgPSBhc3NpZ24kM1sxXSwgYiA9IGFzc2lnbiQzWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IChhc3NpZ24kNCA9IFt0LCBwLCB2XSwgciA9IGFzc2lnbiQ0WzBdLCBnID0gYXNzaWduJDRbMV0sIGIgPSBhc3NpZ24kNFsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSA1OiAoYXNzaWduJDUgPSBbdiwgcCwgcV0sIHIgPSBhc3NpZ24kNVswXSwgZyA9IGFzc2lnbiQ1WzFdLCBiID0gYXNzaWduJDVbMl0pOyBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcixnLGIsYXJncy5sZW5ndGggPiAzP2FyZ3NbM106MV07XG4gICAgfTtcblxuICAgIHZhciBoc3YycmdiXzEgPSBoc3YycmdiO1xuXG4gICAgdmFyIHVucGFjayRqID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJDggPSB1dGlscy50eXBlO1xuXG5cblxuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLmhzdiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmdiMmhzdih0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5oc3YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydoc3YnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5oc3YgPSBoc3YycmdiXzE7XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRqKGFyZ3MsICdoc3YnKTtcbiAgICAgICAgICAgIGlmICh0eXBlJDgoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hzdic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBsYWJDb25zdGFudHMgPSB7XG4gICAgICAgIC8vIENvcnJlc3BvbmRzIHJvdWdobHkgdG8gUkdCIGJyaWdodGVyL2RhcmtlclxuICAgICAgICBLbjogMTgsXG5cbiAgICAgICAgLy8gRDY1IHN0YW5kYXJkIHJlZmVyZW50XG4gICAgICAgIFhuOiAwLjk1MDQ3MCxcbiAgICAgICAgWW46IDEsXG4gICAgICAgIFpuOiAxLjA4ODgzMCxcblxuICAgICAgICB0MDogMC4xMzc5MzEwMzQsICAvLyA0IC8gMjlcbiAgICAgICAgdDE6IDAuMjA2ODk2NTUyLCAgLy8gNiAvIDI5XG4gICAgICAgIHQyOiAwLjEyODQxODU1LCAgIC8vIDMgKiB0MSAqIHQxXG4gICAgICAgIHQzOiAwLjAwODg1NjQ1MiwgIC8vIHQxICogdDEgKiB0MVxuICAgIH07XG5cbiAgICB2YXIgdW5wYWNrJGsgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHBvdyA9IE1hdGgucG93O1xuXG4gICAgdmFyIHJnYjJsYWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRrKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gcmdiMnh5eihyLGcsYik7XG4gICAgICAgIHZhciB4ID0gcmVmJDFbMF07XG4gICAgICAgIHZhciB5ID0gcmVmJDFbMV07XG4gICAgICAgIHZhciB6ID0gcmVmJDFbMl07XG4gICAgICAgIHZhciBsID0gMTE2ICogeSAtIDE2O1xuICAgICAgICByZXR1cm4gW2wgPCAwID8gMCA6IGwsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geildO1xuICAgIH07XG5cbiAgICB2YXIgcmdiX3h5eiA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGlmICgociAvPSAyNTUpIDw9IDAuMDQwNDUpIHsgcmV0dXJuIHIgLyAxMi45MjsgfVxuICAgICAgICByZXR1cm4gcG93KChyICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgfTtcblxuICAgIHZhciB4eXpfbGFiID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKHQgPiBsYWJDb25zdGFudHMudDMpIHsgcmV0dXJuIHBvdyh0LCAxIC8gMyk7IH1cbiAgICAgICAgcmV0dXJuIHQgLyBsYWJDb25zdGFudHMudDIgKyBsYWJDb25zdGFudHMudDA7XG4gICAgfTtcblxuICAgIHZhciByZ2IyeHl6ID0gZnVuY3Rpb24gKHIsZyxiKSB7XG4gICAgICAgIHIgPSByZ2JfeHl6KHIpO1xuICAgICAgICBnID0gcmdiX3h5eihnKTtcbiAgICAgICAgYiA9IHJnYl94eXooYik7XG4gICAgICAgIHZhciB4ID0geHl6X2xhYigoMC40MTI0NTY0ICogciArIDAuMzU3NTc2MSAqIGcgKyAwLjE4MDQzNzUgKiBiKSAvIGxhYkNvbnN0YW50cy5Ybik7XG4gICAgICAgIHZhciB5ID0geHl6X2xhYigoMC4yMTI2NzI5ICogciArIDAuNzE1MTUyMiAqIGcgKyAwLjA3MjE3NTAgKiBiKSAvIGxhYkNvbnN0YW50cy5Zbik7XG4gICAgICAgIHZhciB6ID0geHl6X2xhYigoMC4wMTkzMzM5ICogciArIDAuMTE5MTkyMCAqIGcgKyAwLjk1MDMwNDEgKiBiKSAvIGxhYkNvbnN0YW50cy5abik7XG4gICAgICAgIHJldHVybiBbeCx5LHpdO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMmxhYl8xID0gcmdiMmxhYjtcblxuICAgIHZhciB1bnBhY2skbCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgcG93JDEgPSBNYXRoLnBvdztcblxuICAgIC8qXG4gICAgICogTCogWzAuLjEwMF1cbiAgICAgKiBhIFstMTAwLi4xMDBdXG4gICAgICogYiBbLTEwMC4uMTAwXVxuICAgICAqL1xuICAgIHZhciBsYWIycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIGFyZ3MgPSB1bnBhY2skbChhcmdzLCAnbGFiJyk7XG4gICAgICAgIHZhciBsID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGEgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgYiA9IGFyZ3NbMl07XG4gICAgICAgIHZhciB4LHkseiwgcixnLGJfO1xuXG4gICAgICAgIHkgPSAobCArIDE2KSAvIDExNjtcbiAgICAgICAgeCA9IGlzTmFOKGEpID8geSA6IHkgKyBhIC8gNTAwO1xuICAgICAgICB6ID0gaXNOYU4oYikgPyB5IDogeSAtIGIgLyAyMDA7XG5cbiAgICAgICAgeSA9IGxhYkNvbnN0YW50cy5ZbiAqIGxhYl94eXooeSk7XG4gICAgICAgIHggPSBsYWJDb25zdGFudHMuWG4gKiBsYWJfeHl6KHgpO1xuICAgICAgICB6ID0gbGFiQ29uc3RhbnRzLlpuICogbGFiX3h5eih6KTtcblxuICAgICAgICByID0geHl6X3JnYigzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIDAuNDk4NTMxNCAqIHopOyAgLy8gRDY1IC0+IHNSR0JcbiAgICAgICAgZyA9IHh5el9yZ2IoLTAuOTY5MjY2MCAqIHggKyAxLjg3NjAxMDggKiB5ICsgMC4wNDE1NTYwICogeik7XG4gICAgICAgIGJfID0geHl6X3JnYigwLjA1NTY0MzQgKiB4IC0gMC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopO1xuXG4gICAgICAgIHJldHVybiBbcixnLGJfLGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIHh5el9yZ2IgPSBmdW5jdGlvbiAocikge1xuICAgICAgICByZXR1cm4gMjU1ICogKHIgPD0gMC4wMDMwNCA/IDEyLjkyICogciA6IDEuMDU1ICogcG93JDEociwgMSAvIDIuNCkgLSAwLjA1NSlcbiAgICB9O1xuXG4gICAgdmFyIGxhYl94eXogPSBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdCA+IGxhYkNvbnN0YW50cy50MSA/IHQgKiB0ICogdCA6IGxhYkNvbnN0YW50cy50MiAqICh0IC0gbGFiQ29uc3RhbnRzLnQwKVxuICAgIH07XG5cbiAgICB2YXIgbGFiMnJnYl8xID0gbGFiMnJnYjtcblxuICAgIHZhciB1bnBhY2skbSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSQ5ID0gdXRpbHMudHlwZTtcblxuXG5cblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5sYWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJsYWJfMSh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5sYWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydsYWInXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5sYWIgPSBsYWIycmdiXzE7XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRtKGFyZ3MsICdsYWInKTtcbiAgICAgICAgICAgIGlmICh0eXBlJDkoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xhYic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skbiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgUkFEMkRFRyA9IHV0aWxzLlJBRDJERUc7XG4gICAgdmFyIHNxcnQkMSA9IE1hdGguc3FydDtcbiAgICB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuICAgIHZhciByb3VuZCQ0ID0gTWF0aC5yb3VuZDtcblxuICAgIHZhciBsYWIybGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skbihhcmdzLCAnbGFiJyk7XG4gICAgICAgIHZhciBsID0gcmVmWzBdO1xuICAgICAgICB2YXIgYSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHZhciBjID0gc3FydCQxKGEgKiBhICsgYiAqIGIpO1xuICAgICAgICB2YXIgaCA9IChhdGFuMihiLCBhKSAqIFJBRDJERUcgKyAzNjApICUgMzYwO1xuICAgICAgICBpZiAocm91bmQkNChjKjEwMDAwKSA9PT0gMCkgeyBoID0gTnVtYmVyLk5hTjsgfVxuICAgICAgICByZXR1cm4gW2wsIGMsIGhdO1xuICAgIH07XG5cbiAgICB2YXIgbGFiMmxjaF8xID0gbGFiMmxjaDtcblxuICAgIHZhciB1bnBhY2skbyA9IHV0aWxzLnVucGFjaztcblxuXG5cbiAgICB2YXIgcmdiMmxjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJG8oYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICB2YXIgcmVmJDEgPSByZ2IybGFiXzEocixnLGIpO1xuICAgICAgICB2YXIgbCA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgYSA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYl8gPSByZWYkMVsyXTtcbiAgICAgICAgcmV0dXJuIGxhYjJsY2hfMShsLGEsYl8pO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMmxjaF8xID0gcmdiMmxjaDtcblxuICAgIHZhciB1bnBhY2skcCA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgREVHMlJBRCA9IHV0aWxzLkRFRzJSQUQ7XG4gICAgdmFyIHNpbiA9IE1hdGguc2luO1xuICAgIHZhciBjb3MkMSA9IE1hdGguY29zO1xuXG4gICAgdmFyIGxjaDJsYWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgLypcbiAgICAgICAgQ29udmVydCBmcm9tIGEgcXVhbGl0YXRpdmUgcGFyYW1ldGVyIGggYW5kIGEgcXVhbnRpdGF0aXZlIHBhcmFtZXRlciBsIHRvIGEgMjQtYml0IHBpeGVsLlxuICAgICAgICBUaGVzZSBmb3JtdWxhcyB3ZXJlIGludmVudGVkIGJ5IERhdmlkIERhbHJ5bXBsZSB0byBvYnRhaW4gbWF4aW11bSBjb250cmFzdCB3aXRob3V0IGdvaW5nXG4gICAgICAgIG91dCBvZiBnYW11dCBpZiB0aGUgcGFyYW1ldGVycyBhcmUgaW4gdGhlIHJhbmdlIDAtMS5cblxuICAgICAgICBBIHNhdHVyYXRpb24gbXVsdGlwbGllciB3YXMgYWRkZWQgYnkgR3JlZ29yIEFpc2NoXG4gICAgICAgICovXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skcChhcmdzLCAnbGNoJyk7XG4gICAgICAgIHZhciBsID0gcmVmWzBdO1xuICAgICAgICB2YXIgYyA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGggPSByZWZbMl07XG4gICAgICAgIGlmIChpc05hTihoKSkgeyBoID0gMDsgfVxuICAgICAgICBoID0gaCAqIERFRzJSQUQ7XG4gICAgICAgIHJldHVybiBbbCwgY29zJDEoaCkgKiBjLCBzaW4oaCkgKiBjXVxuICAgIH07XG5cbiAgICB2YXIgbGNoMmxhYl8xID0gbGNoMmxhYjtcblxuICAgIHZhciB1bnBhY2skcSA9IHV0aWxzLnVucGFjaztcblxuXG5cbiAgICB2YXIgbGNoMnJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICBhcmdzID0gdW5wYWNrJHEoYXJncywgJ2xjaCcpO1xuICAgICAgICB2YXIgbCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBjID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcmVmID0gbGNoMmxhYl8xIChsLGMsaCk7XG4gICAgICAgIHZhciBMID0gcmVmWzBdO1xuICAgICAgICB2YXIgYSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGJfID0gcmVmWzJdO1xuICAgICAgICB2YXIgcmVmJDEgPSBsYWIycmdiXzEgKEwsYSxiXyk7XG4gICAgICAgIHZhciByID0gcmVmJDFbMF07XG4gICAgICAgIHZhciBnID0gcmVmJDFbMV07XG4gICAgICAgIHZhciBiID0gcmVmJDFbMl07XG4gICAgICAgIHJldHVybiBbciwgZywgYiwgYXJncy5sZW5ndGggPiAzID8gYXJnc1szXSA6IDFdO1xuICAgIH07XG5cbiAgICB2YXIgbGNoMnJnYl8xID0gbGNoMnJnYjtcblxuICAgIHZhciB1bnBhY2skciA9IHV0aWxzLnVucGFjaztcblxuXG4gICAgdmFyIGhjbDJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIGhjbCA9IHVucGFjayRyKGFyZ3MsICdoY2wnKS5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBsY2gycmdiXzEuYXBwbHkodm9pZCAwLCBoY2wpO1xuICAgIH07XG5cbiAgICB2YXIgaGNsMnJnYl8xID0gaGNsMnJnYjtcblxuICAgIHZhciB1bnBhY2skcyA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSRhID0gdXRpbHMudHlwZTtcblxuXG5cblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5sY2ggPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJnYjJsY2hfMSh0aGlzLl9yZ2IpOyB9O1xuICAgIENvbG9yXzEucHJvdG90eXBlLmhjbCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmdiMmxjaF8xKHRoaXMuX3JnYikucmV2ZXJzZSgpOyB9O1xuXG4gICAgY2hyb21hXzEubGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnbGNoJ10pICkpO1xuICAgIH07XG4gICAgY2hyb21hXzEuaGNsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaGNsJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQubGNoID0gbGNoMnJnYl8xO1xuICAgIGlucHV0LmZvcm1hdC5oY2wgPSBoY2wycmdiXzE7XG5cbiAgICBbJ2xjaCcsJ2hjbCddLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDIsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJHMoYXJncywgbSk7XG4gICAgICAgICAgICBpZiAodHlwZSRhKGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTsgfSk7XG5cbiAgICAvKipcbiAgICBcdFgxMSBjb2xvciBuYW1lc1xuXG4gICAgXHRodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNzdmctY29sb3JcbiAgICAqL1xuXG4gICAgdmFyIHczY3gxMSA9IHtcbiAgICAgICAgYWxpY2VibHVlOiAnI2YwZjhmZicsXG4gICAgICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgICAgICBhcXVhOiAnIzAwZmZmZicsXG4gICAgICAgIGFxdWFtYXJpbmU6ICcjN2ZmZmQ0JyxcbiAgICAgICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICAgICAgYmVpZ2U6ICcjZjVmNWRjJyxcbiAgICAgICAgYmlzcXVlOiAnI2ZmZTRjNCcsXG4gICAgICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgICAgIGJsYW5jaGVkYWxtb25kOiAnI2ZmZWJjZCcsXG4gICAgICAgIGJsdWU6ICcjMDAwMGZmJyxcbiAgICAgICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgICAgICBicm93bjogJyNhNTJhMmEnLFxuICAgICAgICBidXJseXdvb2Q6ICcjZGViODg3JyxcbiAgICAgICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgICAgIGNoYXJ0cmV1c2U6ICcjN2ZmZjAwJyxcbiAgICAgICAgY2hvY29sYXRlOiAnI2QyNjkxZScsXG4gICAgICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgICAgIGNvcm5mbG93ZXI6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybnNpbGs6ICcjZmZmOGRjJyxcbiAgICAgICAgY3JpbXNvbjogJyNkYzE0M2MnLFxuICAgICAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgICAgIGRhcmtibHVlOiAnIzAwMDA4YicsXG4gICAgICAgIGRhcmtjeWFuOiAnIzAwOGI4YicsXG4gICAgICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICAgICAgZGFya2dyYXk6ICcjYTlhOWE5JyxcbiAgICAgICAgZGFya2dyZWVuOiAnIzAwNjQwMCcsXG4gICAgICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgICAgICBkYXJrbWFnZW50YTogJyM4YjAwOGInLFxuICAgICAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgICAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgICAgIGRhcmtvcmNoaWQ6ICcjOTkzMmNjJyxcbiAgICAgICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgICAgICBkYXJrc2FsbW9uOiAnI2U5OTY3YScsXG4gICAgICAgIGRhcmtzZWFncmVlbjogJyM4ZmJjOGYnLFxuICAgICAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgICAgIGRhcmtzbGF0ZWdyYXk6ICcjMmY0ZjRmJyxcbiAgICAgICAgZGFya3NsYXRlZ3JleTogJyMyZjRmNGYnLFxuICAgICAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgICAgIGRhcmt2aW9sZXQ6ICcjOTQwMGQzJyxcbiAgICAgICAgZGVlcHBpbms6ICcjZmYxNDkzJyxcbiAgICAgICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICAgICAgZGltZ3JheTogJyM2OTY5NjknLFxuICAgICAgICBkaW1ncmV5OiAnIzY5Njk2OScsXG4gICAgICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICAgICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgICAgIGZsb3JhbHdoaXRlOiAnI2ZmZmFmMCcsXG4gICAgICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgICAgIGZ1Y2hzaWE6ICcjZmYwMGZmJyxcbiAgICAgICAgZ2FpbnNib3JvOiAnI2RjZGNkYycsXG4gICAgICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICAgICAgZ29sZDogJyNmZmQ3MDAnLFxuICAgICAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICAgICAgZ3JheTogJyM4MDgwODAnLFxuICAgICAgICBncmVlbjogJyMwMDgwMDAnLFxuICAgICAgICBncmVlbnllbGxvdzogJyNhZGZmMmYnLFxuICAgICAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgICAgIGhvbmV5ZGV3OiAnI2YwZmZmMCcsXG4gICAgICAgIGhvdHBpbms6ICcjZmY2OWI0JyxcbiAgICAgICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgICAgIGluZGlnbzogJyM0YjAwODInLFxuICAgICAgICBpdm9yeTogJyNmZmZmZjAnLFxuICAgICAgICBraGFraTogJyNmMGU2OGMnLFxuICAgICAgICBsYXNlcmxlbW9uOiAnI2ZmZmY1NCcsXG4gICAgICAgIGxhdmVuZGVyOiAnI2U2ZTZmYScsXG4gICAgICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICAgICAgbGF3bmdyZWVuOiAnIzdjZmMwMCcsXG4gICAgICAgIGxlbW9uY2hpZmZvbjogJyNmZmZhY2QnLFxuICAgICAgICBsaWdodGJsdWU6ICcjYWRkOGU2JyxcbiAgICAgICAgbGlnaHRjb3JhbDogJyNmMDgwODAnLFxuICAgICAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICAgICAgbGlnaHRnb2xkZW5yb2Q6ICcjZmFmYWQyJyxcbiAgICAgICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6ICcjZmFmYWQyJyxcbiAgICAgICAgbGlnaHRncmF5OiAnI2QzZDNkMycsXG4gICAgICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICAgICAgbGlnaHRncmV5OiAnI2QzZDNkMycsXG4gICAgICAgIGxpZ2h0cGluazogJyNmZmI2YzEnLFxuICAgICAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgICAgICBsaWdodHNlYWdyZWVuOiAnIzIwYjJhYScsXG4gICAgICAgIGxpZ2h0c2t5Ymx1ZTogJyM4N2NlZmEnLFxuICAgICAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHNsYXRlZ3JleTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHN0ZWVsYmx1ZTogJyNiMGM0ZGUnLFxuICAgICAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgICAgICBsaW1lOiAnIzAwZmYwMCcsXG4gICAgICAgIGxpbWVncmVlbjogJyMzMmNkMzInLFxuICAgICAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgICAgICBtYWdlbnRhOiAnI2ZmMDBmZicsXG4gICAgICAgIG1hcm9vbjogJyM4MDAwMDAnLFxuICAgICAgICBtYXJvb24yOiAnIzdmMDAwMCcsXG4gICAgICAgIG1hcm9vbjM6ICcjYjAzMDYwJyxcbiAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgICAgICBtZWRpdW1ibHVlOiAnIzAwMDBjZCcsXG4gICAgICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgICAgICBtZWRpdW1wdXJwbGU6ICcjOTM3MGRiJyxcbiAgICAgICAgbWVkaXVtc2VhZ3JlZW46ICcjM2NiMzcxJyxcbiAgICAgICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAnIzAwZmE5YScsXG4gICAgICAgIG1lZGl1bXR1cnF1b2lzZTogJyM0OGQxY2MnLFxuICAgICAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICAgICAgbWlkbmlnaHRibHVlOiAnIzE5MTk3MCcsXG4gICAgICAgIG1pbnRjcmVhbTogJyNmNWZmZmEnLFxuICAgICAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICAgICAgbW9jY2FzaW46ICcjZmZlNGI1JyxcbiAgICAgICAgbmF2YWpvd2hpdGU6ICcjZmZkZWFkJyxcbiAgICAgICAgbmF2eTogJyMwMDAwODAnLFxuICAgICAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgICAgIG9saXZlOiAnIzgwODAwMCcsXG4gICAgICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgICAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICAgICAgb3JhbmdlcmVkOiAnI2ZmNDUwMCcsXG4gICAgICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgICAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgICAgIHBhbGVncmVlbjogJyM5OGZiOTgnLFxuICAgICAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgICAgIHBhbGV2aW9sZXRyZWQ6ICcjZGI3MDkzJyxcbiAgICAgICAgcGFwYXlhd2hpcDogJyNmZmVmZDUnLFxuICAgICAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICAgICAgcGVydTogJyNjZDg1M2YnLFxuICAgICAgICBwaW5rOiAnI2ZmYzBjYicsXG4gICAgICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICAgICAgcG93ZGVyYmx1ZTogJyNiMGUwZTYnLFxuICAgICAgICBwdXJwbGU6ICcjODAwMDgwJyxcbiAgICAgICAgcHVycGxlMjogJyM3ZjAwN2YnLFxuICAgICAgICBwdXJwbGUzOiAnI2EwMjBmMCcsXG4gICAgICAgIHJlYmVjY2FwdXJwbGU6ICcjNjYzMzk5JyxcbiAgICAgICAgcmVkOiAnI2ZmMDAwMCcsXG4gICAgICAgIHJvc3licm93bjogJyNiYzhmOGYnLFxuICAgICAgICByb3lhbGJsdWU6ICcjNDE2OWUxJyxcbiAgICAgICAgc2FkZGxlYnJvd246ICcjOGI0NTEzJyxcbiAgICAgICAgc2FsbW9uOiAnI2ZhODA3MicsXG4gICAgICAgIHNhbmR5YnJvd246ICcjZjRhNDYwJyxcbiAgICAgICAgc2VhZ3JlZW46ICcjMmU4YjU3JyxcbiAgICAgICAgc2Vhc2hlbGw6ICcjZmZmNWVlJyxcbiAgICAgICAgc2llbm5hOiAnI2EwNTIyZCcsXG4gICAgICAgIHNpbHZlcjogJyNjMGMwYzAnLFxuICAgICAgICBza3libHVlOiAnIzg3Y2VlYicsXG4gICAgICAgIHNsYXRlYmx1ZTogJyM2YTVhY2QnLFxuICAgICAgICBzbGF0ZWdyYXk6ICcjNzA4MDkwJyxcbiAgICAgICAgc2xhdGVncmV5OiAnIzcwODA5MCcsXG4gICAgICAgIHNub3c6ICcjZmZmYWZhJyxcbiAgICAgICAgc3ByaW5nZ3JlZW46ICcjMDBmZjdmJyxcbiAgICAgICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgICAgIHRhbjogJyNkMmI0OGMnLFxuICAgICAgICB0ZWFsOiAnIzAwODA4MCcsXG4gICAgICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICAgICAgdG9tYXRvOiAnI2ZmNjM0NycsXG4gICAgICAgIHR1cnF1b2lzZTogJyM0MGUwZDAnLFxuICAgICAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICAgICAgd2hlYXQ6ICcjZjVkZWIzJyxcbiAgICAgICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICAgICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgICAgICB5ZWxsb3c6ICcjZmZmZjAwJyxcbiAgICAgICAgeWVsbG93Z3JlZW46ICcjOWFjZDMyJ1xuICAgIH07XG5cbiAgICB2YXIgdzNjeDExXzEgPSB3M2N4MTE7XG5cbiAgICB2YXIgdHlwZSRiID0gdXRpbHMudHlwZTtcblxuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGV4ID0gcmdiMmhleF8xKHRoaXMuX3JnYiwgJ3JnYicpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IE9iamVjdC5rZXlzKHczY3gxMV8xKTsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBuID0gbGlzdFtpXTtcblxuICAgICAgICAgICAgaWYgKHczY3gxMV8xW25dID09PSBoZXgpIHsgcmV0dXJuIG4udG9Mb3dlckNhc2UoKTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZXg7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5uYW1lZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh3M2N4MTFfMVtuYW1lXSkgeyByZXR1cm4gaGV4MnJnYl8xKHczY3gxMV8xW25hbWVdKTsgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY29sb3IgbmFtZTogJytuYW1lKTtcbiAgICB9O1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogNSxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICAgIHZhciByZXN0ID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSByZXN0WyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3QubGVuZ3RoICYmIHR5cGUkYihoKSA9PT0gJ3N0cmluZycgJiYgdzNjeDExXzFbaC50b0xvd2VyQ2FzZSgpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbmFtZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJHQgPSB1dGlscy51bnBhY2s7XG5cbiAgICB2YXIgcmdiMm51bSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJHQoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICByZXR1cm4gKHIgPDwgMTYpICsgKGcgPDwgOCkgKyBiO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMm51bV8xID0gcmdiMm51bTtcblxuICAgIHZhciB0eXBlJGMgPSB1dGlscy50eXBlO1xuXG4gICAgdmFyIG51bTJyZ2IgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgIGlmICh0eXBlJGMobnVtKSA9PSBcIm51bWJlclwiICYmIG51bSA+PSAwICYmIG51bSA8PSAweEZGRkZGRikge1xuICAgICAgICAgICAgdmFyIHIgPSBudW0gPj4gMTY7XG4gICAgICAgICAgICB2YXIgZyA9IChudW0gPj4gOCkgJiAweEZGO1xuICAgICAgICAgICAgdmFyIGIgPSBudW0gJiAweEZGO1xuICAgICAgICAgICAgcmV0dXJuIFtyLGcsYiwxXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIG51bSBjb2xvcjogXCIrbnVtKTtcbiAgICB9O1xuXG4gICAgdmFyIG51bTJyZ2JfMSA9IG51bTJyZ2I7XG5cbiAgICB2YXIgdHlwZSRkID0gdXRpbHMudHlwZTtcblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5udW0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJudW1fMSh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5udW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydudW0nXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5udW0gPSBudW0ycmdiXzE7XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiA1LFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGUkZChhcmdzWzBdKSA9PT0gJ251bWJlcicgJiYgYXJnc1swXSA+PSAwICYmIGFyZ3NbMF0gPD0gMHhGRkZGRkYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ251bSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1bnBhY2skdSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSRlID0gdXRpbHMudHlwZTtcbiAgICB2YXIgcm91bmQkNSA9IE1hdGgucm91bmQ7XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbihybmQpIHtcbiAgICAgICAgaWYgKCBybmQgPT09IHZvaWQgMCApIHJuZD10cnVlO1xuXG4gICAgICAgIGlmIChybmQgPT09IGZhbHNlKSB7IHJldHVybiB0aGlzLl9yZ2Iuc2xpY2UoMCwzKTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmdiLnNsaWNlKDAsMykubWFwKHJvdW5kJDUpO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5yZ2JhID0gZnVuY3Rpb24ocm5kKSB7XG4gICAgICAgIGlmICggcm5kID09PSB2b2lkIDAgKSBybmQ9dHJ1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fcmdiLnNsaWNlKDAsNCkubWFwKGZ1bmN0aW9uICh2LGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpPDMgPyAocm5kID09PSBmYWxzZSA/IHYgOiByb3VuZCQ1KHYpKSA6IHY7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5yZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydyZ2InXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5yZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJnYmEgPSB1bnBhY2skdShhcmdzLCAncmdiYScpO1xuICAgICAgICBpZiAocmdiYVszXSA9PT0gdW5kZWZpbmVkKSB7IHJnYmFbM10gPSAxOyB9XG4gICAgICAgIHJldHVybiByZ2JhO1xuICAgIH07XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAzLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayR1KGFyZ3MsICdyZ2JhJyk7XG4gICAgICAgICAgICBpZiAodHlwZSRlKGFyZ3MpID09PSAnYXJyYXknICYmIChhcmdzLmxlbmd0aCA9PT0gMyB8fFxuICAgICAgICAgICAgICAgIGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGUkZShhcmdzWzNdKSA9PSAnbnVtYmVyJyAmJiBhcmdzWzNdID49IDAgJiYgYXJnc1szXSA8PSAxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmdiJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLypcbiAgICAgKiBCYXNlZCBvbiBpbXBsZW1lbnRhdGlvbiBieSBOZWlsIEJhcnRsZXR0XG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL25laWxiYXJ0bGV0dC9jb2xvci10ZW1wZXJhdHVyZVxuICAgICAqL1xuXG4gICAgdmFyIGxvZyA9IE1hdGgubG9nO1xuXG4gICAgdmFyIHRlbXBlcmF0dXJlMnJnYiA9IGZ1bmN0aW9uIChrZWx2aW4pIHtcbiAgICAgICAgdmFyIHRlbXAgPSBrZWx2aW4gLyAxMDA7XG4gICAgICAgIHZhciByLGcsYjtcbiAgICAgICAgaWYgKHRlbXAgPCA2Nikge1xuICAgICAgICAgICAgciA9IDI1NTtcbiAgICAgICAgICAgIGcgPSAtMTU1LjI1NDg1NTYyNzA5MTc5IC0gMC40NDU5Njk1MDQ2OTU3OTEzMyAqIChnID0gdGVtcC0yKSArIDEwNC40OTIxNjE5OTM5Mzg4OCAqIGxvZyhnKTtcbiAgICAgICAgICAgIGIgPSB0ZW1wIDwgMjAgPyAwIDogLTI1NC43NjkzNTE4NDEyMDkwMiArIDAuODI3NDA5NjA2NDAwNzM5NSAqIChiID0gdGVtcC0xMCkgKyAxMTUuNjc5OTQ0MDEwNjYxNDcgKiBsb2coYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByID0gMzUxLjk3NjkwNTY2ODA1NjkzICsgMC4xMTQyMDY0NTM3ODQxNjUgKiAociA9IHRlbXAtNTUpIC0gNDAuMjUzNjYzMDkzMzIxMjcgKiBsb2cocik7XG4gICAgICAgICAgICBnID0gMzI1LjQ0OTQxMjU3MTE5NzQgKyAwLjA3OTQzNDU2NTM2NjYyMzQyICogKGcgPSB0ZW1wLTUwKSAtIDI4LjA4NTI5NjM1MDc5NTcgKiBsb2coZyk7XG4gICAgICAgICAgICBiID0gMjU1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcixnLGIsMV07XG4gICAgfTtcblxuICAgIHZhciB0ZW1wZXJhdHVyZTJyZ2JfMSA9IHRlbXBlcmF0dXJlMnJnYjtcblxuICAgIC8qXG4gICAgICogQmFzZWQgb24gaW1wbGVtZW50YXRpb24gYnkgTmVpbCBCYXJ0bGV0dFxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZWlsYmFydGxldHQvY29sb3ItdGVtcGVyYXR1cmVcbiAgICAgKiovXG5cblxuICAgIHZhciB1bnBhY2skdiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgcm91bmQkNiA9IE1hdGgucm91bmQ7XG5cbiAgICB2YXIgcmdiMnRlbXBlcmF0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZ2IgPSB1bnBhY2skdihhcmdzLCAncmdiJyk7XG4gICAgICAgIHZhciByID0gcmdiWzBdLCBiID0gcmdiWzJdO1xuICAgICAgICB2YXIgbWluVGVtcCA9IDEwMDA7XG4gICAgICAgIHZhciBtYXhUZW1wID0gNDAwMDA7XG4gICAgICAgIHZhciBlcHMgPSAwLjQ7XG4gICAgICAgIHZhciB0ZW1wO1xuICAgICAgICB3aGlsZSAobWF4VGVtcCAtIG1pblRlbXAgPiBlcHMpIHtcbiAgICAgICAgICAgIHRlbXAgPSAobWF4VGVtcCArIG1pblRlbXApICogMC41O1xuICAgICAgICAgICAgdmFyIHJnYiQxID0gdGVtcGVyYXR1cmUycmdiXzEodGVtcCk7XG4gICAgICAgICAgICBpZiAoKHJnYiQxWzJdIC8gcmdiJDFbMF0pID49IChiIC8gcikpIHtcbiAgICAgICAgICAgICAgICBtYXhUZW1wID0gdGVtcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluVGVtcCA9IHRlbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdW5kJDYodGVtcCk7XG4gICAgfTtcblxuICAgIHZhciByZ2IydGVtcGVyYXR1cmVfMSA9IHJnYjJ0ZW1wZXJhdHVyZTtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLnRlbXAgPVxuICAgIENvbG9yXzEucHJvdG90eXBlLmtlbHZpbiA9XG4gICAgQ29sb3JfMS5wcm90b3R5cGUudGVtcGVyYXR1cmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJ0ZW1wZXJhdHVyZV8xKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYV8xLnRlbXAgPVxuICAgIGNocm9tYV8xLmtlbHZpbiA9XG4gICAgY2hyb21hXzEudGVtcGVyYXR1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWyd0ZW1wJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQudGVtcCA9XG4gICAgaW5wdXQuZm9ybWF0LmtlbHZpbiA9XG4gICAgaW5wdXQuZm9ybWF0LnRlbXBlcmF0dXJlID0gdGVtcGVyYXR1cmUycmdiXzE7XG5cbiAgICB2YXIgdHlwZSRmID0gdXRpbHMudHlwZTtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmFscGhhID0gZnVuY3Rpb24oYSwgbXV0YXRlKSB7XG4gICAgICAgIGlmICggbXV0YXRlID09PSB2b2lkIDAgKSBtdXRhdGU9ZmFsc2U7XG5cbiAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCAmJiB0eXBlJGYoYSkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAobXV0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmdiWzNdID0gYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShbdGhpcy5fcmdiWzBdLCB0aGlzLl9yZ2JbMV0sIHRoaXMuX3JnYlsyXSwgYV0sICdyZ2InKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmdiWzNdO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5jbGlwcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZ2IuX2NsaXBwZWQgfHwgZmFsc2U7XG4gICAgfTtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmRhcmtlbiA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgIFx0aWYgKCBhbW91bnQgPT09IHZvaWQgMCApIGFtb3VudD0xO1xuXG4gICAgXHR2YXIgbWUgPSB0aGlzO1xuICAgIFx0dmFyIGxhYiA9IG1lLmxhYigpO1xuICAgIFx0bGFiWzBdIC09IGxhYkNvbnN0YW50cy5LbiAqIGFtb3VudDtcbiAgICBcdHJldHVybiBuZXcgQ29sb3JfMShsYWIsICdsYWInKS5hbHBoYShtZS5hbHBoYSgpLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICBcdGlmICggYW1vdW50ID09PSB2b2lkIDAgKSBhbW91bnQ9MTtcblxuICAgIFx0cmV0dXJuIHRoaXMuZGFya2VuKC1hbW91bnQpO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5kYXJrZXIgPSBDb2xvcl8xLnByb3RvdHlwZS5kYXJrZW47XG4gICAgQ29sb3JfMS5wcm90b3R5cGUuYnJpZ2h0ZXIgPSBDb2xvcl8xLnByb3RvdHlwZS5icmlnaHRlbjtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG1jKSB7XG4gICAgICAgIHZhciByZWYgPSBtYy5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgbW9kZSA9IHJlZlswXTtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSByZWZbMV07XG4gICAgICAgIHZhciBzcmMgPSB0aGlzW21vZGVdKCk7XG4gICAgICAgIGlmIChjaGFubmVsKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG1vZGUuaW5kZXhPZihjaGFubmVsKTtcbiAgICAgICAgICAgIGlmIChpID4gLTEpIHsgcmV0dXJuIHNyY1tpXTsgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcInVua25vd24gY2hhbm5lbCBcIiArIGNoYW5uZWwgKyBcIiBpbiBtb2RlIFwiICsgbW9kZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNyYztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdHlwZSRnID0gdXRpbHMudHlwZTtcbiAgICB2YXIgcG93JDIgPSBNYXRoLnBvdztcblxuICAgIHZhciBFUFMgPSAxZS03O1xuICAgIHZhciBNQVhfSVRFUiA9IDIwO1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUubHVtaW5hbmNlID0gZnVuY3Rpb24obHVtKSB7XG4gICAgICAgIGlmIChsdW0gIT09IHVuZGVmaW5lZCAmJiB0eXBlJGcobHVtKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChsdW0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gcHVyZSBibGFja1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShbMCwwLDAsdGhpcy5fcmdiWzNdXSwgJ3JnYicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGx1bSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBwdXJlIHdoaXRlXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKFsyNTUsMjU1LDI1NSx0aGlzLl9yZ2JbM11dLCAncmdiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb21wdXRlIG5ldyBjb2xvciB1c2luZy4uLlxuICAgICAgICAgICAgdmFyIGN1cl9sdW0gPSB0aGlzLmx1bWluYW5jZSgpO1xuICAgICAgICAgICAgdmFyIG1vZGUgPSAncmdiJztcbiAgICAgICAgICAgIHZhciBtYXhfaXRlciA9IE1BWF9JVEVSO1xuXG4gICAgICAgICAgICB2YXIgdGVzdCA9IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWlkID0gbG93LmludGVycG9sYXRlKGhpZ2gsIDAuNSwgbW9kZSk7XG4gICAgICAgICAgICAgICAgdmFyIGxtID0gbWlkLmx1bWluYW5jZSgpO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhsdW0gLSBsbSkgPCBFUFMgfHwgIW1heF9pdGVyLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2UgZW5vdWdoXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsbSA+IGx1bSA/IHRlc3QobG93LCBtaWQpIDogdGVzdChtaWQsIGhpZ2gpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHJnYiA9IChjdXJfbHVtID4gbHVtID8gdGVzdChuZXcgQ29sb3JfMShbMCwwLDBdKSwgdGhpcykgOiB0ZXN0KHRoaXMsIG5ldyBDb2xvcl8xKFsyNTUsMjU1LDI1NV0pKSkucmdiKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEocmdiLmNvbmNhdCggW3RoaXMuX3JnYlszXV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmdiMmx1bWluYW5jZS5hcHBseSh2b2lkIDAsICh0aGlzLl9yZ2IpLnNsaWNlKDAsMykpO1xuICAgIH07XG5cblxuICAgIHZhciByZ2IybHVtaW5hbmNlID0gZnVuY3Rpb24gKHIsZyxiKSB7XG4gICAgICAgIC8vIHJlbGF0aXZlIGx1bWluYW5jZVxuICAgICAgICAvLyBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuICAgICAgICByID0gbHVtaW5hbmNlX3gocik7XG4gICAgICAgIGcgPSBsdW1pbmFuY2VfeChnKTtcbiAgICAgICAgYiA9IGx1bWluYW5jZV94KGIpO1xuICAgICAgICByZXR1cm4gMC4yMTI2ICogciArIDAuNzE1MiAqIGcgKyAwLjA3MjIgKiBiO1xuICAgIH07XG5cbiAgICB2YXIgbHVtaW5hbmNlX3ggPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB4IC89IDI1NTtcbiAgICAgICAgcmV0dXJuIHggPD0gMC4wMzkyOCA/IHgvMTIuOTIgOiBwb3ckMigoeCswLjA1NSkvMS4wNTUsIDIuNCk7XG4gICAgfTtcblxuICAgIHZhciBpbnRlcnBvbGF0b3IgPSB7fTtcblxuICAgIHZhciB0eXBlJGggPSB1dGlscy50eXBlO1xuXG5cbiAgICB2YXIgbWl4ID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgaWYgKCBmID09PSB2b2lkIDAgKSBmPTAuNTtcbiAgICAgICAgdmFyIHJlc3QgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDM7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDMgXTtcblxuICAgICAgICB2YXIgbW9kZSA9IHJlc3RbMF0gfHwgJ2xyZ2InO1xuICAgICAgICBpZiAoIWludGVycG9sYXRvclttb2RlXSAmJiAhcmVzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGZhbGwgYmFjayB0byB0aGUgZmlyc3Qgc3VwcG9ydGVkIG1vZGVcbiAgICAgICAgICAgIG1vZGUgPSBPYmplY3Qua2V5cyhpbnRlcnBvbGF0b3IpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW50ZXJwb2xhdG9yW21vZGVdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwiaW50ZXJwb2xhdGlvbiBtb2RlIFwiICsgbW9kZSArIFwiIGlzIG5vdCBkZWZpbmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSRoKGNvbDEpICE9PSAnb2JqZWN0JykgeyBjb2wxID0gbmV3IENvbG9yXzEoY29sMSk7IH1cbiAgICAgICAgaWYgKHR5cGUkaChjb2wyKSAhPT0gJ29iamVjdCcpIHsgY29sMiA9IG5ldyBDb2xvcl8xKGNvbDIpOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JbbW9kZV0oY29sMSwgY29sMiwgZilcbiAgICAgICAgICAgIC5hbHBoYShjb2wxLmFscGhhKCkgKyBmICogKGNvbDIuYWxwaGEoKSAtIGNvbDEuYWxwaGEoKSkpO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5taXggPVxuICAgIENvbG9yXzEucHJvdG90eXBlLmludGVycG9sYXRlID0gZnVuY3Rpb24oY29sMiwgZikge1xuICAgIFx0aWYgKCBmID09PSB2b2lkIDAgKSBmPTAuNTtcbiAgICBcdHZhciByZXN0ID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIFx0d2hpbGUgKCBsZW4tLSA+IDAgKSByZXN0WyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMiBdO1xuXG4gICAgXHRyZXR1cm4gbWl4LmFwcGx5KHZvaWQgMCwgWyB0aGlzLCBjb2wyLCBmIF0uY29uY2F0KCByZXN0ICkpO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5wcmVtdWx0aXBseSA9IGZ1bmN0aW9uKG11dGF0ZSkge1xuICAgIFx0aWYgKCBtdXRhdGUgPT09IHZvaWQgMCApIG11dGF0ZT1mYWxzZTtcblxuICAgIFx0dmFyIHJnYiA9IHRoaXMuX3JnYjtcbiAgICBcdHZhciBhID0gcmdiWzNdO1xuICAgIFx0aWYgKG11dGF0ZSkge1xuICAgIFx0XHR0aGlzLl9yZ2IgPSBbcmdiWzBdKmEsIHJnYlsxXSphLCByZ2JbMl0qYSwgYV07XG4gICAgXHRcdHJldHVybiB0aGlzO1xuICAgIFx0fSBlbHNlIHtcbiAgICBcdFx0cmV0dXJuIG5ldyBDb2xvcl8xKFtyZ2JbMF0qYSwgcmdiWzFdKmEsIHJnYlsyXSphLCBhXSwgJ3JnYicpO1xuICAgIFx0fVxuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5zYXR1cmF0ZSA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgIFx0aWYgKCBhbW91bnQgPT09IHZvaWQgMCApIGFtb3VudD0xO1xuXG4gICAgXHR2YXIgbWUgPSB0aGlzO1xuICAgIFx0dmFyIGxjaCA9IG1lLmxjaCgpO1xuICAgIFx0bGNoWzFdICs9IGxhYkNvbnN0YW50cy5LbiAqIGFtb3VudDtcbiAgICBcdGlmIChsY2hbMV0gPCAwKSB7IGxjaFsxXSA9IDA7IH1cbiAgICBcdHJldHVybiBuZXcgQ29sb3JfMShsY2gsICdsY2gnKS5hbHBoYShtZS5hbHBoYSgpLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuZGVzYXR1cmF0ZSA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgIFx0aWYgKCBhbW91bnQgPT09IHZvaWQgMCApIGFtb3VudD0xO1xuXG4gICAgXHRyZXR1cm4gdGhpcy5zYXR1cmF0ZSgtYW1vdW50KTtcbiAgICB9O1xuXG4gICAgdmFyIHR5cGUkaSA9IHV0aWxzLnR5cGU7XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihtYywgdmFsdWUsIG11dGF0ZSkge1xuICAgICAgICBpZiAoIG11dGF0ZSA9PT0gdm9pZCAwICkgbXV0YXRlPWZhbHNlO1xuXG4gICAgICAgIHZhciByZWYgPSBtYy5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgbW9kZSA9IHJlZlswXTtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSByZWZbMV07XG4gICAgICAgIHZhciBzcmMgPSB0aGlzW21vZGVdKCk7XG4gICAgICAgIGlmIChjaGFubmVsKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG1vZGUuaW5kZXhPZihjaGFubmVsKTtcbiAgICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSRpKHZhbHVlKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godmFsdWUuY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcrJzogc3JjW2ldICs9ICt2YWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICctJzogc3JjW2ldICs9ICt2YWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcqJzogc3JjW2ldICo9ICsodmFsdWUuc3Vic3RyKDEpKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcvJzogc3JjW2ldIC89ICsodmFsdWUuc3Vic3RyKDEpKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBzcmNbaV0gPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUkaSh2YWx1ZSkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHNyY1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHZhbHVlIGZvciBDb2xvci5zZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvdXQgPSBuZXcgQ29sb3JfMShzcmMsIG1vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChtdXRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmdiID0gb3V0Ll9yZ2I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcInVua25vd24gY2hhbm5lbCBcIiArIGNoYW5uZWwgKyBcIiBpbiBtb2RlIFwiICsgbW9kZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNyYztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmdiJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgICAgICB2YXIgeHl6MCA9IGNvbDEuX3JnYjtcbiAgICAgICAgdmFyIHh5ejEgPSBjb2wyLl9yZ2I7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShcbiAgICAgICAgICAgIHh5ejBbMF0gKyBmICogKHh5ejFbMF0teHl6MFswXSksXG4gICAgICAgICAgICB4eXowWzFdICsgZiAqICh4eXoxWzFdLXh5ejBbMV0pLFxuICAgICAgICAgICAgeHl6MFsyXSArIGYgKiAoeHl6MVsyXS14eXowWzJdKSxcbiAgICAgICAgICAgICdyZ2InXG4gICAgICAgIClcbiAgICB9O1xuXG4gICAgLy8gcmVnaXN0ZXIgaW50ZXJwb2xhdG9yXG4gICAgaW50ZXJwb2xhdG9yLnJnYiA9IHJnYiQxO1xuXG4gICAgdmFyIHNxcnQkMiA9IE1hdGguc3FydDtcbiAgICB2YXIgcG93JDMgPSBNYXRoLnBvdztcblxuICAgIHZhciBscmdiID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgdmFyIHJlZiA9IGNvbDEuX3JnYjtcbiAgICAgICAgdmFyIHgxID0gcmVmWzBdO1xuICAgICAgICB2YXIgeTEgPSByZWZbMV07XG4gICAgICAgIHZhciB6MSA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gY29sMi5fcmdiO1xuICAgICAgICB2YXIgeDIgPSByZWYkMVswXTtcbiAgICAgICAgdmFyIHkyID0gcmVmJDFbMV07XG4gICAgICAgIHZhciB6MiA9IHJlZiQxWzJdO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoXG4gICAgICAgICAgICBzcXJ0JDIocG93JDMoeDEsMikgKiAoMS1mKSArIHBvdyQzKHgyLDIpICogZiksXG4gICAgICAgICAgICBzcXJ0JDIocG93JDMoeTEsMikgKiAoMS1mKSArIHBvdyQzKHkyLDIpICogZiksXG4gICAgICAgICAgICBzcXJ0JDIocG93JDMoejEsMikgKiAoMS1mKSArIHBvdyQzKHoyLDIpICogZiksXG4gICAgICAgICAgICAncmdiJ1xuICAgICAgICApXG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5scmdiID0gbHJnYjtcblxuICAgIHZhciBsYWIkMSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgICAgIHZhciB4eXowID0gY29sMS5sYWIoKTtcbiAgICAgICAgdmFyIHh5ejEgPSBjb2wyLmxhYigpO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoXG4gICAgICAgICAgICB4eXowWzBdICsgZiAqICh4eXoxWzBdLXh5ejBbMF0pLFxuICAgICAgICAgICAgeHl6MFsxXSArIGYgKiAoeHl6MVsxXS14eXowWzFdKSxcbiAgICAgICAgICAgIHh5ejBbMl0gKyBmICogKHh5ejFbMl0teHl6MFsyXSksXG4gICAgICAgICAgICAnbGFiJ1xuICAgICAgICApXG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5sYWIgPSBsYWIkMTtcblxuICAgIHZhciBfaHN4ID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYsIG0pIHtcbiAgICAgICAgdmFyIGFzc2lnbiwgYXNzaWduJDE7XG5cbiAgICAgICAgdmFyIHh5ejAsIHh5ejE7XG4gICAgICAgIGlmIChtID09PSAnaHNsJykge1xuICAgICAgICAgICAgeHl6MCA9IGNvbDEuaHNsKCk7XG4gICAgICAgICAgICB4eXoxID0gY29sMi5oc2woKTtcbiAgICAgICAgfSBlbHNlIGlmIChtID09PSAnaHN2Jykge1xuICAgICAgICAgICAgeHl6MCA9IGNvbDEuaHN2KCk7XG4gICAgICAgICAgICB4eXoxID0gY29sMi5oc3YoKTtcbiAgICAgICAgfSBlbHNlIGlmIChtID09PSAnaGNnJykge1xuICAgICAgICAgICAgeHl6MCA9IGNvbDEuaGNnKCk7XG4gICAgICAgICAgICB4eXoxID0gY29sMi5oY2coKTtcbiAgICAgICAgfSBlbHNlIGlmIChtID09PSAnaHNpJykge1xuICAgICAgICAgICAgeHl6MCA9IGNvbDEuaHNpKCk7XG4gICAgICAgICAgICB4eXoxID0gY29sMi5oc2koKTtcbiAgICAgICAgfSBlbHNlIGlmIChtID09PSAnbGNoJyB8fCBtID09PSAnaGNsJykge1xuICAgICAgICAgICAgbSA9ICdoY2wnO1xuICAgICAgICAgICAgeHl6MCA9IGNvbDEuaGNsKCk7XG4gICAgICAgICAgICB4eXoxID0gY29sMi5oY2woKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBodWUwLCBodWUxLCBzYXQwLCBzYXQxLCBsYnYwLCBsYnYxO1xuICAgICAgICBpZiAobS5zdWJzdHIoMCwgMSkgPT09ICdoJykge1xuICAgICAgICAgICAgKGFzc2lnbiA9IHh5ejAsIGh1ZTAgPSBhc3NpZ25bMF0sIHNhdDAgPSBhc3NpZ25bMV0sIGxidjAgPSBhc3NpZ25bMl0pO1xuICAgICAgICAgICAgKGFzc2lnbiQxID0geHl6MSwgaHVlMSA9IGFzc2lnbiQxWzBdLCBzYXQxID0gYXNzaWduJDFbMV0sIGxidjEgPSBhc3NpZ24kMVsyXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2F0LCBodWUsIGxidiwgZGg7XG5cbiAgICAgICAgaWYgKCFpc05hTihodWUwKSAmJiAhaXNOYU4oaHVlMSkpIHtcbiAgICAgICAgICAgIC8vIGJvdGggY29sb3JzIGhhdmUgaHVlXG4gICAgICAgICAgICBpZiAoaHVlMSA+IGh1ZTAgJiYgaHVlMSAtIGh1ZTAgPiAxODApIHtcbiAgICAgICAgICAgICAgICBkaCA9IGh1ZTEtKGh1ZTArMzYwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaHVlMSA8IGh1ZTAgJiYgaHVlMCAtIGh1ZTEgPiAxODApIHtcbiAgICAgICAgICAgICAgICBkaCA9IGh1ZTErMzYwLWh1ZTA7XG4gICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgZGggPSBodWUxIC0gaHVlMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh1ZSA9IGh1ZTAgKyBmICogZGg7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKGh1ZTApKSB7XG4gICAgICAgICAgICBodWUgPSBodWUwO1xuICAgICAgICAgICAgaWYgKChsYnYxID09IDEgfHwgbGJ2MSA9PSAwKSAmJiBtICE9ICdoc3YnKSB7IHNhdCA9IHNhdDA7IH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNOYU4oaHVlMSkpIHtcbiAgICAgICAgICAgIGh1ZSA9IGh1ZTE7XG4gICAgICAgICAgICBpZiAoKGxidjAgPT0gMSB8fCBsYnYwID09IDApICYmIG0gIT0gJ2hzdicpIHsgc2F0ID0gc2F0MTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHVlID0gTnVtYmVyLk5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzYXQgPT09IHVuZGVmaW5lZCkgeyBzYXQgPSBzYXQwICsgZiAqIChzYXQxIC0gc2F0MCk7IH1cbiAgICAgICAgbGJ2ID0gbGJ2MCArIGYgKiAobGJ2MS1sYnYwKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKFtodWUsIHNhdCwgbGJ2XSwgbSk7XG4gICAgfTtcblxuICAgIHZhciBsY2gkMSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgXHRyZXR1cm4gX2hzeChjb2wxLCBjb2wyLCBmLCAnbGNoJyk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5sY2ggPSBsY2gkMTtcbiAgICBpbnRlcnBvbGF0b3IuaGNsID0gbGNoJDE7XG5cbiAgICB2YXIgbnVtJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgICAgICB2YXIgYzEgPSBjb2wxLm51bSgpO1xuICAgICAgICB2YXIgYzIgPSBjb2wyLm51bSgpO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoYzEgKyBmICogKGMyLWMxKSwgJ251bScpXG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5udW0gPSBudW0kMTtcblxuICAgIHZhciBoY2ckMSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgXHRyZXR1cm4gX2hzeChjb2wxLCBjb2wyLCBmLCAnaGNnJyk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5oY2cgPSBoY2ckMTtcblxuICAgIHZhciBoc2kkMSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgXHRyZXR1cm4gX2hzeChjb2wxLCBjb2wyLCBmLCAnaHNpJyk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5oc2kgPSBoc2kkMTtcblxuICAgIHZhciBoc2wkMSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgXHRyZXR1cm4gX2hzeChjb2wxLCBjb2wyLCBmLCAnaHNsJyk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5oc2wgPSBoc2wkMTtcblxuICAgIHZhciBoc3YkMSA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgXHRyZXR1cm4gX2hzeChjb2wxLCBjb2wyLCBmLCAnaHN2Jyk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5oc3YgPSBoc3YkMTtcblxuICAgIHZhciBjbGlwX3JnYiQyID0gdXRpbHMuY2xpcF9yZ2I7XG4gICAgdmFyIHBvdyQ0ID0gTWF0aC5wb3c7XG4gICAgdmFyIHNxcnQkMyA9IE1hdGguc3FydDtcbiAgICB2YXIgUEkkMSA9IE1hdGguUEk7XG4gICAgdmFyIGNvcyQyID0gTWF0aC5jb3M7XG4gICAgdmFyIHNpbiQxID0gTWF0aC5zaW47XG4gICAgdmFyIGF0YW4yJDEgPSBNYXRoLmF0YW4yO1xuXG4gICAgdmFyIGF2ZXJhZ2UgPSBmdW5jdGlvbiAoY29sb3JzLCBtb2RlLCB3ZWlnaHRzKSB7XG4gICAgICAgIGlmICggbW9kZSA9PT0gdm9pZCAwICkgbW9kZT0nbHJnYic7XG4gICAgICAgIGlmICggd2VpZ2h0cyA9PT0gdm9pZCAwICkgd2VpZ2h0cz1udWxsO1xuXG4gICAgICAgIHZhciBsID0gY29sb3JzLmxlbmd0aDtcbiAgICAgICAgaWYgKCF3ZWlnaHRzKSB7IHdlaWdodHMgPSBBcnJheS5mcm9tKG5ldyBBcnJheShsKSkubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0pOyB9XG4gICAgICAgIC8vIG5vcm1hbGl6ZSB3ZWlnaHRzXG4gICAgICAgIHZhciBrID0gbCAvIHdlaWdodHMucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgKyBiOyB9KTtcbiAgICAgICAgd2VpZ2h0cy5mb3JFYWNoKGZ1bmN0aW9uICh3LGkpIHsgd2VpZ2h0c1tpXSAqPSBrOyB9KTtcbiAgICAgICAgLy8gY29udmVydCBjb2xvcnMgdG8gQ29sb3Igb2JqZWN0c1xuICAgICAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZXcgQ29sb3JfMShjKTsgfSk7XG4gICAgICAgIGlmIChtb2RlID09PSAnbHJnYicpIHtcbiAgICAgICAgICAgIHJldHVybiBfYXZlcmFnZV9scmdiKGNvbG9ycywgd2VpZ2h0cylcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlyc3QgPSBjb2xvcnMuc2hpZnQoKTtcbiAgICAgICAgdmFyIHh5eiA9IGZpcnN0LmdldChtb2RlKTtcbiAgICAgICAgdmFyIGNudCA9IFtdO1xuICAgICAgICB2YXIgZHggPSAwO1xuICAgICAgICB2YXIgZHkgPSAwO1xuICAgICAgICAvLyBpbml0aWFsIGNvbG9yXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTx4eXoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHh5eltpXSA9ICh4eXpbaV0gfHwgMCkgKiB3ZWlnaHRzWzBdO1xuICAgICAgICAgICAgY250LnB1c2goaXNOYU4oeHl6W2ldKSA/IDAgOiB3ZWlnaHRzWzBdKTtcbiAgICAgICAgICAgIGlmIChtb2RlLmNoYXJBdChpKSA9PT0gJ2gnICYmICFpc05hTih4eXpbaV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIEEgPSB4eXpbaV0gLyAxODAgKiBQSSQxO1xuICAgICAgICAgICAgICAgIGR4ICs9IGNvcyQyKEEpICogd2VpZ2h0c1swXTtcbiAgICAgICAgICAgICAgICBkeSArPSBzaW4kMShBKSAqIHdlaWdodHNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWxwaGEgPSBmaXJzdC5hbHBoYSgpICogd2VpZ2h0c1swXTtcbiAgICAgICAgY29sb3JzLmZvckVhY2goZnVuY3Rpb24gKGMsY2kpIHtcbiAgICAgICAgICAgIHZhciB4eXoyID0gYy5nZXQobW9kZSk7XG4gICAgICAgICAgICBhbHBoYSArPSBjLmFscGhhKCkgKiB3ZWlnaHRzW2NpKzFdO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHh5ei5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oeHl6MltpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY250W2ldICs9IHdlaWdodHNbY2krMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlLmNoYXJBdChpKSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgQSA9IHh5ejJbaV0gLyAxODAgKiBQSSQxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHggKz0gY29zJDIoQSkgKiB3ZWlnaHRzW2NpKzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHkgKz0gc2luJDEoQSkgKiB3ZWlnaHRzW2NpKzFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeHl6W2ldICs9IHh5ejJbaV0gKiB3ZWlnaHRzW2NpKzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBpJDE9MDsgaSQxPHh5ei5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICBpZiAobW9kZS5jaGFyQXQoaSQxKSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICAgICAgdmFyIEEkMSA9IGF0YW4yJDEoZHkgLyBjbnRbaSQxXSwgZHggLyBjbnRbaSQxXSkgLyBQSSQxICogMTgwO1xuICAgICAgICAgICAgICAgIHdoaWxlIChBJDEgPCAwKSB7IEEkMSArPSAzNjA7IH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoQSQxID49IDM2MCkgeyBBJDEgLT0gMzYwOyB9XG4gICAgICAgICAgICAgICAgeHl6W2kkMV0gPSBBJDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHh5eltpJDFdID0geHl6W2kkMV0vY250W2kkMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWxwaGEgLz0gbDtcbiAgICAgICAgcmV0dXJuIChuZXcgQ29sb3JfMSh4eXosIG1vZGUpKS5hbHBoYShhbHBoYSA+IDAuOTk5OTkgPyAxIDogYWxwaGEsIHRydWUpO1xuICAgIH07XG5cblxuICAgIHZhciBfYXZlcmFnZV9scmdiID0gZnVuY3Rpb24gKGNvbG9ycywgd2VpZ2h0cykge1xuICAgICAgICB2YXIgbCA9IGNvbG9ycy5sZW5ndGg7XG4gICAgICAgIHZhciB4eXogPSBbMCwwLDAsMF07XG4gICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbCA9IGNvbG9yc1tpXTtcbiAgICAgICAgICAgIHZhciBmID0gd2VpZ2h0c1tpXSAvIGw7XG4gICAgICAgICAgICB2YXIgcmdiID0gY29sLl9yZ2I7XG4gICAgICAgICAgICB4eXpbMF0gKz0gcG93JDQocmdiWzBdLDIpICogZjtcbiAgICAgICAgICAgIHh5elsxXSArPSBwb3ckNChyZ2JbMV0sMikgKiBmO1xuICAgICAgICAgICAgeHl6WzJdICs9IHBvdyQ0KHJnYlsyXSwyKSAqIGY7XG4gICAgICAgICAgICB4eXpbM10gKz0gcmdiWzNdICogZjtcbiAgICAgICAgfVxuICAgICAgICB4eXpbMF0gPSBzcXJ0JDMoeHl6WzBdKTtcbiAgICAgICAgeHl6WzFdID0gc3FydCQzKHh5elsxXSk7XG4gICAgICAgIHh5elsyXSA9IHNxcnQkMyh4eXpbMl0pO1xuICAgICAgICBpZiAoeHl6WzNdID4gMC45OTk5OTk5KSB7IHh5elszXSA9IDE7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKGNsaXBfcmdiJDIoeHl6KSk7XG4gICAgfTtcblxuICAgIC8vIG1pbmltYWwgbXVsdGktcHVycG9zZSBpbnRlcmZhY2VcblxuICAgIC8vIEByZXF1aXJlcyB1dGlscyBjb2xvciBhbmFseXplXG5cblxuICAgIHZhciB0eXBlJGogPSB1dGlscy50eXBlO1xuXG4gICAgdmFyIHBvdyQ1ID0gTWF0aC5wb3c7XG5cbiAgICB2YXIgc2NhbGUgPSBmdW5jdGlvbihjb2xvcnMpIHtcblxuICAgICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICB2YXIgX21vZGUgPSAncmdiJztcbiAgICAgICAgdmFyIF9uYWNvbCA9IGNocm9tYV8xKCcjY2NjJyk7XG4gICAgICAgIHZhciBfc3ByZWFkID0gMDtcbiAgICAgICAgLy8gY29uc3QgX2ZpeGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBfZG9tYWluID0gWzAsIDFdO1xuICAgICAgICB2YXIgX3BvcyA9IFtdO1xuICAgICAgICB2YXIgX3BhZGRpbmcgPSBbMCwwXTtcbiAgICAgICAgdmFyIF9jbGFzc2VzID0gZmFsc2U7XG4gICAgICAgIHZhciBfY29sb3JzID0gW107XG4gICAgICAgIHZhciBfb3V0ID0gZmFsc2U7XG4gICAgICAgIHZhciBfbWluID0gMDtcbiAgICAgICAgdmFyIF9tYXggPSAxO1xuICAgICAgICB2YXIgX2NvcnJlY3RMaWdodG5lc3MgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9jb2xvckNhY2hlID0ge307XG4gICAgICAgIHZhciBfdXNlQ2FjaGUgPSB0cnVlO1xuICAgICAgICB2YXIgX2dhbW1hID0gMTtcblxuICAgICAgICAvLyBwcml2YXRlIG1ldGhvZHNcblxuICAgICAgICB2YXIgc2V0Q29sb3JzID0gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMgfHwgWycjZmZmJywgJyMwMDAnXTtcbiAgICAgICAgICAgIGlmIChjb2xvcnMgJiYgdHlwZSRqKGNvbG9ycykgPT09ICdzdHJpbmcnICYmIGNocm9tYV8xLmJyZXdlciAmJlxuICAgICAgICAgICAgICAgIGNocm9tYV8xLmJyZXdlcltjb2xvcnMudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgICAgICAgICBjb2xvcnMgPSBjaHJvbWFfMS5icmV3ZXJbY29sb3JzLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUkaihjb2xvcnMpID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHNpbmdsZSBjb2xvclxuICAgICAgICAgICAgICAgIGlmIChjb2xvcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9ycyA9IFtjb2xvcnNbMF0sIGNvbG9yc1swXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IG9mIHRoZSBjb2xvcnNcbiAgICAgICAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgLy8gY29udmVydCB0byBjaHJvbWEgY2xhc3Nlc1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGM9MDsgYzxjb2xvcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzW2NdID0gY2hyb21hXzEoY29sb3JzW2NdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYXV0by1maWxsIGNvbG9yIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgX3Bvcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGMkMT0wOyBjJDE8Y29sb3JzLmxlbmd0aDsgYyQxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgX3Bvcy5wdXNoKGMkMS8oY29sb3JzLmxlbmd0aC0xKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXRDYWNoZSgpO1xuICAgICAgICAgICAgcmV0dXJuIF9jb2xvcnMgPSBjb2xvcnM7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENsYXNzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChfY2xhc3NlcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBfY2xhc3Nlcy5sZW5ndGgtMTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBuICYmIHZhbHVlID49IF9jbGFzc2VzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGktMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0TWFwTGlnaHRuZXNzID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH07XG4gICAgICAgIHZhciB0TWFwRG9tYWluID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH07XG5cbiAgICAgICAgLy8gY29uc3QgY2xhc3NpZnlWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICBsZXQgdmFsID0gdmFsdWU7XG4gICAgICAgIC8vICAgICBpZiAoX2NsYXNzZXMubGVuZ3RoID4gMikge1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IG4gPSBfY2xhc3Nlcy5sZW5ndGgtMTtcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBpID0gZ2V0Q2xhc3ModmFsdWUpO1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IG1pbmMgPSBfY2xhc3Nlc1swXSArICgoX2NsYXNzZXNbMV0tX2NsYXNzZXNbMF0pICogKDAgKyAoX3NwcmVhZCAqIDAuNSkpKTsgIC8vIGNlbnRlciBvZiAxc3QgY2xhc3NcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBtYXhjID0gX2NsYXNzZXNbbi0xXSArICgoX2NsYXNzZXNbbl0tX2NsYXNzZXNbbi0xXSkgKiAoMSAtIChfc3ByZWFkICogMC41KSkpOyAgLy8gY2VudGVyIG9mIGxhc3QgY2xhc3NcbiAgICAgICAgLy8gICAgICAgICB2YWwgPSBfbWluICsgKCgoKF9jbGFzc2VzW2ldICsgKChfY2xhc3Nlc1tpKzFdIC0gX2NsYXNzZXNbaV0pICogMC41KSkgLSBtaW5jKSAvIChtYXhjLW1pbmMpKSAqIChfbWF4IC0gX21pbikpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgLy8gfTtcblxuICAgICAgICB2YXIgZ2V0Q29sb3IgPSBmdW5jdGlvbih2YWwsIGJ5cGFzc01hcCkge1xuICAgICAgICAgICAgdmFyIGNvbCwgdDtcbiAgICAgICAgICAgIGlmIChieXBhc3NNYXAgPT0gbnVsbCkgeyBieXBhc3NNYXAgPSBmYWxzZTsgfVxuICAgICAgICAgICAgaWYgKGlzTmFOKHZhbCkgfHwgKHZhbCA9PT0gbnVsbCkpIHsgcmV0dXJuIF9uYWNvbDsgfVxuICAgICAgICAgICAgaWYgKCFieXBhc3NNYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoX2NsYXNzZXMgJiYgKF9jbGFzc2VzLmxlbmd0aCA+IDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgdGhlIGNsYXNzXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gZ2V0Q2xhc3ModmFsKTtcbiAgICAgICAgICAgICAgICAgICAgdCA9IGMgLyAoX2NsYXNzZXMubGVuZ3RoLTIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX21heCAhPT0gX21pbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IGludGVycG9sYXRlIGJldHdlZW4gbWluL21heFxuICAgICAgICAgICAgICAgICAgICB0ID0gKHZhbCAtIF9taW4pIC8gKF9tYXggLSBfbWluKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHQgPSB2YWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRvbWFpbiBtYXBcbiAgICAgICAgICAgIHQgPSB0TWFwRG9tYWluKHQpO1xuXG4gICAgICAgICAgICBpZiAoIWJ5cGFzc01hcCkge1xuICAgICAgICAgICAgICAgIHQgPSB0TWFwTGlnaHRuZXNzKHQpOyAgLy8gbGlnaHRuZXNzIGNvcnJlY3Rpb25cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF9nYW1tYSAhPT0gMSkgeyB0ID0gcG93JDUodCwgX2dhbW1hKTsgfVxuXG4gICAgICAgICAgICB0ID0gX3BhZGRpbmdbMF0gKyAodCAqICgxIC0gX3BhZGRpbmdbMF0gLSBfcGFkZGluZ1sxXSkpO1xuXG4gICAgICAgICAgICB0ID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdCkpO1xuXG4gICAgICAgICAgICB2YXIgayA9IE1hdGguZmxvb3IodCAqIDEwMDAwKTtcblxuICAgICAgICAgICAgaWYgKF91c2VDYWNoZSAmJiBfY29sb3JDYWNoZVtrXSkge1xuICAgICAgICAgICAgICAgIGNvbCA9IF9jb2xvckNhY2hlW2tdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSRqKF9jb2xvcnMpID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGkgaW4gWzAuLl9wb3MubGVuZ3RoLTFdXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxfcG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IF9wb3NbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA8PSBwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gX2NvbG9yc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodCA+PSBwKSAmJiAoaSA9PT0gKF9wb3MubGVuZ3RoLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IF9jb2xvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA+IHAgJiYgdCA8IF9wb3NbaSsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAodC1wKS8oX3Bvc1tpKzFdLXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IGNocm9tYV8xLmludGVycG9sYXRlKF9jb2xvcnNbaV0sIF9jb2xvcnNbaSsxXSwgdCwgX21vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlJGooX2NvbG9ycykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sID0gX2NvbG9ycyh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF91c2VDYWNoZSkgeyBfY29sb3JDYWNoZVtrXSA9IGNvbDsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbDtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVzZXRDYWNoZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jb2xvckNhY2hlID0ge307IH07XG5cbiAgICAgICAgc2V0Q29sb3JzKGNvbG9ycyk7XG5cbiAgICAgICAgLy8gcHVibGljIGludGVyZmFjZVxuXG4gICAgICAgIHZhciBmID0gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgdmFyIGMgPSBjaHJvbWFfMShnZXRDb2xvcih2KSk7XG4gICAgICAgICAgICBpZiAoX291dCAmJiBjW19vdXRdKSB7IHJldHVybiBjW19vdXRdKCk7IH0gZWxzZSB7IHJldHVybiBjOyB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5jbGFzc2VzID0gZnVuY3Rpb24oY2xhc3Nlcykge1xuICAgICAgICAgICAgaWYgKGNsYXNzZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlJGooY2xhc3NlcykgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NsYXNzZXMgPSBjbGFzc2VzO1xuICAgICAgICAgICAgICAgICAgICBfZG9tYWluID0gW2NsYXNzZXNbMF0sIGNsYXNzZXNbY2xhc3Nlcy5sZW5ndGgtMV1dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gY2hyb21hXzEuYW5hbHl6ZShfZG9tYWluKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGFzc2VzID0gW2QubWluLCBkLm1heF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xhc3NlcyA9IGNocm9tYV8xLmxpbWl0cyhkLCAnZScsIGNsYXNzZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9jbGFzc2VzO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgZi5kb21haW4gPSBmdW5jdGlvbihkb21haW4pIHtcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfZG9tYWluO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX21pbiA9IGRvbWFpblswXTtcbiAgICAgICAgICAgIF9tYXggPSBkb21haW5bZG9tYWluLmxlbmd0aC0xXTtcbiAgICAgICAgICAgIF9wb3MgPSBbXTtcbiAgICAgICAgICAgIHZhciBrID0gX2NvbG9ycy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoKGRvbWFpbi5sZW5ndGggPT09IGspICYmIChfbWluICE9PSBfbWF4KSkge1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvbnNcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IEFycmF5LmZyb20oZG9tYWluKTsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBsaXN0W2ldO1xuXG4gICAgICAgICAgICAgICAgICBfcG9zLnB1c2goKGQtX21pbikgLyAoX21heC1fbWluKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjPTA7IGM8azsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wb3MucHVzaChjLyhrLTEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbWFpbi5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCBkb21haW4gbWFwXG4gICAgICAgICAgICAgICAgICAgIHZhciB0T3V0ID0gZG9tYWluLm1hcChmdW5jdGlvbiAoZCxpKSB7IHJldHVybiBpLyhkb21haW4ubGVuZ3RoLTEpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRCcmVha3MgPSBkb21haW4ubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiAoZCAtIF9taW4pIC8gKF9tYXggLSBfbWluKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdEJyZWFrcy5ldmVyeShmdW5jdGlvbiAodmFsLCBpKSB7IHJldHVybiB0T3V0W2ldID09PSB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0TWFwRG9tYWluID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA8PSAwIHx8IHQgPj0gMSkgeyByZXR1cm4gdDsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodCA+PSB0QnJlYWtzW2krMV0pIHsgaSsrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSAodCAtIHRCcmVha3NbaV0pIC8gKHRCcmVha3NbaSsxXSAtIHRCcmVha3NbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXQgPSB0T3V0W2ldICsgZiAqICh0T3V0W2krMV0gLSB0T3V0W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2RvbWFpbiA9IFtfbWluLCBfbWF4XTtcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYubW9kZSA9IGZ1bmN0aW9uKF9tKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX21vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfbW9kZSA9IF9tO1xuICAgICAgICAgICAgcmVzZXRDYWNoZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5yYW5nZSA9IGZ1bmN0aW9uKGNvbG9ycywgX3Bvcykge1xuICAgICAgICAgICAgc2V0Q29sb3JzKGNvbG9ycywgX3Bvcyk7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLm91dCA9IGZ1bmN0aW9uKF9vKSB7XG4gICAgICAgICAgICBfb3V0ID0gX287XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLnNwcmVhZCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zcHJlYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc3ByZWFkID0gdmFsO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5jb3JyZWN0TGlnaHRuZXNzID0gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgaWYgKHYgPT0gbnVsbCkgeyB2ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgX2NvcnJlY3RMaWdodG5lc3MgPSB2O1xuICAgICAgICAgICAgcmVzZXRDYWNoZSgpO1xuICAgICAgICAgICAgaWYgKF9jb3JyZWN0TGlnaHRuZXNzKSB7XG4gICAgICAgICAgICAgICAgdE1hcExpZ2h0bmVzcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEwwID0gZ2V0Q29sb3IoMCwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBMMSA9IGdldENvbG9yKDEsIHRydWUpLmxhYigpWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9sID0gTDAgPiBMMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIExfYWN0dWFsID0gZ2V0Q29sb3IodCwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBMX2lkZWFsID0gTDAgKyAoKEwxIC0gTDApICogdCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBMX2RpZmYgPSBMX2FjdHVhbCAtIExfaWRlYWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0MCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0MSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhfaXRlciA9IDIwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKE1hdGguYWJzKExfZGlmZikgPiAxZS0yKSAmJiAobWF4X2l0ZXItLSA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvbCkgeyBMX2RpZmYgKj0gLTE7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTF9kaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0MCA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gKHQxIC0gdCkgKiAwLjU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDEgPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ICs9ICh0MCAtIHQpICogMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMX2FjdHVhbCA9IGdldENvbG9yKHQsIHRydWUpLmxhYigpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMX2RpZmYgPSBMX2FjdHVhbCAtIExfaWRlYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRNYXBMaWdodG5lc3MgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYucGFkZGluZyA9IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIGlmIChwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSRqKHApID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBwID0gW3AscF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9wYWRkaW5nID0gcDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGYuY29sb3JzID0gZnVuY3Rpb24obnVtQ29sb3JzLCBvdXQpIHtcbiAgICAgICAgICAgIC8vIElmIG5vIGFyZ3VtZW50cyBhcmUgZ2l2ZW4sIHJldHVybiB0aGUgb3JpZ2luYWwgY29sb3JzIHRoYXQgd2VyZSBwcm92aWRlZFxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7IG91dCA9ICdoZXgnOyB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbG9ycy5zbGljZSgwKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1Db2xvcnMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbZigwLjUpXTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1Db2xvcnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRtID0gX2RvbWFpblswXTtcbiAgICAgICAgICAgICAgICB2YXIgZGQgPSBfZG9tYWluWzFdIC0gZG07XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX19yYW5nZV9fKDAsIG51bUNvbG9ycywgZmFsc2UpLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gZiggZG0gKyAoKGkvKG51bUNvbG9ycy0xKSkgKiBkZCkgKTsgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIHJldHVybnMgYWxsIGNvbG9ycyBiYXNlZCBvbiB0aGUgZGVmaW5lZCBjbGFzc2VzXG4gICAgICAgICAgICAgICAgY29sb3JzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHNhbXBsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoX2NsYXNzZXMgJiYgKF9jbGFzc2VzLmxlbmd0aCA+IDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBlbmQgPSBfY2xhc3Nlcy5sZW5ndGgsIGFzYyA9IDEgPD0gZW5kOyBhc2MgPyBpIDwgZW5kIDogaSA+IGVuZDsgYXNjID8gaSsrIDogaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVzLnB1c2goKF9jbGFzc2VzW2ktMV0rX2NsYXNzZXNbaV0pKjAuNSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzYW1wbGVzID0gX2RvbWFpbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2FtcGxlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGYodik7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hyb21hXzFbb3V0XSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGNbb3V0XSgpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5jYWNoZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdXNlQ2FjaGUgPSBjO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3VzZUNhY2hlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGYuZ2FtbWEgPSBmdW5jdGlvbihnKSB7XG4gICAgICAgICAgICBpZiAoZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgX2dhbW1hID0gZztcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nYW1tYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmLm5vZGF0YSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIGlmIChkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfbmFjb2wgPSBjaHJvbWFfMShkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9uYWNvbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX19yYW5nZV9fKGxlZnQsIHJpZ2h0LCBpbmNsdXNpdmUpIHtcbiAgICAgIHZhciByYW5nZSA9IFtdO1xuICAgICAgdmFyIGFzY2VuZGluZyA9IGxlZnQgPCByaWdodDtcbiAgICAgIHZhciBlbmQgPSAhaW5jbHVzaXZlID8gcmlnaHQgOiBhc2NlbmRpbmcgPyByaWdodCArIDEgOiByaWdodCAtIDE7XG4gICAgICBmb3IgKHZhciBpID0gbGVmdDsgYXNjZW5kaW5nID8gaSA8IGVuZCA6IGkgPiBlbmQ7IGFzY2VuZGluZyA/IGkrKyA6IGktLSkge1xuICAgICAgICByYW5nZS5wdXNoKGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gaW50ZXJwb2xhdGVzIGJldHdlZW4gYSBzZXQgb2YgY29sb3JzIHV6aW5nIGEgYmV6aWVyIHNwbGluZVxuICAgIC8vXG5cbiAgICAvLyBAcmVxdWlyZXMgdXRpbHMgbGFiXG5cblxuXG5cbiAgICB2YXIgYmV6aWVyID0gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgICAgIHZhciBhc3NpZ24sIGFzc2lnbiQxLCBhc3NpZ24kMjtcblxuICAgICAgICB2YXIgSSwgbGFiMCwgbGFiMSwgbGFiMjtcbiAgICAgICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gbmV3IENvbG9yXzEoYyk7IH0pO1xuICAgICAgICBpZiAoY29sb3JzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgLy8gbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgICAgICAgIChhc3NpZ24gPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmxhYigpOyB9KSwgbGFiMCA9IGFzc2lnblswXSwgbGFiMSA9IGFzc2lnblsxXSk7XG4gICAgICAgICAgICBJID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBsYWIgPSAoWzAsIDEsIDJdLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gbGFiMFtpXSArICh0ICogKGxhYjFbaV0gLSBsYWIwW2ldKSk7IH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEobGFiLCAnbGFiJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9ycy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIC8vIHF1YWRyYXRpYyBiZXppZXIgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgKGFzc2lnbiQxID0gY29sb3JzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5sYWIoKTsgfSksIGxhYjAgPSBhc3NpZ24kMVswXSwgbGFiMSA9IGFzc2lnbiQxWzFdLCBsYWIyID0gYXNzaWduJDFbMl0pO1xuICAgICAgICAgICAgSSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiID0gKFswLCAxLCAyXS5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuICgoMS10KSooMS10KSAqIGxhYjBbaV0pICsgKDIgKiAoMS10KSAqIHQgKiBsYWIxW2ldKSArICh0ICogdCAqIGxhYjJbaV0pOyB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKGxhYiwgJ2xhYicpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xvcnMubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAvLyBjdWJpYyBiZXppZXIgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgdmFyIGxhYjM7XG4gICAgICAgICAgICAoYXNzaWduJDIgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmxhYigpOyB9KSwgbGFiMCA9IGFzc2lnbiQyWzBdLCBsYWIxID0gYXNzaWduJDJbMV0sIGxhYjIgPSBhc3NpZ24kMlsyXSwgbGFiMyA9IGFzc2lnbiQyWzNdKTtcbiAgICAgICAgICAgIEkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhYiA9IChbMCwgMSwgMl0ubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiAoKDEtdCkqKDEtdCkqKDEtdCkgKiBsYWIwW2ldKSArICgzICogKDEtdCkgKiAoMS10KSAqIHQgKiBsYWIxW2ldKSArICgzICogKDEtdCkgKiB0ICogdCAqIGxhYjJbaV0pICsgKHQqdCp0ICogbGFiM1tpXSk7IH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEobGFiLCAnbGFiJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9ycy5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgICAgIHZhciBJMCA9IGJlemllcihjb2xvcnMuc2xpY2UoMCwgMykpO1xuICAgICAgICAgICAgdmFyIEkxID0gYmV6aWVyKGNvbG9ycy5zbGljZSgyLCA1KSk7XG4gICAgICAgICAgICBJID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmICh0IDwgMC41KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJMCh0KjIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJMSgodC0wLjUpKjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEk7XG4gICAgfTtcblxuICAgIHZhciBiZXppZXJfMSA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgICAgICAgdmFyIGYgPSBiZXppZXIoY29sb3JzKTtcbiAgICAgICAgZi5zY2FsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjYWxlKGYpOyB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBpbnRlcnBvbGF0ZXMgYmV0d2VlbiBhIHNldCBvZiBjb2xvcnMgdXppbmcgYSBiZXppZXIgc3BsaW5lXG4gICAgICogYmxlbmQgbW9kZSBmb3JtdWxhcyB0YWtlbiBmcm9tIGh0dHA6Ly93d3cudmVudHVyZS13YXJlLmNvbS9rZXZpbi9jb2RpbmcvbGV0cy1sZWFybi1tYXRoLXBob3Rvc2hvcC1ibGVuZC1tb2Rlcy9cbiAgICAgKi9cblxuXG5cblxuICAgIHZhciBibGVuZCA9IGZ1bmN0aW9uIChib3R0b20sIHRvcCwgbW9kZSkge1xuICAgICAgICBpZiAoIWJsZW5kW21vZGVdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gYmxlbmQgbW9kZSAnICsgbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsZW5kW21vZGVdKGJvdHRvbSwgdG9wKTtcbiAgICB9O1xuXG4gICAgdmFyIGJsZW5kX2YgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZnVuY3Rpb24gKGJvdHRvbSx0b3ApIHtcbiAgICAgICAgICAgIHZhciBjMCA9IGNocm9tYV8xKHRvcCkucmdiKCk7XG4gICAgICAgICAgICB2YXIgYzEgPSBjaHJvbWFfMShib3R0b20pLnJnYigpO1xuICAgICAgICAgICAgcmV0dXJuIGNocm9tYV8xLnJnYihmKGMwLCBjMSkpO1xuICAgICAgICB9OyB9O1xuXG4gICAgdmFyIGVhY2ggPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZnVuY3Rpb24gKGMwLCBjMSkge1xuICAgICAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICAgICAgb3V0WzBdID0gZihjMFswXSwgYzFbMF0pO1xuICAgICAgICAgICAgb3V0WzFdID0gZihjMFsxXSwgYzFbMV0pO1xuICAgICAgICAgICAgb3V0WzJdID0gZihjMFsyXSwgYzFbMl0pO1xuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfTsgfTtcblxuICAgIHZhciBub3JtYWwgPSBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYTsgfTtcbiAgICB2YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhICogYiAvIDI1NTsgfTtcbiAgICB2YXIgZGFya2VuJDEgPSBmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhID4gYiA/IGIgOiBhOyB9O1xuICAgIHZhciBsaWdodGVuID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gYSA+IGIgPyBhIDogYjsgfTtcbiAgICB2YXIgc2NyZWVuID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gMjU1ICogKDEgLSAoMS1hLzI1NSkgKiAoMS1iLzI1NSkpOyB9O1xuICAgIHZhciBvdmVybGF5ID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gYiA8IDEyOCA/IDIgKiBhICogYiAvIDI1NSA6IDI1NSAqICgxIC0gMiAqICgxIC0gYSAvIDI1NSApICogKCAxIC0gYiAvIDI1NSApKTsgfTtcbiAgICB2YXIgYnVybiA9IGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIDI1NSAqICgxIC0gKDEgLSBiIC8gMjU1KSAvIChhLzI1NSkpOyB9O1xuICAgIHZhciBkb2RnZSA9IGZ1bmN0aW9uIChhLGIpIHtcbiAgICAgICAgaWYgKGEgPT09IDI1NSkgeyByZXR1cm4gMjU1OyB9XG4gICAgICAgIGEgPSAyNTUgKiAoYiAvIDI1NSkgLyAoMSAtIGEgLyAyNTUpO1xuICAgICAgICByZXR1cm4gYSA+IDI1NSA/IDI1NSA6IGFcbiAgICB9O1xuXG4gICAgLy8gIyBhZGQgPSAoYSxiKSAtPlxuICAgIC8vICMgICAgIGlmIChhICsgYiA+IDI1NSkgdGhlbiAyNTUgZWxzZSBhICsgYlxuXG4gICAgYmxlbmQubm9ybWFsID0gYmxlbmRfZihlYWNoKG5vcm1hbCkpO1xuICAgIGJsZW5kLm11bHRpcGx5ID0gYmxlbmRfZihlYWNoKG11bHRpcGx5KSk7XG4gICAgYmxlbmQuc2NyZWVuID0gYmxlbmRfZihlYWNoKHNjcmVlbikpO1xuICAgIGJsZW5kLm92ZXJsYXkgPSBibGVuZF9mKGVhY2gob3ZlcmxheSkpO1xuICAgIGJsZW5kLmRhcmtlbiA9IGJsZW5kX2YoZWFjaChkYXJrZW4kMSkpO1xuICAgIGJsZW5kLmxpZ2h0ZW4gPSBibGVuZF9mKGVhY2gobGlnaHRlbikpO1xuICAgIGJsZW5kLmRvZGdlID0gYmxlbmRfZihlYWNoKGRvZGdlKSk7XG4gICAgYmxlbmQuYnVybiA9IGJsZW5kX2YoZWFjaChidXJuKSk7XG4gICAgLy8gYmxlbmQuYWRkID0gYmxlbmRfZihlYWNoKGFkZCkpO1xuXG4gICAgdmFyIGJsZW5kXzEgPSBibGVuZDtcblxuICAgIC8vIGN1YmVoZWxpeCBpbnRlcnBvbGF0aW9uXG4gICAgLy8gYmFzZWQgb24gRC5BLiBHcmVlbiBcIkEgY29sb3VyIHNjaGVtZSBmb3IgdGhlIGRpc3BsYXkgb2YgYXN0cm9ub21pY2FsIGludGVuc2l0eSBpbWFnZXNcIlxuICAgIC8vIGh0dHA6Ly9hc3Ryb24tc29jLmluL2J1bGxldGluLzExSnVuZS8yODkzOTIwMTEucGRmXG5cbiAgICB2YXIgdHlwZSRrID0gdXRpbHMudHlwZTtcbiAgICB2YXIgY2xpcF9yZ2IkMyA9IHV0aWxzLmNsaXBfcmdiO1xuICAgIHZhciBUV09QSSQyID0gdXRpbHMuVFdPUEk7XG4gICAgdmFyIHBvdyQ2ID0gTWF0aC5wb3c7XG4gICAgdmFyIHNpbiQyID0gTWF0aC5zaW47XG4gICAgdmFyIGNvcyQzID0gTWF0aC5jb3M7XG5cblxuICAgIHZhciBjdWJlaGVsaXggPSBmdW5jdGlvbihzdGFydCwgcm90YXRpb25zLCBodWUsIGdhbW1hLCBsaWdodG5lc3MpIHtcbiAgICAgICAgaWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQ9MzAwO1xuICAgICAgICBpZiAoIHJvdGF0aW9ucyA9PT0gdm9pZCAwICkgcm90YXRpb25zPS0xLjU7XG4gICAgICAgIGlmICggaHVlID09PSB2b2lkIDAgKSBodWU9MTtcbiAgICAgICAgaWYgKCBnYW1tYSA9PT0gdm9pZCAwICkgZ2FtbWE9MTtcbiAgICAgICAgaWYgKCBsaWdodG5lc3MgPT09IHZvaWQgMCApIGxpZ2h0bmVzcz1bMCwxXTtcblxuICAgICAgICB2YXIgZGggPSAwLCBkbDtcbiAgICAgICAgaWYgKHR5cGUkayhsaWdodG5lc3MpID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICBkbCA9IGxpZ2h0bmVzc1sxXSAtIGxpZ2h0bmVzc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRsID0gMDtcbiAgICAgICAgICAgIGxpZ2h0bmVzcyA9IFtsaWdodG5lc3MsIGxpZ2h0bmVzc107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uKGZyYWN0KSB7XG4gICAgICAgICAgICB2YXIgYSA9IFRXT1BJJDIgKiAoKChzdGFydCsxMjApLzM2MCkgKyAocm90YXRpb25zICogZnJhY3QpKTtcbiAgICAgICAgICAgIHZhciBsID0gcG93JDYobGlnaHRuZXNzWzBdICsgKGRsICogZnJhY3QpLCBnYW1tYSk7XG4gICAgICAgICAgICB2YXIgaCA9IGRoICE9PSAwID8gaHVlWzBdICsgKGZyYWN0ICogZGgpIDogaHVlO1xuICAgICAgICAgICAgdmFyIGFtcCA9IChoICogbCAqICgxLWwpKSAvIDI7XG4gICAgICAgICAgICB2YXIgY29zX2EgPSBjb3MkMyhhKTtcbiAgICAgICAgICAgIHZhciBzaW5fYSA9IHNpbiQyKGEpO1xuICAgICAgICAgICAgdmFyIHIgPSBsICsgKGFtcCAqICgoLTAuMTQ4NjEgKiBjb3NfYSkgKyAoMS43ODI3Nyogc2luX2EpKSk7XG4gICAgICAgICAgICB2YXIgZyA9IGwgKyAoYW1wICogKCgtMC4yOTIyNyAqIGNvc19hKSAtICgwLjkwNjQ5KiBzaW5fYSkpKTtcbiAgICAgICAgICAgIHZhciBiID0gbCArIChhbXAgKiAoKzEuOTcyOTQgKiBjb3NfYSkpO1xuICAgICAgICAgICAgcmV0dXJuIGNocm9tYV8xKGNsaXBfcmdiJDMoW3IqMjU1LGcqMjU1LGIqMjU1LDFdKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5zdGFydCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIGlmICgocyA9PSBudWxsKSkgeyByZXR1cm4gc3RhcnQ7IH1cbiAgICAgICAgICAgIHN0YXJ0ID0gcztcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYucm90YXRpb25zID0gZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgaWYgKChyID09IG51bGwpKSB7IHJldHVybiByb3RhdGlvbnM7IH1cbiAgICAgICAgICAgIHJvdGF0aW9ucyA9IHI7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLmdhbW1hID0gZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgaWYgKChnID09IG51bGwpKSB7IHJldHVybiBnYW1tYTsgfVxuICAgICAgICAgICAgZ2FtbWEgPSBnO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5odWUgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBpZiAoKGggPT0gbnVsbCkpIHsgcmV0dXJuIGh1ZTsgfVxuICAgICAgICAgICAgaHVlID0gaDtcbiAgICAgICAgICAgIGlmICh0eXBlJGsoaHVlKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgIGRoID0gaHVlWzFdIC0gaHVlWzBdO1xuICAgICAgICAgICAgICAgIGlmIChkaCA9PT0gMCkgeyBodWUgPSBodWVbMV07IH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5saWdodG5lc3MgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBpZiAoKGggPT0gbnVsbCkpIHsgcmV0dXJuIGxpZ2h0bmVzczsgfVxuICAgICAgICAgICAgaWYgKHR5cGUkayhoKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgIGxpZ2h0bmVzcyA9IGg7XG4gICAgICAgICAgICAgICAgZGwgPSBoWzFdIC0gaFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlnaHRuZXNzID0gW2gsaF07XG4gICAgICAgICAgICAgICAgZGwgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5zY2FsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNocm9tYV8xLnNjYWxlKGYpOyB9O1xuXG4gICAgICAgIGYuaHVlKGh1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGY7XG4gICAgfTtcblxuICAgIHZhciBkaWdpdHMgPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbiAgICB2YXIgZmxvb3IkMiA9IE1hdGguZmxvb3I7XG4gICAgdmFyIHJhbmRvbSA9IE1hdGgucmFuZG9tO1xuXG4gICAgdmFyIHJhbmRvbV8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29kZSA9ICcjJztcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPDY7IGkrKykge1xuICAgICAgICAgICAgY29kZSArPSBkaWdpdHMuY2hhckF0KGZsb29yJDIocmFuZG9tKCkgKiAxNikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShjb2RlLCAnaGV4Jyk7XG4gICAgfTtcblxuICAgIHZhciBsb2ckMSA9IE1hdGgubG9nO1xuICAgIHZhciBwb3ckNyA9IE1hdGgucG93O1xuICAgIHZhciBmbG9vciQzID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgYWJzID0gTWF0aC5hYnM7XG5cblxuICAgIHZhciBhbmFseXplID0gZnVuY3Rpb24gKGRhdGEsIGtleSkge1xuICAgICAgICBpZiAoIGtleSA9PT0gdm9pZCAwICkga2V5PW51bGw7XG5cbiAgICAgICAgdmFyIHIgPSB7XG4gICAgICAgICAgICBtaW46IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgICBtYXg6IE51bWJlci5NQVhfVkFMVUUqLTEsXG4gICAgICAgICAgICBzdW06IDAsXG4gICAgICAgICAgICB2YWx1ZXM6IFtdLFxuICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUoZGF0YSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBkYXRhID0gT2JqZWN0LnZhbHVlcyhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgaWYgKGtleSAmJiB0eXBlKHZhbCkgPT09ICdvYmplY3QnKSB7IHZhbCA9IHZhbFtrZXldOyB9XG4gICAgICAgICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBudWxsICYmICFpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAgICAgci52YWx1ZXMucHVzaCh2YWwpO1xuICAgICAgICAgICAgICAgIHIuc3VtICs9IHZhbDtcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgci5taW4pIHsgci5taW4gPSB2YWw7IH1cbiAgICAgICAgICAgICAgICBpZiAodmFsID4gci5tYXgpIHsgci5tYXggPSB2YWw7IH1cbiAgICAgICAgICAgICAgICByLmNvdW50ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHIuZG9tYWluID0gW3IubWluLCByLm1heF07XG5cbiAgICAgICAgci5saW1pdHMgPSBmdW5jdGlvbiAobW9kZSwgbnVtKSB7IHJldHVybiBsaW1pdHMociwgbW9kZSwgbnVtKTsgfTtcblxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG5cbiAgICB2YXIgbGltaXRzID0gZnVuY3Rpb24gKGRhdGEsIG1vZGUsIG51bSkge1xuICAgICAgICBpZiAoIG1vZGUgPT09IHZvaWQgMCApIG1vZGU9J2VxdWFsJztcbiAgICAgICAgaWYgKCBudW0gPT09IHZvaWQgMCApIG51bT03O1xuXG4gICAgICAgIGlmICh0eXBlKGRhdGEpID09ICdhcnJheScpIHtcbiAgICAgICAgICAgIGRhdGEgPSBhbmFseXplKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtaW4gPSBkYXRhLm1pbjtcbiAgICAgICAgdmFyIG1heCA9IGRhdGEubWF4O1xuICAgICAgICB2YXIgdmFsdWVzID0gZGF0YS52YWx1ZXMuc29ydChmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhLWI7IH0pO1xuXG4gICAgICAgIGlmIChudW0gPT09IDEpIHsgcmV0dXJuIFttaW4sbWF4XTsgfVxuXG4gICAgICAgIHZhciBsaW1pdHMgPSBbXTtcblxuICAgICAgICBpZiAobW9kZS5zdWJzdHIoMCwxKSA9PT0gJ2MnKSB7IC8vIGNvbnRpbnVvdXNcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbik7XG4gICAgICAgICAgICBsaW1pdHMucHVzaChtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGUuc3Vic3RyKDAsMSkgPT09ICdlJykgeyAvLyBlcXVhbCBpbnRlcnZhbFxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MTsgaTxudW07IGkrKykge1xuICAgICAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbisoKGkvbnVtKSoobWF4LW1pbikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChtb2RlLnN1YnN0cigwLDEpID09PSAnbCcpIHsgLy8gbG9nIHNjYWxlXG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2FyaXRobWljIHNjYWxlcyBhcmUgb25seSBwb3NzaWJsZSBmb3IgdmFsdWVzID4gMCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1pbl9sb2cgPSBNYXRoLkxPRzEwRSAqIGxvZyQxKG1pbik7XG4gICAgICAgICAgICB2YXIgbWF4X2xvZyA9IE1hdGguTE9HMTBFICogbG9nJDEobWF4KTtcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbik7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDE9MTsgaSQxPG51bTsgaSQxKyspIHtcbiAgICAgICAgICAgICAgICBsaW1pdHMucHVzaChwb3ckNygxMCwgbWluX2xvZyArICgoaSQxL251bSkgKiAobWF4X2xvZyAtIG1pbl9sb2cpKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKG1vZGUuc3Vic3RyKDAsMSkgPT09ICdxJykgeyAvLyBxdWFudGlsZSBzY2FsZVxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMj0xOyBpJDI8bnVtOyBpJDIrKykge1xuICAgICAgICAgICAgICAgIHZhciBwID0gKCh2YWx1ZXMubGVuZ3RoLTEpICogaSQyKS9udW07XG4gICAgICAgICAgICAgICAgdmFyIHBiID0gZmxvb3IkMyhwKTtcbiAgICAgICAgICAgICAgICBpZiAocGIgPT09IHApIHtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRzLnB1c2godmFsdWVzW3BiXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gcCA+IHBiXG4gICAgICAgICAgICAgICAgICAgIHZhciBwciA9IHAgLSBwYjtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRzLnB1c2goKHZhbHVlc1twYl0qKDEtcHIpKSArICh2YWx1ZXNbcGIrMV0qcHIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaW1pdHMucHVzaChtYXgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChtb2RlLnN1YnN0cigwLDEpID09PSAnaycpIHsgLy8gay1tZWFucyBjbHVzdGVyaW5nXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gYmFzZWQgb25cbiAgICAgICAgICAgIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9maWd1ZS9zb3VyY2UvYnJvd3NlL3RydW5rL2ZpZ3VlLmpzIzMzNlxuICAgICAgICAgICAgc2ltcGxpZmllZCBmb3IgMS1kIGlucHV0IHZhbHVlc1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBjbHVzdGVyO1xuICAgICAgICAgICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGFzc2lnbm1lbnRzID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgdmFyIGNsdXN0ZXJTaXplcyA9IG5ldyBBcnJheShudW0pO1xuICAgICAgICAgICAgdmFyIHJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgbmJfaXRlcnMgPSAwO1xuICAgICAgICAgICAgdmFyIGNlbnRyb2lkcyA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIGdldCBzZWVkIHZhbHVlc1xuICAgICAgICAgICAgY2VudHJvaWRzID0gW107XG4gICAgICAgICAgICBjZW50cm9pZHMucHVzaChtaW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQzPTE7IGkkMzxudW07IGkkMysrKSB7XG4gICAgICAgICAgICAgICAgY2VudHJvaWRzLnB1c2gobWluICsgKChpJDMvbnVtKSAqIChtYXgtbWluKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2VudHJvaWRzLnB1c2gobWF4KTtcblxuICAgICAgICAgICAgd2hpbGUgKHJlcGVhdCkge1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbm1lbnQgc3RlcFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGo9MDsgajxudW07IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyU2l6ZXNbal0gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDQ9MDsgaSQ0PG47IGkkNCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpJDRdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWluZGlzdCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiZXN0ID0gKHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGokMT0wOyBqJDE8bnVtOyBqJDErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3QgPSBhYnMoY2VudHJvaWRzW2okMV0tdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPCBtaW5kaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZGlzdCA9IGRpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdCA9IGokMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJTaXplc1tiZXN0XSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudHNbaSQ0XSA9IGJlc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgY2VudHJvaWRzIHN0ZXBcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2VudHJvaWRzID0gbmV3IEFycmF5KG51bSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiQyPTA7IGokMjxudW07IGokMisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbnRyb2lkc1tqJDJdID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQ1PTA7IGkkNTxuOyBpJDUrKykge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyID0gYXNzaWdubWVudHNbaSQ1XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NlbnRyb2lkc1tjbHVzdGVyXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VudHJvaWRzW2NsdXN0ZXJdID0gdmFsdWVzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDZW50cm9pZHNbY2x1c3Rlcl0gKz0gdmFsdWVzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiQzPTA7IGokMzxudW07IGokMysrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbnRyb2lkc1tqJDNdICo9IDEvY2x1c3RlclNpemVzW2okM107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgY29udmVyZ2VuY2VcbiAgICAgICAgICAgICAgICByZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqJDQ9MDsgaiQ0PG51bTsgaiQ0KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NlbnRyb2lkc1tqJDRdICE9PSBjZW50cm9pZHNbaiQ0XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2VudHJvaWRzID0gbmV3Q2VudHJvaWRzO1xuICAgICAgICAgICAgICAgIG5iX2l0ZXJzKys7XG5cbiAgICAgICAgICAgICAgICBpZiAobmJfaXRlcnMgPiAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaW5pc2hlZCBrLW1lYW5zIGNsdXN0ZXJpbmdcbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHBhcnQgaXMgYm9ycm93ZWQgZnJvbSBnYWJyaWVsZmxvci5pdFxuICAgICAgICAgICAgdmFyIGtDbHVzdGVycyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaiQ1PTA7IGokNTxudW07IGokNSsrKSB7XG4gICAgICAgICAgICAgICAga0NsdXN0ZXJzW2okNV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkkNj0wOyBpJDY8bjsgaSQ2KyspIHtcbiAgICAgICAgICAgICAgICBjbHVzdGVyID0gYXNzaWdubWVudHNbaSQ2XTtcbiAgICAgICAgICAgICAgICBrQ2x1c3RlcnNbY2x1c3Rlcl0ucHVzaCh2YWx1ZXNbaSQ2XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG1wS01lYW5zQnJlYWtzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqJDY9MDsgaiQ2PG51bTsgaiQ2KyspIHtcbiAgICAgICAgICAgICAgICB0bXBLTWVhbnNCcmVha3MucHVzaChrQ2x1c3RlcnNbaiQ2XVswXSk7XG4gICAgICAgICAgICAgICAgdG1wS01lYW5zQnJlYWtzLnB1c2goa0NsdXN0ZXJzW2okNl1ba0NsdXN0ZXJzW2okNl0ubGVuZ3RoLTFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRtcEtNZWFuc0JyZWFrcyA9IHRtcEtNZWFuc0JyZWFrcy5zb3J0KGZ1bmN0aW9uIChhLGIpeyByZXR1cm4gYS1iOyB9KTtcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKHRtcEtNZWFuc0JyZWFrc1swXSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDc9MTsgaSQ3IDwgdG1wS01lYW5zQnJlYWtzLmxlbmd0aDsgaSQ3Kz0gMikge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gdG1wS01lYW5zQnJlYWtzW2kkN107XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2KSAmJiAobGltaXRzLmluZGV4T2YodikgPT09IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBsaW1pdHMucHVzaCh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbWl0cztcbiAgICB9O1xuXG4gICAgdmFyIGFuYWx5emVfMSA9IHthbmFseXplOiBhbmFseXplLCBsaW1pdHM6IGxpbWl0c307XG5cbiAgICB2YXIgY29udHJhc3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAvLyBXQ0FHIGNvbnRyYXN0IHJhdGlvXG4gICAgICAgIC8vIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmXG4gICAgICAgIGEgPSBuZXcgQ29sb3JfMShhKTtcbiAgICAgICAgYiA9IG5ldyBDb2xvcl8xKGIpO1xuICAgICAgICB2YXIgbDEgPSBhLmx1bWluYW5jZSgpO1xuICAgICAgICB2YXIgbDIgPSBiLmx1bWluYW5jZSgpO1xuICAgICAgICByZXR1cm4gbDEgPiBsMiA/IChsMSArIDAuMDUpIC8gKGwyICsgMC4wNSkgOiAobDIgKyAwLjA1KSAvIChsMSArIDAuMDUpO1xuICAgIH07XG5cbiAgICB2YXIgc3FydCQ0ID0gTWF0aC5zcXJ0O1xuICAgIHZhciBhdGFuMiQyID0gTWF0aC5hdGFuMjtcbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcbiAgICB2YXIgY29zJDQgPSBNYXRoLmNvcztcbiAgICB2YXIgUEkkMiA9IE1hdGguUEk7XG5cbiAgICB2YXIgZGVsdGFFID0gZnVuY3Rpb24oYSwgYiwgTCwgQykge1xuICAgICAgICBpZiAoIEwgPT09IHZvaWQgMCApIEw9MTtcbiAgICAgICAgaWYgKCBDID09PSB2b2lkIDAgKSBDPTE7XG5cbiAgICAgICAgLy8gRGVsdGEgRSAoQ01DKVxuICAgICAgICAvLyBzZWUgaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vaW5kZXguaHRtbD9FcW5fRGVsdGFFX0NNQy5odG1sXG4gICAgICAgIGEgPSBuZXcgQ29sb3JfMShhKTtcbiAgICAgICAgYiA9IG5ldyBDb2xvcl8xKGIpO1xuICAgICAgICB2YXIgcmVmID0gQXJyYXkuZnJvbShhLmxhYigpKTtcbiAgICAgICAgdmFyIEwxID0gcmVmWzBdO1xuICAgICAgICB2YXIgYTEgPSByZWZbMV07XG4gICAgICAgIHZhciBiMSA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gQXJyYXkuZnJvbShiLmxhYigpKTtcbiAgICAgICAgdmFyIEwyID0gcmVmJDFbMF07XG4gICAgICAgIHZhciBhMiA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYjIgPSByZWYkMVsyXTtcbiAgICAgICAgdmFyIGMxID0gc3FydCQ0KChhMSAqIGExKSArIChiMSAqIGIxKSk7XG4gICAgICAgIHZhciBjMiA9IHNxcnQkNCgoYTIgKiBhMikgKyAoYjIgKiBiMikpO1xuICAgICAgICB2YXIgc2wgPSBMMSA8IDE2LjAgPyAwLjUxMSA6ICgwLjA0MDk3NSAqIEwxKSAvICgxLjAgKyAoMC4wMTc2NSAqIEwxKSk7XG4gICAgICAgIHZhciBzYyA9ICgoMC4wNjM4ICogYzEpIC8gKDEuMCArICgwLjAxMzEgKiBjMSkpKSArIDAuNjM4O1xuICAgICAgICB2YXIgaDEgPSBjMSA8IDAuMDAwMDAxID8gMC4wIDogKGF0YW4yJDIoYjEsIGExKSAqIDE4MC4wKSAvIFBJJDI7XG4gICAgICAgIHdoaWxlIChoMSA8IDApIHsgaDEgKz0gMzYwOyB9XG4gICAgICAgIHdoaWxlIChoMSA+PSAzNjApIHsgaDEgLT0gMzYwOyB9XG4gICAgICAgIHZhciB0ID0gKGgxID49IDE2NC4wKSAmJiAoaDEgPD0gMzQ1LjApID8gKDAuNTYgKyBhYnMkMSgwLjIgKiBjb3MkNCgoUEkkMiAqIChoMSArIDE2OC4wKSkgLyAxODAuMCkpKSA6ICgwLjM2ICsgYWJzJDEoMC40ICogY29zJDQoKFBJJDIgKiAoaDEgKyAzNS4wKSkgLyAxODAuMCkpKTtcbiAgICAgICAgdmFyIGM0ID0gYzEgKiBjMSAqIGMxICogYzE7XG4gICAgICAgIHZhciBmID0gc3FydCQ0KGM0IC8gKGM0ICsgMTkwMC4wKSk7XG4gICAgICAgIHZhciBzaCA9IHNjICogKCgoZiAqIHQpICsgMS4wKSAtIGYpO1xuICAgICAgICB2YXIgZGVsTCA9IEwxIC0gTDI7XG4gICAgICAgIHZhciBkZWxDID0gYzEgLSBjMjtcbiAgICAgICAgdmFyIGRlbEEgPSBhMSAtIGEyO1xuICAgICAgICB2YXIgZGVsQiA9IGIxIC0gYjI7XG4gICAgICAgIHZhciBkSDIgPSAoKGRlbEEgKiBkZWxBKSArIChkZWxCICogZGVsQikpIC0gKGRlbEMgKiBkZWxDKTtcbiAgICAgICAgdmFyIHYxID0gZGVsTCAvIChMICogc2wpO1xuICAgICAgICB2YXIgdjIgPSBkZWxDIC8gKEMgKiBzYyk7XG4gICAgICAgIHZhciB2MyA9IHNoO1xuICAgICAgICByZXR1cm4gc3FydCQ0KCh2MSAqIHYxKSArICh2MiAqIHYyKSArIChkSDIgLyAodjMgKiB2MykpKTtcbiAgICB9O1xuXG4gICAgLy8gc2ltcGxlIEV1Y2xpZGVhbiBkaXN0YW5jZVxuICAgIHZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIsIG1vZGUpIHtcbiAgICAgICAgaWYgKCBtb2RlID09PSB2b2lkIDAgKSBtb2RlPSdsYWInO1xuXG4gICAgICAgIC8vIERlbHRhIEUgKENJRSAxOTc2KVxuICAgICAgICAvLyBzZWUgaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vaW5kZXguaHRtbD9FcXVhdGlvbnMuaHRtbFxuICAgICAgICBhID0gbmV3IENvbG9yXzEoYSk7XG4gICAgICAgIGIgPSBuZXcgQ29sb3JfMShiKTtcbiAgICAgICAgdmFyIGwxID0gYS5nZXQobW9kZSk7XG4gICAgICAgIHZhciBsMiA9IGIuZ2V0KG1vZGUpO1xuICAgICAgICB2YXIgc3VtX3NxID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBsMSkge1xuICAgICAgICAgICAgdmFyIGQgPSAobDFbaV0gfHwgMCkgLSAobDJbaV0gfHwgMCk7XG4gICAgICAgICAgICBzdW1fc3EgKz0gZCpkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoc3VtX3NxKTtcbiAgICB9O1xuXG4gICAgdmFyIHZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MpICkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzb21lIHByZS1kZWZpbmVkIGNvbG9yIHNjYWxlczpcblxuXG5cblxuICAgIHZhciBzY2FsZXMgPSB7XG4gICAgXHRjb29sOiBmdW5jdGlvbiBjb29sKCkgeyByZXR1cm4gc2NhbGUoW2Nocm9tYV8xLmhzbCgxODAsMSwuOSksIGNocm9tYV8xLmhzbCgyNTAsLjcsLjQpXSkgfSxcbiAgICBcdGhvdDogZnVuY3Rpb24gaG90KCkgeyByZXR1cm4gc2NhbGUoWycjMDAwJywnI2YwMCcsJyNmZjAnLCcjZmZmJ10sIFswLC4yNSwuNzUsMV0pLm1vZGUoJ3JnYicpIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgIENvbG9yQnJld2VyIGNvbG9ycyBmb3IgY2hyb21hLmpzXG5cbiAgICAgICAgQ29weXJpZ2h0IChjKSAyMDAyIEN5bnRoaWEgQnJld2VyLCBNYXJrIEhhcnJvd2VyLCBhbmQgVGhlXG4gICAgICAgIFBlbm5zeWx2YW5pYSBTdGF0ZSBVbml2ZXJzaXR5LlxuXG4gICAgICAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gICAgICAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWRcbiAgICAgICAgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1JcbiAgICAgICAgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAgICAgICAgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAqL1xuXG4gICAgdmFyIGNvbG9yYnJld2VyID0ge1xuICAgICAgICAvLyBzZXF1ZW50aWFsXG4gICAgICAgIE9yUmQ6IFsnI2ZmZjdlYycsICcjZmVlOGM4JywgJyNmZGQ0OWUnLCAnI2ZkYmI4NCcsICcjZmM4ZDU5JywgJyNlZjY1NDgnLCAnI2Q3MzAxZicsICcjYjMwMDAwJywgJyM3ZjAwMDAnXSxcbiAgICAgICAgUHVCdTogWycjZmZmN2ZiJywgJyNlY2U3ZjInLCAnI2QwZDFlNicsICcjYTZiZGRiJywgJyM3NGE5Y2YnLCAnIzM2OTBjMCcsICcjMDU3MGIwJywgJyMwNDVhOGQnLCAnIzAyMzg1OCddLFxuICAgICAgICBCdVB1OiBbJyNmN2ZjZmQnLCAnI2UwZWNmNCcsICcjYmZkM2U2JywgJyM5ZWJjZGEnLCAnIzhjOTZjNicsICcjOGM2YmIxJywgJyM4ODQxOWQnLCAnIzgxMGY3YycsICcjNGQwMDRiJ10sXG4gICAgICAgIE9yYW5nZXM6IFsnI2ZmZjVlYicsICcjZmVlNmNlJywgJyNmZGQwYTInLCAnI2ZkYWU2YicsICcjZmQ4ZDNjJywgJyNmMTY5MTMnLCAnI2Q5NDgwMScsICcjYTYzNjAzJywgJyM3ZjI3MDQnXSxcbiAgICAgICAgQnVHbjogWycjZjdmY2ZkJywgJyNlNWY1ZjknLCAnI2NjZWNlNicsICcjOTlkOGM5JywgJyM2NmMyYTQnLCAnIzQxYWU3NicsICcjMjM4YjQ1JywgJyMwMDZkMmMnLCAnIzAwNDQxYiddLFxuICAgICAgICBZbE9yQnI6IFsnI2ZmZmZlNScsICcjZmZmN2JjJywgJyNmZWUzOTEnLCAnI2ZlYzQ0ZicsICcjZmU5OTI5JywgJyNlYzcwMTQnLCAnI2NjNGMwMicsICcjOTkzNDA0JywgJyM2NjI1MDYnXSxcbiAgICAgICAgWWxHbjogWycjZmZmZmU1JywgJyNmN2ZjYjknLCAnI2Q5ZjBhMycsICcjYWRkZDhlJywgJyM3OGM2NzknLCAnIzQxYWI1ZCcsICcjMjM4NDQzJywgJyMwMDY4MzcnLCAnIzAwNDUyOSddLFxuICAgICAgICBSZWRzOiBbJyNmZmY1ZjAnLCAnI2ZlZTBkMicsICcjZmNiYmExJywgJyNmYzkyNzInLCAnI2ZiNmE0YScsICcjZWYzYjJjJywgJyNjYjE4MWQnLCAnI2E1MGYxNScsICcjNjcwMDBkJ10sXG4gICAgICAgIFJkUHU6IFsnI2ZmZjdmMycsICcjZmRlMGRkJywgJyNmY2M1YzAnLCAnI2ZhOWZiNScsICcjZjc2OGExJywgJyNkZDM0OTcnLCAnI2FlMDE3ZScsICcjN2EwMTc3JywgJyM0OTAwNmEnXSxcbiAgICAgICAgR3JlZW5zOiBbJyNmN2ZjZjUnLCAnI2U1ZjVlMCcsICcjYzdlOWMwJywgJyNhMWQ5OWInLCAnIzc0YzQ3NicsICcjNDFhYjVkJywgJyMyMzhiNDUnLCAnIzAwNmQyYycsICcjMDA0NDFiJ10sXG4gICAgICAgIFlsR25CdTogWycjZmZmZmQ5JywgJyNlZGY4YjEnLCAnI2M3ZTliNCcsICcjN2ZjZGJiJywgJyM0MWI2YzQnLCAnIzFkOTFjMCcsICcjMjI1ZWE4JywgJyMyNTM0OTQnLCAnIzA4MWQ1OCddLFxuICAgICAgICBQdXJwbGVzOiBbJyNmY2ZiZmQnLCAnI2VmZWRmNScsICcjZGFkYWViJywgJyNiY2JkZGMnLCAnIzllOWFjOCcsICcjODA3ZGJhJywgJyM2YTUxYTMnLCAnIzU0Mjc4ZicsICcjM2YwMDdkJ10sXG4gICAgICAgIEduQnU6IFsnI2Y3ZmNmMCcsICcjZTBmM2RiJywgJyNjY2ViYzUnLCAnI2E4ZGRiNScsICcjN2JjY2M0JywgJyM0ZWIzZDMnLCAnIzJiOGNiZScsICcjMDg2OGFjJywgJyMwODQwODEnXSxcbiAgICAgICAgR3JleXM6IFsnI2ZmZmZmZicsICcjZjBmMGYwJywgJyNkOWQ5ZDknLCAnI2JkYmRiZCcsICcjOTY5Njk2JywgJyM3MzczNzMnLCAnIzUyNTI1MicsICcjMjUyNTI1JywgJyMwMDAwMDAnXSxcbiAgICAgICAgWWxPclJkOiBbJyNmZmZmY2MnLCAnI2ZmZWRhMCcsICcjZmVkOTc2JywgJyNmZWIyNGMnLCAnI2ZkOGQzYycsICcjZmM0ZTJhJywgJyNlMzFhMWMnLCAnI2JkMDAyNicsICcjODAwMDI2J10sXG4gICAgICAgIFB1UmQ6IFsnI2Y3ZjRmOScsICcjZTdlMWVmJywgJyNkNGI5ZGEnLCAnI2M5OTRjNycsICcjZGY2NWIwJywgJyNlNzI5OGEnLCAnI2NlMTI1NicsICcjOTgwMDQzJywgJyM2NzAwMWYnXSxcbiAgICAgICAgQmx1ZXM6IFsnI2Y3ZmJmZicsICcjZGVlYmY3JywgJyNjNmRiZWYnLCAnIzllY2FlMScsICcjNmJhZWQ2JywgJyM0MjkyYzYnLCAnIzIxNzFiNScsICcjMDg1MTljJywgJyMwODMwNmInXSxcbiAgICAgICAgUHVCdUduOiBbJyNmZmY3ZmInLCAnI2VjZTJmMCcsICcjZDBkMWU2JywgJyNhNmJkZGInLCAnIzY3YTljZicsICcjMzY5MGMwJywgJyMwMjgxOGEnLCAnIzAxNmM1OScsICcjMDE0NjM2J10sXG4gICAgICAgIFZpcmlkaXM6IFsnIzQ0MDE1NCcsICcjNDgyNzc3JywgJyMzZjRhOGEnLCAnIzMxNjc4ZScsICcjMjY4MzhmJywgJyMxZjlkOGEnLCAnIzZjY2U1YScsICcjYjZkZTJiJywgJyNmZWU4MjUnXSxcblxuICAgICAgICAvLyBkaXZlcmdpbmdcblxuICAgICAgICBTcGVjdHJhbDogWycjOWUwMTQyJywgJyNkNTNlNGYnLCAnI2Y0NmQ0MycsICcjZmRhZTYxJywgJyNmZWUwOGInLCAnI2ZmZmZiZicsICcjZTZmNTk4JywgJyNhYmRkYTQnLCAnIzY2YzJhNScsICcjMzI4OGJkJywgJyM1ZTRmYTInXSxcbiAgICAgICAgUmRZbEduOiBbJyNhNTAwMjYnLCAnI2Q3MzAyNycsICcjZjQ2ZDQzJywgJyNmZGFlNjEnLCAnI2ZlZTA4YicsICcjZmZmZmJmJywgJyNkOWVmOGInLCAnI2E2ZDk2YScsICcjNjZiZDYzJywgJyMxYTk4NTAnLCAnIzAwNjgzNyddLFxuICAgICAgICBSZEJ1OiBbJyM2NzAwMWYnLCAnI2IyMTgyYicsICcjZDY2MDRkJywgJyNmNGE1ODInLCAnI2ZkZGJjNycsICcjZjdmN2Y3JywgJyNkMWU1ZjAnLCAnIzkyYzVkZScsICcjNDM5M2MzJywgJyMyMTY2YWMnLCAnIzA1MzA2MSddLFxuICAgICAgICBQaVlHOiBbJyM4ZTAxNTInLCAnI2M1MWI3ZCcsICcjZGU3N2FlJywgJyNmMWI2ZGEnLCAnI2ZkZTBlZicsICcjZjdmN2Y3JywgJyNlNmY1ZDAnLCAnI2I4ZTE4NicsICcjN2ZiYzQxJywgJyM0ZDkyMjEnLCAnIzI3NjQxOSddLFxuICAgICAgICBQUkduOiBbJyM0MDAwNGInLCAnIzc2MmE4MycsICcjOTk3MGFiJywgJyNjMmE1Y2YnLCAnI2U3ZDRlOCcsICcjZjdmN2Y3JywgJyNkOWYwZDMnLCAnI2E2ZGJhMCcsICcjNWFhZTYxJywgJyMxYjc4MzcnLCAnIzAwNDQxYiddLFxuICAgICAgICBSZFlsQnU6IFsnI2E1MDAyNicsICcjZDczMDI3JywgJyNmNDZkNDMnLCAnI2ZkYWU2MScsICcjZmVlMDkwJywgJyNmZmZmYmYnLCAnI2UwZjNmOCcsICcjYWJkOWU5JywgJyM3NGFkZDEnLCAnIzQ1NzViNCcsICcjMzEzNjk1J10sXG4gICAgICAgIEJyQkc6IFsnIzU0MzAwNScsICcjOGM1MTBhJywgJyNiZjgxMmQnLCAnI2RmYzI3ZCcsICcjZjZlOGMzJywgJyNmNWY1ZjUnLCAnI2M3ZWFlNScsICcjODBjZGMxJywgJyMzNTk3OGYnLCAnIzAxNjY1ZScsICcjMDAzYzMwJ10sXG4gICAgICAgIFJkR3k6IFsnIzY3MDAxZicsICcjYjIxODJiJywgJyNkNjYwNGQnLCAnI2Y0YTU4MicsICcjZmRkYmM3JywgJyNmZmZmZmYnLCAnI2UwZTBlMCcsICcjYmFiYWJhJywgJyM4Nzg3ODcnLCAnIzRkNGQ0ZCcsICcjMWExYTFhJ10sXG4gICAgICAgIFB1T3I6IFsnIzdmM2IwOCcsICcjYjM1ODA2JywgJyNlMDgyMTQnLCAnI2ZkYjg2MycsICcjZmVlMGI2JywgJyNmN2Y3ZjcnLCAnI2Q4ZGFlYicsICcjYjJhYmQyJywgJyM4MDczYWMnLCAnIzU0Mjc4OCcsICcjMmQwMDRiJ10sXG5cbiAgICAgICAgLy8gcXVhbGl0YXRpdmVcblxuICAgICAgICBTZXQyOiBbJyM2NmMyYTUnLCAnI2ZjOGQ2MicsICcjOGRhMGNiJywgJyNlNzhhYzMnLCAnI2E2ZDg1NCcsICcjZmZkOTJmJywgJyNlNWM0OTQnLCAnI2IzYjNiMyddLFxuICAgICAgICBBY2NlbnQ6IFsnIzdmYzk3ZicsICcjYmVhZWQ0JywgJyNmZGMwODYnLCAnI2ZmZmY5OScsICcjMzg2Y2IwJywgJyNmMDAyN2YnLCAnI2JmNWIxNycsICcjNjY2NjY2J10sXG4gICAgICAgIFNldDE6IFsnI2U0MWExYycsICcjMzc3ZWI4JywgJyM0ZGFmNGEnLCAnIzk4NGVhMycsICcjZmY3ZjAwJywgJyNmZmZmMzMnLCAnI2E2NTYyOCcsICcjZjc4MWJmJywgJyM5OTk5OTknXSxcbiAgICAgICAgU2V0MzogWycjOGRkM2M3JywgJyNmZmZmYjMnLCAnI2JlYmFkYScsICcjZmI4MDcyJywgJyM4MGIxZDMnLCAnI2ZkYjQ2MicsICcjYjNkZTY5JywgJyNmY2NkZTUnLCAnI2Q5ZDlkOScsICcjYmM4MGJkJywgJyNjY2ViYzUnLCAnI2ZmZWQ2ZiddLFxuICAgICAgICBEYXJrMjogWycjMWI5ZTc3JywgJyNkOTVmMDInLCAnIzc1NzBiMycsICcjZTcyOThhJywgJyM2NmE2MWUnLCAnI2U2YWIwMicsICcjYTY3NjFkJywgJyM2NjY2NjYnXSxcbiAgICAgICAgUGFpcmVkOiBbJyNhNmNlZTMnLCAnIzFmNzhiNCcsICcjYjJkZjhhJywgJyMzM2EwMmMnLCAnI2ZiOWE5OScsICcjZTMxYTFjJywgJyNmZGJmNmYnLCAnI2ZmN2YwMCcsICcjY2FiMmQ2JywgJyM2YTNkOWEnLCAnI2ZmZmY5OScsICcjYjE1OTI4J10sXG4gICAgICAgIFBhc3RlbDI6IFsnI2IzZTJjZCcsICcjZmRjZGFjJywgJyNjYmQ1ZTgnLCAnI2Y0Y2FlNCcsICcjZTZmNWM5JywgJyNmZmYyYWUnLCAnI2YxZTJjYycsICcjY2NjY2NjJ10sXG4gICAgICAgIFBhc3RlbDE6IFsnI2ZiYjRhZScsICcjYjNjZGUzJywgJyNjY2ViYzUnLCAnI2RlY2JlNCcsICcjZmVkOWE2JywgJyNmZmZmY2MnLCAnI2U1ZDhiZCcsICcjZmRkYWVjJywgJyNmMmYyZjInXSxcbiAgICB9O1xuXG4gICAgLy8gYWRkIGxvd2VyY2FzZSBhbGlhc2VzIGZvciBjYXNlLWluc2Vuc2l0aXZlIG1hdGNoZXNcbiAgICBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBPYmplY3Qua2V5cyhjb2xvcmJyZXdlcik7IGkkMSA8IGxpc3QkMS5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgIHZhciBrZXkgPSBsaXN0JDFbaSQxXTtcblxuICAgICAgICBjb2xvcmJyZXdlcltrZXkudG9Mb3dlckNhc2UoKV0gPSBjb2xvcmJyZXdlcltrZXldO1xuICAgIH1cblxuICAgIHZhciBjb2xvcmJyZXdlcl8xID0gY29sb3JicmV3ZXI7XG5cbiAgICAvLyBmZWVsIGZyZWUgdG8gY29tbWVudCBvdXQgYW55dGhpbmcgdG8gcm9sbHVwXG4gICAgLy8gYSBzbWFsbGVyIGNocm9tYS5qcyBidWlsdFxuXG4gICAgLy8gaW8gLS0+IGNvbnZlcnQgY29sb3JzXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgLy8gb3BlcmF0b3JzIC0tPiBtb2RpZnkgZXhpc3RpbmcgQ29sb3JzXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAvLyBpbnRlcnBvbGF0b3JzXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAvLyBnZW5lcmF0b3JzIC0tID4gY3JlYXRlIG5ldyBjb2xvcnNcbiAgICBjaHJvbWFfMS5hdmVyYWdlID0gYXZlcmFnZTtcbiAgICBjaHJvbWFfMS5iZXppZXIgPSBiZXppZXJfMTtcbiAgICBjaHJvbWFfMS5ibGVuZCA9IGJsZW5kXzE7XG4gICAgY2hyb21hXzEuY3ViZWhlbGl4ID0gY3ViZWhlbGl4O1xuICAgIGNocm9tYV8xLm1peCA9IGNocm9tYV8xLmludGVycG9sYXRlID0gbWl4O1xuICAgIGNocm9tYV8xLnJhbmRvbSA9IHJhbmRvbV8xO1xuICAgIGNocm9tYV8xLnNjYWxlID0gc2NhbGU7XG5cbiAgICAvLyBvdGhlciB1dGlsaXR5IG1ldGhvZHNcbiAgICBjaHJvbWFfMS5hbmFseXplID0gYW5hbHl6ZV8xLmFuYWx5emU7XG4gICAgY2hyb21hXzEuY29udHJhc3QgPSBjb250cmFzdDtcbiAgICBjaHJvbWFfMS5kZWx0YUUgPSBkZWx0YUU7XG4gICAgY2hyb21hXzEuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICBjaHJvbWFfMS5saW1pdHMgPSBhbmFseXplXzEubGltaXRzO1xuICAgIGNocm9tYV8xLnZhbGlkID0gdmFsaWQ7XG5cbiAgICAvLyBzY2FsZVxuICAgIGNocm9tYV8xLnNjYWxlcyA9IHNjYWxlcztcblxuICAgIC8vIGNvbG9yc1xuICAgIGNocm9tYV8xLmNvbG9ycyA9IHczY3gxMV8xO1xuICAgIGNocm9tYV8xLmJyZXdlciA9IGNvbG9yYnJld2VyXzE7XG5cbiAgICB2YXIgY2hyb21hX2pzID0gY2hyb21hXzE7XG5cbiAgICByZXR1cm4gY2hyb21hX2pzO1xuXG59KSkpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtcblxudmFyIF9kZWVwQ2xvbmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb3V0L2xhbmcvZGVlcENsb25lXCIpKTtcblxudmFyIF9kZWVwRXF1YWxzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW91dC9sYW5nL2RlZXBFcXVhbHNcIikpO1xuXG52YXIgX2Nocm9tYUpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2hyb21hLWpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8pIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKG8gPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpKSB7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIGl0LCBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obik7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgY291bnQ6IDUsXG4gIGh1ZU1pbjogMCxcbiAgaHVlTWF4OiAzNjAsXG4gIGNocm9tYU1pbjogMCxcbiAgY2hyb21hTWF4OiAxMDAsXG4gIGxpZ2h0TWluOiAwLFxuICBsaWdodE1heDogMTAwLFxuICBxdWFsaXR5OiA1MCxcbiAgc2FtcGxlczogODAwXG59O1xuXG52YXIgZ2V0Q2xvc2VzdEluZGV4ID0gZnVuY3Rpb24gZ2V0Q2xvc2VzdEluZGV4KGNvbG9ycywgY29sb3IpIHtcbiAgdmFyIG1pbkRpc3QgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgdmFyIG5lYXJlc3QgPSAwO1xuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGNvbG9ycy5sZW5ndGg7IGlkeCArPSAxKSB7XG4gICAgdmFyIHNhbXBsZSA9IGNvbG9yc1tpZHhdO1xuICAgIHZhciBkaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KE1hdGguYWJzKHNhbXBsZVswXSAtIGNvbG9yWzBdKSwgMikgKyBNYXRoLnBvdyhNYXRoLmFicyhzYW1wbGVbMV0gLSBjb2xvclsxXSksIDIpICsgTWF0aC5wb3coTWF0aC5hYnMoc2FtcGxlWzJdIC0gY29sb3JbMl0pLCAyKSk7XG5cbiAgICBpZiAoZGlzdCA8IG1pbkRpc3QpIHtcbiAgICAgIG1pbkRpc3QgPSBkaXN0O1xuICAgICAgbmVhcmVzdCA9IGlkeDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVhcmVzdDtcbn07XG5cbnZhciBjaGVja0NvbG9yID0gZnVuY3Rpb24gY2hlY2tDb2xvcihsYWIsIG9wdGlvbnMpIHtcbiAgdmFyIGNvbG9yID0gX2Nocm9tYUpzW1wiZGVmYXVsdFwiXS5sYWIobGFiKTtcblxuICB2YXIgaGNsID0gY29sb3IuaGNsKCk7XG4gIHZhciByZ2IgPSBjb2xvci5yZ2IoKTtcblxuICB2YXIgY29tcExhYiA9IF9jaHJvbWFKc1tcImRlZmF1bHRcIl0ucmdiKHJnYikubGFiKCk7XG5cbiAgdmFyIGxhYlRvbGVyYW5jZSA9IDI7XG4gIHJldHVybiBoY2xbMF0gPj0gb3B0aW9ucy5odWVNaW4gJiYgaGNsWzBdIDw9IG9wdGlvbnMuaHVlTWF4ICYmIGhjbFsxXSA+PSBvcHRpb25zLmNocm9tYU1pbiAmJiBoY2xbMV0gPD0gb3B0aW9ucy5jaHJvbWFNYXggJiYgaGNsWzJdID49IG9wdGlvbnMubGlnaHRNaW4gJiYgaGNsWzJdIDw9IG9wdGlvbnMubGlnaHRNYXggJiYgY29tcExhYlswXSA+PSBsYWJbMF0gLSBsYWJUb2xlcmFuY2UgJiYgY29tcExhYlswXSA8PSBsYWJbMF0gKyBsYWJUb2xlcmFuY2UgJiYgY29tcExhYlsxXSA+PSBsYWJbMV0gLSBsYWJUb2xlcmFuY2UgJiYgY29tcExhYlsxXSA8PSBsYWJbMV0gKyBsYWJUb2xlcmFuY2UgJiYgY29tcExhYlsyXSA+PSBsYWJbMl0gLSBsYWJUb2xlcmFuY2UgJiYgY29tcExhYlsyXSA8PSBsYWJbMl0gKyBsYWJUb2xlcmFuY2U7XG59O1xuXG52YXIgc29ydEJ5Q29udHJhc3QgPSBmdW5jdGlvbiBzb3J0QnlDb250cmFzdChjb2xvckxpc3QpIHtcbiAgdmFyIHVuc29ydGVkQ29sb3JzID0gY29sb3JMaXN0LnNsaWNlKDApO1xuICB2YXIgc29ydGVkQ29sb3JzID0gW3Vuc29ydGVkQ29sb3JzLnNoaWZ0KCldO1xuXG4gIHdoaWxlICh1bnNvcnRlZENvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGxhc3RDb2xvciA9IHNvcnRlZENvbG9yc1tzb3J0ZWRDb2xvcnMubGVuZ3RoIC0gMV07XG4gICAgdmFyIG5lYXJlc3QgPSAwO1xuICAgIHZhciBtYXhEaXN0ID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuc29ydGVkQ29sb3JzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgZGlzdCA9IE1hdGguc3FydChNYXRoLnBvdyhNYXRoLmFicyhsYXN0Q29sb3JbMF0gLSB1bnNvcnRlZENvbG9yc1tpXVswXSksIDIpICsgTWF0aC5wb3coTWF0aC5hYnMobGFzdENvbG9yWzFdIC0gdW5zb3J0ZWRDb2xvcnNbaV1bMV0pLCAyKSArIE1hdGgucG93KE1hdGguYWJzKGxhc3RDb2xvclsyXSAtIHVuc29ydGVkQ29sb3JzW2ldWzJdKSwgMikpO1xuXG4gICAgICBpZiAoZGlzdCA+IG1heERpc3QpIHtcbiAgICAgICAgbWF4RGlzdCA9IGRpc3Q7XG4gICAgICAgIG5lYXJlc3QgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNvcnRlZENvbG9ycy5wdXNoKHVuc29ydGVkQ29sb3JzLnNwbGljZShuZWFyZXN0LCAxKVswXSk7XG4gIH1cblxuICByZXR1cm4gc29ydGVkQ29sb3JzO1xufTtcblxudmFyIGRpc3RpbmN0Q29sb3JzID0gZnVuY3Rpb24gZGlzdGluY3RDb2xvcnMoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRzLCB7fSwgb3B0cyk7XG5cbiAgaWYgKG9wdGlvbnMuY291bnQgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnNhbXBsZXMgPCBvcHRpb25zLmNvdW50ICogMykge1xuICAgIG9wdGlvbnMuc2FtcGxlcyA9IE1hdGguY2VpbChvcHRpb25zLmNvdW50ICogMyk7XG4gIH1cblxuICB2YXIgY29sb3JzID0gW107XG4gIHZhciB6b25lc1Byb3RvID0gW107XG4gIHZhciBzYW1wbGVzID0gbmV3IFNldCgpO1xuICB2YXIgcmFuZ2VEaXZpZGVyID0gTWF0aC5jZWlsKE1hdGguY2JydChvcHRpb25zLnNhbXBsZXMpKTtcbiAgdmFyIGhTdGVwID0gKG9wdGlvbnMuaHVlTWF4IC0gb3B0aW9ucy5odWVNaW4pIC8gcmFuZ2VEaXZpZGVyO1xuICB2YXIgY1N0ZXAgPSAob3B0aW9ucy5jaHJvbWFNYXggLSBvcHRpb25zLmNocm9tYU1pbikgLyByYW5nZURpdmlkZXI7XG4gIHZhciBsU3RlcCA9IChvcHRpb25zLmxpZ2h0TWF4IC0gb3B0aW9ucy5saWdodE1pbikgLyByYW5nZURpdmlkZXI7XG5cbiAgaWYgKGhTdGVwIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2h1ZU1heCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBodWVNaW4hJyk7XG4gIH1cblxuICBpZiAoY1N0ZXAgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2hyb21hTWF4IG11c3QgYmUgZ3JlYXRlciB0aGFuIGNocm9tYU1pbiEnKTtcbiAgfVxuXG4gIGlmIChsU3RlcCA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdsaWdodE1heCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBsaWdodE1pbiEnKTtcbiAgfVxuXG4gIGZvciAodmFyIGggPSBvcHRpb25zLmh1ZU1pbiArIGhTdGVwIC8gMjsgaCA8PSBvcHRpb25zLmh1ZU1heDsgaCArPSBoU3RlcCkge1xuICAgIGZvciAodmFyIGMgPSBvcHRpb25zLmNocm9tYU1pbiArIGNTdGVwIC8gMjsgYyA8PSBvcHRpb25zLmNocm9tYU1heDsgYyArPSBjU3RlcCkge1xuICAgICAgZm9yICh2YXIgbCA9IG9wdGlvbnMubGlnaHRNaW4gKyBsU3RlcCAvIDI7IGwgPD0gb3B0aW9ucy5saWdodE1heDsgbCArPSBsU3RlcCkge1xuICAgICAgICB2YXIgY29sb3IgPSBfY2hyb21hSnNbXCJkZWZhdWx0XCJdLmhjbChoLCBjLCBsKS5sYWIoKTtcblxuICAgICAgICBpZiAoY2hlY2tDb2xvcihjb2xvciwgb3B0aW9ucykpIHtcbiAgICAgICAgICBzYW1wbGVzLmFkZChjb2xvci50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNhbXBsZXMgPSBBcnJheS5mcm9tKHNhbXBsZXMpO1xuICBzYW1wbGVzID0gc2FtcGxlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoaikge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoaik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChzYW1wbGVzLmxlbmd0aCA8IG9wdGlvbnMuY291bnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBlbm91Z2ggc2FtcGxlcyB0byBnZW5lcmF0ZSBwYWxldHRlLCBpbmNyZWFzZSBzYW1wbGUgY291bnQuJyk7XG4gIH1cblxuICB2YXIgc2xpY2VTaXplID0gTWF0aC5mbG9vcihzYW1wbGVzLmxlbmd0aCAvIG9wdGlvbnMuY291bnQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2FtcGxlcy5sZW5ndGg7IGkgKz0gc2xpY2VTaXplKSB7XG4gICAgY29sb3JzLnB1c2goc2FtcGxlc1tpXSk7XG4gICAgem9uZXNQcm90by5wdXNoKFtdKTtcblxuICAgIGlmIChjb2xvcnMubGVuZ3RoID49IG9wdGlvbnMuY291bnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIHN0ZXAgPSAxOyBzdGVwIDw9IG9wdGlvbnMucXVhbGl0eTsgc3RlcCArPSAxKSB7XG4gICAgdmFyIHpvbmVzID0gKDAsIF9kZWVwQ2xvbmVbXCJkZWZhdWx0XCJdKSh6b25lc1Byb3RvKTtcbiAgICB2YXIgc2FtcGxlTGlzdCA9ICgwLCBfZGVlcENsb25lW1wiZGVmYXVsdFwiXSkoc2FtcGxlcyk7IC8vIEltbWVkaWF0ZWx5IGFkZCB0aGUgY2xvc2VzdCBzYW1wbGUgZm9yIGVhY2ggY29sb3JcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBjb2xvcnMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgICB2YXIgaWR4ID0gZ2V0Q2xvc2VzdEluZGV4KHNhbXBsZUxpc3QsIGNvbG9yc1tfaV0pO1xuXG4gICAgICB6b25lc1tfaV0ucHVzaChzYW1wbGVMaXN0W2lkeF0pO1xuXG4gICAgICBzYW1wbGVMaXN0LnNwbGljZShpZHgsIDEpO1xuICAgIH0gLy8gRmluZCBjbG9zZXN0IGNvbG9yIGZvciBlYWNoIHJlbWFpbmluZyBzYW1wbGVcblxuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc2FtcGxlTGlzdC5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgICB2YXIgc2FtcGxlID0gc2FtcGxlc1tfaTJdO1xuICAgICAgdmFyIG5lYXJlc3QgPSBnZXRDbG9zZXN0SW5kZXgoY29sb3JzLCBzYW1wbGUpO1xuICAgICAgem9uZXNbbmVhcmVzdF0ucHVzaChzYW1wbGVzW19pMl0pO1xuICAgIH1cblxuICAgIHZhciBsYXN0Q29sb3JzID0gKDAsIF9kZWVwQ2xvbmVbXCJkZWZhdWx0XCJdKShjb2xvcnMpO1xuXG4gICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgem9uZXMubGVuZ3RoOyBfaTMgKz0gMSkge1xuICAgICAgdmFyIHpvbmUgPSB6b25lc1tfaTNdO1xuICAgICAgdmFyIHNpemUgPSB6b25lLmxlbmd0aDtcbiAgICAgIHZhciBMcyA9IFtdO1xuICAgICAgdmFyIEFzID0gW107XG4gICAgICB2YXIgQnMgPSBbXTtcblxuICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHpvbmUpLFxuICAgICAgICAgIF9zdGVwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBfc2FtcGxlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgTHMucHVzaChfc2FtcGxlWzBdKTtcbiAgICAgICAgICBBcy5wdXNoKF9zYW1wbGVbMV0pO1xuICAgICAgICAgIEJzLnB1c2goX3NhbXBsZVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxBdmcgPSBfdXRpbHNbXCJkZWZhdWx0XCJdLnN1bShMcykgLyBzaXplO1xuICAgICAgdmFyIGFBdmcgPSBfdXRpbHNbXCJkZWZhdWx0XCJdLnN1bShBcykgLyBzaXplO1xuICAgICAgdmFyIGJBdmcgPSBfdXRpbHNbXCJkZWZhdWx0XCJdLnN1bShCcykgLyBzaXplO1xuICAgICAgY29sb3JzW19pM10gPSBbbEF2ZywgYUF2ZywgYkF2Z107XG4gICAgfVxuXG4gICAgaWYgKCgwLCBfZGVlcEVxdWFsc1tcImRlZmF1bHRcIl0pKGxhc3RDb2xvcnMsIGNvbG9ycykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGNvbG9ycyA9IHNvcnRCeUNvbnRyYXN0KGNvbG9ycyk7XG4gIHJldHVybiBjb2xvcnMubWFwKGZ1bmN0aW9uIChsYWIpIHtcbiAgICByZXR1cm4gX2Nocm9tYUpzW1wiZGVmYXVsdFwiXS5sYWIobGFiKTtcbiAgfSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBkaXN0aW5jdENvbG9ycztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwgIi8qISBodHRwczovL210aHMuYmUvaGUgdjEuMi4wIGJ5IEBtYXRoaWFzIHwgTUlUIGxpY2Vuc2UgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlcyBgZXhwb3J0c2AuXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuXG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHRtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAsIGZyb20gTm9kZS5qcyBvciBCcm93c2VyaWZpZWQgY29kZSxcblx0Ly8gYW5kIHVzZSBpdCBhcyBgcm9vdGAuXG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0Ly8gQWxsIGFzdHJhbCBzeW1ib2xzLlxuXHR2YXIgcmVnZXhBc3RyYWxTeW1ib2xzID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZztcblx0Ly8gQWxsIEFTQ0lJIHN5bWJvbHMgKG5vdCBqdXN0IHByaW50YWJsZSBBU0NJSSkgZXhjZXB0IHRob3NlIGxpc3RlZCBpbiB0aGVcblx0Ly8gZmlyc3QgY29sdW1uIG9mIHRoZSBvdmVycmlkZXMgdGFibGUuXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3RhYmxlLWNoYXJyZWYtb3ZlcnJpZGVzXG5cdHZhciByZWdleEFzY2lpV2hpdGVsaXN0ID0gL1tcXHgwMS1cXHg3Rl0vZztcblx0Ly8gQWxsIEJNUCBzeW1ib2xzIHRoYXQgYXJlIG5vdCBBU0NJSSBuZXdsaW5lcywgcHJpbnRhYmxlIEFTQ0lJIHN5bWJvbHMsIG9yXG5cdC8vIGNvZGUgcG9pbnRzIGxpc3RlZCBpbiB0aGUgZmlyc3QgY29sdW1uIG9mIHRoZSBvdmVycmlkZXMgdGFibGUgb25cblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjdGFibGUtY2hhcnJlZi1vdmVycmlkZXMuXG5cdHZhciByZWdleEJtcFdoaXRlbGlzdCA9IC9bXFx4MDEtXFx0XFx4MEJcXGZcXHgwRS1cXHgxRlxceDdGXFx4ODFcXHg4RFxceDhGXFx4OTBcXHg5RFxceEEwLVxcdUZGRkZdL2c7XG5cblx0dmFyIHJlZ2V4RW5jb2RlTm9uQXNjaWkgPSAvPFxcdTIwRDJ8PVxcdTIwRTV8PlxcdTIwRDJ8XFx1MjA1RlxcdTIwMEF8XFx1MjE5RFxcdTAzMzh8XFx1MjIwMlxcdTAzMzh8XFx1MjIyMFxcdTIwRDJ8XFx1MjIyOVxcdUZFMDB8XFx1MjIyQVxcdUZFMDB8XFx1MjIzQ1xcdTIwRDJ8XFx1MjIzRFxcdTAzMzF8XFx1MjIzRVxcdTAzMzN8XFx1MjI0MlxcdTAzMzh8XFx1MjI0QlxcdTAzMzh8XFx1MjI0RFxcdTIwRDJ8XFx1MjI0RVxcdTAzMzh8XFx1MjI0RlxcdTAzMzh8XFx1MjI1MFxcdTAzMzh8XFx1MjI2MVxcdTIwRTV8XFx1MjI2NFxcdTIwRDJ8XFx1MjI2NVxcdTIwRDJ8XFx1MjI2NlxcdTAzMzh8XFx1MjI2N1xcdTAzMzh8XFx1MjI2OFxcdUZFMDB8XFx1MjI2OVxcdUZFMDB8XFx1MjI2QVxcdTAzMzh8XFx1MjI2QVxcdTIwRDJ8XFx1MjI2QlxcdTAzMzh8XFx1MjI2QlxcdTIwRDJ8XFx1MjI3RlxcdTAzMzh8XFx1MjI4MlxcdTIwRDJ8XFx1MjI4M1xcdTIwRDJ8XFx1MjI4QVxcdUZFMDB8XFx1MjI4QlxcdUZFMDB8XFx1MjI4RlxcdTAzMzh8XFx1MjI5MFxcdTAzMzh8XFx1MjI5M1xcdUZFMDB8XFx1MjI5NFxcdUZFMDB8XFx1MjJCNFxcdTIwRDJ8XFx1MjJCNVxcdTIwRDJ8XFx1MjJEOFxcdTAzMzh8XFx1MjJEOVxcdTAzMzh8XFx1MjJEQVxcdUZFMDB8XFx1MjJEQlxcdUZFMDB8XFx1MjJGNVxcdTAzMzh8XFx1MjJGOVxcdTAzMzh8XFx1MjkzM1xcdTAzMzh8XFx1MjlDRlxcdTAzMzh8XFx1MjlEMFxcdTAzMzh8XFx1MkE2RFxcdTAzMzh8XFx1MkE3MFxcdTAzMzh8XFx1MkE3RFxcdTAzMzh8XFx1MkE3RVxcdTAzMzh8XFx1MkFBMVxcdTAzMzh8XFx1MkFBMlxcdTAzMzh8XFx1MkFBQ1xcdUZFMDB8XFx1MkFBRFxcdUZFMDB8XFx1MkFBRlxcdTAzMzh8XFx1MkFCMFxcdTAzMzh8XFx1MkFDNVxcdTAzMzh8XFx1MkFDNlxcdTAzMzh8XFx1MkFDQlxcdUZFMDB8XFx1MkFDQ1xcdUZFMDB8XFx1MkFGRFxcdTIwRTV8W1xceEEwLVxcdTAxMTNcXHUwMTE2LVxcdTAxMjJcXHUwMTI0LVxcdTAxMkJcXHUwMTJFLVxcdTAxNERcXHUwMTUwLVxcdTAxN0VcXHUwMTkyXFx1MDFCNVxcdTAxRjVcXHUwMjM3XFx1MDJDNlxcdTAyQzdcXHUwMkQ4LVxcdTAyRERcXHUwMzExXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0E5XFx1MDNCMS1cXHUwM0M5XFx1MDNEMVxcdTAzRDJcXHUwM0Q1XFx1MDNENlxcdTAzRENcXHUwM0REXFx1MDNGMFxcdTAzRjFcXHUwM0Y1XFx1MDNGNlxcdTA0MDEtXFx1MDQwQ1xcdTA0MEUtXFx1MDQ0RlxcdTA0NTEtXFx1MDQ1Q1xcdTA0NUVcXHUwNDVGXFx1MjAwMi1cXHUyMDA1XFx1MjAwNy1cXHUyMDEwXFx1MjAxMy1cXHUyMDE2XFx1MjAxOC1cXHUyMDFBXFx1MjAxQy1cXHUyMDFFXFx1MjAyMC1cXHUyMDIyXFx1MjAyNVxcdTIwMjZcXHUyMDMwLVxcdTIwMzVcXHUyMDM5XFx1MjAzQVxcdTIwM0VcXHUyMDQxXFx1MjA0M1xcdTIwNDRcXHUyMDRGXFx1MjA1N1xcdTIwNUYtXFx1MjA2M1xcdTIwQUNcXHUyMERCXFx1MjBEQ1xcdTIxMDJcXHUyMTA1XFx1MjEwQS1cXHUyMTEzXFx1MjExNS1cXHUyMTFFXFx1MjEyMlxcdTIxMjRcXHUyMTI3LVxcdTIxMjlcXHUyMTJDXFx1MjEyRFxcdTIxMkYtXFx1MjEzMVxcdTIxMzMtXFx1MjEzOFxcdTIxNDUtXFx1MjE0OFxcdTIxNTMtXFx1MjE1RVxcdTIxOTAtXFx1MjE5QlxcdTIxOUQtXFx1MjFBN1xcdTIxQTktXFx1MjFBRVxcdTIxQjAtXFx1MjFCM1xcdTIxQjUtXFx1MjFCN1xcdTIxQkEtXFx1MjFEQlxcdTIxRERcXHUyMUU0XFx1MjFFNVxcdTIxRjVcXHUyMUZELVxcdTIyMDVcXHUyMjA3LVxcdTIyMDlcXHUyMjBCXFx1MjIwQ1xcdTIyMEYtXFx1MjIxNFxcdTIyMTYtXFx1MjIxOFxcdTIyMUFcXHUyMjFELVxcdTIyMzhcXHUyMjNBLVxcdTIyNTdcXHUyMjU5XFx1MjI1QVxcdTIyNUNcXHUyMjVGLVxcdTIyNjJcXHUyMjY0LVxcdTIyOEJcXHUyMjhELVxcdTIyOUJcXHUyMjlELVxcdTIyQTVcXHUyMkE3LVxcdTIyQjBcXHUyMkIyLVxcdTIyQkJcXHUyMkJELVxcdTIyREJcXHUyMkRFLVxcdTIyRTNcXHUyMkU2LVxcdTIyRjdcXHUyMkY5LVxcdTIyRkVcXHUyMzA1XFx1MjMwNlxcdTIzMDgtXFx1MjMxMFxcdTIzMTJcXHUyMzEzXFx1MjMxNVxcdTIzMTZcXHUyMzFDLVxcdTIzMUZcXHUyMzIyXFx1MjMyM1xcdTIzMkRcXHUyMzJFXFx1MjMzNlxcdTIzM0RcXHUyMzNGXFx1MjM3Q1xcdTIzQjBcXHUyM0IxXFx1MjNCNC1cXHUyM0I2XFx1MjNEQy1cXHUyM0RGXFx1MjNFMlxcdTIzRTdcXHUyNDIzXFx1MjRDOFxcdTI1MDBcXHUyNTAyXFx1MjUwQ1xcdTI1MTBcXHUyNTE0XFx1MjUxOFxcdTI1MUNcXHUyNTI0XFx1MjUyQ1xcdTI1MzRcXHUyNTNDXFx1MjU1MC1cXHUyNTZDXFx1MjU4MFxcdTI1ODRcXHUyNTg4XFx1MjU5MS1cXHUyNTkzXFx1MjVBMVxcdTI1QUFcXHUyNUFCXFx1MjVBRFxcdTI1QUVcXHUyNUIxXFx1MjVCMy1cXHUyNUI1XFx1MjVCOFxcdTI1QjlcXHUyNUJELVxcdTI1QkZcXHUyNUMyXFx1MjVDM1xcdTI1Q0FcXHUyNUNCXFx1MjVFQ1xcdTI1RUZcXHUyNUY4LVxcdTI1RkNcXHUyNjA1XFx1MjYwNlxcdTI2MEVcXHUyNjQwXFx1MjY0MlxcdTI2NjBcXHUyNjYzXFx1MjY2NVxcdTI2NjZcXHUyNjZBXFx1MjY2RC1cXHUyNjZGXFx1MjcxM1xcdTI3MTdcXHUyNzIwXFx1MjczNlxcdTI3NThcXHUyNzcyXFx1Mjc3M1xcdTI3QzhcXHUyN0M5XFx1MjdFNi1cXHUyN0VEXFx1MjdGNS1cXHUyN0ZBXFx1MjdGQ1xcdTI3RkZcXHUyOTAyLVxcdTI5MDVcXHUyOTBDLVxcdTI5MTNcXHUyOTE2XFx1MjkxOS1cXHUyOTIwXFx1MjkyMy1cXHUyOTJBXFx1MjkzM1xcdTI5MzUtXFx1MjkzOVxcdTI5M0NcXHUyOTNEXFx1Mjk0NVxcdTI5NDgtXFx1Mjk0QlxcdTI5NEUtXFx1Mjk3NlxcdTI5NzhcXHUyOTc5XFx1Mjk3Qi1cXHUyOTdGXFx1Mjk4NVxcdTI5ODZcXHUyOThCLVxcdTI5OTZcXHUyOTlBXFx1Mjk5Q1xcdTI5OURcXHUyOUE0LVxcdTI5QjdcXHUyOUI5XFx1MjlCQlxcdTI5QkNcXHUyOUJFLVxcdTI5QzVcXHUyOUM5XFx1MjlDRC1cXHUyOUQwXFx1MjlEQy1cXHUyOURFXFx1MjlFMy1cXHUyOUU1XFx1MjlFQlxcdTI5RjRcXHUyOUY2XFx1MkEwMC1cXHUyQTAyXFx1MkEwNFxcdTJBMDZcXHUyQTBDXFx1MkEwRFxcdTJBMTAtXFx1MkExN1xcdTJBMjItXFx1MkEyN1xcdTJBMjlcXHUyQTJBXFx1MkEyRC1cXHUyQTMxXFx1MkEzMy1cXHUyQTNDXFx1MkEzRlxcdTJBNDBcXHUyQTQyLVxcdTJBNERcXHUyQTUwXFx1MkE1My1cXHUyQTU4XFx1MkE1QS1cXHUyQTVEXFx1MkE1RlxcdTJBNjZcXHUyQTZBXFx1MkE2RC1cXHUyQTc1XFx1MkE3Ny1cXHUyQTlBXFx1MkE5RC1cXHUyQUEyXFx1MkFBNC1cXHUyQUIwXFx1MkFCMy1cXHUyQUM4XFx1MkFDQlxcdTJBQ0NcXHUyQUNGLVxcdTJBREJcXHUyQUU0XFx1MkFFNi1cXHUyQUU5XFx1MkFFQi1cXHUyQUYzXFx1MkFGRFxcdUZCMDAtXFx1RkIwNF18XFx1RDgzNVtcXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVEQ0NGXFx1REQwNFxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERDZCXS9nO1xuXHR2YXIgZW5jb2RlTWFwID0geydcXHhBRCc6J3NoeScsJ1xcdTIwMEMnOid6d25qJywnXFx1MjAwRCc6J3p3aicsJ1xcdTIwMEUnOidscm0nLCdcXHUyMDYzJzonaWMnLCdcXHUyMDYyJzonaXQnLCdcXHUyMDYxJzonYWYnLCdcXHUyMDBGJzoncmxtJywnXFx1MjAwQic6J1plcm9XaWR0aFNwYWNlJywnXFx1MjA2MCc6J05vQnJlYWsnLCdcXHUwMzExJzonRG93bkJyZXZlJywnXFx1MjBEQic6J3Rkb3QnLCdcXHUyMERDJzonRG90RG90JywnXFx0JzonVGFiJywnXFxuJzonTmV3TGluZScsJ1xcdTIwMDgnOidwdW5jc3AnLCdcXHUyMDVGJzonTWVkaXVtU3BhY2UnLCdcXHUyMDA5JzondGhpbnNwJywnXFx1MjAwQSc6J2hhaXJzcCcsJ1xcdTIwMDQnOidlbXNwMTMnLCdcXHUyMDAyJzonZW5zcCcsJ1xcdTIwMDUnOidlbXNwMTQnLCdcXHUyMDAzJzonZW1zcCcsJ1xcdTIwMDcnOidudW1zcCcsJ1xceEEwJzonbmJzcCcsJ1xcdTIwNUZcXHUyMDBBJzonVGhpY2tTcGFjZScsJ1xcdTIwM0UnOidvbGluZScsJ18nOidsb3diYXInLCdcXHUyMDEwJzonZGFzaCcsJ1xcdTIwMTMnOiduZGFzaCcsJ1xcdTIwMTQnOidtZGFzaCcsJ1xcdTIwMTUnOidob3JiYXInLCcsJzonY29tbWEnLCc7Jzonc2VtaScsJ1xcdTIwNEYnOidic2VtaScsJzonOidjb2xvbicsJ1xcdTJBNzQnOidDb2xvbmUnLCchJzonZXhjbCcsJ1xceEExJzonaWV4Y2wnLCc/JzoncXVlc3QnLCdcXHhCRic6J2lxdWVzdCcsJy4nOidwZXJpb2QnLCdcXHUyMDI1JzonbmxkcicsJ1xcdTIwMjYnOidtbGRyJywnXFx4QjcnOidtaWRkb3QnLCdcXCcnOidhcG9zJywnXFx1MjAxOCc6J2xzcXVvJywnXFx1MjAxOSc6J3JzcXVvJywnXFx1MjAxQSc6J3NicXVvJywnXFx1MjAzOSc6J2xzYXF1bycsJ1xcdTIwM0EnOidyc2FxdW8nLCdcIic6J3F1b3QnLCdcXHUyMDFDJzonbGRxdW8nLCdcXHUyMDFEJzoncmRxdW8nLCdcXHUyMDFFJzonYmRxdW8nLCdcXHhBQic6J2xhcXVvJywnXFx4QkInOidyYXF1bycsJygnOidscGFyJywnKSc6J3JwYXInLCdbJzonbHNxYicsJ10nOidyc3FiJywneyc6J2xjdWInLCd9JzoncmN1YicsJ1xcdTIzMDgnOidsY2VpbCcsJ1xcdTIzMDknOidyY2VpbCcsJ1xcdTIzMEEnOidsZmxvb3InLCdcXHUyMzBCJzoncmZsb29yJywnXFx1Mjk4NSc6J2xvcGFyJywnXFx1Mjk4Nic6J3JvcGFyJywnXFx1Mjk4Qic6J2xicmtlJywnXFx1Mjk4Qyc6J3JicmtlJywnXFx1Mjk4RCc6J2xicmtzbHUnLCdcXHUyOThFJzoncmJya3NsZCcsJ1xcdTI5OEYnOidsYnJrc2xkJywnXFx1Mjk5MCc6J3JicmtzbHUnLCdcXHUyOTkxJzonbGFuZ2QnLCdcXHUyOTkyJzoncmFuZ2QnLCdcXHUyOTkzJzonbHBhcmx0JywnXFx1Mjk5NCc6J3JwYXJndCcsJ1xcdTI5OTUnOidndGxQYXInLCdcXHUyOTk2JzonbHRyUGFyJywnXFx1MjdFNic6J2xvYnJrJywnXFx1MjdFNyc6J3JvYnJrJywnXFx1MjdFOCc6J2xhbmcnLCdcXHUyN0U5JzoncmFuZycsJ1xcdTI3RUEnOidMYW5nJywnXFx1MjdFQic6J1JhbmcnLCdcXHUyN0VDJzonbG9hbmcnLCdcXHUyN0VEJzoncm9hbmcnLCdcXHUyNzcyJzonbGJicmsnLCdcXHUyNzczJzoncmJicmsnLCdcXHUyMDE2JzonVmVydCcsJ1xceEE3Jzonc2VjdCcsJ1xceEI2JzoncGFyYScsJ0AnOidjb21tYXQnLCcqJzonYXN0JywnLyc6J3NvbCcsJ3VuZGVmaW5lZCc6bnVsbCwnJic6J2FtcCcsJyMnOidudW0nLCclJzoncGVyY250JywnXFx1MjAzMCc6J3Blcm1pbCcsJ1xcdTIwMzEnOidwZXJ0ZW5rJywnXFx1MjAyMCc6J2RhZ2dlcicsJ1xcdTIwMjEnOidEYWdnZXInLCdcXHUyMDIyJzonYnVsbCcsJ1xcdTIwNDMnOidoeWJ1bGwnLCdcXHUyMDMyJzoncHJpbWUnLCdcXHUyMDMzJzonUHJpbWUnLCdcXHUyMDM0JzondHByaW1lJywnXFx1MjA1Nyc6J3FwcmltZScsJ1xcdTIwMzUnOidicHJpbWUnLCdcXHUyMDQxJzonY2FyZXQnLCdgJzonZ3JhdmUnLCdcXHhCNCc6J2FjdXRlJywnXFx1MDJEQyc6J3RpbGRlJywnXic6J0hhdCcsJ1xceEFGJzonbWFjcicsJ1xcdTAyRDgnOidicmV2ZScsJ1xcdTAyRDknOidkb3QnLCdcXHhBOCc6J2RpZScsJ1xcdTAyREEnOidyaW5nJywnXFx1MDJERCc6J2RibGFjJywnXFx4QjgnOidjZWRpbCcsJ1xcdTAyREInOidvZ29uJywnXFx1MDJDNic6J2NpcmMnLCdcXHUwMkM3JzonY2Fyb24nLCdcXHhCMCc6J2RlZycsJ1xceEE5JzonY29weScsJ1xceEFFJzoncmVnJywnXFx1MjExNyc6J2NvcHlzcicsJ1xcdTIxMTgnOid3cCcsJ1xcdTIxMUUnOidyeCcsJ1xcdTIxMjcnOidtaG8nLCdcXHUyMTI5JzonaWlvdGEnLCdcXHUyMTkwJzonbGFycicsJ1xcdTIxOUEnOidubGFycicsJ1xcdTIxOTInOidyYXJyJywnXFx1MjE5Qic6J25yYXJyJywnXFx1MjE5MSc6J3VhcnInLCdcXHUyMTkzJzonZGFycicsJ1xcdTIxOTQnOidoYXJyJywnXFx1MjFBRSc6J25oYXJyJywnXFx1MjE5NSc6J3ZhcnInLCdcXHUyMTk2JzonbndhcnInLCdcXHUyMTk3JzonbmVhcnInLCdcXHUyMTk4Jzonc2VhcnInLCdcXHUyMTk5Jzonc3dhcnInLCdcXHUyMTlEJzoncmFycncnLCdcXHUyMTlEXFx1MDMzOCc6J25yYXJydycsJ1xcdTIxOUUnOidMYXJyJywnXFx1MjE5Ric6J1VhcnInLCdcXHUyMUEwJzonUmFycicsJ1xcdTIxQTEnOidEYXJyJywnXFx1MjFBMic6J2xhcnJ0bCcsJ1xcdTIxQTMnOidyYXJydGwnLCdcXHUyMUE0JzonbWFwc3RvbGVmdCcsJ1xcdTIxQTUnOidtYXBzdG91cCcsJ1xcdTIxQTYnOidtYXAnLCdcXHUyMUE3JzonbWFwc3RvZG93bicsJ1xcdTIxQTknOidsYXJyaGsnLCdcXHUyMUFBJzoncmFycmhrJywnXFx1MjFBQic6J2xhcnJscCcsJ1xcdTIxQUMnOidyYXJybHAnLCdcXHUyMUFEJzonaGFycncnLCdcXHUyMUIwJzonbHNoJywnXFx1MjFCMSc6J3JzaCcsJ1xcdTIxQjInOidsZHNoJywnXFx1MjFCMyc6J3Jkc2gnLCdcXHUyMUI1JzonY3JhcnInLCdcXHUyMUI2JzonY3VsYXJyJywnXFx1MjFCNyc6J2N1cmFycicsJ1xcdTIxQkEnOidvbGFycicsJ1xcdTIxQkInOidvcmFycicsJ1xcdTIxQkMnOidsaGFydScsJ1xcdTIxQkQnOidsaGFyZCcsJ1xcdTIxQkUnOid1aGFycicsJ1xcdTIxQkYnOid1aGFybCcsJ1xcdTIxQzAnOidyaGFydScsJ1xcdTIxQzEnOidyaGFyZCcsJ1xcdTIxQzInOidkaGFycicsJ1xcdTIxQzMnOidkaGFybCcsJ1xcdTIxQzQnOidybGFycicsJ1xcdTIxQzUnOid1ZGFycicsJ1xcdTIxQzYnOidscmFycicsJ1xcdTIxQzcnOidsbGFycicsJ1xcdTIxQzgnOid1dWFycicsJ1xcdTIxQzknOidycmFycicsJ1xcdTIxQ0EnOidkZGFycicsJ1xcdTIxQ0InOidscmhhcicsJ1xcdTIxQ0MnOidybGhhcicsJ1xcdTIxRDAnOidsQXJyJywnXFx1MjFDRCc6J25sQXJyJywnXFx1MjFEMSc6J3VBcnInLCdcXHUyMUQyJzonckFycicsJ1xcdTIxQ0YnOiduckFycicsJ1xcdTIxRDMnOidkQXJyJywnXFx1MjFENCc6J2lmZicsJ1xcdTIxQ0UnOiduaEFycicsJ1xcdTIxRDUnOid2QXJyJywnXFx1MjFENic6J253QXJyJywnXFx1MjFENyc6J25lQXJyJywnXFx1MjFEOCc6J3NlQXJyJywnXFx1MjFEOSc6J3N3QXJyJywnXFx1MjFEQSc6J2xBYXJyJywnXFx1MjFEQic6J3JBYXJyJywnXFx1MjFERCc6J3ppZ3JhcnInLCdcXHUyMUU0JzonbGFycmInLCdcXHUyMUU1JzoncmFycmInLCdcXHUyMUY1JzonZHVhcnInLCdcXHUyMUZEJzonbG9hcnInLCdcXHUyMUZFJzoncm9hcnInLCdcXHUyMUZGJzonaG9hcnInLCdcXHUyMjAwJzonZm9yYWxsJywnXFx1MjIwMSc6J2NvbXAnLCdcXHUyMjAyJzoncGFydCcsJ1xcdTIyMDJcXHUwMzM4JzonbnBhcnQnLCdcXHUyMjAzJzonZXhpc3QnLCdcXHUyMjA0JzonbmV4aXN0JywnXFx1MjIwNSc6J2VtcHR5JywnXFx1MjIwNyc6J0RlbCcsJ1xcdTIyMDgnOidpbicsJ1xcdTIyMDknOidub3RpbicsJ1xcdTIyMEInOiduaScsJ1xcdTIyMEMnOidub3RuaScsJ1xcdTAzRjYnOidiZXBzaScsJ1xcdTIyMEYnOidwcm9kJywnXFx1MjIxMCc6J2NvcHJvZCcsJ1xcdTIyMTEnOidzdW0nLCcrJzoncGx1cycsJ1xceEIxJzoncG0nLCdcXHhGNyc6J2RpdicsJ1xceEQ3JzondGltZXMnLCc8JzonbHQnLCdcXHUyMjZFJzonbmx0JywnPFxcdTIwRDInOidudmx0JywnPSc6J2VxdWFscycsJ1xcdTIyNjAnOiduZScsJz1cXHUyMEU1JzonYm5lJywnXFx1MkE3NSc6J0VxdWFsJywnPic6J2d0JywnXFx1MjI2Ric6J25ndCcsJz5cXHUyMEQyJzonbnZndCcsJ1xceEFDJzonbm90JywnfCc6J3ZlcnQnLCdcXHhBNic6J2JydmJhcicsJ1xcdTIyMTInOidtaW51cycsJ1xcdTIyMTMnOidtcCcsJ1xcdTIyMTQnOidwbHVzZG8nLCdcXHUyMDQ0JzonZnJhc2wnLCdcXHUyMjE2Jzonc2V0bW4nLCdcXHUyMjE3JzonbG93YXN0JywnXFx1MjIxOCc6J2NvbXBmbicsJ1xcdTIyMUEnOidTcXJ0JywnXFx1MjIxRCc6J3Byb3AnLCdcXHUyMjFFJzonaW5maW4nLCdcXHUyMjFGJzonYW5ncnQnLCdcXHUyMjIwJzonYW5nJywnXFx1MjIyMFxcdTIwRDInOiduYW5nJywnXFx1MjIyMSc6J2FuZ21zZCcsJ1xcdTIyMjInOidhbmdzcGgnLCdcXHUyMjIzJzonbWlkJywnXFx1MjIyNCc6J25taWQnLCdcXHUyMjI1JzoncGFyJywnXFx1MjIyNic6J25wYXInLCdcXHUyMjI3JzonYW5kJywnXFx1MjIyOCc6J29yJywnXFx1MjIyOSc6J2NhcCcsJ1xcdTIyMjlcXHVGRTAwJzonY2FwcycsJ1xcdTIyMkEnOidjdXAnLCdcXHUyMjJBXFx1RkUwMCc6J2N1cHMnLCdcXHUyMjJCJzonaW50JywnXFx1MjIyQyc6J0ludCcsJ1xcdTIyMkQnOid0aW50JywnXFx1MkEwQyc6J3FpbnQnLCdcXHUyMjJFJzonb2ludCcsJ1xcdTIyMkYnOidDb25pbnQnLCdcXHUyMjMwJzonQ2NvbmludCcsJ1xcdTIyMzEnOidjd2ludCcsJ1xcdTIyMzInOidjd2NvbmludCcsJ1xcdTIyMzMnOidhd2NvbmludCcsJ1xcdTIyMzQnOid0aGVyZTQnLCdcXHUyMjM1JzonYmVjYXVzJywnXFx1MjIzNic6J3JhdGlvJywnXFx1MjIzNyc6J0NvbG9uJywnXFx1MjIzOCc6J21pbnVzZCcsJ1xcdTIyM0EnOidtRERvdCcsJ1xcdTIyM0InOidob210aHQnLCdcXHUyMjNDJzonc2ltJywnXFx1MjI0MSc6J25zaW0nLCdcXHUyMjNDXFx1MjBEMic6J252c2ltJywnXFx1MjIzRCc6J2JzaW0nLCdcXHUyMjNEXFx1MDMzMSc6J3JhY2UnLCdcXHUyMjNFJzonYWMnLCdcXHUyMjNFXFx1MDMzMyc6J2FjRScsJ1xcdTIyM0YnOidhY2QnLCdcXHUyMjQwJzond3InLCdcXHUyMjQyJzonZXNpbScsJ1xcdTIyNDJcXHUwMzM4JzonbmVzaW0nLCdcXHUyMjQzJzonc2ltZScsJ1xcdTIyNDQnOiduc2ltZScsJ1xcdTIyNDUnOidjb25nJywnXFx1MjI0Nyc6J25jb25nJywnXFx1MjI0Nic6J3NpbW5lJywnXFx1MjI0OCc6J2FwJywnXFx1MjI0OSc6J25hcCcsJ1xcdTIyNEEnOidhcGUnLCdcXHUyMjRCJzonYXBpZCcsJ1xcdTIyNEJcXHUwMzM4JzonbmFwaWQnLCdcXHUyMjRDJzonYmNvbmcnLCdcXHUyMjREJzonQ3VwQ2FwJywnXFx1MjI2RCc6J05vdEN1cENhcCcsJ1xcdTIyNERcXHUyMEQyJzonbnZhcCcsJ1xcdTIyNEUnOididW1wJywnXFx1MjI0RVxcdTAzMzgnOiduYnVtcCcsJ1xcdTIyNEYnOididW1wZScsJ1xcdTIyNEZcXHUwMzM4JzonbmJ1bXBlJywnXFx1MjI1MCc6J2RvdGVxJywnXFx1MjI1MFxcdTAzMzgnOiduZWRvdCcsJ1xcdTIyNTEnOidlRG90JywnXFx1MjI1Mic6J2VmRG90JywnXFx1MjI1Myc6J2VyRG90JywnXFx1MjI1NCc6J2NvbG9uZScsJ1xcdTIyNTUnOidlY29sb24nLCdcXHUyMjU2JzonZWNpcicsJ1xcdTIyNTcnOidjaXJlJywnXFx1MjI1OSc6J3dlZGdlcScsJ1xcdTIyNUEnOid2ZWVlcScsJ1xcdTIyNUMnOid0cmllJywnXFx1MjI1Ric6J2VxdWVzdCcsJ1xcdTIyNjEnOidlcXVpdicsJ1xcdTIyNjInOiduZXF1aXYnLCdcXHUyMjYxXFx1MjBFNSc6J2JuZXF1aXYnLCdcXHUyMjY0JzonbGUnLCdcXHUyMjcwJzonbmxlJywnXFx1MjI2NFxcdTIwRDInOidudmxlJywnXFx1MjI2NSc6J2dlJywnXFx1MjI3MSc6J25nZScsJ1xcdTIyNjVcXHUyMEQyJzonbnZnZScsJ1xcdTIyNjYnOidsRScsJ1xcdTIyNjZcXHUwMzM4JzonbmxFJywnXFx1MjI2Nyc6J2dFJywnXFx1MjI2N1xcdTAzMzgnOiduZ0UnLCdcXHUyMjY4XFx1RkUwMCc6J2x2bkUnLCdcXHUyMjY4JzonbG5FJywnXFx1MjI2OSc6J2duRScsJ1xcdTIyNjlcXHVGRTAwJzonZ3ZuRScsJ1xcdTIyNkEnOidsbCcsJ1xcdTIyNkFcXHUwMzM4Jzonbkx0dicsJ1xcdTIyNkFcXHUyMEQyJzonbkx0JywnXFx1MjI2Qic6J2dnJywnXFx1MjI2QlxcdTAzMzgnOiduR3R2JywnXFx1MjI2QlxcdTIwRDInOiduR3QnLCdcXHUyMjZDJzondHdpeHQnLCdcXHUyMjcyJzonbHNpbScsJ1xcdTIyNzQnOidubHNpbScsJ1xcdTIyNzMnOidnc2ltJywnXFx1MjI3NSc6J25nc2ltJywnXFx1MjI3Nic6J2xnJywnXFx1MjI3OCc6J250bGcnLCdcXHUyMjc3JzonZ2wnLCdcXHUyMjc5JzonbnRnbCcsJ1xcdTIyN0EnOidwcicsJ1xcdTIyODAnOiducHInLCdcXHUyMjdCJzonc2MnLCdcXHUyMjgxJzonbnNjJywnXFx1MjI3Qyc6J3ByY3VlJywnXFx1MjJFMCc6J25wcmN1ZScsJ1xcdTIyN0QnOidzY2N1ZScsJ1xcdTIyRTEnOiduc2NjdWUnLCdcXHUyMjdFJzoncHJzaW0nLCdcXHUyMjdGJzonc2NzaW0nLCdcXHUyMjdGXFx1MDMzOCc6J05vdFN1Y2NlZWRzVGlsZGUnLCdcXHUyMjgyJzonc3ViJywnXFx1MjI4NCc6J25zdWInLCdcXHUyMjgyXFx1MjBEMic6J3Zuc3ViJywnXFx1MjI4Myc6J3N1cCcsJ1xcdTIyODUnOiduc3VwJywnXFx1MjI4M1xcdTIwRDInOid2bnN1cCcsJ1xcdTIyODYnOidzdWJlJywnXFx1MjI4OCc6J25zdWJlJywnXFx1MjI4Nyc6J3N1cGUnLCdcXHUyMjg5JzonbnN1cGUnLCdcXHUyMjhBXFx1RkUwMCc6J3ZzdWJuZScsJ1xcdTIyOEEnOidzdWJuZScsJ1xcdTIyOEJcXHVGRTAwJzondnN1cG5lJywnXFx1MjI4Qic6J3N1cG5lJywnXFx1MjI4RCc6J2N1cGRvdCcsJ1xcdTIyOEUnOid1cGx1cycsJ1xcdTIyOEYnOidzcXN1YicsJ1xcdTIyOEZcXHUwMzM4JzonTm90U3F1YXJlU3Vic2V0JywnXFx1MjI5MCc6J3Nxc3VwJywnXFx1MjI5MFxcdTAzMzgnOidOb3RTcXVhcmVTdXBlcnNldCcsJ1xcdTIyOTEnOidzcXN1YmUnLCdcXHUyMkUyJzonbnNxc3ViZScsJ1xcdTIyOTInOidzcXN1cGUnLCdcXHUyMkUzJzonbnNxc3VwZScsJ1xcdTIyOTMnOidzcWNhcCcsJ1xcdTIyOTNcXHVGRTAwJzonc3FjYXBzJywnXFx1MjI5NCc6J3NxY3VwJywnXFx1MjI5NFxcdUZFMDAnOidzcWN1cHMnLCdcXHUyMjk1Jzonb3BsdXMnLCdcXHUyMjk2Jzonb21pbnVzJywnXFx1MjI5Nyc6J290aW1lcycsJ1xcdTIyOTgnOidvc29sJywnXFx1MjI5OSc6J29kb3QnLCdcXHUyMjlBJzonb2NpcicsJ1xcdTIyOUInOidvYXN0JywnXFx1MjI5RCc6J29kYXNoJywnXFx1MjI5RSc6J3BsdXNiJywnXFx1MjI5Ric6J21pbnVzYicsJ1xcdTIyQTAnOid0aW1lc2InLCdcXHUyMkExJzonc2RvdGInLCdcXHUyMkEyJzondmRhc2gnLCdcXHUyMkFDJzonbnZkYXNoJywnXFx1MjJBMyc6J2Rhc2h2JywnXFx1MjJBNCc6J3RvcCcsJ1xcdTIyQTUnOidib3QnLCdcXHUyMkE3JzonbW9kZWxzJywnXFx1MjJBOCc6J3ZEYXNoJywnXFx1MjJBRCc6J252RGFzaCcsJ1xcdTIyQTknOidWZGFzaCcsJ1xcdTIyQUUnOiduVmRhc2gnLCdcXHUyMkFBJzonVnZkYXNoJywnXFx1MjJBQic6J1ZEYXNoJywnXFx1MjJBRic6J25WRGFzaCcsJ1xcdTIyQjAnOidwcnVyZWwnLCdcXHUyMkIyJzondmx0cmknLCdcXHUyMkVBJzonbmx0cmknLCdcXHUyMkIzJzondnJ0cmknLCdcXHUyMkVCJzonbnJ0cmknLCdcXHUyMkI0JzonbHRyaWUnLCdcXHUyMkVDJzonbmx0cmllJywnXFx1MjJCNFxcdTIwRDInOidudmx0cmllJywnXFx1MjJCNSc6J3J0cmllJywnXFx1MjJFRCc6J25ydHJpZScsJ1xcdTIyQjVcXHUyMEQyJzonbnZydHJpZScsJ1xcdTIyQjYnOidvcmlnb2YnLCdcXHUyMkI3JzonaW1vZicsJ1xcdTIyQjgnOidtdW1hcCcsJ1xcdTIyQjknOidoZXJjb24nLCdcXHUyMkJBJzonaW50Y2FsJywnXFx1MjJCQic6J3ZlZWJhcicsJ1xcdTIyQkQnOidiYXJ2ZWUnLCdcXHUyMkJFJzonYW5ncnR2YicsJ1xcdTIyQkYnOidscnRyaScsJ1xcdTIyQzAnOidXZWRnZScsJ1xcdTIyQzEnOidWZWUnLCdcXHUyMkMyJzoneGNhcCcsJ1xcdTIyQzMnOid4Y3VwJywnXFx1MjJDNCc6J2RpYW0nLCdcXHUyMkM1Jzonc2RvdCcsJ1xcdTIyQzYnOidTdGFyJywnXFx1MjJDNyc6J2Rpdm9ueCcsJ1xcdTIyQzgnOidib3d0aWUnLCdcXHUyMkM5JzonbHRpbWVzJywnXFx1MjJDQSc6J3J0aW1lcycsJ1xcdTIyQ0InOidsdGhyZWUnLCdcXHUyMkNDJzoncnRocmVlJywnXFx1MjJDRCc6J2JzaW1lJywnXFx1MjJDRSc6J2N1dmVlJywnXFx1MjJDRic6J2N1d2VkJywnXFx1MjJEMCc6J1N1YicsJ1xcdTIyRDEnOidTdXAnLCdcXHUyMkQyJzonQ2FwJywnXFx1MjJEMyc6J0N1cCcsJ1xcdTIyRDQnOidmb3JrJywnXFx1MjJENSc6J2VwYXInLCdcXHUyMkQ2JzonbHRkb3QnLCdcXHUyMkQ3JzonZ3Rkb3QnLCdcXHUyMkQ4JzonTGwnLCdcXHUyMkQ4XFx1MDMzOCc6J25MbCcsJ1xcdTIyRDknOidHZycsJ1xcdTIyRDlcXHUwMzM4JzonbkdnJywnXFx1MjJEQVxcdUZFMDAnOidsZXNnJywnXFx1MjJEQSc6J2xlZycsJ1xcdTIyREInOidnZWwnLCdcXHUyMkRCXFx1RkUwMCc6J2dlc2wnLCdcXHUyMkRFJzonY3VlcHInLCdcXHUyMkRGJzonY3Vlc2MnLCdcXHUyMkU2JzonbG5zaW0nLCdcXHUyMkU3JzonZ25zaW0nLCdcXHUyMkU4JzoncHJuc2ltJywnXFx1MjJFOSc6J3NjbnNpbScsJ1xcdTIyRUUnOid2ZWxsaXAnLCdcXHUyMkVGJzonY3Rkb3QnLCdcXHUyMkYwJzondXRkb3QnLCdcXHUyMkYxJzonZHRkb3QnLCdcXHUyMkYyJzonZGlzaW4nLCdcXHUyMkYzJzonaXNpbnN2JywnXFx1MjJGNCc6J2lzaW5zJywnXFx1MjJGNSc6J2lzaW5kb3QnLCdcXHUyMkY1XFx1MDMzOCc6J25vdGluZG90JywnXFx1MjJGNic6J25vdGludmMnLCdcXHUyMkY3Jzonbm90aW52YicsJ1xcdTIyRjknOidpc2luRScsJ1xcdTIyRjlcXHUwMzM4Jzonbm90aW5FJywnXFx1MjJGQSc6J25pc2QnLCdcXHUyMkZCJzoneG5pcycsJ1xcdTIyRkMnOiduaXMnLCdcXHUyMkZEJzonbm90bml2YycsJ1xcdTIyRkUnOidub3RuaXZiJywnXFx1MjMwNSc6J2JhcndlZCcsJ1xcdTIzMDYnOidCYXJ3ZWQnLCdcXHUyMzBDJzonZHJjcm9wJywnXFx1MjMwRCc6J2RsY3JvcCcsJ1xcdTIzMEUnOid1cmNyb3AnLCdcXHUyMzBGJzondWxjcm9wJywnXFx1MjMxMCc6J2Jub3QnLCdcXHUyMzEyJzoncHJvZmxpbmUnLCdcXHUyMzEzJzoncHJvZnN1cmYnLCdcXHUyMzE1JzondGVscmVjJywnXFx1MjMxNic6J3RhcmdldCcsJ1xcdTIzMUMnOid1bGNvcm4nLCdcXHUyMzFEJzondXJjb3JuJywnXFx1MjMxRSc6J2RsY29ybicsJ1xcdTIzMUYnOidkcmNvcm4nLCdcXHUyMzIyJzonZnJvd24nLCdcXHUyMzIzJzonc21pbGUnLCdcXHUyMzJEJzonY3lsY3R5JywnXFx1MjMyRSc6J3Byb2ZhbGFyJywnXFx1MjMzNic6J3RvcGJvdCcsJ1xcdTIzM0QnOidvdmJhcicsJ1xcdTIzM0YnOidzb2xiYXInLCdcXHUyMzdDJzonYW5nemFycicsJ1xcdTIzQjAnOidsbW91c3QnLCdcXHUyM0IxJzoncm1vdXN0JywnXFx1MjNCNCc6J3RicmsnLCdcXHUyM0I1JzonYmJyaycsJ1xcdTIzQjYnOidiYnJrdGJyaycsJ1xcdTIzREMnOidPdmVyUGFyZW50aGVzaXMnLCdcXHUyM0REJzonVW5kZXJQYXJlbnRoZXNpcycsJ1xcdTIzREUnOidPdmVyQnJhY2UnLCdcXHUyM0RGJzonVW5kZXJCcmFjZScsJ1xcdTIzRTInOid0cnBleml1bScsJ1xcdTIzRTcnOidlbGludGVycycsJ1xcdTI0MjMnOidibGFuaycsJ1xcdTI1MDAnOidib3hoJywnXFx1MjUwMic6J2JveHYnLCdcXHUyNTBDJzonYm94ZHInLCdcXHUyNTEwJzonYm94ZGwnLCdcXHUyNTE0JzonYm94dXInLCdcXHUyNTE4JzonYm94dWwnLCdcXHUyNTFDJzonYm94dnInLCdcXHUyNTI0JzonYm94dmwnLCdcXHUyNTJDJzonYm94aGQnLCdcXHUyNTM0JzonYm94aHUnLCdcXHUyNTNDJzonYm94dmgnLCdcXHUyNTUwJzonYm94SCcsJ1xcdTI1NTEnOidib3hWJywnXFx1MjU1Mic6J2JveGRSJywnXFx1MjU1Myc6J2JveERyJywnXFx1MjU1NCc6J2JveERSJywnXFx1MjU1NSc6J2JveGRMJywnXFx1MjU1Nic6J2JveERsJywnXFx1MjU1Nyc6J2JveERMJywnXFx1MjU1OCc6J2JveHVSJywnXFx1MjU1OSc6J2JveFVyJywnXFx1MjU1QSc6J2JveFVSJywnXFx1MjU1Qic6J2JveHVMJywnXFx1MjU1Qyc6J2JveFVsJywnXFx1MjU1RCc6J2JveFVMJywnXFx1MjU1RSc6J2JveHZSJywnXFx1MjU1Ric6J2JveFZyJywnXFx1MjU2MCc6J2JveFZSJywnXFx1MjU2MSc6J2JveHZMJywnXFx1MjU2Mic6J2JveFZsJywnXFx1MjU2Myc6J2JveFZMJywnXFx1MjU2NCc6J2JveEhkJywnXFx1MjU2NSc6J2JveGhEJywnXFx1MjU2Nic6J2JveEhEJywnXFx1MjU2Nyc6J2JveEh1JywnXFx1MjU2OCc6J2JveGhVJywnXFx1MjU2OSc6J2JveEhVJywnXFx1MjU2QSc6J2JveHZIJywnXFx1MjU2Qic6J2JveFZoJywnXFx1MjU2Qyc6J2JveFZIJywnXFx1MjU4MCc6J3VoYmxrJywnXFx1MjU4NCc6J2xoYmxrJywnXFx1MjU4OCc6J2Jsb2NrJywnXFx1MjU5MSc6J2JsazE0JywnXFx1MjU5Mic6J2JsazEyJywnXFx1MjU5Myc6J2JsazM0JywnXFx1MjVBMSc6J3NxdScsJ1xcdTI1QUEnOidzcXVmJywnXFx1MjVBQic6J0VtcHR5VmVyeVNtYWxsU3F1YXJlJywnXFx1MjVBRCc6J3JlY3QnLCdcXHUyNUFFJzonbWFya2VyJywnXFx1MjVCMSc6J2ZsdG5zJywnXFx1MjVCMyc6J3h1dHJpJywnXFx1MjVCNCc6J3V0cmlmJywnXFx1MjVCNSc6J3V0cmknLCdcXHUyNUI4JzoncnRyaWYnLCdcXHUyNUI5JzoncnRyaScsJ1xcdTI1QkQnOid4ZHRyaScsJ1xcdTI1QkUnOidkdHJpZicsJ1xcdTI1QkYnOidkdHJpJywnXFx1MjVDMic6J2x0cmlmJywnXFx1MjVDMyc6J2x0cmknLCdcXHUyNUNBJzonbG96JywnXFx1MjVDQic6J2NpcicsJ1xcdTI1RUMnOid0cmlkb3QnLCdcXHUyNUVGJzoneGNpcmMnLCdcXHUyNUY4JzondWx0cmknLCdcXHUyNUY5JzondXJ0cmknLCdcXHUyNUZBJzonbGx0cmknLCdcXHUyNUZCJzonRW1wdHlTbWFsbFNxdWFyZScsJ1xcdTI1RkMnOidGaWxsZWRTbWFsbFNxdWFyZScsJ1xcdTI2MDUnOidzdGFyZicsJ1xcdTI2MDYnOidzdGFyJywnXFx1MjYwRSc6J3Bob25lJywnXFx1MjY0MCc6J2ZlbWFsZScsJ1xcdTI2NDInOidtYWxlJywnXFx1MjY2MCc6J3NwYWRlcycsJ1xcdTI2NjMnOidjbHVicycsJ1xcdTI2NjUnOidoZWFydHMnLCdcXHUyNjY2JzonZGlhbXMnLCdcXHUyNjZBJzonc3VuZycsJ1xcdTI3MTMnOidjaGVjaycsJ1xcdTI3MTcnOidjcm9zcycsJ1xcdTI3MjAnOidtYWx0JywnXFx1MjczNic6J3NleHQnLCdcXHUyNzU4JzonVmVydGljYWxTZXBhcmF0b3InLCdcXHUyN0M4JzonYnNvbGhzdWInLCdcXHUyN0M5Jzonc3VwaHNvbCcsJ1xcdTI3RjUnOid4bGFycicsJ1xcdTI3RjYnOid4cmFycicsJ1xcdTI3RjcnOid4aGFycicsJ1xcdTI3RjgnOid4bEFycicsJ1xcdTI3RjknOid4ckFycicsJ1xcdTI3RkEnOid4aEFycicsJ1xcdTI3RkMnOid4bWFwJywnXFx1MjdGRic6J2R6aWdyYXJyJywnXFx1MjkwMic6J252bEFycicsJ1xcdTI5MDMnOidudnJBcnInLCdcXHUyOTA0JzonbnZIYXJyJywnXFx1MjkwNSc6J01hcCcsJ1xcdTI5MEMnOidsYmFycicsJ1xcdTI5MEQnOidyYmFycicsJ1xcdTI5MEUnOidsQmFycicsJ1xcdTI5MEYnOidyQmFycicsJ1xcdTI5MTAnOidSQmFycicsJ1xcdTI5MTEnOidERG90cmFoZCcsJ1xcdTI5MTInOidVcEFycm93QmFyJywnXFx1MjkxMyc6J0Rvd25BcnJvd0JhcicsJ1xcdTI5MTYnOidSYXJydGwnLCdcXHUyOTE5JzonbGF0YWlsJywnXFx1MjkxQSc6J3JhdGFpbCcsJ1xcdTI5MUInOidsQXRhaWwnLCdcXHUyOTFDJzonckF0YWlsJywnXFx1MjkxRCc6J2xhcnJmcycsJ1xcdTI5MUUnOidyYXJyZnMnLCdcXHUyOTFGJzonbGFycmJmcycsJ1xcdTI5MjAnOidyYXJyYmZzJywnXFx1MjkyMyc6J253YXJoaycsJ1xcdTI5MjQnOiduZWFyaGsnLCdcXHUyOTI1Jzonc2VhcmhrJywnXFx1MjkyNic6J3N3YXJoaycsJ1xcdTI5MjcnOidud25lYXInLCdcXHUyOTI4JzondG9lYScsJ1xcdTI5MjknOid0b3NhJywnXFx1MjkyQSc6J3N3bndhcicsJ1xcdTI5MzMnOidyYXJyYycsJ1xcdTI5MzNcXHUwMzM4JzonbnJhcnJjJywnXFx1MjkzNSc6J2N1ZGFycnInLCdcXHUyOTM2JzonbGRjYScsJ1xcdTI5MzcnOidyZGNhJywnXFx1MjkzOCc6J2N1ZGFycmwnLCdcXHUyOTM5JzonbGFycnBsJywnXFx1MjkzQyc6J2N1cmFycm0nLCdcXHUyOTNEJzonY3VsYXJycCcsJ1xcdTI5NDUnOidyYXJycGwnLCdcXHUyOTQ4JzonaGFycmNpcicsJ1xcdTI5NDknOidVYXJyb2NpcicsJ1xcdTI5NEEnOidsdXJkc2hhcicsJ1xcdTI5NEInOidsZHJ1c2hhcicsJ1xcdTI5NEUnOidMZWZ0UmlnaHRWZWN0b3InLCdcXHUyOTRGJzonUmlnaHRVcERvd25WZWN0b3InLCdcXHUyOTUwJzonRG93bkxlZnRSaWdodFZlY3RvcicsJ1xcdTI5NTEnOidMZWZ0VXBEb3duVmVjdG9yJywnXFx1Mjk1Mic6J0xlZnRWZWN0b3JCYXInLCdcXHUyOTUzJzonUmlnaHRWZWN0b3JCYXInLCdcXHUyOTU0JzonUmlnaHRVcFZlY3RvckJhcicsJ1xcdTI5NTUnOidSaWdodERvd25WZWN0b3JCYXInLCdcXHUyOTU2JzonRG93bkxlZnRWZWN0b3JCYXInLCdcXHUyOTU3JzonRG93blJpZ2h0VmVjdG9yQmFyJywnXFx1Mjk1OCc6J0xlZnRVcFZlY3RvckJhcicsJ1xcdTI5NTknOidMZWZ0RG93blZlY3RvckJhcicsJ1xcdTI5NUEnOidMZWZ0VGVlVmVjdG9yJywnXFx1Mjk1Qic6J1JpZ2h0VGVlVmVjdG9yJywnXFx1Mjk1Qyc6J1JpZ2h0VXBUZWVWZWN0b3InLCdcXHUyOTVEJzonUmlnaHREb3duVGVlVmVjdG9yJywnXFx1Mjk1RSc6J0Rvd25MZWZ0VGVlVmVjdG9yJywnXFx1Mjk1Ric6J0Rvd25SaWdodFRlZVZlY3RvcicsJ1xcdTI5NjAnOidMZWZ0VXBUZWVWZWN0b3InLCdcXHUyOTYxJzonTGVmdERvd25UZWVWZWN0b3InLCdcXHUyOTYyJzonbEhhcicsJ1xcdTI5NjMnOid1SGFyJywnXFx1Mjk2NCc6J3JIYXInLCdcXHUyOTY1JzonZEhhcicsJ1xcdTI5NjYnOidsdXJ1aGFyJywnXFx1Mjk2Nyc6J2xkcmRoYXInLCdcXHUyOTY4JzoncnVsdWhhcicsJ1xcdTI5NjknOidyZGxkaGFyJywnXFx1Mjk2QSc6J2xoYXJ1bCcsJ1xcdTI5NkInOidsbGhhcmQnLCdcXHUyOTZDJzoncmhhcnVsJywnXFx1Mjk2RCc6J2xyaGFyZCcsJ1xcdTI5NkUnOid1ZGhhcicsJ1xcdTI5NkYnOidkdWhhcicsJ1xcdTI5NzAnOidSb3VuZEltcGxpZXMnLCdcXHUyOTcxJzonZXJhcnInLCdcXHUyOTcyJzonc2ltcmFycicsJ1xcdTI5NzMnOidsYXJyc2ltJywnXFx1Mjk3NCc6J3JhcnJzaW0nLCdcXHUyOTc1JzoncmFycmFwJywnXFx1Mjk3Nic6J2x0bGFycicsJ1xcdTI5NzgnOidndHJhcnInLCdcXHUyOTc5Jzonc3VicmFycicsJ1xcdTI5N0InOidzdXBsYXJyJywnXFx1Mjk3Qyc6J2xmaXNodCcsJ1xcdTI5N0QnOidyZmlzaHQnLCdcXHUyOTdFJzondWZpc2h0JywnXFx1Mjk3Ric6J2RmaXNodCcsJ1xcdTI5OUEnOid2emlnemFnJywnXFx1Mjk5Qyc6J3ZhbmdydCcsJ1xcdTI5OUQnOidhbmdydHZiZCcsJ1xcdTI5QTQnOidhbmdlJywnXFx1MjlBNSc6J3JhbmdlJywnXFx1MjlBNic6J2R3YW5nbGUnLCdcXHUyOUE3JzondXdhbmdsZScsJ1xcdTI5QTgnOidhbmdtc2RhYScsJ1xcdTI5QTknOidhbmdtc2RhYicsJ1xcdTI5QUEnOidhbmdtc2RhYycsJ1xcdTI5QUInOidhbmdtc2RhZCcsJ1xcdTI5QUMnOidhbmdtc2RhZScsJ1xcdTI5QUQnOidhbmdtc2RhZicsJ1xcdTI5QUUnOidhbmdtc2RhZycsJ1xcdTI5QUYnOidhbmdtc2RhaCcsJ1xcdTI5QjAnOidiZW1wdHl2JywnXFx1MjlCMSc6J2RlbXB0eXYnLCdcXHUyOUIyJzonY2VtcHR5dicsJ1xcdTI5QjMnOidyYWVtcHR5dicsJ1xcdTI5QjQnOidsYWVtcHR5dicsJ1xcdTI5QjUnOidvaGJhcicsJ1xcdTI5QjYnOidvbWlkJywnXFx1MjlCNyc6J29wYXInLCdcXHUyOUI5Jzonb3BlcnAnLCdcXHUyOUJCJzonb2xjcm9zcycsJ1xcdTI5QkMnOidvZHNvbGQnLCdcXHUyOUJFJzonb2xjaXInLCdcXHUyOUJGJzonb2ZjaXInLCdcXHUyOUMwJzonb2x0JywnXFx1MjlDMSc6J29ndCcsJ1xcdTI5QzInOidjaXJzY2lyJywnXFx1MjlDMyc6J2NpckUnLCdcXHUyOUM0Jzonc29sYicsJ1xcdTI5QzUnOidic29sYicsJ1xcdTI5QzknOidib3hib3gnLCdcXHUyOUNEJzondHJpc2InLCdcXHUyOUNFJzoncnRyaWx0cmknLCdcXHUyOUNGJzonTGVmdFRyaWFuZ2xlQmFyJywnXFx1MjlDRlxcdTAzMzgnOidOb3RMZWZ0VHJpYW5nbGVCYXInLCdcXHUyOUQwJzonUmlnaHRUcmlhbmdsZUJhcicsJ1xcdTI5RDBcXHUwMzM4JzonTm90UmlnaHRUcmlhbmdsZUJhcicsJ1xcdTI5REMnOidpaW5maW4nLCdcXHUyOUREJzonaW5maW50aWUnLCdcXHUyOURFJzonbnZpbmZpbicsJ1xcdTI5RTMnOidlcGFyc2wnLCdcXHUyOUU0Jzonc21lcGFyc2wnLCdcXHUyOUU1JzonZXF2cGFyc2wnLCdcXHUyOUVCJzonbG96ZicsJ1xcdTI5RjQnOidSdWxlRGVsYXllZCcsJ1xcdTI5RjYnOidkc29sJywnXFx1MkEwMCc6J3hvZG90JywnXFx1MkEwMSc6J3hvcGx1cycsJ1xcdTJBMDInOid4b3RpbWUnLCdcXHUyQTA0JzoneHVwbHVzJywnXFx1MkEwNic6J3hzcWN1cCcsJ1xcdTJBMEQnOidmcGFydGludCcsJ1xcdTJBMTAnOidjaXJmbmludCcsJ1xcdTJBMTEnOidhd2ludCcsJ1xcdTJBMTInOidycHBvbGludCcsJ1xcdTJBMTMnOidzY3BvbGludCcsJ1xcdTJBMTQnOiducG9saW50JywnXFx1MkExNSc6J3BvaW50aW50JywnXFx1MkExNic6J3F1YXRpbnQnLCdcXHUyQTE3JzonaW50bGFyaGsnLCdcXHUyQTIyJzoncGx1c2NpcicsJ1xcdTJBMjMnOidwbHVzYWNpcicsJ1xcdTJBMjQnOidzaW1wbHVzJywnXFx1MkEyNSc6J3BsdXNkdScsJ1xcdTJBMjYnOidwbHVzc2ltJywnXFx1MkEyNyc6J3BsdXN0d28nLCdcXHUyQTI5JzonbWNvbW1hJywnXFx1MkEyQSc6J21pbnVzZHUnLCdcXHUyQTJEJzonbG9wbHVzJywnXFx1MkEyRSc6J3JvcGx1cycsJ1xcdTJBMkYnOidDcm9zcycsJ1xcdTJBMzAnOid0aW1lc2QnLCdcXHUyQTMxJzondGltZXNiYXInLCdcXHUyQTMzJzonc21hc2hwJywnXFx1MkEzNCc6J2xvdGltZXMnLCdcXHUyQTM1Jzoncm90aW1lcycsJ1xcdTJBMzYnOidvdGltZXNhcycsJ1xcdTJBMzcnOidPdGltZXMnLCdcXHUyQTM4Jzonb2RpdicsJ1xcdTJBMzknOid0cmlwbHVzJywnXFx1MkEzQSc6J3RyaW1pbnVzJywnXFx1MkEzQic6J3RyaXRpbWUnLCdcXHUyQTNDJzonaXByb2QnLCdcXHUyQTNGJzonYW1hbGcnLCdcXHUyQTQwJzonY2FwZG90JywnXFx1MkE0Mic6J25jdXAnLCdcXHUyQTQzJzonbmNhcCcsJ1xcdTJBNDQnOidjYXBhbmQnLCdcXHUyQTQ1JzonY3Vwb3InLCdcXHUyQTQ2JzonY3VwY2FwJywnXFx1MkE0Nyc6J2NhcGN1cCcsJ1xcdTJBNDgnOidjdXBicmNhcCcsJ1xcdTJBNDknOidjYXBicmN1cCcsJ1xcdTJBNEEnOidjdXBjdXAnLCdcXHUyQTRCJzonY2FwY2FwJywnXFx1MkE0Qyc6J2NjdXBzJywnXFx1MkE0RCc6J2NjYXBzJywnXFx1MkE1MCc6J2NjdXBzc20nLCdcXHUyQTUzJzonQW5kJywnXFx1MkE1NCc6J09yJywnXFx1MkE1NSc6J2FuZGFuZCcsJ1xcdTJBNTYnOidvcm9yJywnXFx1MkE1Nyc6J29yc2xvcGUnLCdcXHUyQTU4JzonYW5kc2xvcGUnLCdcXHUyQTVBJzonYW5kdicsJ1xcdTJBNUInOidvcnYnLCdcXHUyQTVDJzonYW5kZCcsJ1xcdTJBNUQnOidvcmQnLCdcXHUyQTVGJzond2VkYmFyJywnXFx1MkE2Nic6J3Nkb3RlJywnXFx1MkE2QSc6J3NpbWRvdCcsJ1xcdTJBNkQnOidjb25nZG90JywnXFx1MkE2RFxcdTAzMzgnOiduY29uZ2RvdCcsJ1xcdTJBNkUnOidlYXN0ZXInLCdcXHUyQTZGJzonYXBhY2lyJywnXFx1MkE3MCc6J2FwRScsJ1xcdTJBNzBcXHUwMzM4JzonbmFwRScsJ1xcdTJBNzEnOidlcGx1cycsJ1xcdTJBNzInOidwbHVzZScsJ1xcdTJBNzMnOidFc2ltJywnXFx1MkE3Nyc6J2VERG90JywnXFx1MkE3OCc6J2VxdWl2REQnLCdcXHUyQTc5JzonbHRjaXInLCdcXHUyQTdBJzonZ3RjaXInLCdcXHUyQTdCJzonbHRxdWVzdCcsJ1xcdTJBN0MnOidndHF1ZXN0JywnXFx1MkE3RCc6J2xlcycsJ1xcdTJBN0RcXHUwMzM4JzonbmxlcycsJ1xcdTJBN0UnOidnZXMnLCdcXHUyQTdFXFx1MDMzOCc6J25nZXMnLCdcXHUyQTdGJzonbGVzZG90JywnXFx1MkE4MCc6J2dlc2RvdCcsJ1xcdTJBODEnOidsZXNkb3RvJywnXFx1MkE4Mic6J2dlc2RvdG8nLCdcXHUyQTgzJzonbGVzZG90b3InLCdcXHUyQTg0JzonZ2VzZG90b2wnLCdcXHUyQTg1JzonbGFwJywnXFx1MkE4Nic6J2dhcCcsJ1xcdTJBODcnOidsbmUnLCdcXHUyQTg4JzonZ25lJywnXFx1MkE4OSc6J2xuYXAnLCdcXHUyQThBJzonZ25hcCcsJ1xcdTJBOEInOidsRWcnLCdcXHUyQThDJzonZ0VsJywnXFx1MkE4RCc6J2xzaW1lJywnXFx1MkE4RSc6J2dzaW1lJywnXFx1MkE4Ric6J2xzaW1nJywnXFx1MkE5MCc6J2dzaW1sJywnXFx1MkE5MSc6J2xnRScsJ1xcdTJBOTInOidnbEUnLCdcXHUyQTkzJzonbGVzZ2VzJywnXFx1MkE5NCc6J2dlc2xlcycsJ1xcdTJBOTUnOidlbHMnLCdcXHUyQTk2JzonZWdzJywnXFx1MkE5Nyc6J2Vsc2RvdCcsJ1xcdTJBOTgnOidlZ3Nkb3QnLCdcXHUyQTk5JzonZWwnLCdcXHUyQTlBJzonZWcnLCdcXHUyQTlEJzonc2ltbCcsJ1xcdTJBOUUnOidzaW1nJywnXFx1MkE5Ric6J3NpbWxFJywnXFx1MkFBMCc6J3NpbWdFJywnXFx1MkFBMSc6J0xlc3NMZXNzJywnXFx1MkFBMVxcdTAzMzgnOidOb3ROZXN0ZWRMZXNzTGVzcycsJ1xcdTJBQTInOidHcmVhdGVyR3JlYXRlcicsJ1xcdTJBQTJcXHUwMzM4JzonTm90TmVzdGVkR3JlYXRlckdyZWF0ZXInLCdcXHUyQUE0JzonZ2xqJywnXFx1MkFBNSc6J2dsYScsJ1xcdTJBQTYnOidsdGNjJywnXFx1MkFBNyc6J2d0Y2MnLCdcXHUyQUE4JzonbGVzY2MnLCdcXHUyQUE5JzonZ2VzY2MnLCdcXHUyQUFBJzonc210JywnXFx1MkFBQic6J2xhdCcsJ1xcdTJBQUMnOidzbXRlJywnXFx1MkFBQ1xcdUZFMDAnOidzbXRlcycsJ1xcdTJBQUQnOidsYXRlJywnXFx1MkFBRFxcdUZFMDAnOidsYXRlcycsJ1xcdTJBQUUnOididW1wRScsJ1xcdTJBQUYnOidwcmUnLCdcXHUyQUFGXFx1MDMzOCc6J25wcmUnLCdcXHUyQUIwJzonc2NlJywnXFx1MkFCMFxcdTAzMzgnOiduc2NlJywnXFx1MkFCMyc6J3ByRScsJ1xcdTJBQjQnOidzY0UnLCdcXHUyQUI1JzoncHJuRScsJ1xcdTJBQjYnOidzY25FJywnXFx1MkFCNyc6J3ByYXAnLCdcXHUyQUI4Jzonc2NhcCcsJ1xcdTJBQjknOidwcm5hcCcsJ1xcdTJBQkEnOidzY25hcCcsJ1xcdTJBQkInOidQcicsJ1xcdTJBQkMnOidTYycsJ1xcdTJBQkQnOidzdWJkb3QnLCdcXHUyQUJFJzonc3VwZG90JywnXFx1MkFCRic6J3N1YnBsdXMnLCdcXHUyQUMwJzonc3VwcGx1cycsJ1xcdTJBQzEnOidzdWJtdWx0JywnXFx1MkFDMic6J3N1cG11bHQnLCdcXHUyQUMzJzonc3ViZWRvdCcsJ1xcdTJBQzQnOidzdXBlZG90JywnXFx1MkFDNSc6J3N1YkUnLCdcXHUyQUM1XFx1MDMzOCc6J25zdWJFJywnXFx1MkFDNic6J3N1cEUnLCdcXHUyQUM2XFx1MDMzOCc6J25zdXBFJywnXFx1MkFDNyc6J3N1YnNpbScsJ1xcdTJBQzgnOidzdXBzaW0nLCdcXHUyQUNCXFx1RkUwMCc6J3ZzdWJuRScsJ1xcdTJBQ0InOidzdWJuRScsJ1xcdTJBQ0NcXHVGRTAwJzondnN1cG5FJywnXFx1MkFDQyc6J3N1cG5FJywnXFx1MkFDRic6J2NzdWInLCdcXHUyQUQwJzonY3N1cCcsJ1xcdTJBRDEnOidjc3ViZScsJ1xcdTJBRDInOidjc3VwZScsJ1xcdTJBRDMnOidzdWJzdXAnLCdcXHUyQUQ0Jzonc3Vwc3ViJywnXFx1MkFENSc6J3N1YnN1YicsJ1xcdTJBRDYnOidzdXBzdXAnLCdcXHUyQUQ3Jzonc3VwaHN1YicsJ1xcdTJBRDgnOidzdXBkc3ViJywnXFx1MkFEOSc6J2Zvcmt2JywnXFx1MkFEQSc6J3RvcGZvcmsnLCdcXHUyQURCJzonbWxjcCcsJ1xcdTJBRTQnOidEYXNodicsJ1xcdTJBRTYnOidWZGFzaGwnLCdcXHUyQUU3JzonQmFydicsJ1xcdTJBRTgnOid2QmFyJywnXFx1MkFFOSc6J3ZCYXJ2JywnXFx1MkFFQic6J1ZiYXInLCdcXHUyQUVDJzonTm90JywnXFx1MkFFRCc6J2JOb3QnLCdcXHUyQUVFJzoncm5taWQnLCdcXHUyQUVGJzonY2lybWlkJywnXFx1MkFGMCc6J21pZGNpcicsJ1xcdTJBRjEnOid0b3BjaXInLCdcXHUyQUYyJzonbmhwYXInLCdcXHUyQUYzJzoncGFyc2ltJywnXFx1MkFGRCc6J3BhcnNsJywnXFx1MkFGRFxcdTIwRTUnOiducGFyc2wnLCdcXHUyNjZEJzonZmxhdCcsJ1xcdTI2NkUnOiduYXR1cicsJ1xcdTI2NkYnOidzaGFycCcsJ1xceEE0JzonY3VycmVuJywnXFx4QTInOidjZW50JywnJCc6J2RvbGxhcicsJ1xceEEzJzoncG91bmQnLCdcXHhBNSc6J3llbicsJ1xcdTIwQUMnOidldXJvJywnXFx4QjknOidzdXAxJywnXFx4QkQnOidoYWxmJywnXFx1MjE1Myc6J2ZyYWMxMycsJ1xceEJDJzonZnJhYzE0JywnXFx1MjE1NSc6J2ZyYWMxNScsJ1xcdTIxNTknOidmcmFjMTYnLCdcXHUyMTVCJzonZnJhYzE4JywnXFx4QjInOidzdXAyJywnXFx1MjE1NCc6J2ZyYWMyMycsJ1xcdTIxNTYnOidmcmFjMjUnLCdcXHhCMyc6J3N1cDMnLCdcXHhCRSc6J2ZyYWMzNCcsJ1xcdTIxNTcnOidmcmFjMzUnLCdcXHUyMTVDJzonZnJhYzM4JywnXFx1MjE1OCc6J2ZyYWM0NScsJ1xcdTIxNUEnOidmcmFjNTYnLCdcXHUyMTVEJzonZnJhYzU4JywnXFx1MjE1RSc6J2ZyYWM3OCcsJ1xcdUQ4MzVcXHVEQ0I2JzonYXNjcicsJ1xcdUQ4MzVcXHVERDUyJzonYW9wZicsJ1xcdUQ4MzVcXHVERDFFJzonYWZyJywnXFx1RDgzNVxcdUREMzgnOidBb3BmJywnXFx1RDgzNVxcdUREMDQnOidBZnInLCdcXHVEODM1XFx1REM5Qyc6J0FzY3InLCdcXHhBQSc6J29yZGYnLCdcXHhFMSc6J2FhY3V0ZScsJ1xceEMxJzonQWFjdXRlJywnXFx4RTAnOidhZ3JhdmUnLCdcXHhDMCc6J0FncmF2ZScsJ1xcdTAxMDMnOidhYnJldmUnLCdcXHUwMTAyJzonQWJyZXZlJywnXFx4RTInOidhY2lyYycsJ1xceEMyJzonQWNpcmMnLCdcXHhFNSc6J2FyaW5nJywnXFx4QzUnOidhbmdzdCcsJ1xceEU0JzonYXVtbCcsJ1xceEM0JzonQXVtbCcsJ1xceEUzJzonYXRpbGRlJywnXFx4QzMnOidBdGlsZGUnLCdcXHUwMTA1JzonYW9nb24nLCdcXHUwMTA0JzonQW9nb24nLCdcXHUwMTAxJzonYW1hY3InLCdcXHUwMTAwJzonQW1hY3InLCdcXHhFNic6J2FlbGlnJywnXFx4QzYnOidBRWxpZycsJ1xcdUQ4MzVcXHVEQ0I3JzonYnNjcicsJ1xcdUQ4MzVcXHVERDUzJzonYm9wZicsJ1xcdUQ4MzVcXHVERDFGJzonYmZyJywnXFx1RDgzNVxcdUREMzknOidCb3BmJywnXFx1MjEyQyc6J0JzY3InLCdcXHVEODM1XFx1REQwNSc6J0JmcicsJ1xcdUQ4MzVcXHVERDIwJzonY2ZyJywnXFx1RDgzNVxcdURDQjgnOidjc2NyJywnXFx1RDgzNVxcdURENTQnOidjb3BmJywnXFx1MjEyRCc6J0NmcicsJ1xcdUQ4MzVcXHVEQzlFJzonQ3NjcicsJ1xcdTIxMDInOidDb3BmJywnXFx1MDEwNyc6J2NhY3V0ZScsJ1xcdTAxMDYnOidDYWN1dGUnLCdcXHUwMTA5JzonY2NpcmMnLCdcXHUwMTA4JzonQ2NpcmMnLCdcXHUwMTBEJzonY2Nhcm9uJywnXFx1MDEwQyc6J0NjYXJvbicsJ1xcdTAxMEInOidjZG90JywnXFx1MDEwQSc6J0Nkb3QnLCdcXHhFNyc6J2NjZWRpbCcsJ1xceEM3JzonQ2NlZGlsJywnXFx1MjEwNSc6J2luY2FyZScsJ1xcdUQ4MzVcXHVERDIxJzonZGZyJywnXFx1MjE0Nic6J2RkJywnXFx1RDgzNVxcdURENTUnOidkb3BmJywnXFx1RDgzNVxcdURDQjknOidkc2NyJywnXFx1RDgzNVxcdURDOUYnOidEc2NyJywnXFx1RDgzNVxcdUREMDcnOidEZnInLCdcXHUyMTQ1JzonREQnLCdcXHVEODM1XFx1REQzQic6J0RvcGYnLCdcXHUwMTBGJzonZGNhcm9uJywnXFx1MDEwRSc6J0RjYXJvbicsJ1xcdTAxMTEnOidkc3Ryb2snLCdcXHUwMTEwJzonRHN0cm9rJywnXFx4RjAnOidldGgnLCdcXHhEMCc6J0VUSCcsJ1xcdTIxNDcnOidlZScsJ1xcdTIxMkYnOidlc2NyJywnXFx1RDgzNVxcdUREMjInOidlZnInLCdcXHVEODM1XFx1REQ1Nic6J2VvcGYnLCdcXHUyMTMwJzonRXNjcicsJ1xcdUQ4MzVcXHVERDA4JzonRWZyJywnXFx1RDgzNVxcdUREM0MnOidFb3BmJywnXFx4RTknOidlYWN1dGUnLCdcXHhDOSc6J0VhY3V0ZScsJ1xceEU4JzonZWdyYXZlJywnXFx4QzgnOidFZ3JhdmUnLCdcXHhFQSc6J2VjaXJjJywnXFx4Q0EnOidFY2lyYycsJ1xcdTAxMUInOidlY2Fyb24nLCdcXHUwMTFBJzonRWNhcm9uJywnXFx4RUInOidldW1sJywnXFx4Q0InOidFdW1sJywnXFx1MDExNyc6J2Vkb3QnLCdcXHUwMTE2JzonRWRvdCcsJ1xcdTAxMTknOidlb2dvbicsJ1xcdTAxMTgnOidFb2dvbicsJ1xcdTAxMTMnOidlbWFjcicsJ1xcdTAxMTInOidFbWFjcicsJ1xcdUQ4MzVcXHVERDIzJzonZmZyJywnXFx1RDgzNVxcdURENTcnOidmb3BmJywnXFx1RDgzNVxcdURDQkInOidmc2NyJywnXFx1RDgzNVxcdUREMDknOidGZnInLCdcXHVEODM1XFx1REQzRCc6J0ZvcGYnLCdcXHUyMTMxJzonRnNjcicsJ1xcdUZCMDAnOidmZmxpZycsJ1xcdUZCMDMnOidmZmlsaWcnLCdcXHVGQjA0JzonZmZsbGlnJywnXFx1RkIwMSc6J2ZpbGlnJywnZmonOidmamxpZycsJ1xcdUZCMDInOidmbGxpZycsJ1xcdTAxOTInOidmbm9mJywnXFx1MjEwQSc6J2dzY3InLCdcXHVEODM1XFx1REQ1OCc6J2dvcGYnLCdcXHVEODM1XFx1REQyNCc6J2dmcicsJ1xcdUQ4MzVcXHVEQ0EyJzonR3NjcicsJ1xcdUQ4MzVcXHVERDNFJzonR29wZicsJ1xcdUQ4MzVcXHVERDBBJzonR2ZyJywnXFx1MDFGNSc6J2dhY3V0ZScsJ1xcdTAxMUYnOidnYnJldmUnLCdcXHUwMTFFJzonR2JyZXZlJywnXFx1MDExRCc6J2djaXJjJywnXFx1MDExQyc6J0djaXJjJywnXFx1MDEyMSc6J2dkb3QnLCdcXHUwMTIwJzonR2RvdCcsJ1xcdTAxMjInOidHY2VkaWwnLCdcXHVEODM1XFx1REQyNSc6J2hmcicsJ1xcdTIxMEUnOidwbGFuY2toJywnXFx1RDgzNVxcdURDQkQnOidoc2NyJywnXFx1RDgzNVxcdURENTknOidob3BmJywnXFx1MjEwQic6J0hzY3InLCdcXHUyMTBDJzonSGZyJywnXFx1MjEwRCc6J0hvcGYnLCdcXHUwMTI1JzonaGNpcmMnLCdcXHUwMTI0JzonSGNpcmMnLCdcXHUyMTBGJzonaGJhcicsJ1xcdTAxMjcnOidoc3Ryb2snLCdcXHUwMTI2JzonSHN0cm9rJywnXFx1RDgzNVxcdURENUEnOidpb3BmJywnXFx1RDgzNVxcdUREMjYnOidpZnInLCdcXHVEODM1XFx1RENCRSc6J2lzY3InLCdcXHUyMTQ4JzonaWknLCdcXHVEODM1XFx1REQ0MCc6J0lvcGYnLCdcXHUyMTEwJzonSXNjcicsJ1xcdTIxMTEnOidJbScsJ1xceEVEJzonaWFjdXRlJywnXFx4Q0QnOidJYWN1dGUnLCdcXHhFQyc6J2lncmF2ZScsJ1xceENDJzonSWdyYXZlJywnXFx4RUUnOidpY2lyYycsJ1xceENFJzonSWNpcmMnLCdcXHhFRic6J2l1bWwnLCdcXHhDRic6J0l1bWwnLCdcXHUwMTI5JzonaXRpbGRlJywnXFx1MDEyOCc6J0l0aWxkZScsJ1xcdTAxMzAnOidJZG90JywnXFx1MDEyRic6J2lvZ29uJywnXFx1MDEyRSc6J0lvZ29uJywnXFx1MDEyQic6J2ltYWNyJywnXFx1MDEyQSc6J0ltYWNyJywnXFx1MDEzMyc6J2lqbGlnJywnXFx1MDEzMic6J0lKbGlnJywnXFx1MDEzMSc6J2ltYXRoJywnXFx1RDgzNVxcdURDQkYnOidqc2NyJywnXFx1RDgzNVxcdURENUInOidqb3BmJywnXFx1RDgzNVxcdUREMjcnOidqZnInLCdcXHVEODM1XFx1RENBNSc6J0pzY3InLCdcXHVEODM1XFx1REQwRCc6J0pmcicsJ1xcdUQ4MzVcXHVERDQxJzonSm9wZicsJ1xcdTAxMzUnOidqY2lyYycsJ1xcdTAxMzQnOidKY2lyYycsJ1xcdTAyMzcnOidqbWF0aCcsJ1xcdUQ4MzVcXHVERDVDJzona29wZicsJ1xcdUQ4MzVcXHVEQ0MwJzona3NjcicsJ1xcdUQ4MzVcXHVERDI4Jzona2ZyJywnXFx1RDgzNVxcdURDQTYnOidLc2NyJywnXFx1RDgzNVxcdURENDInOidLb3BmJywnXFx1RDgzNVxcdUREMEUnOidLZnInLCdcXHUwMTM3Jzona2NlZGlsJywnXFx1MDEzNic6J0tjZWRpbCcsJ1xcdUQ4MzVcXHVERDI5JzonbGZyJywnXFx1RDgzNVxcdURDQzEnOidsc2NyJywnXFx1MjExMyc6J2VsbCcsJ1xcdUQ4MzVcXHVERDVEJzonbG9wZicsJ1xcdTIxMTInOidMc2NyJywnXFx1RDgzNVxcdUREMEYnOidMZnInLCdcXHVEODM1XFx1REQ0Myc6J0xvcGYnLCdcXHUwMTNBJzonbGFjdXRlJywnXFx1MDEzOSc6J0xhY3V0ZScsJ1xcdTAxM0UnOidsY2Fyb24nLCdcXHUwMTNEJzonTGNhcm9uJywnXFx1MDEzQyc6J2xjZWRpbCcsJ1xcdTAxM0InOidMY2VkaWwnLCdcXHUwMTQyJzonbHN0cm9rJywnXFx1MDE0MSc6J0xzdHJvaycsJ1xcdTAxNDAnOidsbWlkb3QnLCdcXHUwMTNGJzonTG1pZG90JywnXFx1RDgzNVxcdUREMkEnOidtZnInLCdcXHVEODM1XFx1REQ1RSc6J21vcGYnLCdcXHVEODM1XFx1RENDMic6J21zY3InLCdcXHVEODM1XFx1REQxMCc6J01mcicsJ1xcdUQ4MzVcXHVERDQ0JzonTW9wZicsJ1xcdTIxMzMnOidNc2NyJywnXFx1RDgzNVxcdUREMkInOiduZnInLCdcXHVEODM1XFx1REQ1Ric6J25vcGYnLCdcXHVEODM1XFx1RENDMyc6J25zY3InLCdcXHUyMTE1JzonTm9wZicsJ1xcdUQ4MzVcXHVEQ0E5JzonTnNjcicsJ1xcdUQ4MzVcXHVERDExJzonTmZyJywnXFx1MDE0NCc6J25hY3V0ZScsJ1xcdTAxNDMnOidOYWN1dGUnLCdcXHUwMTQ4JzonbmNhcm9uJywnXFx1MDE0Nyc6J05jYXJvbicsJ1xceEYxJzonbnRpbGRlJywnXFx4RDEnOidOdGlsZGUnLCdcXHUwMTQ2JzonbmNlZGlsJywnXFx1MDE0NSc6J05jZWRpbCcsJ1xcdTIxMTYnOidudW1lcm8nLCdcXHUwMTRCJzonZW5nJywnXFx1MDE0QSc6J0VORycsJ1xcdUQ4MzVcXHVERDYwJzonb29wZicsJ1xcdUQ4MzVcXHVERDJDJzonb2ZyJywnXFx1MjEzNCc6J29zY3InLCdcXHVEODM1XFx1RENBQSc6J09zY3InLCdcXHVEODM1XFx1REQxMic6J09mcicsJ1xcdUQ4MzVcXHVERDQ2JzonT29wZicsJ1xceEJBJzonb3JkbScsJ1xceEYzJzonb2FjdXRlJywnXFx4RDMnOidPYWN1dGUnLCdcXHhGMic6J29ncmF2ZScsJ1xceEQyJzonT2dyYXZlJywnXFx4RjQnOidvY2lyYycsJ1xceEQ0JzonT2NpcmMnLCdcXHhGNic6J291bWwnLCdcXHhENic6J091bWwnLCdcXHUwMTUxJzonb2RibGFjJywnXFx1MDE1MCc6J09kYmxhYycsJ1xceEY1Jzonb3RpbGRlJywnXFx4RDUnOidPdGlsZGUnLCdcXHhGOCc6J29zbGFzaCcsJ1xceEQ4JzonT3NsYXNoJywnXFx1MDE0RCc6J29tYWNyJywnXFx1MDE0Qyc6J09tYWNyJywnXFx1MDE1Myc6J29lbGlnJywnXFx1MDE1Mic6J09FbGlnJywnXFx1RDgzNVxcdUREMkQnOidwZnInLCdcXHVEODM1XFx1RENDNSc6J3BzY3InLCdcXHVEODM1XFx1REQ2MSc6J3BvcGYnLCdcXHUyMTE5JzonUG9wZicsJ1xcdUQ4MzVcXHVERDEzJzonUGZyJywnXFx1RDgzNVxcdURDQUInOidQc2NyJywnXFx1RDgzNVxcdURENjInOidxb3BmJywnXFx1RDgzNVxcdUREMkUnOidxZnInLCdcXHVEODM1XFx1RENDNic6J3FzY3InLCdcXHVEODM1XFx1RENBQyc6J1FzY3InLCdcXHVEODM1XFx1REQxNCc6J1FmcicsJ1xcdTIxMUEnOidRb3BmJywnXFx1MDEzOCc6J2tncmVlbicsJ1xcdUQ4MzVcXHVERDJGJzoncmZyJywnXFx1RDgzNVxcdURENjMnOidyb3BmJywnXFx1RDgzNVxcdURDQzcnOidyc2NyJywnXFx1MjExQic6J1JzY3InLCdcXHUyMTFDJzonUmUnLCdcXHUyMTFEJzonUm9wZicsJ1xcdTAxNTUnOidyYWN1dGUnLCdcXHUwMTU0JzonUmFjdXRlJywnXFx1MDE1OSc6J3JjYXJvbicsJ1xcdTAxNTgnOidSY2Fyb24nLCdcXHUwMTU3JzoncmNlZGlsJywnXFx1MDE1Nic6J1JjZWRpbCcsJ1xcdUQ4MzVcXHVERDY0Jzonc29wZicsJ1xcdUQ4MzVcXHVEQ0M4Jzonc3NjcicsJ1xcdUQ4MzVcXHVERDMwJzonc2ZyJywnXFx1RDgzNVxcdURENEEnOidTb3BmJywnXFx1RDgzNVxcdUREMTYnOidTZnInLCdcXHVEODM1XFx1RENBRSc6J1NzY3InLCdcXHUyNEM4Jzonb1MnLCdcXHUwMTVCJzonc2FjdXRlJywnXFx1MDE1QSc6J1NhY3V0ZScsJ1xcdTAxNUQnOidzY2lyYycsJ1xcdTAxNUMnOidTY2lyYycsJ1xcdTAxNjEnOidzY2Fyb24nLCdcXHUwMTYwJzonU2Nhcm9uJywnXFx1MDE1Ric6J3NjZWRpbCcsJ1xcdTAxNUUnOidTY2VkaWwnLCdcXHhERic6J3N6bGlnJywnXFx1RDgzNVxcdUREMzEnOid0ZnInLCdcXHVEODM1XFx1RENDOSc6J3RzY3InLCdcXHVEODM1XFx1REQ2NSc6J3RvcGYnLCdcXHVEODM1XFx1RENBRic6J1RzY3InLCdcXHVEODM1XFx1REQxNyc6J1RmcicsJ1xcdUQ4MzVcXHVERDRCJzonVG9wZicsJ1xcdTAxNjUnOid0Y2Fyb24nLCdcXHUwMTY0JzonVGNhcm9uJywnXFx1MDE2Myc6J3RjZWRpbCcsJ1xcdTAxNjInOidUY2VkaWwnLCdcXHUyMTIyJzondHJhZGUnLCdcXHUwMTY3JzondHN0cm9rJywnXFx1MDE2Nic6J1RzdHJvaycsJ1xcdUQ4MzVcXHVEQ0NBJzondXNjcicsJ1xcdUQ4MzVcXHVERDY2JzondW9wZicsJ1xcdUQ4MzVcXHVERDMyJzondWZyJywnXFx1RDgzNVxcdURENEMnOidVb3BmJywnXFx1RDgzNVxcdUREMTgnOidVZnInLCdcXHVEODM1XFx1RENCMCc6J1VzY3InLCdcXHhGQSc6J3VhY3V0ZScsJ1xceERBJzonVWFjdXRlJywnXFx4RjknOid1Z3JhdmUnLCdcXHhEOSc6J1VncmF2ZScsJ1xcdTAxNkQnOid1YnJldmUnLCdcXHUwMTZDJzonVWJyZXZlJywnXFx4RkInOid1Y2lyYycsJ1xceERCJzonVWNpcmMnLCdcXHUwMTZGJzondXJpbmcnLCdcXHUwMTZFJzonVXJpbmcnLCdcXHhGQyc6J3V1bWwnLCdcXHhEQyc6J1V1bWwnLCdcXHUwMTcxJzondWRibGFjJywnXFx1MDE3MCc6J1VkYmxhYycsJ1xcdTAxNjknOid1dGlsZGUnLCdcXHUwMTY4JzonVXRpbGRlJywnXFx1MDE3Myc6J3VvZ29uJywnXFx1MDE3Mic6J1VvZ29uJywnXFx1MDE2Qic6J3VtYWNyJywnXFx1MDE2QSc6J1VtYWNyJywnXFx1RDgzNVxcdUREMzMnOid2ZnInLCdcXHVEODM1XFx1REQ2Nyc6J3ZvcGYnLCdcXHVEODM1XFx1RENDQic6J3ZzY3InLCdcXHVEODM1XFx1REQxOSc6J1ZmcicsJ1xcdUQ4MzVcXHVERDREJzonVm9wZicsJ1xcdUQ4MzVcXHVEQ0IxJzonVnNjcicsJ1xcdUQ4MzVcXHVERDY4Jzond29wZicsJ1xcdUQ4MzVcXHVEQ0NDJzond3NjcicsJ1xcdUQ4MzVcXHVERDM0Jzond2ZyJywnXFx1RDgzNVxcdURDQjInOidXc2NyJywnXFx1RDgzNVxcdURENEUnOidXb3BmJywnXFx1RDgzNVxcdUREMUEnOidXZnInLCdcXHUwMTc1Jzond2NpcmMnLCdcXHUwMTc0JzonV2NpcmMnLCdcXHVEODM1XFx1REQzNSc6J3hmcicsJ1xcdUQ4MzVcXHVEQ0NEJzoneHNjcicsJ1xcdUQ4MzVcXHVERDY5JzoneG9wZicsJ1xcdUQ4MzVcXHVERDRGJzonWG9wZicsJ1xcdUQ4MzVcXHVERDFCJzonWGZyJywnXFx1RDgzNVxcdURDQjMnOidYc2NyJywnXFx1RDgzNVxcdUREMzYnOid5ZnInLCdcXHVEODM1XFx1RENDRSc6J3lzY3InLCdcXHVEODM1XFx1REQ2QSc6J3lvcGYnLCdcXHVEODM1XFx1RENCNCc6J1lzY3InLCdcXHVEODM1XFx1REQxQyc6J1lmcicsJ1xcdUQ4MzVcXHVERDUwJzonWW9wZicsJ1xceEZEJzoneWFjdXRlJywnXFx4REQnOidZYWN1dGUnLCdcXHUwMTc3JzoneWNpcmMnLCdcXHUwMTc2JzonWWNpcmMnLCdcXHhGRic6J3l1bWwnLCdcXHUwMTc4JzonWXVtbCcsJ1xcdUQ4MzVcXHVEQ0NGJzonenNjcicsJ1xcdUQ4MzVcXHVERDM3JzonemZyJywnXFx1RDgzNVxcdURENkInOid6b3BmJywnXFx1MjEyOCc6J1pmcicsJ1xcdTIxMjQnOidab3BmJywnXFx1RDgzNVxcdURDQjUnOidac2NyJywnXFx1MDE3QSc6J3phY3V0ZScsJ1xcdTAxNzknOidaYWN1dGUnLCdcXHUwMTdFJzonemNhcm9uJywnXFx1MDE3RCc6J1pjYXJvbicsJ1xcdTAxN0MnOid6ZG90JywnXFx1MDE3Qic6J1pkb3QnLCdcXHUwMUI1JzonaW1wZWQnLCdcXHhGRSc6J3Rob3JuJywnXFx4REUnOidUSE9STicsJ1xcdTAxNDknOiduYXBvcycsJ1xcdTAzQjEnOidhbHBoYScsJ1xcdTAzOTEnOidBbHBoYScsJ1xcdTAzQjInOidiZXRhJywnXFx1MDM5Mic6J0JldGEnLCdcXHUwM0IzJzonZ2FtbWEnLCdcXHUwMzkzJzonR2FtbWEnLCdcXHUwM0I0JzonZGVsdGEnLCdcXHUwMzk0JzonRGVsdGEnLCdcXHUwM0I1JzonZXBzaScsJ1xcdTAzRjUnOidlcHNpdicsJ1xcdTAzOTUnOidFcHNpbG9uJywnXFx1MDNERCc6J2dhbW1hZCcsJ1xcdTAzREMnOidHYW1tYWQnLCdcXHUwM0I2JzonemV0YScsJ1xcdTAzOTYnOidaZXRhJywnXFx1MDNCNyc6J2V0YScsJ1xcdTAzOTcnOidFdGEnLCdcXHUwM0I4JzondGhldGEnLCdcXHUwM0QxJzondGhldGF2JywnXFx1MDM5OCc6J1RoZXRhJywnXFx1MDNCOSc6J2lvdGEnLCdcXHUwMzk5JzonSW90YScsJ1xcdTAzQkEnOidrYXBwYScsJ1xcdTAzRjAnOidrYXBwYXYnLCdcXHUwMzlBJzonS2FwcGEnLCdcXHUwM0JCJzonbGFtYmRhJywnXFx1MDM5Qic6J0xhbWJkYScsJ1xcdTAzQkMnOidtdScsJ1xceEI1JzonbWljcm8nLCdcXHUwMzlDJzonTXUnLCdcXHUwM0JEJzonbnUnLCdcXHUwMzlEJzonTnUnLCdcXHUwM0JFJzoneGknLCdcXHUwMzlFJzonWGknLCdcXHUwM0JGJzonb21pY3JvbicsJ1xcdTAzOUYnOidPbWljcm9uJywnXFx1MDNDMCc6J3BpJywnXFx1MDNENic6J3BpdicsJ1xcdTAzQTAnOidQaScsJ1xcdTAzQzEnOidyaG8nLCdcXHUwM0YxJzoncmhvdicsJ1xcdTAzQTEnOidSaG8nLCdcXHUwM0MzJzonc2lnbWEnLCdcXHUwM0EzJzonU2lnbWEnLCdcXHUwM0MyJzonc2lnbWFmJywnXFx1MDNDNCc6J3RhdScsJ1xcdTAzQTQnOidUYXUnLCdcXHUwM0M1JzondXBzaScsJ1xcdTAzQTUnOidVcHNpbG9uJywnXFx1MDNEMic6J1Vwc2knLCdcXHUwM0M2JzoncGhpJywnXFx1MDNENSc6J3BoaXYnLCdcXHUwM0E2JzonUGhpJywnXFx1MDNDNyc6J2NoaScsJ1xcdTAzQTcnOidDaGknLCdcXHUwM0M4JzoncHNpJywnXFx1MDNBOCc6J1BzaScsJ1xcdTAzQzknOidvbWVnYScsJ1xcdTAzQTknOidvaG0nLCdcXHUwNDMwJzonYWN5JywnXFx1MDQxMCc6J0FjeScsJ1xcdTA0MzEnOidiY3knLCdcXHUwNDExJzonQmN5JywnXFx1MDQzMic6J3ZjeScsJ1xcdTA0MTInOidWY3knLCdcXHUwNDMzJzonZ2N5JywnXFx1MDQxMyc6J0djeScsJ1xcdTA0NTMnOidnamN5JywnXFx1MDQwMyc6J0dKY3knLCdcXHUwNDM0JzonZGN5JywnXFx1MDQxNCc6J0RjeScsJ1xcdTA0NTInOidkamN5JywnXFx1MDQwMic6J0RKY3knLCdcXHUwNDM1JzonaWVjeScsJ1xcdTA0MTUnOidJRWN5JywnXFx1MDQ1MSc6J2lvY3knLCdcXHUwNDAxJzonSU9jeScsJ1xcdTA0NTQnOidqdWtjeScsJ1xcdTA0MDQnOidKdWtjeScsJ1xcdTA0MzYnOid6aGN5JywnXFx1MDQxNic6J1pIY3knLCdcXHUwNDM3JzonemN5JywnXFx1MDQxNyc6J1pjeScsJ1xcdTA0NTUnOidkc2N5JywnXFx1MDQwNSc6J0RTY3knLCdcXHUwNDM4JzonaWN5JywnXFx1MDQxOCc6J0ljeScsJ1xcdTA0NTYnOidpdWtjeScsJ1xcdTA0MDYnOidJdWtjeScsJ1xcdTA0NTcnOid5aWN5JywnXFx1MDQwNyc6J1lJY3knLCdcXHUwNDM5JzonamN5JywnXFx1MDQxOSc6J0pjeScsJ1xcdTA0NTgnOidqc2VyY3knLCdcXHUwNDA4JzonSnNlcmN5JywnXFx1MDQzQSc6J2tjeScsJ1xcdTA0MUEnOidLY3knLCdcXHUwNDVDJzona2pjeScsJ1xcdTA0MEMnOidLSmN5JywnXFx1MDQzQic6J2xjeScsJ1xcdTA0MUInOidMY3knLCdcXHUwNDU5JzonbGpjeScsJ1xcdTA0MDknOidMSmN5JywnXFx1MDQzQyc6J21jeScsJ1xcdTA0MUMnOidNY3knLCdcXHUwNDNEJzonbmN5JywnXFx1MDQxRCc6J05jeScsJ1xcdTA0NUEnOiduamN5JywnXFx1MDQwQSc6J05KY3knLCdcXHUwNDNFJzonb2N5JywnXFx1MDQxRSc6J09jeScsJ1xcdTA0M0YnOidwY3knLCdcXHUwNDFGJzonUGN5JywnXFx1MDQ0MCc6J3JjeScsJ1xcdTA0MjAnOidSY3knLCdcXHUwNDQxJzonc2N5JywnXFx1MDQyMSc6J1NjeScsJ1xcdTA0NDInOid0Y3knLCdcXHUwNDIyJzonVGN5JywnXFx1MDQ1Qic6J3RzaGN5JywnXFx1MDQwQic6J1RTSGN5JywnXFx1MDQ0Myc6J3VjeScsJ1xcdTA0MjMnOidVY3knLCdcXHUwNDVFJzondWJyY3knLCdcXHUwNDBFJzonVWJyY3knLCdcXHUwNDQ0JzonZmN5JywnXFx1MDQyNCc6J0ZjeScsJ1xcdTA0NDUnOidraGN5JywnXFx1MDQyNSc6J0tIY3knLCdcXHUwNDQ2JzondHNjeScsJ1xcdTA0MjYnOidUU2N5JywnXFx1MDQ0Nyc6J2NoY3knLCdcXHUwNDI3JzonQ0hjeScsJ1xcdTA0NUYnOidkemN5JywnXFx1MDQwRic6J0RaY3knLCdcXHUwNDQ4Jzonc2hjeScsJ1xcdTA0MjgnOidTSGN5JywnXFx1MDQ0OSc6J3NoY2hjeScsJ1xcdTA0MjknOidTSENIY3knLCdcXHUwNDRBJzonaGFyZGN5JywnXFx1MDQyQSc6J0hBUkRjeScsJ1xcdTA0NEInOid5Y3knLCdcXHUwNDJCJzonWWN5JywnXFx1MDQ0Qyc6J3NvZnRjeScsJ1xcdTA0MkMnOidTT0ZUY3knLCdcXHUwNDREJzonZWN5JywnXFx1MDQyRCc6J0VjeScsJ1xcdTA0NEUnOid5dWN5JywnXFx1MDQyRSc6J1lVY3knLCdcXHUwNDRGJzoneWFjeScsJ1xcdTA0MkYnOidZQWN5JywnXFx1MjEzNSc6J2FsZXBoJywnXFx1MjEzNic6J2JldGgnLCdcXHUyMTM3JzonZ2ltZWwnLCdcXHUyMTM4JzonZGFsZXRoJ307XG5cblx0dmFyIHJlZ2V4RXNjYXBlID0gL1tcIiYnPD5gXS9nO1xuXHR2YXIgZXNjYXBlTWFwID0ge1xuXHRcdCdcIic6ICcmcXVvdDsnLFxuXHRcdCcmJzogJyZhbXA7Jyxcblx0XHQnXFwnJzogJyYjeDI3OycsXG5cdFx0JzwnOiAnJmx0OycsXG5cdFx0Ly8gU2VlIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kczogaW4gSFRNTCwgdGhlXG5cdFx0Ly8gZm9sbG93aW5nIGlzIG5vdCBzdHJpY3RseSBuZWNlc3NhcnkgdW5sZXNzIGl0XHUyMDE5cyBwYXJ0IG9mIGEgdGFnIG9yIGFuXG5cdFx0Ly8gdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBXZVx1MjAxOXJlIG9ubHkgZXNjYXBpbmcgaXQgdG8gc3VwcG9ydCB0aG9zZVxuXHRcdC8vIHNpdHVhdGlvbnMsIGFuZCBmb3IgWE1MIHN1cHBvcnQuXG5cdFx0Jz4nOiAnJmd0OycsXG5cdFx0Ly8gSW4gSW50ZXJuZXQgRXhwbG9yZXIgXHUyMjY0IDgsIHRoZSBiYWNrdGljayBjaGFyYWN0ZXIgY2FuIGJlIHVzZWRcblx0XHQvLyB0byBicmVhayBvdXQgb2YgKHVuKXF1b3RlZCBhdHRyaWJ1dGUgdmFsdWVzIG9yIEhUTUwgY29tbWVudHMuXG5cdFx0Ly8gU2VlIGh0dHA6Ly9odG1sNXNlYy5vcmcvIzEwMiwgaHR0cDovL2h0bWw1c2VjLm9yZy8jMTA4LCBhbmRcblx0XHQvLyBodHRwOi8vaHRtbDVzZWMub3JnLyMxMzMuXG5cdFx0J2AnOiAnJiN4NjA7J1xuXHR9O1xuXG5cdHZhciByZWdleEludmFsaWRFbnRpdHkgPSAvJiMoPzpbeFhdW15hLWZBLUYwLTldfFteMC05eFhdKS87XG5cdHZhciByZWdleEludmFsaWRSYXdDb2RlUG9pbnQgPSAvW1xcMC1cXHgwOFxceDBCXFx4MEUtXFx4MUZcXHg3Ri1cXHg5RlxcdUZERDAtXFx1RkRFRlxcdUZGRkVcXHVGRkZGXXxbXFx1RDgzRlxcdUQ4N0ZcXHVEOEJGXFx1RDhGRlxcdUQ5M0ZcXHVEOTdGXFx1RDlCRlxcdUQ5RkZcXHVEQTNGXFx1REE3RlxcdURBQkZcXHVEQUZGXFx1REIzRlxcdURCN0ZcXHVEQkJGXFx1REJGRl1bXFx1REZGRVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLztcblx0dmFyIHJlZ2V4RGVjb2RlID0gLyYoQ291bnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbHxEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3d8Q2xvY2t3aXNlQ29udG91ckludGVncmFsfE5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyfE5vdFNxdWFyZVN1cGVyc2V0RXF1YWx8RGlhY3JpdGljYWxEb3VibGVBY3V0ZXxOb3RSaWdodFRyaWFuZ2xlRXF1YWx8Tm90U3VjY2VlZHNTbGFudEVxdWFsfE5vdFByZWNlZGVzU2xhbnRFcXVhbHxDbG9zZUN1cmx5RG91YmxlUXVvdGV8TmVnYXRpdmVWZXJ5VGhpblNwYWNlfERvdWJsZUNvbnRvdXJJbnRlZ3JhbHxGaWxsZWRWZXJ5U21hbGxTcXVhcmV8Q2FwaXRhbERpZmZlcmVudGlhbER8T3BlbkN1cmx5RG91YmxlUXVvdGV8RW1wdHlWZXJ5U21hbGxTcXVhcmV8TmVzdGVkR3JlYXRlckdyZWF0ZXJ8RG91YmxlTG9uZ1JpZ2h0QXJyb3d8Tm90TGVmdFRyaWFuZ2xlRXF1YWx8Tm90R3JlYXRlclNsYW50RXF1YWx8UmV2ZXJzZVVwRXF1aWxpYnJpdW18RG91YmxlTGVmdFJpZ2h0QXJyb3d8Tm90U3F1YXJlU3Vic2V0RXF1YWx8Tm90RG91YmxlVmVydGljYWxCYXJ8UmlnaHRBcnJvd0xlZnRBcnJvd3xOb3RHcmVhdGVyRnVsbEVxdWFsfE5vdFJpZ2h0VHJpYW5nbGVCYXJ8U3F1YXJlU3VwZXJzZXRFcXVhbHxEb3duTGVmdFJpZ2h0VmVjdG9yfERvdWJsZUxvbmdMZWZ0QXJyb3d8bGVmdHJpZ2h0c3F1aWdhcnJvd3xMZWZ0QXJyb3dSaWdodEFycm93fE5lZ2F0aXZlTWVkaXVtU3BhY2V8YmxhY2t0cmlhbmdsZXJpZ2h0fFJpZ2h0RG93blZlY3RvckJhcnxQcmVjZWRlc1NsYW50RXF1YWx8UmlnaHREb3VibGVCcmFja2V0fFN1Y2NlZWRzU2xhbnRFcXVhbHxOb3RMZWZ0VHJpYW5nbGVCYXJ8UmlnaHRUcmlhbmdsZUVxdWFsfFNxdWFyZUludGVyc2VjdGlvbnxSaWdodERvd25UZWVWZWN0b3J8UmV2ZXJzZUVxdWlsaWJyaXVtfE5lZ2F0aXZlVGhpY2tTcGFjZXxsb25nbGVmdHJpZ2h0YXJyb3d8TG9uZ2xlZnRyaWdodGFycm93fExvbmdMZWZ0UmlnaHRBcnJvd3xEb3duUmlnaHRUZWVWZWN0b3J8RG93blJpZ2h0VmVjdG9yQmFyfEdyZWF0ZXJTbGFudEVxdWFsfFNxdWFyZVN1YnNldEVxdWFsfExlZnREb3duVmVjdG9yQmFyfExlZnREb3VibGVCcmFja2V0fFZlcnRpY2FsU2VwYXJhdG9yfHJpZ2h0bGVmdGhhcnBvb25zfE5vdEdyZWF0ZXJHcmVhdGVyfE5vdFNxdWFyZVN1cGVyc2V0fGJsYWNrdHJpYW5nbGVsZWZ0fGJsYWNrdHJpYW5nbGVkb3dufE5lZ2F0aXZlVGhpblNwYWNlfExlZnREb3duVGVlVmVjdG9yfE5vdExlc3NTbGFudEVxdWFsfGxlZnRyaWdodGhhcnBvb25zfERvdWJsZVVwRG93bkFycm93fERvdWJsZVZlcnRpY2FsQmFyfExlZnRUcmlhbmdsZUVxdWFsfEZpbGxlZFNtYWxsU3F1YXJlfHR3b2hlYWRyaWdodGFycm93fE5vdE5lc3RlZExlc3NMZXNzfERvd25MZWZ0VGVlVmVjdG9yfERvd25MZWZ0VmVjdG9yQmFyfFJpZ2h0QW5nbGVCcmFja2V0fE5vdFRpbGRlRnVsbEVxdWFsfE5vdFJldmVyc2VFbGVtZW50fFJpZ2h0VXBEb3duVmVjdG9yfERpYWNyaXRpY2FsVGlsZGV8Tm90U3VjY2VlZHNUaWxkZXxjaXJjbGVhcnJvd3JpZ2h0fE5vdFByZWNlZGVzRXF1YWx8cmlnaHRoYXJwb29uZG93bnxEb3VibGVSaWdodEFycm93fE5vdFN1Y2NlZWRzRXF1YWx8Tm9uQnJlYWtpbmdTcGFjZXxOb3RSaWdodFRyaWFuZ2xlfExlc3NFcXVhbEdyZWF0ZXJ8UmlnaHRVcFRlZVZlY3RvcnxMZWZ0QW5nbGVCcmFja2V0fEdyZWF0ZXJGdWxsRXF1YWx8RG93bkFycm93VXBBcnJvd3xSaWdodFVwVmVjdG9yQmFyfHR3b2hlYWRsZWZ0YXJyb3d8R3JlYXRlckVxdWFsTGVzc3xkb3duaGFycG9vbnJpZ2h0fFJpZ2h0VHJpYW5nbGVCYXJ8bnRyaWFuZ2xlcmlnaHRlcXxOb3RTdXBlcnNldEVxdWFsfExlZnRVcERvd25WZWN0b3J8RGlhY3JpdGljYWxBY3V0ZXxyaWdodHJpZ2h0YXJyb3dzfHZhcnRyaWFuZ2xlcmlnaHR8VXBBcnJvd0Rvd25BcnJvd3xEaWFjcml0aWNhbEdyYXZlfFVuZGVyUGFyZW50aGVzaXN8RW1wdHlTbWFsbFNxdWFyZXxMZWZ0VXBWZWN0b3JCYXJ8bGVmdHJpZ2h0YXJyb3dzfERvd25SaWdodFZlY3Rvcnxkb3duaGFycG9vbmxlZnR8dHJpYW5nbGVyaWdodGVxfFNob3J0UmlnaHRBcnJvd3xPdmVyUGFyZW50aGVzaXN8RG91YmxlTGVmdEFycm93fERvdWJsZURvd25BcnJvd3xOb3RTcXVhcmVTdWJzZXR8YmlndHJpYW5nbGVkb3dufG50cmlhbmdsZWxlZnRlcXxVcHBlclJpZ2h0QXJyb3d8Y3VydmVhcnJvd3JpZ2h0fHZhcnRyaWFuZ2xlbGVmdHxOb3RMZWZ0VHJpYW5nbGV8bmxlZnRyaWdodGFycm93fExvd2VyUmlnaHRBcnJvd3xOb3RIdW1wRG93bkh1bXB8Tm90R3JlYXRlclRpbGRlfHJpZ2h0dGhyZWV0aW1lc3xMZWZ0VXBUZWVWZWN0b3J8Tm90R3JlYXRlckVxdWFsfHN0cmFpZ2h0ZXBzaWxvbnxMZWZ0VHJpYW5nbGVCYXJ8cmlnaHRzcXVpZ2Fycm93fENvbnRvdXJJbnRlZ3JhbHxyaWdodGxlZnRhcnJvd3N8Q2xvc2VDdXJseVF1b3RlfFJpZ2h0RG93blZlY3RvcnxMZWZ0UmlnaHRWZWN0b3J8bkxlZnRyaWdodGFycm93fGxlZnRoYXJwb29uZG93bnxjaXJjbGVhcnJvd2xlZnR8U3F1YXJlU3VwZXJzZXR8T3BlbkN1cmx5UXVvdGV8aG9va3JpZ2h0YXJyb3d8SG9yaXpvbnRhbExpbmV8RGlhY3JpdGljYWxEb3R8Tm90TGVzc0dyZWF0ZXJ8bnRyaWFuZ2xlcmlnaHR8RG91YmxlUmlnaHRUZWV8SW52aXNpYmxlQ29tbWF8SW52aXNpYmxlVGltZXN8TG93ZXJMZWZ0QXJyb3d8RG93bkxlZnRWZWN0b3J8Tm90U3Vic2V0RXF1YWx8Y3VydmVhcnJvd2xlZnR8dHJpYW5nbGVsZWZ0ZXF8Tm90VmVydGljYWxCYXJ8VGlsZGVGdWxsRXF1YWx8ZG93bmRvd25hcnJvd3N8Tm90R3JlYXRlckxlc3N8UmlnaHRUZWVWZWN0b3J8WmVyb1dpZHRoU3BhY2V8bG9vcGFycm93cmlnaHR8TG9uZ1JpZ2h0QXJyb3d8ZG91YmxlYmFyd2VkZ2V8U2hvcnRMZWZ0QXJyb3d8U2hvcnREb3duQXJyb3d8UmlnaHRWZWN0b3JCYXJ8R3JlYXRlckdyZWF0ZXJ8UmV2ZXJzZUVsZW1lbnR8cmlnaHRoYXJwb29udXB8TGVzc1NsYW50RXF1YWx8bGVmdHRocmVldGltZXN8dXBoYXJwb29ucmlnaHR8cmlnaHRhcnJvd3RhaWx8TGVmdERvd25WZWN0b3J8TG9uZ3JpZ2h0YXJyb3d8TmVzdGVkTGVzc0xlc3N8VXBwZXJMZWZ0QXJyb3d8bnNob3J0cGFyYWxsZWx8bGVmdGxlZnRhcnJvd3N8bGVmdHJpZ2h0YXJyb3d8TGVmdHJpZ2h0YXJyb3d8TGVmdFJpZ2h0QXJyb3d8bG9uZ3JpZ2h0YXJyb3d8dXBoYXJwb29ubGVmdHxSaWdodEFycm93QmFyfEFwcGx5RnVuY3Rpb258TGVmdFRlZVZlY3RvcnxsZWZ0YXJyb3d0YWlsfE5vdEVxdWFsVGlsZGV8dmFyc3Vic2V0bmVxcXx2YXJzdXBzZXRuZXFxfFJpZ2h0VGVlQXJyb3d8U3VjY2VlZHNFcXVhbHxTdWNjZWVkc1RpbGRlfExlZnRWZWN0b3JCYXJ8U3VwZXJzZXRFcXVhbHxob29rbGVmdGFycm93fERpZmZlcmVudGlhbER8VmVydGljYWxUaWxkZXxWZXJ5VGhpblNwYWNlfGJsYWNrdHJpYW5nbGV8YmlndHJpYW5nbGV1cHxMZXNzRnVsbEVxdWFsfGRpdmlkZW9udGltZXN8bGVmdGhhcnBvb251cHxVcEVxdWlsaWJyaXVtfG50cmlhbmdsZWxlZnR8UmlnaHRUcmlhbmdsZXxtZWFzdXJlZGFuZ2xlfHNob3J0cGFyYWxsZWx8bG9uZ2xlZnRhcnJvd3xMb25nbGVmdGFycm93fExvbmdMZWZ0QXJyb3d8RG91YmxlTGVmdFRlZXxQb2luY2FyZXBsYW5lfFByZWNlZGVzRXF1YWx8dHJpYW5nbGVyaWdodHxEb3VibGVVcEFycm93fFJpZ2h0VXBWZWN0b3J8ZmFsbGluZ2RvdHNlcXxsb29wYXJyb3dsZWZ0fFByZWNlZGVzVGlsZGV8Tm90VGlsZGVFcXVhbHxOb3RUaWxkZVRpbGRlfHNtYWxsc2V0bWludXN8UHJvcG9ydGlvbmFsfHRyaWFuZ2xlbGVmdHx0cmlhbmdsZWRvd258VW5kZXJCcmFja2V0fE5vdEh1bXBFcXVhbHxleHBvbmVudGlhbGV8RXhwb25lbnRpYWxFfE5vdExlc3NUaWxkZXxIaWxiZXJ0U3BhY2V8UmlnaHRDZWlsaW5nfGJsYWNrbG96ZW5nZXx2YXJzdXBzZXRuZXF8SHVtcERvd25IdW1wfEdyZWF0ZXJFcXVhbHxWZXJ0aWNhbExpbmV8TGVmdFRlZUFycm93fE5vdExlc3NFcXVhbHxEb3duVGVlQXJyb3d8TGVmdFRyaWFuZ2xlfHZhcnN1YnNldG5lcXxJbnRlcnNlY3Rpb258Tm90Q29uZ3J1ZW50fERvd25BcnJvd0JhcnxMZWZ0VXBWZWN0b3J8TGVmdEFycm93QmFyfHJpc2luZ2RvdHNlcXxHcmVhdGVyVGlsZGV8Um91bmRJbXBsaWVzfFNxdWFyZVN1YnNldHxTaG9ydFVwQXJyb3d8Tm90U3VwZXJzZXR8cXVhdGVybmlvbnN8cHJlY25hcHByb3h8YmFja2Vwc2lsb258cHJlY2N1cmx5ZXF8T3ZlckJyYWNrZXR8YmxhY2tzcXVhcmV8TWVkaXVtU3BhY2V8VmVydGljYWxCYXJ8Y2lyY2xlZGNpcmN8Y2lyY2xlZGRhc2h8Q2lyY2xlTWludXN8Q2lyY2xlVGltZXN8TGVzc0dyZWF0ZXJ8Y3VybHllcXByZWN8Y3VybHllcXN1Y2N8ZGlhbW9uZHN1aXR8VXBEb3duQXJyb3d8VXBkb3duYXJyb3d8UnVsZURlbGF5ZWR8UnJpZ2h0YXJyb3d8dXBkb3duYXJyb3d8UmlnaHRWZWN0b3J8blJpZ2h0YXJyb3d8bnJpZ2h0YXJyb3d8ZXFzbGFudGxlc3N8TGVmdENlaWxpbmd8RXF1aWxpYnJpdW18U21hbGxDaXJjbGV8ZXhwZWN0YXRpb258Tm90U3VjY2VlZHN8dGhpY2thcHByb3h8R3JlYXRlckxlc3N8U3F1YXJlVW5pb258Tm90UHJlY2VkZXN8Tm90TGVzc0xlc3N8c3RyYWlnaHRwaGl8c3VjY25hcHByb3h8c3VjY2N1cmx5ZXF8U3Vic2V0RXF1YWx8c3FzdXBzZXRlcXxQcm9wb3J0aW9ufExhcGxhY2V0cmZ8SW1hZ2luYXJ5SXxzdXBzZXRuZXFxfE5vdEdyZWF0ZXJ8Z3RyZXFxbGVzc3xOb3RFbGVtZW50fFRoaWNrU3BhY2V8VGlsZGVFcXVhbHxUaWxkZVRpbGRlfEZvdXJpZXJ0cmZ8cm1vdXN0YWNoZXxFcXVhbFRpbGRlfGVxc2xhbnRndHJ8VW5kZXJCcmFjZXxMZWZ0VmVjdG9yfFVwQXJyb3dCYXJ8bkxlZnRhcnJvd3xuc3Vic2V0ZXFxfHN1YnNldG5lcXF8bnN1cHNldGVxcXxubGVmdGFycm93fHN1Y2NhcHByb3h8bGVzc2FwcHJveHxVcFRlZUFycm93fHVwdXBhcnJvd3N8Y3VybHl3ZWRnZXxsZXNzZXFxZ3RyfHZhcmVwc2lsb258dmFybm90aGluZ3xSaWdodEZsb29yfGNvbXBsZW1lbnR8Q2lyY2xlUGx1c3xzcXN1YnNldGVxfExsZWZ0YXJyb3d8Y2lyY2xlZGFzdHxSaWdodEFycm93fFJpZ2h0YXJyb3d8cmlnaHRhcnJvd3xsbW91c3RhY2hlfEJlcm5vdWxsaXN8cHJlY2FwcHJveHxtYXBzdG9sZWZ0fG1hcHN0b2Rvd258bG9uZ21hcHN0b3xkb3RzcXVhcmV8ZG93bmFycm93fERvdWJsZURvdHxuc3Vic2V0ZXF8c3Vwc2V0bmVxfGxlZnRhcnJvd3xuc3Vwc2V0ZXF8c3Vic2V0bmVxfFRoaW5TcGFjZXxuZ2Vxc2xhbnR8c3Vic2V0ZXFxfEh1bXBFcXVhbHxOb3RTdWJzZXR8dHJpYW5nbGVxfE5vdEN1cENhcHxsZXNzZXFndHJ8aGVhcnRzdWl0fFRyaXBsZURvdHxMZWZ0YXJyb3d8Q29wcm9kdWN0fENvbmdydWVudHx2YXJwcm9wdG98Y29tcGxleGVzfGd2ZXJ0bmVxcXxMZWZ0QXJyb3d8TGVzc1RpbGRlfHN1cHNldGVxcXxNaW51c1BsdXN8Q2lyY2xlRG90fG5sZXFzbGFudHxOb3RFeGlzdHN8Z3RyZXFsZXNzfG5wYXJhbGxlbHxVbmlvblBsdXN8TGVmdEZsb29yfGNoZWNrbWFya3xDZW50ZXJEb3R8Y2VudGVyZG90fE1lbGxpbnRyZnxndHJhcHByb3h8Ymlnb3RpbWVzfE92ZXJCcmFjZXxzcGFkZXN1aXR8dGhlcmVmb3JlfHBpdGNoZm9ya3xyYXRpb25hbHN8UGx1c01pbnVzfEJhY2tzbGFzaHxUaGVyZWZvcmV8RG93bkJyZXZlfGJhY2tzaW1lcXxiYWNrcHJpbWV8RG93bkFycm93fG5zaG9ydG1pZHxEb3duYXJyb3d8bHZlcnRuZXFxfGVxdnBhcnNsfGltYWdsaW5lfGltYWdwYXJ0fGluZmludGllfGludGVnZXJzfEludGVncmFsfGludGVyY2FsfExlc3NMZXNzfFVhcnJvY2lyfGludGxhcmhrfHNxc3Vwc2V0fGFuZ21zZGFmfHNxc3Vic2V0fGxsY29ybmVyfHZhcnRoZXRhfGN1cGJyY2FwfGxuYXBwcm94fFN1cGVyc2V0fFN1Y2hUaGF0fHN1Y2Nuc2ltfHN1Y2NuZXFxfGFuZ21zZGFnfGJpZ3VwbHVzfGN1cmx5dmVlfHRycGV6aXVtfFN1Y2NlZWRzfE5vdFRpbGRlfGJpZ3dlZGdlfGFuZ21zZGFofGFuZ3J0dmJkfHRyaW1pbnVzfGN3Y29uaW50fGZwYXJ0aW50fGxyY29ybmVyfHNtZXBhcnNsfHN1YnNldGVxfHVyY29ybmVyfGx1cmRzaGFyfGxhZW1wdHl2fEREb3RyYWhkfGFwcHJveGVxfGxkcnVzaGFyfGF3Y29uaW50fG1hcHN0b3VwfGJhY2tjb25nfHNob3J0bWlkfHRyaWFuZ2xlfGdlcXNsYW50fGdlc2RvdG9sfHRpbWVzYmFyfGNpcmNsZWRSfGNpcmNsZWRTfHNldG1pbnVzfG11bHRpbWFwfG5hdHVyYWxzfHNjcG9saW50fG5jb25nZG90fFJpZ2h0VGVlfGJveG1pbnVzfGduYXBwcm94fGJveHRpbWVzfGFuZHNsb3BlfHRoaWNrc2ltfGFuZ21zZGFhfHZhcnNpZ21hfGNpcmZuaW50fHJ0cmlsdHJpfGFuZ21zZGFifHJwcG9saW50fGFuZ21zZGFjfGJhcndlZGdlfGRyYmthcm93fGNsdWJzdWl0fHRoZXRhc3ltfGJzb2xoc3VifGNhcGJyY3VwfGR6aWdyYXJyfGRvdGVxZG90fERvdEVxdWFsfGRvdG1pbnVzfFVuZGVyQmFyfE5vdEVxdWFsfHJlYWxwYXJ0fG90aW1lc2FzfHVsY29ybmVyfGhrc2Vhcm93fGhrc3dhcm93fHBhcmFsbGVsfFBhcnRpYWxEfGVsaW50ZXJzfGVtcHR5c2V0fHBsdXNhY2lyfGJicmt0YnJrfGFuZ21zZGFkfHBvaW50aW50fGJpZ29wbHVzfGFuZ21zZGFlfFByZWNlZGVzfGJpZ3NxY3VwfHZhcmthcHBhfG5vdGluZG90fHN1cHNldGVxfHByZWNuZXFxfHByZWNuc2ltfHByb2ZhbGFyfHByb2ZsaW5lfHByb2ZzdXJmfGxlcXNsYW50fGxlc2RvdG9yfHJhZW1wdHl2fHN1YnBsdXN8bm90bml2Ynxub3RuaXZjfHN1YnJhcnJ8emlncmFycnx2emlnemFnfHN1Ym11bHR8c3ViZWRvdHxFbGVtZW50fGJldHdlZW58Y2lyc2NpcnxsYXJyYmZzfGxhcnJzaW18bG90aW1lc3xsYnJrc2xkfGxicmtzbHV8bG96ZW5nZXxsZHJkaGFyfGRia2Fyb3d8YmlnY2lyY3xlcHNpbG9ufHNpbXJhcnJ8c2ltcGx1c3xsdHF1ZXN0fEVwc2lsb258bHVydWhhcnxndHF1ZXN0fG1hbHRlc2V8bnBvbGludHxlcWNvbG9ufG5wcmVjZXF8Ymlnb2RvdHxkZGFnZ2VyfGd0cmxlc3N8Ym5lcXVpdnxoYXJyY2lyfGRkb3RzZXF8ZXF1aXZERHxiYWNrc2ltfGRlbXB0eXZ8bnNxc3ViZXxuc3FzdXBlfFVwc2lsb258bnN1YnNldHx1cHNpbG9ufG1pbnVzZHV8bnN1Y2NlcXxzd2Fycm93fG5zdXBzZXR8Y29sb25lcXxzZWFycm93fGJveHBsdXN8bmFwcHJveHxuYXR1cmFsfGFzeW1wZXF8YWxlZnN5bXxjb25nZG90fG5lYXJyb3d8Ymlnc3RhcnxkaWFtb25kfHN1cHBsdXN8dHJpdGltZXxMZWZ0VGVlfG52aW5maW58dHJpcGx1c3xOZXdMaW5lfG52bHRyaWV8bnZydHJpZXxud2Fycm93fG5leGlzdHN8RGlhbW9uZHxydWx1aGFyfEltcGxpZXN8c3VwbXVsdHxhbmd6YXJyfHN1cGxhcnJ8c3VwaHN1YnxxdWVzdGVxfGJlY2F1c2V8ZGlnYW1tYXxCZWNhdXNlfG9sY3Jvc3N8YmVtcHR5dnxvbWljcm9ufE9taWNyb258cm90aW1lc3xOb0JyZWFrfGludHByb2R8YW5ncnR2YnxvcmRlcm9mfHV3YW5nbGV8c3VwaHNvbHxsZXNkb3RvfG9yc2xvcGV8RG93blRlZXxyZWFsaW5lfGN1ZGFycmx8cmRsZGhhcnxPdmVyQmFyfHN1cGVkb3R8bGVzc2RvdHxzdXBkc3VifHRvcGZvcmt8c3VjY3NpbXxyYnJrc2x1fHJicmtzbGR8cGVydGVua3xjdWRhcnJyfGlzaW5kb3R8cGxhbmNraHxsZXNzZ3RyfHBsdXNjaXJ8Z2VzZG90b3xwbHVzc2ltfHBsdXN0d298bGVzc3NpbXxjdWxhcnJwfHJhcnJzaW18Q2F5bGV5c3xub3RpbnZhfG5vdGludmJ8bm90aW52Y3xVcEFycm93fFVwYXJyb3d8dXBhcnJvd3xOb3RMZXNzfGR3YW5nbGV8cHJlY3NpbXxQcm9kdWN0fGN1cmFycm18Q2NvbmludHxkb3RwbHVzfHJhcnJiZnN8Y2N1cHNzbXxDZWRpbGxhfGNlbXB0eXZ8bm90bml2YXxxdWF0aW50fGZyYWMzNXxmcmFjMzh8ZnJhYzQ1fGZyYWM1NnxmcmFjNTh8ZnJhYzc4fHRyaWRvdHx4b3BsdXN8Z2FjdXRlfGdhbW1hZHxHYW1tYWR8bGZpc2h0fGxmbG9vcnxiaWdjdXB8c3FzdXBlfGdicmV2ZXxHYnJldmV8bGhhcnVsfHNxc3ViZXxzcWN1cHN8R2NlZGlsfGFwYWNpcnxsbGhhcmR8bG1pZG90fExtaWRvdHxsbW91c3R8YW5kYW5kfHNxY2Fwc3xhcHByb3h8QWJyZXZlfHNwYWRlc3xjaXJjZXF8dHByaW1lfGRpdmlkZXx0b3BjaXJ8QXNzaWdufHRvcGJvdHxnZXNkb3R8ZGl2b254fHh1cGx1c3x0aW1lc2R8Z2VzbGVzfGF0aWxkZXxzb2xiYXJ8U09GVGN5fGxvcGx1c3x0aW1lc2J8bG93YXN0fGxvd2JhcnxkbGNvcm58ZGxjcm9wfHNvZnRjeXxkb2xsYXJ8bHBhcmx0fHRoa3NpbXxscmhhcmR8QXRpbGRlfGxzYXF1b3xzbWFzaHB8YmlndmVlfHRoaW5zcHx3cmVhdGh8Ymthcm93fGxzcXVvcnxsc3Ryb2t8THN0cm9rfGx0aHJlZXxsdGltZXN8bHRsYXJyfERvdERvdHxzaW1kb3R8bHRyUGFyfHdlaWVycHx4c3FjdXB8YW5nbXNkfHNpZ21hdnxzaWdtYWZ8emVldHJmfFpjYXJvbnx6Y2Fyb258bWFwc3RvfHZzdXBuZXx0aGV0YXZ8Y2lybWlkfG1hcmtlcnxtY29tbWF8WmFjdXRlfHZzdWJuRXx0aGVyZTR8Z3RsUGFyfHZzdWJuZXxib3R0b218Z3RyYXJyfFNIQ0hjeXxzaGNoY3l8bWlkYXN0fG1pZGNpcnxtaWRkb3R8bWludXNifG1pbnVzZHxndHJkb3R8Ym93dGllfHNmcm93bnxtbnBsdXN8bW9kZWxzfGNvbG9uZXxzZXN3YXJ8Q29sb25lfG1zdHBvc3xzZWFyaGt8Z3Ryc2ltfG5hY3V0ZXxOYWN1dGV8Ym94Ym94fHRlbHJlY3xoYWlyc3B8VGNlZGlsfG5idW1wZXxzY25zaW18bmNhcm9ufE5jYXJvbnxuY2VkaWx8TmNlZGlsfGhhbWlsdHxTY2VkaWx8bmVhcmhrfGhhcmRjeXxIQVJEY3l8dGNlZGlsfFRjYXJvbnxjb21tYXR8bmVxdWl2fG5lc2Vhcnx0Y2Fyb258dGFyZ2V0fGhlYXJ0c3xuZXhpc3R8dmFycmhvfHNjZWRpbHxTY2Fyb258c2Nhcm9ufGhlbGxpcHxTYWN1dGV8c2FjdXRlfGhlcmNvbnxzd253YXJ8Y29tcGZufHJ0aW1lc3xydGhyZWV8cnNxdW9yfHJzYXF1b3x6YWN1dGV8d2VkZ2VxfGhvbXRodHxiYXJ2ZWV8YmFyd2VkfEJhcndlZHxycGFyZ3R8aG9yYmFyfGNvbmludHxzd2FyaGt8cm9wbHVzfG5sdHJpZXxoc2xhc2h8aHN0cm9rfEhzdHJva3xybW91c3R8Q29uaW50fGJwcmltZXxoeWJ1bGx8aHlwaGVufGlhY3V0ZXxJYWN1dGV8c3Vwc3VwfHN1cHN1YnxzdXBzaW18dmFycGhpfGNvcHJvZHxicnZiYXJ8YWdyYXZlfFN1cHNldHxzdXBzZXR8aWdyYXZlfElncmF2ZXxub3RpbkV8QWdyYXZlfGlpaWludHxpaW5maW58Y29weXNyfHdlZGJhcnxWZXJiYXJ8dmFuZ3J0fGJlY2F1c3xpbmNhcmV8dmVyYmFyfGlub2RvdHxidWxsZXR8ZHJjb3JufGludGNhbHxkcmNyb3B8Y3VsYXJyfHZlbGxpcHxVdGlsZGV8YnVtcGVxfGN1cGNhcHxkc3Ryb2t8RHN0cm9rfEN1cENhcHxjdXBjdXB8Y3VwZG90fGVhY3V0ZXxFYWN1dGV8c3VwZG90fGlxdWVzdHxlYXN0ZXJ8ZWNhcm9ufEVjYXJvbnxlY29sb258aXNpbnN2fHV0aWxkZXxpdGlsZGV8SXRpbGRlfGN1cmFycnxzdWNjZXF8QnVtcGVxfGNhY3V0ZXx1bGNyb3B8bnBhcnNsfENhY3V0ZXxucHJjdWV8ZWdyYXZlfEVncmF2ZXxucmFycmN8bnJhcnJ3fHN1YnN1cHxzdWJzdWJ8bnJ0cmllfGpzZXJjeXxuc2NjdWV8SnNlcmN5fGthcHBhdnxrY2VkaWx8S2NlZGlsfHN1YnNpbXx1bGNvcm58bnNpbWVxfGVnc2RvdHx2ZWViYXJ8a2dyZWVufGNhcGFuZHxlbHNkb3R8U3Vic2V0fHN1YnNldHxjdXJyZW58YWFjdXRlfGxhY3V0ZXxMYWN1dGV8ZW1wdHl2fG50aWxkZXxOdGlsZGV8bGFncmFufGxhbWJkYXxMYW1iZGF8Y2FwY2FwfFVncmF2ZXxsYW5nbGV8c3ViZG90fGVtc3AxM3xudW1lcm98ZW1zcDE0fG52ZGFzaHxudkRhc2h8blZkYXNofG5WRGFzaHx1Z3JhdmV8dWZpc2h0fG52SGFycnxsYXJyZnN8bnZsQXJyfGxhcnJoa3xsYXJybHB8bGFycnBsfG52ckFycnxVZGJsYWN8bndhcmhrfGxhcnJ0bHxud25lYXJ8b2FjdXRlfE9hY3V0ZXxsYXRhaWx8bEF0YWlsfHNzdGFyZnxsYnJhY2V8b2RibGFjfE9kYmxhY3xsYnJhY2t8dWRibGFjfG9kc29sZHxlcGFyc2x8bGNhcm9ufExjYXJvbnxvZ3JhdmV8T2dyYXZlfGxjZWRpbHxMY2VkaWx8QWFjdXRlfHNzbWlsZXxzc2V0bW58c3F1YXJmfGxkcXVvcnxjYXBjdXB8b21pbnVzfGN5bGN0eXxyaGFydWx8ZXFjaXJjfGRhZ2dlcnxyZmxvb3J8cmZpc2h0fERhZ2dlcnxkYWxldGh8ZXF1YWxzfG9yaWdvZnxjYXBkb3R8ZXF1ZXN0fGRjYXJvbnxEY2Fyb258cmRxdW9yfG9zbGFzaHxPc2xhc2h8b3RpbGRlfE90aWxkZXxvdGltZXN8T3RpbWVzfHVyY3JvcHxVYnJldmV8dWJyZXZlfFlhY3V0ZXxVYWN1dGV8dWFjdXRlfFJjZWRpbHxyY2VkaWx8dXJjb3JufHBhcnNpbXxSY2Fyb258VmRhc2hsfHJjYXJvbnxUc3Ryb2t8cGVyY250fHBlcmlvZHxwZXJtaWx8RXhpc3RzfHlhY3V0ZXxyYnJhY2t8cmJyYWNlfHBobW1hdHxjY2Fyb258Q2Nhcm9ufHBsYW5ja3xjY2VkaWx8cGxhbmt2fHRzdHJva3xmZW1hbGV8cGx1c2RvfHBsdXNkdXxmZmlsaWd8cGx1c21ufGZmbGxpZ3xDY2VkaWx8ckF0YWlsfGRmaXNodHxiZXJub3V8cmF0YWlsfFJhcnJ0bHxyYXJydGx8YW5nc3BofHJhcnJwbHxyYXJybHB8cmFycmhrfHh3ZWRnZXx4b3RpbWV8Zm9yYWxsfEZvckFsbHxWdmRhc2h8dnN1cG5FfHByZWNlcXxiaWdjYXB8ZnJhYzEyfGZyYWMxM3xmcmFjMTR8cHJpbWVzfHJhcnJmc3xwcm5zaW18ZnJhYzE1fFNxdWFyZXxmcmFjMTZ8c3F1YXJlfGxlc2RvdHxmcmFjMTh8ZnJhYzIzfHByb3B0b3xwcnVyZWx8cmFycmFwfHJhbmdsZXxwdW5jc3B8ZnJhYzI1fFJhY3V0ZXxxcHJpbWV8cmFjdXRlfGxlc2dlc3xmcmFjMzR8YWJyZXZlfEFFbGlnfGVxc2ltfHV0ZG90fHNldG1ufHVydHJpfEVxdWFsfFVyaW5nfHNlQXJyfHVyaW5nfHNlYXJyfGRhc2h2fERhc2h2fG11bWFwfG5hYmxhfGlvZ29ufElvZ29ufHNkb3RlfHNkb3RifHNjc2ltfG5hcGlkfG5hcG9zfGVxdWl2fG5hdHVyfEFjaXJjfGRibGFjfGVyYXJyfG5idW1wfGlwcm9kfGVyRG90fHVjaXJjfGF3aW50fGVzZG90fGFuZ3J0fG5jb25nfGlzaW5FfHNjbmFwfFNjaXJjfHNjaXJjfG5kYXNofGlzaW5zfFVicmN5fG5lYXJyfG5lQXJyfGlzaW52fG5lZG90fHVicmN5fGFjdXRlfFljaXJjfGl1a2N5fEl1a2N5fHh1dHJpfG5lc2ltfGNhcmV0fGpjaXJjfEpjaXJjfGNhcm9ufHR3aXh0fGRkYXJyfHNjY3VlfGV4aXN0fGptYXRofHNicXVvfG5nZXFxfGFuZ3N0fGNjYXBzfGxjZWlsfG5nc2ltfFVwVGVlfGRlbHRhfERlbHRhfHJ0cmlmfG5oYXJyfG5oQXJyfG5ocGFyfHJ0cmllfGp1a2N5fEp1a2N5fGthcHBhfHJzcXVvfEthcHBhfG5sYXJyfG5sQXJyfFRTSGN5fHJyYXJyfGFvZ29ufEFvZ29ufGZmbGlnfHhyYXJyfHRzaGN5fGNjaXJjfG5sZXFxfGZpbGlnfHVwc2lofG5sZXNzfGRoYXJsfG5sc2ltfGZqbGlnfHJvcGFyfG5sdHJpfGRoYXJyfHJvYnJrfHJvYXJyfGZsbGlnfGZsdG5zfHJvYW5nfHJubWlkfHN1Ym5FfHN1Ym5lfGxBYXJyfHRyaXNifENjaXJjfGFjaXJjfGNjdXBzfGJsYW5rfFZEYXNofGZvcmt2fFZkYXNofGxhbmdkfGNlZGlsfGJsazEyfGJsazE0fGxhcXVvfHN0cm5zfGRpYW1zfG5vdGlufHZEYXNofGxhcnJifGJsazM0fGJsb2NrfGRpc2lufHVwbHVzfHZkYXNofHZCYXJ2fGFlbGlnfHN0YXJmfFdlZGdlfGNoZWNrfHhyQXJyfGxhdGVzfGxiYXJyfGxCYXJyfG5vdG5pfGxiYnJrfGJjb25nfGZyYXNsfGxicmtlfGZyb3dufHZydHJpfHZwcm9wfHZuc3VwfGdhbW1hfEdhbW1hfHdlZGdlfHhvZG90fGJkcXVvfHNyYXJyfGRvdGVxfGxkcXVvfGJveGRsfGJveGRMfGdjaXJjfEdjaXJjfGJveERsfGJveERMfGJveGRyfGJveGRSfGJveERyfFRSQURFfHRyYWRlfHJsaGFyfGJveERSfHZuc3VifG5wYXJ0fHZsdHJpfHJsYXJyfGJveGhkfGJveGhEfG5wcmVjfGdlc2NjfG5yYXJyfG5yQXJyfGJveEhkfGJveEhEfGJveGh1fGJveGhVfG5ydHJpfGJveEh1fGNsdWJzfGJveEhVfHRpbWVzfGNvbG9ufENvbG9ufGdpbWVsfHhsQXJyfFRpbGRlfG5zaW1lfHRpbGRlfG5zbWlkfG5zcGFyfFRIT1JOfHRob3JufHhsYXJyfG5zdWJlfG5zdWJFfHRoa2FwfHhoQXJyfGNvbW1hfG5zdWNjfGJveHVsfGJveHVMfG5zdXBlfG5zdXBFfGduZXFxfGduc2ltfGJveFVsfGJveFVMfGdyYXZlfGJveHVyfGJveHVSfGJveFVyfGJveFVSfGxlc2NjfGFuZ2xlfGJlcHNpfGJveHZofHZhcnBpfGJveHZIfG51bXNwfFRoZXRhfGdzaW1lfGdzaW1sfHRoZXRhfGJveFZofGJveFZIfGJveHZsfGd0Y2lyfGd0ZG90fGJveHZMfGJveFZsfGJveFZMfGNyYXJyfGNyb3NzfENyb3NzfG52c2ltfGJveHZyfG53YXJyfG53QXJyfHNxc3VwfGR0ZG90fFVvZ29ufGxoYXJkfGxoYXJ1fGR0cmlmfG9jaXJjfE9jaXJjfGxoYmxrfGR1YXJyfG9kYXNofHNxc3VifEhhY2VrfHNxY3VwfGxsYXJyfGR1aGFyfG9lbGlnfE9FbGlnfG9mY2lyfGJveHZSfHVvZ29ufGxsdHJpfGJveFZyfGNzdWJlfHV1YXJyfG9oYmFyfGNzdXBlfGN0ZG90fG9sYXJyfG9sY2lyfGhhcnJ3fG9saW5lfHNxY2FwfG9tYWNyfE9tYWNyfG9tZWdhfE9tZWdhfGJveFZSfGFsZXBofGxuZXFxfGxuc2ltfGxvYW5nfGxvYXJyfHJoYXJ1fGxvYnJrfGhjaXJjfG9wZXJwfG9wbHVzfHJoYXJkfEhjaXJjfG9yYXJyfFVuaW9ufG9yZGVyfGVjaXJjfEVjaXJjfGN1ZXByfHN6bGlnfGN1ZXNjfGJyZXZlfHJlYWxzfGVERG90fEJyZXZlfGhvYXJyfGxvcGFyfHV0cmlmfHJkcXVvfFVtYWNyfHVtYWNyfGVmRG90fHN3QXJyfHVsdHJpfGFscGhhfHJjZWlsfG92YmFyfHN3YXJyfFdjaXJjfHdjaXJjfHNtdGVzfHNtaWxlfGJzZW1pfGxyYXJyfGFyaW5nfHBhcnNsfGxyaGFyfGJzaW1lfHVoYmxrfGxydHJpfGN1cG9yfEFyaW5nfHVoYXJyfHVoYXJsfHNsYXJyfHJicmtlfGJzb2xifGxzaW1lfHJiYnJrfFJCYXJyfGxzaW1nfHBob25lfHJCYXJyfHJiYXJyfGljaXJjfGxzcXVvfEljaXJjfGVtYWNyfEVtYWNyfHJhdGlvfHNpbW5lfHBsdXNifHNpbWxFfHNpbWdFfHNpbWVxfHBsdXNlfGx0Y2lyfGx0ZG90fGVtcHR5fHhoYXJyfHhkdHJpfGlleGNsfEFscGhhfGx0cmllfHJhcnJ3fHBvdW5kfGx0cmlmfHhjaXJjfGJ1bXBlfHByY3VlfGJ1bXBFfGFzeW1wfGFtYWNyfGN1dmVlfFNpZ21hfHNpZ21hfGlpaW50fHVkaGFyfGlpb3RhfGlqbGlnfElKbGlnfHN1cG5FfGltYWNyfEltYWNyfHByaW1lfFByaW1lfGltYWdlfHBybmFwfGVvZ29ufEVvZ29ufHJhcnJjfG1kYXNofG1ERG90fGN1d2VkfGltYXRofHN1cG5lfGltcGVkfEFtYWNyfHVkYXJyfHByc2ltfG1pY3JvfHJhcnJifGN3aW50fHJhcXVvfGluZmlufGVwbHVzfHJhbmdlfHJhbmdkfFVjaXJjfHJhZGljfG1pbnVzfGFtYWxnfHZlZWVxfHJBYXJyfGVwc2l2fHljaXJjfHF1ZXN0fHNoYXJwfHF1b3R8enduanxRc2NyfHJhY2V8cXNjcnxRb3BmfHFvcGZ8cWludHxyYW5nfFJhbmd8WnNjcnx6c2NyfFpvcGZ8em9wZnxyYXJyfHJBcnJ8UmFycnxQc2NyfHBzY3J8cHJvcHxwcm9kfHBybkV8cHJlY3xaSGN5fHpoY3l8cHJhcHxaZXRhfHpldGF8UG9wZnxwb3BmfFpkb3R8cGx1c3x6ZG90fFl1bWx8eXVtbHxwaGl2fFlVY3l8eXVjeXxZc2NyfHlzY3J8cGVycHxZb3BmfHlvcGZ8cGFydHxwYXJhfFlJY3l8T3VtbHxyY3VifHlpY3l8WUFjeXxyZGNhfG91bWx8b3NvbHxPc2NyfHJkc2h8eWFjeXxyZWFsfG9zY3J8eHZlZXxhbmRkfHJlY3R8YW5kdnxYc2NyfG9yb3J8b3JkbXxvcmRmfHhzY3J8YW5nZXxhb3BmfEFvcGZ8ckhhcnxYb3BmfG9wYXJ8T29wZnx4b3BmfHhuaXN8cmhvdnxvb3BmfG9taWR8eG1hcHxvaW50fGFwaWR8YXBvc3xvZ29ufGFzY3J8QXNjcnxvZG90fG9kaXZ8eGN1cHx4Y2FwfG9jaXJ8b2FzdHxudmx0fG52bGV8bnZndHxudmdlfG52YXB8V3Njcnx3c2NyfGF1bWx8bnRsZ3xudGdsfG5zdXB8bnN1Ynxuc2ltfE5zY3J8bnNjcnxuc2NlfFdvcGZ8cmluZ3xucHJlfHdvcGZ8bnBhcnxBdW1sfEJhcnZ8YmJya3xOb3BmfG5vcGZ8bm1pZHxuTHR2fGJldGF8cm9wZnxSb3BmfEJldGF8YmV0aHxubGVzfHJwYXJ8bmxlcXxibm90fGJOb3R8bmxkcnxOSmN5fHJzY3J8UnNjcnxWc2NyfHZzY3J8cnNxYnxuamN5fGJvcGZ8bmlzZHxCb3BmfHJ0cml8Vm9wZnxuR3R2fG5ndHJ8dm9wZnxib3hofGJveEh8Ym94dnxuZ2VzfG5nZXF8Ym94Vnxic2NyfHNjYXB8QnNjcnxic2ltfFZlcnR8dmVydHxic29sfGJ1bGx8YnVtcHxjYXBzfGNkb3R8bmN1cHxzY25FfG5jYXB8bmJzcHxuYXBFfENkb3R8Y2VudHxzZG90fFZiYXJ8bmFuZ3x2QmFyfGNoY3l8TXNjcnxtc2NyfHNlY3R8c2VtaXxDSGN5fE1vcGZ8bW9wZnxzZXh0fGNpcmN8Y2lyZXxtbGRyfG1sY3B8Y2lyRXxjb21wfHNoY3l8U0hjeXx2QXJyfHZhcnJ8Y29uZ3xjb3BmfENvcGZ8Y29weXxDT1BZfG1hbHR8bWFsZXxtYWNyfGx2bkV8Y3NjcnxsdHJpfHNpbWV8bHRjY3xzaW1nfENzY3J8c2ltbHxjc3VifFV1bWx8bHNxYnxsc2ltfHV1bWx8Y3N1cHxMc2NyfGxzY3J8dXRyaXxzbWlkfGxwYXJ8Y3Vwc3xzbXRlfGxvemZ8ZGFycnxMb3BmfFVzY3J8c29sYnxsb3BmfHNvcGZ8U29wZnxsbmVxfHVzY3J8c3BhcnxkQXJyfGxuYXB8RGFycnxkYXNofFNxcnR8TEpjeXxsamN5fGxIYXJ8ZEhhcnxVcHNpfHVwc2l8ZGlhbXxsZXNnfGRqY3l8REpjeXxsZXFxfGRvcGZ8RG9wZnxkc2NyfERzY3J8ZHNjeXxsZHNofGxkY2F8c3F1ZnxEU2N5fHNzY3J8U3Njcnxkc29sfGxjdWJ8bGF0ZXxzdGFyfFN0YXJ8VW9wZnxMYXJyfGxBcnJ8bGFycnx1b3BmfGR0cml8ZHpjeXxzdWJlfHN1YkV8TGFuZ3xsYW5nfEtzY3J8a3NjcnxLb3BmfGtvcGZ8S0pjeXxramN5fEtIY3l8a2hjeXxEWmN5fGVjaXJ8ZWRvdHxlRG90fEpzY3J8anNjcnxzdWNjfEpvcGZ8am9wZnxFZG90fHVIYXJ8ZW1zcHxlbnNwfEl1bWx8aXVtbHxlb3BmfGlzaW58SXNjcnxpc2NyfEVvcGZ8ZXBhcnxzdW5nfGVwc2l8ZXNjcnxzdXAxfHN1cDJ8c3VwM3xJb3RhfGlvdGF8c3VwZXxzdXBFfElvcGZ8aW9wZnxJT2N5fGlvY3l8RXNjcnxlc2ltfEVzaW18aW1vZnxVYXJyfFFVT1R8dUFycnx1YXJyfGV1bWx8SUVjeXxpZWN5fElkb3R8RXVtbHxldXJvfGV4Y2x8SHNjcnxoc2NyfEhvcGZ8aG9wZnxUU2N5fHRzY3l8VHNjcnxoYmFyfHRzY3J8ZmxhdHx0YnJrfGZub2Z8aEFycnxoYXJyfGhhbGZ8Zm9wZnxGb3BmfHRkb3R8Z3ZuRXxmb3JrfHRyaWV8Z3RjY3xmc2NyfEZzY3J8Z2RvdHxnc2ltfEdzY3J8Z3NjcnxHb3BmfGdvcGZ8Z25lcXxHZG90fHRvc2F8Z25hcHxUb3BmfHRvcGZ8Z2VxcXx0b2VhfEdKY3l8Z2pjeXx0aW50fGdlc2x8bWlkfFNmcnxnZ2d8dG9wfGdlc3xnbGF8Z2xFfGdsanxnZXF8Z25lfGdFbHxnZWx8Z25FfEdjeXxnY3l8Z2FwfFRmcnx0ZnJ8VGN5fHRjeXxIYXR8VGF1fEZmcnx0YXV8VGFifGhmcnxIZnJ8ZmZyfEZjeXxmY3l8aWN5fEljeXxpZmZ8RVRIfGV0aHxpZnJ8SWZyfEV0YXxldGF8aW50fEludHxTdXB8c3VwfHVjeXxVY3l8U3VtfHN1bXxqY3l8RU5HfHVmcnxVZnJ8ZW5nfEpjeXxqZnJ8ZWxzfGVsbHxlZ3N8RWZyfGVmcnxKZnJ8dW1sfGtjeXxLY3l8RWN5fGVjeXxrZnJ8S2ZyfGxhcHxTdWJ8c3VifGxhdHxsY3l8TGN5fGxlZ3xEb3R8ZG90fGxFZ3xsZXF8bGVzfHNxdXxkaXZ8ZGllfGxmcnxMZnJ8bGdFfERmcnxkZnJ8RGVsfGRlZ3xEY3l8ZGN5fGxuZXxsbkV8c29sfGxvenxzbXR8Q3VwfGxybXxjdXB8bHNofExzaHxzaW18c2h5fG1hcHxNYXB8bWN5fE1jeXxtZnJ8TWZyfG1ob3xnZnJ8R2ZyfHNmcnxjaXJ8Q2hpfGNoaXxuYXB8Q2ZyfHZjeXxWY3l8Y2ZyfFNjeXxzY3l8bmN5fE5jeXx2ZWV8VmVlfENhcHxjYXB8bmZyfHNjRXxzY2V8TmZyfG5nZXxuZ0V8bkdnfHZmcnxWZnJ8bmd0fGJvdHxuR3R8bmlzfG5pdnxSc2h8cnNofG5sZXxubEV8Ym5lfEJmcnxiZnJ8bkxsfG5sdHxuTHR8QmN5fGJjeXxub3R8Tm90fHJsbXx3ZnJ8V2ZyfG5wcnxuc2N8bnVtfG9jeXxhc3R8T2N5fG9mcnx4ZnJ8WGZyfE9mcnxvZ3R8b2htfGFwRXxvbHR8UmhvfGFwZXxyaG98UmZyfHJmcnxvcmR8UkVHfGFuZ3xyZWd8b3J2fEFuZHxhbmR8QU1QfFJjeXxhbXB8QWZyfHljeXxZY3l8eWVufHlmcnxZZnJ8cmN5fHBhcnxwY3l8UGN5fHBmcnxQZnJ8cGhpfFBoaXxhZnJ8QWN5fGFjeXx6Y3l8WmN5fHBpdnxhY0V8YWNkfHpmcnxaZnJ8cHJlfHByRXxwc2l8UHNpfHFmcnxRZnJ8endqfE9yfGdlfEdnfGd0fGdnfGVsfG9TfGx0fEx0fExUfFJlfGxnfGdsfGVnfG5lfEltfGl0fGxlfEREfHdwfHdyfG51fE51fGRkfGxFfFNjfHNjfHBpfFBpfGVlfGFmfGxsfExsfHJ4fGdFfHhpfHBtfFhpfGljfHByfFByfGlufG5pfG1wfG11fGFjfE11fG9yfGFwfEd0fEdUfGlpKTt8JihBYWN1dGV8QWdyYXZlfEF0aWxkZXxDY2VkaWx8RWFjdXRlfEVncmF2ZXxJYWN1dGV8SWdyYXZlfE50aWxkZXxPYWN1dGV8T2dyYXZlfE9zbGFzaHxPdGlsZGV8VWFjdXRlfFVncmF2ZXxZYWN1dGV8YWFjdXRlfGFncmF2ZXxhdGlsZGV8YnJ2YmFyfGNjZWRpbHxjdXJyZW58ZGl2aWRlfGVhY3V0ZXxlZ3JhdmV8ZnJhYzEyfGZyYWMxNHxmcmFjMzR8aWFjdXRlfGlncmF2ZXxpcXVlc3R8bWlkZG90fG50aWxkZXxvYWN1dGV8b2dyYXZlfG9zbGFzaHxvdGlsZGV8cGx1c21ufHVhY3V0ZXx1Z3JhdmV8eWFjdXRlfEFFbGlnfEFjaXJjfEFyaW5nfEVjaXJjfEljaXJjfE9jaXJjfFRIT1JOfFVjaXJjfGFjaXJjfGFjdXRlfGFlbGlnfGFyaW5nfGNlZGlsfGVjaXJjfGljaXJjfGlleGNsfGxhcXVvfG1pY3JvfG9jaXJjfHBvdW5kfHJhcXVvfHN6bGlnfHRob3JufHRpbWVzfHVjaXJjfEF1bWx8Q09QWXxFdW1sfEl1bWx8T3VtbHxRVU9UfFV1bWx8YXVtbHxjZW50fGNvcHl8ZXVtbHxpdW1sfG1hY3J8bmJzcHxvcmRmfG9yZG18b3VtbHxwYXJhfHF1b3R8c2VjdHxzdXAxfHN1cDJ8c3VwM3x1dW1sfHl1bWx8QU1QfEVUSHxSRUd8YW1wfGRlZ3xldGh8bm90fHJlZ3xzaHl8dW1sfHllbnxHVHxMVHxndHxsdCkoPyE7KShbPWEtekEtWjAtOV0/KXwmIyhbMC05XSspKDs/KXwmI1t4WF0oW2EtZkEtRjAtOV0rKSg7Pyl8JihbMC05YS16QS1aXSspL2c7XG5cdHZhciBkZWNvZGVNYXAgPSB7J2FhY3V0ZSc6J1xceEUxJywnQWFjdXRlJzonXFx4QzEnLCdhYnJldmUnOidcXHUwMTAzJywnQWJyZXZlJzonXFx1MDEwMicsJ2FjJzonXFx1MjIzRScsJ2FjZCc6J1xcdTIyM0YnLCdhY0UnOidcXHUyMjNFXFx1MDMzMycsJ2FjaXJjJzonXFx4RTInLCdBY2lyYyc6J1xceEMyJywnYWN1dGUnOidcXHhCNCcsJ2FjeSc6J1xcdTA0MzAnLCdBY3knOidcXHUwNDEwJywnYWVsaWcnOidcXHhFNicsJ0FFbGlnJzonXFx4QzYnLCdhZic6J1xcdTIwNjEnLCdhZnInOidcXHVEODM1XFx1REQxRScsJ0Fmcic6J1xcdUQ4MzVcXHVERDA0JywnYWdyYXZlJzonXFx4RTAnLCdBZ3JhdmUnOidcXHhDMCcsJ2FsZWZzeW0nOidcXHUyMTM1JywnYWxlcGgnOidcXHUyMTM1JywnYWxwaGEnOidcXHUwM0IxJywnQWxwaGEnOidcXHUwMzkxJywnYW1hY3InOidcXHUwMTAxJywnQW1hY3InOidcXHUwMTAwJywnYW1hbGcnOidcXHUyQTNGJywnYW1wJzonJicsJ0FNUCc6JyYnLCdhbmQnOidcXHUyMjI3JywnQW5kJzonXFx1MkE1MycsJ2FuZGFuZCc6J1xcdTJBNTUnLCdhbmRkJzonXFx1MkE1QycsJ2FuZHNsb3BlJzonXFx1MkE1OCcsJ2FuZHYnOidcXHUyQTVBJywnYW5nJzonXFx1MjIyMCcsJ2FuZ2UnOidcXHUyOUE0JywnYW5nbGUnOidcXHUyMjIwJywnYW5nbXNkJzonXFx1MjIyMScsJ2FuZ21zZGFhJzonXFx1MjlBOCcsJ2FuZ21zZGFiJzonXFx1MjlBOScsJ2FuZ21zZGFjJzonXFx1MjlBQScsJ2FuZ21zZGFkJzonXFx1MjlBQicsJ2FuZ21zZGFlJzonXFx1MjlBQycsJ2FuZ21zZGFmJzonXFx1MjlBRCcsJ2FuZ21zZGFnJzonXFx1MjlBRScsJ2FuZ21zZGFoJzonXFx1MjlBRicsJ2FuZ3J0JzonXFx1MjIxRicsJ2FuZ3J0dmInOidcXHUyMkJFJywnYW5ncnR2YmQnOidcXHUyOTlEJywnYW5nc3BoJzonXFx1MjIyMicsJ2FuZ3N0JzonXFx4QzUnLCdhbmd6YXJyJzonXFx1MjM3QycsJ2FvZ29uJzonXFx1MDEwNScsJ0FvZ29uJzonXFx1MDEwNCcsJ2FvcGYnOidcXHVEODM1XFx1REQ1MicsJ0FvcGYnOidcXHVEODM1XFx1REQzOCcsJ2FwJzonXFx1MjI0OCcsJ2FwYWNpcic6J1xcdTJBNkYnLCdhcGUnOidcXHUyMjRBJywnYXBFJzonXFx1MkE3MCcsJ2FwaWQnOidcXHUyMjRCJywnYXBvcyc6J1xcJycsJ0FwcGx5RnVuY3Rpb24nOidcXHUyMDYxJywnYXBwcm94JzonXFx1MjI0OCcsJ2FwcHJveGVxJzonXFx1MjI0QScsJ2FyaW5nJzonXFx4RTUnLCdBcmluZyc6J1xceEM1JywnYXNjcic6J1xcdUQ4MzVcXHVEQ0I2JywnQXNjcic6J1xcdUQ4MzVcXHVEQzlDJywnQXNzaWduJzonXFx1MjI1NCcsJ2FzdCc6JyonLCdhc3ltcCc6J1xcdTIyNDgnLCdhc3ltcGVxJzonXFx1MjI0RCcsJ2F0aWxkZSc6J1xceEUzJywnQXRpbGRlJzonXFx4QzMnLCdhdW1sJzonXFx4RTQnLCdBdW1sJzonXFx4QzQnLCdhd2NvbmludCc6J1xcdTIyMzMnLCdhd2ludCc6J1xcdTJBMTEnLCdiYWNrY29uZyc6J1xcdTIyNEMnLCdiYWNrZXBzaWxvbic6J1xcdTAzRjYnLCdiYWNrcHJpbWUnOidcXHUyMDM1JywnYmFja3NpbSc6J1xcdTIyM0QnLCdiYWNrc2ltZXEnOidcXHUyMkNEJywnQmFja3NsYXNoJzonXFx1MjIxNicsJ0JhcnYnOidcXHUyQUU3JywnYmFydmVlJzonXFx1MjJCRCcsJ2JhcndlZCc6J1xcdTIzMDUnLCdCYXJ3ZWQnOidcXHUyMzA2JywnYmFyd2VkZ2UnOidcXHUyMzA1JywnYmJyayc6J1xcdTIzQjUnLCdiYnJrdGJyayc6J1xcdTIzQjYnLCdiY29uZyc6J1xcdTIyNEMnLCdiY3knOidcXHUwNDMxJywnQmN5JzonXFx1MDQxMScsJ2JkcXVvJzonXFx1MjAxRScsJ2JlY2F1cyc6J1xcdTIyMzUnLCdiZWNhdXNlJzonXFx1MjIzNScsJ0JlY2F1c2UnOidcXHUyMjM1JywnYmVtcHR5dic6J1xcdTI5QjAnLCdiZXBzaSc6J1xcdTAzRjYnLCdiZXJub3UnOidcXHUyMTJDJywnQmVybm91bGxpcyc6J1xcdTIxMkMnLCdiZXRhJzonXFx1MDNCMicsJ0JldGEnOidcXHUwMzkyJywnYmV0aCc6J1xcdTIxMzYnLCdiZXR3ZWVuJzonXFx1MjI2QycsJ2Jmcic6J1xcdUQ4MzVcXHVERDFGJywnQmZyJzonXFx1RDgzNVxcdUREMDUnLCdiaWdjYXAnOidcXHUyMkMyJywnYmlnY2lyYyc6J1xcdTI1RUYnLCdiaWdjdXAnOidcXHUyMkMzJywnYmlnb2RvdCc6J1xcdTJBMDAnLCdiaWdvcGx1cyc6J1xcdTJBMDEnLCdiaWdvdGltZXMnOidcXHUyQTAyJywnYmlnc3FjdXAnOidcXHUyQTA2JywnYmlnc3Rhcic6J1xcdTI2MDUnLCdiaWd0cmlhbmdsZWRvd24nOidcXHUyNUJEJywnYmlndHJpYW5nbGV1cCc6J1xcdTI1QjMnLCdiaWd1cGx1cyc6J1xcdTJBMDQnLCdiaWd2ZWUnOidcXHUyMkMxJywnYmlnd2VkZ2UnOidcXHUyMkMwJywnYmthcm93JzonXFx1MjkwRCcsJ2JsYWNrbG96ZW5nZSc6J1xcdTI5RUInLCdibGFja3NxdWFyZSc6J1xcdTI1QUEnLCdibGFja3RyaWFuZ2xlJzonXFx1MjVCNCcsJ2JsYWNrdHJpYW5nbGVkb3duJzonXFx1MjVCRScsJ2JsYWNrdHJpYW5nbGVsZWZ0JzonXFx1MjVDMicsJ2JsYWNrdHJpYW5nbGVyaWdodCc6J1xcdTI1QjgnLCdibGFuayc6J1xcdTI0MjMnLCdibGsxMic6J1xcdTI1OTInLCdibGsxNCc6J1xcdTI1OTEnLCdibGszNCc6J1xcdTI1OTMnLCdibG9jayc6J1xcdTI1ODgnLCdibmUnOic9XFx1MjBFNScsJ2JuZXF1aXYnOidcXHUyMjYxXFx1MjBFNScsJ2Jub3QnOidcXHUyMzEwJywnYk5vdCc6J1xcdTJBRUQnLCdib3BmJzonXFx1RDgzNVxcdURENTMnLCdCb3BmJzonXFx1RDgzNVxcdUREMzknLCdib3QnOidcXHUyMkE1JywnYm90dG9tJzonXFx1MjJBNScsJ2Jvd3RpZSc6J1xcdTIyQzgnLCdib3hib3gnOidcXHUyOUM5JywnYm94ZGwnOidcXHUyNTEwJywnYm94ZEwnOidcXHUyNTU1JywnYm94RGwnOidcXHUyNTU2JywnYm94REwnOidcXHUyNTU3JywnYm94ZHInOidcXHUyNTBDJywnYm94ZFInOidcXHUyNTUyJywnYm94RHInOidcXHUyNTUzJywnYm94RFInOidcXHUyNTU0JywnYm94aCc6J1xcdTI1MDAnLCdib3hIJzonXFx1MjU1MCcsJ2JveGhkJzonXFx1MjUyQycsJ2JveGhEJzonXFx1MjU2NScsJ2JveEhkJzonXFx1MjU2NCcsJ2JveEhEJzonXFx1MjU2NicsJ2JveGh1JzonXFx1MjUzNCcsJ2JveGhVJzonXFx1MjU2OCcsJ2JveEh1JzonXFx1MjU2NycsJ2JveEhVJzonXFx1MjU2OScsJ2JveG1pbnVzJzonXFx1MjI5RicsJ2JveHBsdXMnOidcXHUyMjlFJywnYm94dGltZXMnOidcXHUyMkEwJywnYm94dWwnOidcXHUyNTE4JywnYm94dUwnOidcXHUyNTVCJywnYm94VWwnOidcXHUyNTVDJywnYm94VUwnOidcXHUyNTVEJywnYm94dXInOidcXHUyNTE0JywnYm94dVInOidcXHUyNTU4JywnYm94VXInOidcXHUyNTU5JywnYm94VVInOidcXHUyNTVBJywnYm94dic6J1xcdTI1MDInLCdib3hWJzonXFx1MjU1MScsJ2JveHZoJzonXFx1MjUzQycsJ2JveHZIJzonXFx1MjU2QScsJ2JveFZoJzonXFx1MjU2QicsJ2JveFZIJzonXFx1MjU2QycsJ2JveHZsJzonXFx1MjUyNCcsJ2JveHZMJzonXFx1MjU2MScsJ2JveFZsJzonXFx1MjU2MicsJ2JveFZMJzonXFx1MjU2MycsJ2JveHZyJzonXFx1MjUxQycsJ2JveHZSJzonXFx1MjU1RScsJ2JveFZyJzonXFx1MjU1RicsJ2JveFZSJzonXFx1MjU2MCcsJ2JwcmltZSc6J1xcdTIwMzUnLCdicmV2ZSc6J1xcdTAyRDgnLCdCcmV2ZSc6J1xcdTAyRDgnLCdicnZiYXInOidcXHhBNicsJ2JzY3InOidcXHVEODM1XFx1RENCNycsJ0JzY3InOidcXHUyMTJDJywnYnNlbWknOidcXHUyMDRGJywnYnNpbSc6J1xcdTIyM0QnLCdic2ltZSc6J1xcdTIyQ0QnLCdic29sJzonXFxcXCcsJ2Jzb2xiJzonXFx1MjlDNScsJ2Jzb2xoc3ViJzonXFx1MjdDOCcsJ2J1bGwnOidcXHUyMDIyJywnYnVsbGV0JzonXFx1MjAyMicsJ2J1bXAnOidcXHUyMjRFJywnYnVtcGUnOidcXHUyMjRGJywnYnVtcEUnOidcXHUyQUFFJywnYnVtcGVxJzonXFx1MjI0RicsJ0J1bXBlcSc6J1xcdTIyNEUnLCdjYWN1dGUnOidcXHUwMTA3JywnQ2FjdXRlJzonXFx1MDEwNicsJ2NhcCc6J1xcdTIyMjknLCdDYXAnOidcXHUyMkQyJywnY2FwYW5kJzonXFx1MkE0NCcsJ2NhcGJyY3VwJzonXFx1MkE0OScsJ2NhcGNhcCc6J1xcdTJBNEInLCdjYXBjdXAnOidcXHUyQTQ3JywnY2FwZG90JzonXFx1MkE0MCcsJ0NhcGl0YWxEaWZmZXJlbnRpYWxEJzonXFx1MjE0NScsJ2NhcHMnOidcXHUyMjI5XFx1RkUwMCcsJ2NhcmV0JzonXFx1MjA0MScsJ2Nhcm9uJzonXFx1MDJDNycsJ0NheWxleXMnOidcXHUyMTJEJywnY2NhcHMnOidcXHUyQTREJywnY2Nhcm9uJzonXFx1MDEwRCcsJ0NjYXJvbic6J1xcdTAxMEMnLCdjY2VkaWwnOidcXHhFNycsJ0NjZWRpbCc6J1xceEM3JywnY2NpcmMnOidcXHUwMTA5JywnQ2NpcmMnOidcXHUwMTA4JywnQ2NvbmludCc6J1xcdTIyMzAnLCdjY3Vwcyc6J1xcdTJBNEMnLCdjY3Vwc3NtJzonXFx1MkE1MCcsJ2Nkb3QnOidcXHUwMTBCJywnQ2RvdCc6J1xcdTAxMEEnLCdjZWRpbCc6J1xceEI4JywnQ2VkaWxsYSc6J1xceEI4JywnY2VtcHR5dic6J1xcdTI5QjInLCdjZW50JzonXFx4QTInLCdjZW50ZXJkb3QnOidcXHhCNycsJ0NlbnRlckRvdCc6J1xceEI3JywnY2ZyJzonXFx1RDgzNVxcdUREMjAnLCdDZnInOidcXHUyMTJEJywnY2hjeSc6J1xcdTA0NDcnLCdDSGN5JzonXFx1MDQyNycsJ2NoZWNrJzonXFx1MjcxMycsJ2NoZWNrbWFyayc6J1xcdTI3MTMnLCdjaGknOidcXHUwM0M3JywnQ2hpJzonXFx1MDNBNycsJ2Npcic6J1xcdTI1Q0InLCdjaXJjJzonXFx1MDJDNicsJ2NpcmNlcSc6J1xcdTIyNTcnLCdjaXJjbGVhcnJvd2xlZnQnOidcXHUyMUJBJywnY2lyY2xlYXJyb3dyaWdodCc6J1xcdTIxQkInLCdjaXJjbGVkYXN0JzonXFx1MjI5QicsJ2NpcmNsZWRjaXJjJzonXFx1MjI5QScsJ2NpcmNsZWRkYXNoJzonXFx1MjI5RCcsJ0NpcmNsZURvdCc6J1xcdTIyOTknLCdjaXJjbGVkUic6J1xceEFFJywnY2lyY2xlZFMnOidcXHUyNEM4JywnQ2lyY2xlTWludXMnOidcXHUyMjk2JywnQ2lyY2xlUGx1cyc6J1xcdTIyOTUnLCdDaXJjbGVUaW1lcyc6J1xcdTIyOTcnLCdjaXJlJzonXFx1MjI1NycsJ2NpckUnOidcXHUyOUMzJywnY2lyZm5pbnQnOidcXHUyQTEwJywnY2lybWlkJzonXFx1MkFFRicsJ2NpcnNjaXInOidcXHUyOUMyJywnQ2xvY2t3aXNlQ29udG91ckludGVncmFsJzonXFx1MjIzMicsJ0Nsb3NlQ3VybHlEb3VibGVRdW90ZSc6J1xcdTIwMUQnLCdDbG9zZUN1cmx5UXVvdGUnOidcXHUyMDE5JywnY2x1YnMnOidcXHUyNjYzJywnY2x1YnN1aXQnOidcXHUyNjYzJywnY29sb24nOic6JywnQ29sb24nOidcXHUyMjM3JywnY29sb25lJzonXFx1MjI1NCcsJ0NvbG9uZSc6J1xcdTJBNzQnLCdjb2xvbmVxJzonXFx1MjI1NCcsJ2NvbW1hJzonLCcsJ2NvbW1hdCc6J0AnLCdjb21wJzonXFx1MjIwMScsJ2NvbXBmbic6J1xcdTIyMTgnLCdjb21wbGVtZW50JzonXFx1MjIwMScsJ2NvbXBsZXhlcyc6J1xcdTIxMDInLCdjb25nJzonXFx1MjI0NScsJ2Nvbmdkb3QnOidcXHUyQTZEJywnQ29uZ3J1ZW50JzonXFx1MjI2MScsJ2NvbmludCc6J1xcdTIyMkUnLCdDb25pbnQnOidcXHUyMjJGJywnQ29udG91ckludGVncmFsJzonXFx1MjIyRScsJ2NvcGYnOidcXHVEODM1XFx1REQ1NCcsJ0NvcGYnOidcXHUyMTAyJywnY29wcm9kJzonXFx1MjIxMCcsJ0NvcHJvZHVjdCc6J1xcdTIyMTAnLCdjb3B5JzonXFx4QTknLCdDT1BZJzonXFx4QTknLCdjb3B5c3InOidcXHUyMTE3JywnQ291bnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbCc6J1xcdTIyMzMnLCdjcmFycic6J1xcdTIxQjUnLCdjcm9zcyc6J1xcdTI3MTcnLCdDcm9zcyc6J1xcdTJBMkYnLCdjc2NyJzonXFx1RDgzNVxcdURDQjgnLCdDc2NyJzonXFx1RDgzNVxcdURDOUUnLCdjc3ViJzonXFx1MkFDRicsJ2NzdWJlJzonXFx1MkFEMScsJ2NzdXAnOidcXHUyQUQwJywnY3N1cGUnOidcXHUyQUQyJywnY3Rkb3QnOidcXHUyMkVGJywnY3VkYXJybCc6J1xcdTI5MzgnLCdjdWRhcnJyJzonXFx1MjkzNScsJ2N1ZXByJzonXFx1MjJERScsJ2N1ZXNjJzonXFx1MjJERicsJ2N1bGFycic6J1xcdTIxQjYnLCdjdWxhcnJwJzonXFx1MjkzRCcsJ2N1cCc6J1xcdTIyMkEnLCdDdXAnOidcXHUyMkQzJywnY3VwYnJjYXAnOidcXHUyQTQ4JywnY3VwY2FwJzonXFx1MkE0NicsJ0N1cENhcCc6J1xcdTIyNEQnLCdjdXBjdXAnOidcXHUyQTRBJywnY3VwZG90JzonXFx1MjI4RCcsJ2N1cG9yJzonXFx1MkE0NScsJ2N1cHMnOidcXHUyMjJBXFx1RkUwMCcsJ2N1cmFycic6J1xcdTIxQjcnLCdjdXJhcnJtJzonXFx1MjkzQycsJ2N1cmx5ZXFwcmVjJzonXFx1MjJERScsJ2N1cmx5ZXFzdWNjJzonXFx1MjJERicsJ2N1cmx5dmVlJzonXFx1MjJDRScsJ2N1cmx5d2VkZ2UnOidcXHUyMkNGJywnY3VycmVuJzonXFx4QTQnLCdjdXJ2ZWFycm93bGVmdCc6J1xcdTIxQjYnLCdjdXJ2ZWFycm93cmlnaHQnOidcXHUyMUI3JywnY3V2ZWUnOidcXHUyMkNFJywnY3V3ZWQnOidcXHUyMkNGJywnY3djb25pbnQnOidcXHUyMjMyJywnY3dpbnQnOidcXHUyMjMxJywnY3lsY3R5JzonXFx1MjMyRCcsJ2RhZ2dlcic6J1xcdTIwMjAnLCdEYWdnZXInOidcXHUyMDIxJywnZGFsZXRoJzonXFx1MjEzOCcsJ2RhcnInOidcXHUyMTkzJywnZEFycic6J1xcdTIxRDMnLCdEYXJyJzonXFx1MjFBMScsJ2Rhc2gnOidcXHUyMDEwJywnZGFzaHYnOidcXHUyMkEzJywnRGFzaHYnOidcXHUyQUU0JywnZGJrYXJvdyc6J1xcdTI5MEYnLCdkYmxhYyc6J1xcdTAyREQnLCdkY2Fyb24nOidcXHUwMTBGJywnRGNhcm9uJzonXFx1MDEwRScsJ2RjeSc6J1xcdTA0MzQnLCdEY3knOidcXHUwNDE0JywnZGQnOidcXHUyMTQ2JywnREQnOidcXHUyMTQ1JywnZGRhZ2dlcic6J1xcdTIwMjEnLCdkZGFycic6J1xcdTIxQ0EnLCdERG90cmFoZCc6J1xcdTI5MTEnLCdkZG90c2VxJzonXFx1MkE3NycsJ2RlZyc6J1xceEIwJywnRGVsJzonXFx1MjIwNycsJ2RlbHRhJzonXFx1MDNCNCcsJ0RlbHRhJzonXFx1MDM5NCcsJ2RlbXB0eXYnOidcXHUyOUIxJywnZGZpc2h0JzonXFx1Mjk3RicsJ2Rmcic6J1xcdUQ4MzVcXHVERDIxJywnRGZyJzonXFx1RDgzNVxcdUREMDcnLCdkSGFyJzonXFx1Mjk2NScsJ2RoYXJsJzonXFx1MjFDMycsJ2RoYXJyJzonXFx1MjFDMicsJ0RpYWNyaXRpY2FsQWN1dGUnOidcXHhCNCcsJ0RpYWNyaXRpY2FsRG90JzonXFx1MDJEOScsJ0RpYWNyaXRpY2FsRG91YmxlQWN1dGUnOidcXHUwMkREJywnRGlhY3JpdGljYWxHcmF2ZSc6J2AnLCdEaWFjcml0aWNhbFRpbGRlJzonXFx1MDJEQycsJ2RpYW0nOidcXHUyMkM0JywnZGlhbW9uZCc6J1xcdTIyQzQnLCdEaWFtb25kJzonXFx1MjJDNCcsJ2RpYW1vbmRzdWl0JzonXFx1MjY2NicsJ2RpYW1zJzonXFx1MjY2NicsJ2RpZSc6J1xceEE4JywnRGlmZmVyZW50aWFsRCc6J1xcdTIxNDYnLCdkaWdhbW1hJzonXFx1MDNERCcsJ2Rpc2luJzonXFx1MjJGMicsJ2Rpdic6J1xceEY3JywnZGl2aWRlJzonXFx4RjcnLCdkaXZpZGVvbnRpbWVzJzonXFx1MjJDNycsJ2Rpdm9ueCc6J1xcdTIyQzcnLCdkamN5JzonXFx1MDQ1MicsJ0RKY3knOidcXHUwNDAyJywnZGxjb3JuJzonXFx1MjMxRScsJ2RsY3JvcCc6J1xcdTIzMEQnLCdkb2xsYXInOickJywnZG9wZic6J1xcdUQ4MzVcXHVERDU1JywnRG9wZic6J1xcdUQ4MzVcXHVERDNCJywnZG90JzonXFx1MDJEOScsJ0RvdCc6J1xceEE4JywnRG90RG90JzonXFx1MjBEQycsJ2RvdGVxJzonXFx1MjI1MCcsJ2RvdGVxZG90JzonXFx1MjI1MScsJ0RvdEVxdWFsJzonXFx1MjI1MCcsJ2RvdG1pbnVzJzonXFx1MjIzOCcsJ2RvdHBsdXMnOidcXHUyMjE0JywnZG90c3F1YXJlJzonXFx1MjJBMScsJ2RvdWJsZWJhcndlZGdlJzonXFx1MjMwNicsJ0RvdWJsZUNvbnRvdXJJbnRlZ3JhbCc6J1xcdTIyMkYnLCdEb3VibGVEb3QnOidcXHhBOCcsJ0RvdWJsZURvd25BcnJvdyc6J1xcdTIxRDMnLCdEb3VibGVMZWZ0QXJyb3cnOidcXHUyMUQwJywnRG91YmxlTGVmdFJpZ2h0QXJyb3cnOidcXHUyMUQ0JywnRG91YmxlTGVmdFRlZSc6J1xcdTJBRTQnLCdEb3VibGVMb25nTGVmdEFycm93JzonXFx1MjdGOCcsJ0RvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdyc6J1xcdTI3RkEnLCdEb3VibGVMb25nUmlnaHRBcnJvdyc6J1xcdTI3RjknLCdEb3VibGVSaWdodEFycm93JzonXFx1MjFEMicsJ0RvdWJsZVJpZ2h0VGVlJzonXFx1MjJBOCcsJ0RvdWJsZVVwQXJyb3cnOidcXHUyMUQxJywnRG91YmxlVXBEb3duQXJyb3cnOidcXHUyMUQ1JywnRG91YmxlVmVydGljYWxCYXInOidcXHUyMjI1JywnZG93bmFycm93JzonXFx1MjE5MycsJ0Rvd25hcnJvdyc6J1xcdTIxRDMnLCdEb3duQXJyb3cnOidcXHUyMTkzJywnRG93bkFycm93QmFyJzonXFx1MjkxMycsJ0Rvd25BcnJvd1VwQXJyb3cnOidcXHUyMUY1JywnRG93bkJyZXZlJzonXFx1MDMxMScsJ2Rvd25kb3duYXJyb3dzJzonXFx1MjFDQScsJ2Rvd25oYXJwb29ubGVmdCc6J1xcdTIxQzMnLCdkb3duaGFycG9vbnJpZ2h0JzonXFx1MjFDMicsJ0Rvd25MZWZ0UmlnaHRWZWN0b3InOidcXHUyOTUwJywnRG93bkxlZnRUZWVWZWN0b3InOidcXHUyOTVFJywnRG93bkxlZnRWZWN0b3InOidcXHUyMUJEJywnRG93bkxlZnRWZWN0b3JCYXInOidcXHUyOTU2JywnRG93blJpZ2h0VGVlVmVjdG9yJzonXFx1Mjk1RicsJ0Rvd25SaWdodFZlY3Rvcic6J1xcdTIxQzEnLCdEb3duUmlnaHRWZWN0b3JCYXInOidcXHUyOTU3JywnRG93blRlZSc6J1xcdTIyQTQnLCdEb3duVGVlQXJyb3cnOidcXHUyMUE3JywnZHJia2Fyb3cnOidcXHUyOTEwJywnZHJjb3JuJzonXFx1MjMxRicsJ2RyY3JvcCc6J1xcdTIzMEMnLCdkc2NyJzonXFx1RDgzNVxcdURDQjknLCdEc2NyJzonXFx1RDgzNVxcdURDOUYnLCdkc2N5JzonXFx1MDQ1NScsJ0RTY3knOidcXHUwNDA1JywnZHNvbCc6J1xcdTI5RjYnLCdkc3Ryb2snOidcXHUwMTExJywnRHN0cm9rJzonXFx1MDExMCcsJ2R0ZG90JzonXFx1MjJGMScsJ2R0cmknOidcXHUyNUJGJywnZHRyaWYnOidcXHUyNUJFJywnZHVhcnInOidcXHUyMUY1JywnZHVoYXInOidcXHUyOTZGJywnZHdhbmdsZSc6J1xcdTI5QTYnLCdkemN5JzonXFx1MDQ1RicsJ0RaY3knOidcXHUwNDBGJywnZHppZ3JhcnInOidcXHUyN0ZGJywnZWFjdXRlJzonXFx4RTknLCdFYWN1dGUnOidcXHhDOScsJ2Vhc3Rlcic6J1xcdTJBNkUnLCdlY2Fyb24nOidcXHUwMTFCJywnRWNhcm9uJzonXFx1MDExQScsJ2VjaXInOidcXHUyMjU2JywnZWNpcmMnOidcXHhFQScsJ0VjaXJjJzonXFx4Q0EnLCdlY29sb24nOidcXHUyMjU1JywnZWN5JzonXFx1MDQ0RCcsJ0VjeSc6J1xcdTA0MkQnLCdlRERvdCc6J1xcdTJBNzcnLCdlZG90JzonXFx1MDExNycsJ2VEb3QnOidcXHUyMjUxJywnRWRvdCc6J1xcdTAxMTYnLCdlZSc6J1xcdTIxNDcnLCdlZkRvdCc6J1xcdTIyNTInLCdlZnInOidcXHVEODM1XFx1REQyMicsJ0Vmcic6J1xcdUQ4MzVcXHVERDA4JywnZWcnOidcXHUyQTlBJywnZWdyYXZlJzonXFx4RTgnLCdFZ3JhdmUnOidcXHhDOCcsJ2Vncyc6J1xcdTJBOTYnLCdlZ3Nkb3QnOidcXHUyQTk4JywnZWwnOidcXHUyQTk5JywnRWxlbWVudCc6J1xcdTIyMDgnLCdlbGludGVycyc6J1xcdTIzRTcnLCdlbGwnOidcXHUyMTEzJywnZWxzJzonXFx1MkE5NScsJ2Vsc2RvdCc6J1xcdTJBOTcnLCdlbWFjcic6J1xcdTAxMTMnLCdFbWFjcic6J1xcdTAxMTInLCdlbXB0eSc6J1xcdTIyMDUnLCdlbXB0eXNldCc6J1xcdTIyMDUnLCdFbXB0eVNtYWxsU3F1YXJlJzonXFx1MjVGQicsJ2VtcHR5dic6J1xcdTIyMDUnLCdFbXB0eVZlcnlTbWFsbFNxdWFyZSc6J1xcdTI1QUInLCdlbXNwJzonXFx1MjAwMycsJ2Vtc3AxMyc6J1xcdTIwMDQnLCdlbXNwMTQnOidcXHUyMDA1JywnZW5nJzonXFx1MDE0QicsJ0VORyc6J1xcdTAxNEEnLCdlbnNwJzonXFx1MjAwMicsJ2VvZ29uJzonXFx1MDExOScsJ0VvZ29uJzonXFx1MDExOCcsJ2VvcGYnOidcXHVEODM1XFx1REQ1NicsJ0VvcGYnOidcXHVEODM1XFx1REQzQycsJ2VwYXInOidcXHUyMkQ1JywnZXBhcnNsJzonXFx1MjlFMycsJ2VwbHVzJzonXFx1MkE3MScsJ2Vwc2knOidcXHUwM0I1JywnZXBzaWxvbic6J1xcdTAzQjUnLCdFcHNpbG9uJzonXFx1MDM5NScsJ2Vwc2l2JzonXFx1MDNGNScsJ2VxY2lyYyc6J1xcdTIyNTYnLCdlcWNvbG9uJzonXFx1MjI1NScsJ2Vxc2ltJzonXFx1MjI0MicsJ2Vxc2xhbnRndHInOidcXHUyQTk2JywnZXFzbGFudGxlc3MnOidcXHUyQTk1JywnRXF1YWwnOidcXHUyQTc1JywnZXF1YWxzJzonPScsJ0VxdWFsVGlsZGUnOidcXHUyMjQyJywnZXF1ZXN0JzonXFx1MjI1RicsJ0VxdWlsaWJyaXVtJzonXFx1MjFDQycsJ2VxdWl2JzonXFx1MjI2MScsJ2VxdWl2REQnOidcXHUyQTc4JywnZXF2cGFyc2wnOidcXHUyOUU1JywnZXJhcnInOidcXHUyOTcxJywnZXJEb3QnOidcXHUyMjUzJywnZXNjcic6J1xcdTIxMkYnLCdFc2NyJzonXFx1MjEzMCcsJ2VzZG90JzonXFx1MjI1MCcsJ2VzaW0nOidcXHUyMjQyJywnRXNpbSc6J1xcdTJBNzMnLCdldGEnOidcXHUwM0I3JywnRXRhJzonXFx1MDM5NycsJ2V0aCc6J1xceEYwJywnRVRIJzonXFx4RDAnLCdldW1sJzonXFx4RUInLCdFdW1sJzonXFx4Q0InLCdldXJvJzonXFx1MjBBQycsJ2V4Y2wnOichJywnZXhpc3QnOidcXHUyMjAzJywnRXhpc3RzJzonXFx1MjIwMycsJ2V4cGVjdGF0aW9uJzonXFx1MjEzMCcsJ2V4cG9uZW50aWFsZSc6J1xcdTIxNDcnLCdFeHBvbmVudGlhbEUnOidcXHUyMTQ3JywnZmFsbGluZ2RvdHNlcSc6J1xcdTIyNTInLCdmY3knOidcXHUwNDQ0JywnRmN5JzonXFx1MDQyNCcsJ2ZlbWFsZSc6J1xcdTI2NDAnLCdmZmlsaWcnOidcXHVGQjAzJywnZmZsaWcnOidcXHVGQjAwJywnZmZsbGlnJzonXFx1RkIwNCcsJ2Zmcic6J1xcdUQ4MzVcXHVERDIzJywnRmZyJzonXFx1RDgzNVxcdUREMDknLCdmaWxpZyc6J1xcdUZCMDEnLCdGaWxsZWRTbWFsbFNxdWFyZSc6J1xcdTI1RkMnLCdGaWxsZWRWZXJ5U21hbGxTcXVhcmUnOidcXHUyNUFBJywnZmpsaWcnOidmaicsJ2ZsYXQnOidcXHUyNjZEJywnZmxsaWcnOidcXHVGQjAyJywnZmx0bnMnOidcXHUyNUIxJywnZm5vZic6J1xcdTAxOTInLCdmb3BmJzonXFx1RDgzNVxcdURENTcnLCdGb3BmJzonXFx1RDgzNVxcdUREM0QnLCdmb3JhbGwnOidcXHUyMjAwJywnRm9yQWxsJzonXFx1MjIwMCcsJ2ZvcmsnOidcXHUyMkQ0JywnZm9ya3YnOidcXHUyQUQ5JywnRm91cmllcnRyZic6J1xcdTIxMzEnLCdmcGFydGludCc6J1xcdTJBMEQnLCdmcmFjMTInOidcXHhCRCcsJ2ZyYWMxMyc6J1xcdTIxNTMnLCdmcmFjMTQnOidcXHhCQycsJ2ZyYWMxNSc6J1xcdTIxNTUnLCdmcmFjMTYnOidcXHUyMTU5JywnZnJhYzE4JzonXFx1MjE1QicsJ2ZyYWMyMyc6J1xcdTIxNTQnLCdmcmFjMjUnOidcXHUyMTU2JywnZnJhYzM0JzonXFx4QkUnLCdmcmFjMzUnOidcXHUyMTU3JywnZnJhYzM4JzonXFx1MjE1QycsJ2ZyYWM0NSc6J1xcdTIxNTgnLCdmcmFjNTYnOidcXHUyMTVBJywnZnJhYzU4JzonXFx1MjE1RCcsJ2ZyYWM3OCc6J1xcdTIxNUUnLCdmcmFzbCc6J1xcdTIwNDQnLCdmcm93bic6J1xcdTIzMjInLCdmc2NyJzonXFx1RDgzNVxcdURDQkInLCdGc2NyJzonXFx1MjEzMScsJ2dhY3V0ZSc6J1xcdTAxRjUnLCdnYW1tYSc6J1xcdTAzQjMnLCdHYW1tYSc6J1xcdTAzOTMnLCdnYW1tYWQnOidcXHUwM0REJywnR2FtbWFkJzonXFx1MDNEQycsJ2dhcCc6J1xcdTJBODYnLCdnYnJldmUnOidcXHUwMTFGJywnR2JyZXZlJzonXFx1MDExRScsJ0djZWRpbCc6J1xcdTAxMjInLCdnY2lyYyc6J1xcdTAxMUQnLCdHY2lyYyc6J1xcdTAxMUMnLCdnY3knOidcXHUwNDMzJywnR2N5JzonXFx1MDQxMycsJ2dkb3QnOidcXHUwMTIxJywnR2RvdCc6J1xcdTAxMjAnLCdnZSc6J1xcdTIyNjUnLCdnRSc6J1xcdTIyNjcnLCdnZWwnOidcXHUyMkRCJywnZ0VsJzonXFx1MkE4QycsJ2dlcSc6J1xcdTIyNjUnLCdnZXFxJzonXFx1MjI2NycsJ2dlcXNsYW50JzonXFx1MkE3RScsJ2dlcyc6J1xcdTJBN0UnLCdnZXNjYyc6J1xcdTJBQTknLCdnZXNkb3QnOidcXHUyQTgwJywnZ2VzZG90byc6J1xcdTJBODInLCdnZXNkb3RvbCc6J1xcdTJBODQnLCdnZXNsJzonXFx1MjJEQlxcdUZFMDAnLCdnZXNsZXMnOidcXHUyQTk0JywnZ2ZyJzonXFx1RDgzNVxcdUREMjQnLCdHZnInOidcXHVEODM1XFx1REQwQScsJ2dnJzonXFx1MjI2QicsJ0dnJzonXFx1MjJEOScsJ2dnZyc6J1xcdTIyRDknLCdnaW1lbCc6J1xcdTIxMzcnLCdnamN5JzonXFx1MDQ1MycsJ0dKY3knOidcXHUwNDAzJywnZ2wnOidcXHUyMjc3JywnZ2xhJzonXFx1MkFBNScsJ2dsRSc6J1xcdTJBOTInLCdnbGonOidcXHUyQUE0JywnZ25hcCc6J1xcdTJBOEEnLCdnbmFwcHJveCc6J1xcdTJBOEEnLCdnbmUnOidcXHUyQTg4JywnZ25FJzonXFx1MjI2OScsJ2duZXEnOidcXHUyQTg4JywnZ25lcXEnOidcXHUyMjY5JywnZ25zaW0nOidcXHUyMkU3JywnZ29wZic6J1xcdUQ4MzVcXHVERDU4JywnR29wZic6J1xcdUQ4MzVcXHVERDNFJywnZ3JhdmUnOidgJywnR3JlYXRlckVxdWFsJzonXFx1MjI2NScsJ0dyZWF0ZXJFcXVhbExlc3MnOidcXHUyMkRCJywnR3JlYXRlckZ1bGxFcXVhbCc6J1xcdTIyNjcnLCdHcmVhdGVyR3JlYXRlcic6J1xcdTJBQTInLCdHcmVhdGVyTGVzcyc6J1xcdTIyNzcnLCdHcmVhdGVyU2xhbnRFcXVhbCc6J1xcdTJBN0UnLCdHcmVhdGVyVGlsZGUnOidcXHUyMjczJywnZ3Njcic6J1xcdTIxMEEnLCdHc2NyJzonXFx1RDgzNVxcdURDQTInLCdnc2ltJzonXFx1MjI3MycsJ2dzaW1lJzonXFx1MkE4RScsJ2dzaW1sJzonXFx1MkE5MCcsJ2d0JzonPicsJ0d0JzonXFx1MjI2QicsJ0dUJzonPicsJ2d0Y2MnOidcXHUyQUE3JywnZ3RjaXInOidcXHUyQTdBJywnZ3Rkb3QnOidcXHUyMkQ3JywnZ3RsUGFyJzonXFx1Mjk5NScsJ2d0cXVlc3QnOidcXHUyQTdDJywnZ3RyYXBwcm94JzonXFx1MkE4NicsJ2d0cmFycic6J1xcdTI5NzgnLCdndHJkb3QnOidcXHUyMkQ3JywnZ3RyZXFsZXNzJzonXFx1MjJEQicsJ2d0cmVxcWxlc3MnOidcXHUyQThDJywnZ3RybGVzcyc6J1xcdTIyNzcnLCdndHJzaW0nOidcXHUyMjczJywnZ3ZlcnRuZXFxJzonXFx1MjI2OVxcdUZFMDAnLCdndm5FJzonXFx1MjI2OVxcdUZFMDAnLCdIYWNlayc6J1xcdTAyQzcnLCdoYWlyc3AnOidcXHUyMDBBJywnaGFsZic6J1xceEJEJywnaGFtaWx0JzonXFx1MjEwQicsJ2hhcmRjeSc6J1xcdTA0NEEnLCdIQVJEY3knOidcXHUwNDJBJywnaGFycic6J1xcdTIxOTQnLCdoQXJyJzonXFx1MjFENCcsJ2hhcnJjaXInOidcXHUyOTQ4JywnaGFycncnOidcXHUyMUFEJywnSGF0JzonXicsJ2hiYXInOidcXHUyMTBGJywnaGNpcmMnOidcXHUwMTI1JywnSGNpcmMnOidcXHUwMTI0JywnaGVhcnRzJzonXFx1MjY2NScsJ2hlYXJ0c3VpdCc6J1xcdTI2NjUnLCdoZWxsaXAnOidcXHUyMDI2JywnaGVyY29uJzonXFx1MjJCOScsJ2hmcic6J1xcdUQ4MzVcXHVERDI1JywnSGZyJzonXFx1MjEwQycsJ0hpbGJlcnRTcGFjZSc6J1xcdTIxMEInLCdoa3NlYXJvdyc6J1xcdTI5MjUnLCdoa3N3YXJvdyc6J1xcdTI5MjYnLCdob2Fycic6J1xcdTIxRkYnLCdob210aHQnOidcXHUyMjNCJywnaG9va2xlZnRhcnJvdyc6J1xcdTIxQTknLCdob29rcmlnaHRhcnJvdyc6J1xcdTIxQUEnLCdob3BmJzonXFx1RDgzNVxcdURENTknLCdIb3BmJzonXFx1MjEwRCcsJ2hvcmJhcic6J1xcdTIwMTUnLCdIb3Jpem9udGFsTGluZSc6J1xcdTI1MDAnLCdoc2NyJzonXFx1RDgzNVxcdURDQkQnLCdIc2NyJzonXFx1MjEwQicsJ2hzbGFzaCc6J1xcdTIxMEYnLCdoc3Ryb2snOidcXHUwMTI3JywnSHN0cm9rJzonXFx1MDEyNicsJ0h1bXBEb3duSHVtcCc6J1xcdTIyNEUnLCdIdW1wRXF1YWwnOidcXHUyMjRGJywnaHlidWxsJzonXFx1MjA0MycsJ2h5cGhlbic6J1xcdTIwMTAnLCdpYWN1dGUnOidcXHhFRCcsJ0lhY3V0ZSc6J1xceENEJywnaWMnOidcXHUyMDYzJywnaWNpcmMnOidcXHhFRScsJ0ljaXJjJzonXFx4Q0UnLCdpY3knOidcXHUwNDM4JywnSWN5JzonXFx1MDQxOCcsJ0lkb3QnOidcXHUwMTMwJywnaWVjeSc6J1xcdTA0MzUnLCdJRWN5JzonXFx1MDQxNScsJ2lleGNsJzonXFx4QTEnLCdpZmYnOidcXHUyMUQ0JywnaWZyJzonXFx1RDgzNVxcdUREMjYnLCdJZnInOidcXHUyMTExJywnaWdyYXZlJzonXFx4RUMnLCdJZ3JhdmUnOidcXHhDQycsJ2lpJzonXFx1MjE0OCcsJ2lpaWludCc6J1xcdTJBMEMnLCdpaWludCc6J1xcdTIyMkQnLCdpaW5maW4nOidcXHUyOURDJywnaWlvdGEnOidcXHUyMTI5JywnaWpsaWcnOidcXHUwMTMzJywnSUpsaWcnOidcXHUwMTMyJywnSW0nOidcXHUyMTExJywnaW1hY3InOidcXHUwMTJCJywnSW1hY3InOidcXHUwMTJBJywnaW1hZ2UnOidcXHUyMTExJywnSW1hZ2luYXJ5SSc6J1xcdTIxNDgnLCdpbWFnbGluZSc6J1xcdTIxMTAnLCdpbWFncGFydCc6J1xcdTIxMTEnLCdpbWF0aCc6J1xcdTAxMzEnLCdpbW9mJzonXFx1MjJCNycsJ2ltcGVkJzonXFx1MDFCNScsJ0ltcGxpZXMnOidcXHUyMUQyJywnaW4nOidcXHUyMjA4JywnaW5jYXJlJzonXFx1MjEwNScsJ2luZmluJzonXFx1MjIxRScsJ2luZmludGllJzonXFx1MjlERCcsJ2lub2RvdCc6J1xcdTAxMzEnLCdpbnQnOidcXHUyMjJCJywnSW50JzonXFx1MjIyQycsJ2ludGNhbCc6J1xcdTIyQkEnLCdpbnRlZ2Vycyc6J1xcdTIxMjQnLCdJbnRlZ3JhbCc6J1xcdTIyMkInLCdpbnRlcmNhbCc6J1xcdTIyQkEnLCdJbnRlcnNlY3Rpb24nOidcXHUyMkMyJywnaW50bGFyaGsnOidcXHUyQTE3JywnaW50cHJvZCc6J1xcdTJBM0MnLCdJbnZpc2libGVDb21tYSc6J1xcdTIwNjMnLCdJbnZpc2libGVUaW1lcyc6J1xcdTIwNjInLCdpb2N5JzonXFx1MDQ1MScsJ0lPY3knOidcXHUwNDAxJywnaW9nb24nOidcXHUwMTJGJywnSW9nb24nOidcXHUwMTJFJywnaW9wZic6J1xcdUQ4MzVcXHVERDVBJywnSW9wZic6J1xcdUQ4MzVcXHVERDQwJywnaW90YSc6J1xcdTAzQjknLCdJb3RhJzonXFx1MDM5OScsJ2lwcm9kJzonXFx1MkEzQycsJ2lxdWVzdCc6J1xceEJGJywnaXNjcic6J1xcdUQ4MzVcXHVEQ0JFJywnSXNjcic6J1xcdTIxMTAnLCdpc2luJzonXFx1MjIwOCcsJ2lzaW5kb3QnOidcXHUyMkY1JywnaXNpbkUnOidcXHUyMkY5JywnaXNpbnMnOidcXHUyMkY0JywnaXNpbnN2JzonXFx1MjJGMycsJ2lzaW52JzonXFx1MjIwOCcsJ2l0JzonXFx1MjA2MicsJ2l0aWxkZSc6J1xcdTAxMjknLCdJdGlsZGUnOidcXHUwMTI4JywnaXVrY3knOidcXHUwNDU2JywnSXVrY3knOidcXHUwNDA2JywnaXVtbCc6J1xceEVGJywnSXVtbCc6J1xceENGJywnamNpcmMnOidcXHUwMTM1JywnSmNpcmMnOidcXHUwMTM0JywnamN5JzonXFx1MDQzOScsJ0pjeSc6J1xcdTA0MTknLCdqZnInOidcXHVEODM1XFx1REQyNycsJ0pmcic6J1xcdUQ4MzVcXHVERDBEJywnam1hdGgnOidcXHUwMjM3Jywnam9wZic6J1xcdUQ4MzVcXHVERDVCJywnSm9wZic6J1xcdUQ4MzVcXHVERDQxJywnanNjcic6J1xcdUQ4MzVcXHVEQ0JGJywnSnNjcic6J1xcdUQ4MzVcXHVEQ0E1JywnanNlcmN5JzonXFx1MDQ1OCcsJ0pzZXJjeSc6J1xcdTA0MDgnLCdqdWtjeSc6J1xcdTA0NTQnLCdKdWtjeSc6J1xcdTA0MDQnLCdrYXBwYSc6J1xcdTAzQkEnLCdLYXBwYSc6J1xcdTAzOUEnLCdrYXBwYXYnOidcXHUwM0YwJywna2NlZGlsJzonXFx1MDEzNycsJ0tjZWRpbCc6J1xcdTAxMzYnLCdrY3knOidcXHUwNDNBJywnS2N5JzonXFx1MDQxQScsJ2tmcic6J1xcdUQ4MzVcXHVERDI4JywnS2ZyJzonXFx1RDgzNVxcdUREMEUnLCdrZ3JlZW4nOidcXHUwMTM4Jywna2hjeSc6J1xcdTA0NDUnLCdLSGN5JzonXFx1MDQyNScsJ2tqY3knOidcXHUwNDVDJywnS0pjeSc6J1xcdTA0MEMnLCdrb3BmJzonXFx1RDgzNVxcdURENUMnLCdLb3BmJzonXFx1RDgzNVxcdURENDInLCdrc2NyJzonXFx1RDgzNVxcdURDQzAnLCdLc2NyJzonXFx1RDgzNVxcdURDQTYnLCdsQWFycic6J1xcdTIxREEnLCdsYWN1dGUnOidcXHUwMTNBJywnTGFjdXRlJzonXFx1MDEzOScsJ2xhZW1wdHl2JzonXFx1MjlCNCcsJ2xhZ3Jhbic6J1xcdTIxMTInLCdsYW1iZGEnOidcXHUwM0JCJywnTGFtYmRhJzonXFx1MDM5QicsJ2xhbmcnOidcXHUyN0U4JywnTGFuZyc6J1xcdTI3RUEnLCdsYW5nZCc6J1xcdTI5OTEnLCdsYW5nbGUnOidcXHUyN0U4JywnbGFwJzonXFx1MkE4NScsJ0xhcGxhY2V0cmYnOidcXHUyMTEyJywnbGFxdW8nOidcXHhBQicsJ2xhcnInOidcXHUyMTkwJywnbEFycic6J1xcdTIxRDAnLCdMYXJyJzonXFx1MjE5RScsJ2xhcnJiJzonXFx1MjFFNCcsJ2xhcnJiZnMnOidcXHUyOTFGJywnbGFycmZzJzonXFx1MjkxRCcsJ2xhcnJoayc6J1xcdTIxQTknLCdsYXJybHAnOidcXHUyMUFCJywnbGFycnBsJzonXFx1MjkzOScsJ2xhcnJzaW0nOidcXHUyOTczJywnbGFycnRsJzonXFx1MjFBMicsJ2xhdCc6J1xcdTJBQUInLCdsYXRhaWwnOidcXHUyOTE5JywnbEF0YWlsJzonXFx1MjkxQicsJ2xhdGUnOidcXHUyQUFEJywnbGF0ZXMnOidcXHUyQUFEXFx1RkUwMCcsJ2xiYXJyJzonXFx1MjkwQycsJ2xCYXJyJzonXFx1MjkwRScsJ2xiYnJrJzonXFx1Mjc3MicsJ2xicmFjZSc6J3snLCdsYnJhY2snOidbJywnbGJya2UnOidcXHUyOThCJywnbGJya3NsZCc6J1xcdTI5OEYnLCdsYnJrc2x1JzonXFx1Mjk4RCcsJ2xjYXJvbic6J1xcdTAxM0UnLCdMY2Fyb24nOidcXHUwMTNEJywnbGNlZGlsJzonXFx1MDEzQycsJ0xjZWRpbCc6J1xcdTAxM0InLCdsY2VpbCc6J1xcdTIzMDgnLCdsY3ViJzoneycsJ2xjeSc6J1xcdTA0M0InLCdMY3knOidcXHUwNDFCJywnbGRjYSc6J1xcdTI5MzYnLCdsZHF1byc6J1xcdTIwMUMnLCdsZHF1b3InOidcXHUyMDFFJywnbGRyZGhhcic6J1xcdTI5NjcnLCdsZHJ1c2hhcic6J1xcdTI5NEInLCdsZHNoJzonXFx1MjFCMicsJ2xlJzonXFx1MjI2NCcsJ2xFJzonXFx1MjI2NicsJ0xlZnRBbmdsZUJyYWNrZXQnOidcXHUyN0U4JywnbGVmdGFycm93JzonXFx1MjE5MCcsJ0xlZnRhcnJvdyc6J1xcdTIxRDAnLCdMZWZ0QXJyb3cnOidcXHUyMTkwJywnTGVmdEFycm93QmFyJzonXFx1MjFFNCcsJ0xlZnRBcnJvd1JpZ2h0QXJyb3cnOidcXHUyMUM2JywnbGVmdGFycm93dGFpbCc6J1xcdTIxQTInLCdMZWZ0Q2VpbGluZyc6J1xcdTIzMDgnLCdMZWZ0RG91YmxlQnJhY2tldCc6J1xcdTI3RTYnLCdMZWZ0RG93blRlZVZlY3Rvcic6J1xcdTI5NjEnLCdMZWZ0RG93blZlY3Rvcic6J1xcdTIxQzMnLCdMZWZ0RG93blZlY3RvckJhcic6J1xcdTI5NTknLCdMZWZ0Rmxvb3InOidcXHUyMzBBJywnbGVmdGhhcnBvb25kb3duJzonXFx1MjFCRCcsJ2xlZnRoYXJwb29udXAnOidcXHUyMUJDJywnbGVmdGxlZnRhcnJvd3MnOidcXHUyMUM3JywnbGVmdHJpZ2h0YXJyb3cnOidcXHUyMTk0JywnTGVmdHJpZ2h0YXJyb3cnOidcXHUyMUQ0JywnTGVmdFJpZ2h0QXJyb3cnOidcXHUyMTk0JywnbGVmdHJpZ2h0YXJyb3dzJzonXFx1MjFDNicsJ2xlZnRyaWdodGhhcnBvb25zJzonXFx1MjFDQicsJ2xlZnRyaWdodHNxdWlnYXJyb3cnOidcXHUyMUFEJywnTGVmdFJpZ2h0VmVjdG9yJzonXFx1Mjk0RScsJ0xlZnRUZWUnOidcXHUyMkEzJywnTGVmdFRlZUFycm93JzonXFx1MjFBNCcsJ0xlZnRUZWVWZWN0b3InOidcXHUyOTVBJywnbGVmdHRocmVldGltZXMnOidcXHUyMkNCJywnTGVmdFRyaWFuZ2xlJzonXFx1MjJCMicsJ0xlZnRUcmlhbmdsZUJhcic6J1xcdTI5Q0YnLCdMZWZ0VHJpYW5nbGVFcXVhbCc6J1xcdTIyQjQnLCdMZWZ0VXBEb3duVmVjdG9yJzonXFx1Mjk1MScsJ0xlZnRVcFRlZVZlY3Rvcic6J1xcdTI5NjAnLCdMZWZ0VXBWZWN0b3InOidcXHUyMUJGJywnTGVmdFVwVmVjdG9yQmFyJzonXFx1Mjk1OCcsJ0xlZnRWZWN0b3InOidcXHUyMUJDJywnTGVmdFZlY3RvckJhcic6J1xcdTI5NTInLCdsZWcnOidcXHUyMkRBJywnbEVnJzonXFx1MkE4QicsJ2xlcSc6J1xcdTIyNjQnLCdsZXFxJzonXFx1MjI2NicsJ2xlcXNsYW50JzonXFx1MkE3RCcsJ2xlcyc6J1xcdTJBN0QnLCdsZXNjYyc6J1xcdTJBQTgnLCdsZXNkb3QnOidcXHUyQTdGJywnbGVzZG90byc6J1xcdTJBODEnLCdsZXNkb3Rvcic6J1xcdTJBODMnLCdsZXNnJzonXFx1MjJEQVxcdUZFMDAnLCdsZXNnZXMnOidcXHUyQTkzJywnbGVzc2FwcHJveCc6J1xcdTJBODUnLCdsZXNzZG90JzonXFx1MjJENicsJ2xlc3NlcWd0cic6J1xcdTIyREEnLCdsZXNzZXFxZ3RyJzonXFx1MkE4QicsJ0xlc3NFcXVhbEdyZWF0ZXInOidcXHUyMkRBJywnTGVzc0Z1bGxFcXVhbCc6J1xcdTIyNjYnLCdMZXNzR3JlYXRlcic6J1xcdTIyNzYnLCdsZXNzZ3RyJzonXFx1MjI3NicsJ0xlc3NMZXNzJzonXFx1MkFBMScsJ2xlc3NzaW0nOidcXHUyMjcyJywnTGVzc1NsYW50RXF1YWwnOidcXHUyQTdEJywnTGVzc1RpbGRlJzonXFx1MjI3MicsJ2xmaXNodCc6J1xcdTI5N0MnLCdsZmxvb3InOidcXHUyMzBBJywnbGZyJzonXFx1RDgzNVxcdUREMjknLCdMZnInOidcXHVEODM1XFx1REQwRicsJ2xnJzonXFx1MjI3NicsJ2xnRSc6J1xcdTJBOTEnLCdsSGFyJzonXFx1Mjk2MicsJ2xoYXJkJzonXFx1MjFCRCcsJ2xoYXJ1JzonXFx1MjFCQycsJ2xoYXJ1bCc6J1xcdTI5NkEnLCdsaGJsayc6J1xcdTI1ODQnLCdsamN5JzonXFx1MDQ1OScsJ0xKY3knOidcXHUwNDA5JywnbGwnOidcXHUyMjZBJywnTGwnOidcXHUyMkQ4JywnbGxhcnInOidcXHUyMUM3JywnbGxjb3JuZXInOidcXHUyMzFFJywnTGxlZnRhcnJvdyc6J1xcdTIxREEnLCdsbGhhcmQnOidcXHUyOTZCJywnbGx0cmknOidcXHUyNUZBJywnbG1pZG90JzonXFx1MDE0MCcsJ0xtaWRvdCc6J1xcdTAxM0YnLCdsbW91c3QnOidcXHUyM0IwJywnbG1vdXN0YWNoZSc6J1xcdTIzQjAnLCdsbmFwJzonXFx1MkE4OScsJ2xuYXBwcm94JzonXFx1MkE4OScsJ2xuZSc6J1xcdTJBODcnLCdsbkUnOidcXHUyMjY4JywnbG5lcSc6J1xcdTJBODcnLCdsbmVxcSc6J1xcdTIyNjgnLCdsbnNpbSc6J1xcdTIyRTYnLCdsb2FuZyc6J1xcdTI3RUMnLCdsb2Fycic6J1xcdTIxRkQnLCdsb2Jyayc6J1xcdTI3RTYnLCdsb25nbGVmdGFycm93JzonXFx1MjdGNScsJ0xvbmdsZWZ0YXJyb3cnOidcXHUyN0Y4JywnTG9uZ0xlZnRBcnJvdyc6J1xcdTI3RjUnLCdsb25nbGVmdHJpZ2h0YXJyb3cnOidcXHUyN0Y3JywnTG9uZ2xlZnRyaWdodGFycm93JzonXFx1MjdGQScsJ0xvbmdMZWZ0UmlnaHRBcnJvdyc6J1xcdTI3RjcnLCdsb25nbWFwc3RvJzonXFx1MjdGQycsJ2xvbmdyaWdodGFycm93JzonXFx1MjdGNicsJ0xvbmdyaWdodGFycm93JzonXFx1MjdGOScsJ0xvbmdSaWdodEFycm93JzonXFx1MjdGNicsJ2xvb3BhcnJvd2xlZnQnOidcXHUyMUFCJywnbG9vcGFycm93cmlnaHQnOidcXHUyMUFDJywnbG9wYXInOidcXHUyOTg1JywnbG9wZic6J1xcdUQ4MzVcXHVERDVEJywnTG9wZic6J1xcdUQ4MzVcXHVERDQzJywnbG9wbHVzJzonXFx1MkEyRCcsJ2xvdGltZXMnOidcXHUyQTM0JywnbG93YXN0JzonXFx1MjIxNycsJ2xvd2Jhcic6J18nLCdMb3dlckxlZnRBcnJvdyc6J1xcdTIxOTknLCdMb3dlclJpZ2h0QXJyb3cnOidcXHUyMTk4JywnbG96JzonXFx1MjVDQScsJ2xvemVuZ2UnOidcXHUyNUNBJywnbG96Zic6J1xcdTI5RUInLCdscGFyJzonKCcsJ2xwYXJsdCc6J1xcdTI5OTMnLCdscmFycic6J1xcdTIxQzYnLCdscmNvcm5lcic6J1xcdTIzMUYnLCdscmhhcic6J1xcdTIxQ0InLCdscmhhcmQnOidcXHUyOTZEJywnbHJtJzonXFx1MjAwRScsJ2xydHJpJzonXFx1MjJCRicsJ2xzYXF1byc6J1xcdTIwMzknLCdsc2NyJzonXFx1RDgzNVxcdURDQzEnLCdMc2NyJzonXFx1MjExMicsJ2xzaCc6J1xcdTIxQjAnLCdMc2gnOidcXHUyMUIwJywnbHNpbSc6J1xcdTIyNzInLCdsc2ltZSc6J1xcdTJBOEQnLCdsc2ltZyc6J1xcdTJBOEYnLCdsc3FiJzonWycsJ2xzcXVvJzonXFx1MjAxOCcsJ2xzcXVvcic6J1xcdTIwMUEnLCdsc3Ryb2snOidcXHUwMTQyJywnTHN0cm9rJzonXFx1MDE0MScsJ2x0JzonPCcsJ0x0JzonXFx1MjI2QScsJ0xUJzonPCcsJ2x0Y2MnOidcXHUyQUE2JywnbHRjaXInOidcXHUyQTc5JywnbHRkb3QnOidcXHUyMkQ2JywnbHRocmVlJzonXFx1MjJDQicsJ2x0aW1lcyc6J1xcdTIyQzknLCdsdGxhcnInOidcXHUyOTc2JywnbHRxdWVzdCc6J1xcdTJBN0InLCdsdHJpJzonXFx1MjVDMycsJ2x0cmllJzonXFx1MjJCNCcsJ2x0cmlmJzonXFx1MjVDMicsJ2x0clBhcic6J1xcdTI5OTYnLCdsdXJkc2hhcic6J1xcdTI5NEEnLCdsdXJ1aGFyJzonXFx1Mjk2NicsJ2x2ZXJ0bmVxcSc6J1xcdTIyNjhcXHVGRTAwJywnbHZuRSc6J1xcdTIyNjhcXHVGRTAwJywnbWFjcic6J1xceEFGJywnbWFsZSc6J1xcdTI2NDInLCdtYWx0JzonXFx1MjcyMCcsJ21hbHRlc2UnOidcXHUyNzIwJywnbWFwJzonXFx1MjFBNicsJ01hcCc6J1xcdTI5MDUnLCdtYXBzdG8nOidcXHUyMUE2JywnbWFwc3RvZG93bic6J1xcdTIxQTcnLCdtYXBzdG9sZWZ0JzonXFx1MjFBNCcsJ21hcHN0b3VwJzonXFx1MjFBNScsJ21hcmtlcic6J1xcdTI1QUUnLCdtY29tbWEnOidcXHUyQTI5JywnbWN5JzonXFx1MDQzQycsJ01jeSc6J1xcdTA0MUMnLCdtZGFzaCc6J1xcdTIwMTQnLCdtRERvdCc6J1xcdTIyM0EnLCdtZWFzdXJlZGFuZ2xlJzonXFx1MjIyMScsJ01lZGl1bVNwYWNlJzonXFx1MjA1RicsJ01lbGxpbnRyZic6J1xcdTIxMzMnLCdtZnInOidcXHVEODM1XFx1REQyQScsJ01mcic6J1xcdUQ4MzVcXHVERDEwJywnbWhvJzonXFx1MjEyNycsJ21pY3JvJzonXFx4QjUnLCdtaWQnOidcXHUyMjIzJywnbWlkYXN0JzonKicsJ21pZGNpcic6J1xcdTJBRjAnLCdtaWRkb3QnOidcXHhCNycsJ21pbnVzJzonXFx1MjIxMicsJ21pbnVzYic6J1xcdTIyOUYnLCdtaW51c2QnOidcXHUyMjM4JywnbWludXNkdSc6J1xcdTJBMkEnLCdNaW51c1BsdXMnOidcXHUyMjEzJywnbWxjcCc6J1xcdTJBREInLCdtbGRyJzonXFx1MjAyNicsJ21ucGx1cyc6J1xcdTIyMTMnLCdtb2RlbHMnOidcXHUyMkE3JywnbW9wZic6J1xcdUQ4MzVcXHVERDVFJywnTW9wZic6J1xcdUQ4MzVcXHVERDQ0JywnbXAnOidcXHUyMjEzJywnbXNjcic6J1xcdUQ4MzVcXHVEQ0MyJywnTXNjcic6J1xcdTIxMzMnLCdtc3Rwb3MnOidcXHUyMjNFJywnbXUnOidcXHUwM0JDJywnTXUnOidcXHUwMzlDJywnbXVsdGltYXAnOidcXHUyMkI4JywnbXVtYXAnOidcXHUyMkI4JywnbmFibGEnOidcXHUyMjA3JywnbmFjdXRlJzonXFx1MDE0NCcsJ05hY3V0ZSc6J1xcdTAxNDMnLCduYW5nJzonXFx1MjIyMFxcdTIwRDInLCduYXAnOidcXHUyMjQ5JywnbmFwRSc6J1xcdTJBNzBcXHUwMzM4JywnbmFwaWQnOidcXHUyMjRCXFx1MDMzOCcsJ25hcG9zJzonXFx1MDE0OScsJ25hcHByb3gnOidcXHUyMjQ5JywnbmF0dXInOidcXHUyNjZFJywnbmF0dXJhbCc6J1xcdTI2NkUnLCduYXR1cmFscyc6J1xcdTIxMTUnLCduYnNwJzonXFx4QTAnLCduYnVtcCc6J1xcdTIyNEVcXHUwMzM4JywnbmJ1bXBlJzonXFx1MjI0RlxcdTAzMzgnLCduY2FwJzonXFx1MkE0MycsJ25jYXJvbic6J1xcdTAxNDgnLCdOY2Fyb24nOidcXHUwMTQ3JywnbmNlZGlsJzonXFx1MDE0NicsJ05jZWRpbCc6J1xcdTAxNDUnLCduY29uZyc6J1xcdTIyNDcnLCduY29uZ2RvdCc6J1xcdTJBNkRcXHUwMzM4JywnbmN1cCc6J1xcdTJBNDInLCduY3knOidcXHUwNDNEJywnTmN5JzonXFx1MDQxRCcsJ25kYXNoJzonXFx1MjAxMycsJ25lJzonXFx1MjI2MCcsJ25lYXJoayc6J1xcdTI5MjQnLCduZWFycic6J1xcdTIxOTcnLCduZUFycic6J1xcdTIxRDcnLCduZWFycm93JzonXFx1MjE5NycsJ25lZG90JzonXFx1MjI1MFxcdTAzMzgnLCdOZWdhdGl2ZU1lZGl1bVNwYWNlJzonXFx1MjAwQicsJ05lZ2F0aXZlVGhpY2tTcGFjZSc6J1xcdTIwMEInLCdOZWdhdGl2ZVRoaW5TcGFjZSc6J1xcdTIwMEInLCdOZWdhdGl2ZVZlcnlUaGluU3BhY2UnOidcXHUyMDBCJywnbmVxdWl2JzonXFx1MjI2MicsJ25lc2Vhcic6J1xcdTI5MjgnLCduZXNpbSc6J1xcdTIyNDJcXHUwMzM4JywnTmVzdGVkR3JlYXRlckdyZWF0ZXInOidcXHUyMjZCJywnTmVzdGVkTGVzc0xlc3MnOidcXHUyMjZBJywnTmV3TGluZSc6J1xcbicsJ25leGlzdCc6J1xcdTIyMDQnLCduZXhpc3RzJzonXFx1MjIwNCcsJ25mcic6J1xcdUQ4MzVcXHVERDJCJywnTmZyJzonXFx1RDgzNVxcdUREMTEnLCduZ2UnOidcXHUyMjcxJywnbmdFJzonXFx1MjI2N1xcdTAzMzgnLCduZ2VxJzonXFx1MjI3MScsJ25nZXFxJzonXFx1MjI2N1xcdTAzMzgnLCduZ2Vxc2xhbnQnOidcXHUyQTdFXFx1MDMzOCcsJ25nZXMnOidcXHUyQTdFXFx1MDMzOCcsJ25HZyc6J1xcdTIyRDlcXHUwMzM4JywnbmdzaW0nOidcXHUyMjc1Jywnbmd0JzonXFx1MjI2RicsJ25HdCc6J1xcdTIyNkJcXHUyMEQyJywnbmd0cic6J1xcdTIyNkYnLCduR3R2JzonXFx1MjI2QlxcdTAzMzgnLCduaGFycic6J1xcdTIxQUUnLCduaEFycic6J1xcdTIxQ0UnLCduaHBhcic6J1xcdTJBRjInLCduaSc6J1xcdTIyMEInLCduaXMnOidcXHUyMkZDJywnbmlzZCc6J1xcdTIyRkEnLCduaXYnOidcXHUyMjBCJywnbmpjeSc6J1xcdTA0NUEnLCdOSmN5JzonXFx1MDQwQScsJ25sYXJyJzonXFx1MjE5QScsJ25sQXJyJzonXFx1MjFDRCcsJ25sZHInOidcXHUyMDI1JywnbmxlJzonXFx1MjI3MCcsJ25sRSc6J1xcdTIyNjZcXHUwMzM4JywnbmxlZnRhcnJvdyc6J1xcdTIxOUEnLCduTGVmdGFycm93JzonXFx1MjFDRCcsJ25sZWZ0cmlnaHRhcnJvdyc6J1xcdTIxQUUnLCduTGVmdHJpZ2h0YXJyb3cnOidcXHUyMUNFJywnbmxlcSc6J1xcdTIyNzAnLCdubGVxcSc6J1xcdTIyNjZcXHUwMzM4JywnbmxlcXNsYW50JzonXFx1MkE3RFxcdTAzMzgnLCdubGVzJzonXFx1MkE3RFxcdTAzMzgnLCdubGVzcyc6J1xcdTIyNkUnLCduTGwnOidcXHUyMkQ4XFx1MDMzOCcsJ25sc2ltJzonXFx1MjI3NCcsJ25sdCc6J1xcdTIyNkUnLCduTHQnOidcXHUyMjZBXFx1MjBEMicsJ25sdHJpJzonXFx1MjJFQScsJ25sdHJpZSc6J1xcdTIyRUMnLCduTHR2JzonXFx1MjI2QVxcdTAzMzgnLCdubWlkJzonXFx1MjIyNCcsJ05vQnJlYWsnOidcXHUyMDYwJywnTm9uQnJlYWtpbmdTcGFjZSc6J1xceEEwJywnbm9wZic6J1xcdUQ4MzVcXHVERDVGJywnTm9wZic6J1xcdTIxMTUnLCdub3QnOidcXHhBQycsJ05vdCc6J1xcdTJBRUMnLCdOb3RDb25ncnVlbnQnOidcXHUyMjYyJywnTm90Q3VwQ2FwJzonXFx1MjI2RCcsJ05vdERvdWJsZVZlcnRpY2FsQmFyJzonXFx1MjIyNicsJ05vdEVsZW1lbnQnOidcXHUyMjA5JywnTm90RXF1YWwnOidcXHUyMjYwJywnTm90RXF1YWxUaWxkZSc6J1xcdTIyNDJcXHUwMzM4JywnTm90RXhpc3RzJzonXFx1MjIwNCcsJ05vdEdyZWF0ZXInOidcXHUyMjZGJywnTm90R3JlYXRlckVxdWFsJzonXFx1MjI3MScsJ05vdEdyZWF0ZXJGdWxsRXF1YWwnOidcXHUyMjY3XFx1MDMzOCcsJ05vdEdyZWF0ZXJHcmVhdGVyJzonXFx1MjI2QlxcdTAzMzgnLCdOb3RHcmVhdGVyTGVzcyc6J1xcdTIyNzknLCdOb3RHcmVhdGVyU2xhbnRFcXVhbCc6J1xcdTJBN0VcXHUwMzM4JywnTm90R3JlYXRlclRpbGRlJzonXFx1MjI3NScsJ05vdEh1bXBEb3duSHVtcCc6J1xcdTIyNEVcXHUwMzM4JywnTm90SHVtcEVxdWFsJzonXFx1MjI0RlxcdTAzMzgnLCdub3Rpbic6J1xcdTIyMDknLCdub3RpbmRvdCc6J1xcdTIyRjVcXHUwMzM4Jywnbm90aW5FJzonXFx1MjJGOVxcdTAzMzgnLCdub3RpbnZhJzonXFx1MjIwOScsJ25vdGludmInOidcXHUyMkY3Jywnbm90aW52Yyc6J1xcdTIyRjYnLCdOb3RMZWZ0VHJpYW5nbGUnOidcXHUyMkVBJywnTm90TGVmdFRyaWFuZ2xlQmFyJzonXFx1MjlDRlxcdTAzMzgnLCdOb3RMZWZ0VHJpYW5nbGVFcXVhbCc6J1xcdTIyRUMnLCdOb3RMZXNzJzonXFx1MjI2RScsJ05vdExlc3NFcXVhbCc6J1xcdTIyNzAnLCdOb3RMZXNzR3JlYXRlcic6J1xcdTIyNzgnLCdOb3RMZXNzTGVzcyc6J1xcdTIyNkFcXHUwMzM4JywnTm90TGVzc1NsYW50RXF1YWwnOidcXHUyQTdEXFx1MDMzOCcsJ05vdExlc3NUaWxkZSc6J1xcdTIyNzQnLCdOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcic6J1xcdTJBQTJcXHUwMzM4JywnTm90TmVzdGVkTGVzc0xlc3MnOidcXHUyQUExXFx1MDMzOCcsJ25vdG5pJzonXFx1MjIwQycsJ25vdG5pdmEnOidcXHUyMjBDJywnbm90bml2Yic6J1xcdTIyRkUnLCdub3RuaXZjJzonXFx1MjJGRCcsJ05vdFByZWNlZGVzJzonXFx1MjI4MCcsJ05vdFByZWNlZGVzRXF1YWwnOidcXHUyQUFGXFx1MDMzOCcsJ05vdFByZWNlZGVzU2xhbnRFcXVhbCc6J1xcdTIyRTAnLCdOb3RSZXZlcnNlRWxlbWVudCc6J1xcdTIyMEMnLCdOb3RSaWdodFRyaWFuZ2xlJzonXFx1MjJFQicsJ05vdFJpZ2h0VHJpYW5nbGVCYXInOidcXHUyOUQwXFx1MDMzOCcsJ05vdFJpZ2h0VHJpYW5nbGVFcXVhbCc6J1xcdTIyRUQnLCdOb3RTcXVhcmVTdWJzZXQnOidcXHUyMjhGXFx1MDMzOCcsJ05vdFNxdWFyZVN1YnNldEVxdWFsJzonXFx1MjJFMicsJ05vdFNxdWFyZVN1cGVyc2V0JzonXFx1MjI5MFxcdTAzMzgnLCdOb3RTcXVhcmVTdXBlcnNldEVxdWFsJzonXFx1MjJFMycsJ05vdFN1YnNldCc6J1xcdTIyODJcXHUyMEQyJywnTm90U3Vic2V0RXF1YWwnOidcXHUyMjg4JywnTm90U3VjY2VlZHMnOidcXHUyMjgxJywnTm90U3VjY2VlZHNFcXVhbCc6J1xcdTJBQjBcXHUwMzM4JywnTm90U3VjY2VlZHNTbGFudEVxdWFsJzonXFx1MjJFMScsJ05vdFN1Y2NlZWRzVGlsZGUnOidcXHUyMjdGXFx1MDMzOCcsJ05vdFN1cGVyc2V0JzonXFx1MjI4M1xcdTIwRDInLCdOb3RTdXBlcnNldEVxdWFsJzonXFx1MjI4OScsJ05vdFRpbGRlJzonXFx1MjI0MScsJ05vdFRpbGRlRXF1YWwnOidcXHUyMjQ0JywnTm90VGlsZGVGdWxsRXF1YWwnOidcXHUyMjQ3JywnTm90VGlsZGVUaWxkZSc6J1xcdTIyNDknLCdOb3RWZXJ0aWNhbEJhcic6J1xcdTIyMjQnLCducGFyJzonXFx1MjIyNicsJ25wYXJhbGxlbCc6J1xcdTIyMjYnLCducGFyc2wnOidcXHUyQUZEXFx1MjBFNScsJ25wYXJ0JzonXFx1MjIwMlxcdTAzMzgnLCducG9saW50JzonXFx1MkExNCcsJ25wcic6J1xcdTIyODAnLCducHJjdWUnOidcXHUyMkUwJywnbnByZSc6J1xcdTJBQUZcXHUwMzM4JywnbnByZWMnOidcXHUyMjgwJywnbnByZWNlcSc6J1xcdTJBQUZcXHUwMzM4JywnbnJhcnInOidcXHUyMTlCJywnbnJBcnInOidcXHUyMUNGJywnbnJhcnJjJzonXFx1MjkzM1xcdTAzMzgnLCducmFycncnOidcXHUyMTlEXFx1MDMzOCcsJ25yaWdodGFycm93JzonXFx1MjE5QicsJ25SaWdodGFycm93JzonXFx1MjFDRicsJ25ydHJpJzonXFx1MjJFQicsJ25ydHJpZSc6J1xcdTIyRUQnLCduc2MnOidcXHUyMjgxJywnbnNjY3VlJzonXFx1MjJFMScsJ25zY2UnOidcXHUyQUIwXFx1MDMzOCcsJ25zY3InOidcXHVEODM1XFx1RENDMycsJ05zY3InOidcXHVEODM1XFx1RENBOScsJ25zaG9ydG1pZCc6J1xcdTIyMjQnLCduc2hvcnRwYXJhbGxlbCc6J1xcdTIyMjYnLCduc2ltJzonXFx1MjI0MScsJ25zaW1lJzonXFx1MjI0NCcsJ25zaW1lcSc6J1xcdTIyNDQnLCduc21pZCc6J1xcdTIyMjQnLCduc3Bhcic6J1xcdTIyMjYnLCduc3FzdWJlJzonXFx1MjJFMicsJ25zcXN1cGUnOidcXHUyMkUzJywnbnN1Yic6J1xcdTIyODQnLCduc3ViZSc6J1xcdTIyODgnLCduc3ViRSc6J1xcdTJBQzVcXHUwMzM4JywnbnN1YnNldCc6J1xcdTIyODJcXHUyMEQyJywnbnN1YnNldGVxJzonXFx1MjI4OCcsJ25zdWJzZXRlcXEnOidcXHUyQUM1XFx1MDMzOCcsJ25zdWNjJzonXFx1MjI4MScsJ25zdWNjZXEnOidcXHUyQUIwXFx1MDMzOCcsJ25zdXAnOidcXHUyMjg1JywnbnN1cGUnOidcXHUyMjg5JywnbnN1cEUnOidcXHUyQUM2XFx1MDMzOCcsJ25zdXBzZXQnOidcXHUyMjgzXFx1MjBEMicsJ25zdXBzZXRlcSc6J1xcdTIyODknLCduc3Vwc2V0ZXFxJzonXFx1MkFDNlxcdTAzMzgnLCdudGdsJzonXFx1MjI3OScsJ250aWxkZSc6J1xceEYxJywnTnRpbGRlJzonXFx4RDEnLCdudGxnJzonXFx1MjI3OCcsJ250cmlhbmdsZWxlZnQnOidcXHUyMkVBJywnbnRyaWFuZ2xlbGVmdGVxJzonXFx1MjJFQycsJ250cmlhbmdsZXJpZ2h0JzonXFx1MjJFQicsJ250cmlhbmdsZXJpZ2h0ZXEnOidcXHUyMkVEJywnbnUnOidcXHUwM0JEJywnTnUnOidcXHUwMzlEJywnbnVtJzonIycsJ251bWVybyc6J1xcdTIxMTYnLCdudW1zcCc6J1xcdTIwMDcnLCdudmFwJzonXFx1MjI0RFxcdTIwRDInLCdudmRhc2gnOidcXHUyMkFDJywnbnZEYXNoJzonXFx1MjJBRCcsJ25WZGFzaCc6J1xcdTIyQUUnLCduVkRhc2gnOidcXHUyMkFGJywnbnZnZSc6J1xcdTIyNjVcXHUyMEQyJywnbnZndCc6Jz5cXHUyMEQyJywnbnZIYXJyJzonXFx1MjkwNCcsJ252aW5maW4nOidcXHUyOURFJywnbnZsQXJyJzonXFx1MjkwMicsJ252bGUnOidcXHUyMjY0XFx1MjBEMicsJ252bHQnOic8XFx1MjBEMicsJ252bHRyaWUnOidcXHUyMkI0XFx1MjBEMicsJ252ckFycic6J1xcdTI5MDMnLCdudnJ0cmllJzonXFx1MjJCNVxcdTIwRDInLCdudnNpbSc6J1xcdTIyM0NcXHUyMEQyJywnbndhcmhrJzonXFx1MjkyMycsJ253YXJyJzonXFx1MjE5NicsJ253QXJyJzonXFx1MjFENicsJ253YXJyb3cnOidcXHUyMTk2JywnbnduZWFyJzonXFx1MjkyNycsJ29hY3V0ZSc6J1xceEYzJywnT2FjdXRlJzonXFx4RDMnLCdvYXN0JzonXFx1MjI5QicsJ29jaXInOidcXHUyMjlBJywnb2NpcmMnOidcXHhGNCcsJ09jaXJjJzonXFx4RDQnLCdvY3knOidcXHUwNDNFJywnT2N5JzonXFx1MDQxRScsJ29kYXNoJzonXFx1MjI5RCcsJ29kYmxhYyc6J1xcdTAxNTEnLCdPZGJsYWMnOidcXHUwMTUwJywnb2Rpdic6J1xcdTJBMzgnLCdvZG90JzonXFx1MjI5OScsJ29kc29sZCc6J1xcdTI5QkMnLCdvZWxpZyc6J1xcdTAxNTMnLCdPRWxpZyc6J1xcdTAxNTInLCdvZmNpcic6J1xcdTI5QkYnLCdvZnInOidcXHVEODM1XFx1REQyQycsJ09mcic6J1xcdUQ4MzVcXHVERDEyJywnb2dvbic6J1xcdTAyREInLCdvZ3JhdmUnOidcXHhGMicsJ09ncmF2ZSc6J1xceEQyJywnb2d0JzonXFx1MjlDMScsJ29oYmFyJzonXFx1MjlCNScsJ29obSc6J1xcdTAzQTknLCdvaW50JzonXFx1MjIyRScsJ29sYXJyJzonXFx1MjFCQScsJ29sY2lyJzonXFx1MjlCRScsJ29sY3Jvc3MnOidcXHUyOUJCJywnb2xpbmUnOidcXHUyMDNFJywnb2x0JzonXFx1MjlDMCcsJ29tYWNyJzonXFx1MDE0RCcsJ09tYWNyJzonXFx1MDE0QycsJ29tZWdhJzonXFx1MDNDOScsJ09tZWdhJzonXFx1MDNBOScsJ29taWNyb24nOidcXHUwM0JGJywnT21pY3Jvbic6J1xcdTAzOUYnLCdvbWlkJzonXFx1MjlCNicsJ29taW51cyc6J1xcdTIyOTYnLCdvb3BmJzonXFx1RDgzNVxcdURENjAnLCdPb3BmJzonXFx1RDgzNVxcdURENDYnLCdvcGFyJzonXFx1MjlCNycsJ09wZW5DdXJseURvdWJsZVF1b3RlJzonXFx1MjAxQycsJ09wZW5DdXJseVF1b3RlJzonXFx1MjAxOCcsJ29wZXJwJzonXFx1MjlCOScsJ29wbHVzJzonXFx1MjI5NScsJ29yJzonXFx1MjIyOCcsJ09yJzonXFx1MkE1NCcsJ29yYXJyJzonXFx1MjFCQicsJ29yZCc6J1xcdTJBNUQnLCdvcmRlcic6J1xcdTIxMzQnLCdvcmRlcm9mJzonXFx1MjEzNCcsJ29yZGYnOidcXHhBQScsJ29yZG0nOidcXHhCQScsJ29yaWdvZic6J1xcdTIyQjYnLCdvcm9yJzonXFx1MkE1NicsJ29yc2xvcGUnOidcXHUyQTU3Jywnb3J2JzonXFx1MkE1QicsJ29TJzonXFx1MjRDOCcsJ29zY3InOidcXHUyMTM0JywnT3Njcic6J1xcdUQ4MzVcXHVEQ0FBJywnb3NsYXNoJzonXFx4RjgnLCdPc2xhc2gnOidcXHhEOCcsJ29zb2wnOidcXHUyMjk4Jywnb3RpbGRlJzonXFx4RjUnLCdPdGlsZGUnOidcXHhENScsJ290aW1lcyc6J1xcdTIyOTcnLCdPdGltZXMnOidcXHUyQTM3Jywnb3RpbWVzYXMnOidcXHUyQTM2Jywnb3VtbCc6J1xceEY2JywnT3VtbCc6J1xceEQ2Jywnb3ZiYXInOidcXHUyMzNEJywnT3ZlckJhcic6J1xcdTIwM0UnLCdPdmVyQnJhY2UnOidcXHUyM0RFJywnT3ZlckJyYWNrZXQnOidcXHUyM0I0JywnT3ZlclBhcmVudGhlc2lzJzonXFx1MjNEQycsJ3Bhcic6J1xcdTIyMjUnLCdwYXJhJzonXFx4QjYnLCdwYXJhbGxlbCc6J1xcdTIyMjUnLCdwYXJzaW0nOidcXHUyQUYzJywncGFyc2wnOidcXHUyQUZEJywncGFydCc6J1xcdTIyMDInLCdQYXJ0aWFsRCc6J1xcdTIyMDInLCdwY3knOidcXHUwNDNGJywnUGN5JzonXFx1MDQxRicsJ3BlcmNudCc6JyUnLCdwZXJpb2QnOicuJywncGVybWlsJzonXFx1MjAzMCcsJ3BlcnAnOidcXHUyMkE1JywncGVydGVuayc6J1xcdTIwMzEnLCdwZnInOidcXHVEODM1XFx1REQyRCcsJ1Bmcic6J1xcdUQ4MzVcXHVERDEzJywncGhpJzonXFx1MDNDNicsJ1BoaSc6J1xcdTAzQTYnLCdwaGl2JzonXFx1MDNENScsJ3BobW1hdCc6J1xcdTIxMzMnLCdwaG9uZSc6J1xcdTI2MEUnLCdwaSc6J1xcdTAzQzAnLCdQaSc6J1xcdTAzQTAnLCdwaXRjaGZvcmsnOidcXHUyMkQ0JywncGl2JzonXFx1MDNENicsJ3BsYW5jayc6J1xcdTIxMEYnLCdwbGFuY2toJzonXFx1MjEwRScsJ3BsYW5rdic6J1xcdTIxMEYnLCdwbHVzJzonKycsJ3BsdXNhY2lyJzonXFx1MkEyMycsJ3BsdXNiJzonXFx1MjI5RScsJ3BsdXNjaXInOidcXHUyQTIyJywncGx1c2RvJzonXFx1MjIxNCcsJ3BsdXNkdSc6J1xcdTJBMjUnLCdwbHVzZSc6J1xcdTJBNzInLCdQbHVzTWludXMnOidcXHhCMScsJ3BsdXNtbic6J1xceEIxJywncGx1c3NpbSc6J1xcdTJBMjYnLCdwbHVzdHdvJzonXFx1MkEyNycsJ3BtJzonXFx4QjEnLCdQb2luY2FyZXBsYW5lJzonXFx1MjEwQycsJ3BvaW50aW50JzonXFx1MkExNScsJ3BvcGYnOidcXHVEODM1XFx1REQ2MScsJ1BvcGYnOidcXHUyMTE5JywncG91bmQnOidcXHhBMycsJ3ByJzonXFx1MjI3QScsJ1ByJzonXFx1MkFCQicsJ3ByYXAnOidcXHUyQUI3JywncHJjdWUnOidcXHUyMjdDJywncHJlJzonXFx1MkFBRicsJ3ByRSc6J1xcdTJBQjMnLCdwcmVjJzonXFx1MjI3QScsJ3ByZWNhcHByb3gnOidcXHUyQUI3JywncHJlY2N1cmx5ZXEnOidcXHUyMjdDJywnUHJlY2VkZXMnOidcXHUyMjdBJywnUHJlY2VkZXNFcXVhbCc6J1xcdTJBQUYnLCdQcmVjZWRlc1NsYW50RXF1YWwnOidcXHUyMjdDJywnUHJlY2VkZXNUaWxkZSc6J1xcdTIyN0UnLCdwcmVjZXEnOidcXHUyQUFGJywncHJlY25hcHByb3gnOidcXHUyQUI5JywncHJlY25lcXEnOidcXHUyQUI1JywncHJlY25zaW0nOidcXHUyMkU4JywncHJlY3NpbSc6J1xcdTIyN0UnLCdwcmltZSc6J1xcdTIwMzInLCdQcmltZSc6J1xcdTIwMzMnLCdwcmltZXMnOidcXHUyMTE5JywncHJuYXAnOidcXHUyQUI5JywncHJuRSc6J1xcdTJBQjUnLCdwcm5zaW0nOidcXHUyMkU4JywncHJvZCc6J1xcdTIyMEYnLCdQcm9kdWN0JzonXFx1MjIwRicsJ3Byb2ZhbGFyJzonXFx1MjMyRScsJ3Byb2ZsaW5lJzonXFx1MjMxMicsJ3Byb2ZzdXJmJzonXFx1MjMxMycsJ3Byb3AnOidcXHUyMjFEJywnUHJvcG9ydGlvbic6J1xcdTIyMzcnLCdQcm9wb3J0aW9uYWwnOidcXHUyMjFEJywncHJvcHRvJzonXFx1MjIxRCcsJ3Byc2ltJzonXFx1MjI3RScsJ3BydXJlbCc6J1xcdTIyQjAnLCdwc2NyJzonXFx1RDgzNVxcdURDQzUnLCdQc2NyJzonXFx1RDgzNVxcdURDQUInLCdwc2knOidcXHUwM0M4JywnUHNpJzonXFx1MDNBOCcsJ3B1bmNzcCc6J1xcdTIwMDgnLCdxZnInOidcXHVEODM1XFx1REQyRScsJ1Fmcic6J1xcdUQ4MzVcXHVERDE0JywncWludCc6J1xcdTJBMEMnLCdxb3BmJzonXFx1RDgzNVxcdURENjInLCdRb3BmJzonXFx1MjExQScsJ3FwcmltZSc6J1xcdTIwNTcnLCdxc2NyJzonXFx1RDgzNVxcdURDQzYnLCdRc2NyJzonXFx1RDgzNVxcdURDQUMnLCdxdWF0ZXJuaW9ucyc6J1xcdTIxMEQnLCdxdWF0aW50JzonXFx1MkExNicsJ3F1ZXN0JzonPycsJ3F1ZXN0ZXEnOidcXHUyMjVGJywncXVvdCc6J1wiJywnUVVPVCc6J1wiJywnckFhcnInOidcXHUyMURCJywncmFjZSc6J1xcdTIyM0RcXHUwMzMxJywncmFjdXRlJzonXFx1MDE1NScsJ1JhY3V0ZSc6J1xcdTAxNTQnLCdyYWRpYyc6J1xcdTIyMUEnLCdyYWVtcHR5dic6J1xcdTI5QjMnLCdyYW5nJzonXFx1MjdFOScsJ1JhbmcnOidcXHUyN0VCJywncmFuZ2QnOidcXHUyOTkyJywncmFuZ2UnOidcXHUyOUE1JywncmFuZ2xlJzonXFx1MjdFOScsJ3JhcXVvJzonXFx4QkInLCdyYXJyJzonXFx1MjE5MicsJ3JBcnInOidcXHUyMUQyJywnUmFycic6J1xcdTIxQTAnLCdyYXJyYXAnOidcXHUyOTc1JywncmFycmInOidcXHUyMUU1JywncmFycmJmcyc6J1xcdTI5MjAnLCdyYXJyYyc6J1xcdTI5MzMnLCdyYXJyZnMnOidcXHUyOTFFJywncmFycmhrJzonXFx1MjFBQScsJ3JhcnJscCc6J1xcdTIxQUMnLCdyYXJycGwnOidcXHUyOTQ1JywncmFycnNpbSc6J1xcdTI5NzQnLCdyYXJydGwnOidcXHUyMUEzJywnUmFycnRsJzonXFx1MjkxNicsJ3JhcnJ3JzonXFx1MjE5RCcsJ3JhdGFpbCc6J1xcdTI5MUEnLCdyQXRhaWwnOidcXHUyOTFDJywncmF0aW8nOidcXHUyMjM2JywncmF0aW9uYWxzJzonXFx1MjExQScsJ3JiYXJyJzonXFx1MjkwRCcsJ3JCYXJyJzonXFx1MjkwRicsJ1JCYXJyJzonXFx1MjkxMCcsJ3JiYnJrJzonXFx1Mjc3MycsJ3JicmFjZSc6J30nLCdyYnJhY2snOiddJywncmJya2UnOidcXHUyOThDJywncmJya3NsZCc6J1xcdTI5OEUnLCdyYnJrc2x1JzonXFx1Mjk5MCcsJ3JjYXJvbic6J1xcdTAxNTknLCdSY2Fyb24nOidcXHUwMTU4JywncmNlZGlsJzonXFx1MDE1NycsJ1JjZWRpbCc6J1xcdTAxNTYnLCdyY2VpbCc6J1xcdTIzMDknLCdyY3ViJzonfScsJ3JjeSc6J1xcdTA0NDAnLCdSY3knOidcXHUwNDIwJywncmRjYSc6J1xcdTI5MzcnLCdyZGxkaGFyJzonXFx1Mjk2OScsJ3JkcXVvJzonXFx1MjAxRCcsJ3JkcXVvcic6J1xcdTIwMUQnLCdyZHNoJzonXFx1MjFCMycsJ1JlJzonXFx1MjExQycsJ3JlYWwnOidcXHUyMTFDJywncmVhbGluZSc6J1xcdTIxMUInLCdyZWFscGFydCc6J1xcdTIxMUMnLCdyZWFscyc6J1xcdTIxMUQnLCdyZWN0JzonXFx1MjVBRCcsJ3JlZyc6J1xceEFFJywnUkVHJzonXFx4QUUnLCdSZXZlcnNlRWxlbWVudCc6J1xcdTIyMEInLCdSZXZlcnNlRXF1aWxpYnJpdW0nOidcXHUyMUNCJywnUmV2ZXJzZVVwRXF1aWxpYnJpdW0nOidcXHUyOTZGJywncmZpc2h0JzonXFx1Mjk3RCcsJ3JmbG9vcic6J1xcdTIzMEInLCdyZnInOidcXHVEODM1XFx1REQyRicsJ1Jmcic6J1xcdTIxMUMnLCdySGFyJzonXFx1Mjk2NCcsJ3JoYXJkJzonXFx1MjFDMScsJ3JoYXJ1JzonXFx1MjFDMCcsJ3JoYXJ1bCc6J1xcdTI5NkMnLCdyaG8nOidcXHUwM0MxJywnUmhvJzonXFx1MDNBMScsJ3Job3YnOidcXHUwM0YxJywnUmlnaHRBbmdsZUJyYWNrZXQnOidcXHUyN0U5JywncmlnaHRhcnJvdyc6J1xcdTIxOTInLCdSaWdodGFycm93JzonXFx1MjFEMicsJ1JpZ2h0QXJyb3cnOidcXHUyMTkyJywnUmlnaHRBcnJvd0Jhcic6J1xcdTIxRTUnLCdSaWdodEFycm93TGVmdEFycm93JzonXFx1MjFDNCcsJ3JpZ2h0YXJyb3d0YWlsJzonXFx1MjFBMycsJ1JpZ2h0Q2VpbGluZyc6J1xcdTIzMDknLCdSaWdodERvdWJsZUJyYWNrZXQnOidcXHUyN0U3JywnUmlnaHREb3duVGVlVmVjdG9yJzonXFx1Mjk1RCcsJ1JpZ2h0RG93blZlY3Rvcic6J1xcdTIxQzInLCdSaWdodERvd25WZWN0b3JCYXInOidcXHUyOTU1JywnUmlnaHRGbG9vcic6J1xcdTIzMEInLCdyaWdodGhhcnBvb25kb3duJzonXFx1MjFDMScsJ3JpZ2h0aGFycG9vbnVwJzonXFx1MjFDMCcsJ3JpZ2h0bGVmdGFycm93cyc6J1xcdTIxQzQnLCdyaWdodGxlZnRoYXJwb29ucyc6J1xcdTIxQ0MnLCdyaWdodHJpZ2h0YXJyb3dzJzonXFx1MjFDOScsJ3JpZ2h0c3F1aWdhcnJvdyc6J1xcdTIxOUQnLCdSaWdodFRlZSc6J1xcdTIyQTInLCdSaWdodFRlZUFycm93JzonXFx1MjFBNicsJ1JpZ2h0VGVlVmVjdG9yJzonXFx1Mjk1QicsJ3JpZ2h0dGhyZWV0aW1lcyc6J1xcdTIyQ0MnLCdSaWdodFRyaWFuZ2xlJzonXFx1MjJCMycsJ1JpZ2h0VHJpYW5nbGVCYXInOidcXHUyOUQwJywnUmlnaHRUcmlhbmdsZUVxdWFsJzonXFx1MjJCNScsJ1JpZ2h0VXBEb3duVmVjdG9yJzonXFx1Mjk0RicsJ1JpZ2h0VXBUZWVWZWN0b3InOidcXHUyOTVDJywnUmlnaHRVcFZlY3Rvcic6J1xcdTIxQkUnLCdSaWdodFVwVmVjdG9yQmFyJzonXFx1Mjk1NCcsJ1JpZ2h0VmVjdG9yJzonXFx1MjFDMCcsJ1JpZ2h0VmVjdG9yQmFyJzonXFx1Mjk1MycsJ3JpbmcnOidcXHUwMkRBJywncmlzaW5nZG90c2VxJzonXFx1MjI1MycsJ3JsYXJyJzonXFx1MjFDNCcsJ3JsaGFyJzonXFx1MjFDQycsJ3JsbSc6J1xcdTIwMEYnLCdybW91c3QnOidcXHUyM0IxJywncm1vdXN0YWNoZSc6J1xcdTIzQjEnLCdybm1pZCc6J1xcdTJBRUUnLCdyb2FuZyc6J1xcdTI3RUQnLCdyb2Fycic6J1xcdTIxRkUnLCdyb2Jyayc6J1xcdTI3RTcnLCdyb3Bhcic6J1xcdTI5ODYnLCdyb3BmJzonXFx1RDgzNVxcdURENjMnLCdSb3BmJzonXFx1MjExRCcsJ3JvcGx1cyc6J1xcdTJBMkUnLCdyb3RpbWVzJzonXFx1MkEzNScsJ1JvdW5kSW1wbGllcyc6J1xcdTI5NzAnLCdycGFyJzonKScsJ3JwYXJndCc6J1xcdTI5OTQnLCdycHBvbGludCc6J1xcdTJBMTInLCdycmFycic6J1xcdTIxQzknLCdScmlnaHRhcnJvdyc6J1xcdTIxREInLCdyc2FxdW8nOidcXHUyMDNBJywncnNjcic6J1xcdUQ4MzVcXHVEQ0M3JywnUnNjcic6J1xcdTIxMUInLCdyc2gnOidcXHUyMUIxJywnUnNoJzonXFx1MjFCMScsJ3JzcWInOiddJywncnNxdW8nOidcXHUyMDE5JywncnNxdW9yJzonXFx1MjAxOScsJ3J0aHJlZSc6J1xcdTIyQ0MnLCdydGltZXMnOidcXHUyMkNBJywncnRyaSc6J1xcdTI1QjknLCdydHJpZSc6J1xcdTIyQjUnLCdydHJpZic6J1xcdTI1QjgnLCdydHJpbHRyaSc6J1xcdTI5Q0UnLCdSdWxlRGVsYXllZCc6J1xcdTI5RjQnLCdydWx1aGFyJzonXFx1Mjk2OCcsJ3J4JzonXFx1MjExRScsJ3NhY3V0ZSc6J1xcdTAxNUInLCdTYWN1dGUnOidcXHUwMTVBJywnc2JxdW8nOidcXHUyMDFBJywnc2MnOidcXHUyMjdCJywnU2MnOidcXHUyQUJDJywnc2NhcCc6J1xcdTJBQjgnLCdzY2Fyb24nOidcXHUwMTYxJywnU2Nhcm9uJzonXFx1MDE2MCcsJ3NjY3VlJzonXFx1MjI3RCcsJ3NjZSc6J1xcdTJBQjAnLCdzY0UnOidcXHUyQUI0Jywnc2NlZGlsJzonXFx1MDE1RicsJ1NjZWRpbCc6J1xcdTAxNUUnLCdzY2lyYyc6J1xcdTAxNUQnLCdTY2lyYyc6J1xcdTAxNUMnLCdzY25hcCc6J1xcdTJBQkEnLCdzY25FJzonXFx1MkFCNicsJ3NjbnNpbSc6J1xcdTIyRTknLCdzY3BvbGludCc6J1xcdTJBMTMnLCdzY3NpbSc6J1xcdTIyN0YnLCdzY3knOidcXHUwNDQxJywnU2N5JzonXFx1MDQyMScsJ3Nkb3QnOidcXHUyMkM1Jywnc2RvdGInOidcXHUyMkExJywnc2RvdGUnOidcXHUyQTY2Jywnc2VhcmhrJzonXFx1MjkyNScsJ3NlYXJyJzonXFx1MjE5OCcsJ3NlQXJyJzonXFx1MjFEOCcsJ3NlYXJyb3cnOidcXHUyMTk4Jywnc2VjdCc6J1xceEE3Jywnc2VtaSc6JzsnLCdzZXN3YXInOidcXHUyOTI5Jywnc2V0bWludXMnOidcXHUyMjE2Jywnc2V0bW4nOidcXHUyMjE2Jywnc2V4dCc6J1xcdTI3MzYnLCdzZnInOidcXHVEODM1XFx1REQzMCcsJ1Nmcic6J1xcdUQ4MzVcXHVERDE2Jywnc2Zyb3duJzonXFx1MjMyMicsJ3NoYXJwJzonXFx1MjY2RicsJ3NoY2hjeSc6J1xcdTA0NDknLCdTSENIY3knOidcXHUwNDI5Jywnc2hjeSc6J1xcdTA0NDgnLCdTSGN5JzonXFx1MDQyOCcsJ1Nob3J0RG93bkFycm93JzonXFx1MjE5MycsJ1Nob3J0TGVmdEFycm93JzonXFx1MjE5MCcsJ3Nob3J0bWlkJzonXFx1MjIyMycsJ3Nob3J0cGFyYWxsZWwnOidcXHUyMjI1JywnU2hvcnRSaWdodEFycm93JzonXFx1MjE5MicsJ1Nob3J0VXBBcnJvdyc6J1xcdTIxOTEnLCdzaHknOidcXHhBRCcsJ3NpZ21hJzonXFx1MDNDMycsJ1NpZ21hJzonXFx1MDNBMycsJ3NpZ21hZic6J1xcdTAzQzInLCdzaWdtYXYnOidcXHUwM0MyJywnc2ltJzonXFx1MjIzQycsJ3NpbWRvdCc6J1xcdTJBNkEnLCdzaW1lJzonXFx1MjI0MycsJ3NpbWVxJzonXFx1MjI0MycsJ3NpbWcnOidcXHUyQTlFJywnc2ltZ0UnOidcXHUyQUEwJywnc2ltbCc6J1xcdTJBOUQnLCdzaW1sRSc6J1xcdTJBOUYnLCdzaW1uZSc6J1xcdTIyNDYnLCdzaW1wbHVzJzonXFx1MkEyNCcsJ3NpbXJhcnInOidcXHUyOTcyJywnc2xhcnInOidcXHUyMTkwJywnU21hbGxDaXJjbGUnOidcXHUyMjE4Jywnc21hbGxzZXRtaW51cyc6J1xcdTIyMTYnLCdzbWFzaHAnOidcXHUyQTMzJywnc21lcGFyc2wnOidcXHUyOUU0Jywnc21pZCc6J1xcdTIyMjMnLCdzbWlsZSc6J1xcdTIzMjMnLCdzbXQnOidcXHUyQUFBJywnc210ZSc6J1xcdTJBQUMnLCdzbXRlcyc6J1xcdTJBQUNcXHVGRTAwJywnc29mdGN5JzonXFx1MDQ0QycsJ1NPRlRjeSc6J1xcdTA0MkMnLCdzb2wnOicvJywnc29sYic6J1xcdTI5QzQnLCdzb2xiYXInOidcXHUyMzNGJywnc29wZic6J1xcdUQ4MzVcXHVERDY0JywnU29wZic6J1xcdUQ4MzVcXHVERDRBJywnc3BhZGVzJzonXFx1MjY2MCcsJ3NwYWRlc3VpdCc6J1xcdTI2NjAnLCdzcGFyJzonXFx1MjIyNScsJ3NxY2FwJzonXFx1MjI5MycsJ3NxY2Fwcyc6J1xcdTIyOTNcXHVGRTAwJywnc3FjdXAnOidcXHUyMjk0Jywnc3FjdXBzJzonXFx1MjI5NFxcdUZFMDAnLCdTcXJ0JzonXFx1MjIxQScsJ3Nxc3ViJzonXFx1MjI4RicsJ3Nxc3ViZSc6J1xcdTIyOTEnLCdzcXN1YnNldCc6J1xcdTIyOEYnLCdzcXN1YnNldGVxJzonXFx1MjI5MScsJ3Nxc3VwJzonXFx1MjI5MCcsJ3Nxc3VwZSc6J1xcdTIyOTInLCdzcXN1cHNldCc6J1xcdTIyOTAnLCdzcXN1cHNldGVxJzonXFx1MjI5MicsJ3NxdSc6J1xcdTI1QTEnLCdzcXVhcmUnOidcXHUyNUExJywnU3F1YXJlJzonXFx1MjVBMScsJ1NxdWFyZUludGVyc2VjdGlvbic6J1xcdTIyOTMnLCdTcXVhcmVTdWJzZXQnOidcXHUyMjhGJywnU3F1YXJlU3Vic2V0RXF1YWwnOidcXHUyMjkxJywnU3F1YXJlU3VwZXJzZXQnOidcXHUyMjkwJywnU3F1YXJlU3VwZXJzZXRFcXVhbCc6J1xcdTIyOTInLCdTcXVhcmVVbmlvbic6J1xcdTIyOTQnLCdzcXVhcmYnOidcXHUyNUFBJywnc3F1Zic6J1xcdTI1QUEnLCdzcmFycic6J1xcdTIxOTInLCdzc2NyJzonXFx1RDgzNVxcdURDQzgnLCdTc2NyJzonXFx1RDgzNVxcdURDQUUnLCdzc2V0bW4nOidcXHUyMjE2Jywnc3NtaWxlJzonXFx1MjMyMycsJ3NzdGFyZic6J1xcdTIyQzYnLCdzdGFyJzonXFx1MjYwNicsJ1N0YXInOidcXHUyMkM2Jywnc3RhcmYnOidcXHUyNjA1Jywnc3RyYWlnaHRlcHNpbG9uJzonXFx1MDNGNScsJ3N0cmFpZ2h0cGhpJzonXFx1MDNENScsJ3N0cm5zJzonXFx4QUYnLCdzdWInOidcXHUyMjgyJywnU3ViJzonXFx1MjJEMCcsJ3N1YmRvdCc6J1xcdTJBQkQnLCdzdWJlJzonXFx1MjI4NicsJ3N1YkUnOidcXHUyQUM1Jywnc3ViZWRvdCc6J1xcdTJBQzMnLCdzdWJtdWx0JzonXFx1MkFDMScsJ3N1Ym5lJzonXFx1MjI4QScsJ3N1Ym5FJzonXFx1MkFDQicsJ3N1YnBsdXMnOidcXHUyQUJGJywnc3VicmFycic6J1xcdTI5NzknLCdzdWJzZXQnOidcXHUyMjgyJywnU3Vic2V0JzonXFx1MjJEMCcsJ3N1YnNldGVxJzonXFx1MjI4NicsJ3N1YnNldGVxcSc6J1xcdTJBQzUnLCdTdWJzZXRFcXVhbCc6J1xcdTIyODYnLCdzdWJzZXRuZXEnOidcXHUyMjhBJywnc3Vic2V0bmVxcSc6J1xcdTJBQ0InLCdzdWJzaW0nOidcXHUyQUM3Jywnc3Vic3ViJzonXFx1MkFENScsJ3N1YnN1cCc6J1xcdTJBRDMnLCdzdWNjJzonXFx1MjI3QicsJ3N1Y2NhcHByb3gnOidcXHUyQUI4Jywnc3VjY2N1cmx5ZXEnOidcXHUyMjdEJywnU3VjY2VlZHMnOidcXHUyMjdCJywnU3VjY2VlZHNFcXVhbCc6J1xcdTJBQjAnLCdTdWNjZWVkc1NsYW50RXF1YWwnOidcXHUyMjdEJywnU3VjY2VlZHNUaWxkZSc6J1xcdTIyN0YnLCdzdWNjZXEnOidcXHUyQUIwJywnc3VjY25hcHByb3gnOidcXHUyQUJBJywnc3VjY25lcXEnOidcXHUyQUI2Jywnc3VjY25zaW0nOidcXHUyMkU5Jywnc3VjY3NpbSc6J1xcdTIyN0YnLCdTdWNoVGhhdCc6J1xcdTIyMEInLCdzdW0nOidcXHUyMjExJywnU3VtJzonXFx1MjIxMScsJ3N1bmcnOidcXHUyNjZBJywnc3VwJzonXFx1MjI4MycsJ1N1cCc6J1xcdTIyRDEnLCdzdXAxJzonXFx4QjknLCdzdXAyJzonXFx4QjInLCdzdXAzJzonXFx4QjMnLCdzdXBkb3QnOidcXHUyQUJFJywnc3VwZHN1Yic6J1xcdTJBRDgnLCdzdXBlJzonXFx1MjI4NycsJ3N1cEUnOidcXHUyQUM2Jywnc3VwZWRvdCc6J1xcdTJBQzQnLCdTdXBlcnNldCc6J1xcdTIyODMnLCdTdXBlcnNldEVxdWFsJzonXFx1MjI4NycsJ3N1cGhzb2wnOidcXHUyN0M5Jywnc3VwaHN1Yic6J1xcdTJBRDcnLCdzdXBsYXJyJzonXFx1Mjk3QicsJ3N1cG11bHQnOidcXHUyQUMyJywnc3VwbmUnOidcXHUyMjhCJywnc3VwbkUnOidcXHUyQUNDJywnc3VwcGx1cyc6J1xcdTJBQzAnLCdzdXBzZXQnOidcXHUyMjgzJywnU3Vwc2V0JzonXFx1MjJEMScsJ3N1cHNldGVxJzonXFx1MjI4NycsJ3N1cHNldGVxcSc6J1xcdTJBQzYnLCdzdXBzZXRuZXEnOidcXHUyMjhCJywnc3Vwc2V0bmVxcSc6J1xcdTJBQ0MnLCdzdXBzaW0nOidcXHUyQUM4Jywnc3Vwc3ViJzonXFx1MkFENCcsJ3N1cHN1cCc6J1xcdTJBRDYnLCdzd2FyaGsnOidcXHUyOTI2Jywnc3dhcnInOidcXHUyMTk5Jywnc3dBcnInOidcXHUyMUQ5Jywnc3dhcnJvdyc6J1xcdTIxOTknLCdzd253YXInOidcXHUyOTJBJywnc3psaWcnOidcXHhERicsJ1RhYic6J1xcdCcsJ3RhcmdldCc6J1xcdTIzMTYnLCd0YXUnOidcXHUwM0M0JywnVGF1JzonXFx1MDNBNCcsJ3RicmsnOidcXHUyM0I0JywndGNhcm9uJzonXFx1MDE2NScsJ1RjYXJvbic6J1xcdTAxNjQnLCd0Y2VkaWwnOidcXHUwMTYzJywnVGNlZGlsJzonXFx1MDE2MicsJ3RjeSc6J1xcdTA0NDInLCdUY3knOidcXHUwNDIyJywndGRvdCc6J1xcdTIwREInLCd0ZWxyZWMnOidcXHUyMzE1JywndGZyJzonXFx1RDgzNVxcdUREMzEnLCdUZnInOidcXHVEODM1XFx1REQxNycsJ3RoZXJlNCc6J1xcdTIyMzQnLCd0aGVyZWZvcmUnOidcXHUyMjM0JywnVGhlcmVmb3JlJzonXFx1MjIzNCcsJ3RoZXRhJzonXFx1MDNCOCcsJ1RoZXRhJzonXFx1MDM5OCcsJ3RoZXRhc3ltJzonXFx1MDNEMScsJ3RoZXRhdic6J1xcdTAzRDEnLCd0aGlja2FwcHJveCc6J1xcdTIyNDgnLCd0aGlja3NpbSc6J1xcdTIyM0MnLCdUaGlja1NwYWNlJzonXFx1MjA1RlxcdTIwMEEnLCd0aGluc3AnOidcXHUyMDA5JywnVGhpblNwYWNlJzonXFx1MjAwOScsJ3Roa2FwJzonXFx1MjI0OCcsJ3Roa3NpbSc6J1xcdTIyM0MnLCd0aG9ybic6J1xceEZFJywnVEhPUk4nOidcXHhERScsJ3RpbGRlJzonXFx1MDJEQycsJ1RpbGRlJzonXFx1MjIzQycsJ1RpbGRlRXF1YWwnOidcXHUyMjQzJywnVGlsZGVGdWxsRXF1YWwnOidcXHUyMjQ1JywnVGlsZGVUaWxkZSc6J1xcdTIyNDgnLCd0aW1lcyc6J1xceEQ3JywndGltZXNiJzonXFx1MjJBMCcsJ3RpbWVzYmFyJzonXFx1MkEzMScsJ3RpbWVzZCc6J1xcdTJBMzAnLCd0aW50JzonXFx1MjIyRCcsJ3RvZWEnOidcXHUyOTI4JywndG9wJzonXFx1MjJBNCcsJ3RvcGJvdCc6J1xcdTIzMzYnLCd0b3BjaXInOidcXHUyQUYxJywndG9wZic6J1xcdUQ4MzVcXHVERDY1JywnVG9wZic6J1xcdUQ4MzVcXHVERDRCJywndG9wZm9yayc6J1xcdTJBREEnLCd0b3NhJzonXFx1MjkyOScsJ3RwcmltZSc6J1xcdTIwMzQnLCd0cmFkZSc6J1xcdTIxMjInLCdUUkFERSc6J1xcdTIxMjInLCd0cmlhbmdsZSc6J1xcdTI1QjUnLCd0cmlhbmdsZWRvd24nOidcXHUyNUJGJywndHJpYW5nbGVsZWZ0JzonXFx1MjVDMycsJ3RyaWFuZ2xlbGVmdGVxJzonXFx1MjJCNCcsJ3RyaWFuZ2xlcSc6J1xcdTIyNUMnLCd0cmlhbmdsZXJpZ2h0JzonXFx1MjVCOScsJ3RyaWFuZ2xlcmlnaHRlcSc6J1xcdTIyQjUnLCd0cmlkb3QnOidcXHUyNUVDJywndHJpZSc6J1xcdTIyNUMnLCd0cmltaW51cyc6J1xcdTJBM0EnLCdUcmlwbGVEb3QnOidcXHUyMERCJywndHJpcGx1cyc6J1xcdTJBMzknLCd0cmlzYic6J1xcdTI5Q0QnLCd0cml0aW1lJzonXFx1MkEzQicsJ3RycGV6aXVtJzonXFx1MjNFMicsJ3RzY3InOidcXHVEODM1XFx1RENDOScsJ1RzY3InOidcXHVEODM1XFx1RENBRicsJ3RzY3knOidcXHUwNDQ2JywnVFNjeSc6J1xcdTA0MjYnLCd0c2hjeSc6J1xcdTA0NUInLCdUU0hjeSc6J1xcdTA0MEInLCd0c3Ryb2snOidcXHUwMTY3JywnVHN0cm9rJzonXFx1MDE2NicsJ3R3aXh0JzonXFx1MjI2QycsJ3R3b2hlYWRsZWZ0YXJyb3cnOidcXHUyMTlFJywndHdvaGVhZHJpZ2h0YXJyb3cnOidcXHUyMUEwJywndWFjdXRlJzonXFx4RkEnLCdVYWN1dGUnOidcXHhEQScsJ3VhcnInOidcXHUyMTkxJywndUFycic6J1xcdTIxRDEnLCdVYXJyJzonXFx1MjE5RicsJ1VhcnJvY2lyJzonXFx1Mjk0OScsJ3VicmN5JzonXFx1MDQ1RScsJ1VicmN5JzonXFx1MDQwRScsJ3VicmV2ZSc6J1xcdTAxNkQnLCdVYnJldmUnOidcXHUwMTZDJywndWNpcmMnOidcXHhGQicsJ1VjaXJjJzonXFx4REInLCd1Y3knOidcXHUwNDQzJywnVWN5JzonXFx1MDQyMycsJ3VkYXJyJzonXFx1MjFDNScsJ3VkYmxhYyc6J1xcdTAxNzEnLCdVZGJsYWMnOidcXHUwMTcwJywndWRoYXInOidcXHUyOTZFJywndWZpc2h0JzonXFx1Mjk3RScsJ3Vmcic6J1xcdUQ4MzVcXHVERDMyJywnVWZyJzonXFx1RDgzNVxcdUREMTgnLCd1Z3JhdmUnOidcXHhGOScsJ1VncmF2ZSc6J1xceEQ5JywndUhhcic6J1xcdTI5NjMnLCd1aGFybCc6J1xcdTIxQkYnLCd1aGFycic6J1xcdTIxQkUnLCd1aGJsayc6J1xcdTI1ODAnLCd1bGNvcm4nOidcXHUyMzFDJywndWxjb3JuZXInOidcXHUyMzFDJywndWxjcm9wJzonXFx1MjMwRicsJ3VsdHJpJzonXFx1MjVGOCcsJ3VtYWNyJzonXFx1MDE2QicsJ1VtYWNyJzonXFx1MDE2QScsJ3VtbCc6J1xceEE4JywnVW5kZXJCYXInOidfJywnVW5kZXJCcmFjZSc6J1xcdTIzREYnLCdVbmRlckJyYWNrZXQnOidcXHUyM0I1JywnVW5kZXJQYXJlbnRoZXNpcyc6J1xcdTIzREQnLCdVbmlvbic6J1xcdTIyQzMnLCdVbmlvblBsdXMnOidcXHUyMjhFJywndW9nb24nOidcXHUwMTczJywnVW9nb24nOidcXHUwMTcyJywndW9wZic6J1xcdUQ4MzVcXHVERDY2JywnVW9wZic6J1xcdUQ4MzVcXHVERDRDJywndXBhcnJvdyc6J1xcdTIxOTEnLCdVcGFycm93JzonXFx1MjFEMScsJ1VwQXJyb3cnOidcXHUyMTkxJywnVXBBcnJvd0Jhcic6J1xcdTI5MTInLCdVcEFycm93RG93bkFycm93JzonXFx1MjFDNScsJ3VwZG93bmFycm93JzonXFx1MjE5NScsJ1VwZG93bmFycm93JzonXFx1MjFENScsJ1VwRG93bkFycm93JzonXFx1MjE5NScsJ1VwRXF1aWxpYnJpdW0nOidcXHUyOTZFJywndXBoYXJwb29ubGVmdCc6J1xcdTIxQkYnLCd1cGhhcnBvb25yaWdodCc6J1xcdTIxQkUnLCd1cGx1cyc6J1xcdTIyOEUnLCdVcHBlckxlZnRBcnJvdyc6J1xcdTIxOTYnLCdVcHBlclJpZ2h0QXJyb3cnOidcXHUyMTk3JywndXBzaSc6J1xcdTAzQzUnLCdVcHNpJzonXFx1MDNEMicsJ3Vwc2loJzonXFx1MDNEMicsJ3Vwc2lsb24nOidcXHUwM0M1JywnVXBzaWxvbic6J1xcdTAzQTUnLCdVcFRlZSc6J1xcdTIyQTUnLCdVcFRlZUFycm93JzonXFx1MjFBNScsJ3VwdXBhcnJvd3MnOidcXHUyMUM4JywndXJjb3JuJzonXFx1MjMxRCcsJ3VyY29ybmVyJzonXFx1MjMxRCcsJ3VyY3JvcCc6J1xcdTIzMEUnLCd1cmluZyc6J1xcdTAxNkYnLCdVcmluZyc6J1xcdTAxNkUnLCd1cnRyaSc6J1xcdTI1RjknLCd1c2NyJzonXFx1RDgzNVxcdURDQ0EnLCdVc2NyJzonXFx1RDgzNVxcdURDQjAnLCd1dGRvdCc6J1xcdTIyRjAnLCd1dGlsZGUnOidcXHUwMTY5JywnVXRpbGRlJzonXFx1MDE2OCcsJ3V0cmknOidcXHUyNUI1JywndXRyaWYnOidcXHUyNUI0JywndXVhcnInOidcXHUyMUM4JywndXVtbCc6J1xceEZDJywnVXVtbCc6J1xceERDJywndXdhbmdsZSc6J1xcdTI5QTcnLCd2YW5ncnQnOidcXHUyOTlDJywndmFyZXBzaWxvbic6J1xcdTAzRjUnLCd2YXJrYXBwYSc6J1xcdTAzRjAnLCd2YXJub3RoaW5nJzonXFx1MjIwNScsJ3ZhcnBoaSc6J1xcdTAzRDUnLCd2YXJwaSc6J1xcdTAzRDYnLCd2YXJwcm9wdG8nOidcXHUyMjFEJywndmFycic6J1xcdTIxOTUnLCd2QXJyJzonXFx1MjFENScsJ3ZhcnJobyc6J1xcdTAzRjEnLCd2YXJzaWdtYSc6J1xcdTAzQzInLCd2YXJzdWJzZXRuZXEnOidcXHUyMjhBXFx1RkUwMCcsJ3ZhcnN1YnNldG5lcXEnOidcXHUyQUNCXFx1RkUwMCcsJ3ZhcnN1cHNldG5lcSc6J1xcdTIyOEJcXHVGRTAwJywndmFyc3Vwc2V0bmVxcSc6J1xcdTJBQ0NcXHVGRTAwJywndmFydGhldGEnOidcXHUwM0QxJywndmFydHJpYW5nbGVsZWZ0JzonXFx1MjJCMicsJ3ZhcnRyaWFuZ2xlcmlnaHQnOidcXHUyMkIzJywndkJhcic6J1xcdTJBRTgnLCdWYmFyJzonXFx1MkFFQicsJ3ZCYXJ2JzonXFx1MkFFOScsJ3ZjeSc6J1xcdTA0MzInLCdWY3knOidcXHUwNDEyJywndmRhc2gnOidcXHUyMkEyJywndkRhc2gnOidcXHUyMkE4JywnVmRhc2gnOidcXHUyMkE5JywnVkRhc2gnOidcXHUyMkFCJywnVmRhc2hsJzonXFx1MkFFNicsJ3ZlZSc6J1xcdTIyMjgnLCdWZWUnOidcXHUyMkMxJywndmVlYmFyJzonXFx1MjJCQicsJ3ZlZWVxJzonXFx1MjI1QScsJ3ZlbGxpcCc6J1xcdTIyRUUnLCd2ZXJiYXInOid8JywnVmVyYmFyJzonXFx1MjAxNicsJ3ZlcnQnOid8JywnVmVydCc6J1xcdTIwMTYnLCdWZXJ0aWNhbEJhcic6J1xcdTIyMjMnLCdWZXJ0aWNhbExpbmUnOid8JywnVmVydGljYWxTZXBhcmF0b3InOidcXHUyNzU4JywnVmVydGljYWxUaWxkZSc6J1xcdTIyNDAnLCdWZXJ5VGhpblNwYWNlJzonXFx1MjAwQScsJ3Zmcic6J1xcdUQ4MzVcXHVERDMzJywnVmZyJzonXFx1RDgzNVxcdUREMTknLCd2bHRyaSc6J1xcdTIyQjInLCd2bnN1Yic6J1xcdTIyODJcXHUyMEQyJywndm5zdXAnOidcXHUyMjgzXFx1MjBEMicsJ3ZvcGYnOidcXHVEODM1XFx1REQ2NycsJ1ZvcGYnOidcXHVEODM1XFx1REQ0RCcsJ3Zwcm9wJzonXFx1MjIxRCcsJ3ZydHJpJzonXFx1MjJCMycsJ3ZzY3InOidcXHVEODM1XFx1RENDQicsJ1ZzY3InOidcXHVEODM1XFx1RENCMScsJ3ZzdWJuZSc6J1xcdTIyOEFcXHVGRTAwJywndnN1Ym5FJzonXFx1MkFDQlxcdUZFMDAnLCd2c3VwbmUnOidcXHUyMjhCXFx1RkUwMCcsJ3ZzdXBuRSc6J1xcdTJBQ0NcXHVGRTAwJywnVnZkYXNoJzonXFx1MjJBQScsJ3Z6aWd6YWcnOidcXHUyOTlBJywnd2NpcmMnOidcXHUwMTc1JywnV2NpcmMnOidcXHUwMTc0Jywnd2VkYmFyJzonXFx1MkE1RicsJ3dlZGdlJzonXFx1MjIyNycsJ1dlZGdlJzonXFx1MjJDMCcsJ3dlZGdlcSc6J1xcdTIyNTknLCd3ZWllcnAnOidcXHUyMTE4Jywnd2ZyJzonXFx1RDgzNVxcdUREMzQnLCdXZnInOidcXHVEODM1XFx1REQxQScsJ3dvcGYnOidcXHVEODM1XFx1REQ2OCcsJ1dvcGYnOidcXHVEODM1XFx1REQ0RScsJ3dwJzonXFx1MjExOCcsJ3dyJzonXFx1MjI0MCcsJ3dyZWF0aCc6J1xcdTIyNDAnLCd3c2NyJzonXFx1RDgzNVxcdURDQ0MnLCdXc2NyJzonXFx1RDgzNVxcdURDQjInLCd4Y2FwJzonXFx1MjJDMicsJ3hjaXJjJzonXFx1MjVFRicsJ3hjdXAnOidcXHUyMkMzJywneGR0cmknOidcXHUyNUJEJywneGZyJzonXFx1RDgzNVxcdUREMzUnLCdYZnInOidcXHVEODM1XFx1REQxQicsJ3hoYXJyJzonXFx1MjdGNycsJ3hoQXJyJzonXFx1MjdGQScsJ3hpJzonXFx1MDNCRScsJ1hpJzonXFx1MDM5RScsJ3hsYXJyJzonXFx1MjdGNScsJ3hsQXJyJzonXFx1MjdGOCcsJ3htYXAnOidcXHUyN0ZDJywneG5pcyc6J1xcdTIyRkInLCd4b2RvdCc6J1xcdTJBMDAnLCd4b3BmJzonXFx1RDgzNVxcdURENjknLCdYb3BmJzonXFx1RDgzNVxcdURENEYnLCd4b3BsdXMnOidcXHUyQTAxJywneG90aW1lJzonXFx1MkEwMicsJ3hyYXJyJzonXFx1MjdGNicsJ3hyQXJyJzonXFx1MjdGOScsJ3hzY3InOidcXHVEODM1XFx1RENDRCcsJ1hzY3InOidcXHVEODM1XFx1RENCMycsJ3hzcWN1cCc6J1xcdTJBMDYnLCd4dXBsdXMnOidcXHUyQTA0JywneHV0cmknOidcXHUyNUIzJywneHZlZSc6J1xcdTIyQzEnLCd4d2VkZ2UnOidcXHUyMkMwJywneWFjdXRlJzonXFx4RkQnLCdZYWN1dGUnOidcXHhERCcsJ3lhY3knOidcXHUwNDRGJywnWUFjeSc6J1xcdTA0MkYnLCd5Y2lyYyc6J1xcdTAxNzcnLCdZY2lyYyc6J1xcdTAxNzYnLCd5Y3knOidcXHUwNDRCJywnWWN5JzonXFx1MDQyQicsJ3llbic6J1xceEE1JywneWZyJzonXFx1RDgzNVxcdUREMzYnLCdZZnInOidcXHVEODM1XFx1REQxQycsJ3lpY3knOidcXHUwNDU3JywnWUljeSc6J1xcdTA0MDcnLCd5b3BmJzonXFx1RDgzNVxcdURENkEnLCdZb3BmJzonXFx1RDgzNVxcdURENTAnLCd5c2NyJzonXFx1RDgzNVxcdURDQ0UnLCdZc2NyJzonXFx1RDgzNVxcdURDQjQnLCd5dWN5JzonXFx1MDQ0RScsJ1lVY3knOidcXHUwNDJFJywneXVtbCc6J1xceEZGJywnWXVtbCc6J1xcdTAxNzgnLCd6YWN1dGUnOidcXHUwMTdBJywnWmFjdXRlJzonXFx1MDE3OScsJ3pjYXJvbic6J1xcdTAxN0UnLCdaY2Fyb24nOidcXHUwMTdEJywnemN5JzonXFx1MDQzNycsJ1pjeSc6J1xcdTA0MTcnLCd6ZG90JzonXFx1MDE3QycsJ1pkb3QnOidcXHUwMTdCJywnemVldHJmJzonXFx1MjEyOCcsJ1plcm9XaWR0aFNwYWNlJzonXFx1MjAwQicsJ3pldGEnOidcXHUwM0I2JywnWmV0YSc6J1xcdTAzOTYnLCd6ZnInOidcXHVEODM1XFx1REQzNycsJ1pmcic6J1xcdTIxMjgnLCd6aGN5JzonXFx1MDQzNicsJ1pIY3knOidcXHUwNDE2JywnemlncmFycic6J1xcdTIxREQnLCd6b3BmJzonXFx1RDgzNVxcdURENkInLCdab3BmJzonXFx1MjEyNCcsJ3pzY3InOidcXHVEODM1XFx1RENDRicsJ1pzY3InOidcXHVEODM1XFx1RENCNScsJ3p3aic6J1xcdTIwMEQnLCd6d25qJzonXFx1MjAwQyd9O1xuXHR2YXIgZGVjb2RlTWFwTGVnYWN5ID0geydhYWN1dGUnOidcXHhFMScsJ0FhY3V0ZSc6J1xceEMxJywnYWNpcmMnOidcXHhFMicsJ0FjaXJjJzonXFx4QzInLCdhY3V0ZSc6J1xceEI0JywnYWVsaWcnOidcXHhFNicsJ0FFbGlnJzonXFx4QzYnLCdhZ3JhdmUnOidcXHhFMCcsJ0FncmF2ZSc6J1xceEMwJywnYW1wJzonJicsJ0FNUCc6JyYnLCdhcmluZyc6J1xceEU1JywnQXJpbmcnOidcXHhDNScsJ2F0aWxkZSc6J1xceEUzJywnQXRpbGRlJzonXFx4QzMnLCdhdW1sJzonXFx4RTQnLCdBdW1sJzonXFx4QzQnLCdicnZiYXInOidcXHhBNicsJ2NjZWRpbCc6J1xceEU3JywnQ2NlZGlsJzonXFx4QzcnLCdjZWRpbCc6J1xceEI4JywnY2VudCc6J1xceEEyJywnY29weSc6J1xceEE5JywnQ09QWSc6J1xceEE5JywnY3VycmVuJzonXFx4QTQnLCdkZWcnOidcXHhCMCcsJ2RpdmlkZSc6J1xceEY3JywnZWFjdXRlJzonXFx4RTknLCdFYWN1dGUnOidcXHhDOScsJ2VjaXJjJzonXFx4RUEnLCdFY2lyYyc6J1xceENBJywnZWdyYXZlJzonXFx4RTgnLCdFZ3JhdmUnOidcXHhDOCcsJ2V0aCc6J1xceEYwJywnRVRIJzonXFx4RDAnLCdldW1sJzonXFx4RUInLCdFdW1sJzonXFx4Q0InLCdmcmFjMTInOidcXHhCRCcsJ2ZyYWMxNCc6J1xceEJDJywnZnJhYzM0JzonXFx4QkUnLCdndCc6Jz4nLCdHVCc6Jz4nLCdpYWN1dGUnOidcXHhFRCcsJ0lhY3V0ZSc6J1xceENEJywnaWNpcmMnOidcXHhFRScsJ0ljaXJjJzonXFx4Q0UnLCdpZXhjbCc6J1xceEExJywnaWdyYXZlJzonXFx4RUMnLCdJZ3JhdmUnOidcXHhDQycsJ2lxdWVzdCc6J1xceEJGJywnaXVtbCc6J1xceEVGJywnSXVtbCc6J1xceENGJywnbGFxdW8nOidcXHhBQicsJ2x0JzonPCcsJ0xUJzonPCcsJ21hY3InOidcXHhBRicsJ21pY3JvJzonXFx4QjUnLCdtaWRkb3QnOidcXHhCNycsJ25ic3AnOidcXHhBMCcsJ25vdCc6J1xceEFDJywnbnRpbGRlJzonXFx4RjEnLCdOdGlsZGUnOidcXHhEMScsJ29hY3V0ZSc6J1xceEYzJywnT2FjdXRlJzonXFx4RDMnLCdvY2lyYyc6J1xceEY0JywnT2NpcmMnOidcXHhENCcsJ29ncmF2ZSc6J1xceEYyJywnT2dyYXZlJzonXFx4RDInLCdvcmRmJzonXFx4QUEnLCdvcmRtJzonXFx4QkEnLCdvc2xhc2gnOidcXHhGOCcsJ09zbGFzaCc6J1xceEQ4Jywnb3RpbGRlJzonXFx4RjUnLCdPdGlsZGUnOidcXHhENScsJ291bWwnOidcXHhGNicsJ091bWwnOidcXHhENicsJ3BhcmEnOidcXHhCNicsJ3BsdXNtbic6J1xceEIxJywncG91bmQnOidcXHhBMycsJ3F1b3QnOidcIicsJ1FVT1QnOidcIicsJ3JhcXVvJzonXFx4QkInLCdyZWcnOidcXHhBRScsJ1JFRyc6J1xceEFFJywnc2VjdCc6J1xceEE3Jywnc2h5JzonXFx4QUQnLCdzdXAxJzonXFx4QjknLCdzdXAyJzonXFx4QjInLCdzdXAzJzonXFx4QjMnLCdzemxpZyc6J1xceERGJywndGhvcm4nOidcXHhGRScsJ1RIT1JOJzonXFx4REUnLCd0aW1lcyc6J1xceEQ3JywndWFjdXRlJzonXFx4RkEnLCdVYWN1dGUnOidcXHhEQScsJ3VjaXJjJzonXFx4RkInLCdVY2lyYyc6J1xceERCJywndWdyYXZlJzonXFx4RjknLCdVZ3JhdmUnOidcXHhEOScsJ3VtbCc6J1xceEE4JywndXVtbCc6J1xceEZDJywnVXVtbCc6J1xceERDJywneWFjdXRlJzonXFx4RkQnLCdZYWN1dGUnOidcXHhERCcsJ3llbic6J1xceEE1JywneXVtbCc6J1xceEZGJ307XG5cdHZhciBkZWNvZGVNYXBOdW1lcmljID0geycwJzonXFx1RkZGRCcsJzEyOCc6J1xcdTIwQUMnLCcxMzAnOidcXHUyMDFBJywnMTMxJzonXFx1MDE5MicsJzEzMic6J1xcdTIwMUUnLCcxMzMnOidcXHUyMDI2JywnMTM0JzonXFx1MjAyMCcsJzEzNSc6J1xcdTIwMjEnLCcxMzYnOidcXHUwMkM2JywnMTM3JzonXFx1MjAzMCcsJzEzOCc6J1xcdTAxNjAnLCcxMzknOidcXHUyMDM5JywnMTQwJzonXFx1MDE1MicsJzE0Mic6J1xcdTAxN0QnLCcxNDUnOidcXHUyMDE4JywnMTQ2JzonXFx1MjAxOScsJzE0Nyc6J1xcdTIwMUMnLCcxNDgnOidcXHUyMDFEJywnMTQ5JzonXFx1MjAyMicsJzE1MCc6J1xcdTIwMTMnLCcxNTEnOidcXHUyMDE0JywnMTUyJzonXFx1MDJEQycsJzE1Myc6J1xcdTIxMjInLCcxNTQnOidcXHUwMTYxJywnMTU1JzonXFx1MjAzQScsJzE1Nic6J1xcdTAxNTMnLCcxNTgnOidcXHUwMTdFJywnMTU5JzonXFx1MDE3OCd9O1xuXHR2YXIgaW52YWxpZFJlZmVyZW5jZUNvZGVQb2ludHMgPSBbMSwyLDMsNCw1LDYsNyw4LDExLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDEyNywxMjgsMTI5LDEzMCwxMzEsMTMyLDEzMywxMzQsMTM1LDEzNiwxMzcsMTM4LDEzOSwxNDAsMTQxLDE0MiwxNDMsMTQ0LDE0NSwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNTUsMTU2LDE1NywxNTgsMTU5LDY0OTc2LDY0OTc3LDY0OTc4LDY0OTc5LDY0OTgwLDY0OTgxLDY0OTgyLDY0OTgzLDY0OTg0LDY0OTg1LDY0OTg2LDY0OTg3LDY0OTg4LDY0OTg5LDY0OTkwLDY0OTkxLDY0OTkyLDY0OTkzLDY0OTk0LDY0OTk1LDY0OTk2LDY0OTk3LDY0OTk4LDY0OTk5LDY1MDAwLDY1MDAxLDY1MDAyLDY1MDAzLDY1MDA0LDY1MDA1LDY1MDA2LDY1MDA3LDY1NTM0LDY1NTM1LDEzMTA3MCwxMzEwNzEsMTk2NjA2LDE5NjYwNywyNjIxNDIsMjYyMTQzLDMyNzY3OCwzMjc2NzksMzkzMjE0LDM5MzIxNSw0NTg3NTAsNDU4NzUxLDUyNDI4Niw1MjQyODcsNTg5ODIyLDU4OTgyMyw2NTUzNTgsNjU1MzU5LDcyMDg5NCw3MjA4OTUsNzg2NDMwLDc4NjQzMSw4NTE5NjYsODUxOTY3LDkxNzUwMiw5MTc1MDMsOTgzMDM4LDk4MzAzOSwxMDQ4NTc0LDEwNDg1NzUsMTExNDExMCwxMTE0MTExXTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuXHR2YXIgb2JqZWN0ID0ge307XG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIGhhcyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHlOYW1lKSB7XG5cdFx0cmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eU5hbWUpO1xuXHR9O1xuXG5cdHZhciBjb250YWlucyA9IGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSkge1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdGlmIChhcnJheVtpbmRleF0gPT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHR2YXIgbWVyZ2UgPSBmdW5jdGlvbihvcHRpb25zLCBkZWZhdWx0cykge1xuXHRcdGlmICghb3B0aW9ucykge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRzO1xuXHRcdH1cblx0XHR2YXIgcmVzdWx0ID0ge307XG5cdFx0dmFyIGtleTtcblx0XHRmb3IgKGtleSBpbiBkZWZhdWx0cykge1xuXHRcdFx0Ly8gQSBgaGFzT3duUHJvcGVydHlgIGNoZWNrIGlzIG5vdCBuZWVkZWQgaGVyZSwgc2luY2Ugb25seSByZWNvZ25pemVkXG5cdFx0XHQvLyBvcHRpb24gbmFtZXMgYXJlIHVzZWQgYW55d2F5LiBBbnkgb3RoZXJzIGFyZSBpZ25vcmVkLlxuXHRcdFx0cmVzdWx0W2tleV0gPSBoYXMob3B0aW9ucywga2V5KSA/IG9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Ly8gTW9kaWZpZWQgdmVyc2lvbiBvZiBgdWNzMmVuY29kZWA7IHNlZSBodHRwczovL210aHMuYmUvcHVueWNvZGUuXG5cdHZhciBjb2RlUG9pbnRUb1N5bWJvbCA9IGZ1bmN0aW9uKGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdGlmICgoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB8fCBjb2RlUG9pbnQgPiAweDEwRkZGRikge1xuXHRcdFx0Ly8gU2VlIGlzc3VlICM0OlxuXHRcdFx0Ly8gXHUyMDFDT3RoZXJ3aXNlLCBpZiB0aGUgbnVtYmVyIGlzIGluIHRoZSByYW5nZSAweEQ4MDAgdG8gMHhERkZGIG9yIGlzXG5cdFx0XHQvLyBncmVhdGVyIHRoYW4gMHgxMEZGRkYsIHRoZW4gdGhpcyBpcyBhIHBhcnNlIGVycm9yLiBSZXR1cm4gYSBVK0ZGRkRcblx0XHRcdC8vIFJFUExBQ0VNRU5UIENIQVJBQ1RFUi5cdTIwMURcblx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0cGFyc2VFcnJvcignY2hhcmFjdGVyIHJlZmVyZW5jZSBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSBVbmljb2RlIHJhbmdlJyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJ1xcdUZGRkQnO1xuXHRcdH1cblx0XHRpZiAoaGFzKGRlY29kZU1hcE51bWVyaWMsIGNvZGVQb2ludCkpIHtcblx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0cGFyc2VFcnJvcignZGlzYWxsb3dlZCBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZGVjb2RlTWFwTnVtZXJpY1tjb2RlUG9pbnRdO1xuXHRcdH1cblx0XHRpZiAoc3RyaWN0ICYmIGNvbnRhaW5zKGludmFsaWRSZWZlcmVuY2VDb2RlUG9pbnRzLCBjb2RlUG9pbnQpKSB7XG5cdFx0XHRwYXJzZUVycm9yKCdkaXNhbGxvd2VkIGNoYXJhY3RlciByZWZlcmVuY2UnKTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuXHRcdFx0Y29kZVBvaW50IC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH07XG5cblx0dmFyIGhleEVzY2FwZSA9IGZ1bmN0aW9uKGNvZGVQb2ludCkge1xuXHRcdHJldHVybiAnJiN4JyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArICc7Jztcblx0fTtcblxuXHR2YXIgZGVjRXNjYXBlID0gZnVuY3Rpb24oY29kZVBvaW50KSB7XG5cdFx0cmV0dXJuICcmIycgKyBjb2RlUG9pbnQgKyAnOyc7XG5cdH07XG5cblx0dmFyIHBhcnNlRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG5cdFx0dGhyb3cgRXJyb3IoJ1BhcnNlIGVycm9yOiAnICsgbWVzc2FnZSk7XG5cdH07XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIGVuY29kZSA9IGZ1bmN0aW9uKHN0cmluZywgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCBlbmNvZGUub3B0aW9ucyk7XG5cdFx0dmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuXHRcdGlmIChzdHJpY3QgJiYgcmVnZXhJbnZhbGlkUmF3Q29kZVBvaW50LnRlc3Qoc3RyaW5nKSkge1xuXHRcdFx0cGFyc2VFcnJvcignZm9yYmlkZGVuIGNvZGUgcG9pbnQnKTtcblx0XHR9XG5cdFx0dmFyIGVuY29kZUV2ZXJ5dGhpbmcgPSBvcHRpb25zLmVuY29kZUV2ZXJ5dGhpbmc7XG5cdFx0dmFyIHVzZU5hbWVkUmVmZXJlbmNlcyA9IG9wdGlvbnMudXNlTmFtZWRSZWZlcmVuY2VzO1xuXHRcdHZhciBhbGxvd1Vuc2FmZVN5bWJvbHMgPSBvcHRpb25zLmFsbG93VW5zYWZlU3ltYm9scztcblx0XHR2YXIgZXNjYXBlQ29kZVBvaW50ID0gb3B0aW9ucy5kZWNpbWFsID8gZGVjRXNjYXBlIDogaGV4RXNjYXBlO1xuXG5cdFx0dmFyIGVzY2FwZUJtcFN5bWJvbCA9IGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIGVzY2FwZUNvZGVQb2ludChzeW1ib2wuY2hhckNvZGVBdCgwKSk7XG5cdFx0fTtcblxuXHRcdGlmIChlbmNvZGVFdmVyeXRoaW5nKSB7XG5cdFx0XHQvLyBFbmNvZGUgQVNDSUkgc3ltYm9scy5cblx0XHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4QXNjaWlXaGl0ZWxpc3QsIGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0XHQvLyBVc2UgbmFtZWQgcmVmZXJlbmNlcyBpZiByZXF1ZXN0ZWQgJiBwb3NzaWJsZS5cblx0XHRcdFx0aWYgKHVzZU5hbWVkUmVmZXJlbmNlcyAmJiBoYXMoZW5jb2RlTWFwLCBzeW1ib2wpKSB7XG5cdFx0XHRcdFx0cmV0dXJuICcmJyArIGVuY29kZU1hcFtzeW1ib2xdICsgJzsnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBlc2NhcGVCbXBTeW1ib2woc3ltYm9sKTtcblx0XHRcdH0pO1xuXHRcdFx0Ly8gU2hvcnRlbiBhIGZldyBlc2NhcGVzIHRoYXQgcmVwcmVzZW50IHR3byBzeW1ib2xzLCBvZiB3aGljaCBhdCBsZWFzdCBvbmVcblx0XHRcdC8vIGlzIHdpdGhpbiB0aGUgQVNDSUkgcmFuZ2UuXG5cdFx0XHRpZiAodXNlTmFtZWRSZWZlcmVuY2VzKSB7XG5cdFx0XHRcdHN0cmluZyA9IHN0cmluZ1xuXHRcdFx0XHRcdC5yZXBsYWNlKC8mZ3Q7XFx1MjBEMi9nLCAnJm52Z3Q7Jylcblx0XHRcdFx0XHQucmVwbGFjZSgvJmx0O1xcdTIwRDIvZywgJyZudmx0OycpXG5cdFx0XHRcdFx0LnJlcGxhY2UoLyYjeDY2OyYjeDZBOy9nLCAnJmZqbGlnOycpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRW5jb2RlIG5vbi1BU0NJSSBzeW1ib2xzLlxuXHRcdFx0aWYgKHVzZU5hbWVkUmVmZXJlbmNlcykge1xuXHRcdFx0XHQvLyBFbmNvZGUgbm9uLUFTQ0lJIHN5bWJvbHMgdGhhdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIG5hbWVkIHJlZmVyZW5jZS5cblx0XHRcdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhFbmNvZGVOb25Bc2NpaSwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRcdFx0Ly8gTm90ZTogdGhlcmUgaXMgbm8gbmVlZCB0byBjaGVjayBgaGFzKGVuY29kZU1hcCwgc3RyaW5nKWAgaGVyZS5cblx0XHRcdFx0XHRyZXR1cm4gJyYnICsgZW5jb2RlTWFwW3N0cmluZ10gKyAnOyc7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTm90ZTogYW55IHJlbWFpbmluZyBub24tQVNDSUkgc3ltYm9scyBhcmUgaGFuZGxlZCBvdXRzaWRlIG9mIHRoZSBgaWZgLlxuXHRcdH0gZWxzZSBpZiAodXNlTmFtZWRSZWZlcmVuY2VzKSB7XG5cdFx0XHQvLyBBcHBseSBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcy5cblx0XHRcdC8vIEVuY29kZSBgPD5cIicmYCB1c2luZyBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcy5cblx0XHRcdGlmICghYWxsb3dVbnNhZmVTeW1ib2xzKSB7XG5cdFx0XHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4RXNjYXBlLCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyYnICsgZW5jb2RlTWFwW3N0cmluZ10gKyAnOyc7IC8vIG5vIG5lZWQgdG8gY2hlY2sgYGhhcygpYCBoZXJlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly8gU2hvcnRlbiBlc2NhcGVzIHRoYXQgcmVwcmVzZW50IHR3byBzeW1ib2xzLCBvZiB3aGljaCBhdCBsZWFzdCBvbmUgaXNcblx0XHRcdC8vIGA8PlwiJyZgLlxuXHRcdFx0c3RyaW5nID0gc3RyaW5nXG5cdFx0XHRcdC5yZXBsYWNlKC8mZ3Q7XFx1MjBEMi9nLCAnJm52Z3Q7Jylcblx0XHRcdFx0LnJlcGxhY2UoLyZsdDtcXHUyMEQyL2csICcmbnZsdDsnKTtcblx0XHRcdC8vIEVuY29kZSBub24tQVNDSUkgc3ltYm9scyB0aGF0IGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgbmFtZWQgcmVmZXJlbmNlLlxuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhFbmNvZGVOb25Bc2NpaSwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRcdC8vIE5vdGU6IHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hlY2sgYGhhcyhlbmNvZGVNYXAsIHN0cmluZylgIGhlcmUuXG5cdFx0XHRcdHJldHVybiAnJicgKyBlbmNvZGVNYXBbc3RyaW5nXSArICc7Jztcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoIWFsbG93VW5zYWZlU3ltYm9scykge1xuXHRcdFx0Ly8gRW5jb2RlIGA8PlwiJyZgIHVzaW5nIGhleGFkZWNpbWFsIGVzY2FwZXMsIG5vdyB0aGF0IHRoZXlcdTIwMTlyZSBub3QgaGFuZGxlZFxuXHRcdFx0Ly8gdXNpbmcgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMuXG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleEVzY2FwZSwgZXNjYXBlQm1wU3ltYm9sKTtcblx0XHR9XG5cdFx0cmV0dXJuIHN0cmluZ1xuXHRcdFx0Ly8gRW5jb2RlIGFzdHJhbCBzeW1ib2xzLlxuXHRcdFx0LnJlcGxhY2UocmVnZXhBc3RyYWxTeW1ib2xzLCBmdW5jdGlvbigkMCkge1xuXHRcdFx0XHQvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcblx0XHRcdFx0dmFyIGhpZ2ggPSAkMC5jaGFyQ29kZUF0KDApO1xuXHRcdFx0XHR2YXIgbG93ID0gJDAuY2hhckNvZGVBdCgxKTtcblx0XHRcdFx0dmFyIGNvZGVQb2ludCA9IChoaWdoIC0gMHhEODAwKSAqIDB4NDAwICsgbG93IC0gMHhEQzAwICsgMHgxMDAwMDtcblx0XHRcdFx0cmV0dXJuIGVzY2FwZUNvZGVQb2ludChjb2RlUG9pbnQpO1xuXHRcdFx0fSlcblx0XHRcdC8vIEVuY29kZSBhbnkgcmVtYWluaW5nIEJNUCBzeW1ib2xzIHRoYXQgYXJlIG5vdCBwcmludGFibGUgQVNDSUkgc3ltYm9sc1xuXHRcdFx0Ly8gdXNpbmcgYSBoZXhhZGVjaW1hbCBlc2NhcGUuXG5cdFx0XHQucmVwbGFjZShyZWdleEJtcFdoaXRlbGlzdCwgZXNjYXBlQm1wU3ltYm9sKTtcblx0fTtcblx0Ly8gRXhwb3NlIGRlZmF1bHQgb3B0aW9ucyAoc28gdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBnbG9iYWxseSkuXG5cdGVuY29kZS5vcHRpb25zID0ge1xuXHRcdCdhbGxvd1Vuc2FmZVN5bWJvbHMnOiBmYWxzZSxcblx0XHQnZW5jb2RlRXZlcnl0aGluZyc6IGZhbHNlLFxuXHRcdCdzdHJpY3QnOiBmYWxzZSxcblx0XHQndXNlTmFtZWRSZWZlcmVuY2VzJzogZmFsc2UsXG5cdFx0J2RlY2ltYWwnIDogZmFsc2Vcblx0fTtcblxuXHR2YXIgZGVjb2RlID0gZnVuY3Rpb24oaHRtbCwgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCBkZWNvZGUub3B0aW9ucyk7XG5cdFx0dmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuXHRcdGlmIChzdHJpY3QgJiYgcmVnZXhJbnZhbGlkRW50aXR5LnRlc3QoaHRtbCkpIHtcblx0XHRcdHBhcnNlRXJyb3IoJ21hbGZvcm1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XG5cdFx0fVxuXHRcdHJldHVybiBodG1sLnJlcGxhY2UocmVnZXhEZWNvZGUsIGZ1bmN0aW9uKCQwLCAkMSwgJDIsICQzLCAkNCwgJDUsICQ2LCAkNywgJDgpIHtcblx0XHRcdHZhciBjb2RlUG9pbnQ7XG5cdFx0XHR2YXIgc2VtaWNvbG9uO1xuXHRcdFx0dmFyIGRlY0RpZ2l0cztcblx0XHRcdHZhciBoZXhEaWdpdHM7XG5cdFx0XHR2YXIgcmVmZXJlbmNlO1xuXHRcdFx0dmFyIG5leHQ7XG5cblx0XHRcdGlmICgkMSkge1xuXHRcdFx0XHRyZWZlcmVuY2UgPSAkMTtcblx0XHRcdFx0Ly8gTm90ZTogdGhlcmUgaXMgbm8gbmVlZCB0byBjaGVjayBgaGFzKGRlY29kZU1hcCwgcmVmZXJlbmNlKWAuXG5cdFx0XHRcdHJldHVybiBkZWNvZGVNYXBbcmVmZXJlbmNlXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCQyKSB7XG5cdFx0XHRcdC8vIERlY29kZSBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcyB3aXRob3V0IHRyYWlsaW5nIGA7YCwgZS5nLiBgJmFtcGAuXG5cdFx0XHRcdC8vIFRoaXMgaXMgb25seSBhIHBhcnNlIGVycm9yIGlmIGl0IGdldHMgY29udmVydGVkIHRvIGAmYCwgb3IgaWYgaXQgaXNcblx0XHRcdFx0Ly8gZm9sbG93ZWQgYnkgYD1gIGluIGFuIGF0dHJpYnV0ZSBjb250ZXh0LlxuXHRcdFx0XHRyZWZlcmVuY2UgPSAkMjtcblx0XHRcdFx0bmV4dCA9ICQzO1xuXHRcdFx0XHRpZiAobmV4dCAmJiBvcHRpb25zLmlzQXR0cmlidXRlVmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoc3RyaWN0ICYmIG5leHQgPT0gJz0nKSB7XG5cdFx0XHRcdFx0XHRwYXJzZUVycm9yKCdgJmAgZGlkIG5vdCBzdGFydCBhIGNoYXJhY3RlciByZWZlcmVuY2UnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuICQwO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0XHRcdHBhcnNlRXJyb3IoXG5cdFx0XHRcdFx0XHRcdCduYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHdhcyBub3QgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIE5vdGU6IHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hlY2sgYGhhcyhkZWNvZGVNYXBMZWdhY3ksIHJlZmVyZW5jZSlgLlxuXHRcdFx0XHRcdHJldHVybiBkZWNvZGVNYXBMZWdhY3lbcmVmZXJlbmNlXSArIChuZXh0IHx8ICcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoJDQpIHtcblx0XHRcdFx0Ly8gRGVjb2RlIGRlY2ltYWwgZXNjYXBlcywgZS5nLiBgJiMxMTk1NTg7YC5cblx0XHRcdFx0ZGVjRGlnaXRzID0gJDQ7XG5cdFx0XHRcdHNlbWljb2xvbiA9ICQ1O1xuXHRcdFx0XHRpZiAoc3RyaWN0ICYmICFzZW1pY29sb24pIHtcblx0XHRcdFx0XHRwYXJzZUVycm9yKCdjaGFyYWN0ZXIgcmVmZXJlbmNlIHdhcyBub3QgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvZGVQb2ludCA9IHBhcnNlSW50KGRlY0RpZ2l0cywgMTApO1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50VG9TeW1ib2woY29kZVBvaW50LCBzdHJpY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoJDYpIHtcblx0XHRcdFx0Ly8gRGVjb2RlIGhleGFkZWNpbWFsIGVzY2FwZXMsIGUuZy4gYCYjeDFEMzA2O2AuXG5cdFx0XHRcdGhleERpZ2l0cyA9ICQ2O1xuXHRcdFx0XHRzZW1pY29sb24gPSAkNztcblx0XHRcdFx0aWYgKHN0cmljdCAmJiAhc2VtaWNvbG9uKSB7XG5cdFx0XHRcdFx0cGFyc2VFcnJvcignY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb2RlUG9pbnQgPSBwYXJzZUludChoZXhEaWdpdHMsIDE2KTtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludFRvU3ltYm9sKGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgd2VcdTIwMTlyZSBzdGlsbCBoZXJlLCBgaWYgKCQ3KWAgaXMgaW1wbGllZDsgaXRcdTIwMTlzIGFuIGFtYmlndW91c1xuXHRcdFx0Ly8gYW1wZXJzYW5kIGZvciBzdXJlLiBodHRwczovL210aHMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHNcblx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0cGFyc2VFcnJvcihcblx0XHRcdFx0XHQnbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJDA7XG5cdFx0fSk7XG5cdH07XG5cdC8vIEV4cG9zZSBkZWZhdWx0IG9wdGlvbnMgKHNvIHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gZ2xvYmFsbHkpLlxuXHRkZWNvZGUub3B0aW9ucyA9IHtcblx0XHQnaXNBdHRyaWJ1dGVWYWx1ZSc6IGZhbHNlLFxuXHRcdCdzdHJpY3QnOiBmYWxzZVxuXHR9O1xuXG5cdHZhciBlc2NhcGUgPSBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVnZXhFc2NhcGUsIGZ1bmN0aW9uKCQwKSB7XG5cdFx0XHQvLyBOb3RlOiB0aGVyZSBpcyBubyBuZWVkIHRvIGNoZWNrIGBoYXMoZXNjYXBlTWFwLCAkMClgIGhlcmUuXG5cdFx0XHRyZXR1cm4gZXNjYXBlTWFwWyQwXTtcblx0XHR9KTtcblx0fTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgaGUgPSB7XG5cdFx0J3ZlcnNpb24nOiAnMS4yLjAnLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZXNjYXBlJzogZXNjYXBlLFxuXHRcdCd1bmVzY2FwZSc6IGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGhlO1xuXHRcdH0pO1xuXHR9XHRlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiAhZnJlZUV4cG9ydHMubm9kZVR5cGUpIHtcblx0XHRpZiAoZnJlZU1vZHVsZSkgeyAvLyBpbiBOb2RlLmpzLCBpby5qcywgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBoZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yICh2YXIga2V5IGluIGhlKSB7XG5cdFx0XHRcdGhhcyhoZSwga2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IGhlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QuaGUgPSBoZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsICJpbXBvcnQge1xuICAgIGFkZEljb24sXG4gICAgQ29tcG9uZW50LFxuICAgIE5vdGljZSxcbiAgICBQbGF0Zm9ybSxcbiAgICBQbHVnaW4sXG4gICAgVmF1bHQsXG4gICAgV29ya3NwYWNlTGVhZlxufSBmcm9tIFwib2JzaWRpYW5cIjtcblxuaW1wb3J0IEZhbnRhc3lDYWxlbmRhclNldHRpbmdzIGZyb20gXCIuL3NldHRpbmdzL3NldHRpbmdzXCI7XG5cbmltcG9ydCB0eXBlIHsgQ2FsZW5kYXIsIEV2ZW50LCBGYW50YXN5Q2FsZW5kYXJEYXRhIH0gZnJvbSBcIi4vQHR5cGVzXCI7XG5cbmltcG9ydCBGYW50YXN5Q2FsZW5kYXJWaWV3LCB7XG4gICAgVklFV19UWVBFLFxuICAgIEZVTExfVklFV1xuICAgIC8qIEZ1bGxDYWxlbmRhclZpZXcgKi9cbn0gZnJvbSBcIi4vdmlldy92aWV3XCI7XG5cbmltcG9ydCBcIi4vbWFpbi5jc3NcIjtcbmltcG9ydCB7IENhbGVuZGFyRXZlbnRUcmVlLCBXYXRjaGVyIH0gZnJvbSBcIi4vd2F0Y2hlci93YXRjaGVyXCI7XG5pbXBvcnQgeyBBUEkgfSBmcm9tIFwiLi9hcGkvYXBpXCI7XG5pbXBvcnQgY29weSBmcm9tIFwiZmFzdC1jb3B5XCI7XG5cbmRlY2xhcmUgbW9kdWxlIFwib2JzaWRpYW5cIiB7XG4gICAgaW50ZXJmYWNlIFdvcmtzcGFjZSB7XG4gICAgICAgIG9uKG5hbWU6IFwiZmFudGFzeS1jYWxlbmRhcnMtdXBkYXRlZFwiLCBjYWxsYmFjazogKCkgPT4gYW55KTogRXZlbnRSZWY7XG4gICAgICAgIG9uKFxuICAgICAgICAgICAgbmFtZTogXCJmYW50YXN5LWNhbGVuZGFycy1ldmVudC11cGRhdGVcIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiAodHJlZTogQ2FsZW5kYXJFdmVudFRyZWUpID0+IGFueVxuICAgICAgICApOiBFdmVudFJlZjtcbiAgICAgICAgb24oXG4gICAgICAgICAgICBuYW1lOiBcImZhbnRhc3ktY2FsZW5kYXItc2V0dGluZ3MtY2hhbmdlXCIsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gYW55XG4gICAgICAgICk6IEV2ZW50UmVmO1xuICAgICAgICB0cmlnZ2VyKG5hbWU6IFwiZmFudGFzeS1jYWxlbmRhcnMtdXBkYXRlZFwiKTogdm9pZDtcbiAgICAgICAgdHJpZ2dlcihuYW1lOiBcImZhbnRhc3ktY2FsZW5kYXItc2V0dGluZ3MtY2hhbmdlXCIpOiB2b2lkO1xuICAgICAgICB0cmlnZ2VyKFxuICAgICAgICAgICAgbmFtZTogXCJmYW50YXN5LWNhbGVuZGFycy1ldmVudC11cGRhdGVcIixcbiAgICAgICAgICAgIHRyZWU6IENhbGVuZGFyRXZlbnRUcmVlXG4gICAgICAgICk6IHZvaWQ7XG4gICAgICAgIHRyaWdnZXIoXG4gICAgICAgICAgICBuYW1lOiBcImxpbmstaG92ZXJcIixcbiAgICAgICAgICAgIHBvcG92ZXI6IGFueSwgLy9ob3ZlciBwb3BvdmVyLCBidXQgZG9uJ3QgbmVlZFxuICAgICAgICAgICAgdGFyZ2V0OiBIVE1MRWxlbWVudCwgLy90YXJnZXRFbFxuICAgICAgICAgICAgbm90ZTogc3RyaW5nLCAvL2xpbmtUZXh0XG4gICAgICAgICAgICBzb3VyY2U6IHN0cmluZyAvL3NvdXJjZVxuICAgICAgICApOiB2b2lkO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgQXBwIHtcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgZ2V0UGx1Z2luKHBsdWdpbjogXCJvYnNpZGlhbi10aW1lbGluZXNcIik6IHtcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZVRhZzogc3RyaW5nO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IE1PRElGSUVSX0tFWSA9IFBsYXRmb3JtLmlzTWFjT1MgPyBcIk1ldGFcIiA6IFwiQ29udHJvbFwiO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DQUxFTkRBUjogQ2FsZW5kYXIgPSB7XG4gICAgbmFtZTogbnVsbCxcbiAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICBpZDogbnVsbCxcbiAgICBzdGF0aWM6IHtcbiAgICAgICAgaW5jcmVtZW50RGF5OiBmYWxzZSxcbiAgICAgICAgZmlyc3RXZWVrRGF5OiBudWxsLFxuICAgICAgICBvdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IFtdLFxuICAgICAgICBtb250aHM6IFtdLFxuXG4gICAgICAgIG1vb25zOiBbXSxcbiAgICAgICAgZGlzcGxheU1vb25zOiB0cnVlLFxuICAgICAgICBkaXNwbGF5RGF5TnVtYmVyOiBmYWxzZSxcbiAgICAgICAgbGVhcERheXM6IFtdLFxuICAgICAgICBlcmFzOiBbXVxuICAgIH0sXG4gICAgY3VycmVudDoge1xuICAgICAgICB5ZWFyOiAxLFxuICAgICAgICBtb250aDogbnVsbCxcbiAgICAgICAgZGF5OiBudWxsXG4gICAgfSxcbiAgICBldmVudHM6IFtdLFxuICAgIGNhdGVnb3JpZXM6IFtdXG59O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9EQVRBOiBGYW50YXN5Q2FsZW5kYXJEYXRhID0ge1xuICAgIGNhbGVuZGFyczogW10sXG4gICAgY3VycmVudENhbGVuZGFyOiBudWxsLFxuICAgIGRlZmF1bHRDYWxlbmRhcjogbnVsbCxcbiAgICBldmVudFByZXZpZXc6IGZhbHNlLFxuICAgIGNvbmZpZ0RpcmVjdG9yeTogbnVsbCxcbiAgICBwYXRoOiBcIi9cIixcbiAgICBwYXJzZURhdGVzOiBmYWxzZSxcbiAgICBkYXRlRm9ybWF0OiBcIllZWVktTU0tRERcIixcbiAgICBkYWlseU5vdGVzOiBmYWxzZSxcbiAgICB2ZXJzaW9uOiB7XG4gICAgICAgIG1ham9yOiBudWxsLFxuICAgICAgICBtaW5vcjogbnVsbCxcbiAgICAgICAgcGF0Y2g6IG51bGxcbiAgICB9LFxuICAgIHN1cHBvcnRUaW1lbGluZXM6IGZhbHNlLFxuICAgIHRpbWVsaW5lVGFnOiBcIiN0aW1lbGluZVwiLFxuICAgIHN5bmNUaW1lbGluZXM6IHRydWUsXG4gICAgYXV0b1BhcnNlOiB0cnVlLFxuICAgIHNldHRpbmdzVG9nZ2xlU3RhdGU6IHtcbiAgICAgICAgY2FsZW5kYXJzOiBmYWxzZSxcbiAgICAgICAgZXZlbnRzOiBmYWxzZVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZhbnRhc3lDYWxlbmRhciBleHRlbmRzIFBsdWdpbiB7XG4gICAgYXBpID0gbmV3IEFQSSh0aGlzKTtcbiAgICBhc3luYyBhZGROZXdDYWxlbmRhcihjYWxlbmRhcjogQ2FsZW5kYXIpIHtcbiAgICAgICAgdGhpcy5kYXRhLmNhbGVuZGFycy5wdXNoKHsgLi4uY2FsZW5kYXIgfSk7XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmRlZmF1bHRDYWxlbmRhcikge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmRlZmF1bHRDYWxlbmRhciA9IGNhbGVuZGFyLmlkO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZUNhbGVuZGFyKCk7XG4gICAgICAgIC8qIHRoaXMud2F0Y2hlci5yZWdpc3RlckNhbGVuZGFyKGNhbGVuZGFyKTsgKi9cbiAgICB9XG4gICAgZGF0YTogRmFudGFzeUNhbGVuZGFyRGF0YTtcbiAgICB3YXRjaGVyID0gbmV3IFdhdGNoZXIodGhpcyk7XG4gICAgZ2V0IGN1cnJlbnRDYWxlbmRhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5jYWxlbmRhcnMuZmluZChcbiAgICAgICAgICAgIChjKSA9PiBjLmlkID09IHRoaXMuZGF0YS5jdXJyZW50Q2FsZW5kYXJcbiAgICAgICAgKTtcbiAgICB9XG4gICAgZ2V0IGNhblVzZURhaWx5Tm90ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhaWx5Tm90ZXMuX2xvYWRlZDtcbiAgICB9XG4gICAgZ2V0IGRhaWx5Tm90ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5pbnRlcm5hbFBsdWdpbnMuZ2V0UGx1Z2luQnlJZChcImRhaWx5LW5vdGVzXCIpO1xuICAgIH1cbiAgICBnZXQgY2FuVXNlVGltZWxpbmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJvYnNpZGlhbi10aW1lbGluZXNcIikgIT0gbnVsbDtcbiAgICB9XG4gICAgZ2V0IHN5bmNUaW1lbGluZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuc3luY1RpbWVsaW5lcyAmJiB0aGlzLmNhblVzZVRpbWVsaW5lcztcbiAgICB9XG4gICAgZ2V0IHRpbWVsaW5lVGFnKCkge1xuICAgICAgICBpZiAodGhpcy5zeW5jVGltZWxpbmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJvYnNpZGlhbi10aW1lbGluZXNcIikuc2V0dGluZ3NcbiAgICAgICAgICAgICAgICAudGltZWxpbmVUYWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnRpbWVsaW5lVGFnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBmb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodGhpcy5kYXRhLmRhaWx5Tm90ZXMgJiYgdGhpcy5jYW5Vc2VEYWlseU5vdGVzXG4gICAgICAgICAgICAgICAgPyB0aGlzLmRhaWx5Tm90ZXMuaW5zdGFuY2Uub3B0aW9ucy5mb3JtYXRcbiAgICAgICAgICAgICAgICA6IHRoaXMuZGF0YS5kYXRlRm9ybWF0KSA/PyBcIllZWVktTU0tRERcIlxuICAgICAgICApO1xuICAgIH1cbiAgICBnZXQgZGVmYXVsdENhbGVuZGFyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5kYXRhLmNhbGVuZGFycy5maW5kKFxuICAgICAgICAgICAgICAgIChjKSA9PiBjLmlkID09IHRoaXMuZGF0YS5kZWZhdWx0Q2FsZW5kYXJcbiAgICAgICAgICAgICkgPz8gdGhpcy5kYXRhLmNhbGVuZGFyc1swXVxuICAgICAgICApO1xuICAgIH1cbiAgICBnZXQgdmlldygpIHtcbiAgICAgICAgY29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEUpO1xuICAgICAgICBjb25zdCBsZWFmID0gbGVhdmVzLmxlbmd0aCA/IGxlYXZlc1swXSA6IG51bGw7XG4gICAgICAgIGlmIChsZWFmICYmIGxlYWYudmlldyAmJiBsZWFmLnZpZXcgaW5zdGFuY2VvZiBGYW50YXN5Q2FsZW5kYXJWaWV3KVxuICAgICAgICAgICAgcmV0dXJuIGxlYWYudmlldztcbiAgICB9XG4gICAgZ2V0IGZ1bGwoKSB7XG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoRlVMTF9WSUVXKTtcbiAgICAgICAgY29uc3QgbGVhZiA9IGxlYXZlcy5sZW5ndGggPyBsZWF2ZXNbMF0gOiBudWxsO1xuICAgICAgICBpZiAobGVhZiAmJiBsZWFmLnZpZXcgJiYgbGVhZi52aWV3IGluc3RhbmNlb2YgRmFudGFzeUNhbGVuZGFyVmlldylcbiAgICAgICAgICAgIHJldHVybiBsZWFmLnZpZXc7XG4gICAgfVxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJMb2FkaW5nIEZhbnRhc3kgQ2FsZW5kYXJzIHZcIiArIHRoaXMubWFuaWZlc3QudmVyc2lvbik7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgICAgICB0aGlzLndhdGNoZXIubG9hZCgpO1xuXG4gICAgICAgIGFkZEljb24oXG4gICAgICAgICAgICBcImZjLW1vb25cIixcbiAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwibW9vblwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtbW9vbiBmYS13LTE2XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTI3OS4xMzUgNTEyYzc4Ljc1NiAwIDE1MC45ODItMzUuODA0IDE5OC44NDQtOTQuNzc1IDI4LjI3LTM0LjgzMS0yLjU1OC04NS43MjItNDYuMjQ5LTc3LjQwMS04Mi4zNDggMTUuNjgzLTE1OC4yNzItNDcuMjY4LTE1OC4yNzItMTMwLjc5MiAwLTQ4LjQyNCAyNi4wNi05Mi4yOTIgNjcuNDM0LTExNS44MzYgMzguNzQ1LTIyLjA1IDI4Ljk5OS04MC43ODgtMTUuMDIyLTg4LjkxOUEyNTcuOTM2IDI1Ny45MzYgMCAwIDAgMjc5LjEzNSAwYy0xNDEuMzYgMC0yNTYgMTE0LjU3NS0yNTYgMjU2IDAgMTQxLjM2IDExNC41NzYgMjU2IDI1NiAyNTZ6bTAtNDY0YzEyLjk4NSAwIDI1LjY4OSAxLjIwMSAzOC4wMTYgMy40NzgtNTQuNzYgMzEuMTYzLTkxLjY5MyA5MC4wNDItOTEuNjkzIDE1Ny41NTQgMCAxMTMuODQ4IDEwMy42NDEgMTk5LjIgMjE1LjI1MiAxNzcuOTQ0QzQwMi41NzQgNDMzLjk2NCAzNDQuMzY2IDQ2NCAyNzkuMTM1IDQ2NGMtMTE0Ljg3NSAwLTIwOC05My4xMjUtMjA4LTIwOHM5My4xMjUtMjA4IDIwOC0yMDh6XCIvPjwvc3ZnPmBcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEZhbnRhc3lDYWxlbmRhclNldHRpbmdzKHRoaXMpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICAgICAgICBWSUVXX1RZUEUsXG4gICAgICAgICAgICAobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IEZhbnRhc3lDYWxlbmRhclZpZXcodGhpcywgbGVhZilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4gdGhpcy5hZGRDYWxlbmRhclZpZXcodHJ1ZSkpO1xuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oVklFV19UWVBFLCBcIk9wZW4gTGFyZ2UgRmFudGFzeSBDYWxlbmRhclwiLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2VcbiAgICAgICAgICAgICAgICAuZ2V0TGVhZihldnQuZ2V0TW9kaWZpZXJTdGF0ZShNT0RJRklFUl9LRVkpKVxuICAgICAgICAgICAgICAgIC5zZXRWaWV3U3RhdGUoeyB0eXBlOiBGVUxMX1ZJRVcgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KEZVTExfVklFVywgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmFudGFzeUNhbGVuZGFyVmlldyh0aGlzLCBsZWFmLCB7IGZ1bGw6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJvcGVuLWZhbnRhc3ktY2FsZW5kYXJcIixcbiAgICAgICAgICAgIG5hbWU6IFwiT3BlbiBGYW50YXN5IENhbGVuZGFyXCIsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2FsZW5kYXJWaWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJvcGVuLWJpZy1mYW50YXN5LWNhbGVuZGFyXCIsXG4gICAgICAgICAgICBuYW1lOiBcIk9wZW4gTGFyZ2UgRmFudGFzeSBDYWxlbmRhclwiLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEZ1bGxDYWxlbmRhclZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcInRvZ2dsZS1tb29uc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJUb2dnbGUgTW9vbnNcIixcbiAgICAgICAgICAgIGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXdzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEUpO1xuICAgICAgICAgICAgICAgIGlmICh2aWV3cyAmJiB2aWV3cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHZpZXdzWzBdLnZpZXcgYXMgRmFudGFzeUNhbGVuZGFyVmlldykudG9nZ2xlTW9vbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6IFwidmlldy1kYXRlXCIsXG4gICAgICAgICAgICBuYW1lOiBcIlZpZXcgRGF0ZVwiLFxuICAgICAgICAgICAgY2hlY2tDYWxsYmFjazogKGNoZWNraW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgdmlld3MgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRSk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXdzICYmIHZpZXdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAodmlld3NbMF0udmlldyBhcyBGYW50YXN5Q2FsZW5kYXJWaWV3KS5vcGVuRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJ2aWV3LWRhdGVcIixcbiAgICAgICAgICAgIG5hbWU6IFwiVmlldyBOb3RlIEV2ZW50XCIsXG4gICAgICAgICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3cyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzICYmXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICB2aWV3c1swXS52aWV3IGluc3RhbmNlb2YgRmFudGFzeUNhbGVuZGFyVmlld1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdmlld3NbMF0udmlldy5jYWxlbmRhci5ldmVudHMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSkgPT4gZS5ub3RlID09IGZpbGUucGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3NbMF0udmlldy5vcGVuRGF5KGV2ZW50LmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVW5sb2FkaW5nIEZhbnRhc3kgQ2FsZW5kYXJzIHZcIiArIHRoaXMubWFuaWZlc3QudmVyc2lvbik7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZVxuICAgICAgICAgICAgLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEUpXG4gICAgICAgICAgICAuZm9yRWFjaCgobGVhZikgPT4gbGVhZi5kZXRhY2goKSk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZVxuICAgICAgICAgICAgLmdldExlYXZlc09mVHlwZShGVUxMX1ZJRVcpXG4gICAgICAgICAgICAuZm9yRWFjaCgobGVhZikgPT4gbGVhZi5kZXRhY2goKSk7XG4gICAgICAgIHRoaXMud2F0Y2hlci51bmxvYWQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBhZGRDYWxlbmRhclZpZXcoc3RhcnR1cDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChzdGFydHVwICYmIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFKT8ubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKS5zZXRWaWV3U3RhdGUoe1xuICAgICAgICAgICAgdHlwZTogVklFV19UWVBFXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy52aWV3KSB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZih0aGlzLnZpZXcubGVhZik7XG4gICAgfVxuICAgIGFzeW5jIGFkZEZ1bGxDYWxlbmRhclZpZXcoc3RhcnR1cDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChzdGFydHVwICYmIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoRlVMTF9WSUVXKT8ubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZihmYWxzZSkuc2V0Vmlld1N0YXRlKHsgdHlwZTogRlVMTF9WSUVXIH0pO1xuICAgICAgICBpZiAodGhpcy5mdWxsKSB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZih0aGlzLmZ1bGwubGVhZik7XG4gICAgfVxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgLi4uY29weShERUZBVUxUX0RBVEEpLFxuICAgICAgICAgICAgLi4uKGF3YWl0IHRoaXMubG9hZERhdGEoKSlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5jb25maWdEaXJlY3RvcnkgJiZcbiAgICAgICAgICAgIChhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyh0aGlzLmNvbmZpZ0ZpbGVQYXRoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgICAgICBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQodGhpcy5jb25maWdGaWxlUGF0aClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmRlZmF1bHRDYWxlbmRhciAmJiB0aGlzLmRhdGEuY2FsZW5kYXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmRlZmF1bHRDYWxlbmRhciA9IHRoaXMuZGF0YS5jYWxlbmRhcnNbMF0uaWQ7XG4gICAgICAgIH1cbiAgICAgICAgLyogaWYgKCh0aGlzLmRhdGEudmVyc2lvbj8ubWFqb3IgPz8gMCkgPCAyICYmIHRoaXMuZGF0YS5jYWxlbmRhcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgIFwiRmFudGFzeSBDYWxlbmRhciBjYW4gbm93IHBhcnNlIG5vdGUgdGl0bGVzIGZvciBldmVudHMuIFNlZSB0aGUgUmVhZE1lIGZvciBtb3JlIGluZm8hXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMubWFuaWZlc3QudmVyc2lvbi5zcGxpdChcIi5cIikubWFwKCh2KSA9PiBOdW1iZXIodikpO1xuICAgICAgICB0aGlzLmRhdGEudmVyc2lvbiA9IHtcbiAgICAgICAgICAgIG1ham9yOiB2ZXJzaW9uWzBdLFxuICAgICAgICAgICAgbWlub3I6IHZlcnNpb25bMV0sXG4gICAgICAgICAgICBwYXRjaDogdmVyc2lvblsyXVxuICAgICAgICB9OyAqL1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVDYWxlbmRhcigpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoXCJmYW50YXN5LWNhbGVuZGFycy11cGRhdGVkXCIpO1xuICAgIH1cbiAgICBnZXQgY29uZmlnRGlyZWN0b3J5KCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YSB8fCAhdGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeSkgcmV0dXJuO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeX0vcGx1Z2lucy9mYW50YXN5LWNhbGVuZGFyYDtcbiAgICB9XG4gICAgZ2V0IGNvbmZpZ0ZpbGVQYXRoKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5jb25maWdEaXJlY3RvcnkpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlnRGlyZWN0b3J5fS9kYXRhLmpzb25gO1xuICAgIH1cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoXCJmYW50YXN5LWNhbGVuZGFyLXNldHRpbmdzLWNoYW5nZVwiKTtcbiAgICB9XG4gICAgYXN5bmMgc2F2ZURhdGEoZGF0YTogRmFudGFzeUNhbGVuZGFyRGF0YSkge1xuICAgICAgICBpZiAodGhpcy5jb25maWdEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhKGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHRoaXMuY29uZmlnRGlyZWN0b3J5KSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5ta2Rpcih0aGlzLmNvbmZpZ0RpcmVjdG9yeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIud3JpdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnRmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgICAgIFwiVGhlcmUgd2FzIGFuIGVycm9yIHNhdmluZyBpbnRvIHRoZSBjb25maWd1cmVkIGRpcmVjdG9yeS5cIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc3VwZXIuc2F2ZURhdGEoZGF0YSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgYWRkSWNvbixcbiAgICBCdXR0b25Db21wb25lbnQsXG4gICAgRHJvcGRvd25Db21wb25lbnQsXG4gICAgRXh0cmFCdXR0b25Db21wb25lbnQsXG4gICAgTW9kYWwsXG4gICAgbm9ybWFsaXplUGF0aCxcbiAgICBOb3RpY2UsXG4gICAgUGx1Z2luU2V0dGluZ1RhYixcbiAgICBzZXRJY29uLFxuICAgIFNldHRpbmcsXG4gICAgVGV4dEFyZWFDb21wb25lbnQsXG4gICAgVGV4dENvbXBvbmVudCxcbiAgICBURm9sZGVyXG59IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbXBvcnQgY29weSBmcm9tIFwiZmFzdC1jb3B5XCI7XG5cbmltcG9ydCB7IERFRkFVTFRfQ0FMRU5EQVIgfSBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHR5cGUgRmFudGFzeUNhbGVuZGFyIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgSW1wb3J0ZXIgZnJvbSBcIi4vaW1wb3J0L2ltcG9ydGVyXCI7XG5pbXBvcnQgeyBQUkVTRVRfQ0FMRU5EQVJTIH0gZnJvbSBcIi4uL3V0aWxzL3ByZXNldHNcIjtcblxuaW1wb3J0IENhbGVuZGFyQ3JlYXRvciBmcm9tIFwiLi9jcmVhdG9yL0NyZWF0b3Iuc3ZlbHRlXCI7XG5cbmltcG9ydCBXZWVrZGF5cyBmcm9tIFwiLi91aS9XZWVrZGF5cy5zdmVsdGVcIjtcbmltcG9ydCBNb250aHMgZnJvbSBcIi4vdWkvTW9udGhzLnN2ZWx0ZVwiO1xuaW1wb3J0IEV2ZW50c1VJIGZyb20gXCIuL3VpL0V2ZW50cy5zdmVsdGVcIjtcbmltcG9ydCBDYXRlZ29yaWVzIGZyb20gXCIuL3VpL0NhdGVnb3JpZXMuc3ZlbHRlXCI7XG5pbXBvcnQgWWVhciBmcm9tIFwiLi91aS9ZZWFyLnN2ZWx0ZVwiO1xuXG5pbXBvcnQgXCIuL3NldHRpbmdzLmNzc1wiO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcInNyYy91dGlscy9mdW5jdGlvbnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgICBDYWxlbmRhcixcbiAgICBFdmVudCxcbiAgICBFdmVudENhdGVnb3J5LFxuICAgIExlYXBEYXksXG4gICAgTW9vbixcbiAgICBZZWFyIGFzIFllYXJUeXBlXG59IGZyb20gXCJzcmMvQHR5cGVzXCI7XG5cbmltcG9ydCB7IENyZWF0ZUV2ZW50TW9kYWwgfSBmcm9tIFwiLi9tb2RhbHMvZXZlbnRcIjtcbmltcG9ydCB7IGNvbmZpcm1XaXRoTW9kYWwgfSBmcm9tIFwiLi9tb2RhbHMvY29uZmlybVwiO1xuXG5pbXBvcnQgTW9vblVJIGZyb20gXCIuL3VpL01vb25zLnN2ZWx0ZVwiO1xuaW1wb3J0IExlYXBEYXlzIGZyb20gXCIuL3VpL0xlYXBEYXlzLnN2ZWx0ZVwiO1xuaW1wb3J0IHsgQ3JlYXRlTW9vbk1vZGFsIH0gZnJvbSBcInNyYy9zZXR0aW5ncy9tb2RhbHMvbW9vbnNcIjtcbmltcG9ydCB7IENyZWF0ZUxlYXBEYXlNb2RhbCB9IGZyb20gXCIuL21vZGFscy9sZWFwZGF5XCI7XG5pbXBvcnQgeyBGb2xkZXJTdWdnZXN0aW9uTW9kYWwgfSBmcm9tIFwic3JjL3N1Z2dlc3Rlci9mb2xkZXJcIjtcblxuZXhwb3J0IGVudW0gUmVjdXJyaW5nIHtcbiAgICBub25lID0gXCJOb25lXCIsXG4gICAgbW9udGhseSA9IFwiTW9udGhseVwiLFxuICAgIHllYXJseSA9IFwiWWVhcmx5XCJcbn1cblxuZGVjbGFyZSBtb2R1bGUgXCJvYnNpZGlhblwiIHtcbiAgICBpbnRlcmZhY2UgQXBwIHtcbiAgICAgICAgaW50ZXJuYWxQbHVnaW5zOiB7XG4gICAgICAgICAgICBnZXRQbHVnaW5CeUlkKGlkOiBcImRhaWx5LW5vdGVzXCIpOiB7XG4gICAgICAgICAgICAgICAgX2xvYWRlZDogYm9vbGVhbjtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZToge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmFkZEljb24oXG4gICAgXCJmYW50YXN5LWNhbGVuZGFyLWdyaXBcIixcbiAgICBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImdyaXAtbGluZXNcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLWdyaXAtbGluZXMgZmEtdy0xNlwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk00OTYgMjg4SDE2Yy04LjggMC0xNiA3LjItMTYgMTZ2MzJjMCA4LjggNy4yIDE2IDE2IDE2aDQ4MGM4LjggMCAxNi03LjIgMTYtMTZ2LTMyYzAtOC44LTcuMi0xNi0xNi0xNnptMC0xMjhIMTZjLTguOCAwLTE2IDcuMi0xNiAxNnYzMmMwIDguOCA3LjIgMTYgMTYgMTZoNDgwYzguOCAwIDE2LTcuMiAxNi0xNnYtMzJjMC04LjgtNy4yLTE2LTE2LTE2elwiLz48L3N2Zz5gXG4pO1xuXG5hZGRJY29uKFxuICAgIFwiZmFudGFzeS1jYWxlbmRhci13YXJuaW5nXCIsXG4gICAgYDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSBmYS13LTE4XCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDU3NiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk01NjkuNTE3IDQ0MC4wMTNDNTg3Ljk3NSA0NzIuMDA3IDU2NC44MDYgNTEyIDUyNy45NCA1MTJINDguMDU0Yy0zNi45MzcgMC01OS45OTktNDAuMDU1LTQxLjU3Ny03MS45ODdMMjQ2LjQyMyAyMy45ODVjMTguNDY3LTMyLjAwOSA2NC43Mi0zMS45NTEgODMuMTU0IDBsMjM5Ljk0IDQxNi4wMjh6TTI4OCAzNTRjLTI1LjQwNSAwLTQ2IDIwLjU5NS00NiA0NnMyMC41OTUgNDYgNDYgNDYgNDYtMjAuNTk1IDQ2LTQ2LTIwLjU5NS00Ni00Ni00NnptLTQzLjY3My0xNjUuMzQ2bDcuNDE4IDEzNmMuMzQ3IDYuMzY0IDUuNjA5IDExLjM0NiAxMS45ODIgMTEuMzQ2aDQ4LjU0NmM2LjM3MyAwIDExLjYzNS00Ljk4MiAxMS45ODItMTEuMzQ2bDcuNDE4LTEzNmMuMzc1LTYuODc0LTUuMDk4LTEyLjY1NC0xMS45ODItMTIuNjU0aC02My4zODNjLTYuODg0IDAtMTIuMzU2IDUuNzgtMTEuOTgxIDEyLjY1NHpcIj48L3BhdGg+PC9zdmc+YFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmFudGFzeUNhbGVuZGFyU2V0dGluZ3MgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luLmRhdGE7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwbHVnaW46IEZhbnRhc3lDYWxlbmRhcikge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwLCBwbHVnaW4pO1xuICAgIH1cbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGlzcGxheVwiKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJGYW50YXN5IENhbGVuZGFyc1wiIH0pO1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwiZmFudGFzeS1jYWxlbmRhci1zZXR0aW5nc1wiKTtcblxuICAgICAgICB0aGlzLmJ1aWxkSW5mbyhcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jYWxlbmRhci1uZXN0ZWQtc2V0dGluZ3NcIilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5idWlsZENhbGVuZGFycyhcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgICAgICAgICBjbHM6IFwiZmFudGFzeS1jYWxlbmRhci1uZXN0ZWQtc2V0dGluZ3NcIixcbiAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLih0aGlzLmRhdGEuc2V0dGluZ3NUb2dnbGVTdGF0ZS5jYWxlbmRhcnNcbiAgICAgICAgICAgICAgICAgICAgICAgID8geyBvcGVuOiBgb3BlbmAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmJ1aWxkRXZlbnRzKFxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImRldGFpbHNcIiwge1xuICAgICAgICAgICAgICAgIGNsczogXCJmYW50YXN5LWNhbGVuZGFyLW5lc3RlZC1zZXR0aW5nc1wiLFxuICAgICAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKHRoaXMuZGF0YS5zZXR0aW5nc1RvZ2dsZVN0YXRlLmV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB7IG9wZW46IGBvcGVuYCB9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHt9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuICAgIGJ1aWxkSW5mbyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBlLmNyZWF0ZVNwYW4oXCJmYW50YXN5LWNhbGVuZGFyLXdhcm5pbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIHNldEljb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuLmNyZWF0ZVNwYW4oXCJmYW50YXN5LWNhbGVuZGFyLXdhcm5pbmdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItd2FybmluZ1wiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uY3JlYXRlU3Bhbih7IHRleHQ6IFwiRGVmYXVsdCBDb25maWcgRGlyZWN0b3J5XCIgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlBsZWFzZSBiYWNrIHVwIHlvdXIgZGF0YSBiZWZvcmUgY2hhbmdpbmcgdGhpcyBzZXR0aW5nLiBIaWRkZW4gZGlyZWN0b3JpZXMgbXVzdCBiZSBtYW51YWxseSBlbnRlcmVkLlwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgQ3VycmVudCBkaXJlY3Rvcnk6IGBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZ0RpcmVjdG9yeSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29uZmlnRGlyZWN0b3J5ID8/IHRoaXMuYXBwLnZhdWx0LmNvbmZpZ0RpcjtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImNvZGVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogY29uZmlnRGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVGV4dChhc3luYyAodGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBmb2xkZXJzID0gdGhpcy5hcHAudmF1bHRcbiAgICAgICAgICAgICAgICAgICAgLmdldEFsbExvYWRlZEZpbGVzKClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZikgPT4gZiBpbnN0YW5jZW9mIFRGb2xkZXIpO1xuXG4gICAgICAgICAgICAgICAgdGV4dC5zZXRQbGFjZWhvbGRlcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeSA/PyB0aGlzLmFwcC52YXVsdC5jb25maWdEaXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEZvbGRlclN1Z2dlc3Rpb25Nb2RhbCh0aGlzLmFwcCwgdGV4dCwgW1xuICAgICAgICAgICAgICAgICAgICAuLi4oZm9sZGVycyBhcyBURm9sZGVyW10pXG4gICAgICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHQuaW5wdXRFbC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdHMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeSA9IHRleHQuaW5wdXRFbC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHQuaW5wdXRFbC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeSA9IHRleHQuaW5wdXRFbC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldFRvb2x0aXAoXCJSZXNldCB0byBEZWZhdWx0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwicmVzZXRcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbmZpZ0RpcmVjdG9yeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBidWlsZENhbGVuZGFycyhjb250YWluZXJFbDogSFRNTERldGFpbHNFbGVtZW50KSB7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnRhaW5lckVsLm9udG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNldHRpbmdzVG9nZ2xlU3RhdGUuY2FsZW5kYXJzID0gY29udGFpbmVyRWwub3BlbjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VtbWFyeSA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwic3VtbWFyeVwiKTtcbiAgICAgICAgbmV3IFNldHRpbmcoc3VtbWFyeSkuc2V0SGVhZGluZygpLnNldE5hbWUoXCJDYWxlbmRhciBNYW5hZ2VtZW50XCIpO1xuXG4gICAgICAgIHN1bW1hcnkuY3JlYXRlRGl2KFwiY29sbGFwc2VyXCIpLmNyZWF0ZURpdihcImhhbmRsZVwiKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGVmYXVsdCBDYWxlbmRhclwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJWaWV3cyB3aWxsIG9wZW4gdG8gdGhpcyBjYWxlbmRhciBieSBkZWZhdWx0LlwiKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgZC5hZGRPcHRpb24oXCJub25lXCIsIFwiTm9uZVwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjYWxlbmRhciBvZiB0aGlzLmRhdGEuY2FsZW5kYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuYWRkT3B0aW9uKGNhbGVuZGFyLmlkLCBjYWxlbmRhci5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5kYXRhLmRlZmF1bHRDYWxlbmRhcik7XG4gICAgICAgICAgICAgICAgZC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodiA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuZGVmYXVsdENhbGVuZGFyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5kZWZhdWx0Q2FsZW5kYXIgPSB2O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiSW1wb3J0IENhbGVuZGFyXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJJbXBvcnQgY2FsZW5kYXIgZnJvbSBcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImFcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2FwcC5mYW50YXN5LWNhbGVuZGFyLmNvbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJGYW50YXN5IENhbGVuZGFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHM6IFwiZXh0ZXJuYWwtbGlua1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBjcmVhdGVFbChcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1lcmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQ6IFwiLmpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IFwiZGlzcGxheTogbm9uZTtcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlsZXMgfSA9IGlucHV0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmaWxlIG9mIEFycmF5LmZyb20oZmlsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKEpTT04ucGFyc2UoYXdhaXQgZmlsZS50ZXh0KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGVuZGFycyA9IEltcG9ydGVyLmltcG9ydChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuY2FsZW5kYXJzLnB1c2goLi4uY2FsZW5kYXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVDYWxlbmRhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93Q2FsZW5kYXJzKGV4aXN0aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGltcG9ydGluZyB0aGUgY2FsZW5kYXIke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcy5sZW5ndGggPT0gMSA/IFwiXCIgOiBcInNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJDaG9vc2UgRmlsZXNcIik7XG4gICAgICAgICAgICAgICAgYi5idXR0b25FbC5hZGRDbGFzcyhcImNhbGVuZGFyLWZpbGUtdXBsb2FkXCIpO1xuICAgICAgICAgICAgICAgIGIuYnV0dG9uRWwuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGIub25DbGljaygoKSA9PiBpbnB1dC5jbGljaygpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJDcmVhdGUgTmV3IENhbGVuZGFyXCIpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChidXR0b246IEJ1dHRvbkNvbXBvbmVudCkgPT5cbiAgICAgICAgICAgICAgICBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJMYXVuY2ggQ2FsZW5kYXIgQ3JlYXRvclwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxhdW5jaENhbGVuZGFyQ3JlYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnN0IG1vZGFsID0gbmV3IENyZWF0ZUNhbGVuZGFyTW9kYWwodGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnNhdmVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsZW5kYXIgPSBjb3B5KG1vZGFsLmNhbGVuZGFyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGVuZGFyLmN1cnJlbnQueWVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5jdXJyZW50LnllYXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5hZGROZXdDYWxlbmRhcihjYWxlbmRhcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dDYWxlbmRhcnMoZXhpc3RpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTsgKi9cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoXCJleGlzdGluZy1jYWxlbmRhcnNcIik7XG5cbiAgICAgICAgdGhpcy5zaG93Q2FsZW5kYXJzKGV4aXN0aW5nKTtcbiAgICB9XG4gICAgc2hvd0NhbGVuZGFycyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmNhbGVuZGFycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgdGV4dDogXCJObyBjYWxlbmRhcnMgY3JlYXRlZCEgQ3JlYXRlIGEgY2FsZW5kYXIgdG8gc2VlIGl0IGhlcmUuXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGNhbGVuZGFyIG9mIHRoaXMuZGF0YS5jYWxlbmRhcnMpIHtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoY2FsZW5kYXIubmFtZSlcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhjYWxlbmRhci5kZXNjcmlwdGlvbiA/PyBcIlwiKVxuICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwZW5jaWxcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDcmVhdGVDYWxlbmRhck1vZGFsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnNhdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0NhbGVuZGFycyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY2FsZW5kYXJzLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNhbGVuZGFycy5pbmRleE9mKGNhbGVuZGFyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weShtb2RhbC5jYWxlbmRhcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZUNhbGVuZGFyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dDYWxlbmRhcnMoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKGF3YWl0IGNvbmZpcm1XaXRoTW9kYWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBjYWxlbmRhcj9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RhOiBcIkRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiBcIkNhbmNlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuY2FsZW5kYXJzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmNhbGVuZGFycy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjKSA9PiBjLmlkICE9IGNhbGVuZGFyLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVDYWxlbmRhcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXIubmFtZSA9PSB0aGlzLnBsdWdpbi5kYXRhLmRlZmF1bHRDYWxlbmRhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dDYWxlbmRhcnMoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYnVpbGRFdmVudHMoY29udGFpbmVyRWw6IEhUTUxEZXRhaWxzRWxlbWVudCkge1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBjb250YWluZXJFbC5vbnRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXR0aW5nc1RvZ2dsZVN0YXRlLmV2ZW50cyA9IGNvbnRhaW5lckVsLm9wZW47XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBjb250YWluZXJFbC5jcmVhdGVFbChcInN1bW1hcnlcIik7XG4gICAgICAgIG5ldyBTZXR0aW5nKHN1bW1hcnkpLnNldEhlYWRpbmcoKS5zZXROYW1lKFwiRXZlbnRzXCIpO1xuXG4gICAgICAgIHN1bW1hcnkuY3JlYXRlRGl2KFwiY29sbGFwc2VyXCIpLmNyZWF0ZURpdihcImhhbmRsZVwiKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGlzcGxheSBFdmVudCBQcmV2aWV3c1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJVc2UgdGhlIGNvcmUgTm90ZSBQcmV2aWV3IHBsdWdpbiB0byBkaXNwbGF5IGV2ZW50IG5vdGVzIHdoZW4gaG92ZXJlZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5kYXRhLmV2ZW50UHJldmlldykub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmV2ZW50UHJldmlldyA9IHY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBdXRvbWF0aWNhbGx5IFBhcnNlIGZvciBFdmVudHNcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiVGhlIHBsdWdpbiB3aWxsIGF1dG9tYXRpY2FsbHkgcGFyc2UgZmlsZXMgaW4gdGhlIHZhdWx0IGZvciBldmVudHMuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMuZGF0YS5hdXRvUGFyc2UpLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5hdXRvUGFyc2UgPSB2O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRXZlbnRzIEZvbGRlclwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJUaGUgcGx1Z2luIHdpbGwgb25seSB3YXRjaCBmb3IgY2hhbmdlcyBpbiB0aGlzIGZvbGRlci5cIilcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGZvbGRlcnMgPSB0aGlzLmFwcC52YXVsdFxuICAgICAgICAgICAgICAgICAgICAuZ2V0QWxsTG9hZGVkRmlsZXMoKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChmKSA9PiBmIGluc3RhbmNlb2YgVEZvbGRlcik7XG5cbiAgICAgICAgICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKHRoaXMucGx1Z2luLmRhdGEucGF0aCA/PyBcIi9cIik7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRm9sZGVyU3VnZ2VzdGlvbk1vZGFsKHRoaXMuYXBwLCB0ZXh0LCBbXG4gICAgICAgICAgICAgICAgICAgIC4uLihmb2xkZXJzIGFzIFRGb2xkZXJbXSlcbiAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHYgPSB0ZXh0LmlucHV0RWwudmFsdWU/LnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0ZXh0LmlucHV0RWwudmFsdWUudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwiL1wiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhdGggPSBub3JtYWxpemVQYXRoKHYpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gdGV4dC5pbnB1dEVsLnZhbHVlPy50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGV4dC5pbnB1dEVsLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIi9cIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wYXRoID0gbm9ybWFsaXplUGF0aCh2KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJQYXJzZSBOb3RlIFRpdGxlcyBmb3IgRXZlbnQgRGF0ZXNcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiVGhlIHBsdWdpbiB3aWxsIHBhcnNlIG5vdGUgdGl0bGVzIGZvciBldmVudCBkYXRlcy5cIilcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMuZGF0YS5wYXJzZURhdGVzKS5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEucGFyc2VEYXRlcyA9IHY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJEYXRlIEZvcm1hdFwiKVxuICAgICAgICAgICAgLnNldENsYXNzKHRoaXMuZGF0YS5kYWlseU5vdGVzID8gXCJkYWlseS1ub3Rlc1wiIDogXCJuby1kYWlseS1ub3Rlc1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRXZlbnQgZGF0ZXMgd2lsbCBiZSBwYXJzZWQgdXNpbmcgdGhpcyBmb3JtYXQuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7IHRleHQ6IFwiT25seSB0aGUgXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCJZXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIiwgXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCJNXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIiwgYW5kIFwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiY29kZVwiLCB7IHRleHQ6IFwiRFwiIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcInRva2Vuc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL21vbWVudGpzLmNvbS9kb2NzLyMvZGlzcGxheWluZy9mb3JtYXQvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHM6IFwiZXh0ZXJuYWwtbGlua1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCIgYXJlIHN1cHBvcnRlZC5cIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgW1wiWVwiLCBcIk1cIiwgXCJEXCJdLnNvbWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRva2VuKSA9PiAhdGhpcy5kYXRhLmRhdGVGb3JtYXQuaW5jbHVkZXModG9rZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImJyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiBcImZhbnRhc3ktY2FsZW5kYXItd2FybmluZyBkYXRlLWZvcm1hdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEljb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5jcmVhdGVTcGFuKFwiZmFudGFzeS1jYWxlbmRhci13YXJuaW5nXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhci13YXJuaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWlzc2luZyA9IFtcIllcIiwgXCJNXCIsIFwiRFwiXS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRva2VuKSA9PiAhdGhpcy5kYXRhLmRhdGVGb3JtYXQuaW5jbHVkZXModG9rZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgIERhdGUgZm9ybWF0IGlzIG1pc3Npbmc6ICR7bWlzc2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbihcIiwgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sIChbXixdKikkLywgXCIgYW5kICQxXCIpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXREaXNhYmxlZCh0aGlzLmRhdGEuZGFpbHlOb3RlcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLmZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZGF0ZUZvcm1hdCA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdC5pbnB1dEVsLm9uYmx1ciA9ICgpID0+IHRoaXMuYnVpbGRFdmVudHMoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uY2FuVXNlRGFpbHlOb3Rlcykge1xuICAgICAgICAgICAgICAgICAgICBiLmV4dHJhU2V0dGluZ3NFbC5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLmRhaWx5Tm90ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwiY2hlY2ttYXJrXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIlVubGluayBmcm9tIERhaWx5IE5vdGVzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRhaWx5Tm90ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRXZlbnRzKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInN5bmNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiTGluayB3aXRoIERhaWx5IE5vdGVzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRhaWx5Tm90ZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRFdmVudHMoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIlN1cHBvcnQgVGltZWxpbmVzIEV2ZW50c1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiU3VwcG9ydCA8c3Bhbj4gZWxlbWVudHMgdXNlZCBieSB0aGUgXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJhXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiT2JzaWRpYW4gVGltZWxpbmVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcIm9ic2lkaWFuOi8vc2hvdy1wbHVnaW4/aWQ9b2JzaWRpYW4tdGltZWxpbmVzXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIiBwbHVnaW4gKGJ5IERhcmFrYWgpLlwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLmRhdGEuc3VwcG9ydFRpbWVsaW5lcykub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnN1cHBvcnRUaW1lbGluZXMgPSB2O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJEZWZhdWx0IHRhZyBtYXJraW5nIHBhZ2VzIGNvbnRhaW5pbmcgVGltZWxpbmVzIGRhdGFcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiVGFnIHRvIHNwZWNpZnkgd2hpY2ggbm90ZXMgdG8gaW5jbHVkZSBpbiBjcmVhdGVkIHRpbWVsaW5lcyBlLmcuIHRpbWVsaW5lIHRvIHVzZSB0aGUgI3RpbWVsaW5lIHRhZ1wiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcih0aGlzLmRhdGEudGltZWxpbmVUYWcpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLmRhdGEudGltZWxpbmVUYWcucmVwbGFjZShcIiNcIiwgXCJcIikpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREaXNhYmxlZCh0aGlzLnBsdWdpbi5zeW5jVGltZWxpbmVzKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aW1lbGluZVRhZyA9IHYuc3RhcnRzV2l0aChcIiNcIikgPyB2IDogYCMke3Z9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5jYW5Vc2VUaW1lbGluZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnN5bmNUaW1lbGluZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYi5leHRyYVNldHRpbmdzRWwuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5zeW5jVGltZWxpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcImNoZWNrbWFya1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJVbnN5bmMgZnJvbSBUaW1lbGluZXMgUGx1Z2luXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnN5bmNUaW1lbGluZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRXZlbnRzKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInN5bmNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiU3luYyB3aXRoIFRpbWVsaW5lcyBQbHVnaW5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuc3luY1RpbWVsaW5lcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnRpbWVsaW5lVGFnID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYnNpZGlhbi10aW1lbGluZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnNldHRpbmdzLnRpbWVsaW5lVGFnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRFdmVudHMoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGF1bmNoQ2FsZW5kYXJDcmVhdG9yKGNhbGVuZGFyOiBDYWxlbmRhciA9IERFRkFVTFRfQ0FMRU5EQVIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJmYW50YXN5LWNhbGVuZGFyLWNyZWF0b3Itb3BlblwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IGNvcHkoY2FsZW5kYXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0ICRhcHAgPSBuZXcgQ2FsZW5kYXJDcmVhdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRhaW5lckVsLFxuICAgICAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW46IHRoaXMucGx1Z2luXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkYXBwLiRvbihcImZsb3duXCIsICgpID0+IHt9KTtcbiAgICAgICAgICAgICAgICAkYXBwLiRvbihcImNhbmNlbFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwucmVtb3ZlQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItY3JlYXRvci1vcGVuXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYW5jZWxcIik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY2xvbmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRhcHAuJG9uKFwic2F2ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwucmVtb3ZlQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItY3JlYXRvci1vcGVuXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzYXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNhbGVuZGFyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgQ3JlYXRlQ2FsZW5kYXJNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBjYWxlbmRhcjogQ2FsZW5kYXIgPSBjb3B5KERFRkFVTFRfQ0FMRU5EQVIpO1xuICAgIHNhdmVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgZWRpdGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHdlZWtkYXlFbDogYW55O1xuICAgIG1vbnRoRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIGluZm9FbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgYnV0dG9uc0VsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBjYW5TYXZlOiBib29sZWFuID0gZmFsc2U7XG4gICAgZXZlbnRFbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHJlc2V0OiBDYWxlbmRhcjtcbiAgICBjYXRlZ29yeUVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBldmVudHNVSTogRXZlbnRzVUk7XG4gICAgaW5mb0RldGFpbEVsOiBIVE1MRGV0YWlsc0VsZW1lbnQ7XG4gICAgZGF0ZUZpZWxkRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHVpRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIG1vb25FbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgbGVhcGRheUVsOiBhbnk7XG4gICAgeWVhckVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBnZXQgc3RhdGljKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zdGF0aWM7XG4gICAgfVxuICAgIGdldCB3ZWVrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0aWMud2Vla2RheXM7XG4gICAgfVxuICAgIGdldCBtb250aHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRpYy5tb250aHM7XG4gICAgfVxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLmV2ZW50cztcbiAgICB9XG4gICAgY29uc3RydWN0b3IocHVibGljIHBsdWdpbjogRmFudGFzeUNhbGVuZGFyLCBleGlzdGluZz86IENhbGVuZGFyKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgICAgICB0aGlzLmNhbGVuZGFyLmlkID0gbmFub2lkKDYpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyID0gY29weShleGlzdGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hZGRDbGFzcyhcImZhbnRhc3ktY2FsZW5kYXItY3JlYXRlLWNhbGVuZGFyXCIpO1xuICAgIH1cbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuXG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwge1xuICAgICAgICAgICAgdGV4dDogdGhpcy5lZGl0aW5nID8gXCJFZGl0IENhbGVuZGFyXCIgOiBcIk5ldyBDYWxlbmRhclwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHByZXNldEVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJmYW50YXN5LWNhbGVuZGFyLWFwcGx5LXByZXNldFwiXG4gICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHByZXNldEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBcHBseSBQcmVzZXRcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiQXBwbHkgYSBjb21tb24gZmFudGFzeSBjYWxlbmRhciBhcyBhIHByZXNldC5cIilcbiAgICAgICAgICAgIC5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiQ2hvb3NlIFByZXNldFwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDYWxlbmRhclByZXNldE1vZGFsKHRoaXMuYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbC5wcmVzZXQ/Lm5hbWUgPT0gXCJHcmVnb3JpYW4gQ2FsZW5kYXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwucHJlc2V0LmN1cnJlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiB0b2RheS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IHRvZGF5LmdldE1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXk6IHRvZGF5LmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5tb2RhbC5wcmVzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmNhbGVuZGFyLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51aUVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jYWxlbmRhci11aVwiKTtcblxuICAgICAgICB0aGlzLmJ1dHRvbnNFbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcImZhbnRhc3ktY29udGV4dC1idXR0b25zXCIpO1xuICAgICAgICB0aGlzLmJ1aWxkQnV0dG9ucygpO1xuICAgICAgICB0aGlzLmluZm9FbCA9IHRoaXMudWlFbC5jcmVhdGVEaXYoXCJjYWxlbmRhci1pbmZvXCIpO1xuICAgICAgICB0aGlzLmJ1aWxkSW5mbygpO1xuXG4gICAgICAgIHRoaXMud2Vla2RheUVsID0gdGhpcy51aUVsLmNyZWF0ZURpdigpO1xuICAgICAgICB0aGlzLmJ1aWxkV2Vla2RheXMoKTtcbiAgICAgICAgdGhpcy5tb250aEVsID0gdGhpcy51aUVsLmNyZWF0ZURpdihcImZhbnRhc3ktY2FsZW5kYXItZWxlbWVudFwiKTtcbiAgICAgICAgdGhpcy5idWlsZE1vbnRocygpO1xuICAgICAgICB0aGlzLnllYXJFbCA9IHRoaXMudWlFbC5jcmVhdGVEaXYoXCJmYW50YXN5LWNhbGVuZGFyLWVsZW1lbnRcIik7XG4gICAgICAgIHRoaXMuYnVpbGRZZWFyKCk7XG4gICAgICAgIHRoaXMubGVhcGRheUVsID0gdGhpcy51aUVsLmNyZWF0ZURpdihcImZhbnRhc3ktY2FsZW5kYXItZWxlbWVudFwiKTtcbiAgICAgICAgdGhpcy5idWlsZExlYXBEYXlzKCk7XG4gICAgICAgIHRoaXMuZXZlbnRFbCA9IHRoaXMudWlFbC5jcmVhdGVEaXYoXCJmYW50YXN5LWNhbGVuZGFyLWVsZW1lbnRcIik7XG4gICAgICAgIHRoaXMuYnVpbGRFdmVudHMoKTtcbiAgICAgICAgdGhpcy5jYXRlZ29yeUVsID0gdGhpcy51aUVsLmNyZWF0ZURpdihcImZhbnRhc3ktY2FsZW5kYXItZWxlbWVudFwiKTtcbiAgICAgICAgdGhpcy5idWlsZENhdGVnb3JpZXMoKTtcbiAgICAgICAgdGhpcy5tb29uRWwgPSB0aGlzLnVpRWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jYWxlbmRhci1lbGVtZW50XCIpO1xuICAgICAgICB0aGlzLmJ1aWxkTW9vbnMoKTtcbiAgICB9XG5cbiAgICBidWlsZEluZm8oKSB7XG4gICAgICAgIHRoaXMuaW5mb0VsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuaW5mb0RldGFpbEVsID0gdGhpcy5pbmZvRWwuY3JlYXRlRWwoXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgICAgIGF0dHI6IHsgb3BlbjogdHJ1ZSB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluZm9EZXRhaWxFbFxuICAgICAgICAgICAgLmNyZWF0ZUVsKFwic3VtbWFyeVwiKVxuICAgICAgICAgICAgLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIkJhc2ljIEluZm9cIiB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5pbmZvRGV0YWlsRWwpLnNldE5hbWUoXCJDYWxlbmRhciBOYW1lXCIpLmFkZFRleHQoKHQpID0+IHtcbiAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5jYWxlbmRhci5uYW1lKS5vbkNoYW5nZShcbiAgICAgICAgICAgICAgICAodikgPT4gKHRoaXMuY2FsZW5kYXIubmFtZSA9IHYpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbkVsID0gdGhpcy5pbmZvRGV0YWlsRWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJjYWxlbmRhci1kZXNjcmlwdGlvblwiXG4gICAgICAgICk7XG4gICAgICAgIGRlc2NyaXB0aW9uRWwuY3JlYXRlRWwoXCJsYWJlbFwiLCB7IHRleHQ6IFwiQ2FsZW5kYXIgRGVzY3JpcHRpb25cIiB9KTtcbiAgICAgICAgbmV3IFRleHRBcmVhQ29tcG9uZW50KGRlc2NyaXB0aW9uRWwpXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJDYWxlbmRhciBEZXNjcmlwdGlvblwiKVxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuY2FsZW5kYXIuZGVzY3JpcHRpb24pXG4gICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmRlc2NyaXB0aW9uID0gdjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuaW5mb0RldGFpbEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJEaXNwbGF5IERheSBOdW1iZXJcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiRGlzcGxheSB0aGUgZGF5IG9mIHRoZSB5ZWFyLlwiKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5zdGF0aWMuZGlzcGxheURheU51bWJlcikub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aWMuZGlzcGxheURheU51bWJlciA9IHY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRJbmZvKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmluZm9EZXRhaWxFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQXV0byBJbmNyZW1lbnQgRGF5XCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkF1dG9tYXRpY2FsbHkgaW5jcmVtZW50IHRoZSBjYWxlbmRhciBkYXkgZXZlcnkgcmVhbCBkYXkuXCIpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnN0YXRpYy5pbmNyZW1lbnREYXkpLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGljLmluY3JlbWVudERheSA9IHY7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRhdGVGaWVsZEVsID0gdGhpcy5pbmZvRGV0YWlsRWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMuYnVpbGREYXRlRmllbGRzKCk7XG4gICAgfVxuICAgIHRlbXBDdXJyZW50RGF5cyA9IHRoaXMuY2FsZW5kYXIuY3VycmVudC5kYXk7XG4gICAgYnVpbGREYXRlRmllbGRzKCkge1xuICAgICAgICB0aGlzLmRhdGVGaWVsZEVsLmVtcHR5KCk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5kYXRlRmllbGRFbClcbiAgICAgICAgICAgIC5zZXRDbGFzcyhcImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZHMtaGVhZGluZ1wiKVxuICAgICAgICAgICAgLnNldEhlYWRpbmcoKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJDdXJyZW50IERhdGVcIik7XG4gICAgICAgIGNvbnN0IGRhdGVGaWVsZEVsID0gdGhpcy5kYXRlRmllbGRFbC5jcmVhdGVEaXYoXG4gICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZHNcIlxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy50ZW1wQ3VycmVudERheXMgPT0gbnVsbCAmJiB0aGlzLmNhbGVuZGFyLmN1cnJlbnQuZGF5KSB7XG4gICAgICAgICAgICB0aGlzLnRlbXBDdXJyZW50RGF5cyA9IHRoaXMuY2FsZW5kYXIuY3VycmVudC5kYXk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnRlbXBDdXJyZW50RGF5cyAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudC5tb250aCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMudGVtcEN1cnJlbnREYXlzID5cbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHNbdGhpcy5jYWxlbmRhci5jdXJyZW50Lm1vbnRoXT8ubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50ZW1wQ3VycmVudERheXMgPVxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRoc1tcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jdXJyZW50Lm1vbnRoXG4gICAgICAgICAgICAgICAgXT8ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRheUVsID0gZGF0ZUZpZWxkRWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jYWxlbmRhci1kYXRlLWZpZWxkXCIpO1xuICAgICAgICBkYXlFbC5jcmVhdGVFbChcImxhYmVsXCIsIHsgdGV4dDogXCJEYXlcIiB9KTtcbiAgICAgICAgY29uc3QgZGF5ID0gbmV3IFRleHRDb21wb25lbnQoZGF5RWwpXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJEYXlcIilcbiAgICAgICAgICAgIC5zZXRWYWx1ZShgJHt0aGlzLnRlbXBDdXJyZW50RGF5c31gKVxuICAgICAgICAgICAgLnNldERpc2FibGVkKHRoaXMuY2FsZW5kYXIuY3VycmVudC5tb250aCA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcih2KSA8IDEgfHxcbiAgICAgICAgICAgICAgICAgICAgKE51bWJlcih2KSA+XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHNbdGhpcy5jYWxlbmRhci5jdXJyZW50Lm1vbnRoXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ubGVuZ3RoID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBJbmZpbml0eSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGBUaGUgY3VycmVudCBkYXkgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnQubW9udGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wQ3VycmVudERheXMgPSB0aGlzLmNhbGVuZGFyLmN1cnJlbnQuZGF5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRGF0ZUZpZWxkcygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudGVtcEN1cnJlbnREYXlzID0gTnVtYmVyKHYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGRheS5pbnB1dEVsLnNldEF0dHIoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuXG4gICAgICAgIGNvbnN0IG1vbnRoRWwgPSBkYXRlRmllbGRFbC5jcmVhdGVEaXYoXCJmYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGRcIik7XG4gICAgICAgIG1vbnRoRWwuY3JlYXRlRWwoXCJsYWJlbFwiLCB7IHRleHQ6IFwiTW9udGhcIiB9KTtcbiAgICAgICAgbmV3IERyb3Bkb3duQ29tcG9uZW50KG1vbnRoRWwpXG4gICAgICAgICAgICAuYWRkT3B0aW9ucyhcbiAgICAgICAgICAgICAgICBPYmplY3QuZnJvbUVudHJpZXMoW1xuICAgICAgICAgICAgICAgICAgICBbXCJzZWxlY3RcIiwgXCJTZWxlY3QgTW9udGhcIl0sXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRocy5tYXAoKG1vbnRoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGgubmFtZVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jdXJyZW50Lm1vbnRoICE9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRoc1t0aGlzLmNhbGVuZGFyLmN1cnJlbnQubW9udGhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5uYW1lXG4gICAgICAgICAgICAgICAgICAgIDogXCJzZWxlY3RcIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT09IFwic2VsZWN0XCIpIHRoaXMuY2FsZW5kYXIuY3VycmVudC5tb250aCA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgKG0pID0+IG0ubmFtZSA9PSB2XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnQubW9udGggPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHMuaW5kZXhPZihpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZERhdGVGaWVsZHMoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHllYXJFbCA9IGRhdGVGaWVsZEVsLmNyZWF0ZURpdihcImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZFwiKTtcbiAgICAgICAgeWVhckVsLmNyZWF0ZUVsKFwibGFiZWxcIiwgeyB0ZXh0OiBcIlllYXJcIiB9KTtcbiAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzKSB7XG4gICAgICAgICAgICBjb25zdCB5ZWFyRHJvcCA9IG5ldyBEcm9wZG93bkNvbXBvbmVudCh5ZWFyRWwpO1xuICAgICAgICAgICAgKHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzID8/IFtdKS5mb3JFYWNoKCh5ZWFyKSA9PiB7XG4gICAgICAgICAgICAgICAgeWVhckRyb3AuYWRkT3B0aW9uKHllYXIuaWQsIHllYXIubmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnQueWVhciA+IHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzPy5sZW5ndGhcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudC55ZWFyID0gdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnNcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmNhbGVuZGFyLnN0YXRpYy55ZWFycy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWVhckRyb3BcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzPy5bdGhpcy5jYWxlbmRhci5jdXJyZW50LnllYXIgLSAxXVxuICAgICAgICAgICAgICAgICAgICAgICAgPy5pZFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jdXJyZW50LnllYXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnMuZmluZEluZGV4KCh5KSA9PiB5LmlkID09IHYpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIDE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB5ZWFyID0gbmV3IFRleHRDb21wb25lbnQoeWVhckVsKVxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIlllYXJcIilcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoYCR7dGhpcy5jYWxlbmRhci5jdXJyZW50LnllYXJ9YClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jdXJyZW50LnllYXIgPSBOdW1iZXIodik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB5ZWFyLmlucHV0RWwuc2V0QXR0cihcInR5cGVcIiwgXCJudW1iZXJcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBidWlsZFdlZWtkYXlzKCkge1xuICAgICAgICB0aGlzLndlZWtkYXlFbC5lbXB0eSgpO1xuICAgICAgICBjb25zdCB3ZWVrZGF5ID0gbmV3IFdlZWtkYXlzKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy53ZWVrZGF5RWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlzOiB0aGlzLndlZWssXG4gICAgICAgICAgICAgICAgZmlyc3RXZWVrZGF5OiB0aGlzLmNhbGVuZGFyLnN0YXRpYy5maXJzdFdlZWtEYXksXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IHRoaXMuY2FsZW5kYXIuc3RhdGljLm92ZXJmbG93XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdlZWtkYXkuJG9uKFwid2Vla2RheS11cGRhdGVcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLndlZWtkYXlzID0gZS5kZXRhaWw7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdGhpcy5jYWxlbmRhci5zdGF0aWMuZmlyc3RXZWVrRGF5ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMud2Vla2RheXMubGVuZ3RoXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5maXJzdFdlZWtEYXkgPSAwO1xuICAgICAgICAgICAgICAgIHdlZWtkYXkuJHNldCh7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0V2Vla2RheTogdGhpcy5jYWxlbmRhci5zdGF0aWMuZmlyc3RXZWVrRGF5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2hlY2tDYW5TYXZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB3ZWVrZGF5LiRvbihcImZpcnN0LXdlZWtkYXktdXBkYXRlXCIsIChlOiBDdXN0b21FdmVudDxudW1iZXI+KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5maXJzdFdlZWtEYXkgPSBlLmRldGFpbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHdlZWtkYXkuJG9uKFwib3ZlcmZsb3ctdXBkYXRlXCIsIChlOiBDdXN0b21FdmVudDxib29sZWFuPikgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMub3ZlcmZsb3cgPSBlLmRldGFpbDtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYWxlbmRhci5zdGF0aWMub3ZlcmZsb3cpXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMuZmlyc3RXZWVrRGF5ID0gMDtcblxuICAgICAgICAgICAgd2Vla2RheS4kc2V0KHtcbiAgICAgICAgICAgICAgICBmaXJzdFdlZWtkYXk6IHRoaXMuY2FsZW5kYXIuc3RhdGljLmZpcnN0V2Vla0RheVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBidWlsZE1vbnRocygpIHtcbiAgICAgICAgdGhpcy5tb250aEVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IG1vbnRocyA9IG5ldyBNb250aHMoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLm1vbnRoRWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIG1vbnRoczogdGhpcy5tb250aHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9udGhzLiRvbihcIm1vbnRoLXVwZGF0ZVwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzID0gZS5kZXRhaWw7XG5cbiAgICAgICAgICAgIHRoaXMuYnVpbGREYXRlRmllbGRzKCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrQ2FuU2F2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRZZWFyKCkge1xuICAgICAgICB0aGlzLnllYXJFbC5lbXB0eSgpO1xuICAgICAgICBjb25zdCB5ZWFycyA9IG5ldyBZZWFyKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy55ZWFyRWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIHVzZUN1c3RvbVllYXJzOiB0aGlzLnN0YXRpYy51c2VDdXN0b21ZZWFycyxcbiAgICAgICAgICAgICAgICB5ZWFyczogdGhpcy5zdGF0aWMueWVhcnMsXG4gICAgICAgICAgICAgICAgYXBwOiB0aGlzLmFwcFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgeWVhcnMuJG9uKFwieWVhcnMtdXBkYXRlXCIsIChlOiBDdXN0b21FdmVudDxZZWFyVHlwZVtdPikgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnMgPSBlLmRldGFpbDtcbiAgICAgICAgICAgIHRoaXMuYnVpbGREYXRlRmllbGRzKCk7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRXZlbnRzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB5ZWFycy4kb24oXCJ1c2UtY3VzdG9tLXVwZGF0ZVwiLCAoZTogQ3VzdG9tRXZlbnQ8Ym9vbGVhbj4pID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzID0gZS5kZXRhaWw7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRGF0ZUZpZWxkcygpO1xuICAgICAgICAgICAgdGhpcy5idWlsZEV2ZW50cygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRMZWFwRGF5cygpIHtcbiAgICAgICAgdGhpcy5sZWFwZGF5RWwuZW1wdHkoKTtcbiAgICAgICAgY29uc3QgbGVhcGRheVVJID0gbmV3IExlYXBEYXlzKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5sZWFwZGF5RWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIGxlYXBkYXlzOiB0aGlzLnN0YXRpYy5sZWFwRGF5c1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZWFwZGF5VUkuJG9uKFwibmV3LWl0ZW1cIiwgYXN5bmMgKGU6IEN1c3RvbUV2ZW50PExlYXBEYXk+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDcmVhdGVMZWFwRGF5TW9kYWwoXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhcixcbiAgICAgICAgICAgICAgICBlLmRldGFpbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChtb2RhbC5lZGl0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9vbnMuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vb25zLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUpID0+IGUuaWQgPT09IG1vZGFsLmxlYXBkYXkuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5sZWFwRGF5cy5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1vZGFsLmxlYXBkYXlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubGVhcERheXMucHVzaCh7IC4uLm1vZGFsLmxlYXBkYXkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlYXBkYXlVSS4kc2V0KHsgbGVhcGRheXM6IHRoaXMuY2FsZW5kYXIuc3RhdGljLmxlYXBEYXlzIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVDYWxlbmRhcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGVhcGRheVVJLiRvbihcImVkaXQtbGVhcGRheXNcIiwgKGU6IEN1c3RvbUV2ZW50PExlYXBEYXlbXT4pID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLmxlYXBEYXlzID0gZS5kZXRhaWw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkRXZlbnRzKCkge1xuICAgICAgICB0aGlzLmV2ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5ldmVudHNVSSA9IG5ldyBFdmVudHNVSSh7XG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuZXZlbnRFbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgZXZlbnRzOiB0aGlzLmV2ZW50cyxcbiAgICAgICAgICAgICAgICBtb250aHM6IHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRocyxcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiB0aGlzLmNhbGVuZGFyLmNhdGVnb3JpZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXZlbnRzVUkuJG9uKFwibmV3LWl0ZW1cIiwgYXN5bmMgKGU6IEN1c3RvbUV2ZW50PEV2ZW50PikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgQ3JlYXRlRXZlbnRNb2RhbChcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLFxuICAgICAgICAgICAgICAgIGUuZGV0YWlsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnNhdmVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKG1vZGFsLmVkaXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNhbGVuZGFyLmV2ZW50cy5pbmRleE9mKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5ldmVudHMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSkgPT4gZS5pZCA9PT0gbW9kYWwuZXZlbnQuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmV2ZW50cy5zcGxpY2UoaW5kZXgsIDEsIHsgLi4ubW9kYWwuZXZlbnQgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5ldmVudHMucHVzaCh7IC4uLm1vZGFsLmV2ZW50IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1VJLiRzZXQoeyBldmVudHM6IHRoaXMuZXZlbnRzIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVDYWxlbmRhcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ldmVudHNVSS4kb24oXCJlZGl0LWV2ZW50c1wiLCAoZTogQ3VzdG9tRXZlbnQ8RXZlbnRbXT4pID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZXZlbnRzID0gZS5kZXRhaWw7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZXZlbnRFbC5zZXRBdHRyKFxuICAgICAgICAgICAgYHN0eWxlYCxcbiAgICAgICAgICAgIGAtLWV2ZW50LW1heC13aWR0aDogJHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICAgICAgICAgIH1weDtgXG4gICAgICAgICk7XG4gICAgfVxuICAgIGJ1aWxkQ2F0ZWdvcmllcygpIHtcbiAgICAgICAgdGhpcy5jYXRlZ29yeUVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gbmV3IENhdGVnb3JpZXMoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNhdGVnb3J5RWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IHRoaXMuY2FsZW5kYXIuY2F0ZWdvcmllc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjYXRlZ29yeS4kb24oXCJuZXdcIiwgKGV2ZW50OiBDdXN0b21FdmVudDxFdmVudENhdGVnb3J5PikgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLnB1c2goZXZlbnQuZGV0YWlsKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzVUkuJHNldCh7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2F0ZWdvcnkuJG9uKFwidXBkYXRlXCIsIChldmVudDogQ3VzdG9tRXZlbnQ8RXZlbnRDYXRlZ29yeT4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLmZpbmQoXG4gICAgICAgICAgICAgICAgKGMpID0+IGMuaWQgPT0gZXZlbnQuZGV0YWlsLmlkXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmNhdGVnb3JpZXMuc3BsaWNlKFxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY2F0ZWdvcmllcy5pbmRleE9mKGV4aXN0aW5nKSxcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgIGV2ZW50LmRldGFpbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzVUkuJHNldCh7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgIGV2ZW50czogdGhpcy5ldmVudHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY2F0ZWdvcnkuJG9uKFwiZGVsZXRlXCIsIChldmVudDogQ3VzdG9tRXZlbnQ8RXZlbnRDYXRlZ29yeT4pID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY2F0ZWdvcmllcy5zcGxpY2UoXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLmluZGV4T2YoZXZlbnQuZGV0YWlsKSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5ldmVudHNVSS4kc2V0KHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiB0aGlzLmNhbGVuZGFyLmNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB0aGlzLmV2ZW50c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJ1aWxkTW9vbnMoKSB7XG4gICAgICAgIHRoaXMubW9vbkVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuc3RhdGljLmRpc3BsYXlNb29ucyA9IHRoaXMuc3RhdGljLmRpc3BsYXlNb29ucyA/PyB0cnVlO1xuICAgICAgICBjb25zdCBtb29uc1VJID0gbmV3IE1vb25VSSh7XG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMubW9vbkVsLFxuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICBtb29uczogdGhpcy5zdGF0aWMubW9vbnMsXG4gICAgICAgICAgICAgICAgZGlzcGxheU1vb25zOiB0aGlzLnN0YXRpYy5kaXNwbGF5TW9vbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1vb25zVUkuJG9uKFwiZGlzcGxheS10b2dnbGVcIiwgKGU6IEN1c3RvbUV2ZW50PGJvb2xlYW4+KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0YXRpYy5kaXNwbGF5TW9vbnMgPSBlLmRldGFpbDtcbiAgICAgICAgICAgIG1vb25zVUkuJHNldCh7IGRpc3BsYXlNb29uczogdGhpcy5zdGF0aWMuZGlzcGxheU1vb25zIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbW9vbnNVSS4kb24oXCJuZXctaXRlbVwiLCBhc3luYyAoZTogQ3VzdG9tRXZlbnQ8TW9vbj4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENyZWF0ZU1vb25Nb2RhbChcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLFxuICAgICAgICAgICAgICAgIGUuZGV0YWlsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnNhdmVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKG1vZGFsLmVkaXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb29ucy5pbmRleE9mKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9vbnMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSkgPT4gZS5pZCA9PT0gbW9kYWwubW9vbi5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vb25zLnNwbGljZShpbmRleCwgMSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubW9kYWwubW9vblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb29ucy5wdXNoKHsgLi4ubW9kYWwubW9vbiB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbW9vbnNVSS4kc2V0KHsgbW9vbnM6IHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vb25zIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVDYWxlbmRhcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9vbnNVSS4kb24oXCJlZGl0LW1vb25zXCIsIChlOiBDdXN0b21FdmVudDxNb29uW10+KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb29ucyA9IGUuZGV0YWlsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2hlY2tDYW5TYXZlKCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLm1vbnRocz8ubGVuZ3RoICYmXG4gICAgICAgICAgICB0aGlzLm1vbnRocz8uZXZlcnkoKG0pID0+IG0ubmFtZT8ubGVuZ3RoKSAmJlxuICAgICAgICAgICAgdGhpcy5tb250aHM/LmV2ZXJ5KChtKSA9PiBtLmxlbmd0aCA+IDApICYmXG4gICAgICAgICAgICB0aGlzLndlZWs/Lmxlbmd0aCAmJlxuICAgICAgICAgICAgdGhpcy53ZWVrPy5ldmVyeSgoZCkgPT4gZC5uYW1lPy5sZW5ndGgpICYmXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLm5hbWU/Lmxlbmd0aCAmJlxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMuZmlyc3RXZWVrRGF5IDxcbiAgICAgICAgICAgICAgICAodGhpcy53ZWVrPy5sZW5ndGggPz8gSW5maW5pdHkpICYmXG4gICAgICAgICAgICAoIXRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzPy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnMuZXZlcnkoKHkpID0+IHkubmFtZT8ubGVuZ3RoKSkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5jYW5TYXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZEJ1dHRvbnMoKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uc0VsLmVtcHR5KCk7XG5cbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudCh0aGlzLmJ1dHRvbnNFbClcbiAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQodGhpcy5lZGl0aW5nID8gXCJTYXZlXCIgOiBcIkNyZWF0ZVwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW5TYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tDYW5TYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW5TYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYWxlbmRhci5uYW1lPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJUaGUgY2FsZW5kYXIgbmFtZSBpcyByZXF1aXJlZCFcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMud2Vlay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJBdCBsZWFzdCBvbmUgd2Vla2RheSBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMud2Vlay5ldmVyeSgodykgPT4gdy5uYW1lPy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRXZlcnkgd2Vla2RheSBtdXN0IGhhdmUgYSBuYW1lLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5tb250aHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQXQgbGVhc3Qgb25lIG1vbnRoIGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5tb250aHMuZXZlcnkoKG0pID0+IG0ubmFtZT8ubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkV2ZXJ5IG1vbnRoIG11c3QgaGF2ZSBhIG5hbWUuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm1vbnRocy5ldmVyeSgobSkgPT4gbS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRXZlcnkgbW9udGggbXVzdCBoYXZlIGEgbGVuZ3RoLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnM/Lmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJDdXN0b20geWVhcnMgbXVzdCBiZSBkZWZpbmVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnMuZXZlcnkoKHkpID0+IHkubmFtZT8ubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFYWNoIGN1c3RvbSB5ZWFyIG11c3QgYmUgbmFtZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMuZmlyc3RXZWVrRGF5ID49IHRoaXMud2Vlay5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayBtdXN0IGJlIGEgdmFsaWQgd2Vla2RheS5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudC5kYXkgPSB0aGlzLnRlbXBDdXJyZW50RGF5cztcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KHRoaXMuYnV0dG9uc0VsKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgIC5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJQcmVzZXRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcmVzZXQ6IENhbGVuZGFyO1xuICAgIHNhdmVkOiBib29sZWFuO1xuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxuICAgIGFzeW5jIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJmYW50YXN5LWNhbGVuZGFyLWNob29zZS1wcmVzZXRcIik7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwge1xuICAgICAgICAgICAgdGV4dDogXCJDaG9vc2UgYSBQcmVzZXQgQ2FsZW5kYXJcIlxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBwcmVzZXRFbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhci1wcmVzZXQtY29udGFpbmVyXCJcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHByZXNldCBvZiBQUkVTRVRfQ0FMRU5EQVJTKSB7XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHByZXNldEVsKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXNldCA9IHByZXNldDtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJlc2V0ID09IHByZXNldCkgYnV0dG9uLnNldEN0YSgpO1xuICAgICAgICAgICAgYnV0dG9uLmJ1dHRvbkVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgY2xzOiBcInNldHRpbmctaXRlbS1uYW1lXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogcHJlc2V0Lm5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnV0dG9uLmJ1dHRvbkVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgY2xzOiBcInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICAgIHRleHQ6IHByZXNldC5kZXNjcmlwdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhci1jb25maXJtLWJ1dHRvbnNcIlxuICAgICAgICApO1xuICAgICAgICBuZXcgQnV0dG9uQ29tcG9uZW50KGJ1dHRvbkVsKVxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCJBcHBseVwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucHJlc2V0ID0gY29weSh0aGlzLnByZXNldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zZXRDdGEoKTtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KGJ1dHRvbkVsKS5zZXRJY29uKFwiY3Jvc3NcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7XG4gICAgQ2FsZW5kYXIsXG4gICAgRXJhLFxuICAgIEV2ZW50LFxuICAgIEV2ZW50Q2F0ZWdvcnksXG4gICAgTGVhcERheSxcbiAgICBNb250aCxcbiAgICBNb29uLFxuICAgIFN0YXRpY0NhbGVuZGFyRGF0YSxcbiAgICBXZWVrXG59IGZyb20gXCIuLi8uLi9AdHlwZXNcIjtcbmltcG9ydCBkaXN0aW5jdCBmcm9tIFwiZGlzdGluY3QtY29sb3JzXCI7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvZnVuY3Rpb25zXCI7XG5cbmltcG9ydCB7IGRlY29kZSB9IGZyb20gXCJoZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbXBvcnQge1xuICAgIHN0YXRpYyBpbXBvcnQob2JqZWN0czogYW55W10pIHtcbiAgICAgICAgY29uc3QgY2FsZW5kYXJzOiBDYWxlbmRhcltdID0gW107XG4gICAgICAgIGZvciAobGV0IGRhdGEgb2Ygb2JqZWN0cykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGRhdGEubmFtZSA/PyBcIkltcG9ydGVkIENhbGVuZGFyXCI7XG4gICAgICAgICAgICBjb25zdCBzdGF0aWNfZGF0YSA9IGRhdGEuc3RhdGljX2RhdGE7XG5cbiAgICAgICAgICAgIGlmICghc3RhdGljX2RhdGEpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb25zdCB5ZWFyX2RhdGEgPSBzdGF0aWNfZGF0YS55ZWFyX2RhdGE7XG5cbiAgICAgICAgICAgIGlmICgheWVhcl9kYXRhKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgZmlyc3RXZWVrRGF5ID0geWVhcl9kYXRhLmZpcnN0X2RheSAtIDEgPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJmbG93ID0geWVhcl9kYXRhLm92ZXJmbG93ID8/IHRydWU7XG4gICAgICAgICAgICBjb25zdCBnbG9iYWxfd2VlayA9IHllYXJfZGF0YS5nbG9iYWxfd2VlaztcblxuICAgICAgICAgICAgaWYgKCFnbG9iYWxfd2VlaykgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHdlZWtkYXlzOiBXZWVrID0gZ2xvYmFsX3dlZWsubWFwKChuOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuLFxuICAgICAgICAgICAgICAgICAgICBpZDogbmFub2lkKDYpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB0aW1lc3BhbnMgPSB5ZWFyX2RhdGEudGltZXNwYW5zO1xuXG4gICAgICAgICAgICBpZiAoIXRpbWVzcGFucykgY29udGludWU7XG5cbiAgICAgICAgICAgIC8qICAgICAgICAgICAgIGNvbnN0IG1vbnRoX3NwYW5zID0gdGltZXNwYW5zLmZpbHRlcigodDogYW55KSA9PiB0LnR5cGUgPT0gXCJtb250aFwiKTtcblxuICAgICAgICAgICAgaWYgKCFtb250aF9zcGFucyB8fCAhbW9udGhfc3BhbnMubGVuZ3RoKSBjb250aW51ZTsgKi9cblxuICAgICAgICAgICAgY29uc3QgbW9udGhzOiBNb250aFtdID0gdGltZXNwYW5zLm1hcCgobTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGVjb2RlKG0ubmFtZSksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiBtLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgYXZnTGVuZ3RoID0gbW9udGhzLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChiLnR5cGUgPT0gXCJtb250aFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgYi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxlYXBEYXlzOiBMZWFwRGF5W10gPSBbXTtcblxuICAgICAgICAgICAgaWYgKFwibGVhcF9kYXlzXCIgaW4geWVhcl9kYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbGVhcCBvZiB5ZWFyX2RhdGFbXCJsZWFwX2RheXNcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9idWlsZCBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbDogc3RyaW5nW10gPSBsZWFwLmludGVydmFsLnNwbGl0KFwiLFwiKSA/PyBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjFcIlxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbHMgPSBpbnRlcnZhbC5tYXAoKGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlnbm9yZSA9IC9cXCsvLnRlc3QoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleGNsdXNpdmUgPSAvXFwhLy50ZXN0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBpLm1hdGNoKC8oXFxkKykvKS5maXJzdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdXNpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IE51bWJlcihpbnRlcnZhbClcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZWFwRGF5cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGxlYXAubmFtZSA/PyBgTGVhcCBEYXkgJHtsZWFwRGF5cy5sZW5ndGggKyAxfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxlYXBkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsOiBpbnRlcnZhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3BhbjogbGVhcC50aW1lc3BhbiA/PyAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJjYWxhcnk6IGxlYXAuaW50ZXJjYWxhcnkgPz8gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGxlYXAub2Zmc2V0ID8/IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbmFub2lkKDYpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vb25zOiBNb29uW10gPSBbXTtcblxuICAgICAgICAgICAgaWYgKFwibW9vbnNcIiBpbiBzdGF0aWNfZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG1vb24gb2Ygc3RhdGljX2RhdGFbXCJtb29uc1wiXSkge1xuICAgICAgICAgICAgICAgICAgICBtb29ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG1vb24ubmFtZSA/PyBgTW9vbiAke21vb25zLmxlbmd0aCArIDF9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN5Y2xlOiBOdW1iZXIobW9vbi5jeWNsZSkgPz8gYXZnTGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBtb29uLnNoaWZ0ID8/IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IG1vb24uY29sb3IgPz8gXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogbW9vbi5zaGFkb3dfY29sb3IgPz8gXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbmFub2lkKDYpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZXJhczogRXJhW10gPSBbXTtcbiAgICAgICAgICAgIGlmIChcImVyYXNcIiBpbiBzdGF0aWNfZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGVyYSBvZiBzdGF0aWNfZGF0YVtcImVyYXNcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgZXJhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGVyYS5uYW1lID8/IGBFcmEgJHtlcmFzLmxlbmd0aCArIDF9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBlcmEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJhLmZvcm1hdHRpbmcgPz8gXCJZZWFyIHt7eWVhcn19IC0ge3tlcmFfbmFtZX19XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IGVyYS5kYXRlPy55ZWFyID8/IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IGVyYS5kYXRlPy50aW1lc3BhbiA/PyAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheTogZXJhLmRhdGU/LmRheSA/PyAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YXRpY0RhdGE6IFN0YXRpY0NhbGVuZGFyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBmaXJzdFdlZWtEYXksXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3csXG4gICAgICAgICAgICAgICAgd2Vla2RheXMsXG4gICAgICAgICAgICAgICAgbW9udGhzLFxuICAgICAgICAgICAgICAgIG1vb25zLFxuICAgICAgICAgICAgICAgIGxlYXBEYXlzLFxuICAgICAgICAgICAgICAgIGVyYXMsXG4gICAgICAgICAgICAgICAgZGlzcGxheU1vb25zOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluY3JlbWVudERheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGlzcGxheURheU51bWJlcjogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNEYXRhID0ge1xuICAgICAgICAgICAgICAgIHllYXI6IDEsXG4gICAgICAgICAgICAgICAgZGF5OiAxLFxuICAgICAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGRhdGEuZHluYW1pY19kYXRhKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY0RhdGEueWVhciA9IGRhdGEuZHluYW1pY19kYXRhLnllYXIgPz8gZHluYW1pY0RhdGEueWVhcjtcbiAgICAgICAgICAgICAgICBkeW5hbWljRGF0YS5kYXkgPSBkYXRhLmR5bmFtaWNfZGF0YS5kYXkgPz8gZHluYW1pY0RhdGEuZGF5O1xuICAgICAgICAgICAgICAgIGR5bmFtaWNEYXRhLm1vbnRoID1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5keW5hbWljX2RhdGEubW9udGggPz8gZHluYW1pY0RhdGEubW9udGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGV2ZW50czogRXZlbnRbXSA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0NhdGVnb3JpZXM6IE1hcDxzdHJpbmcsIEV2ZW50Q2F0ZWdvcnk+ID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKFwiY2F0ZWdvcmllc1wiIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjYXRlZ29yeSBvZiBkYXRhLmNhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNhdGVnb3J5Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU/LnNwbGl0KFwiIFwiKS5qb2luKFwiLVwiKS50b0xvd2VyQ2FzZSgpID8/IG5hbm9pZCg2KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gY2F0ZWdvcnkuZXZlbnRfc2V0dGluZ3MuY29sb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY29sb3IgaW4gRmFudGFzeUNhbGVuZGFyQ29sb3JNYXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yLnNwbGl0KFwiLVwiKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzID0gY3JlYXRlRWwoXCJjYW52YXNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBGYW50YXN5Q2FsZW5kYXJDb2xvck1hcFtjb2xvcl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdDYXRlZ29yaWVzLnNldChpZCwgeyBuYW1lLCBpZCwgY29sb3IgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZGF0YS5ldmVudHMgJiZcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGRhdGEuZXZlbnRzKSAmJlxuICAgICAgICAgICAgICAgIGRhdGEuZXZlbnRzLmxlbmd0aFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZXZlbnQgb2YgZGF0YS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZTogYW55ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5kYXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGV2ZW50LmRhdGE/LmRhdGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhLmRhdGUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5kYXkgPSBldmVudC5kYXRhLmRhdGVbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlLm1vbnRoID0gZXZlbnQuZGF0YS5kYXRlWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS55ZWFyID0gZXZlbnQuZGF0YS5kYXRlWzBdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5jb25kaXRpb25zICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGV2ZW50LmRhdGEuY29uZGl0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25kaXRpb25zID0gZXZlbnQuZGF0YS5jb25kaXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ZWFyID0gY29uZGl0aW9ucy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYzogYW55KSA9PiBjWzBdID09PSBcIlllYXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9udGggPSBjb25kaXRpb25zLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjOiBhbnkpID0+IGNbMF0gPT09IFwiTW9udGhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF5ID0gY29uZGl0aW9ucy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYzogYW55KSA9PiBjWzBdID09PSBcIkRheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUueWVhciA9IE51bWJlcih5ZWFyWzJdWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vbnRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUubW9udGggPSBOdW1iZXIobW9udGhbMl1bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUuZGF5ID0gTnVtYmVyKGRheVsyXVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uRWwgPSBjcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uRWwuaW5uZXJIVE1MID0gZXZlbnQuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uRWwudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBldmVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBldmVudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGV2ZW50LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0NhdGVnb3JpZXMuZ2V0KGV2ZW50LmV2ZW50X2NhdGVnb3J5X2lkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmlkID8/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb2xvcnMgPSBkaXN0aW5jdCh7XG4gICAgICAgICAgICAgICAgY291bnQ6IGV4aXN0aW5nQ2F0ZWdvcmllcy5zaXplXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaWQgb2YgZXhpc3RpbmdDYXRlZ29yaWVzLmtleXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gZXhpc3RpbmdDYXRlZ29yaWVzLmdldChpZCk7XG4gICAgICAgICAgICAgICAgaWYgKGNhdGVnb3J5LmNvbG9yKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeS5jb2xvciA9IGNvbG9ycy5zaGlmdCgpLmhleCgpO1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQ2F0ZWdvcmllcy5zZXQoaWQsIGNhdGVnb3J5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY2FsZW5kYXJEYXRhOiBDYWxlbmRhciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXRpYzogc3RhdGljRGF0YSxcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBkeW5hbWljRGF0YSxcbiAgICAgICAgICAgICAgICBldmVudHMsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBBcnJheS5mcm9tKGV4aXN0aW5nQ2F0ZWdvcmllcy52YWx1ZXMoKSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNhbGVuZGFycy5wdXNoKGNhbGVuZGFyRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGVuZGFycztcbiAgICB9XG59XG5cbmNvbnN0IEZhbnRhc3lDYWxlbmRhckNvbG9yTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIFwiRGFyay1Tb2xpZFwiOiBcIiMwMDAwMDBcIixcbiAgICBSZWQ6IFwiIzliMmMyY1wiLFxuICAgIFBpbms6IFwiIzg4MEU0RlwiLFxuICAgIFB1cnBsZTogXCIjNEExNDhDXCIsXG4gICAgXCJEZWVwLVB1cnBsZVwiOiBcIiMzMTFCOTJcIixcbiAgICBCbHVlOiBcIiMwRDQ3QTFcIixcbiAgICBcIkxpZ2h0LUJsdWVcIjogXCIjMDI4OEQxXCIsXG4gICAgQ3lhbjogXCIjMDA2MDY0XCIsXG4gICAgVGVhbDogXCIjMDA0RDQwXCIsXG4gICAgR3JlZW46IFwiIzJFN0QzMlwiLFxuICAgIFwiTGlnaHQtR3JlZW5cIjogXCIjN0NCMzQyXCIsXG4gICAgTGltZTogXCIjOWU5ZDI0XCIsXG4gICAgWWVsbG93OiBcIiNGRkVCM0JcIixcbiAgICBPcmFuZ2U6IFwiI0ZGOTEwMFwiLFxuICAgIFwiQmx1ZS1HcmV5XCI6IFwiIzQ1NUE2NFwiXG59O1xuIiwgImltcG9ydCB0eXBlIHsgQ3VycmVudENhbGVuZGFyRGF0YSwgTGVhcERheSwgTW9udGggfSBmcm9tIFwiLi4vQHR5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzQmV0d2VlbihkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpIHtcbiAgICBjb25zdCBkMSA9IHdpbmRvdy5tb21lbnQoZGF0ZTEpO1xuICAgIGNvbnN0IGQyID0gd2luZG93Lm1vbWVudChkYXRlMik7XG5cbiAgICBsZXQgZGF5cyA9IGQyLmRpZmYoZDEsIFwiZGF5c1wiKTtcblxuICAgIGlmIChcbiAgICAgICAgKGQxLnllYXIoKSA8IGQyLnllYXIoKSB8fCBkMS5kYXlPZlllYXIoKSA8IGQyLmRheU9mWWVhcigpKSAmJlxuICAgICAgICAoZDEuaG91cigpID4gZDIuaG91cigpIHx8XG4gICAgICAgICAgICBkMS5taW51dGUoKSA+IGQyLm1pbnV0ZSgpIHx8XG4gICAgICAgICAgICBkMS5zZWNvbmQoKSA+IGQyLnNlY29uZCgpIHx8XG4gICAgICAgICAgICBkMS5taWxsaXNlY29uZCgpID4gZDIubWlsbGlzZWNvbmQoKSlcbiAgICApIHtcbiAgICAgICAgZGF5cyArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gZGF5cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXAodmFsdWU6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKCh2YWx1ZSAlIHNpemUpICsgc2l6ZSkgJSBzaXplO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFub2lkKGxlbjogbnVtYmVyKSB7XG4gICAgcmV0dXJuIFwiSURfeHl4eXh5eHl4eXh5XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcbiAgICAgICAgICAgIHYgPSBjID09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50ZXJ2YWxEZXNjcmlwdGlvbihsZWFwZGF5OiBMZWFwRGF5KSB7XG4gICAgaWYgKCFsZWFwZGF5LmludGVydmFsPy5sZW5ndGgpIHJldHVybiBcIlwiO1xuICAgIGNvbnN0IGludGVydmFscyA9IGxlYXBkYXkuaW50ZXJ2YWwuc29ydCgoYSwgYikgPT4gYS5pbnRlcnZhbCAtIGIuaW50ZXJ2YWwpO1xuICAgIGxldCBkZXNjcmlwdGlvbiA9IFtdO1xuICAgIGZvciAobGV0IGludGVydmFsIG9mIGludGVydmFscykge1xuICAgICAgICBjb25zdCBsZW5ndGggPVxuICAgICAgICAgICAgaW50ZXJ2YWwuaW50ZXJ2YWwgKyAoaW50ZXJ2YWwuaWdub3JlID8gMCA6IGxlYXBkYXkub2Zmc2V0KTtcbiAgICAgICAgaWYgKGludGVydmFsLmV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgZGVzY3JpcHRpb24ucHVzaChgbm90IGV2ZXJ5ICR7b3JkaW5hbChsZW5ndGgpfSB5ZWFyYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGludGVydmFscy5pbmRleE9mKGludGVydmFsKTtcbiAgICAgICAgICAgIGNvbnN0IGFsc28gPSBpbmRleCA+IDAgJiYgaW50ZXJ2YWxzW2luZGV4IC0gMV0uZXhjbHVzaXZlO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24ucHVzaChcbiAgICAgICAgICAgICAgICBgJHthbHNvID8gXCJhbHNvIFwiIDogXCJcIn1ldmVyeSAke29yZGluYWwobGVuZ3RoKX0geWVhcmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgam9pbiA9IGRlc2NyaXB0aW9uLmpvaW4oXCIsIGJ1dCBcIik7XG4gICAgcmV0dXJuIGpvaW5bMF0udG9VcHBlckNhc2UoKSArIGpvaW4uc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yZGluYWwoaTogbnVtYmVyKSB7XG4gICAgY29uc3QgaiA9IGkgJSAxMCxcbiAgICAgICAgayA9IGkgJSAxMDA7XG4gICAgaWYgKGogPT0gMSAmJiBrICE9IDExKSB7XG4gICAgICAgIHJldHVybiBpICsgXCJzdFwiO1xuICAgIH1cbiAgICBpZiAoaiA9PSAyICYmIGsgIT0gMTIpIHtcbiAgICAgICAgcmV0dXJuIGkgKyBcIm5kXCI7XG4gICAgfVxuICAgIGlmIChqID09IDMgJiYgayAhPSAxMykge1xuICAgICAgICByZXR1cm4gaSArIFwicmRcIjtcbiAgICB9XG4gICAgcmV0dXJuIGkgKyBcInRoXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZGF0ZVN0cmluZyhcbiAgICBkYXRlOiBDdXJyZW50Q2FsZW5kYXJEYXRhLFxuICAgIG1vbnRoczogTW9udGhbXSxcbiAgICBlbmQ/OiBDdXJyZW50Q2FsZW5kYXJEYXRhXG4pIHtcbiAgICBpZiAoIWRhdGUgfHwgZGF0ZS5kYXkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCB7IGRheSwgbW9udGgsIHllYXIgfSA9IGRhdGU7XG4gICAgaWYgKG1vbnRoICE9IHVuZGVmaW5lZCAmJiAhbW9udGhzW21vbnRoXSkgcmV0dXJuIFwiSW52YWxpZCBEYXRlXCI7XG5cbiAgICBpZiAoZW5kICYmIGVuZC5kYXkpIHtcbiAgICAgICAgY29uc3QgZW5kRGF5ID0gZW5kLmRheTtcbiAgICAgICAgY29uc3QgZW5kTW9udGggPSBlbmQubW9udGg7XG4gICAgICAgIGNvbnN0IGVuZFllYXIgPSBlbmQueWVhcjtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBlbmRNb250aCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGVuZFllYXIgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBtb250aCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHllYXIgIT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHllYXIgIT0gZW5kWWVhcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHttb250aHNbbW9udGhdLm5hbWV9ICR7b3JkaW5hbChkYXkpfSwgJHt5ZWFyfSAtICR7XG4gICAgICAgICAgICAgICAgICAgIG1vbnRoc1tlbmRNb250aF0ubmFtZVxuICAgICAgICAgICAgICAgIH0gJHtvcmRpbmFsKGVuZERheSl9LCAke2VuZFllYXJ9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmRNb250aCA9PSBtb250aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHttb250aHNbbW9udGhdLm5hbWV9ICR7b3JkaW5hbChkYXkpfS0ke29yZGluYWwoXG4gICAgICAgICAgICAgICAgICAgIGVuZERheVxuICAgICAgICAgICAgICAgICl9LCAke3llYXJ9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb250aCAhPSB1bmRlZmluZWQgJiYgeWVhciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7bW9udGhzW21vbnRoXS5uYW1lfSAke29yZGluYWwoZGF5KX0tJHtcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzW2VuZE1vbnRoXS5uYW1lXG4gICAgICAgICAgICAgICAgfSAke29yZGluYWwoZW5kRGF5KX0sICR7eWVhcn1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vbnRoICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHttb250aHNbbW9udGhdLm5hbWV9ICR7b3JkaW5hbChkYXkpfS0ke1xuICAgICAgICAgICAgICAgICAgICBtb250aHNbZW5kTW9udGhdLm5hbWVcbiAgICAgICAgICAgICAgICB9ICR7b3JkaW5hbChlbmREYXkpfSBvZiBldmVyeSB5ZWFyYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgJHtvcmRpbmFsKGRheSl9LSR7b3JkaW5hbChlbmREYXkpfSBvZiBldmVyeSBtb250aGA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9udGggIT0gdW5kZWZpbmVkICYmIHllYXIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBgJHttb250aHNbbW9udGhdLm5hbWV9ICR7b3JkaW5hbChkYXkpfSwgJHt5ZWFyfWA7XG4gICAgfVxuICAgIGlmIChtb250aCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGAke21vbnRoc1ttb250aF0ubmFtZX0gJHtvcmRpbmFsKGRheSl9IG9mIGV2ZXJ5IHllYXJgO1xuICAgIH1cbiAgICByZXR1cm4gYCR7b3JkaW5hbChkYXkpfSBvZiBldmVyeSBtb250aGA7XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBDYWxlbmRhciB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBQUkVTRVRfQ0FMRU5EQVJTOiBDYWxlbmRhcltdID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJHcmVnb3JpYW4gQ2FsZW5kYXJcIixcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICBcIkEgY2FsZW5kYXIgZm9yIHRoZSByZWFsIHdvcmxkLlwiLFxuICAgICAgICBzdGF0aWM6IHtcbiAgICAgICAgICAgIGRpc3BsYXlEYXlOdW1iZXI6IGZhbHNlLFxuICAgICAgICAgICAgaW5jcmVtZW50RGF5OiB0cnVlLFxuICAgICAgICAgICAgZGlzcGxheU1vb25zOiB0cnVlLFxuICAgICAgICAgICAgZmlyc3RXZWVrRGF5OiA2LFxuICAgICAgICAgICAgb3ZlcmZsb3c6IHRydWUsXG4gICAgICAgICAgICB3ZWVrZGF5czogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdW5kYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMTllYTY4NGI0YTA4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJNb25kYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMjkyOGI5MGFiOTQ5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJUdWVzZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzBhZDlhOGY5ZTk1YlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV2VkbmVzZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzE5NWE0YjI5MGJjOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGh1cnNkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYWJlOGM4OWIwOTk5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGcmlkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMmI1YjhhNzlmYTRhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTYXR1cmRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8xYTc4Y2I3OWM4Y2JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiSmFudWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2U5OTk3YTc4MGIzYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVicnVhcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9iOGM5ZWJlYjBiODlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1hcmNoXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYjgzYmRhMmI5YmU4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBcHJpbFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzI5YmFlYTdiMjhhYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWF5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNmEzODk5ZmFkOTA5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJKdW5lXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMzg0YWViMWFmYThhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJKdWx5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNDhiOGNiYTg3YjhhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBdWd1c3RcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9mYTBiMWE2YmFiOGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcHRlbWJlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2RhODgwYjhhZjg0OVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2N0b2JlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2JhYmJhODE4Njk2OFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTm92ZW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9kYTU4MmJmYWY5YjlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRlY2VtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYmExYmFiNGEzYTI4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbW9vbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTW9vblwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogMjkuNTMwNTg4ODUzLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDkuMjQ5NTMsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VDb2xvcjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYTlhYjE4NmIxODE5XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbGVhcERheXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVhcCBEYXlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJsZWFwZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsOiA0MDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJjYWxhcnk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9iOTFhZDg2YTg4N2FcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJlZm9yZSBDaHJpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogXCJZZWFyIHt7YWJzX3llYXJ9fSAtIHt7ZXJhX25hbWV9fVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogMzFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFubm8gRG9taW5pXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiWWVhciB7e3llYXJ9fSAtIHt7ZXJhX25hbWV9fVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgb2Zmc2V0OiAyXG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkF0IHRoZSBzdW1tZXIgc29sc3RpY2UsIHRoZSBTdW4gdHJhdmVscyB0aGUgbG9uZ2VzdCBwYXRoIHRocm91Z2ggdGhlIHNreSwgYW5kIHRoYXQgZGF5IHRoZXJlZm9yZSBoYXMgdGhlIG1vc3QgZGF5bGlnaHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTk5XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ludGVyIFNvbHN0aWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIHdpbnRlciBzb2xzdGljZSBtYXJrcyB0aGUgc2hvcnRlc3QgZGF5IGFuZCBsb25nZXN0IG5pZ2h0IG9mIHRoZSB5ZWFyLCB3aGVuIHRoZSBzdW4gaXMgYXQgaXRzIGxvd2VzdCBhcmMgaW4gdGhlIHNreS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ2MDBcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcHJpbmcgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBlcXVpbm94IG1hcmtzIHRoZSBkYXkgYW5kIHRoZSBuaWdodCBpcyBlcXVhbGx5IGFzIGxvbmcuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NjAxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXV0dW1uIEVxdWlub3hcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgZXF1aW5veCBtYXJrcyB0aGUgZGF5IGFuZCB0aGUgbmlnaHQgaXMgZXF1YWxseSBhcyBsb25nLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDYwMlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNocmlzdG1hc1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNocmlzdG1hcyBpcyBhIENocmlzdGlhbiBob2xpZGF5IGNlbGVicmF0aW5nIHRoZSBiaXJ0aCBvZiBDaHJpc3QuIER1ZSB0byBhIGNvbWJpbmF0aW9uIG9mIG1hcmtldGFiaWxpdHkgYW5kIGxvbmcgbGFzdGluZyB0cmFkaXRpb25zIGl0IGlzIHBvcHVsYXIgZXZlbiBhbW9uZyBtYW55IG5vbi1DaHJpc3RpYW5zLCBlc3BlY2lhbGx5IGluIGNvdW50cmllcyB0aGF0IGhhdmUgYSBzdHJvbmcgQ2hyaXN0aWFuIHRyYWRpdGlvbi5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ2MDNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyNSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDExXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJjaHJpc3RpYW4taG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhc2NoYWwgRnVsbCBNb29uXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIGZpcnN0IGZ1bGwgbW9vbiBhZnRlciBtYXJjaCAyMXN0LCB3aGljaCBpcyBjb25zaWRlcmVkIHRoZSBmaXhlZCBkYXRlIGZvciB0aGUgc3ByaW5nIGVxdWlub3guXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NjA0XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcImNocmlzdGlhbi1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRWFzdGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiRWFzdGVyIGlzIGNvbnNpZGVyZWQgdGhlIG1vc3QgaW1wb3J0YW50IGZlYXN0IGZvciBDaHJpc3RpYW5zLCBjZWxlYnJhdGluZyB0aGUgcmVzdXJyZWN0aW9uIG9mIENocmlzdC4gSXQgaXMgY2xhc3NlZCBhcyBhIG1vdmVhYmxlIGZlYXN0IG9jY3VycmluZyBvbiB0aGUgZmlyc3QgZnVsbCBtb29uIGFmdGVyIHRoZSBzcHJpbmcgZXF1aW5veCwgd2hpY2ggaXMgY29uc2lkZXJlZCB0byBiZSBmaXhlZCBhdCBNYXJjaCAyMXN0IGZvciB0aGUgc2FrZSBvZiBjb21wdXRpbmcgdGhlIGRhdGUuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NjA1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcImNocmlzdGlhbi1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRWFzdGVyIE1vbmRheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBNb25kYXkgZm9sbG93aW5nIHRoZSBFYXN0ZXIgU3VuZGF5IGlzIG9mdGVuIGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgRWFzdGVyIENlbGVicmF0aW9uIGFuZCBpcyBhIGRheSBvZmYgaW4gbWFueSBjb3VudHJpZXMgd2l0aCBhIHN0cm9uZyBDaHJpc3RpYW4gdHJhZGl0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDYwNlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJjaHJpc3RpYW4taG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdvb2QgRnJpZGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiR29vZCBGcmlkYXkgaXMgdGhlIEZyaWRheSBwcmVjZWRpbmcgRWFzdGVyLiBJdCBjb21lbW1vcmF0ZXMgdGhlIGNydWNpZml4aW9uIG9mIENocmlzdCBhY2NvcmRpbmcgdG8gdGhlIEJpYmxlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDYwN1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJjaHJpc3RpYW4taG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBlbnRlY29zdFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNlbGVicmF0ZWQgZXhhY3RseSA1MCBkYXlzIGFmdGVyIEVhc3RlciwgUGVudGVjb3N0IGlzIHRoZSBjZWxlYnJhdGlvbiBvZiB0aGUgSG9seSBTcGlyaXQgYXBwZWFyaW5nIGJlZm9yZSB0aGUgQXBvc3RsZXMgYXMgZGVzY3JpYmVkIGluIHRoZSBCaWJsZS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ2MDhcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwiY2hyaXN0aWFuLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJOZXcgWWVhcidzIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIk5ldyBZZWFyJ3MgRGF5IG1hcmtzIHRoZSBzdGFydCBvZiBhIG5ldyB5ZWFyIG9uIHRoZSBHcmVnb3JpYW4gQ2FsZW5kYXIuIEl0IHN0YXJ0cyB3aGVuIHRoZSBjbG9jayBzdHJpa2VzIG1pZG5pZ2h0IGFuZCBpcyBvZnRlbiBjZWxlYnJhdGVkIHdpdGggZmlyZXdvcmtzLCBjaGFtcGFnbmUgYW5kIGtpc3NpbmcuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NjA5XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcInNlY3VsYXItaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhbGVudGluZSdzIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlZhbGVudGluZSdzIGRheSBpcyBhIGNlbGVicmF0aW9uIG9mIGxvdmUgYW5kIHJvbWFuY2UgdGhhdCBpcyBwb3B1bGFyIGFjcm9zcyB0aGUgd29ybGQuIE1hbnkgbW9yZSBjeW5pY2FsbHkgbWluZGVkIHBlb3BsZSBtb3N0bHkgY29uc2lkZXIgaXQgYW4gYXR0ZW1wdCB0byBtb25ldGl6ZSB0aGUgZXhwZWN0YXRpb24gb2Ygcm9tYW50aWMgZ2VzdHVyZXMgb24gdGhlIGhvbGlkYXkgdGhyb3VnaCBnaWZ0IGNhcmRzLCBmbG93ZXJzLCBjaG9jb2xhdGUgYW5kIGRhdGVzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDYxMFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE0LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGFsbG93ZWVuXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgICdIYWxsb3dlZW4gaXMgaG9saWRheSBwb3B1bGFyIGluIHRoZSBVUywgQ2FuYWRhIGFuZCBJcmVsYW5kIHRoYXQgaGFzIGdyYWR1YWxseSBiZWVuIGFkb3B0ZWQgYnkgbW9yZSBhbmQgbW9yZSBjb3VudHJpZXMuIEl0IGlzIG9mdGVuIGNlbGVicmF0ZWQgYnkgcGVvcGxlIGRyZXNzaW5nIHVwLCB1c3VhbGx5IGFzIHNvbWV0aGluZyBzY2FyeS4gQ2hpbGRyZW4gd2lsbCBvZnRlbiBnbyBmcm9tIGRvb3IgdG8gZG9vciBzaG91dGluZyBcInRyaWNrIG9yIHRyZWF0XCIgaW4gdGhlIGhvcGVzIG9mIHJlY2VpdmluZyBjYW5keSwgd2hpbGUgYWR1bHRzIHRlbmQgdG8gZ28gdG8gcGFydGllcy4nLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDYxMVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDMxLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV29yayBvbiB0aGUgZmlyc3QgdmVyc2lvbiBvZiB0aGlzIGNhbGVuZGFyIHN0YXJ0ZWQuXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQWVjaXVzIHN0YXJ0ZWQgd29yayBvbiB0aGUgZmlyc3QgdmVyc2lvbiBHcmVnb3JpYW4gQ2FsZW5kYXIgZm9yIEZhbnRhc3kgQ2FsZW5kYXIgb24gdGhpcyBkYXkuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NjEyXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjMsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IDIwMTksXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA1XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJtaXNjZWxsYW5lb3VzLWV2ZW50c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV29yayBvbiB0aGlzIHZlcnNpb24gb2YgdGhlIEdyZWdvcmlhbiBDYWxlbmRhciBzdGFydGVkLlwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIk9uIHRoaXMgZGF5LCBBZWNpdXMgc3RhcnRlZCB0byByZXdvcmsgdGhlIEdyZWdvcmlhbiBDYWxlbmRhciBmcm9tIHNjcmF0Y2ggdG8gbWFrZSBpdCB3b3JrIHdpdGggdGhlIHVwZGF0ZXMgV2FzcCBhbmQgQWxleCBpbXBsZW1lbnRlZCBzaW5jZSB0aGUgc3VtbWVyIG9mIDIwMTkuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NjEzXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IDIwMjAsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJtaXNjZWxsYW5lb3VzLWV2ZW50c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW50cm9kdWN0aW9uIG9mIHRoZSBHcmVnb3JpYW4gQ2FsZW5kYXJcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJPbiB0aGlzIGRheSBpbiAxNTgyIHRoZSBHcmVnb3JpYW4gY2FsZW5kYXIgd2FzIG9mZmljaWFsbHkgaW50cm9kdWNlZCwgZm9sbG93aW5nIFRodXJzZGF5IE9jdG9iZXIgNHRoIG9uIHRoZSBKdWxpYW4gQ2FsZW5kYXJcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ2MTRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxNSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogMTU4MixcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcImhpc3RvcmljYWwtZXZlbnRzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgIGNhdGVnb3JpZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk5hdHVyYWwgRXZlbnRzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwibmF0dXJhbC1ldmVudHNcIixcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjMkU3RDMyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaHJpc3RpYW4gSG9saWRheXNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJjaHJpc3RpYW4taG9saWRheXNcIixcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjOWIyYzJjXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTZWN1bGFyIEhvbGlkYXlzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwic2VjdWxhci1ob2xpZGF5c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwRDQ3QTFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhpc3RvcmljYWwgRXZlbnRzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiaGlzdG9yaWNhbC1ldmVudHNcIixcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjNDU1QTY0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNaXNjZWxsYW5lb3VzIEV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcIm1pc2NlbGxhbmVvdXMtZXZlbnRzXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzAyODhEMVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDYWxlbmRhciBvZiBHcmV5aGF3a1wiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDYWxlbmRhciBvZiB0aGUgd29ybGQgb2YgR3JleWhhd2suXCIsXG4gICAgICAgIHN0YXRpYzoge1xuICAgICAgICAgICAgZGlzcGxheURheU51bWJlcjogZmFsc2UsXG4gICAgICAgICAgICBpbmNyZW1lbnREYXk6IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheU1vb25zOiB0cnVlLFxuICAgICAgICAgICAgZmlyc3RXZWVrRGF5OiAwLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RhcmRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9hOGU5Nzk5ODQ5MzhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bmRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8xYjY4YmI3OGNhMWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1vb25kYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYzhiODZhZWEwOTk4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJHb2RzZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2I4MDk3YTE4ZTk1YlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV2F0ZXJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMTkxOGM5OTk0OWNhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFYXJ0aGRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9mYTI5NWExYmFiODlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZyZWVkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNmE0ODVhZGEzYWU4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5lZWRmZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiA3LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9iOGE5ZTlkYThhNDhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcmVzZWVrXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMzliOTBiZDgxODlhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJSZWFkeWluZ1wiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzQ4YTkwODFhZDgzOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29sZGV2ZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF81YTdiNmJlYWRiNjhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkdyb3dmZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiA3LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF80OGM4ZDgyYjE5MDhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlBsYW50aW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMDgxYTc5M2E0OWRhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGbG9ja3RpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9lYjY4YTg5YTBhMmFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIldlYWxzdW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF85YjNhMDk4YWU5MDhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJpY2hmZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiA3LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9mOTliNGIzYTA4YjhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJlYXBpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9lYmU5ZWI2OGVhMzlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkdvb2Rtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2ZiM2I2YWY5ODk1YlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiSGFydmVzdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMzk1YmNiMzk5YjhhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCcmV3ZmVzdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogNyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZThiOTA4MTgxYWZhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJQYXRjaHdhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9jYmRhM2IzOTk5NjlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJlYWR5J3JlYXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF81OTJhMmE2OTBiZjhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bnNlYmJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8zOWU4ZmFmOGU5YjhcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb29uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJMdW5hXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAzLFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMjkyYjRhXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2Y4OTk3YjM5YjhiOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2VsZW5lXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiA5MSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiA0NixcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzI5MmI0YVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF83YWZiYjliODhiZThcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBsZWFwRGF5czogW10sXG4gICAgICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbW1vbiBZZWFyXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiWWVhciB7e3llYXJ9fSBDWVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIHllYXI6IDU5MSxcbiAgICAgICAgICAgIGRheTogMSxcbiAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ludGVyIFNvbHN0aWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIHdpbnRlciBzb2xzdGljZSBtYXJrcyB0aGUgc2hvcnRlc3QgZGF5IGFuZCBsb25nZXN0IG5pZ2h0IG9mIHRoZSB5ZWFyLCB3aGVuIHRoZSBzdW4gaXMgYXQgaXRzIGxvd2VzdCBhcmMgaW4gdGhlIHNreS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NzNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcHJpbmcgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSA0dGggb2YgR3Jvd2Zlc3QgaXMgdGhlIGZpcnN0IGRheSBvZiBMb3cgU3VtbWVyIGluIE9lcnRoJ3MgQ2FsZW5kYXIuIFRoaXMgaXMgdGhlIHBvaW50IHdoZXJlIHRoZSBzdW4gY3Jvc3NlcyBPZXJ0aCdzIGVxdWF0b3IuIEhvbGlkYXlzIGNlbGVicmF0ZWQgb24gdGhpcyBkYXRlIGluY2x1ZGUgU2FpbnQgQ3V0aGJlcnQncyBEYXksIHRoZSBGZWFzdCBvZiBFZG9pcmEsIHRoZSBTcHJpbmcgRmVhc3QsIGFuZCBSYXhpdm9ydCdzIE9yZ3kuIFRoaXMgaXMgYWxzbyB0aGUgZGF5IG9uIHdoaWNoIHRoZSBwcmllc3RzIG9mIFRsYWxvYyByaXR1YWxseSBzYWNyaWZpY2UgYW5kIGVhdCB0aGUgZmxlc2ggb2YgaHVtYW4gY2hpbGRyZW4gb3IgYmFiaWVzIGluIHRoZWlyIHBhdHJvbidzIGhvbm9yLiBXb3JzaGlwcGVycyBvZiBSaWxsaWZhbmUgUmFsbGF0aGlsIGNlbGVicmF0ZSB0aGUgQnVkZGluZyBvbiB0aGlzIGRheSwgYSBqb3lmdWwgY2VsZWJyYXRpb24gb2YgbmV3IGxpZmUgY2VsZWJyYXRlZCB0aHJvdWdoIGRhbmNlIGFuZCBzb25nIGluIG9hayBncm92ZXMgaW4gdGhlIGhlYXJ0IG9mIHRoZSBmb3Jlc3QuIEEgcml0dWFsIGh1bnQgb2YgYSBub2JsZSBoZWFydCBpcyBoZWxkIG9uIHRoaXMgZGF5LCBhZnRlciB3aGljaCB0aGUgdmVuaXNvbiBpcyBlYXRlbiBpbiBjZWxlYnJhdGlvbiBvZiBSaWxsaWZhbmUncyBib3VudHkuXFxuXFxuQWxzbyBjZWxlYnJhdGVkIG9uIHRoaXMgZGF0ZSBpcyB0aGUgU2FuY3RpZmljYXRpb24gb2YgUmVuZXdhbCwgYSBzYWNyZWQgaG9saWRheSB0byB0aGUgZm9sbG93ZXJzIG9mIEdhcnl4LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU3NFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlxcdEF0IHRoZSBzdW1tZXIgc29sc3RpY2UsIHRoZSBTdW4gdHJhdmVscyB0aGUgbG9uZ2VzdCBwYXRoIHRocm91Z2ggdGhlIHNreSwgYW5kIHRoYXQgZGF5IHRoZXJlZm9yZSBoYXMgdGhlIG1vc3QgZGF5bGlnaHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTc1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXV0dW1uIEVxdWlub3hcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgNHRoIG9mIEJyZXdmZXN0IGlzIHRoZSBBdXR1bW5hbCBFcXVpbm94LCB3aGVuIHRoZSBzdW4gY3Jvc3NlcyB0aGUgZXF1YXRvciBmcm9tIG5vcnRoIHRvIHNvdXRoLiBUaGlzIGRhdGUgaXMgdGhlIG9mZmljaWFsIGVuZCBvZiBoaWdoIHN1bW1lciBhbmQgdGhlIGJlZ2lubmluZyBvZiBhdXR1bW4gb24gdGhlIEdyZXloYXdrIENhbGVuZGFyLiBUaGlzIGRhdGUgaXMgaG9seSB0byBXZW50YSBhbmQgaXMgc29tZXRpbWVzIHJlZ2FyZGVkIGFzIGFuIHVub2ZmaWNpYWwgaG9seSBkYXkgb2YgVmVsbml1cy4gQW1vbmcgdGhlIHh2YXJ0cywgaXQgYWxzbyBtYXJrcyB0aGUgY2VsZWJyYXRpb24gb2YgUmF4aXZvcnQncyBPcmd5LiBUaGUgd29yc2hpcHBlcnMgb2YgUmlsbGlmYW5lIFJhbGxhdGhpbCBjZWxlYnJhdGUgdGhlIFRyYW5zZm9ybWF0aW9uIG9uIHRoaXMgZGF5LCBhIHRpbWUgb2YgZGFuY2luZyBhbmQgc3Bpcml0dWFsIHJlYmlydGggbWFya2luZyB0aGUgYmVnaW5uaW5nIG9mIGF1dHVtbiBhbmQgdGhlIHByb21pc2UgdGhhdCBzcHJpbmcgd2lsbCBjb21lIGFnYWluLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU3NlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyZWF0IE1vb25zIEdsb3J5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIG5pZ2h0IG9mIEdyZWF0IE1vb24ncyBHbG9yeSBvbiBSZWFkeWluZyAxMXRoLCB3aGVuIEx1bmEgaXMgZnVsbCBidXQgQ2VsZW5lIGlzIG5ldy4gSXQgaXMgaG9seSB0byBDZWxlc3RpYW4sIGFuZCBhIHRpbWUgd2hlbiBvZmZlcmluZ3MgYXJlIGxlZnQgdG8gQXRyb2EgdG8gYmVnIGhlciB0byBjb21lIGVhcmx5IGFuZCB0byBUZWxjaHVyIHRvIHJlcXVlc3QgdGhhdCBoZSBwZWFjZWZ1bGx5IGxlYXZlLiBEcnVpZHMgb2YgdGhlIE9sZCBGYWl0aCBhcmUga25vd24gdG8gYWxzbyBob2xkIHRoaXMgbmlnaHQgYXMgYXVzcGljaW91cywgYnV0IGZldyBvdXRzaWRlIHRoZWlyIGNpcmNsZXMga25vdyB0aGUgZGV0YWlscy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NzdcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYXJrIE5pZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiRGFyayBOaWdodCwgYWxzbyBjYWxsZWQgQmxhY2sgTmlnaHQsIFN0YXIgTmlnaHQsIGFuZCB0aGUgTmlnaHQgb2YgSG9wZWZ1bCBEYXduLCBpcyBvYnNlcnZlZCBvbiBHb29kbW9udGggMTEuIEl0IGlzIGEgaG9seSBuaWdodCBmb3IgdGhlIGNodXJjaCBvZiBDZWxlc3RpYW4gYmVjYXVzZSB0aGUgc3RhcnMgYXJlIHNvIGVhc3kgdG8gb2JzZXJ2ZSB3aXRob3V0IHRoZSBsaWdodCBvZiBvbmUgb2YgdGhlIG1vb25zIGdldHRpbmcgaW4gdGhlIHdheS5cXG5cXG5JdCBpcyBhbHNvIGEgaG9seSBuaWdodCBmb3IgdGhlIGNodXJjaCBvZiBSYW8sIHdobyByZWZlciB0byBpdCBhcyB0aGUgTmlnaHQgb2YgSG9wZWZ1bCBKdWRnbWVudC4gVGhleSBiZWxpZXZlIHRoYXQgUmFvIGNob29zZXMgdGhpcyB0aW1lIHRvIHNlcGFyYXRlIHRoZSBzaW5mdWwgZnJvbSB0aGUgcmlnaHRlb3VzIGluIHRoZSBhZnRlcndvcmxkLiBUaGVyZSBpcyBhbHNvIGEgcHJvcGhlY3kgaW4gdGhlIFJhb2FuIGhvbHkgdGV4dCwgdGhlIEJvb2sgb2YgSW5jYXJ1bSwgdGhhdCBjbGFpbXMgdGhhdCBSYW8gd2lsbCBjbGVhbnNlIHRoZSB3b3JsZCBvZiBldmlsIG9uIHRoaXMgbmlnaHQsIHNvbWV0aW1lIGluIHRoZSBmdXR1cmUuXFxuXFxuVGhlIHByaWVzdGhvb2Qgb2YgS3VyZWxsIGNvbnNpZGVyIGl0IGhvbHksIHRvbywgY2FsbGluZyBpdCBLdXJlbGwncyBOaWdodCwgcmVxdWlyaW5nIHRoZSBmYWl0aGZ1bCB0byB1bmRlcnRha2Ugc3BlY2lhbCBtaXNzaW9ucyBvbiB0aGlzIG5pZ2h0IHRvIHByb3ZlIHRoZWlyIGNsZXZlcm5lc3MgYW5kIHNraWxsLiBLdXJlbGwgc21pbGVzIHBhcnRpY3VsYXJseSBvbiBhY3RzIG9mIHRoZWZ0IG9yIHZlbmdlYW5jZSBwZXJmb3JtZWQgb24gaGlzIGhvbHkgbmlnaHQsIGJsZXNzaW5nIHRob3NlIHdobyBkbyBzbyBzdWNjZXNzZnVsbHkuIERvbmF0aW9ucyB0byBLdXJlbGwncyBjaHVyY2ggYXJlIGVuY291cmFnZWQgYWZ0ZXJ3YXJkcywgZm9yIEt1cmVsbCBtYXkgdGFrZSB2ZW5nZWFuY2UgYWdhaW5zdCB0aG9zZSB3aG8gZG8gbm90IHByb3Blcmx5IHRoYW5rIGhpbSBmb3IgaGlzIGFpZC5cXG5cXG5Nb3N0IG90aGVyIHBlb3BsZSByZWdhcmQgRGFyayBOaWdodCBhcyBhIHRpbWUgb2YgaWxsIG9tZW4sIGZlYXJpbmcgaXQgYXMgbXVjaCBhcyB0aGUgbmlnaHQgb2YgdGhlIEJsb29kIE1vb24gRmVzdGl2YWwuIEJvbmZpcmVzIGFyZSBidXJuZWQgZnJvbSBkdXNrIHRpbGwgZGF3biwgcGFydGljdWxhcmx5IGluIHNtYWxsIHZpbGxhZ2VzIGFuZCBpbiBFbG1zaGlyZSBhbmQgTmFyd2VsbC4gT3JjIGFuZCBnb2JsaW4gcmVsaWdpb25zIHZpZXcgaXQgYXMgYW4gZXhjZWxsZW50IG5pZ2h0IGZvciByYWlkaW5nIHNldHRsZW1lbnRzLiBDZXJ0YWluIGV2aWwgY3VsdHMgcGVyZm9ybSBraWRuYXBwaW5ncywgbXVyZGVycywgYW5kIHZpbGUgcml0ZXMgZHVyaW5nIHRoaXMgcGVyaW9kLiBPbiB0aGUgb3RoZXIgaGFuZCwgbHljYW50aHJvcGljIGFjdGl2aXR5IGlzIGF0IGl0cyBsb3dlc3QuXFxuXFxuSWdnd2lsdiBhbmQgVHVlcm55IGF0dGVtcHRlZCB0byBzdW1tb24gYSBkZW1vbmljIGFybXkgdG8gTHVuYSBvbiB0aGlzIG5pZ2h0IGluIDU4NSBDWS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NzhcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBZ2Vsb25nXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQWdlbG9uZywgb2JzZXJ2ZWQgb24gdGhlIDR0aCBvZiBSaWNoZmVzdCAodGhlIFN1bW1lciBTb2xzdGljZSksIGlzIHRoZSBjZWxlYnJhdGlvbiBvZiB0aGUgbGVnZW5kYXJ5IGNyZWF0aW9uIG9mIHRoZSBlbHZlcy4gQWNjb3JkaW5nIHRvIG15dGgsIGFmdGVyIENvcmVsbG9uIExhcmV0aGlhbiBzcGlsbGVkIGhpcyBibG9vZCBkdXJpbmcgdGhlIGJhdHRsZSB3aXRoIEdydXVtc2gsIHRoZSByZXN0IG9mIHRoZSBTZWxkYXJpbmUgZ2F0aGVyZWQgdGhpcyBzYWNyZWQgYmxvb2QgYW5kIG1pbmdsZWQgaXQgd2l0aCB0aGUgdGVhcnMgc2hlZCBkdXJpbmcgdGhlIHNhbWUgYmF0dGxlIGJ5IFNlaGFuaW5lIE1vb25ib3cuIFRoZSBTZWxkYXJpbmUgdGhlbiBpbmZ1c2VkIHRoZXNlIGRpdmluZSBmbHVpZHMgaW50byB2ZXNzZWxzIHRoZXkgaGFkIGNyZWF0ZWQgdG8gYmUgdGhlIGJvZGllcyBvZiB0aGUgZWx2ZW4gcmFjZS5cXG5cXG5UaGlzIGRheSBpcywgYW1vbmcgdGhlIGVsdmVzLCBtb3N0bHkgYW4gZXhjdXNlIHRvIGdvIG9yYy1odW50aW5nLiBFbHZlbiB3YXJyaW9ycyBjdXQgdGhlbXNlbHZlcyB3aXRoIGRhZ2dlcnMgY2FydmVkIGZyb20gdm9sY2FuaWMgZ2xhc3MgdG8gcmVtaW5kIHRoZW1zZWx2ZXMgb2YgQ29yZWxsb24ncyBvd24gd291bmQgZnJvbSBHcnV1bXNoJ3Mgc3BlYXIsIHRoZW4gc3RyaXZlIHRvIHNsYXVnaHRlciBhcyBtYW55IG9yY3MgYXMgcG9zc2libGUgZHVyaW5nIHRoZSBuaWdodC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NzlcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA0LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCbG9vZCBNb29uIEZlc3RpdmFsXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIEJsb29kIE1vb24gRmVzdGl2YWwgaXMgY2VsZWJyYXRlZCBvbiBDb2xkZXZlbiAxMSwgdGhlIG5pZ2h0IHdoZW4gTHVuYSBpcyBmdWxsIGp1c3QgYmVmb3JlIHRoZSBTcHJpbmcgRXF1aW5veC4gT24gdGhpcyBuaWdodCwgY3Vyc2VzIGFyZSBzYWlkIHRvIGJlIHR3aWNlIGFzIHBvd2VyZnVsIGFuZCB0aGUgZm9yY2VzIG9mIGV2aWwgYXJlIGF0IHRoZWlyIHN0cm9uZ2VzdC4gRmllbmRzIHJvYW0gdGhlIGxhbmRzLCBhbmQgaHVtYW4gc2FjcmlmaWNlIGlzIGNvbW1vbi4gVGhpcyBuaWdodCBpcyBoZWxkIGVzcGVjaWFsbHkgc2FjcmVkIGJ5IGN1bHRpc3RzIG9mIE5lcnVsbCwgYnV0IHdvcnNoaXBlcnMgb2YgS3VyZWxsIGFsc28gbWFyayB0aGlzIG5pZ2h0IGFzIGVzcGVjaWFsbHkgYXVzcGljaW91cyBmb3IgYWN0cyBvZiB2ZW5nZWFuY2UuIEdvb2RseSBmb2xrIHN1cGVyc3RpdGlvdXNseSBndWFyZCB0aGVpciBob21lcyB3aXRoIGhvcnNlc2hvZXMsIGhvbHkgd2F0ZXIsIGJvdHRsZXMgb2YgbWlsaywgYW5kIGlyb24gZmlsaW5ncy5cXG5cXG5EZW1vbmljIGZvcmNlcyBzZW50IGJ5IEl1eiBkZXN0cm95ZWQgdGhlIGxlYWRlcnNoaXAgb2YgdGhlIEhvcm5lZCBTb2NpZXR5IGR1cmluZyB0aGUgQmxvb2QgTW9vbiBGZXN0aXZhbCBvZiA1ODMgQ1kuXFxuXFxuSXQncyBwb3NzaWJsZSB0aGF0IHRoaXMgaXMgYWxzbyB0aGUgbmlnaHQgdGhlIGVsdmVzIGNlbGVicmF0ZSBhcyBGYWVyaWVsdWNrLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU4MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDExLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmVhZGdpdmluZyBEYXlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJDZWxlYnJhdGVkIG9uIG9uIHRoZSBXaW50ZXIgU29sc3RpY2UgKE5lZWRmZXN0IDQpLCBCcmVhZGdpdmluZyBEYXksIGlzIGEgZGF5IG9mIGNoYXJpdHkgb2JzZXJ2ZWQgaW4gdGhlIEZyZWUgQ2l0eSBvZiBHcmV5aGF3ayBieSB0aGUgZmFpdGhzIG9mIFBlbG9yLCBSYW8sIGFuZCBTYWludCBDdXRoYmVydC5cXG5cXG5UaGlzIHdhcyBub3Qgb3JpZ2luYWxseSBhIHJlbGlnaW91cyBob2xpZGF5IGFzIHN1Y2guIEl0IGlzIGEgbmV3IHByYWN0aWNlIHRoYXQgYmVnYW4gYWZ0ZXIgdGhlIEdyZXloYXdrIFdhcnMgdG8gZmVlZCB0aGUgcmVmdWdlZXMgdGhhdCBmbG9vZGVkIHRoZSBjaXR5IGR1cmluZyB0aGF0IHRpbWUuIFNpbmNlIG9mIE9sZCBDaXR5IHdobyBsaW5lIHVwIGJ5IHRoZSBodW5kcmVkcyBhbG9uZyB0aGUgUHJvY2Vzc2lvbmFsIGZyb20gdGhlIEJsYWNrIEdhdGUuIFRoZSBib290aHMgYXJlIHdvcmtlZCBieSBsb3ctcmFua2luZyBwcmllc3RzIGZyb20gYWxsIHRocmVlIHJlbGlnaW9ucywgd2l0aCBhcm1lZCBwcmllc3RzIG9mIFN0LiBDdXRoYmVydCBwcm92aWRpbmcgc2VjdXJpdHkuIEEgc21hbGxlciBldmVudCBpcyBoZWxkIHNpbXVsdGFuZW91c2x5IGJlbG93IFdoYXJmZ2F0ZSBpbiBHcmV5aGF3ayBDaXR5J3MgU2hhY2t0b3duLlxcblxcblRoZSBjbGVyZ2llcyBvZiBIZWlyb25lb3VzLCBQaG9sdHVzLCBhbmQgVHJpdGhlcmVvbiBkbyBub3QgcGFydGljaXBhdGUsIGJ1dCB0aGV5IGNvbXBldGUgd2l0aCBvbmUgYW5vdGhlciB0byBwZXJmb3JtIGdvb2QgZGVlZHMgdGhlIHdob2xlIHdlZWsgb2YgTmVlZGZlc3QuIFRoZSByaXZhbHJpZXMgYmV0d2VlbiBUcml0aGVyZW9uIGFuZCBQaG9sdHVzLCBUcml0aGVyZW9uIGFuZCBIZWlyb25lb3VzLCBhbmQgUGhvbHR1cyBhbmQgU3QuIEN1dGhiZXJ0IGFyZSBzdWNoIHRoYXQgdGhlIGZhaXRocyBzb21ldGltZXMgZmFsbCBpbnRvIGFyZ3VtZW50cyBhbmQgZXZlbiBibG93cyBpZiB0aGVpciBcXFwiZ29vZCBkZWVkc1xcXCIgY29uZmxpY3Qgd2l0aCBlYWNoIG90aGVyLiBHcmV5aGF3aydzIHJvd2R5IGNpdGl6ZW5zIG9mdGVuIGNoZWVyIGFuZCBwbGFjZSBiZXRzIG9uIHRoZSBvdXRjb21lcyBvZiB0aGVzZSBxdWFycmVscy5cXG5cXG5UaGUgcHJpZXN0cyBvZiBQZWxvciBob2xkIGEgbW9ybmluZyBjZXJlbW9ueSBvbiB0aGlzIGRheSB3aXRoIGEgc2VybW9uLCBzaW5naW5nLCBhbmQgbXVzaWMuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTgxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogNCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJld2Zlc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJBbHNvIGNhbGxlZCBEcnVua2VuIERheXMgb3IgdGhlIEZlYXN0IG9mIEJyZXdlcnMsIEJyZXdmZXN0LCB0aGUgZm91cnRoIGZlc3RpdmFsIHdlZWsgb2YgT2VydGgncyBjYWxlbmRhciwgaXMgYSByb3dkeSBwZXJpb2QgdW5zdXJwcmlzaW5nbHkgY2xhaW1lZCBhcyBhIGhvbHkgdGltZSBieSB0aGUgY2h1cmNoZXMgb2YgT2xpZGFtbWFyYSBhbmQgV2VudGEuIFRoZSBGcmVlIENpdHkgb2YgR3JleWhhd2sgZG9lcyBub3QgY2VsZWJyYXRlIHRoZSBlbnRpcmUgd2VlaywgYnV0IEJyZXdmZXN0IDEgYW5kIEJyZXdmZXN0IDcgYXJlIGJvdGggc2V0IGFzaWRlIGFzIHB1YmxpYyBob2xpZGF5cy4gSW4gRWxtc2hpcmUsIHRoZSB3ZWVrIGlzIHNwZW50IGluIHJlc3RmdWwsIGNhcmVmcmVlIG11c2ljLCBkcmlua2luZywgYW5kIGRhbmNpbmcuIEluIEhhcmRieSBpdCBpcyBzcGVudCB3aXRoIGZpc3RmaWdodHMsIHJpb3RzLCBhbmQgZW5zdWluZyBoYW5nb3ZlcnMuIEluIE5hcndlbGwgaXQgaXMgY2VsZWJyYXRlZCB3aXRoIGFsZS1icmV3aW5nIGNvbnRlc3RzLCBob3JzZSByYWNlcywgYmVhdGluZ3MsIGFuZCByb2JiZXJ5LiBJbiBTYWZldG9uIGl0IGlzIGNlbGVicmF0ZWQgd2l0aCBuZXJ2b3VzIHZpb2xlbmNlIGFuZCBuaWdodGx5IG9yYyBodW50cy4gVGhlIHdlZWsgaXMgYWxzbyBzYWNyZWQgdG8gdGhlIE9sZCBGYWl0aC5cXG5cXG5UaGUgZWx2ZXMgY2FsbCB0aGlzIHdlZWsgRmFsbHJpdGUsIGFuZCB1c2UgaXQgdG8gY29udGVtcGxhdGUgdGhlIHNwaXJpdHMgb2YgdGhlaXIgYW5jZXN0b3JzLCB0aGUgcGFzc2FnZSB0byB0aGUgYWZ0ZXJ3b3JsZCwgYW5kIHRoZSBmcmFnaWxpdHkgb2YgbGlmZS4gVGhleSBiZWxpZXZlIG90aGVyIHJhY2VzIG1ha2UgbWVycnkgZHVyaW5nIEJyZXdmZXN0IGJlY2F1c2UgdGhleSBhcmUgXFxcImhpZGluZ1xcXCIgdG8gYXZvaWQgZmFjaW5nIGRlYXRoJ3MgcmVhbGl0eS4gSW4gY29udHJhc3QsIHRoZSBvbHZlbmZvbGsgc3RyaXZlIHRvIGZ1bGZpbGwgdGhlIG1vc3QgaW1wb3J0YW50IG9mIHRoZWlyIGR1dGllcyBhbmQgcmVhY2ggdGhlIG1vc3QgY3J1Y2lhbCBvZiB0aGVpciBkZWNpc2lvbnMgZHVyaW5nIHRoaXMgdGltZSBvZiB5ZWFyLiBUaGUgZWx2ZW4ga2luZ3MgYW5kIHF1ZWVucyB0cmFkaXRpb25hbGx5IGp1ZGdlIGNhcGl0YWwgY2FzZXMgZHVyaW5nIEZhbGxyaXRlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU4MlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDQsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWVyaWVsdWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiRmFlcmllbHVjayBpcyBhIGhvbGlkYXkgY2VsZWJyYXRlZCBieSB0aGUgZWx2ZXMgaW4gZWFybHkgc3ByaW5nLCB3aGVuIHRoZSBwb3dlciBvZiBGYWVyaWUgcnVucyBoaWdoIGFuZCB0aGV5IGNlbGVicmF0ZSB3aXRoIHRoZWlyIGZleSBjb3VzaW5zOiB0aGUgc3ByaXRlcywgYnVja2F3bnMsIHBpeGllcywgbnltcGhzIGFuZCBzbyBmb3J0aC4gVGhlIHBvaW50IG9mIHRoZSBmZXN0aXZhbCBpcyB0byByZW1pbmQgdGhlIGVsdmVzIG9mIHRoZWlyIGFuY2llbnQga2luc2hpcCB3aXRoIHRoZXNlIGNyZWF0dXJlcy4gVGhlIGRheSBpcyBzcGVudCBwbGF5aW5nIHByYWN0aWNhbCBqb2tlcywgZW5nYWdpbmcgaW4gYmF0dGxlcyBvZiB3aXQsIGFuZCBnZW5lcmFsIG1lcnJpbWVudC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1ODNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVhc3Qgb2YgRWRvaXJhXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIEZlYXN0IG9mIEVkb2lyYSBpcyBhIGhvbGlkYXkgY2VsZWJyYXRlZCBpbiB0aGUgRG9tYWluIG9mIEdyZXloYXdrIG9uIEdyb3dmZXN0IDQsIGR1cmluZyB0aGUgU3ByaW5nIEVxdWlub3guIEl0IGlzIG5hbWVkIGFmdGVyIEVkb2lyYSwgYSBwcmllc3Qgb2YgUmFvIHdobyBjZW50dXJpZXMgYWdvIGVzdGFibGlzaGVkIHRoZSBFZG9pcmFuIENvbXBhY3QsIGEgcGFjdCBieSB3aGljaCBtYW55IG9mIHRoZSBsYXdmdWwgZ29vZC1hbGlnbmVkIGZhaXRocyBhbmQgcGVvcGxlIG9mIHRoZSBEb21haW4gY291bGQgYWdyZWUgdG8gY29vcGVyYXRlLiBUaGUgQ29tcGFjdCB3YXMgbGF0ZXIgZXh0ZW5kZWQgdG8gbm9uLWxhd2Z1bCBnb29kIGFuZCBuZXV0cmFsIGZhaXRocy5cXG5cXG5FZG9pcmEgd2FzIG5ldmVyIGRlaWZpZWQgYnV0IHdhcyByZXZlcmVkIGJ5IG1hbnkgZ29vZCBmYWl0aHMgaW4gdGhlIERvbWFpbi4gVGhlIGhvbGlkYXkgd2FzIG1hcmtlZCBieSByZWxpZ2lvdXMgc2VydmljZXMgb24gR29kc2RheSBvZiBHcm93ZmVzdCBsZWQgYnkgdGhlIGNsZXJpY3Mgb2YgdGhlIGdvb2QgZmFpdGhzIHdobyBwYXJ0b29rIG9mIHRoZSBDb21wYWN0LCBhbmQgc2VjdWxhciBmZXN0aXZhbHMgYnkgdGhlIG9yZGluYXJ5IGNpdGl6ZW5yeS4gT2JzZXJ2YW5jZSBvZiB0aGUgaG9saWRheSBoYXMgZGVjbGluZWQgb3ZlciB0aGUgeWVhcnMsIHRob3VnaCB0aGUgY2xlcmdpZXMgb2YgUmFvIGFuZCBQZWxvciBzdGlsbCBob2xkIHRoZWlyIHRyYWRpdGlvbmFsIGludGVyZmFpdGggc2VydmljZXMsIHdpdGggb2NjYXNpb25hbCBwYXJ0aWNpcGF0aW9uIGJ5IHRoZSBwcmllc3Rob29kcyBvZiBIZWlyb25lb3VzIGFuZCBNYXlhaGVpbmUuIFNpbmNlIHRoZSBlbmQgb2YgdGhlIEdyZXloYXdrIFdhcnMgbW9zdCBvZiB0aGUgRG9tYWluJ3Mgb3V0bHlpbmcgY29tbXVuaXRpZXMgbm8gbG9uZ2VyIG9ic2VydmUgdGhlIGhvbGlkYXkuIE9ubHkgb25lIGNodXJjaCBpbiBTYWZldG9uIHN0aWxsIGRvZXMgc28uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTg0XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogNCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGVzcG9ydGl1bSBvZiBNYWdpY1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBoaWdobGlnaHQgb2YgR3Jvd2Zlc3QgaXMgdGhlIERlc3BvcnRpdW0gb2YgTWFnaWMuIER1cmluZyB0aGlzIGRheSB0b3JjaGxpZ2h0IG9ubHksIG5vIG1hZ2ljIGlsbHVtaW5hdGlvbiBpcyBzdXBwb3NlZCB0byBiZSB1c2VkLiBXaXphcmRzIGFuZCBTb3JjZXJlcnMgdGhlbiBwZXJmb3JtIGZlYXRzIG9mIGlsbHVzaW9uIGFuZCBtYWdpYyB0cnlpbmcgdG8gb3V0ZG8gb25lIGFub3RoZXIgd2l0aCB0aGVpciBkaXNwbGF5cy4gVXN1YWxseSB0aGVyZSBpcyBhIHBhbmVsIG9mIGp1ZGdlcyB0byBkZWNpZGUsIGluIHRoZSBsYXJnZXIgY2l0aWVzIHRoZXJlIGlzIHVzdWFsbHkgYSBsaW1pdCBvZiA1LXBlcnNvbiB0ZWFtcyBjb21wZXRpbmcuIEVhY2ggcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBEZXNwb3J0aXVtIG9mIE1hZ2ljIHVzZXMgYSBsb25nIGVzdGFibGlzaGVkIHRoZW1lLCB0aGF0IG9mIGFuIGF0dGFjayBvbiB0aGUgdG93biBieSB2YXJpb3VzIG1vbnN0ZXJzIGFuZCBEYXJrIEVsdmVzLCByZXBlbGxlZCBieSBicmF2ZSB3YXJyaW9ycyBhbmQgc3BlbGxjYXN0ZXJzLiBUaGUgZGlzcGxheXMsIG1hZGUgdXAgb2YgYW55IG51bWJlciBvZiBzcGVsbHMgY2FzdCB3aXRob3V0IHRoZSB1c2Ugb2YgbWFnaWMgZGV2aWNlcywgY2Fubm90IGFjdHVhbGx5IGNhdXNlIGFueSBoYXJtIHRvIHByb3BlcnR5IG9yIHBlb3BsZSwgYnV0IG11c3QgYmUgYXMgd29uZGVyZnVsLCBzdHJpa2luZywgZGV0YWlsZWQsIGFuZCBsaWZlbGlrZSBhcyBwb3NzaWJsZS5cXG5cXG5UaGlzIG1vdGlmIGlzIGJhc2VkIG9uIGFjdHVhbCBhdHRhY2tzIHRocm91Z2ggdGhlIHllYXJzIGZyb20gdGhlIFV0dGVybW9zdCBXYXIgdG8gdGhlIG1vc3QgcmVjZW50IEdyZWF0IFNsYXZlIFJhaWRzLiBUaGUgaWRlYSBpcyB0byBtYWtlIHRoZSBhdHRhY2tlcnMgYXMgZHJlYWRmdWwgYXMgcG9zc2libGUgYW5kIHRoZSBkZWZlbmRlcnMgYXMgaGVyb2ljIGFzIHBvc3NpYmxlLCBzZWNvbmRhcnkgaXMgdG8gbWFrZSBzdXJlIHRoYXQgcGVvcGxlIHdpbGwgYWx3YXlzIHJlbWVtYmVyIHRoZSB0ZXJyb3Igb2YgdGhlIFV0dGVybW9zdCBXYXIuIEluIGxhcmdlIGNpdGllcyBsaWtlIHRoZSBDU0lPIGFuZCBDU1dFIGFuZCBUYXJhbnRpcywgdGhlc2UgcGVyZm9ybWFuY2VzIGxhc3QgYWxsIG5pZ2h0IGFuZCBhcmUgYW1hemluZyB0byB3YXRjaC4gSW4gc21hbGxlciB2aWxsYWdlcyB3aXRob3V0IHNwZWxsY2FzdGVycywgcHVwcGV0IHBsYXlzIGFyZSBvZnRlbiBkb25lIGluIGl0cyBzdGVhZC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1ODVcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA3LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb2x5IERheSBvZiBQZWxvclwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBIb2x5IERheSBvZiBQZWxvciwgYWxzbyBrbm93biBhcyBHaXZpbmcgRGF5IGFuZCBNaWRzdW1tZXIncyBEYXksIGlzIGNlbGVicmF0ZWQgb24gdGhlIFN1bW1lciBTb2xzdGljZS5cXG5cXG5CZWNhdXNlIFBlbG9yIGlzIHdpZGVseSBsb3ZlZCBieSB0aGUgY29tbW9uZXJzLCB0aGlzIGRheSBpcyBzZXQgYXNpZGUgYXMgYSBkYXkgb2YgcmVzdCBpbiB0aGUgRnJlZSBDaXR5IG9mIEdyZXloYXdrLiBPbmx5IGVzc2VudGlhbCB3b3JrIGlzIGRvbmUgb24gdGhpcyBkYXkuIE1hbnkgbWVyY2hhbnRzIGNsb3NlIHRoZWlyIHNob3BzIG9uIEdpdmluZyBEYXkgYXMgd2VsbCBvdXQgb2YgcmVzcGVjdCBmb3IgdGhlIFN1biBGYXRoZXIgYW5kIGhpcyB0ZWFjaGluZ3MuIEdhbWJsaW5nIGhvdXNlcyBhcmUgY2xvc2VkLCBidXQgbm90IGhvc3RlbHJpZXMsIGZvciBHaXZpbmcgRGF5IGlzIGEgZGF5IG9mIGZlYXN0aW5nIGFuZCBnb29kd2lsbCwgYSB0aW1lIGZvciBlbmpveWluZyB0aGUgZnJ1aXRzIG9mIHRoZSBPZXJ0aC5cXG5cXG5QdWJsaWMgc2VydmljZXMgYXJlIGhlbGQgZnJvbSBkYXduIHVudGlsIG5vb24gYnkgUGVsb3IncyBwcmllc3RzLCBvdXRkb29ycyBpZiB0aGUgd2VhdGhlciBwZXJtaXRzICh3aGljaCBpZiBhbG1vc3QgYWx3YXlzIGRvZXMsIGFzIHRoZSBjbGVyaWNzIHVzZSB3ZWF0aGVyLWNvbnRyb2xsaW5nIG1hZ2ljIGZvciBtYXhpbXVtIHN1bmxpZ2h0KS4gRXZlbiBHcmV5aGF3ayBDaXR5J3MgbGFyZ2UgdGVtcGxlIG9mIFBlbG9yIGlzIG5vdCBiaWcgZW5vdWdoIHRvIGhvbGQgdGhlIHRocm9uZ3Mgd2hvIGNvbWUgdG8gY2VsZWJyYXRlIG9uIHRoaXMgZGF5LCBzbyB0aHJvbmdzIG9mIHRoZSBmYWl0aGZ1bCBmaWxsIHRoZSB0ZW1wbGUgZ3JvdW5kcyBpbiB0aGUgR2FyZGVuIFF1YXJ0ZXIsIHNwaWxsaW5nIG91dCBmcm9tIHRoZSBNaWxsc3RyZWFtIHRvIHRoZSBOb2JsZXMnIFdhbGwsIGFuZCB0byB0aGUgcm9hZCBsZWFkaW5nIHRvd2FyZCBHcmV5aGF3aydzIEdyYW5kIFRoZWF0ZXIuIE1hbnkgY29tZSwgb2YgY291cnNlLCBmb3IgdGhlIGZyZWUgbWVhbCB0aGUgcHJpZXN0cyBwcm92aWRlIGFmdGVyIHRoZSBzZXJ2aWNlLiBUaGUgUGVsb3JpYW4gcHJpZXN0cyBhcmUgd2VsbCBhd2FyZSBvZiB0aGlzLCBidXQgYmVsaWV2ZSB0aGF0IGZvciB0aGUgbmVlZHksIGEgZnVsbCBzdG9tYWNoIG11c3QgY29tZSBiZWZvcmUgd2lzZG9tIGFuZCBsZWFybmluZy4gTWVtYmVycyBvZiBHcmV5aGF3aydzIEd1aWxkIG9mIFRoaWV2ZXMgYW5kIEJlZ2dhcidzIFVuaW9uLCBtYW55IG9mIHdob20gcmVtZW1iZXIgTWlkc3VtbWVyJ3MgRGF5IGZvbmRseSBmcm9tIHRoZWlyIG9ycGhhbmVkIGNoaWxkaG9vZHMsIGJvdGggcHJvdGVjdCBwcmllc3RzIG9mIFBlbG9yIG9uIHRoaXMgZGF5LCBhbmQgd29lIG9udG8gdGhvc2Ugd2hvIGF0dGVtcHQgdG8gdGVzdCB0aGVtIG9uIHRoaXMgbWF0dGVyLlxcblxcblByaWVzdHMgb2YgUGVsb3IsIGJlZGVja2VkIGluIHllbGxvdyBhbmQgZ29sZCwgcGFyYWRlIGFib3V0IHRoZSBzdHJlZXRzLCBkZW1hbmRpbmcgZG9uYXRpb25zIGZvciB0aGVpciBjaGFyaXRhYmxlIHdvcmtzLCBmcmVlbHkgdXNpbmcgZ3VpbHQgdG8gc3F1ZWV6ZSBtb3JlIGZyb20gc3Rpbmd5IHB1cnNlcy4gRnJlZSBoZWFsaW5ncyBhcmUgZ2l2ZW4gb3V0LCBwYXJ0aWN1bGFybHkgdG8gY2hpbGRyZW4uIE1vc3QgR3JleWhhd2tlcnMgd2VhciBhdCBsZWFzdCBvbmUgaXRlbSBvZiB5ZWxsb3cgY2xvdGggb24gdGhpcyBkYXkgb3V0IG9mIHJlc3BlY3QuXFxuXFxuU29tZSBjcnVzYWRpbmcgUGVsb3JpYW5zIGNydXNhZGUgYWdhaW5zdCBldmlsIGx5Y2FudGhyb3BlcyBvbiB0aGlzIG5pZ2h0LCBzaW5jZSBib3RoIENlbGVuZSBhbmQgTHVuYSBhcmUgZnVsbC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1ODZcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA0LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb2x5IERheSBvZiBTZXJlbml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBIb2x5IERheSBvZiBTZXJlbml0eSwgb24gUmVhcGluZyAxMCwgaXMgY2VsZWJyYXRlZCBpbiBWZWx1bmEgYXMgYSBob2x5IGRheSBvZiBSYW8sIHRob3VnaCBpdCdzIGFjdHVhbGx5IHRoZSBhbm5pdmVyc2FyeSBvZiBWZWx1bmEncyBzZWNlc3Npb24gZnJvbSBGdXJ5b25keSBpbiA0NzYgQ1kuIEl0IGlzIGNlbGVicmF0ZWQgd2l0aCByZWxpZ2lvdXMgc2luZ2luZyBhbmQgd29yc2hpcC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1ODdcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGlkOiBudWxsLFxuICAgICAgICBjYXRlZ29yaWVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJOYXR1cmFsIEV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcIm5hdHVyYWwtZXZlbnRzXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzJFN0QzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVsaWdpb3VzIEhvbGlkYXlzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiI0ZGRUIzQlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2VjdWxhciBIb2xpZGF5c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcInNlY3VsYXItaG9saWRheXNcIixcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjMEQ0N0ExXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpY2FsIEV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcIm1hZ2ljYWwtZXZlbnRzXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzMxMUI5MlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWlzY2VsbGFuZW91cyBFdmVudHNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJtaXNjZWxsYW5lb3VzLWV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwMjg4RDFcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2FsZW5kYXIgb2YgR29sYXJpb25cIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ2FsZW5kYXIgZm9yIHRoZSB3b3JsZCBvZiBQYXRoZmluZGVyLlwiLFxuICAgICAgICBzdGF0aWM6IHtcbiAgICAgICAgICAgIGRpc3BsYXlEYXlOdW1iZXI6IGZhbHNlLFxuICAgICAgICAgICAgZmlyc3RXZWVrRGF5OiAwLFxuICAgICAgICAgICAgaW5jcmVtZW50RGF5OiBmYWxzZSxcbiAgICAgICAgICAgIGRpc3BsYXlNb29uczogdHJ1ZSxcbiAgICAgICAgICAgIG92ZXJmbG93OiB0cnVlLFxuICAgICAgICAgICAgd2Vla2RheXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTW9vbmRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9kYjhhZjhmODViOGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlRvaWxkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZjg3YTA5NGIyODQ5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJXZWFsZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzJhNWJiODhiM2FlOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2F0aGRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9jOTNhMGJlODk4MWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcmVkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMmI3YjU5Nzk0YTBiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdGFyZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2JhYWE2YTg5Y2ExYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3VuZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2Y5YmFjYTA4OGIyOFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG1vbnRoczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBYmFkaXVzXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZGFkOWRhODlmODE4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDYWxpc3RyaWxcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF85ODBhODhjYjliNjhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlBoYXJhc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9hOWM5NmFjODA5MDhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkdvenJhblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2E5OWE2OTdiOWFiYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGVzbnVzXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfOGJjYWQ5YThmODRhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTYXJlbml0aFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzQ4NGE0OWE5OThkYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRXJhc3R1c1wiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzlhNDhlOWI5NjkzOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQXJvZHVzXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYmJlOTliMmFmYWVhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJSb3ZhXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYmEzOWZiZThjOGI4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJMYW1hc2hhblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzY5ZDkzYmE5ZGJhOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTmV0aFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzRhZDhmYjc5ZWI2YVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiS3V0aG9uYVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzlhM2E4YjM4ODkzOVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG1vb25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNvbWFsXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiAyOS41LFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDkuNSxcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzI5MmI0YVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9iODdhYjk1OWNhYzlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBsZWFwRGF5czogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJMZWFwIERheVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxlYXBkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDhcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJjYWxhcnk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84OGM4ZGEzYjhiMmJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFnZSBvZiBTZXJwZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcIlllYXIge3t5ZWFyfX0gLSB7e2VyYV9uYW1lfX1cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IDQ3MjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aDogOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogMTVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFnZSBvZiBEYXJrbmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcIlllYXIge3thYnNfeWVhcn19IC0ge3tlcmFfbmFtZX19XCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiAtNTMwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBZ2Ugb2YgQW5ndWlzaFwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcIlllYXIge3t5ZWFyfX0gLSB7e2VyYV9uYW1lfX1cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IC00NTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IDgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFnZSBvZiBEZXN0aW55XCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiWWVhciB7e3llYXJ9fSAtIHt7ZXJhX25hbWV9fVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogLTM1MDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aDogOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWdlIG9mIEVudGhyb25lbWVudFwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcIlllYXIge3t5ZWFyfX0gQVIgLSB7e2VyYV9uYW1lfX1cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aDogOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWdlIG9mIExvc3QgT21lbnNcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogXCJZZWFyIHt7eWVhcn19IEFSIC0ge3tlcmFfbmFtZX19XCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiA0NjA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IDgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgICAgeWVhcjogNDcyMCxcbiAgICAgICAgICAgIGRheTogMTUsXG4gICAgICAgICAgICBtb250aDogMFxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkF0IHRoZSBzdW1tZXIgc29sc3RpY2UsIHRoZSBTdW4gdHJhdmVscyB0aGUgbG9uZ2VzdCBwYXRoIHRocm91Z2ggdGhlIHNreSwgYW5kIHRoYXQgZGF5IHRoZXJlZm9yZSBoYXMgdGhlIG1vc3QgZGF5bGlnaHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDkyXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ludGVyIFNvbHN0aWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIHdpbnRlciBzb2xzdGljZSBtYXJrcyB0aGUgc2hvcnRlc3QgZGF5IGFuZCBsb25nZXN0IG5pZ2h0IG9mIHRoZSB5ZWFyLCB3aGVuIHRoZSBzdW4gaXMgYXQgaXRzIGxvd2VzdCBhcmMgaW4gdGhlIHNreS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0OTNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcHJpbmcgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBlcXVpbm94IG1hcmtzIHRoZSBkYXkgYW5kIHRoZSBuaWdodCBpcyBlcXVhbGx5IGFzIGxvbmcuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDk0XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXV0dW1uIEVxdWlub3hcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgZXF1aW5veCBtYXJrcyB0aGUgZGF5IGFuZCB0aGUgbmlnaHQgaXMgZXF1YWxseSBhcyBsb25nLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ5NVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkV0ZXJuYWwgS2lzc1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlpvbi1LdXRob25cXG5cXG5DdWxtaW5hdGluZyBvbiB0aGUgZmlyc3QgbmV3IG1vb24gb2YgdGhlIG5ldyB5ZWFyLCB0aGUgRXRlcm5hbCBLaXNzIGlzIGFuIDExIGRheSBjZXJlbW9ueSBob25vcmluZyBab24tS3V0aG9uLiBPbiB0aGUgZmluYWwgZGF5LCBhIGxpdmluZyBzYWNyaWZpY2UgaXMgbWFkZSB0byB0aGUgRGFyayBQcmluY2UsIGFmdGVyIHRoZSB2aWN0aW0gaXMgcGFtcGVyZWQgYW5kIHBsZWFzdXJlZCBmb3IgdGhlIHRlbiBkYXlzIHByaW9yLiBUaGUgc2FjcmlmaWNlIGNhbiBlaXRoZXIgYmUgYW4gZW5lbXkgb3IgYSBncmVhdCBkZXZvdGVlIG9mIHRoZSBjaHVyY2gsIGFuZCBpcyBrZXB0IGFsaXZlIGZvciBhcyBsb25nIGFzIHBvc3NpYmxlIGR1cmluZyB0aGUgdG9ydHVyZSB1c2luZyBtYWdpYy4gVGhpcyBob2xpZGF5IG9mdGVuIGludm9sdmVzIGZvcnR1bmUtdGVsbGluZyBhcyBhIHBhcnQgb2YgdGhlIHRvcnR1cmUsIHVzaW5nIHRoZSB2aWN0aW0ncyBlbnRyYWlscyBvciB0aGVpciBjcmllcyBvZiBwYWluIHRvIGRldGVybWluZSB0aGUgTWlkbmlnaHQgTG9yZCdzIHdpbGwuIE9jY2FzaW9uYWxseSBpdCBpcyBiZWxpZXZlZCB0aGF0IHRoZSBzYWNyaWZpY2Ugd2lsbCBwcm9waGVzeSB3aXRoIHRoZSB2b2ljZSBvZiBab24tS3V0aG9uIGhpbXNlbGYuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDk2XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZ25pZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTG9uZ25pZ2h0IGlzIGEgaG9saWRheSBjZWxlYnJhdGVkIG9uIHRoZSBmdWxsIG1vb24gaW4gdGhlIHdpbnRlciBtb250aCBvZiBBYmFkaXVzLiBEdXJpbmcgdGhlIGZlc3RpdmFsLCByZXZlbGVycyBzdGF5IHVwIGFsbCBuaWdodCB0byBncmVldCB0aGUgZGF3biB0byBkZWZ5IHRoZSBsb25nIHdpbnRlciBtb250aHMuIEl0IGlzIGV2ZW4gY2VsZWJyYXRlZCBpbiBJcnJpc2VuLCB3aGVyZSB0aGVyZSBhcmUgbm8gbmF0dXJhbCBzZWFzb25zLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ5N1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZvdW5kYXRpb24gRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQWJzYWxvbSwgTWlsYW5pXFxuXFxuRm91bmRhdGlvbiBEYXkgaXMgYSBjaXZpbCBob2xpZGF5IGNlbGVicmF0ZWQgb24gdGhlIE5ldyBZZWFyICgxIEFiYWRpdXMpIGluIEFic2Fsb20gdG8gY29tbWVtb3JhdGUgdGhlIGNpdHkncyBmb3VuZGluZyBieSB0aGUgZ29kIEFyb2RlbiBpbiAxIEFSLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ5OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBqYWxsYXJhbmUgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSXJyaXNlblxcblxcblBqYWxsYXJhbmUgRGF5IGlzIGFuIGFuY2llbnQgaG9saWRheSBpbiBJcnJpc2VuIGNlbGVicmF0ZWQgb24gMSBBYmFkaXVzIChOZXcgWWVhcidzIERheSkuIEV2ZXJ5IDEwMCB5ZWFycywgQmFiYSBZYWdhIHJldHVybnMgdG8gR29sYXJpb24gdG8gcmVtb3ZlIGhlciBkYXVnaHRlciBmcm9tIHRoZSB0aHJvbmUgb2YgSXJyaXNlbiwgYW5kIHB1dCBhbm90aGVyIGRhdWdodGVyIG9uIHRoZSB0aHJvbmUgaW5zdGVhZC4gSW4gMzcxMyBBUiB0aGUgdGhpcmQgUXVlZW4gb2YgSXJyaXNlbiwgUGphbGxhcmFuZSwgYW5kIGhlciBjaGlsZHJlbiBjaG9zZSB0byByZXNpc3QuIEJhYmEgWWFnYSBydXRobGVzc2x5IGNydXNoZWQgdGhlIHJlYmVsbGlvbiBpbiBhIHNpbmdsZSBkYXksIHdoaWNoIGlzIG5vdyBjZWxlYnJhdGVkIGFzIGEgaG9saWRheS4gVGhlIGZlc3RpdmFsIGluY2x1ZGVzIGZlYXN0aW5nIGFuZCB0aGUgYnVybmluZyBvZiBlZmZpZ2llcyBvZiB0YXIgYW5kIHN0cmF3LiBUaGlzIGlzIGEgcmVtaW5kZXIgb2YgdGhlIGZhdGUgb2YgUGphbGxhcmFuZSdzIGZvbGxvd2Vycywgd2hvIHdlcmUgYnVybmVkIGFsaXZlIGFzIGEgd2FybmluZyB0byBhbGwgdGhvc2Ugd2hvIHdvdWxkIG9wcG9zZSBCYWJhIFlhZ2EuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDk5XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmF1bHQgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQWJhZGFyXFxuXFxuVmF1bHQgRGF5IGlzIGEgaG9saWRheSBoZWxkIG9uIDYgQWJhZGl1cyBpbiBob25vciBvZiBBYmFkYXIsIE1hc3RlciBvZiB0aGUgRmlyc3QgVmF1bHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTAwXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogNixcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUnVieSBQcmluY2UncyBCaXJ0aGRheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIk9zaXJpb25cXG5cXG5UaGUgUnVieSBQcmluY2UncyBCaXJ0aGRheSBpcyBhIG5hdGlvbmFsIGhvbGlkYXkgaW4gT3NpcmlvbiBpbiBob25vciBvZiB0aGUgYmlydGhkYXkgb2YgS2hlbWV0IElJSSwgdGhlIFJ1YnkgUHJpbmNlLiBJdCBpcyBjZWxlYnJhdGVkIGFubnVhbGx5IG9uIHRoZSAyMCBBYmFkaXVzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUwMVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIwLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNZXJyeW1lYWRcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJEcnVtYSwgQ2F5ZGVuIENhaWxlYW5cXG5cXG5BIGhvbGlkYXkgb2NjdXJyaW5nIG9uIDIgQ2FsaXN0cmlsLCBNZXJyeW1lYWQgd2FzIHN0YXJ0ZWQgaW4gRHJ1bWEgYW5kIGlzIHN1cHBvc2VkIHRvIGJlIGEgdGltZSB0byBzaGFyZSBvZiB0aGUgbGFzdCBvZiB0aGUgcHJldmlvdXMgeWVhcidzIG1lYWQgd2l0aCB0aGUgcmVzdCBvZiB0aGUgY29tbXVuaXR5LlxcblxcbkluIGN1cnJlbnQgdGltZXMsIG1vc3QgcGVvcGxlIGp1c3QgdXNlIGl0IGFzIGFuIGV4Y3VzZSB0byBkcmluayBleGNlc3NpdmVseS4gVGhlIHBvb3IgdHJhdmVsIGZyb20gYmFyIHRvIGJhciBkcmlua2luZyB3aGF0ZXZlciBhbGNvaG9sIHRoZXkgY2FuIGFmZm9yZCwgd2hpbGUgdGhlIHdlYWx0aHkgd2lsbCBzZXQgYXNpZGUgc3BlY2lmaWMgdmludGFnZXMgZm9yIHRoaXMgZGF5LiBBIGtub3duIGNvbnNlcXVlbmNlIG9mIHRoaXMgZGF5IGFyZSAnbWVhZCByaW90cycgdGhhdCBoYXBwZW4gd2hlbiB0aGVyZSBhcmUgbW9yZSBjZWxlYnJhbnRzIHRoYW4gdGhlcmUgaXMgYWxjb2hvbCB0byBzZXJ2ZSB0aGVtLiBUaGlzIGxlYWRzIHRvIGEgdmlvbGVudCwgZGVzdHJ1Y3RpdmUgZ3JvdXAgb2YgcGVvcGxlIGluIGEgY3Jvd2RlZCBiYXIuIElmIHRoaXMgaXMgYSBjb21tb24gb2NjdXJyZW5jZSBmb3IgcGFydGljdWxhciBjaXRpZXMsIHRoZXkgbWF5IHJlaW5mb3JjZSB0aGVpciBndWFyZCBmb3JjZSBmb3IgdGhlIGluZXZpdGFibHkgZXZlbnRmdWwgbmlnaHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTAyXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMixcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2luZyBFb2RyZWQgSUkncyBCaXJ0aGRheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIktvcnZvc2FcXG5cXG5LaW5nIEVvZHJlZCBJSSdzIEJpcnRoZGF5IHdhcyBhIGxvY2FsIGhvbGlkYXkgaW4gdGhlIFZhcmlzaWFuIGNpdHktc3RhdGUgb2YgS29ydm9zYSBhbmQgd2FzIGNlbGVicmF0ZWQgb24gMTYgQ2FsaXN0cmlsLiBJdCBjb21tZW1vcmF0ZWQgdGhlIGJpcnRoZGF5IG9mIGl0cyBmb3JtZXIgcnVsZXIsIEtpbmcgRW9kcmVkIEFyYWJhc3RpIElJLCB3aG8gZGVjcmVlZCB0aGF0IG9uIHRoZSBkYXksIHNjYW50aWx5IGNsYWQgd29tZW4gd291bGQgZGFuY2UgYW5kIHNlcnZlIGZyZWUgd2luZSB0byBjZWxlYnJhbnRzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUwM1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE2LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb3lhbHR5IERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNoZWxpYXgsIEFzbW9kZXVzXFxuXFxuTG95YWx0eSBEYXkgaXMgYSBob2xpZGF5IGluIHRoZSBuYXRpb24gb2YgQ2hlbGlheCBjb21tZW1vcmF0aW5nIHRoZSBkYXRlIG9uIENhbGlzdHJpbCAxOSwgNDY0MCBBUiB3aGVuIEhvdXNlIFRocnVuZSBzaWduZWQgdGhlIFRyZWF0eSBvZiBFZ29yaWFuLCBkZWNsYXJpbmcgaXQgdGhlIHZpY3RvciBpbiB0aGUgQ2hlbGlzaCBDaXZpbCBXYXIgYW5kIHJ1bGVyIG9mIHRoZSBlbXBpcmUuIEJlY2F1c2Ugb2YgSG91c2UgVGhydW5lJ3Mgd2VsbC1rbm93biB0aWVzIHRvIHRoZSBpbmZlcm5hbCwgdGhpcyBob2xpZGF5IGlzIGFsc28gb2JzZXJ2ZWQgYnkgdGhlIENodXJjaCBvZiBBc21vZGV1cyB3aG8gY29uc2lkZXIgaXQgYSBmZWFzdCBkYXkuIFRoZSBjaHVyY2ggYWxvbmcgd2l0aCBsb2NhbCBnb3Zlcm5tZW50cyBwcm92aWRlIGEgZnJlZSBtZWFsIHRvIGFsbCBjaXRpemVucyB0byByZW1pbmQgdGhlbSBvZiB0aGUgYmVuZWZpdHMgSG91c2UgVGhydW5lIHByb3ZpZGVzIHRoZW0gd2l0aC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MDRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxOSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmF0ZWxlc3MgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTWFoYXRoYWxsYWhcXG5cXG5Gb2xsb3dlcnMgb2YgTWFoYXRoYWxsYWggbWFyayBlYWNoIGxlYXAgZGF5IGFzIEZhdGVsZXNzIERheSwgd2hlbiB0aGUgUml2ZXIgb2YgU291bHMgdGVtcG9yYXJpbHkgc3RvcHMgYW5kIHNvdWxzIGNhbiBlc2NhcGUgUGhhcmFzbWEncyBqdWRnbWVudC4gVGhleSBwZXJmb3JtIG1hbnkgc2FjcmlmaWNpYWwgYW5kIHN1aWNpZGFsIHJpdHVhbHMgb24gRmF0ZWxlc3MgRGF5LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUwNVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI5LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHb2xlbXdhbGsgUGFyYWRlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTWFnbmltYXIsIFZhcmlzaWFcXG5cXG5UaGUgR29sZW13YWxrIFBhcmFkZSBpcyBhIHBhcmFkZSBvZiBnb2xlbXMgY3JlYXRlZCBieSBhbWF0ZXVycyBob3BpbmcgdG8gd2luIGEgbW9uZXRhcnkgZ3JhbnQsIG9yIGV2ZW4gYSBqb2IsIGZyb20gdGhlIEdvbGVtd29ya3MgaW4gTWFnbmltYXIuIEF0IHRoZSBlbmQgb2YgdGhlIHBhcmFkZSBhbG9uZyB0aGUgQXZlbnVlIG9mIEhvbm9ycywgdGhlIGNvbnN0cnVjdHMgYXJlIGp1ZGdlZC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MDZcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYXkgb2YgQm9uZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJQaGFyYXNtYVxcblxcblByaWVzdHMgYW5kIHdvcnNoaXBlcnMgb2YgdGhlIExhZHkgb2YgR3JhdmVzIHBhcmFkZSB0aGUgYm9kaWVzIG9mIHRoZSByZWNlbnRseSBkZWFkIG9uIHRoaXMgaG9saWRheSwgaG9sZGluZyBmcmVlIGJ1cmlhbHMgYWZ0ZXJ3YXJkcy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MDdcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA1LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTYWJsZSBDb21wYW55IEZvdW5kaW5nIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIktvcnZvc2FcXG5cXG5TYWJsZSBDb21wYW55IEZvdW5kaW5nIERheSBpcyBhIGhvbGlkYXkgbWFya2luZyB0aGUgZm91bmRpbmcgb2YgdGhlIFNhYmxlIENvbXBhbnkgb2YgdGhlIFZhcmlzaWFuIGNpdHktc3RhdGUgb2YgS29ydm9zYS4gQ2VsZWJyYXRlZCBvbiA2IFBoYXJhc3QsIHRoZSBkYXkgaXMgbWFya2VkIGJ5IHNvbWJlciBtaWxpdGFyeSBwYXJhZGVzIHRoYXQgZ2VuZXJhbGx5IHByZWNsdWRlIHRoZSBjb25zdW1wdGlvbiBvZiBhbGNvaG9sLCBhIHN0YXBsZSBvbiBtb3N0IG90aGVyIGhvbGlkYXlzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUwOFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk5pZ2h0IG9mIFRlYXJzXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiU29sa3VcXG5cXG5UaGUgTmlnaHQgb2YgVGVhcnMgaGVsZCBhbm51YWxseSBvbiA3IFBoYXJhc3QgaW4gdGhlIEthdGFwZXNoaSB0b3duIG9mIFNvbGt1LiBJdCBpcyBhIHNvbGVtbiB2aWdpbCBjb21tZW1vcmF0aW5nIHRob3NlIGxvc3QgaW4gdGhlIEJhdHRsZSBvZiBSZWQgSGFpbCBpbiA0NzAxIEFSLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUwOVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDcsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkthbGlhc2hhaHJpbVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlFhZGlyYVxcblxcbkthbGlhc2hhaHJpbSBpcyBhIG5hdGlvbmFsIGhvbGlkYXkgY2VsZWJyYXRlZCBvbiBQaGFyYXN0IDEzIGluIFFhZGlyYSB0aGF0IGNlbGVicmF0ZXMgdGhlIFBhZGlzaGFoIEVtcGVyb3Igb2YgZGlzdGFudCBLYXRoZWVyLCBhbmQgUWFkaXJhJ3MgbG95YWx0eSB0byBoaW0uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTEwXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTMsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbnF1ZXN0IERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIk5leFxcblxcbkV2ZXJ5IHllYXIsIG9uIHRoZSAyNnRoIG9mIFBoYXJhc3QsIEVsZGVyIEFyY2hpdGVjdCBPYmxvc2sgXHUyMDE0IG9sZGVzdCBtZW1iZXIgb2YgTmV4J3MgQ291bmNpbCBvZiBUaHJlZSBhbmQgTmluZSBcdTIwMTQgYXNjZW5kcyB0byB0aGUgaGlnaGVzdCBiYWxjb25pZXMgb2YgdGhlIEJhbmRlc2hhciBpbiBRdWFudGl1bS4gSW4gYSB2b2ljZSBtYWRlIHRodW5kZXJvdXMgYnkgdGhlIHBsYXRmb3JtJ3MgbWFnaWMsIHRoZSB3aXplbmVkIHBlY2ggY291bmNpbG1hbiBzcGVuZHMgdGhlIGhvdXJzIGZyb20gZHVzayB0byBqdXN0IHBhc3Qgbm9vbiBlbnVtZXJhdGluZyB0aGUgYXRyb2NpdGllcyBjb21taXR0ZWQgYnkgdGhlIG5lY3JvbWFuY2VycyBvZiBHZWIgdXBvbiB0aGUgcGVvcGxlIG9mIE5leCwgY3VsbWluYXRpbmcgd2l0aCB0aGUgZGlzYXBwZWFyYW5jZSBvZiB0aGUgYXJjaHdpemFyZCBOZXggaGltc2VsZi4gQXQgdGhlIGNvbmNsdXNpb24gb2YgdGhpcyByZWNvcmQgb2YgbmF0aW9uYWwgd291bmRzLCB0aGUgY291bnRyeSdzIGVsZXZlbiBvdGhlciBjb3VuY2lsIG1lbWJlcnMgam9pbiBPYmxvc2sgaW4gcmVuZXdpbmcgdGhlaXIgeWVhcmx5IHZvdyB0byBuZWl0aGVyIGZvcmdldCBub3IgZm9yZ2l2ZSB0aGUgR2ViYml0ZXMnIGF0cm9jaXRpZXMgYW5kIHRvIGFnYWluIHN3ZWFyIGluIHRoZWlyIGxvc3QgcnVsZXIncyBuYW1lIHRvIGVuZGxlc3NseSB3YWdlIHdhciBhZ2FpbnN0IHRoZWlyIGFuY2llbnQgZW5lbWllcy5cXG5cXG5PbiB0aGlzIGRheSwga25vd24gYXMgQ29ucXVlc3QgRGF5LCBhbGwgdGhlIHBlb3BsZSBvZiBOZXggYXJlIGV4cGVjdGVkIHRvIHNoYXJlIGluIHRoZWlyIGxlYWRlcnMnIG9hdGhzLCB0byBjZWxlYnJhdGUgdGhlIHNoYXJlZCBwYXRyaW90aXNtIG9mIHRoZWlyIHdvbmRyb3VzIG5hdGlvbiwgYW5kIHRvIHJlbWVtYmVyIHRoZSBzYWNyaWZpY2VzIG9mIGhlcm9lcyBwYXN0LiBUaGlzIGFsc28gbWFrZXMgaXQgYSBkYXkgZm9yIG1hbnkgTmV4aWFuIHdpemFyZHMgdG8gcmV2ZWFsIGRlYWRseSBuZXcgc3BlbGxzLCBnaWdhbnRpYyBjb25zdHJ1Y3RzLCBhbmQgYXVkYWNpb3VzIGFyY2FuZSBtYXN0ZXJ3b3Jrc1x1MjAxNHdoaWNoIG1hbnkgY3JlYXRvcnMgcHJvbWlzZSB0byBiZSB0aGUgZG9vbSBvZiB0aGVpciBmb2VzLiBFdmVuIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIElubmVyIFNlYSByZWdpb24sIG1hbnkgY3J1c2FkZXJzLCByZWJlbHMsIGFuZCB6ZWFsb3RzIG9ic2VydmUgQ29ucXVlc3QgRGF5IGFzIGEgZGF5IHRvIHJlbmV3IGJsb29kIG9hdGhzLCBsYXVuY2ggbG9uZy1wbGFubmVkIGJhdHRsZXMsIGFuZCBmaW5hbGx5IHRha2UgcmV2ZW5nZS4gSXQgaXMgYSBkYXkgZm9yIHdvcmRzIG9mIGhvbm9yLCBhIGRheSBmb3IgYmF0dGxlIGNyaWVzLCBhbmQgYSBkYXkgd2hlcmUgZ2xvcnkgbW9zdCBmYXZvcnMgdGhlIGJvbGQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTExXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRheXMgb2YgV3JhdGhcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJBc21vZGV1cywgQ2hlbGlheFxcblxcblRoZSBEYXlzIG9mIFdyYXRoLCBvciBEaWVzIElyYWUsIGFyZSBhIGhvbGlkYXkgY2VsZWJyYXRlZCBvbiBib3RoIHNvbHN0aWNlcyBhbmQgZXF1aW5veGVzIGluIHRoZSBuYXRpb24gb2YgQ2hlbGlheCBhbmQgd2hlcmV2ZXIgQXNtb2RldXMgaXMgd29yc2hpcGVkLiBUaGV5IGFyZSBwcmltYXJpbHkgYSBuYXRpb25hbCBob2xpZGF5IGFuZCBub3QgdHJ1bHkgYSByZWxpZ2lvdXMgb25lLCBidXQgdGhlIHR3byBhcmUgb2Z0ZW4gY29uZnVzZWQgZHVlIHRvIENoZWxpYXgncyBjdXJyZW50IHBvbGl0aWNhbCBjbGltYXRlLiBWYXJpb3VzIGNvbnRlc3RzIGFuZCBibG9vZCBzcG9ydHMgYXJlIGhlbGQgb24gdGhlc2UgZGF5cywgcHJvbW90aW5nIHRob3NlIGVsaXRlcyB3aG8gY2FuIGNsZWFybHkgZGVtb25zdHJhdGUgdGhlaXIgc3VwZXJpb3JpdHkgb3ZlciBvdGhlcnMuIFNvbWUgYmVsaWV2ZSB0aGF0IHRoZXNlIGNvbXBldGl0aW9ucyBhcmUgd2F0Y2hlZCBhbmQganVkZ2VkIGJ5IGRldmlscyB0aGVtc2VsdmVzLiBJbiB0aGUgcGFydHMgb2YgdGhlIHdvcmxkIHdoZXJlIHRoZSBQcmluY2Ugb2YgRGFya25lc3MgaXMgbm90IG9wZW5seSB2ZW5lcmF0ZWQsIHRoZXNlIGhvbGlkYXlzIHRha2Ugb24gYSBkaWZmZXJlbnQgdG9uZTogdGhleSBhcmUgdXNlZCB0byBzZXR0bGUgb2xkIGdyaWV2YW5jZXMgYW5kIGFsc28gdG8gZW5kIGNvbnRyYWN0cy5cXG5cXG5JbiB0aGVzZSBkYXlzLCBibG9vZHNwb3J0cyBhcmUgb3JnYW5pemVkIGludG8gY2l0aWVzJyBzdGFkaXVtcy4gU2xhdmVzIGFuZCBzZXJ2YW50cyBvZiBhbnkgbWFzdGVyIG1heSBjaG9vc2UgdG8gZW50ZXIgdGhlIGFyZW5hIGZvciBvbmUtb24tb25lIGJsb29keSBiYXR0bGVzIHRvIHRoZSBkZWF0aC4gRnJlZSBtZW4gYW5kIHdvbWVuIG9mIGFsbCBjbGFzc2VzIGFyZSBmcmVlIHRvIGVudGVyIHRoZSBhcmVuYSBhcyB3ZWxsLiBUaGUgZW50cmFudHMgZmlnaHQgaW4gcm91bmRzIHVudGlsIGF0IGxhc3Qgb25lIHN0YW5kcyBhbG9uZS4gVGhlIHdpbm5lciBpcyBncmFudGVkIGZyZWVkb20gZnJvbSBzbGF2ZXJ5IG9yIHNlcnZpdHVkZSwgZXJhc3VyZSBvZiBhbGwgZGVidHMsIGFuZCBhIHB1cnNlIG9mIGdvbGQuXFxuXFxuVGhlIHdpbnRlciBzb2xzdGljZSBzZWVzIHRoZSBjdWxtaW5hdGlvbiBvZiB0aGUgRGllcyBJcmFlLCB3aXRoIGFsbCB0aGUgd2lubmVycyBvZiB0aGUgdGhyZWUgcHJldmlvdXMgYm91dHMgc3VtbW9uZWQgdG8gRWdvcmlhbiB0byBmaWdodCB0byB0aGUgZGVhdGggZm9yIHRoZSBhbXVzZW1lbnQgb2YgdGhlIG5vYmxlcy4gVGhlIHdpbm5lciBpcyBnaXZlbiBhIHRpdGxlIG9mIGJhcm9uZXQgYW5kIGEgcGxvdCBvZiBsYW5kLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUxMlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcnN0Ymxvb21cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJHb3pyZWhcXG5cXG5GaXJzdGJsb29tIGlzIGEgaG9saWRheSBjZWxlYnJhdGluZyB0aGUgZmlyc3QgcGxhbnRpbmcgb2YgdGhlIGFncmljdWx0dXJhbCBzZWFzb24sIGFuZCBnZW5lcmFsbHkgYXNzb2NpYXRlZCB3aXRoIHRoZSB3ZWF0aGVyIGdvZCBHb3pyZWguIEl0IGZhbGxzIG9uIHRoZSB2ZXJuYWwgZXF1aW5veC4gTWFueSBmYXJtaW5nIGNvbW11bml0aWVzIHNlZSBpdCBhcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSB5ZWFyLCBldmVuIHRob3VnaCBjb252ZW50aW9uYWwgY2FsZW5kYXJzIGJlZ2luIHR3byBtb250aHMgZWFybGllci4gRGVzcGl0ZSB3ZWFyaW5lc3MgYWZ0ZXIgYSBmdWxsIGRheSBwbGFudGluZywgbWFueSBmYXJtaW5nIGNvbW11bml0aWVzIGhvbGQgY2VsZWJyYXRpb25zIGNvbWUgdGhlIG5pZ2h0OiBmZWFzdGluZywgZGFuY2luZyBhbmQgY291cnRzaGlwIGZlYXR1cmUgc2hvd2luZyB0aGUgY3ljbGUgb2YgbmF0dXJlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUxM1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcnN0IEN1dFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkZhbGNvbidzIEhvbGxvd1xcblxcblRoZSBGaXJzdCBDdXQgY2VsZWJyYXRpb24gaW4gRmFsY29uJ3MgSG9sbG93IHVzZWQgdG8gbWFyayB0aGUgc3RhcnQgb2YgdGhlIHdvcmsgaW4gdGhlIHdvb2RzIGVhY2ggc3ByaW5nLiBOb3csIGhvd2V2ZXIsIGl0IGlzIGEgbWVhbmluZ2xlc3MgcmFtc2hhY2tsZSBjZXJlbW9ueSBhcyBUaHVsZHJpbiBLcmVlZCBmb3JjZXMgdGhlIGx1bWJlciBjcmV3cyB0byB3b3JrIHRocm91Z2ggZXZlbiBkdXJpbmcgdGhlIGNvbGRlc3QgbW9udGhzIGluIHRoZSB3aW50ZXIuIFN0aWxsLCBGaXJzdCBDdXQgYnJpbmdzIHBlb3BsZSBvdXQgdG8gY2VsZWJyYXRlIHRoZSBzdGFydCBvZiB0aGUgc3ByaW5nLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUxNFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkN1cnJlbnRzZXZlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiR296cmVoXFxuXFxuT24gdGhpcyByZWxpZ2lvdXMgaG9saWRheSwgYWxsIHdobyB0cmF2ZWwgb24gdGhlIHdhdGVyIG1ha2Ugb2ZmZXJpbmdzIHRvIEdvenJlaCBpbiB0aGUgaG9wZXMgb2Ygc2FmZSBwYXNzYWdlIGZvciB0aGUgY29taW5nIHllYXIuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTE1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogNyxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGF4ZmVzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFiYWRhclxcblxcbk5vIG9uZSBlbmpveXMgcGF5aW5nIHRheGVzIGJ1dCB0aGUgY29sbGVjdGlvbiBvZiBmYWlyIHRheGVzIGlzIGNvbnNpZGVyZWQgYW4gaW50ZWdyYWwgcGFydCBvZiB0aGUgbWFpbnRlbmFuY2Ugb2Ygc29jaWV0eSwgYW5kIGlzIHRoZXJlZm9yZSBob2x5IHRvIHRoZSBnb2QgQWJhZGFyLiBFdmVyeSB5ZWFyIG9uIHRoZSAxNXRoIG9mIEdvenJhbiwgcHJpZXN0cyBvZiB0aGUgY2h1cmNoIG9mIEFiYWRhciBzcGVuZCB0aGUgZGF5IHdhbGtpbmcgY2l0eSBzdHJlZXRzLCBkb2luZyB3aGF0IHRoZXkgY2FuIHRvIG1ha2UgdGhlIGJpdHRlciBwaWxsIG9mIGFubnVhbCB0YXhlcyBhIGJpdCBlYXNpZXIgdG8gc3dhbGxvdy5cXG5cXG5UaGUgQnVzaW5lc3Mgb2YgdGhlIERheVxcblxcbkZyb20gZGF3biB0byBkdXNrLCBjbGVyaWNzIG9mIEFiYWRhciBhdHRlbmQgdGhlIHRheCBjb2xsZWN0b3JzIG9mIHNpemVhYmxlIGNvbW11bml0aWVzIGFzIHRoZSB0YXggd2Fnb25zIHJvbGwgZnJvbSBkb29yIHRvIGRvb3IuIFRoZSBjaHVyY2ggb2ZmaWNpYWxzIG1vbml0b3IgdGhlc2UgYWN0aXZpdGllcyB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcHJvY2VzcyBpcyBjb25kdWN0ZWQgcmVzcGVjdGZ1bGx5IGFuZCBqdXN0bHksIGFuZCB0aGF0IGNpdGl6ZW5zIGtub3cgdGhhdCB0aGUgcHJvY2VzcyBpcyBtb25pdG9yZWQuIE1vcmUgdGhhbiBqdXN0IGFpZGluZyBpbiB0aGUgeWVhcmx5IGVycmFuZCwgdGhlIGZhaXRoZnVsIHBlcnNvbmFsbHkgdGhhbmsgZXZlcnkgY2l0aXplbiBmb3IgY29udHJpYnV0aW5nIHRvIHRoZSBpbXByb3ZlbWVudCBvZiB0aGVpciBjaXR5LCBleHRvbCB0aGUgcHVibGljIHdvcmtzIGZ1bmRlZCBieSB0aGVpciBjb250cmlidXRpb25zLCBhbmQgZm9yZXRlbGwgdGhlIGdyYW5kZXVyIG9mIGNpdmljIHByb2plY3RzIHRvIGNvbWUuIFRoZSBkaXNlbmZyYW5jaGlzZWQgYW5kIGRlc3RpdHV0ZSB0aGV5IGF0dGVtcHQgdG8gY29tZm9ydCBhcyBiZXN0IHRoZXkgY2FuLCBxdW90aW5nIGZyb20gdGhlaXIgZ29kJ3MgZG9nbWEgb24gd29yayBhbmQgd29ydGhpbmVzcywgYnV0IHRoaXMgaXMgbm90IGEgZGF5IGZvciBkaXNjb3VudHMgb3IgZGVmZXJyYWxzLiBUaGUgY2l0aXplbnMgYXJlIGFibGUgdG8gdm9pY2UgdGhlaXIgY29uY2VybnMgYW5kIGlkZWFzIGFzIHRvIHdoZXJlIHRoZSBtb25pZXMgbGV2aWVkIHNob3VsZCBiZXN0IGJlIGFwcGxpZWQuIENpdGl6ZW5zIGFyZSBmcmVlIHRvIHNwZWFrIHRoZWlyIG1pbmQgb24gYW55IGlzc3VlIGhlcmUgd2l0aG91dCBmZWFyIG9mIHJlcGVyY3Vzc2lvbi5cXG5cXG5UaGUgQ2VsZWJyYXRpb25zIG9mIHRoZSBEYXlcXG5cXG5BdCBkdXNrLCB0aGUgQWJhZGFyYW5zIGhvc3Qgc2V2ZXJhbCBjZWxlYnJhdGlvbnMgaW4gcGFya3MsIHBsYXphcywgYW5kIG90aGVyIGNvbW11bmFsIGFyZWFzIGFib3V0IHRoZSBjaXR5LCBvcmdhbml6aW5nIGRvbmF0aW9ucyBhbmQgY29udHJpYnV0aW9ucyBmcm9tIGxvY2FsIHZlbmRvcnMgdG8gZmVlZCBhbmQgZW50ZXJ0YWluIGFsbC1jb21lcnMuIEhhdmluZyBhbHJlYWR5IHByZWFjaGVkIHRvIG1vc3Qgb2YgdGhlIGNpdHkgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBkYXksIHRoZSBjbGVyaWNzIHBlcmZvcm0gb25seSBhIGJyaWVmIG9wZW5pbmcgY2VyZW1vbnksIGRlZGljYXRpbmcgdGhlIGZlYXN0IHRvIEFiYWRhciwgdGhlIGNpdHksIGFuZCBpdHMgZ3JlYXQgcGVvcGxlLiBUaGVzZSBjZWxlYnJhdGlvbnMgYXJlIG9mdGVuIHF1aXRlIGRpc3RpbmN0IGZyb20gbmVpZ2hib3VyaG9vZCB0byBuZWlnaGJvdXJob29kIGFuZCBhcmUgYWxtb3N0IGFsd2F5cyBkaXZpZGVkIGFsb25nIGVjb25vbWljIGJvdW5kYXJpZXMuXFxuXFxuVGhlIGZlc3Rpdml0aWVzIGludm9sdmluZyB0aGUgd2VhbHRoaWVzdCBjaXRpemVucyB1c3VhbGx5IGhhcHBlbiBvbiB0aGUgc3RlcHMgb2YgY2l0eSBoYWxsIG9yIG90aGVyIGdyYW5kIGNpdmljIGJ1aWxkaW5ncyBhbmQgZmVhdHVyZSB0aGUgYmVzdCBtdXNpYyBhbmQgZm9vZCwgYnV0IG9mdGVuIGxpdHRsZSBtb3JlIHRoYW4gcG9saXRlIGNhcmQgYW5kIGd1ZXNzaW5nIGdhbWVzLiBUaGVzZSBnYWxhcyB1c3VhbGx5IHdyYXAgdXAgYnkgbWlkbmlnaHQuXFxuXFxuRm9yIHRoZSBjb21tb24gZm9saywgdGhlIHBhcmtzIGFuZCBtYXJrZXRwbGFjZXMgdGFrZSBvbiBhIGNhcm5pdmFsIGF0bW9zcGhlcmUsIHdpdGggc2ltcGxlIGJ1dCBnb29kIGZvb2QsIGxvY2FsIGFsZXMsIHBlcmZvcm1hbmNlcyBieSB0YWxlbnRlZCBjaXRpemVucywgYW5kIGdhbWVzIG9mIGNoYW5jZSBnb2luZyBvbiB3ZWxsIGludG8gdGhlIG5pZ2h0LiBBIHByZXZhaWxpbmcgc3VwZXJzdGl0aW9uIHRocm91Z2ggdGhlc2UgZmVzdGl2YWxzIGlzIHRoYXQsIGR1cmluZyB0aGUgY2VsZWJyYXRpb24sIGl0IGlzIGx1Y2t5IHRvIGtpc3NcdTIwMTRvciBpbiBzb21lIHJlZ2lvbnMsIHBpbmNoXHUyMDE0YSBjbGVyaWMgb2YgQWJhZGFyLCBsZWFkaW5nIHRvIG1hbnkgYSByb3N5LWNoZWVrZWQgY2xlcmljLlxcblxcbkV2ZW4gdGhlIGNpdHkncyBwb29yIGFyZSBnaXZlbiByZWFzb24gdG8gY2VsZWJyYXRlLCBhcyB0aGUgbG9jYWwgdGVtcGxlIG9mIEFiYWRhciBob3N0cyBhIGNoZWVyeSBidXQgdW5hYmFzaGVkbHkgcmVsaWdpb3VzIGdhdGhlcmluZyBvbiBpdHMgc3RlcHMsIGZlZWRpbmcgYWxsIGNvbWVycywgZG9saW5nIG91dCBhIGhlYXJ0eSByYXRpb24gb2Ygd2luZSwgc2luZ2luZyBoeW1ucyBvZiB0aGUgZmFpdGgsIGFuZCBwcm92aWRpbmcgdG9rZW5zIGZvciBhIHNlY29uZCB3aW5lIHJhdGlvbiBmb3IgYW55IHdobyByZXR1cm4gdG8gYXR0ZW5kIGEgc2VydmljZSB3aXRoaW4gdGhlIG1vbnRoLlxcblxcbkZvciBhIGhvbGlkYXkgdGhhdCByZXZvbHZlcyBhcm91bmQgcGF5aW5nIHRheGVzLCB0aGlzIEFiYWRhcmFuIGZlc3RpdmFsIGlzIG5vdCBhcyByZXZpbGVkIGFzIG9uZSBtaWdodCBleHBlY3QuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTE2XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTUsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldyaWdodHMgb2YgQXVndXN0YW5hXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQW5kb3JhbiwgQnJpZ2hcXG5cXG5UaGlzIGxvY2FsIGZlc3RpdmFsIGluIHRoZSBBbmRvcmFuIHBvcnQgY2l0eSBvZiBBdWd1c3RhbmEgaXMgaGVsZCB0byBob25vciBhbmQgY2VsZWJyYXRlIHRoZSBsb2NhbCBzaGlwYnVpbGRpbmcgaW5kdXN0cnkgYXMgd2VsbCBhcyB0aGUgbmF2eS4gVGhlIG1hdGhlbWF0aWNzIGFuZCBlbmdpbmVlcmluZyByZXF1aXJlZCBmb3IgdGhlIGJ1aWxkaW5nIG9mIHRoZSBzaGlwcyBpcyBwcmFpc2VkIGJ5IEJyaWdoJ3MgZmFpdGhmdWwuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTE3XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdhbGEgb2YgU2FpbHNcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJBYnNhbG9tXFxuXFxuT25lIG9mIHR3byBsb2NhbCBmZXN0aXZhbHMgd2hlcmUga2l0ZS1iYXR0bGVycyBjb21wZXRlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUxOFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI3LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZW1lbWJyYW5jZSBNb29uXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSW9tZWRhZSwgTGFzdHdhbGwsIFVzdGFsYXZcXG5cXG5BIG5hdGlvbmFsIGhvbGlkYXkgdG8gY29tbWVtb3JhdGUgdGhvc2Ugd2hvIGRpZWQgaW4gdGhlIFNoaW5pbmcgQ3J1c2FkZSBhZ2FpbnN0IHRoZSBXaGlzcGVyaW5nIFR5cmFudC4gQWx0aG91Z2ggbm90IHN0cmljdGx5IGEgcmVsaWdpb3VzIGhvbGlkYXksIElvbWVkYWUncyBuYW1lIGlzIGhlYXZpbHkgaW52b2tlZCwgZHVlIHRvIGhlciBtYW55IG1pbGl0YXJ5IGFjY29tcGxpc2htZW50cyBkdXJpbmcgdGhlIHdhci5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MTlcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbmdlbCBEYXlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJNYWduaW1hciwgVmFyaXNpYVxcblxcbkFuZ2VsIERheSBpcyBhIGxvY2FsIE1hZ25pbWFyaWFuIGhvbGlkYXkgY2VsZWJyYXRlZCBvbiAzMSBEZXNudXMuIFRoZSBhbm51YWwgY2VsZWJyYXRpb24gbWFya3MgdGhlIGZvdW5kaW5nIG9mIHRoZSBjaXR5LCBhbmQgaXRzIGZvdW5kZXJzJyBmbGlnaHQgZnJvbSBLb3J2b3NhLiBJdCBhbHNvIGhvbm9ycyB0aGUgcHJlc2VuY2UgYW5kIHBvcHVsYXIgd29yc2hpcCBvZiB0aGUgZW1weXJlYWwgbG9yZHMsIHdoaWNoIHByZWRhdGVzIHRoZSBjaXR5IGJ5IGNlbnR1cmllcy4gRHVyaW5nIHRoZSBmZXN0aXZhbCwgbmVhcmx5IGFsbCBsb2NhbCBidXNpbmVzc2VzIHNodXQgdGhlaXIgZG9vcnMgYW5kIHRoZSBjaXRpemVucyB0YWtlIHBhcnQgaW4gY291bnRsZXNzIGZlYXN0cywgbWFzcXVlcmFkZSBiYWxscyBkcmVzc2VkIGFzIGFuZ2VscywgYW5kIHRoZSBidXJuaW5nIG9mIGRldmlsIGVmZmlnaWVzIG1lYW50IHRvIHN5bWJvbGl6ZSBpbmZlcm5hbGx5LWluZmx1ZW5jZWQgS29ydm9zYS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MjBcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAzMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiT2xkLU1hZ2UgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSG9saWRheSBjZWxlYnJhdGluZyBPbGQtTWFnZSBKYXRlbWJlLCB0aGUgZmF0aGVyIG9mIEdhcnVuZGkgbWFnaWMuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTIxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTMsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpcGxlIEV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkZlc3RpdmFsIG9mIHRoZSBSdWxpbmcgU3VuXFxuXFxuU2hpenVydVxcblxcbkNlbGVicmF0ZXMgdGhlIGxvbmdlc3QgZGF5LlxcblxcbkZvdW5kZXIncyBGb2xseVVsYXIgS2VsXFxuXFxuQWR2ZW50dXJlcnMgYW5kIGNoaWxkcmVuIGZvbGxvdyBhIGhhbGx1Y2luYXRvcnkgcmVkIHN0cmlwZSBhbG9uZyB6aWd6YWdnaW5nIHBhdGhzLCBhbXVzaW5nIHJlc2lkZW50cy5cXG5cXG5IYXJ2ZXN0IEJvdW50eSBGZXN0aXZhbFxcblxcblNlZ2FkYVxcblxcbk1hcmtpbmcgdGhlIGJlZ2lubmluZyBvZiB0aGUgaGFydmVzdCBzZWFzb24sIHRoaXMgZmVzdGl2YWwgaW52b2x2ZXMgc3BvcnRpbmcgdG91cm5hbWVudHMsIGRhbmNpbmcsIHN0b3J5dGVsbGluZywgYW5kIGZlYXN0cy4gQ2VsZWJyYW50cyBnaXZlIHRoYW5rcyBhbmQgZWxpbWluYXRlIGdydWRnZXMuXFxuXFxuTG9uZ3dhbGtcXG5cXG5HcmFuZG1vdGhlciBTcGlkZXIsIE51cnZhdGNodGE7IHNvdXRoZXJuIGhlbWlzcGhlcmUgd2ludGVyIHNvbHN0aWNlXFxuXFxuQ2VsZWJyYXRlcyB0aGUgZXNjYXBlIG9mIE51cnZhdGNodGEncyBhbmFkaSBwZW9wbGUgZnJvbSBib25kYWdlLCBpbiBwYXJ0IHRoYW5rcyB0byBHcmFuZG1vdGhlciBTcGlkZXIgbGVuZ3RoZW5pbmcgdGhlaXIgY292ZXIgb2YgZGFya25lc3MgaW4gdGhlaXIgZXNjYXBlLlxcblxcblJpdHVhbCBvZiBTdGFyZHVzdFxcblxcbkRlc25hXFxuXFxuRmVzdGl2YWwgaGVsZCBpbiB0aGUgZXZlbmluZyBhbmQgdGhyb3VnaCB0aGUgbmlnaHQsIHdoZXJlIERlc25hJ3MgZmFpdGhmdWwgc2luZyBzb25ncyBhbmQgdGhyb3cgc2FuZCBhbmQgcG93ZGVyZWQgZ2VtcyBpbnRvIGJvbmZpcmVzLlxcblxcblJ1bmVmZWFzdFxcblxcbk1hZ3JpbVxcblxcbkRheSBtYXJraW5nIHRoZSBkYXkgZHdhcnZlcyBsZWFybnQgdGhlIGZpcnN0IHJ1bmVzIGFuZCB0aGUgcHJvcGVyIHdheSB0byBwcmF5LlxcblxcblN1bndyb3VnaHQgRmVzdGl2YWxTYXJlbnJhZSwgQnJpZ2hcXG5cXG5EYXkgY29tbWVtb3JhdGluZyB0aGUgZGVmZWF0IG9mIFJvdmFndWcgYnkgU2FyZW5yYWUsIGNlbGVicmF0ZWQgd2l0aCB0aGUgZmx5aW5nIG9mIGtpdGVzLCBmaXJld29ya3MsIGFuZCBnaWZ0IGdpdmluZy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MjJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCdXJuaW5nIEJsYWRlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlNhcmVucmFlXFxuXFxuVGhlIGhvbHksIG1vbnRoLWxvbmcgZmVzdGl2YWwgZW5kcyBvbiB0aGlzIGRheSwgZmVhdHVyaW5nIGRhbmNlcyB3aXRoIGZsYW1pbmcgYmxhZGVzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUyM1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEwLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWJlcnR5IERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFuZG9yYW4sIE1pbGFuaVxcblxcbkhvbGlkYXkgY2VsZWJyYXRpbmcgQW5kb3JhbidzIGluZGVwZW5kZW5jZS4gTWlsYW5pdGVzIGNlbGVicmF0ZSB0aGF0IHZlcnkgbGl0dGxlIHZpb2xlbmNlIG9jY3VycmVkLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUyNFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDMsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA1XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhbG9uIFRhZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFuZG9yYW5cXG5cXG5UaGUgRWFnbGUgS25pZ2h0cyBwZXJmb3JtIGFlcmlhbCBkaXNwbGF5cyBpbiBBbG1hcyBvbiB0aGlzIGRheS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MjVcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUml2ZXJ3aW5kIEZlc3RpdmFsXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiS29ydm9zYVxcblxcbkFuIGVhcmx5IHN1bW1lciBob2xpZGF5IHRoYXQgaG9ub3JzIGEgY29vbGluZyBzaGlmdCBpbiB0aGUgd2luZHMsIGNlbGVicmF0ZWQgd2l0aCBtdWNoIGRyaW5raW5nLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUyNlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIyLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbmhlcml0b3IncyBBc2NlbmRhbmNlIFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIklvbWVkYWVcXG5cXG5Jbmhlcml0b3IncyBBc2NlbmRhbmNlLCBvcmlnaW5hbGx5IGNhbGxlZCAnSGVyYWxkJ3MgRGF5JywgaG9ub3VycyB0aGUgZGF5IHRoYXQgSW9tZWRhZSB3YXMgY2hvc2VuIGJ5IHRoZSBnb2QgQXJvZGVuIHRvIGJlY29tZSBoaXMgaGVyYWxkICh0aHVzIHJlcGxhY2luZyBBcmF6bmkpLCB0aHVzIGJvb3N0aW5nIGhlciBwb3dlciBiZXlvbmQgdGhhdCBvZiBhIGZsZWRnbGluZyBnb2RkZXNzLiBUaGlzIGhvbGlkYXkgd2FzIHJlbmFtZWQgYWZ0ZXIgdGhlIGRlbWlzZSBvZiBBcm9kZW4uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTI3XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmlyc3QgQ3J1c2FkZXIgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTWVuZGV2XFxuXFxuSG9saWRheSBpbiBjZWxlYnJhdGlvbiBvZiB0aGUgY29udGludWluZyBjcnVzYWRlIGFnYWluc3QgdGhlIGRlbW9ucyBvZiB0aGUgV29ybGR3b3VuZC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MjhcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA2LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogN1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYXkgb2YgU2lsZW5jZWQgV2hpc3BlcnNcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJVc3RhbGF2XFxuXFxuVGhlIERheSBvZiBTaWxlbmNlZCBXaGlzcGVycyBpcyBhbiBVc3RhbGF2aWMgaG9saWRheSBjZWxlYnJhdGVkIGV2ZXJ5IDkgQXJvZHVzIG1hcmtpbmcgdGhlIGRlZmVhdCBvZiB0aGUgV2hpc3BlcmluZyBUeXJhbnQgaW4gMzgyNyBBUiBieSB0aGUgY29hbGl0aW9uIGZvcmNlcyBvZiB0aGUgU2hpbmluZyBDcnVzYWRlIGFuZCB0aGUgbGliZXJhdGlvbiBvZiB0aGUgY291bnRyeSBhZnRlciBjZW50dXJpZXMgb2YgdW5kZWFkIGRvbWluYXRpb24uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTI5XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogOSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRm91bmRpbmcgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSWxzdXJpYW4sIFZhcmlzaWFcXG5cXG5GZXN0aXZhbCBjZWxlYnJhdGluZyB0aGUgZm91bmRpbmcgYnkgSWxzdXIgb2YgdGhlIHRvd24gb2YgSWxzdXJpYW4gaW4gNDYzMSBBUi5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MzBcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXJtYXNzZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFyb2RlbiwgSW9tZWRhZSwgTWlsYW5pXFxuXFxuVGhlIHJhdWNvdXMsIHdlZWstbG9uZyBmZXN0aXZhbCBrbm93biBhcyBBcm1hc3NlIGlzIGhlbGQgZWFjaCB5ZWFyIGJlZ2lubmluZyBvbiAxNiBBcm9kdXMuIFRoZSBjZWxlYnJhdGlvbiBcdTIwMTQgb25jZSBkZWRpY2F0ZWQgdG8gdGhlIGdvZCBBcm9kZW4gXHUyMDE0IGlzIHN0aWxsIGltcG9ydGFudCB0byB0aGUgZmFpdGhmdWwgb2YgSW9tZWRhZSwgd2hvIHVzZSBpdCB0byB0cmFpbiBjb21tb25lcnMgaW4gY29tYmF0LCBvcmRhaW4gYXBwcmVudGljZSBjbGVyZ3ksIHBpY2sgc3F1aXJlcyBmb3Iga25pZ2h0cywgYW5kIHRlYWNoIG1pbGl0YXJ5IGhpc3RvcnksIGhvcGluZyB0byBwcmV2ZW50IHRoZSBtaXN0YWtlcyBvZiB0aGUgcGFzdCBmcm9tIGJlaW5nIHJlcGVhdGVkLiBBbW9uZyB0aG9zZSBub3QgZGVkaWNhdGVkIHRvIHRoZSBJbmhlcml0b3IgdGhlIGhvbGlkYXkgaGFzIGxvc3QgbW9zdCBvZiBpdHMgcmVsaWdpb3VzIHNpZ25pZmljYW5jZSBzaW5jZSBBcm9kZW4ncyBkZWF0aCwgdGVuZGluZyBub3cgb25seSB0b3dhcmQgd2lsZCBwYXJ0eWluZywgYSBmYWN0IHRoYXQgaGFzIHByZWNsdWRlZCB0aGUgZGlhYm9saXN0IGF1dGhvcml0aWVzIG9mIENoZWxpYXggZnJvbSBwcm9oaWJpdGluZyBBcm1hc3NlIG91dHJpZ2h0LiBOZXZlcnRoZWxlc3MsIGluIHBsYWNlcyB3aGVyZSB0aGUgY2h1cmNoIG9mIEFzbW9kZXVzIGlzIG9wZW5seSBhbGxvd2VkLCBpdCBob3N0cyBzcGVjaWFsIGFjdGl2aXRpZXMgZm9yIGl0cyBwYXJpc2hpb25lcnMgZHVyaW5nIHRoZSBzYW1lIHdlZWsgaW4gYW4gZWZmb3J0IHRvIGNvdW50ZXIgdGhlIGluZmx1ZW5jZSBvZiB0aGUgaG9saWRheS4gVGhlIGNpdHkgb2YgQ29yZW50eW4gaXMgZXNwZWNpYWxseSBrbm93biBmb3IgaXRzIGV4dHJhdmFnYW50IEFybWFzc2UgZmVzdGl2aXRpZXMuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTMxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA3XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNhaW50IEFsaWthJ3MgQmlydGhkYXlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJLb3J2b3NhXFxuXFxuUXVpZXQgaG9saWRheSBob25vcmluZyB0aGUgYmlydGggb2YgU2FpbnQgQWxpa2EgdGhlIE1hcnR5ci5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MzJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAzMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXJjaGVyZmVhc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJFcmFzdGlsXFxuXFxuQXJjaGVyJ3MgRGF5IG9yIEFyY2hlcmZlYXN0IGlzIGEgaG9saWRheSBvZiB0aGUgZ29kIEVyYXN0aWwgaGVsZCBhbm51YWxseSBvbiB0aGUgM3JkIG9mIEVyYXN0dXMuIERlc3BpdGUgdGhlIGhvbGlkYXkncyBvcmlnaW5zIGluIHRoZSB3b3JzaGlwIG9mIEVyYXN0aWwsIGNvbW1vbiBjb3VudHJ5IGZvbGsgZnJvbSB0aGUgTGFuZHMgb2YgdGhlIExpbm5vcm0gS2luZ3MgdG8gVGFsZG9yIGNlbGVicmF0ZSB0aGUgaGVpZ2h0IG9mIHN1bW1lciB3aXRoIGEgZGF5IHNldCBhc2lkZSBmb3IgZXN0YWJsaXNoaW5nIG5ldyByZWxhdGlvbnNoaXBzLCBlbmpveWluZyBjdXJyZW50IGNhbWFyYWRlcmllLCBhbmQgY2VsZWJyYXRpbmcgdGhlIGdpZnRzIG9mIHRoZSBnb2RzLiBBcmNoZXJ5IGNvbXBldGl0aW9ucyBhcmUgaGVsZCBmcmVxdWVudGx5IGluIHdoaWNoIHRoZSBtZW4gdGVzdCB0aGVpciBza2lsbCB3aXRoIHRoZSBib3cgdGhyb3VnaCBwcm9ncmVzc2l2ZWx5IGhhcmRlciB0cmlhbHMuIFRoZSBleGFjdCBmb3JtIG9mIGNvbXBldGl0aW9uIGlzIGRpZmZlcmVudCBmcm9tIHBsYWNlIHRvIHBsYWNlLCBhbmQgdGhlIHdpbm5lciBpcyBhd2FyZGVkIGEgcmFjayBvZiBlbGsgaG9ybnMgYW5kIGEgcXVpdmVyIG9mIGJsZXNzZWQgYXJyb3dzLiBIZSBpcyBhbHNvIGdpdmVuIHRoZSB0aXRsZSBvZiBcXFwiUHJvdGVjdG9yXFxcIiwgd2hpY2ggaGUgaG9sZHMgdW50aWwgdGhlIG5leHQgeWVhci5cXG5cXG5XaGlsZSB0aGUgZmVzdGl2YWwncyB0cmFkaXRpb25zIGVtcGhhc2l6ZSBjb250ZXN0cyBvZiBtYXJrc21hbnNoaXAsIG1vc3QgaGF2ZSBleHBhbmRlZCB0byBleGhpYml0IHRhbGVudHMgb2YgYWxsIHR5cGVzLCBmcm9tIGJha2luZyBhbmQgc3Rvcnl0ZWxsaW5nIHRvIHJhY2luZyBhbmQgbW9jayBjb21iYXQuIEFzaWRlIGZyb20gZW5jb3VyYWdpbmcgYSBmYWlyLWxpa2UgYXRtb3NwaGVyZSwgbWFueSBvZiB0aGUgZGlzcGxheXMgYW5kIGNvbXBldGl0aW9ucyBzZXJ2ZSBvbmUgb2YgdHdvIHNlY29uZGFyeSBwdXJwb3NlczogZWl0aGVyIGFzIGEgd2F5IGZvciBtZXJjaGFudHMgdG8gc2hvdyBvZmYgdGhlaXIgc3VwZXJpb3IgbGl2ZXN0b2NrIGFuZCB3YXJlcywgb3IgKG1vcmUgcG9wdWxhcmx5KSBhcyBhIHdheSBmb3IgZWxpZ2libGUgbWVuIGFuZCB3b21lbiB0byBzaG93IG9mZiB0byBlYWNoIG90aGVyLlxcblxcbldoaWxlIHRoZSBkYXkncyBldmVudHMgYXQgbW9zdCBBcmNoZXJmZWFzdCBmYWlycyBhcmUgZmlsbGVkIHdpdGggZ2FtZXMsIGZvb2QsIGFuZCBjcmFmdHMsIHRoZSBuaWdodCBicmluZ3MgZGFuY2luZywgZHJpbmtpbmcsIHByYW5rcywgYW5kIHRoZSBjcm93bmluZyBvZiB0aGUgcHJpbmNlcyBhbmQgcHJpbmNlc3NlcyBvZiBzcHJpbmcgYW5kIHN1bW1lciBmb3IgdGhlIHR3byBzaW5nbGUgeW91dGhzIGFuZCB0d28gc2luZ2xlIGFkdWx0cyB3aG8gZmFyZWQgYmVzdCBpbiB0aGUgZGF5J3MgZXZlbnRzLiBUaGUgZmVzdGl2aXRpZXMgY29udGludWUgbGF0ZSBpbnRvIHRoZSBldmVuaW5nLCBidXQgZW5kIHByb21wdGx5IGF0IG1pZG5pZ2h0LCBzbyB0aGF0IGluIHRydWUgRXJhc3RpbGlhbiBmYXNoaW9uIHRoZSBuZXh0IGRheSdzIHJlc3BvbnNpYmlsaXRpZXMgYXJlIG5vdCBvdmVybHkgaW1wZWRlZC4gRm9yIHRob3NlIG5vdCBvZiBFcmFzdGlsJ3MgZmxvY2ssIGhvd2V2ZXIsIHByaXZhdGUgcGFydGllcywgZHJpbmtpbmcsIGFuZCB0cnlzdGluZyBjYXJyeSBvbiBsb25nIGludG8gdGhlIG5leHQgbW9ybmluZy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MzNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAzLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGb3VuZGluZyBGZXN0aXZhbFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIktvcnZvc2FcXG5cXG5Gb3VuZGluZyBGZXN0aXZhbCBpcyBhIGxvY2FsIEtvcnZvc2FuIGNlbGVicmF0aW9uIG1hcmtpbmcgdGhlIGVzdGFibGlzaG1lbnQgb2YgdGhlIGNpdHkgaW4gNDQwNyBBUi4gSGVsZCBhbm51YWxseSBvbiAxNCBFcmFzdHVzLCB0aGUgZmVzdGl2YWwgaXMgYSBjaGFuY2UgZm9yIHRoZSBjaXRpemVucyB0byBsZXQgb2ZmIHNvbWUgc3RlYW0sIGRyaW5rIGNvcGlvdXNseSwgYW5kIHdhdGNoIG1hZ2ljYWwgbGlnaHQgc2hvd3MgbGF0ZSBpbnRvIHRoZSBuaWdodC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MzRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxNCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDZcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnVybmluZyBOaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlJhem1pcmFuXFxuXFxuSXRlbXMgb3IgcGVvcGxlIHdobyBoYXZlIHRyYW5zZ3Jlc3NlZCBhZ2FpbnN0IHRoZSBnb2Qta2luZyBvZiBSYXptaXJhbiBhcmUgYnVybmVkIG9uIHRoaXMgZGF5LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUzNVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE3LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLaWFuaWRpIEZlc3RpdmFsXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiR2FydW5kaVxcblxcblRoZSBLaWFuaWRpIEZlc3RpdmFsIGlzIGEgd2VlayBsb25nIGV2ZW50IGhlbGQgYW5udWFsbHkgYmV0d2VlbiAxNSBhbmQgMjEgRXJhc3R1cyBieSBHYXJ1bmRpIHBlb3BsZSBldmVyeXdoZXJlLiBUaGUgR2FydW5kaSBoYXZlIGEgcG93ZXJmdWwgYmVsaWVmIGluIGJlbG9uZ2luZyB0byBhIHNwZWNpZmljIGxvY2F0aW9uIGluIHRoaXMgd29ybGQsIHdpdGggY2xhbnMgb3IgdHJpYmVzIHNvbWV0aW1lcyB0cmF2ZWxpbmcgZm9yIHllYXJzIGluIHNlYXJjaCBvZiB0aGVpciB0cnVlIGhvbWUuIEluIHRoZXNlIHRyYXZlbHMgZWFjaCBpbmRpdmlkdWFsIHdpbGwgY29sbGVjdCBzbWFsbCBtZW1lbnRvcyBvZiB0aGUgcGxhY2VzIHNoZSBvciBoZSBoYXMgdmlzaXRlZCBpbiBvcmRlciB0byByZW1lbWJlciB0aGVtIGFuZCBtYWludGFpbiBhIHNwaXJpdHVhbCBjb25uZWN0aW9uLiBEdXJpbmcgdGhlIEtpYW5pZGksIGEgdHJpYmUgd2lsbCBnYXRoZXIgYW5kIGRpc3BsYXkgdGhlc2UgbWVtZW50b3MgdG8gdGhlIGdyb3VwLiBUaGUgYmVzdCBvbmVzIGFyZSBjaG9zZW4gYW5kIG1hZGUgcGFydCBvZiB0aGUgY2xhbiBvciB0cmliYWwgaGlzdG9yeSwgc29tZXRoaW5nIHdoaWNoIEdhcnVuZGkgZmVlbCBpcyBhIGdyZWF0IGhvbm9yLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDUzNlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE1LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIYXJ2ZXN0IE1vb25cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MzdcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aXBsZSBFdmVudHNcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJGZXN0aXZhbCBvZiBOaWdodCdzIFJldHVyblxcblxcbk5pZGFsXFxuXFxuQ2VsZWJyYXRlZCB0aHJvdWdob3V0IE5pZGFsLCB0aGlzIGhvbGlkYXkgaW52b2x2ZXMgdGhlIGJ1cm5pbmcgb2YgZWZmaWdpZXMgYW5kIHNlbGYtZmxhZ2VsbGF0aW9uLlxcblxcblN3YWxsb3d0YWlsIEZlc3RpdmFsXFxuXFxuRGVzbmFcXG5cXG5Ib2xpZGF5IGNlbGVicmF0ZWQgd2l0aCBzdG9yeXRlbGxpbmcsIGZlYXN0aW5nLCBhbmQgdGhlIHJlbGVhc2Ugb2YgYnV0dGVyZmxpZXMuXFxuXFxuV2FuaW5nIExpZ2h0IEZlc3RpdmFsXFxuXFxuU2VnYWRhXFxuXFxuQWxzbyBjYWxsZWQgQmxlc3Npbmcgb2YgdGhlIFN1biBhbmQgTmlnaHQgb2YgU3Bpcml0cywgcGFydGljaXBhbnRzIGJpZCBmYXJld2VsbCB0byB0aGUgbG9uZyBkYXlzIG9mIHN1bnNoaW5lIHdpdGggZmVhc3RpbmcsIGRhbmNpbmcsIGFuZCBtdXNpYy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1MzhcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaWduaW5nIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFuZG9yYW4sIENoZWxpYXgsIEdhbHQsIElzZ2VyXFxuXFxuU2lnbmluZyBEYXkgaXMgYSBDaGVsaXNoIGhvbGlkYXksIGRhdGluZyBiYWNrIHRvIHRoZSBoZWlnaHQgb2YgdGhlIGVtcGlyZS4gT2JzZXJ2ZWQgb24gdGhlIHNlY29uZCBPYXRoZGF5IG9mIFJvdmEsIHRoaXMgaXMgdGhlIGRheSBvbiB3aGljaCBuZXcgbGF3cyBpbiB0aGUgZW1waXJlIHRvb2sgZWZmZWN0LiBUaGUgc2lnbmlmaWNhbmNlIG9mIHRoaXMgZGF5IGV4cGFuZGVkIG92ZXIgbWFueSB5ZWFycyB1bnRpbCBpbXBlcmlhbCBtYXJyaWFnZXMsIHNpZ25pZmljYW50IGJ1c2luZXNzIGFycmFuZ2VtZW50cyBhbmQgb2F0aHMgb2YgZmVhbHR5IHdlcmUgYWxsIGNvbmR1Y3RlZCBvbiB0aGlzIGRheS5cXG5cXG5PcmlnaW5hbGx5LCB0aGUgaG9saWRheSBiZWdhbiBhcyBhIGNlbGVicmF0aW9uIG9mIHRoZSBtdXR1YWwtZGVmZW5zZSBwYWN0IGJldHdlZW4gQ2hlbGlheCwgSXNnZXIsIEdhbHQgYW5kIEFuZG9yYW4gd2hlbiB0aGUgdW5pdGVkIG5hdGlvbnMgdGhyZXcgb2ZmIHRoZSBzaGFja2xlcyBvZiBUYWxkb3IsIGRlY2xhcmluZyB0aGVtc2VsdmVzIGluZGVwZW5kZW50IGZyb20gdGhlIGVtcGlyZS4gT2JzZXJ2YW5jZXMgb2YgdGhlIGhvbGlkYXkgdmFyeSwgYnV0IG9mdGVuIGluY2x1ZGUgZmlyZXdvcmsgZGlzcGxheXMsIGZlYXRzIG9mIHN0cmVuZ3RoLCBhbmQgcHVibGljIGRlYmF0ZXMgdG8gc2hvd2Nhc2Ugc3BlYWtpbmcgYW5kIHJoZXRvcmljYWwgc2tpbGxzLlxcblxcbkFzIENoZWxpYXggZGVnZW5lcmF0ZWQgdG8gY2l2aWwgd2FyIGFuZCBkaWFib2xpc20gYWZ0ZXIgNDYwNiBBUiwgYmxvb2QgcGFjdHMgYW5kIGluZmVybmFsIGNvbnRyYWN0cyBhbHNvIGJlZ2FuIHRvIGJlIHNpZ25lZCBvbiB0aGlzIGRheS4gQXMgYSByZXN1bHQgb2YgQ2hlbGlheCdzIG5ldyBhZmZpbGlhdGlvbiwgQW5kb3JhbiBhbmQgR2FsdCBiZWdhbiB0byBkaXN0YW5jZSB0aGVtc2VsdmVzIGZyb20gQ2hlbGlheCBhbmQgdGhlIG9yaWdpbmFsIGludGVycHJldGF0aW9uIG9mIHRoZSBob2xpZGF5LiBJbiBBbmRvcmFuIGl0IGNvbnRpbnVlcyB0byBiZSB0aGUgZGF5IHRoYXQgbW9zdCBuYXRpb25hbCBsYXdzIHRha2UgZWZmZWN0IGFzIHdlbGwgYXMgYmVpbmcgYSB0cmFkaXRpb25hbCBkYXkgb2YgbWFycmlhZ2UsIGFuZCB0aGUgZGF0ZSBvbiB3aGljaCBuZXcgU3RlZWwgRmFsY29ucyBhcmUgaW5kdWN0ZWQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTM5XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ3JhYmZlc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJLb3J2b3NhXFxuXFxuQ3JhYmZlc3QgaXMgYSBLb3J2b3NhbiBob2xpZGF5IGhlbGQgb24gdGhlIGZpcnN0IFdlYWxkYXkgb2YgUm92YS4gSXQgY2VsZWJyYXRlcyB0aGUgcmV0dXJuIG9mIHRoZSBjcmFicyBmcm9tIHRoZSBjb29sZXIgd2F0ZXJzIG9mIHRoZSBKZWdnYXJlIFJpdmVyIHRvIHRoZWlyIHdpbnRlciBoYWJpdGF0IGluIENvbnF1ZXJvcidzIEJheSwgYW5kIGlzIG1hcmtlZCBieSBjcmFiIGJvaWwgZmVhc3RzIGhlbGQgdGhyb3VnaG91dCB0aGUgY2l0eSBhbmQgaXRzIHN1cnJvdW5kaW5nIGNvbW11bml0aWVzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU0MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA4XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZlYXN0IG9mIFN6dXJwYWRlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgICdJcnJpc2VuXFxuXFxuVGhpcyBcImNlbGVicmF0aW9uIG9mIHBsZW50eVwiIGZlc3RpdmFsIG1vY2tzIHRoZSB0cmFkaXRpb25hbCBoYXJ2ZXN0IGZlc3RpdmFscyBjZWxlYnJhdGVkIGluIHRoZSByZWdpb24gYmVmb3JlIEJhYmEgWWFnYSBhbmQgaGVyIGV0ZXJuYWwgd2ludGVyIGRlc2NlbmRlZCB1cG9uIHRoZSBsYW5kLicsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTQxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA4XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRheSBvZiBTdW5kZXJpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJZZGVyc2l1c1xcblxcbk9uY2UgbWFueSBob2xpZGF5cyB3ZXJlIGNlbGVicmF0ZWQgYnkgdGhlIGZhaXRoIG9mIFlkZXJzaXVzLCBidXQgdG9kYXkgb25seSB0aGlzIGRhdGUgaGFzIG11Y2ggc2lnbmlmaWNhbmNlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU0MlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI5LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBZG1hbmkgVXBhc3R1dGlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJKYWxtZXJpXFxuXFxuQWRtYW5pIFVwYXN0dXRpIGlzIGEgSmFsbWVyaSBob2xpZGF5IGNlbGVicmF0ZWQgb24gdGhlIGZpcnN0IGZ1bGwgbW9vbiBvZiBMYW1hc2hhbiB0aGF0IG1hcmtzIHRoZSBmb3VuZGluZyBvZiBKYWxtZXJheSBhcyBhIFZ1ZHJhbiBjb2xvbnkuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTQzXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXNjZW5kYW5jZSBEYXlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJJb21lZGFlXFxuXFxuQXNjZW5kYW5jZSBEYXkgaXMgYW4gSW9tZWRhZWFuIGhvbGlkYXksIGhlbGQgb24gdGhlIDZ0aCBvZiBMYW1hc2hhbi4gVGhlIGRheSBtYXJrcyB0aGUgYW5uaXZlcnNhcnkgb2YgdGhlIGRheSBJb21lZGFlIHRvb2sgdGhlIFRlc3Qgb2YgdGhlIFN0YXJzdG9uZSBpbiB0aGUgYXV0dW1uIG9mIDM4MzIgQVIgYW5kIGFzY2VuZGVkIHRvIGdvZGhvb2QuXFxuXFxuQ2VsZWJyYXRpb25cXG5cXG5UaGUgZGF5IGlzIGEgam95b3VzIGNlbGVicmF0aW9uIGZvciB0aGUgZmFpdGhmdWwsIHdpdGggc2luZ2luZywgcGxlZGdpbmcgb2YgZnJpZW5kc2hpcHMsIGFuZCBmb3JnaXZpbmcgb2Ygb2xkIGdydWRnZXMuXFxuXFxuVG8gbWFueSwgdGhlIFRlc3Qgb2YgdGhlIFN0YXJzdG9uZSByZXByZXNlbnRzIHRoZSBncmVhdGVzdCBvZiBhbGwgY2hhbGxlbmdlcywgeWV0IGZvciBJb21lZGFlIGl0IHdhcyBvbmUgb2YgdGhyZWUgc3RvcmllZCBwcm9tb3Rpb25zIGluIGhlciByaXNlIGZyb20gQXJvZGVuJ3MgaGVyYWxkIHRvIGEgZ29kZGVzcyBpbiBoZXIgb3duIHJpZ2h0LiBPbiB0aGUgNnRoIG9mIExhbWFzaGFuLCB0aGUgSW5oZXJpdG9yJ3MgZmFpdGhmdWwgb2JzZXJ2ZSB0aGUgaGVyb2lzbSBvZiBJb21lZGFlJ3MgbGlmZSBiZWZvcmUgaGVyIG1vbWVudCBvZiBhc2NlbnNpb24gYW5kIGNlbGVicmF0ZSB0aGUgYW5uaXZlcnNhcnkgb2YgdGhlIGFwb3RoZW9zaXMgaXRzZWxmLlxcblxcblRoZSBjZWxlYnJhdGlvbiB0YWtlcyBwbGFjZSBpbiBzZXZlcmFsIHN0YWdlcy4gRWFybHkgaW4gdGhlIGRheSwgdHJvdXBlcyBvZiBwZXJmb3JtZXJzXHUyMDE0YXMgb2Z0ZW4gcGFzc2lvbmF0ZSBhbWF0ZXVycyBhcyBwcm9mZXNzaW9uYWxzXHUyMDE0c3RhZ2UgbW9yYWxpdHkgcGxheXMgZmVhdHVyaW5nIHRoZSBFbGV2ZW4gQWN0cyBvZiBJb21lZGFlLCB0aGUgaGVyb2ljIG5lYXItbWlyYWNsZXMgYW5kIHNhY3JpZmljZXMgc2hlIG1hZGUgbGVhZGluZyB1cCB0byBoZXIgdHJpYWxzIGluIHRoZSBTdGFyc3RvbmUgQ2F0aGVkcmFsLiBTY3JpcHRzIHZhcnkgYnkgcmVnaW9uLCBjaXR5LCBhbmQgZXZlbiBuZWlnaGJvcmhvb2QsIGJ1dCBkZXNwaXRlIGRpZmZlcmVuY2VzIGluIHNldHRpbmcsIHBlcmZvcm1hbmNlIG1lZGl1bSwgYW5kIHdvcmQgY2hvaWNlLCB0aGUgdGhlbWVzIGFuZCBtb3JhbHMgYXJlIGFsbCB0aGUgc2FtZS5cXG5cXG5BcyB0aGUgZGF5IGNvbnRpbnVlcywgdGhlIHByaWVzdHMgb3JnYW5pemUgam91c3RzIGFuZCBtb2NrIGJhdHRsZXMsIGFsbG93aW5nIGFueW9uZSB0byBwYXJ0aWNpcGF0ZSBzbyBsb25nIGFzIHNoZSBjYW4gZGVtb25zdHJhdGUgZW5vdWdoIHNraWxsIHRvIG5vdCBiZSBhIHJpc2sgdG8gaGVyc2VsZiBvciBvdGhlcnMuIFRoZSB3aW5uZXJzIG9mIHRoZXNlIGNvbnRlc3RzIHRoZW4gZmFjZSB0ZXN0cyBvZiBtZW50YWwgYWN1aXR5IHN1Y2ggYXMgc29sdmluZyByaWRkbGVzLCBkZWNpcGhlcmluZyBwaGlsb3NvcGhpY2FsIHF1YW5kYXJpZXMsIGFuZCBhbnN3ZXJpbmcgcXVlc3Rpb25zIG9mIGhvbm9yIGFuZCBqdXN0aWNlLiBUaG9zZSB3aG8gcHJvdmUgdGhlbXNlbHZlcyBpbiBib3RoIGNvbnRlc3RzIGFyZSBhd2FyZGVkIGEgd2hpdGUgY2xvYWtcdTIwMTRyZXByZXNlbnRpbmcgdGhlIEluaGVyaXRvciBhdCBwZWFjZVx1MjAxNHN0eWxlZCBhZnRlciBJb21lZGFlJ3Mgb3duIHJlZCBnYXJtZW50IHRvIHdlYXIgZm9yIHRoZSByZXN0IG9mIHRoZSBjZWxlYnJhdGlvbi4gRmVhc3RpbmcgYW5kIHNpbmdpbmcgZm9sbG93IHRoZSBjb21wZXRpdGlvbnMsIG1pcnJvcmluZyB0aGUganViaWxhdGlvbiB0aGF0IGZvbGxvd2VkIElvbWVkYWUncyBhc2NlbnNpb24uIFRoaXMgaXMgb2NjYXNpb24gZm9yIG1ha2luZyBwbGVkZ2VzIG9mIGZyaWVuZHNoaXAgYW5kIGZvcmdpdmluZyBlbmVtaWVzLCBhbmQgcHJpZXN0cyBjaXJjdWxhdGUgYWJvdXQgdGhlIGNyb3dkIG9mZmVyaW5nIHRoZSBJbmhlcml0b3IncyBibGVzc2luZyB0byB0aG9zZSB3aG8gZG8gYW5kIHByb3ZpZGluZyBhIG1vbWVudCdzIGNvdW5zZWwgb3IgbWVkaWF0aW9uIGZvciB0aG9zZSB3aG8gbmVlZCBhbiBleHRyYSBudWRnZS5cXG5cXG5UaGUgY2VsZWJyYXRpb24gdHlwaWNhbGx5IGVuZHMgYmVmb3JlIG1pZG5pZ2h0LCBhbmQgdGhlIGZvbGxvd2luZyBkYXkgdGhlIHByaWVzdHMgYW5kIHByZXZpb3VzIGRheSdzIGNoYW1waW9ucyBnYXRoZXIgdXAgdGhlIGJsdW50ZWQgc3dvcmRzIGZyb20gdGhlIG1vY2sgYmF0dGxlcywgc2hhcnBlbiB0aGVtLCBhbmQgZGlzdHJpYnV0ZSB0aGVtIGFtb25nIHRoZSBjaHVyY2gncyBhcm1vcnkgYW5kIHRob3NlIG9mIGxpa2UtbWluZGVkIG9yZ2FuaXphdGlvbnMgc28gdGhhdCBhbGwgbWF5IHJlbWFpbiB2aWdpbGFudCBhZ2FpbnN0IGV2aWwgYW5kIHByZXBhcmVkIHRvIHN0cmlrZSBpdCBkb3duLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU0NFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJhc3Rpb24gRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiU29sa3VcXG5cXG5CYXN0aW9uIERheSBpcyBhIHR3by1kYXkgZmVzdGl2YWwgaGVsZCBhbm51YWxseSBvbiAxOSBhbmQgMjAgTGFtYXNoYW4gaW4gdGhlIEthdGFwZXNoaSB0b3duIG9mIFNvbGt1IGhvbm9yaW5nIHRoZSBmb3VuZGluZyBvZiB0aGUgdG93biwgd2hlbiBpdCBpcyB0cmFkaXRpb25hbCB0byBob3N0IGEgc3RyYW5nZXIgZnJvbSBvbmUgbm9vbiB1bnRpbCB0aGUgbmV4dC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NDVcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxOSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogNDcxMixcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSmVzdGVyY2FwXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQW5kb3JhbiwgRHJ1bWEsIFRhbGRvclxcblxcbkplc3RlcmNhcCBvY2N1cnMgYXQgdGhlIGVuZCBvZiB0aGUgbW9udGggb2YgTGFtYXNoYW4sIHRyYWRpdGlvbmFsbHkgb24gdGhlIDI3dGggKGFsdGhvdWdoIGEgZmV3IHJlZ2lvbnMgaGF2ZSB0YWtlbiB0byBtb3ZpbmcgdGhlIGV4YWN0IGRheSBhcm91bmQgc2xpZ2h0bHkgc28gaXQgYWx3YXlzIGZhbGxzIG9uIHRoZSBsYXN0IFN0YXJkYXkgb2YgdGhlIG1vbnRoLCBhbGxvd2luZyBwZW9wbGUgd2hvIHdpc2ggdG8gY2VsZWJyYXRlIGluIGV4Y2VzcyB0byBoYXZlIHRoZSBmb2xsb3dpbmcgZGF5IG9mIHJlc3QgdG8gcmVjb3ZlcikuXFxuXFxuSGlzdG9yeVxcblxcbldoaWxlIEplc3RlcmNhcCBoYXMgYmVlbiBlbWJyYWNlZCB3aXRoIGV4Y2l0ZWQgb3BlbiBhcm1zIGJ5IHRoZSBnbm9tZSBjb21tdW5pdGllcyBvZiB0aGUgSW5uZXIgU2VhIHJlZ2lvbiwgaXRzIG9yaWdpbmFsIGdlbmVzaXMgaXMgc2FpZCB0byBoYXZlIGJlZW4gaW4gb25lIG9mIFRhbGRvcidzIGNvYXN0YWwgY2l0aWVzIG5vdCBsb25nIGFmdGVyIEtpbmcgQXNwZXggdGhlIEV2ZW4tVG9uZ3VlZCBicm9rZSBmcm9tIHRoZSBuYXRpb24sIHNpZ25pZmljYW50bHkgd2Vha2VuaW5nIFRhbGRvcidzIHBvd2VyIGFuZCBiZWdpbm5pbmcgdGhhdCBuYXRpb24ncyBsb25nIGRlY2xpbmUuIFRoZSBob2xpZGF5IHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGRpc3RyYWN0IHRoZSBkaXN0cmF1Z2h0IFRhbGRhbiBwb3B1bGFjZSB3aXRoIGEgbmlnaHQgb2YgcmV2ZWxyeSBhbmQgY29tZWRpYyBlbnRlcnRhaW5tZW50LCBidXQgdGhlIGFudGljcyBvZiBqZXN0ZXJzIHdlcmUgc2ltcGx5IG5vdCBlbm91Z2guXFxuXFxuT3ZlciB0aGUgY291cnNlIG9mIHRoZSBmaXJzdCBmZXcgeWVhcnMsIEplc3RlcmNhcCBldm9sdmVkIGZyb20gYSBob2xpZGF5IG9mIG9ic2VydmF0aW9uIHRvIGEgaG9saWRheSBvZiBwYXJ0aWNpcGF0aW9uLiBUb2RheSwgdGhlIGhvbGlkYXkgaXMgYSB0aW1lIHdoZXJlIGFueW9uZSBjYW4gcHVsbCBwcmFua3Mgb3Igam9rZXMgb3IgamFwZXMgb24gY29tcGFuaW9ucywgb24gbmVpZ2hib3JzLCBhbmQgKG1vc3QgdHlwaWNhbGx5KSBvbiByaXZhbHMsIHdpdGggdGhlIHVuZGVyc3RhbmRpbmcgdGhhdCBwcm92aWRlZCBubyBsYXN0aW5nIGhhcm0gaXMgZG9uZSwgYW55IGh1bWlsaWF0aW9ucyBpbmZsaWN0ZWQgYmVmb3JlIG1pZG5pZ2h0IGFyZSB0byBiZSB0YWtlbiBpbiBzdHJpZGUuIE9mIGNvdXJzZSwgY29tZSBtb3JuaW5nIHRoZSBkYXkgYWZ0ZXIsIHRoZXJlIGFyZSBpbmV2aXRhYmx5IGpva2VzIHRoYXQgd2VudCB0b28gZmFyLCBhbmQgZ3J1ZGdlcyBhbmQgZmV1ZHMgYm9ybmUgZnJvbSBKZXN0ZXJjYXAgYW50aWNzIGhhdmUgYSB3YXkgb2YgbGluZ2VyaW5nIGZvciBtb250aHMgdG8gZm9sbG93LlxcblxcbkluIFJlbGlnaW9uXFxuXFxuRm9sbG93ZXJzIG9mIENoYWxkaXJhIFp1emFyaXN0YW4sIGEgaGFsZmxpbmcgZGVpdHkgb2YgbWlzY2hpZWYsIHRyZWF0IEplc3RlcmNhcCBhcyBhIGhvbHkgZGF5IGFuZCB0aGVpciBwcmFua3MgXHUyMDE0IG9mdGVuIGVsYWJvcmF0ZSBhbmQgZXh0cmF2YWdhbnQgaW4gbmF0dXJlIGFuZCBwbG90dGVkIGZvciBtb250aHMgaW4gYWR2YW5jZSBcdTIwMTQgYXMgZGlzcGxheXMgb2YgdGhlaXIgZmFpdGguXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTQ2XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjcsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZlYXN0IG9mIHRoZSBTdXJ2aXZvcnNcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJab24tS3V0aG9uLCBOaWRhbFxcblxcbkEgaGFydmVzdCBmZXN0aXZhbCBzaWduaWZ5aW5nIHRoZSBjZW50dXJpZXMgb2YgTmlkYWxlc2UgYW5jZXN0b3JzIHByb3RlY3RlZCBieSBab24tS3V0aG9uLiBUaGUgY2VyZW1vbmlhbCB0YWJsZXMgYXJlIG1hZGUgb2YgaHVtYW4gYm9uZXMgb2YgY29tbXVuaXR5IG1lbWJlcnMgZnJvbSBwYXN0IGdlbmVyYXRpb25zLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU0N1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktyYWtlbiBDYXJuaXZhbFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFic2Fsb21cXG5cXG5UaGUgc2Vjb25kIG9mIHR3byBsb2NhbCBmZXN0aXZhbHMgd2hlcmUga2l0ZS1iYXR0bGVycyBjb21wZXRlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU0OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE1LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbmRlcGVuZGVuY2UgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiR2FsdFxcblxcbk1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIFJlZCBSZXZvbHV0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU0OVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDUsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTZXZlbiBWZWlsc1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlNpdmFuYWhcXG5cXG5UaGUgaG9saWRheSBrbm93biBhcyBTZXZlbiBWZWlscywgd2hpY2ggdGFrZXMgcGxhY2Ugb24gdGhlIDIzcmQgb2YgTmV0aCBpbiBtb3N0IHJlYWxtcyBvZiB0aGUgSW5uZXIgU2VhIHJlZ2lvbiwgaXMgYSBjZWxlYnJhdGlvbiBvZiB0aGUgcmVnaW9uJ3MgZGl2ZXJzaXR5IFx1MjAxNCBhIHRpbWUgd2hlbiBzb2NpYWwgYm91bmRhcmllcyBicmVhayBkb3duIGV2ZW4gZnVydGhlciBpbiBhIGRheS1sb25nIGV2ZW50IGZpbGxlZCB3aXRoIGRhbmNpbmcsIGZlYXN0aW5nLCBhbmQgY291cnRpbmcuIFRoZSBldmVuaW5nIHRyYWRpdGlvbmFsbHkgY2xvc2VzIG91dCB3aXRoIHRoZSBTZXZlbiBWZWlsIG1hc3F1ZXJhZGUsIGEgYmFsbCB3aGVyZWluIHRoZSBwYXJ0aWNpcGFudHMgd2VhciBkaXNndWlzZXMgdGhhdCBoaWRlIHRoZWlyIHJhY2Ugb3IgZ2VuZGVyIChvZnRlbiB1c2luZyBtaW5vciBtYWdpY2FsIHRyaW5rZXRzIGFuZCBzcGVsbHMpIG9yIGRpc2d1aXNlIHRoZXNlIGZlYXR1cmVzIGFzIGVudGlyZWx5IG5ldyBjaGFyYWN0ZXJpc3RpY3MuIEF0IHRoZSBlbmQgb2YgdGhlIGJhbGwsIHRoZSBwYXJ0aWNpcGFudHMgcmVtb3ZlIHRoZWlyIGRpc2d1aXNlcyB0byB0aGVpciBwYXJ0bmVycywgb2Z0ZW4gd2l0aCB1bnByZWRpY3RhYmxlIGFuZCBzb21ldGltZXMgZGVsaWdodGZ1bGx5IGF3a3dhcmQgcmVzdWx0cy4gVHJhZGl0aW9uYWxpc3RzIGFuZCBjb25zZXJ2YXRpdmUgbWluZHMgb2Z0ZW4gZmluZCB0aGUgU2V2ZW4gVmVpbHMgbWFzcXVlcmFkZXMgdG8gYmUgc2NhbmRhbG91cyBvciBvZmYtcHV0dGluZywgeWV0IHRoZXkgcmVtYWluIHBhcnRpY3VsYXJseSBwb3B1bGFyIGluIG1vc3Qgb2YgdGhlIGxhcmdlciBjaXRpZXMgb2YgdGhlIGxhbmQuXFxuXFxuSGlzdG9yaWFucyBub3RlIHRoYXQgdGhlIG9yaWdpbmFsIFxcXCJEYW5jZSBvZiB0aGUgU2V2ZW4gVmVpbHNcXFwiIGhhcyBhIG11Y2ggZGlmZmVyZW50IGdlbmVzaXMgdGhhbiBvbmUgcHJvbW90aW5nIGRpdmVyc2l0eSBcdTIwMTQgdGhlIG15c3RlcmlvdXMgY3VsdCBvZiBTaXZhbmFoLCBnb2RkZXNzIG9mIGlsbHVzaW9ucywgbXlzdGVyeSwgYW5kIHJlZmxlY3Rpb25zLCBpcyBnZW5lcmFsbHkgY2l0ZWQgYXMgdGhlIHNvdXJjZSBvZiB0aGlzIGZlc3RpdmFsLCBhbmQgaW5kZWVkLCB3b3JzaGlwcGVycyBvZiB0aGUgZ29kZGVzcyAoaGVyc2VsZiBrbm93biBhcyB0aGUgU2V2ZW50aCBWZWlsKSBjb3VudCB0aGUgMjNyZCBvZiBOZXRoIGFzIG9uZSBvZiB0aGVpciBtb3N0IHNhY3JlZCBvZiBkYXlzLiBXaGF0IHJpdHVhbHMgdGhlIGNodXJjaCBvZiBTaXZhbmFoIHBlcmZvcm1zIG9uIHRoaXMgZGF0ZSwgaG93ZXZlciwgYXJlIHVua25vd24gdG8gb3V0c2lkZXJzLCBmb3IgdGhlIGN1bHQgZW5qb3lzIGl0cyBzZWNyZXRzLiBUaGlzIHNlY3JlY3kgaGFzLCB1bnN1cnByaXNpbmdseSwgZ2l2ZW4gcmlzZSB0byBhbGwgbWFubmVyIG9mIHNpbmlzdGVyIHJ1bW91ciwgeWV0IHdoZW4gU2V2ZW4gVmVpbHMgcm9sbHMgYXJvdW5kIGVhY2ggeWVhciwgaXRzIGVhZ2VyIHBhcnRpY2lwYW50cyBhcmUgcXVpY2sgdG8gc2V0IGFzaWRlIHJ1bW91ciBpbiBwcmVmZXJlbmNlIGZvciB0aGUgbmlnaHQncyBmdW4gYW5kIGdhbWVzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU1MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIzLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQWJqdXJhbnQgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTmV0aHlzXFxuXFxuQWJqdXJhbnQgRGF5IG9jY3VycyBvbiA4IE5ldGggYW5kIGlzIGtub3duIGFzIGEgZGF5IG9mIGNvb3BlcmF0aW9uIGJldHdlZW4gbmVpZ2hib3JzIHRvIHNob3JlIHVwIG11dHVhbCBkZWZlbnNlcyBhbmQgdHJhaW4gYWxsaWVzIGluIG1hZ2ljLiBQb3RlbnRpYWwgYXBwcmVudGljZXMgYXJlIG9mdGVuIHRlc3RlZCBvbiB0aGUgZGF5LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU1MVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDgsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHcmVhdCBGaXJlIFJlbWVtYnJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiS29ydm9zYVxcblxcbkdyZWF0IEZpcmUgUmVtZW1icmFuY2UgaXMgYSBob2xpZGF5IGNlbGVicmF0ZWQgb24gZWFjaCAxMyBOZXRoIGluIHRoZSBWYXJpc2lhbiBjaXR5IG9mIEtvcnZvc2EuIEl0IGNvbW1lbW9yYXRlcyB0aGUgR3JlYXQgRmlyZSBvZiA0NDI5IEFSLCB3aGljaCBkZXZhc3RhdGVkIHRoZSB0aGVuIHN0aWxsIGZsZWRnbGluZyBDaGVsaXNoIGNvbG9ueSBvZiBGb3J0IEtvcnZvc2EuIE9uIHRoaXMgc29tYmVyIGRheSwgbW9zdCBvZiB0aGUgY2l0eSBzaHV0cyBkb3duIGFuZCBwZW9wbGUgZ2VuZXJhbGx5IHJlbWFpbiBhdCBob21lLiBJdCBoYXMgYmVjb21lIHRyYWRpdGlvbiBub3QgdG8gbGlnaHQgYW55IGZpcmVzIChub3QgZXZlbiBjb29raW5nIGZpcmVzKSBvbiBHcmVhdCBGaXJlIFJlbWVtYnJhbmNlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU1MlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEzLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRXZlbi1Ub25ndWVkIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNoZWxpYXgsIEFzbW9kZXVzLCBNaWxhbmlcXG5cXG5PYnNlcnZlZCBvbiAxNCBvZiBOZXRoLCBFdmVuLVRvbmd1ZWQgRGF5IHdhcyBvbmNlIGEgZGF5IG9mIGpveSBhbmQgY2VsZWJyYXRpb24gaW4gQ2hlbGlheCwgYnV0IGhhcyBiZWNvbWUgaW5zdGVhZCBvbmUgb2YgbW91cm5pbmcuXFxuXFxuT3JpZ2luYWxseSwgdGhlIGRhdGUgbWFya2VkIHRoZSBjb25xdWVzdCBvZiBBc3BleCB0aGUgRXZlbi1Ub25ndWVkLCB3aG8gYnJvdWdodCB0aGUgbmF0aW9ucyBvZiBHYWx0LCBBbmRvcmFuIGFuZCBJc2dlciB1bmRlciBDaGVsaXNoIGNvbnRyb2wuIFNpbmNlIHRoZSBkZWF0aCBvZiBBcm9kZW4gYW5kIHRoZSBsb3NzIG9mIHRoZXNlIG5hdGlvbnMsIHRoZSBob2xpZGF5IGluc3RlYWQgbWFya3MgdGhlIGxvc3Mgb2YgdGVycml0b3J5IGFuZCBnbG9yeSBvbmNlIGhlbGQgYnkgQ2hlbGlheC4gT2F0aHMgYXJlIHNvbWV0aW1lcyBtYWRlLCB0eXBpY2FsbHkgdG8gQXNtb2RldXMsIGFuZCByYXJlbHkgb2YgYSBwbGVhc2FudCBuYXR1cmUgKHN1Y2ggYXMgdGhlIHJlY2xhaW1pbmcgb2YgdGhlIGxvc3QgZW1waXJlIGFuZCB2ZW5nZWFuY2UgYWdhaW5zdCB0cmVhY2hlcm91cyBmb3JtZXIgYWxsaWVzKS5cXG5cXG5DaXRpemVucyB3ZWFyIGJsYWNrIG9uIHRoaXMgZGF5LCBwdWJsaWMgc3BlYWtpbmcgaXMgZm9yYmlkZGVuLCBhbmQgb2xkIGZldWRzIGFuZCB2ZW5kZXR0YXMgYXJlIHJla2luZGxlZC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NTNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxNCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkV2b2tpbmcgRGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTmV0aHlzXFxuXFxuQSBob2x5IGRheSB0byBmb2xsb3dlcnMgb2YgTmV0aHlzLCBFdm9raW5nIERheSBpcyBmdWxsIG9mIHZpYnJhbnQgZXhwbG9zaW9ucywgc2tpbGxmdWwgd2llbGRpbmcgb2Ygc3BlbGxzLCBhbmQgbXVjaCBkYW5jaW5nLiBFdm9raW5nIERheSBpcyBvYnNlcnZlZCBvbiB0aGUgMTh0aCBvZiBOZXRoLCBhbmQgd2hpbGUgdGhpcyBob2xpZGF5IGlzIG1vc3RseSBjZWxlYnJhdGVkIGluIEdhcnVuZCwgdGVtcGxlcyBkZWRpY2F0ZWQgdG8gTmV0aHlzIGhvc3QgY2VsZWJyYXRpb25zIHRocm91Z2hvdXQgdGhlIElubmVyIFNlYSByZWdpb24uIFRyYWRpdGlvbmFsIGNlbGVicmF0aW9ucyBvZiBFdm9raW5nIERheSBoYXZlIGNoYW5nZWQgb3ZlciB0aGUgdGhvdXNhbmRzIG9mIHllYXJzIHNpbmNlIGl0cyBmaXJzdCBpbmNhcm5hdGlvbiwgYnV0IHRvIHRoaXMgZGF5IGV2ZXJ5IG9jY3VycmVuY2Ugb2YgRXZva2luZyBEYXkgc3RpbGwgZmVhdHVyZXMgYSBncmFuZCBtZWFsIHNoYXJlZCBieSBjZWxlYnJhbnRzIGR1cmluZyB0aGUgYWZ0ZXJub29uIGFuZCBhIHdvbmRyb3VzIGV4aGliaXRpb24gb2YgYnJpbGxpYW50IGFuZCBleHBsb3NpdmUgbWFnaWMgb25jZSB0aGUgc3VuIHNldHMuIFRoZXNlIGRheXMsIHN1Y2ggY29sb3JmdWwgbWFnaWNhbCBkaXNwbGF5cyBhcmUgYXVnbWVudGVkIHdpdGggZmlyZXdvcmtzIG9mIGEgZG96ZW4gZGlmZmVyZW50IGNvbG9ycyBhbmQgcGF0dGVybnMuXFxuXFxuSW4gdGVtcGxlcyBvZiBOZXRoeXMgZGVkaWNhdGVkIHRvIHJldmVyaW5nIGV2b2NhdGlvbiBtYWdpYywgcHJpZXN0cyBhbmQgcHJvbWluZW50IGFyY2FuaXN0cyBwYXJ0aWNpcGF0ZSBpbiBzcGVsbCBkdWVscyB3aGVyZSBlYWNoIGNvbnRlc3RhbnQgc3RhbmRzIG9uIGEgcmFpc2VkIHBsYXRmb3JtIGFuZCB0YWtlcyB0dXJucyB0cnlpbmcgdG8gaW5jYXBhY2l0YXRlIGhlciBvcHBvbmVudC4gVGhlIG1hZ2ljIHdpZWxkZWQgaW4gdGhlc2VzIGR1ZWxzIGZhdm9ycyB0aGUgZmxhc2h5IG92ZXIgdGhlIGRhbmdlcm91cywgYnV0IGNsZXJpY3Mgb2YgTmV0aHlzIGFyZSBvbiBoYW5kIHRvIHRyZWF0IGFueSBpbmp1cmllcy4gVGhlc2UgZHVlbHMgZ2F0aGVyIGxhcmdlIGNyb3dkcyBlYWdlciB0byBsZW5kIHRoZWlyIGFwcGxhdXNlIHRvIHRoZWlyIGZhdm9yaXRlIGNvbnRlc3RhbnQuXFxuXFxuSXQgaXMgYWxzbyBkdXJpbmcgdGhpcyBmZXN0aXZhbCB3aGVuIHdpemFyZHMgd2hvIHdvcnNoaXAgTmV0aHlzIG9wZW4gdGhlaXIgc3BlbGxib29rcyB0byBvdGhlcnMgd2hvIHNoYXJlIHRoZWlyIGNyYWZ0LiBXaXphcmRzIG5vcm1hbGx5IGd1YXJkIHRoZWlyIHNwZWxsYm9va3Mgd2l0aCB0aGVpciBsaXZlcyBhbmQgY292ZXQgdGhlIGVsZHJpdGNoIGluZm9ybWF0aW9uIHRoZXJlaW4sIGJ1dCBvbiBFdm9raW5nIERheSB0aGVzZSB3aXphcmRzIG1lZXQgd2l0aCBvbmUgYW5vdGhlciBwcmlvciB0byB0aGUgYWZ0ZXJub29uIGZlYXN0IHRvIHNoYXJlIHRoZWlyIHNwZWxscyBqdXN0IGFzIHRoZXkgcHJlcGFyZSB0byBzaGFyZSBhIGdyYW5kIG1lYWwuXFxuXFxuVGhvdWdoIEV2b2tpbmcgRGF5IGlzIHByaW1hcmlseSBhIGRheSBvZiBncmFuZCBtYWdpYywgdGhvc2Ugd2l0aCBubyBzcGVsbGNhc3RpbmcgdGFsZW50IHN0aWxsIGZsb2NrIHRvIGxvY2FsIHRlbXBsZXMgb2YgTmV0aHlzIHRvIHBhcnRha2UgaW4gdGhlIHNoYXJlZCBmZWFzdCBhbmQgZmxhc2h5IGV2ZW5pbmcgZGlzcGxheXMgb2YgbWFnaWMgYW5kIGZpcmV3b3Jrcy4gQmV0d2VlbiB0aGUgbWVhbCBhbmQgaW50byB0aGUgbmlnaHQsIGNlbGVicmFudHMgd2VhciBibGFjay1hbmQtd2hpdGUgcm9iZXMgYW5kIHBlcmZvcm0gam95b3VzIGRhbmNlcyBtZWFudCB0byBnaXZlIHRoYW5rcyB0byB0aGUgd29uZGVycyBOZXRoeXMgYnJvdWdodCB0byBodW1hbmtpbmQuIFRoZXNlIGRhbmNlcyBhcmUgZ3JhbmQgYWZmYWlycyBpbnZvbHZpbmcgZG96ZW5zIG9mIGRhbmNlcnMgYWxsIHNwaW5uaW5nIGFuZCBjbGFwcGluZyB0byB0aGUgYWNjb21wYW55aW5nIG11c2ljIGFzIHRoZWlyIGJsYWNrLWFuZC13aGl0ZSByb2JlcyBmYW4gb3V0IGFyb3VuZCB0aGVtIHdpdGggZWFjaCBzcGluLiBBcyBuaWdodCBkZXNjZW5kcyBhbmQgdGhlIGZpcmV3b3JrcyBhbmQgbWFnaWNhbCBkaXNwbGF5cyBiZWdpbiwgdGhlIGRhbmNpbmcgcmlzZXMgdG8gYSBjbGltYXggZXJ1cHRpbmcgaW4gc2hvdXRzIGFuZCBjYWxscyB0byBOZXRoeXMgd2l0aCBlYWNoIHRodW5kZXJvdXMgYm9vbS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NTRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxOCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJhcHRpc20gb2YgSWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSXJyaXNlblxcblxcbkluIHRoZSBJcnJpc2VuaSBCYXB0aXNtIG9mIEljZSwgYW4gYW5udWFsIGZlcnRpbGl0eSBmZXN0aXZhbCBoZWxkIGZyb20gdGhlIDI0dGggdG8gdGhlIDMwdGggb2YgTmV0aCwgbG9jYWxzIHBhcmFkZSBhbGwgY2hpbGRyZW4gYm9ybiBkdXJpbmcgdGhlIHllYXIgdGhyb3VnaCB0aGUgdG93biBpbiBmaW5lIGNsb3RoZXMuIEluIG1vc3QgdG93bnMsIHRoZSBmZXN0aXZhbCBlbmRzIHdpdGggYSBzeW1ib2xpYyBzYWNyaWZpY2Ugb2YgYSBjaGlsZCB0byB0aGUgY29sZC4gSG93ZXZlciwgaW4gV2hpdGV0aHJvbmUgYW5kIElycmlzZW4ncyBwcm92aW5jaWFsIGNhcGl0YWxzLCBhIHBlYXNhbnQgY2hpbGQgaXMga2lsbGVkIHRocm91Z2ggZXhwb3N1cmUuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTU1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjQsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUcmFuc211dGF0dW1cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJOZXRoeXNcXG5cXG5UcmFuc211dGF0dW0gaXMgb25lIG9mIHRoZSB0aHJlZSBtYWpvciBob2xpZGF5cyBvZiB0aGUgY2h1cmNoIG9mIE5ldGh5cywgb24gMjh0aCBvZiBOZXRoLiBJdCBpcyBhIGRheSBvZiByZWZsZWN0aW9uIGFuZCBzZWxmLWltcHJvdmVtZW50LiBNYW55IGZvbGxvd2VycyBvZiBOZXRoeXMgYmVnaW4gcmVzZWFyY2ggYW5kIGNyYWZ0aW5nIHByb2plY3RzIG9uIHRoaXMgZGF5LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU1NlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI4LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ludGVyIFdlZWtcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUcmFkaXRpb25hbCBmZWFzdDsgdGltZSBmb3IgY291cnRpbmcgYW5kIHNwZW5kaW5nIHRpbWUgd2l0aCBmcmllbmRzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU1N1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUaGUgU2hhZG93Y2hhaW5pbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJab24tS3V0aG9uLCBOaWRhbFxcblxcbkNvbW1lbW9yYXRpbmcgdGhlIE1pZG5pZ2h0IExvcmQncyBnaWZ0IG9mIHNoYWRvdyBhbmltYWxzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU1OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQc2V1ZG9kcmFnb24gRmVzdGl2YWxcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJLb3J2b3NhXFxuXFxuS29ydm9zYSdzIFBzZXVkb2RyYWdvbiBGZXN0aXZhbCwgYSBob2xpZGF5IGNlbGVicmF0ZWQgYW5udWFsbHkgb24gNyBLdXRob25hLCBtYXJrcyB0aGUgd2ludGVyIG1pZ3JhdGlvbiBvZiB3aWxkIHBzZXVkb2RyYWdvbnMgZnJvbSB0aGUgTWluZHNwaW4gTW91bnRhaW5zIHRvIENvbnF1ZXJvcidzIEJheSwgd2hpY2ggaW5zcGlyZXMgdGhlIGNyZWF0dXJlcyBhbHJlYWR5IGluIHRoZSBjaXR5XHUyMDE0ZXZlbiB0aG9zZSBkb21lc3RpY2F0ZWRcdTIwMTR0byBwbGF5IHdpdGggdGhlaXIgd2lsZCBraW4gaW4gdGhlIHNraWVzIG92ZXIgdGhlIGNpdHkuIExvY2FscyBtYXJrIHRoZSBkYXkgd2l0aCBhIGpveW91cyBpbmVicmlhdGlvbi5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NTlcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA3LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMTFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXNjZW5zaW9uIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNheWRlbiBDYWlsZWFuXFxuXFxuTXVjaCBsaWtlIHRoZSBnb2QgdG8gd2hvbSBpdCBpcyBkZWRpY2F0ZWQsIHRoZSBDYXlkZW5pdGUgaG9saWRheSBvZiBBc2NlbnNpb24gRGF5IGlzIGdlbmVyYWxseSBjZWxlYnJhdGVkIGluIGEgdmVyeSBpbmZvcm1hbCBzdHlsZS4gT2NjdXJyaW5nIGFubnVhbGx5IG9uIDExIEt1dGhvbmEsIGl0IGNvbW1lbW9yYXRlcyB0aGUgZGF5IENheWRlbiBDYWlsZWFuIHBhc3NlZCB0aGUgVGVzdCBvZiB0aGUgU3RhcnN0b25lIGFuZCBhc2NlbmRlZCB0byBnb2Rob29kIGluIDI3NjUgQVIuIEluIGFsbCBsaWtlbGlob29kLCB0aGUgMTF0aCBvZiBLdXRob25hIGlzIG5vdCB0aGUgZXhhY3QgZGF0ZSBvbiB3aGljaCBpdCBhY3R1YWxseSBoYXBwZW5lZCwgYnV0IHNpbmNlIHRoZSBnb2Qgd2FzIGRlYWQgZHJ1bmsgd2hlbiBpdCBoYXBwZW5lZCwgaXQgd2lsbCBwcm9iYWJseSBiZSBuZXZlciBrbm93bi5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NjBcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDExXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbnRlcmJsb29tXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTmFkZXJpXFxuXFxuSG9saWRheSBjZWxlYnJhdGluZyBOYWRlcmkncyBhc2NlbnNpb24uIENlbGVicmF0aW9ucyBhcmUgdHlwaWNhbGx5IHVuZGVyc3RhdGVkIGJ1dCBpbmNsdWRlIHJlYWRpbmdzIG9mIFRoZSBMYXkgb2YgQXJkZW4gYW5kIEx5c2VuYS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NjFcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxNSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDExXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpbmFsIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkdyb2V0dXNcXG5cXG5DdWx0aXN0cyBvZiBHcm9ldHVzIHBlcmZvcm0gYW4gaG91cidzIHNpbGVuY2UgYXQgZHVzayBvbiB0aGUgbGFzdCBkYXkgb2YgdGhlIHllYXIgYW5kIHNlZWsgZ3VpZGFuY2UgZnJvbSB0aGVpciBnb2QgYWJvdXQgdGhlIEVuZCBUaW1lLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU2MlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDMxLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMTFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTmlnaHQgb2YgdGhlIFBhbGVcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJOb3QgYWxsIG9mIEdvbGFyaW9uJ3MgaG9saWRheXMgYW5kIGZlc3RpdmFscyBhcmUgdGltZXMgb2YgcmVqb2ljaW5nIGFuZCBkZWxpZ2h0LiBIb2xpZGF5cyB3b3JzaGlwZWQgYnkgZGFyayBhbmQgc2luaXN0ZXIgY3VsdHMgYW5kIHJlbGlnaW9ucyB0ZW5kIHRvIGJlIGhpZGRlbiBhZmZhaXJzLCB0aGVpciByaXR1YWxzIGFuZCBjZXJlbW9uaWVzIGludm9sdmluZyBjcnVlbHRpZXMgYW5kIHZpbGUgcHJhY3RpY2VzIHRoYXQgc2VuZCBzaGl2ZXJzIG9mIGZlYXIgdGhyb3VnaCBnZW50bGVyIHNvY2lldHkuIFNjaG9sYXJzIHN1c3BlY3QgdGhhdCB0aGUgTmlnaHQgb2YgdGhlIFBhbGVcdTIwMTRhIGhvbGlkYXkgdGhhdCB0cmFkaXRpb25hbGx5IHRha2VzIHBsYWNlIG9uIHRoZSBsYXN0IGRheSBvZiB0aGUgeWVhciwgdGhlIDMxc3Qgb2YgS3V0aG9uYVx1MjAxNGhhcyBsaW5rcyB0byBzZXZlcmFsIHNpbmlzdGVyIHJlbGlnaW9ucywgYnV0IHRvZGF5IG5vIG9uZSBjaHVyY2ggaGFzIHNwZWNpZmljIGFzc29jaWF0aW9uIHdpdGggdGhlIGV2ZW50LiBOb25ldGhlbGVzcywgdGhlIE5pZ2h0IG9mIHRoZSBQYWxlIGlzIGFuIGV2ZW50IHRoYXQgbWFueSBsb29rIGZvcndhcmQgdG8gYWxsIHllYXIsIHdoZXRoZXIgaW4gZmVhciBvciBleGNpdGVtZW50Llxcblxcbk9uIHRoZSBOaWdodCBvZiB0aGUgUGFsZSwgaXQgaXMgc2FpZCB0aGF0IHRoZSBnaG9zdHMgb2YgdGhvc2Ugd2hvIGRpZWQgZHVyaW5nIHRoZSBwcmV2aW91cyB5ZWFyIG1hbmlmZXN0IHVwb24gdGhlIHdvcmxkIGFuZCBjb21lIHRvIHZpc2l0IHRoZSBob21lcyB0aGV5IGxpdmVkIGluIGR1cmluZyBsaWZlLiBBbHRob3VnaCBzb21lIG1pZ2h0IHRoaW5rIHRoYXQgdGhlIGNoYW5jZSBvZiBzZWVpbmcgZXZlbiB0aGUgc2hhZGUgb2YgYSBkZWFybHkgZGVwYXJ0ZWQgb25lIG1pZ2h0IGJlIGEgYmxlc3NpbmcsIHRoZSBOaWdodCBvZiB0aGUgUGFsZSBpcyBub3QgYSB0aW1lIGZvciB0ZWFyZnVsIHJldW5pb25zLCBmb3IgdGhlc2UgZ2hvc3RzLCB0cmFkaXRpb24gc2F5cywgZG8gbm90IHJldHVybiBvdXQgb2YgbG92ZSBmb3IgdGhvc2UgdGhleSBsZWZ0IGJlaGluZCBidXQgb3V0IG9mIGRhcmtlciBjb21wdWxzaW9ucy4gTGluZ2VyaW5nIGplYWxvdXN5LCB1bmZpbmlzaGVkIGFyZ3VtZW50cywgb3IgdGhlIHNpbW1lcmluZyBuZWVkIGZvciByZXZlbmdlIGFyZSBzYWlkIHRvIGJlIHdoYXQgY29tcGVscyB0aGUgZGVhZCB0byByZXR1cm4gdG8gdG9ybWVudCB0aGUgbGl2aW5nIG9uIHRoZSBOaWdodCBvZiB0aGUgUGFsZS5cXG5cXG5UaGUgZXZlbmluZyBvZiB0aGlzIG5pZ2h0IGluIG1hbnkgY29tbXVuaXRpZXMgaXMgY2VsZWJyYXRlZCBieSBhIG1vcmJpZCBmZWFzdCwgdGhlIGZvb2QgcHJlcGFyZWQgd2l0aCB0aGVtZXMgcmV2b2x2aW5nIGFyb3VuZCBncmF2ZXlhcmRzLCB0aGUgZGVhZCwgYW5kIG90aGVyIHNwb29reSB0cmFkaXRpb25zLiBUaGlzIGZlYXN0LCBvbiBvbmUgbGV2ZWwsIGhlbHBzIHRoZSBjZWxlYnJhbnRzIHRvIG1ha2UgbGlnaHQgb2YgdGhlaXIgZmVhcnMgd2hpbGUgc2hhcmluZyBnb29kIGNvbXBhbnkgd2l0aCBzaW1pbGFybHkgbmVydm91cyBuZWlnaGJvcnMsIGJ1dCBhdCBhbm90aGVyIGxldmVsIGlzIGJlbGlldmVkIHRvIHBsYWNhdGUgdmVuZ2VmdWwgc3Bpcml0cyBhcyB0b2FzdHMgYXJlIHJhaXNlZCB0byB0aGUgbWVtb3JpZXMgb2YgdGhlIHJlY2VudGx5IGRlcGFydGVkLiBUaGVzZSBmZWFzdHMgaW5jbHVkZSByZXRlbGxpbmdzIG9mIGZhdm9yaXRlIG1lbW9yaWVzIG9mIHRoZSBkZXBhcnRlZCwgaW4gaG9wZXMgb2YgcmVtaW5kaW5nIHRoZSBhcHByb2FjaGluZyBnaG9zdHMgb2YgYnJpZ2h0ZXIgYW5kIGtpbmRlciBtZW1vcmllcyB0aGFuIHRob3NlIHRoYXQgY29tcGVsIHRoZW0gdG8gcmV0dXJuLiBUaGUgZmVhc3QgYWx3YXlzIGVuZHMgYXQgbGVhc3QgYW4gaG91ciBiZWZvcmUgbWlkbmlnaHQgaW4gb3JkZXIgdG8gZ2l2ZSBwYXJ0aWNpcGFudHMgdGltZSB0byByZXR1cm4gaG9tZSwgZGVjb3JhdGUgZG9vcnMgYW5kIHdpbmRvd3Mgd2l0aCBzYWx0IGFuZCBvdGhlciB0cmlua2V0cyB0YWtlbiBmcm9tIHRoZSBmZWFzdGluZyB0YWJsZSAoc2FsdGVkIGJyZWFkIGJha2VkIGludG8gY3Jvb2stbGlrZSBzaGFwZXMgYXJlIGEgZmF2b3JpdGUsIGFzIHRoZXNlIGNhbiBiZSBodW5nIGZyb20gZG9vcmtub2JzIGFuZCBlYXZlcykgdG8gd2FyZCBvZmYgZXZpbCBzcGlyaXRzLCBhbmQgaGlkZSBpbiB0aGVpciBiZWRyb29tcyB1bnRpbCBkYXduLiBCcmF2ZSB5b3V0aHMgYW5kIGFkdmVudHVyZXJzIG9mdGVuIGRlbGliZXJhdGVseSBzdGF5IG91dCBhZnRlciBtaWRuaWdodCwgZWl0aGVyIHRvIGRhcmUgdGhlIGdob3N0cyB0byBjaGFsbGVuZ2UgdGhlbSBvciBzaW1wbHkgZm9yIHRoZSB0aHJpbGwgb2YgYnVja2luZyB0cmFkaXRpb24uIEV2ZXJ5IE5pZ2h0IG9mIHRoZSBQYWxlLCBpdCBzZWVtcywgdGhlcmUgYXJlIGRpc2FwcGVhcmFuY2VzIGFtb25nIHRob3NlIHdobyBzdGF5IG91dCBhZnRlciBtaWRuaWdodCwgYWx0aG91Z2ggd2hldGhlciB0aGVzZSB2YW5pc2hpbmdzIGFyZSB0aGUgcmVzdWx0IG9mIGRpc3NhdGlzZmllZCBsb2NhbHMgdGFraW5nIHRoZSBvcHBvcnR1bml0eSB0byBydW4gYXdheSBmcm9tIGhvbWUsIG11cmRlcmVycyBvciB3aWxkIGFuaW1hbHMgb3Igb3RoZXIgbXVuZGFuZSBkYW5nZXJzLCBvciB0aGUgdmVuZ2VmdWwgc3Bpcml0cyBjYXJyeWluZyBvZmYgdGhlaXIgdmljdGltcyBkZXBlbmRzIHVwb24gdGhlIGNpcmN1bXN0YW5jZXMuXFxuXFxuVGhlIG1vcm5pbmcgYWZ0ZXIgYSBOaWdodCBvZiB0aGUgUGFsZSBpcyBhbHNvIHRoZSBmaXJzdCBkYXkgb2YgdGhlIG5ldyB5ZWFyXHUyMDE0YSB0aW1lIHRoYXQgbWFueSBjZWxlYnJhdGUgbW9yZSBhcyBhIHJlbGllZiBmb3Igc3Vydml2aW5nIHRoZSBuaWdodCBiZWZvcmUgdGhhbiBpbiBhbnRpY2lwYXRpb24gb2Ygd2hhdCB0aGUgbmV3IHllYXIgbWlnaHQgYnJpbmcsIGFsdGhvdWdoIHJlZ2lvbmFsIHByZWZlcmVuY2VzIGZvciBob3cgdGhpcyBkYXkgaXMgY2VsZWJyYXRlZCB2YXJ5IGVub3VnaCB0aGF0IG5vIHNpbmdsZSB0cmFkaXRpb24gaG9sZHMgb3ZlciB0aGUgb3RoZXIuIFNhdmUsIG9mIGNvdXJzZSwgdGhlIGxpbmdlcmluZyBmZWFycyBvZiB3aGF0IGRyZWFkIHNwaXJpdHMgbWlnaHQgY29tZSBrbm9ja2luZyB1cG9uIHdhcmRlZCBkb29ycyBvbmUgeWVhciBhd2F5Li4uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTYzXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMzEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUdXJuaW5nIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFsc2V0YVxcblxcblRoZSBjaGFuZ2luZyBvZiB0aGUgeWVhciBpcyBjZWxlYnJhdGVkIHdpdGggdGhlIGZvcmdpdmVuZXNzIG9mIG9sZCBkZWJ0cyBhbmQgZ3J1ZGdlcywgYW5kIGVtYnJhY2luZyBuZXcgb3Bwb3J0dW5pdGllcy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NjRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAzMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDExXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJpdHVhbCBvZiBTdGFyZHVzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkRlc25hXFxuXFxuVGhlIFJpdHVhbCBvZiBTdGFyZHVzdCBpcyBvbmUgb2YgdGhlIGZldyBmb3JtYWwgcmVsaWdpb3VzIGhvbGlkYXlzIGluIGhvbm9yIG9mIHRoZSBnb2RkZXNzIERlc25hLiBJdCBpcyBoZWxkIG9uIGJvdGggdGhlIHN1bW1lciBhbmQgd2ludGVyIHNvbHN0aWNlcy5cXG5cXG5Gb2xsb3dlcnMgb2YgdGhlIFNvbmcgb2YgU3BoZXJlcyBnYXRoZXIgYXQgZHVzayBhbmQgbGlnaHQgZW5vcm1vdXMgYm9uZmlyZXMgYW5kIGhvbGQgZmVhc3RzLCB3YXRjaGluZyB0aGUgc3BhcmtzIGFuZCBlbWJlcnMgZmxvYXQgb3V0IGludG8gdGhlIGRhcmtlbmluZyBza3kuIEFmdGVyIGl0IGlzIGZ1bGx5IGRhcmssIHRoZSBjZWxlYnJhbnRzIGNoYW50IGFuZCBzaW5nIHNvbmdzIGFzIHRoZXkgd2F0Y2ggdGhlIGZpcmVzIGJ1cm4gbG93LiBXaGVuIG9ubHkgZW1iZXJzIHJlbWFpbiwgc2FuZCBtaXhlZCB3aXRoIGdyb3VuZCBzdGFyIGdlbXMgKGVpdGhlciBzdGFyIHJ1Ymllcywgc3RhciBzYXBwaGlyZXMsIG9yIHJvc2UgcXVhcnR6KSBpcyB0aHJvd24gb24gdGhlbSBvciBpbnRvIHRoZSBhaXIgZG93bndpbmQuIEF0IHRoaXMgcG9pbnQgaXQgaXMgY29tbW9uIHRvIG1ha2UgcHJvY2xhbWF0aW9ucyBvZiBsb3ZlIGFuZCBmcmllbmRzaGlwIGFuZCBvZiBwcm9taXNlZCBqb3VybmV5cyB0byBjb21lLiBUaGUgdHdpbmtsaW5nIG9mIHRoZSBzYW5kIGlzIHRob3VnaHQgdG8gbWlycm9yIHRoZSBuaWdodCBza3kgYW5kIGRlbW9uc3RyYXRlIERlc25hJ3Mgd2l0bmVzc2luZyBvZiB0aGVzZSBwcm9ub3VuY2VtZW50cy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NjVcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQbGFudGluZyBXZWVrXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiRXJhc3RpbFxcblxcblRoaXMgaG9seSB3ZWVrIHRvIHRoZSBnb2QgRXJhc3RpbCBpcyBhIHRpbWUgb2YgaGVhdnkgd29yayBpbiB0aGUgZmllbGRzIGZvciBmYXJtZXJzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU2NlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFzY2VuZGFuY2UgTmlnaHRcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJOb3Jnb3JiZXJcXG5cXG5EYXkgbWFya2luZyB0aGUgYXBvdGhlb3NpcyBvZiB0aGUgUmVhcGVyIG9mIFJlcHV0YXRpb24uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTY3XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMixcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXp2YWRldmEgRGVqYWxcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJHcnVoYXN0aGFcXG5cXG5DZWxlYnJhdGlvbiBvZiB0aGUgcmV2ZWxhdGlvbiBvZiB0aGUgQXp2YWRldmEgUHVqaWxhLCB3aXRoIGdpZnRzIG9mIGJvb2tzLCBjZWxlYnJhdGlvbnMgb2Yga25vd2xlZGdlLCBibGVzc2luZyBvZiBhbmltYWxzLCBhbmQgYSB2ZWdldGFyaWFuIGZlYXN0LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU2OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDMsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdvYmxpbiBGbGVhIE1hcmtldFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFuZG9yYW5cXG5cXG5BIG1hcmtldCBkYXkgdGhhdCBmb2N1c2VzIG9uIHVudXN1YWwgY3JhZnRzIGFuZCBvZmZlcnMgZ2FtZXMgdG8gY2hpbGRyZW4gd2hvIGRyZXNzIHVwIGZvciB0aGUgb2NjYXNpb24uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTY5XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYWNoaW5nIEZlc3RpdmFsXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiS29ydm9zYVxcblxcblllYXJseSBmZXN0aXZhbCBpbiB3aGljaCBjb250ZXN0YW50cyB0cnkgdG8gYnJlYWsgdGhyb3VnaCB0aGUgbWFnaWNhbCB3YXJkcyBwcm90ZWN0aW5nIHRoZSBBY2FkZW1hZS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NzBcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaWx2ZXJnbGF6ZXIgU3VuZGF5XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQW5kb3JhblxcblxcblNpbHZlcmdsYXplciBTdW5kYXkgaXMgYSB0d28tcGFydCBBbmRvcmVuIG5hdGlvbmFsIGZlc3RpdmFsIHRoYXQgaXMgaGVsZCBvbiB0aGUgbGFzdCBTdW5kYXkgb2YgQXJvZHVzIGFuZCB0aGUgZmlyc3QgU3VuZGF5IG9mIFJvdmEgZXZlcnkgeWVhci4gQ2VsZWJyYW50cyBzcGVuZCB0aGUgdHdvIFN1bmRheXMgZmlzaGluZywgaG9sZGluZyBzd2ltbWluZyBjb21wZXRpdGlvbnMsIGFuZCBtYWtpbmcgZW5vcm1vdXMgcHVwcGV0cy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1NzFcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCYXR1bCBhbC1BbGltXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiUWFkaXJhXFxuXFxuQmF0dWwgYWwtQWxpbSBpcyBhIGhvbGlkYXkgY2VsZWJyYXRlZCBvbiB0aGUgbGFzdCBPYXRoZGF5IG9mIENhbGlzdHJpbCBpbiBRYWRpcmEuIEl0IGNvbW1lbW9yYXRlcyB0aGUgYmlydGhkYXkgb2YgdGhlIHBvcHVsYXIgcm9tYW50aWMgcG9ldCBvZiB0aGUgc2FtZSBuYW1lLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU3MlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgY2F0ZWdvcmllczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTmF0dXJhbCBFdmVudHNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJuYXR1cmFsLWV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMyRTdEMzJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlbGlnaW91cyBIb2xpZGF5c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcInJlbGlnaW91cy1ob2xpZGF5c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiM5YjJjMmNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNlY3VsYXIgSG9saWRheXNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJzZWN1bGFyLWhvbGlkYXlzXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzBENDdBMVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGlzdG9yaWNhbCBFdmVudHNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJoaXN0b3JpY2FsLWV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiM0NTVBNjRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1pc2NlbGxhbmVvdXMgRXZlbnRzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwibWlzY2VsbGFuZW91cy1ldmVudHNcIixcbiAgICAgICAgICAgICAgICBjb2xvcjogXCIjMDI4OEQxXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNhbGVuZGFyIG9mIEdhbGlmYXJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ2FsZW5kYXIgb2YgdGhlIHdvcmxkIG9mIEViZXJyb24uXCIsXG4gICAgICAgIHN0YXRpYzoge1xuICAgICAgICAgICAgZGlzcGxheURheU51bWJlcjogZmFsc2UsXG4gICAgICAgICAgICBmaXJzdFdlZWtEYXk6IDAsXG4gICAgICAgICAgICBpbmNyZW1lbnREYXk6IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheU1vb25zOiB0cnVlLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3VsXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzU5OGE3YmQ5YjhiOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTW9sXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzY5MDg4YWM4ZjgxOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWm9sXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2E4Yzg1YTk4ZjhmYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV2lyXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2ZhNGI2ODdhYWJhOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWm9yXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzU4ZTlhODJhNmJjOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmFyXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzlhMThjYjg4OWFkYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2FyXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzNiOWJmYTM4Yzk3OVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG1vbnRoczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJaYXJhbnR5clwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzdhOGFmYjA5YWE2YVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2xhcnVuZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzM4NmIxODhiMmE4OVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGhlcmVuZG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNTk5YTBhZDg1OWM4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFeXJlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfOThhOTU4NjllOTBiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEcmF2YWdvXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZWI1YTE5NGJjYmY4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOeW1tXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYmI1OTZhYTljYTViXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJMaGFydmlvblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2ZiMWJiOWRhYmI4OFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQmFycmFrYXNcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84YmNiMTljOGY5MGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJoYWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMGEwOWViNWI3YjliXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeXBoZXJvc1wiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzNiOThhYjFhMjllOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQXJ5dGhcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84OTliNTlmYWFiYTlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZ1bHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84YTI4NmI3OGFhYzlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb29uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOeW1tXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAtMTQsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VDb2xvcjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYThiODg5ODhhOTRhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeXBoZXJvc1wiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogMzUsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogLTExLFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzViYTgwYjRiMDk2YVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGhlcmVuZG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiA0MixcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAyMSxcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9jOTk5MDg1YTQ5OWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJoYWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiA0OSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiA5LFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzM5ZjkxYWI4YTg1YVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2xhcnVuZVwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogNTYsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogMjcsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VDb2xvcjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMmFkYThiOTk3ODhiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFeXJlXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiA2MyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF80OTI4NWI3OWQ5ODhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZ1bHRcIixcbiAgICAgICAgICAgICAgICAgICAgY3ljbGU6IDcwLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDYsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VDb2xvcjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZWFlYmI5NGE5YWNiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJaYXJhbnR5clwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogNzcsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VDb2xvcjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfOThkODZhYWJjYmI5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBcnl0aFwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogODQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogNDEsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VDb2xvcjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZDk4OWI4MDlkOTdiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEcmF2YWdvXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiA5MSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAzMSxcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8xYTI5Mzk1OWVhYWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkxoYXJ2aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiA5OCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAzNCxcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9jYmY5MTk0OTFhNWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJhcnJha2FzXCIsXG4gICAgICAgICAgICAgICAgICAgIGN5Y2xlOiAxMDUsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogLTExLFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzRhMWEyYTZiNTg5YlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGxlYXBEYXlzOiBbXSxcbiAgICAgICAgICAgIGVyYXM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIHllYXI6IDk5OCxcbiAgICAgICAgICAgIGRheTogMSxcbiAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGhlIFRhaW4gR2FsYSAtIFNoYXJuXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIFRhaW4gR2FsYSBpcyBhIG5vdGFibGUgZXZlbnQgaGVsZCBvbiB0aGUgZmlyc3QgRmFyIG9mIGVhY2ggbW9udGggaW4gU2hhcm4uXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDYxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmV2ZWxhdGlvbiBEYXkgLSBCbG9vZCBvZiBWb2xcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJNZWRpdGF0aW9uIGNlcmVtb255IGZvciBTZWVrZXJzIChhbHNvIGNhbGxlZCBBc2NlbnNpb24gRGF5KS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NjJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxMyxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ludGVyIFNvbHN0aWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGxvbmdlc3QgbmlnaHQgb2YgdGhlIHllYXIuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDYzXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTQsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlYmlydGggRXZlIC0gVGhlIFNpbHZlciBGbGFtZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBQdXJpZmllZCBuZXcgeWVhcjsgYSBuaWdodCBmb3Igc3Bpcml0dWFsIHZpZ2lsIGFuZCBndWFyZGluZyBhZ2FpbnN0IGV2aWwuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ2NFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE0LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDcnlzdGFsZmFsbCAtIFNoYXJuXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQSBkYXkgb2YgcmVtZW1icmFuY2U7IEljZSBzY3VscHR1cmVzIGFyZSBjcmVhdGVkIChhbmQgZGVzdHJveWVkKSB0byBjb21tZW1vcmF0ZSB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIEdsYXNzIFRvd2VyIG9uIDkgT2xhcnVuZSBpbiA5MTggYnkgYWJqdXJlcnMuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ2NVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDksXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IDk5OCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJpZ2h0IFNvdWxzJyBEYXkgLSBUaGUgU2lsdmVyIEZsYW1lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiT24gdGhpcyBkYXkgZWFjaCB5ZWFyLCB0aGUgUHVyaWZpZWQgY2VsZWJyYXRlIHRoZSBsaXZlcyBhbmQgc2FjcmlmaWNlIG9mIGFsbCBmb2xsb3dlcnMgb2YgdGhlIEZsYW1lIHdobyBkaWVkIHdoaWxlIGZpZ2h0aW5nIGV2aWwgYW5kIHByb3RlY3RpbmcgdGhlIGZhaXRoZnVsLiBcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NjZcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxOCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGhlIERheSBvZiBNb3VybmluZyAtIFNoYXJuXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSW4gY29tbWVtb3JhdGlvbiBvZiB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIG5hdGlvbiBvZiBDeXJlLCB0aG9zZSB3aG8gc3Vydml2ZWQgZ2F0aGVyIHRvIHJlbWVtYmVyIHRoZSBsb3NzIG9mIHRoZWlyIGtpbmdkb20gb24gdGhpcyBkYXRlIGluIHRoZSB5ZWFyIDk5NC4gXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDY3XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjAsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IDk5NSxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGlyYXNkYXkgLSBUaGUgU2lsdmVyIEZsYW1lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiT24gdGhpcyBkYXksIHRoZSBTaWx2ZXIgRmxhbWUgd29yaywgZ2l2ZSBnaWZ0cywgYW5kIHBhcnRha2UgaW4gam95b3VzIGNlbGVicmF0aW9uIG91dCBvZiB0aGFua2Z1bG5lc3MgZm9yIHRoZSBuZXcgcGxhbnRpbmcgc2Vhc29uIGFuZCB0aGUgYmlydGggb2YgVGlyYSBNaXJvbiAtIHRoZSBWb2ljZSBvZiB0aGUgU2lsdmVyIEZsYW1lLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ2OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDUsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bidzIEJsZXNzaW5nIC0gVGhlIFNvdmVyZWlnbiBIb3N0XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIFNvdmVyZWlnbiBIb3N0IGVuam95cyB0aGlzIGZlc3RpdmFsIG9mIHBlYWNlLCBhbmQgb2Ygc2V0dGluZyBhc2lkZSBkaWZmZXJlbmNlcywgaW4gdGhlIG5hbWUgb2YgRG9sIEFycmFoLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ2OVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE1LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbml0aWF0aW9uIERheSAtIFRoZSBTaWx2ZXIgRmxhbWVcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJTZW1pbmFyeSBncmFkdWF0aW9ucyBhbmQgYnJlYWtpbmcgZ3JvdW5kcyBmb3IgbmV3IGNodXJjaGVzIGFyZSBjb21tb24gb24gdGhpcyBkYXkgYXMgdGhlIFNpbHZlciBGbGFtZSByZWNhbGxzIHRoZWlyIGRlY2xhcmF0aW9ucyBvZiBpbmRlcGVuZGVudCBmYWl0aCBhbmQgdGhlIGNvbnN0cnVjdGlvbiBvZiB0aGVpciBmaXJzdCBjYXRoZWRyYWwgb24gdGhpcyBzcGVjaWFsIGRheSBlYWNoIHllYXIuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ3MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDExLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCYWtlcidzIE5pZ2h0IC0gVGhlIFNpbHZlciBGbGFtZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkFuIG9sZCBhbmQgbWlzdW5kZXJzdG9vZCwgeWV0IGltbWVuc2VseSBwb3B1bGFyLCBob2xpZGF5IHdoZXJlaW4gZm9sbG93ZXJzIG9mIHRoZSBTaWx2ZXIgRmxhbWUgZ2F0aGVyIHRvIHNoYXJlIHBhc3RyaWVzIGFuZCB0cmVhdHMgY3JlYXRlZCBieSBiYWtlcnMgd2l0aGluIHRoZWlyIGZvbGQuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ3MVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDYsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkF1cmVvbidzIENyb3duIC0gU2hhcm4gYW5kIFRoZSBTb3ZlcmVpZ24gSG9zdFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBTb3ZlcmVpZ24gSG9zdCBjZWxlYnJhdGUga25vd2xlZGdlIG9uIHRoaXMgZGF5IHdpdGggbGVjdHVyZXMgYW5kIHNlcm1vbnMuU2VjdWxhciBpbnN0aXR1dGlvbnMgaG9sZCBncmFkdWF0aW9uIGFuZCBjb21tZW5jZW1lbnQgY2VyZW1vbmllcyBvbiB0aGlzIGRhdGUsIGFzIGRvIHRoZSBtb25hc3RpYyBzY2hvb2xzIG9mIHRoZSBTaWx2ZXIgRmxhbWUuSW4gU2hhcm4gdGhpcyBoYXMgYmVjb21lIGEgY29tbW9uIHNlY3VsYXIgaG9saWRheSwgd2hlcmVpbiBldmVuIG5vbi1kZXZvdXQgbWVtYmVycyBvZiB0aGUgRml2ZSBOYXRpb25zIGF0dGVuZCBsZWN0dXJlcyBhbmQgc2VybW9ucyBoZWxkIGJ5IHRoZSBwcmllc3RzIG9mIEF1cmVvbiBvbiBwaGlsb3NvcGhpY2FsLCBoaXN0b3JpY2FsLCBhbmQgYSByYW5nZSBvZiBvdGhlciB0b3BpY3MgLSBpbmNsdWRpbmcgZGlzY3Vzc2lvbnMgb24gdGhlIG5hdHVyZSBvZiB0aGUgZ29kcy5cXG5cXG5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NzJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyNixcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUHJvbWlzZXRpZGUgLSBUaGUgU2lsdmVyIEZsYW1lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQSBjb250cm92ZXJzaWFsIGhvbGlkYXkgb3V0c2lkZSBvZiB0aGUgU2lsdmVyIEZsYW1lIGZhaXRoLCBvbiB0aGlzIGRheSB0aGUgUHVyaWZpZWQgaG9ub3IgdGhlIFNpbHZlciBGbGFtZSBmb3IgdGhlIHByb21pc2Ugb2YgcGFyYWRpc2UuIFRoZXkgYWxzbyBob25vciAod2l0aG91dCB3b3JzaGlwKSB0aGUgU292ZXJlaWduIEhvc3QgZm9yIGhhdmluZyBjcmVhdGVkIHRoZSB3b3JsZCwgYmVmb3JlIHN0ZXBwaW5nIGFzaWRlIHRvIGFsbG93IHRoZSBGbGFtZSBpdHMgcmlnaHRmdWwgcGxhY2UgYXMgdGhlIGxhc3QgZ29kIG9mIEViZXJyb24uXHUwMEEwIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ3M1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI4LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmlnaHRibGFkZSAtIFNoYXJuIGFuZCBUaGUgU292ZXJlaWduIEhvc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGlzIFNvdmVyZWlnbiBIb3N0IGZlc3RpdmFsLCBkZWRpY2F0ZWQgdG8gRG9sIERvcm4sIGlzIG1hcmtlZCBieSBnbGFkaWF0b3JpYWwgYW5kIGF0aGxldGljIGNvbnRlc3RzLiBcXG5cXG5JbiBTaGFybiwgZmVzdGl2YWwgY2VsZWJyYXRpb25zIG9jY3VyIHRocm91Z2hvdXQgdGhlIHRlbXBsZSBkaXN0cmljdHMgd2l0aCBldmVudHMgY3VsbWluYXRpbmcgaW4gYSBjb21iaW5lZCBjb250ZXN0IG9mIGNoYW1waW9ucyBhdCB0aGUgQ29ybmVyc3RvbmUgQXJlbmEuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ3NFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEyLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGaXJzdCBEYXduIC0gVGhlIFNpbHZlciBGbGFtZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIk9uIHRoaXMgZGF5IGluIDkxNCwgdGhlIENodXJjaCBvZiB0aGUgU2lsdmVyIEZsYW1lIG9mZmljaWFsbHkgYXNzdW1lZCBjb250cm9sIG9mIHRoZSBnb3Zlcm5tZW50IG9mIFRocmFuZS4gT24gZWFjaCBhbm5pdmVyc2FyeSwgdGhlIFB1cmlmaWVkIGdpdmUgdGhhbmtzIGZvciB0aGVpciBqdXN0IHJ1bGUsIHdoaWxlIGFsc28gaG9ub3JpbmcgdGhlIG1lbW9yeSBvZiBLaW5nIFRoYWxpbiwgd2hvc2UgZGVhdGggcGF2ZWQgdGhlIHdheSBmb3IgdGhlaXIgZ292ZXJuYW5jZS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NzVcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogOTE1LFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaWx2ZXJ0aWRlIC0gVGhlIFNpbHZlciBGbGFtZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNvbW1lbW9yYXRpb24gb2YgYm90aCB0aGUgY291YXRsIHNhY3JpZmljZSBhbmQgdGhlIGVudHJ5LCB0aG91c2FuZHMgb2YgeWVhcnMgYWdvLCBvZiB0aGUgU2lsdmVyIEZsYW1lIGludG8gRWJlcnJvbiBtYXJrIHRoaXMgaGlnaGVzdCBvZiBob2x5IGRheXMuIFRoZSB2YXN0IG1ham9yaXR5IG9mIFB1cmlmaWVkIHNwZW5kIHRoaXMgZGF5IGluIHByYXllciBhbmQgb2JzZXJ2YW5jZS5cdTAwQTAgXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDc2XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTQsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA2XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRoZSBSYWNlIG9mIEVpZ2h0IFdpbmRzIC0gU2hhcm5cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJMZWdlbmQgdGVsbHMgb2YgS2luZyBHYWxpZmFyIElJJ3MgZmFzY2luYXRpb24gd2l0aCBhZXJpYWwgc2NvdXRzIGFuZCBjYXZhbHJ5LiBUaGUgZXZvbHV0aW9uIG9mIHRoaXMgYW5udWFsIGNvbnRlc3QgdG9vayBjZW50dXJpZXMsIGJ1dCBoYXMgZ2l2ZW4gU2hhcm4gYW4gZXhvdGljIGFuZCB3ZWxsIGFudGljaXBhdGVkIGV2ZW50IGludm9sdmluZyBiZWFzdHMgYW5kIHRoZWlyIHJpZGVycyBpbiBhIHN5bWJpb3RpYyBxdWVzdCBmb3IgZ2xvcnkqIG92ZXIgYSBjb3Vyc2UgdGhhdCBmaW5kcyB0aGVtIHdlYXZpbmcgdGhyb3VnaCB0aGUgc3BpcmVzIG9mIHRoZSBjaXR5LiBcXG5cXG5cXG5cXG4qdGhlIHdpbm5lciBhbHNvIHJlY2VpdmVzIDUwMGdwIGFuZCBhIGxhbmQgZ3JhbnQgbG9jYXRlZCBlbHNld2hlcmUgaW4gQnJlbGFuZC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NzdcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogMjAxLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUaGUgSHVudCAtIFNoYXJuIGFuZCBUaGUgU292ZXJlaWduIEhvc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgU292ZXJlaWduIEhvc3QgY2VsZWJyYXRlIEJhbGlub3Igd2l0aCBjb21tdW5hbCBodW50cyBvZiBkYW5nZXJvdXMgY3JlYXR1cmVzLiBcXG5cXG5JbiBTaGFybiwgYSBkYW5nZXJvdXMgYmVhc3QqLCB3aG9zZSB0cmFuc3BvcnQgdG8gdGhlIGNpdHkgd2FzIGFycmFuZ2VkIGJ5IHRoZSBwcmllc3RzIG9mIEJhbGlub3IsIGlzIHJlbGVhc2VkIGludG8gdGhlIERlcHRocyBvZiB0aGUgTG93ZXItQ2l0eS4gT3BlbiB0byBhbnkgd2hvIHdvdWxkIHBhcnRpY2lwYXRlIChhbmQgcGF5IGFuIGVudHJ5IGZlZSBpbiB0aGUgZm9ybSBvZiBhIDVncCBkb25hdGlvbiksIHRoZSB2aWN0b3IgbXVzdCByZXR1cm4gd2l0aCB0aGUgYmVhc3QncyBoZWFkIHRvIHJlY2VpdmUgYSA1MDBncCBwdXJzZSwgbG9jYWwgZmFtZSwgYW5kIHRoZSBibGVzc2luZyBvZiBCYWxpbm9yLiBcXG5cXG5cXG5cXG4qb2Z0ZW4gYSBzaW5ndWxhciBiZWFzdCwgaXQgY2FuIGJlIHNldmVyYWwgLSB3aGljaCB0aGVuIHJlcXVpcmVzIHRoZSB2aWN0b3IgdG8gcmV0dXJuIHdpdGggdGhlIG1vc3Qgc2tpbnMuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ3OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDQsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA3XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZpY3RvcnkgRGF5IC0gVGhlIFNpbHZlciBGbGFtZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkNvbW1lbW9yYXRpbmcgdGhlIGNvbmNsdXNpb24gb2YgdGhlIGx5Y2FudGhyb3BpYyBwdXJnZSAoODMyIFlLIC0gODgwIFlLKSwgb24gVmljdG9yeSBEYXkgdGhlIGFkdWx0IGZhaXRoZnVsIG9mIHRoZSBTaWx2ZXIgRmxhbWUgYXR0ZW5kIHNlcm1vbnMgb24gdHJpdW1waCwgZGVmZWF0LCBhbmQgdGhlIHNvbWV3aGF0IHF1ZXN0aW9uYWJsZSBtZXRob2RzIHV0aWxpemVkIGJ5IHRoZSB0ZW1wbGFycyBkdXJpbmcgdGhlIHB1cmdlIC0gd2hpbGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBmYWl0aGZ1bCBhY3Qgb3V0IGdyZWF0IGJhdHRsZXMgd2l0aCB0b3kgc3dvcmRzLiBcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NzlcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA5LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiA4ODEsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA3XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhdGhlbidzIEZhbGwgLSBTaGFyblwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkhvbm9yaW5nIHRoZSBtZW1vcnkgb2YgRmF0aGVuLCBhIGdyZWF0IGhlcm8gb2YgdGhlIFNpbHZlciBDcnVzYWRlICg4MzIgWUsgLSA4ODAgWUspLCB3aG8sIGluIHRoZSBsYXN0IGRheXMgb2YgdGhlIHB1cmdlLCB3YXMgdG9ybiBhcGFydCBieSB3ZXJlcmF0cyBvbiB0aGUgc3RyZWV0cyBvZiBOb3J0aCBNYXJrZXQuIEZhaXRoZnVsIGdhdGhlciBvbiB0aGlzIGRheSBhdCB0aGUgU2hyaW5lIG9mIEZhdGhlbiB0aGUgTWFydHlyIHRvIGxpc3RlbiB0byBhIHNlcm1vbiBmcm9tIHRoZSBwcmllc3Qgb2YgSGlnaCBIb3BlLiBUaGlzIGhvbGlkYXkgaXMgb2Z0ZW4gdW5jb21mb3J0YWJsZSBhbmQgdGVuc2UgZm9yIHNoaWZ0ZXIgY29tbXVuaXRpZXMgaW4gU2hhcm4uIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ4MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI1LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiA4ODEsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA3XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJvbGRyZWkncyBGZWFzdCAtIFNoYXJuIGFuZCBUaGUgU292ZXJlaWduIEhvc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJBIGZlYXN0IG9mIGNvbW11bml0eSBpbiB0aGUgbmFtZSBvZiBCb2xkcmVpLCBleHRyYXZhZ2FudCBwYXJ0aWVzIGFyZSBvZnRlbiBoZWxkIG9uIHRoaXMgaG9saWRheSBhbmQgaXQgaGFzIGFsc28gYmVjb21lIHRoZSB0cmFkaXRpb25hbCBkYXkgZm9yIGVsZWN0aW9ucy4gXFxuXFxuSW4gU2hhcm4sIGEgZ3JlYXQgZmVhc3QgaXMgaGVsZCBhdCB0aGUgUGF2aWxpb24gb2YgdGhlIEhvc3Qgd2l0aCBnb29kcyBhbmQgc2VydmljZXMgZG9uYXRlZFx1MDBBMCBmcm9tIGxvY2FsIG1lcmNoYW50cywgYXMgd2VsbCBhcyBIb3VzZSBHaGFsbGFuZGEuIE1hbnkgZ3JhbmQgcGFydGllcywgc29tZSBxdWl0ZSBhc3RvbmlzaGluZyBpbiB0aGVpciBvcHVsZW5jZSwgYXJlIGhvc3RlZCBieSB0aGUgd2VhbHRoaWVzdCBtZW1iZXJzIG9mIHZhcnlpbmcgZGlzdHJpY3RzIC0gb2Z0ZW4gaW4gY29tcGV0aXRpb24gd2l0aCBvbmUgYW5vdGhlciBmb3Igc29jaWFsIHN0YW5kaW5nLiBcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0ODFcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiA5LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUaGUgQXNjZW5zaW9uIC0gU2hhcm5cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJFYWNoIHllYXIgb24gVGhlIEFzY2Vuc2lvbiwgZm9sbG93ZXJzIHJlYWZmaXJtIHRoZWlyIGZhaXRoIGFuZCBnaXZlIHRoYW5rcyBhcyB3ZWxsIGFzIGF0dGVuZCBibGVzc2luZyBjZXJlbW9uaWVzIGF0IHRlbXBsZXMgdGhyb3VnaG91dCB0aGUgY2l0eSAtIHRoZSBncmFuZGVzdCBvZiB3aGljaCBvY2N1cnMgYXQgdGhlIENhdGhlZHJhbCBvZiB0aGUgQ2xlYW5zaW5nIEZsYW1lLiBBbGwgb2YgdGhpcyBpcyB0byBob25vciB0aGUgc2FjcmlmaWNlIG9mIFRpcmEgTWlyb24sIHRoZSBWb2ljZSBvZiB0aGUgRmxhbWUsIHdpdGhvdXQgd2hpY2ggdGhlcmUgd291bGQgYmUgbm8gQ2h1cmNoIG9mIHRoZSBTaWx2ZXIgRmxhbWUuIENvbnRyaWJ1dGlvbnMgdG8gdGhlaXIgY29tbXVuaXR5IG9uIHRoaXMgZGF5IGFyZSBhIGhpZ2ggcHJpb3JpdHkgZm9yIHRoZSBmYWl0aGZ1bC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0ODJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaWxkbmlnaHQgLSBTaGFyblwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIldpdGggdGhlIFRoZSBGdXJ5ICh0aGUgU292ZXJlaWduIG9mIFBhc3Npb24gYW5kIE1hZG5lc3MpIHJlYWNoaW5nIHRoZSBoZWlnaHQgb2YgaGVyIHBvd2VyIG9uIHRoaXMgbmlnaHQsIHBlb3BsZSBmaW5kIGl0IGRpZmZpY3VsdCB0byBjb250cm9sIG9yIHJlc3RyYWluIHRoZWlyIGltcHVsc2VzIC0gb25jZSB0aGUgc3VuIHNldHMsIHB1YmxpYyByZXZlbHJ5IGluIHRoZSBzdHJlZXRzIGNsaW1icyB0byBqb3lvdXMgb3IsIGFsbCB0b28gb2Z0ZW4sIGRhbmdlcm91cyBsZXZlbHMsIGNhbG1pbmcgb25seSBhcyB0aGUgc3VuIHJpc2VzIG9uIHRoZSBmb2xsb3dpbmcgbW9ybmluZy4gXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDgzXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTgsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNhaW50IFZvbHRyb3MncyBEYXkgLSBUaGUgU2lsdmVyIEZsYW1lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhvdWdoIG9uZSBvZiB0aGUgbGVhc3QgaGlnaCBob2x5IGRheXMsIGl0IGlzIG1hcmtlZCBieSBicmllZiBwcmF5ZXJzIGFuZCBjaHVyY2ggc2VydmljZXMgaW4gdGhlIGhvbm9yIG9mIHRoZSBiaXJ0aCBvZiBTYWludCBWb2x0cm9zIC0gdGhlIGZpcnN0IHBhbGFkaW4gY2FsbGVkIHRvIG9ubHkgc2VydmUgdGhlIFNpbHZlciBGbGFtZS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0ODRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyNSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGhyb25laG9sZCAtIFNoYXJuXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiT24gdGhpcyBkYXkgaW4gOTk2LCB0aGUgVHJlYXR5IG9mIFRocm9uZWhvbGQgd2FzIHNpZ25lZCwgZm9ybWFsbHkgZW5kaW5nIHRoZSBMYXN0IFdhci4gQW5udWFsIGNlbGVicmF0b3J5IGZlYXN0cyBhcmUgaGVsZCB0aHJvdWdob3V0IHRoZSBGaXZlIE5hdGlvbnMgdG8gbWFyayB0aGlzIGF1c3BpY2lvdXMgYW5kIGxvbmctYXdhaXRlZCBldmVudC4gXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDg1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMTEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IDk5NyxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJhbXBhcnRpZGUgLSBUaGUgU2lsdmVyIEZsYW1lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiSW4gYWNjb3JkYW5jZSB3aXRoIHNjcmlwdHVyZSwgb24gdGhpcyBkYXkgdGhlIFB1cmlmaWVkIHN0ZWVsIHRoZW1zZWx2ZXMgYWdhaW5zdCB3aWNrZWRuZXNzLCBib3RoIHdpdGhvdXQgYW5kIHdpdGhpbiwgdGhyb3VnaCByZXBlbnRhbmNlIGFuZCBmYXN0aW5nLiBDaGlsZHJlbiwgZWxkZXJseSwgYW5kIHRoZSBzaWNrIGFyZSByZXF1aXJlZCBvbmx5IHRvIGdpdmUgdXAgdGhlaXIgZmF2b3JpdGUgZm9vZHMgZm9yIHRoZSBkYXkuIFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ4NlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDI0LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZyBTaGFkb3dzIC0gU2hhcm5cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJBcyBkYXJrIG1hZ2ljIGRvbWluYXRlcyBvdmVyIHRoZXNlIHRocmVlIGRheXMgb2YgdGhlIExvbmcgU2hhZG93cywgdGhlIG15dGggb2YgU292ZXJlaWduIExvcmQgQXVyZW9uJ3Mgc3RvbGVuIHNoYWRvdyBpcyBmb3JlZnJvbnQgaW4gdGhlIG1pbmRzIG9mIHRoZSBwZW9wbGUuIE1vc3Qgd2lsbCBzcGVuZCB0aGVzZSBkYXlzIGluZG9vcnMgaHVkZGxlZCBhcm91bmQgdGhlIHdhcm10aCBvZiBhIGZpcmUsIGJ1dCB0aG9zZSBmZXcgd2hvIHdvcnNoaXAgdGhlIGRhcmsgZGVpdHkgdXNlIHRoaXMgdGltZSB0byBwcmV5IHVwb24gdGhlIHdlYWsgYW5kIHRoZSBmb29saXNoLiBcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0ODdcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyNixcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDExXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktoeWJlcnNlZiAtIFRoZSBTaWx2ZXIgRmxhbWVcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgJ09yaWdpbmFsbHkgY2FsbGVkIEtoeWJlclxcJ3MgRXZlLCB0aGUgUHVyaWZpZWQgc3BlbmQgdGhlIG5pZ2h0IGluIGludGVuc2UgcHJheWVyIGFuZCBzcGlyaXR1YWwgdmlnaWxhbmNlIGFnYWluc3QgdGhlLCBhY2NvcmRpbmcgdG8gc2NyaXB0dXJlLCBcInRoaW5uaW5nIG9mIHRoZSBib25kcyB0aGF0IGhvbGQgdGhlIGRlbW9uIGxvcmRzIGluIEtoeWJlclwiIGJldHdlZW4gbm93ICh0aGUgYmVnaW5uaW5nIG9mIHdpbnRlcikgYW5kIHRoZSBzb2xzdGljZS4gUXVlc3RzIGFuZCBjcnVzYWRlcyBvZnRlbiBiZWdpbiBvbiBLaHliZXJzZWYuICcsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDg4XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjcsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcHJpbmcgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBzcHJpbmcgZXF1aW5veCBpcyB3aGVuIHRoZSBkYXkgYW5kIHRoZSBuaWdodCBhcmUgZXF1YWxseSBhcyBsb25nLCBhbmQgYXJlIGdldHRpbmcgbG9uZ2VyLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ4OVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlxcdEF0IHRoZSBzdW1tZXIgc29sc3RpY2UsIHRoZSBTdW4gdHJhdmVscyB0aGUgbG9uZ2VzdCBwYXRoIHRocm91Z2ggdGhlIHNreSwgYW5kIHRoYXQgZGF5IHRoZXJlZm9yZSBoYXMgdGhlIG1vc3QgZGF5bGlnaHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDkwXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXV0dW1uIEVxdWlub3hcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgYXV0dW1uIGVxdWlub3ggaXMgd2hlbiB0aGUgZGF5IGFuZCB0aGUgbmlnaHQgYXJlIGVxdWFsbHkgYXMgbG9uZywgYW5kIGFyZSBnZXR0aW5nIHNob3J0ZXIuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDkxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGlkOiBudWxsLFxuICAgICAgICBjYXRlZ29yaWVzOiBbXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJhcm92aWFuIENhbGVuZGFyXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbGVuZGFyIG9mIHRoZSByZWFsbSBvZiBCYXJvdmlhLCBob21lIG9mIFN0cmFoZC5cIixcbiAgICAgICAgc3RhdGljOiB7XG4gICAgICAgICAgICBkaXNwbGF5RGF5TnVtYmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGZpcnN0V2Vla0RheTogMCxcbiAgICAgICAgICAgIGluY3JlbWVudERheTogZmFsc2UsXG4gICAgICAgICAgICBkaXNwbGF5TW9vbnM6IHRydWUsXG4gICAgICAgICAgICBvdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgICAgIHdlZWtkYXlzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1vbmRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF82YTE4M2IwOGM4ZWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlR1ZXNkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfODkyYjdiN2E1YWU5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJXZWRuZXNkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNmJiOTg4OTliYTY4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJUaHVyc2RheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF80YTdiNjgzYWVhMTlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF83ODY5MGEwOTliODlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNhdHVyZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2JhNWIwOWJhNWE4OVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3VuZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzI5YjkwYWNhZWFkOVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG1vbnRoczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCIxc3QgTW9vblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzdiNDk3OGFiNTgxYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiMm5kIE1vb25cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9jYjk5ZmJiOTM5NWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjNyZCBNb29uXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNzk4ODFhODljYjE4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCI0dGggTW9vblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzViOWE4YTM5NzkwOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiNXRoIE1vb25cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9mODM5OWFiODA4MThcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjZ0aCBNb29uXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfM2FjODRhN2JjODY5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCI3dGggTW9vblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2U5OGJjODZiYzgwOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiOHRoIE1vb25cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84OWVhNzhjYTU5ODhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjl0aCBNb29uXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNzk4YTNiOTkwYTRiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCIxMHRoIE1vb25cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8zYTk5OTllOGViNTlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjExdGggTW9vblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2RiMzkzODNiOTkwYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiMTJ0aCBNb29uXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMWJmYTNiMTgwYTQ4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbW9vbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTW9vblwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogMjkuNTMwNTg4ODUzLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDEwLjI0OTUzLFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2U5OGIzYThhYjhkYVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGxlYXBEYXlzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkxlYXAgRGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGVhcGRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogNDAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsOiAxMDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsOiA0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgICAgICAgICAgdGltZXNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGludGVyY2FsYXJ5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNmEyOGRiYjgxYTQ4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXJhczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCZWZvcmUgQ2hyaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiWWVhciB7e3llYXJ9fSAtIHt7ZXJhX25hbWV9fVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogLTkwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQW5ubyBEb21pbmlcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogXCJZZWFyIHt7eWVhcn19IC0ge3tlcmFfbmFtZX19XCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgICAgeWVhcjogNzM1LFxuICAgICAgICAgICAgZGF5OiAxLFxuICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZXZlbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaW50ZXIgU29sc3RpY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgV2ludGVyIFNvbHN0aWNlIGlzIHRoZSBkYXkgb2YgdGhlIHllYXIgd2l0aCB0aGUgbGVhc3QgdGltZSBiZXR3ZWVuIHN1bnJpc2UgYW5kIHN1bnNldC4gTWFueSB3ZXN0ZXJuIGN1bHR1cmVzIGNvbnNpZGVyIGl0IHRoZSBvZmZpY2lhbCBzdGFydCBvZiB3aW50ZXIuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDU1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcIm5hdHVyYWwtZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBTdW1tZXIgU29sc3RpY2UgaXMgdGhlIGRheSBvZiB0aGUgeWVhciB3aXRoIHRoZSBtb3N0IHRpbWUgYmV0d2VlbiBcXG5zdW5yaXNlIGFuZCBzdW5zZXQuIE1hbnkgd2VzdGVybiBjdWx0dXJlcyBjb25zaWRlciBpdCB0aGUgb2ZmaWNpYWwgc3RhcnRcXG4gb2Ygc3VtbWVyLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ1NlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJuYXR1cmFsLWV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcHJpbmcgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBTcHJpbmcgRXF1aW5veCxcXG5hbHNvIGNhbGxlZCB0aGUgVmVybmFsIEVxdWlub3gsIGlzIHRoZSBkYXkgYmV0d2VlbiB0aGUgd2ludGVyIGFuZFxcbnN1bW1lciBzb2xzdGljZXMgd2hlcmUgdGhlIGRheSBpcyB0aGUgZXhhY3Qgc2FtZSBsZW5ndGggYXMgdGhlIG5pZ2h0Llxcbk1hbnkgd2VzdGVybiBjdWx0dXJlcyBjb25zaWRlciBpdCB0aGUgb2ZmaWNpYWwgc3RhcnQgb2YgU3ByaW5nLlxcblwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ1N1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJuYXR1cmFsLWV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBdXR1bW5hbCBFcXVpbm94XCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIEF1dHVtbmFsIEVxdWlub3gsXFxuYWxzbyBjYWxsZWQgdGhlIEZhbGwgRXF1aW5veCwgaXMgdGhlIG1pZHBvaW50IGJldHdlZW4gdGhlIHN1bW1lciBhbmRcXG53aW50ZXIgc29sc3RpY2VzLCB3aGVyZSB0aGUgZGF5IGlzIHRoZSBleGFjdCBzYW1lIGxlbmd0aCBhcyB0aGUgbmlnaHQuXFxuTWFueSB3ZXN0ZXJuIGN1bHR1cmVzIGNvbnNpZGVyIGl0IHRoZSBvZmZpY2lhbCBzdGFydCBvZiBBdXR1bW4uXFxuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDU4XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTmV3IFllYXIncyBEYXlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJOZXcgWWVhcidzIGRheSBtYXJrcyB0aGUgc3RhcnQgb2YgYSBuZXcgeWVhci5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NTlcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYXNjaGFsIEZ1bGwgTW9vblwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBmaXJzdCBmdWxsIG1vb24gYWZ0ZXIgbWFyY2ggMjFzdCwgd2hpY2ggaXMgY29uc2lkZXJlZCB0aGUgZml4ZWQgZGF0ZSBmb3IgdGhlIHNwcmluZyBlcXVpbm94LlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ2MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJuYXR1cmFsLWV2ZW50XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgIGNhdGVnb3JpZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk5hdHVyYWwgRXZlbnRcIixcbiAgICAgICAgICAgICAgICBpZDogXCJuYXR1cmFsLWV2ZW50XCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzllOWQyNFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJFeGFuZHJpYW4gQ2FsZW5kYXJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ2FsZW5kYXIgb2YgdGhlIHdvcmxkIG9mIFdpbGRlbW91bnQuXCIsXG4gICAgICAgIHN0YXRpYzoge1xuICAgICAgICAgICAgZGlzcGxheURheU51bWJlcjogZmFsc2UsXG4gICAgICAgICAgICBmaXJzdFdlZWtEYXk6IDIsXG4gICAgICAgICAgICBpbmNyZW1lbnREYXk6IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheU1vb25zOiB0cnVlLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IHRydWUsXG4gICAgICAgICAgICB3ZWVrZGF5czogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJNaXJlc2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzNiMzhhYWE4MWJjYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiR3Jpc3NlblwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9kYTZiMTk4ODJiYWFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIldoZWxzZW5cIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfYTljYWU4Zjg4Yjk4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb250aHNlblwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9lODc4NTllYjVhYWFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZvbHNlblwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF81OTE4MGFiYmVhOGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIll1bGlzZW5cIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfOTgwODJiZDhkOGNhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYSdsZXlzZW5cIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZGE0YmE5MmIyOTlhXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbW9udGhzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkhvcmlzYWxcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI5LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9lODlhNGFiOTk5NWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1pc3V0aGFyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfMThiODg5NGJhYjdiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEdWFsYWhlaVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzBhOWIyOWY4ZjhkYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGh1bnNoZWVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNmE4YThhNWJlYTViXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJVbm5kaWxhclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2I4Mjk1YmRiY2FmYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJ1c3NlbmRhclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2M5MmE0ODliYjkwOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3lkZW5zdGFyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfN2I0OGJiMWIwYTRhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGZXNzdXJhblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMjksXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzI4OTg1OGM5Nzg0OVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiUXVlbidwaWxsYXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDI3LFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9mOGFiZDlhODZhYTlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkN1ZXJzYWFyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAyOSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfN2FiYTU5ZmEyYjY5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEdXNjYXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMyLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF81ODE5Zjg2Yjk5Y2JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb29uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDYXRoYVwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogMzMsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogNyxcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IFwiIzI5MmI0YVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8wYWI5MjkwOTJiNWJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJ1aWR1c1wiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogMzI4LFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDgwLFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmNjE2MVwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMWYxZjFmXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2I5NzgzYWM4MThlOVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGxlYXBEYXlzOiBbXSxcbiAgICAgICAgICAgIGVyYXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGhlIEZvdW5kaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiWWVhciB7e3llYXJ9fSAtIHt7ZXJhX25hbWV9fVwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBZ2Ugb2YgQXJjYW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcIlllYXIge3t5ZWFyfX0gLSB7e2VyYV9uYW1lfX1cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IC0xNTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlRoZSBDYWxhbWl0eVwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcIlllYXIge3t5ZWFyfX0gLSB7e2VyYV9uYW1lfX1cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IC02NjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiUG9zdC1EaXZlcmdlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiWWVhciB7e3llYXJ9fSBQLkQuXCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgICAgZGF5OiAxLFxuICAgICAgICAgICAgbW9udGg6IDAsXG4gICAgICAgICAgICB5ZWFyOiA4MzZcbiAgICAgICAgfSxcbiAgICAgICAgZXZlbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcHJpbmcgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBzcHJpbmcgZXF1aW5veCBpcyB3aGVuIHRoZSBkYXkgYW5kIHRoZSBuaWdodCBhcmUgZXF1YWxseSBhcyBsb25nLCBhbmQgYXJlIGdldHRpbmcgbG9uZ2VyLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQzMFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlxcdEF0IHRoZSBzdW1tZXIgc29sc3RpY2UsIHRoZSBTdW4gdHJhdmVscyB0aGUgbG9uZ2VzdCBwYXRoIHRocm91Z2ggdGhlIHNreSwgYW5kIHRoYXQgZGF5IHRoZXJlZm9yZSBoYXMgdGhlIG1vc3QgZGF5bGlnaHQuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDMxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXV0dW1uIEVxdWlub3hcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgYXV0dW1uIGVxdWlub3ggaXMgd2hlbiB0aGUgZGF5IGFuZCB0aGUgbmlnaHQgYXJlIGVxdWFsbHkgYXMgbG9uZywgYW5kIGFyZSBnZXR0aW5nIHNob3J0ZXIuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDMyXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ludGVyIFNvbHN0aWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIHdpbnRlciBzb2xzdGljZSBtYXJrcyB0aGUgc2hvcnRlc3QgZGF5IGFuZCBsb25nZXN0IG5pZ2h0IG9mIHRoZSB5ZWFyLCB3aGVuIHRoZSBzdW4gaXMgYXQgaXRzIGxvd2VzdCBhcmMgaW4gdGhlIHNreS5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0MzNcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJOZXcgRGF3blwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBmaXJzdCBkYXkgb2YgdGhlIG5ldyB5ZWFyIGlzIGFsc28gdGhlIGhvbHkgZGF5IG9mIHRoZSBDaGFuZ2VicmluZ2VyLCBhcyB0aGUgb2xkIHllYXIgZ2l2ZXMgd2F5IHRvIGEgbmV3IHBhdGguXFxuXFxuSW4gVGFsJ0RvcmVpLCBFbW9uIGNlbGVicmF0ZXMgTmV3IERhd24gd2l0aCBhIGdyYW5kIG1pZG5pZ2h0IGZlYXN0LCB3aGljaCBjb21tb25seSBmZWF0dXJlcyBhIHNob3J0IHBsYXkgY2VsZWJyYXRpbmcgdGhlIGNoYW5nZXMgd2l0bmVzc2VkIGluIHRoZSBwYXN0IHllYXIuXFxuXFxuT24gdGhlIE1lbmFnZXJpZSBDb2FzdCwgcGVvcGxlIGNlbGVicmF0ZSBieSBoYXZpbmcgYSBmZWFzdCBvbiB0aGUgc2hvcmUgYXQgZHVzayB0byB3YXRjaCB0aGUgc3Vuc2V0LiBUaGV5IGZlYXN0IGFuZCBkaXNjdXNzIHRoZWlyIGhvcGVzIGZvciB0aGUgbmV3IHllYXIgdW50aWwgdGhlIHN1biByaXNlcy5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0MzRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIaWxsc2dvbGRcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGlzIGhvbGlkYXkgaXMgdXAgdG8gdGhlIGNhbGVuZGFyIG93bmVyIHRvIGRlY2lkZSB3aGF0IGl0IGlzIGZvciEgOilcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0MzVcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyNyxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcInNlY3VsYXItaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRheSBvZiBDaGFsbGVuZ2luZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBob2x5IGRheSBvZiB0aGUgU3Rvcm1sb3JkIGlzIG9uZSBvZiB0aGUgbW9zdCByYXVjb3VzIGhvbGlkYXlzIGluIEVtb24uIFRob3VzYW5kcyBvZiBzcGVjdGF0b3JzIGF0dGVuZCB0aGUgYW5udWFsIEdvZHNicmF3bCwgd2hpY2ggaXMgaGVsZCBpbiB0aGUgZmlnaHRpbmcgcmluZyB3aXRoaW4gdGhlIFRlbXBsZSBvZiB0aGUgU3Rvcm1sb3JkLiBUaGUgcGVvcGxlIHJvb3QgZm9yIHRoZWlyIGRlaXR5J3MgZmF2b3JlZCBjaGFtcGlvbiwgYW5kIHRoZXJlIGlzIGEgZmllcmNlICh5ZXQgZnJpZW5kbHkpIHJpdmFscnkgYmV0d2VlbiB0aGUgQ2hhbXBpb24gb2YgdGhlIFN0b3JtbG9yZCBhbmQgdGhlIENoYW1waW9uIG9mIHRoZSBQbGF0aW51bSBEcmFnb24uIFRoZSB3aW5uZXIgZWFybnMgdGhlIHRpdGxlIG9mIFxcXCJTdXByZW1lIENoYW1waW9uXFxcIiBmb3IgYW4gZW50aXJlIHllYXIuXFxuXFxuVGhlIERheSBvZiBDaGFsbGVuZ2luZyBpcyBvbmUgb2YgdGhlIG1vc3QgcmF1Y291cyBob2xpZGF5cyBpbiBQb3J0IERhbWFsaSwgYW5kIHRob3VzYW5kcyBvZiBzcGVjdGF0b3JzIGF0dGVuZCB0aGUgYW5udWFsIEdvZHNicmF3bCBoZWxkIGluIHRoZSBUZW1wbGUgb2ZcdTAwQTBLb3JkIHRvIHJvb3QgZm9yIHRoZWlyIGZhdm9yZWQgZGVpdHkncyBjaGFtcGlvbiwgcGFydGljdWxhcmx5IHRoZSBjaG9zZW4gY2hhbXBpb25zIG9mIHRoZSBTdG9ybSBMb3JkIGFuZCB0aGVcdTAwQTBBbGwtSGFtbWVyLlx1MDBBMFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQzNlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDcsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJyZWxpZ2lvdXMtaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlbmV3YWwgRmVzdGl2YWxcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJTcHJpbmcgYmVnaW5zIGVhcmx5IGluIHRoZSBtb250aCBvZiBEdWFsYWhlaSwgb2ZmaWNpYWxseSBzdGFydGluZyBvbiB0aGUgMTN0aCB3aXRoIHRoZSBSZW5ld2FsIEZlc3RpdmFsLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQzN1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEzLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2lsZCdzIEdyYW5kZXVyXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhvdWdoIHRoZSBBcmNoZWFydCBpcyB0aGUgZ29kIG9mIHNwcmluZywgdGhlIHBlYWsgb2YgdGhlIHNwcmluZyBzZWFzb24gaXMgdGhlIGhvbHkgZGF5IG9mIHRoZSBXaWxkbW90aGVyLlxcblxcblRoZSBwZW9wbGUgaW4gdGhlIHNvdXRoZXJuIHdpbGRzIG9mIFRhbCdEb3JlaSBjZWxlYnJhdGUgdGhlIFdpbGRtb3RoZXIncyBzdHJlbmd0aCBieSBqb3VybmV5aW5nIHRvIGEgcGxhY2Ugb2YgZ3JlYXQgbmF0dXJhbCBiZWF1dHkuIFRoaXMgY291bGQgYmUgdGhlIHRvcCBvZiBhIG1vdW50YWlub3VzIHdhdGVyZmFsbCwgdGhlIGNlbnRlciBvZiBhIGRlc2VydCwgb3IgZXZlbiBhbiBvbGQgYW5kIHBlYWNlZnVsIGNpdHkgcGFyayAoc3VjaCBhcyBBemFsZWEgU3RyZWV0IFBhcmsgaW4gRW1vbikuIFRob3VnaCBFbW9uIHJhcmVseSBjZWxlYnJhdGVzIFdpbGQncyBHcmFuZGV1ciwgdGhlIGZldyB3aG8gZG8gd2lsbCBwbGFudCB0cmVlcyBpbiBvYnNlcnZhbmNlIG9mIHRoZSBob2xpZGF5LlxcblxcblRoZSBwZW9wbGUgb2YgdGhlIE1lbmFnZXJpZSBDb2FzdCBzZXQgYXNpZGUgdGhpcyBkYXkgdG8gc2FpbCBmb3Igbm8gcmVhc29uIG90aGVyIHRoYW4gdGhlIHBsZWFzdXJlIG9mIG9ic2VydmluZyB0aGUgbmF0dXJhbCBiZWF1dHkgb2YgdGhlaXIgc3Vycm91bmRpbmdzLiBUaG9zZSB3aG8gc3RpbGwgcGFydGFrZSBpbiBlbGVtZW50cyBvZiBLaSdOYXUgY3VsdHVyZSB0YWtlIHRoaXMgZGF5IHRvIGFwcHJlY2lhdGUgdGhlIGZydWl0cyBhbmQgZm9vZHMgZ3JhbnRlZCBieSB0aGUgc2VhLCBsZWF2aW5nIG9mZmVyaW5ncyBvZiBkZWxpY2FjaWVzIGFuZCBzbWFsbCBoYW5kbWFkZSBjcmFmdHMgYXQgdGVtcG9yYXJ5IGFsdGFycyBvZiB0d2lzdGVkIHJvb3RzIGFuZCBncmFzc2VzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQzOFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIwLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIYXJ2ZXN0J3MgUmlzZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoaXMgaG9saWRheSBpcyB1cCB0byB0aGUgY2FsZW5kYXIgb3duZXIgdG8gZGVjaWRlIHdoYXQgaXQgaXMgZm9yISA6KVwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQzOVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDExLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWVycnlmcm9uZCdzIERheVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoaXMgaG9saWRheSBpcyB1cCB0byB0aGUgY2FsZW5kYXIgb3duZXIgdG8gZGVjaWRlIHdoYXQgaXQgaXMgZm9yISA6KVwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDMxLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGVlcCBTb2xhY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJNb3JhZGluJ3MgaG9seSBkYXkgaXMgRGVlcCBTb2xhY2UsIHdoaWNoIGlzIGNlbGVicmF0ZWQgb24gdGhlIGVpZ2h0ZWVudGggZGF5IG9mIHRoZSBmaWZ0aCBtb250aC4gRXNwZWNpYWxseSBkZXZvdXQgZm9sbG93ZXJzIG9mIHRoZSBBbGwtSGFtbWVyIHNwZW5kIHRoZSBkYXkgaW4gaXNvbGF0aW9uLCBtZWRpdGF0aW5nIG9uIHRoZSBtZWFuaW5nIG9mIGZhbWlseSBhbmQgaG93IHRoZXkgbWF5IGJlIGJldHRlciBtb3RoZXJzLCBmYXRoZXJzLCBzaWJsaW5ncywgYW5kIGNoaWxkcmVuLlxcblxcblRoZSBkd2FydmVuIGNvbW11bml0aWVzIGFjcm9zcyBFeGFuZHJpYSwgc3VjaCBhcyB0aGUgb25lcyBpbiBHcmltZ29saXIgYW5kIEtyYWdoYW1tZXIsIGNlbGVicmF0ZSB3aXRoIGEgZnVsbCBkYXkgb2YgZmVhc3RpbmcgYW5kIGRyaW5raW5nLlx1MDBBMFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0MVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE4LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJaZW5pdGhcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJTdW1tZXIgYmVnaW5zIGluIHRoZSBtaWRkbGUgb2YgVW5uZGlsYXIsIG9mZmljaWFsbHkgc3RhcnRpbmcgYXQgbm9vbiBvbiB0aGUgMjZ0aCBkYXkga25vd24gYXMgdGhlIFplbml0aC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NDJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyNixcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcInNlY3VsYXItaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFydGlzYW4ncyBGYWlyZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoaXMgaG9saWRheSBpcyB1cCB0byB0aGUgY2FsZW5kYXIgb3duZXIgdG8gZGVjaWRlIHdoYXQgaXQgaXMgZm9yISA6KVwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0M1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDE1LFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRWx2ZW5kYXduXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQ29yZWxsb24ncyBob2x5IGRheSBpcyBjYWxsZWQgRWx2ZW5kYXduLFxcbm9yIE1pZHN1bW1lci4gSXQgaXMgY2VsZWJyYXRlZCBvbiB0aGUgdHdlbnRpZXRoIGRheVxcbm9mIHRoZSBzaXh0aCBtb250aCwgYW5kIGNvbW1lbW9yYXRlcyB0aGUgZWx2ZXMnIGZpcnN0XFxuZW1lcmdlbmNlIGZyb20gdGhlIEZleXdpbGQuXFxuXFxuSW4gU3luZ29ybiwgdGhlIEVsdmVzIG9wZW4gc21hbGwgZG9vcndheXMgaW50byB0aGUgRmV5d2lsZCBhbmQgY2VsZWJyYXRlIGFsb25nc2lkZSB0aGUgd2lsZCBmZXkgd2l0aCB1bmNoYXJhY3RlcmlzdGljIHZpZ29yLlxcblxcblRob3VnaCB0aGUgRHdlbmRhbGlhblxcbkVtcGlyZSBkb2Vzbid0IHByb21vdGUgdGhlIHdvcnNoaXAgb2YgdGhlIEFyY2ggSGVhcnQsXFxudGhlIGVsdmVzIG9mIEJ5c2FlcyBUeWwgcXVpZXRseSBjZWxlYnJhdGUgaW4gcHJpdmF0ZSBieVxcbm9wZW5pbmcgc21hbGwgZG9vcnMgdG8gdGhlIEZleXdpbGQgYW5kIGhhdmluZyBhIGxpdHRsZVxcbm1vcmUgd2luZSB0aGFuIHVzdWFsLlx1MDBBMFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0NFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIwLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIaWdoc3VtbWVyXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIGhvbHkgZGF5IG9mIHRoZSBEYXduZmF0aGVyIGlzIHRoZSBwZWFrIG9mIHRoZSBzdW1tZXIgc2Vhc29uLlxcblxcbkVtb24gY2VsZWJyYXRlcyB3aXRoIGFuIGVudGlyZSB3ZWVrIG9mIGdpZnQtZ2l2aW5nIGFuZCBmZWFzdGluZywgZW5kaW5nIGF0IG1pZG5pZ2h0IG9uIHRoZSAyMXN0IG9mIFN5ZGVuc3RhciAodGhlIGFubml2ZXJzYXJ5IG9mIHRoZSBCYXR0bGUgb2YgdGhlIFVtYnJhIEhpbGxzLCB3aGVyZSBaYW4gVGFsJ0RvcmVpIGRldGhyb25lZCBUcmlzdCBEcmFzc2lnKS5cXG5cXG5XaGl0ZXN0b25lICh3aGVyZSB0aGUgRGF3bmZhdGhlciBpcyB0aGUgY2l0eSdzIHBhdHJvbiBnb2QpIGNlbGVicmF0ZXMgd2l0aCBnaWZ0LWdpdmluZyBhbmQgYSBmZXN0aXZhbCBvZiBsaWdodHMgYXJvdW5kIHRoZSBTdW4gVHJlZS4gRHVlIHRvIHRoZSBCcmlhcndvb2Qgb2NjdXBhdGlvbiwgbW9uZXkgaXMgdGhpbiwgc28gbW9zdCBXaGl0ZXN0b25lIGZvbGsgY2hvb3NlIHRvIHJlY291bnQgdGhlIHNtYWxsIHRoaW5ncyB0aGV5IGFyZSB0aGFua2Z1bCBmb3IsIHJhdGhlciB0aGFuIGJ1eSBnaWZ0cy5cXG5cXG5XaGlsZSBvdGhlciBwYXJ0cyBvZiBFeGFuZHJpYSBmZWFzdCwgdGhlIER3ZW5kYWxpYW5cXG5FbXBpcmUgdXNlcyB0aGlzIGRheSBhcyBhbiBvcHBvcnR1bml0eSB0byBlbmxpc3QgbW9yZVxcbnNvbGRpZXJzIGluIGl0cyBhcm15LiBUaGUgbWlsaXRhcnkgaG9sZHMgZ3JlYXQgZmVhc3RzIGFuZFxcbmhhbmRzIG91dCB0b3kgc29sZGllcnMgYW5kIG90aGVyIHByb3BhZ2FuZGEsIGVuY291cmFnaW5nIHBlb3BsZSB0byBlbmxpc3QgYW5kIGhlbHAgZmlnaHQgYWdhaW5zdCB0aGUgZXZpbCB0aGF0XFxudGhyZWF0ZW5zIHRoZSBraW5nLlx1MDBBMFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0NVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDcsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA2XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJyZWxpZ2lvdXMtaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1vcm4gb2YgTGFyZ2Vzc2VcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGlzIGhvbGlkYXkgaXMgdXAgdG8gdGhlIGNhbGVuZGFyIG93bmVyIHRvIGRlY2lkZSB3aGF0IGl0IGlzIGZvciEgOilcIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NDZcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxNCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDZcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcInNlY3VsYXItaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhcnZlc3QncyBDbG9zZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIkF1dHVtbiBiZWdpbnMgb24gdGhlIDNyZCBvZiBGZXNzdXJhblx1MDBBMGFuZCBpcyB0eXBpY2FsbHkgY2VsZWJyYXRlZCB3aXRoIGZlYXN0aW5nIGluIHJ1cmFsIHJlZ2lvbnMgYW5kIHdpdGggY2Fybml2YWxzIGluIHRoZSBjaXRpZXMuXHUwMEEwXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDQ3XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMyxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcInNlY3VsYXItaG9saWRheXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRoZSBIYXplbCBGZXN0aXZhbFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoaXMgaG9saWRheSBpcyB1cCB0byB0aGUgY2FsZW5kYXIgb3duZXIgdG8gZGVjaWRlIHdoYXQgaXQgaXMgZm9yISA6KVwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEyLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2l2aWxpemF0aW9uJ3MgRGF3blwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBMYXcgQmVhcmVyJ3MgaG9seSBkYXkgaXMgQ2l2aWxpemF0aW9uJ3NcXG5EYXduLCB3aGljaCBpcyBjZWxlYnJhdGVkIG9uIHRoZSBhdXR1bW5hbCBlcXVpbm94LFxcbnVzdWFsbHkgdGhlIHR3ZW50eS1zZWNvbmQgZGF5IG9mIHRoZSBuaW50aCBtb250aC5cXG5cXG5FbW9uIGNlbGVicmF0ZXMgd2l0aCBhIGdyZWF0IGJvbmZpcmUgaW4gdGhlIHNxdWFyZSBvZiBlYWNoIG5laWdoYm9yaG9vZCwgYXJvdW5kIHdoaWNoIGVhY2ggY29tbXVuaXR5IGRhbmNlcyBhbmQgZ2l2ZXMgZ2lmdHMuXFxuXFxuSW4gdGhlXFxuRHdlbmRhbGlhbiBFbXBpcmUsIHBlb3BsZSBjZWxlYnJhdGUgYnkgaGF2aW5nIGZlYXN0cyBcXG5pbiBob25vciBvZiB0aGUgbGF3cyBvZiB0aGUgRHdlbmRhbCBibG9vZGxpbmUuIE9uZSBzZWF0XFxuYXQgZXZlcnkgdGFibGUgaXMgbGVmdCBvcGVuIGZvciB0aGUga2luZywgd2hvIGVhdHMgaW4gc3Bpcml0XFxud2l0aCB0aGUgcGVvcGxlIGhlIHJ1bGVzLlx1MDBBMFwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ0OVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIyLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJOaWdodCBvZiBBc2NlbnNpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgUmF2ZW4gUXVlZW4ncyBob2x5IGRheSBpcyBjYWxsZWQgdGhlIE5pZ2h0IG9mIEFzY2Vuc2lvbiwgY2VsZWJyYXRpbmcgaGVyIGFwb3RoZW9zaXMuIFRoZSBhY3R1YWwgZGF0ZSBvZiB0aGUgaGVyIHJpc2UgdG8gZGl2aW5pdHkgaXMgdW5jbGVhciwgYnV0IHRoZSBOaWdodCBvZiBBc2NlbnNpb24gaXMgY2VsZWJyYXRlZCBvbiB0aGUgdGhpcnRlZW50aCBkYXkgb2YgdGhlIHRlbnRoIG1vbnRoLlxcblxcblRob3VnaCBtb3N0IGluIEVtb24gc2VlIHRoaXMgY2VsZWJyYXRpb24gb2YgdGhlIGRlYWQgYXMgdW5uZXJ2aW5nIGFuZCBtYWNhYnJlLCB0aGUgZm9sbG93ZXJzIG9mIHRoZSBNYXRyb24gb2YgUmF2ZW5zIGJlbGlldmUgdGhhdCB0aGUgaG9ub3JlZCBkZWFkIHdvdWxkIHByZWZlciB0byBiZSB2ZW5lcmF0ZWQgd2l0aCBjaGVlciwgbm90IG1pc2VyeS5cXG5cXG5XaGF0IHdhcyBvbmNlIGEgbmlnaHQgb2YgY2hlZXJ5IGNlbGVicmF0aW9uIG9mIHRoZSBkZWFkIGluIHRoZSBEd2VuZGFsaWFuIEVtcGlyZSBoYXMgcmVjZW50bHkgYmVjb21lIGFuIG9jY2FzaW9uIHRvIGJ1cm4gZWZmaWdpZXMgYW5kIGRlY3J5IHRoZSBLcnluIER5bmFzdHkgZm9yIHRoZWlyIHVubmF0dXJhbCByZWxhdGlvbnNoaXAgd2l0aCBkZWF0aC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NTBcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAxMyxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcInJlbGlnaW91cy1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiWmFuJ3MgQ3VwXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiVGhpcyBob2xpZGF5IGlzIHVwIHRvIHRoZSBjYWxlbmRhciBvd25lciB0byBkZWNpZGUgd2hhdCBpdCBpcyBmb3IhIDopXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NDUxXCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMjEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJzZWN1bGFyLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCYXJyZW4gRXZlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiV2ludGVyIGJlZ2lucyBvbiB0aGUgMm5kIGRheSBvZiBEdXNjYXIsIHRoZSBCYXJyZW4gRXZlLCB3aGljaCBpcyBhIG5pZ2h0dGltZSBjZWxlYnJhdGlvbiBhbmQgcmVtZW1icmFuY2Ugb2YgdGhvc2Ugd2hvIGZlbGwgaW4gYmF0dGxlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ1MlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDIsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwic2VjdWxhci1ob2xpZGF5c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRW1iZXJ0aWRlXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiQmFoYW11dCdzIGhvbHkgZGF5IGlzIGNhbGxlZCBFbWJlcnRpZGUsXHUwMEEwYW5kIGlzIGNlbGVicmF0ZWQgb24gdGhlIGZpZnRoIGRheSBvZiBEdXNjYXIuIFRoaXMgaXMgYSBkYXlcdTAwQTBvZiByZW1lbWJyYW5jZSwgc29sZW1uaXR5LCBhbmQgcmVzcGVjdCBmb3IgdGhvc2Ugd2hvXHUwMEEwaGF2ZSBmYWxsZW4gaW4gdGhlIGRlZmVuc2Ugb2Ygb3RoZXJzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDQ1M1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDUsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwicmVsaWdpb3VzLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaW50ZXIncyBDcmVzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoaXMgZGF5IGNlbGVicmF0ZXMgdGhlIGZyZWVkb20gb2YgVGFsJ0RvcmVpIGZyb20gRXJyZXZvbiB0aGUgUmltZWxvcmQuIEl0IGlzIHRoZSBwZWFrIG9mIHRoZSB3aW50ZXIgc2Vhc29uLCBzbyBkZXZvdXQgZm9sbG93ZXJzIG9mIHRoZSBNYXRyb24gb2YgUmF2ZW5zIChhcyB0aGUgZ29kZGVzcyBvZiB3aW50ZXIpIGNvbnNpZGVyIGl0IHRvIGJlIG9uZSBvZiBoZXIgaG9seSBkYXlzLlxcblxcbkhvd2V2ZXIsIGluIG1vc3Qgb2YgdGhlIGxhbmQsIHBlb3BsZSBzZWUgV2ludGVyJ3MgQ3Jlc3QgYXMgYSBzZWN1bGFyIGhvbGlkYXksIG9mdGVuIGNlbGVicmF0ZWQgd2l0aCBvbW5pcHJlc2VudCBtdXNpYyBpbiBwdWJsaWMgYXJlYXMsIGxhdmlzaCBnaWZ0LWdpdmluZyB0byByZWxhdGl2ZXMgYW5kIGxvdmVkIG9uZXMsIGFuZCB0aGUgY3V0dGluZyBhbmQgZGVjb3JhdGluZyBvZiB0cmVlcyBwbGFjZWQgaW5kb29ycy4gVGhlIFN1biBUcmVlIGluIFdoaXRlc3RvbmUgaXMgb2Z0ZW4gZGVjb3JhdGVkIHdpdGggbGlnaHRzIGFuZCBvdGhlciBiYXVibGVzIGZvciBXaW50ZXIncyBDcmVzdC5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ0NTRcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyMCxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJzZWN1bGFyLWhvbGlkYXlzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgIGNhdGVnb3JpZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlbGlnaW91cyBIb2xpZGF5c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcInJlbGlnaW91cy1ob2xpZGF5c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwRDQ3QTFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNlY3VsYXIgSG9saWRheXNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJzZWN1bGFyLWhvbGlkYXlzXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzRBMTQ4Q1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDYWxlbmRhciBvZiBIYXJwdG9zXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbGVuZGFyIG9mIEZhZXJcdTAwRkJuIG9mIHRoZSBGb3Jnb3R0ZW4gUmVhbG1zLlwiLFxuICAgICAgICBzdGF0aWM6IHtcbiAgICAgICAgICAgIGRpc3BsYXlEYXlOdW1iZXI6IGZhbHNlLFxuICAgICAgICAgICAgZmlyc3RXZWVrRGF5OiAwLFxuICAgICAgICAgICAgaW5jcmVtZW50RGF5OiBmYWxzZSxcbiAgICAgICAgICAgIGRpc3BsYXlNb29uczogdHJ1ZSxcbiAgICAgICAgICAgIG92ZXJmbG93OiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIklcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfOTk5OTg4MmJiOTRhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXlcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJJSVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84YTBiNGI3OWQ4ODhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIklJSVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9kYTQ4M2FjYThiZjlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIklWXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2E4ZmJlYTM5Y2FjOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVlwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF85YjE5ZDk3ODdiMGJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZJXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzM4MmE1OTBhOGEyOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVklJXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2ZiY2EwYWI4MGFmYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVklJSVwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9jYTA5M2JjYTVhZDlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIklYXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2Q5NWIzOTA5OGJmOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8zODliZmI1ODU4ZGJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb250aHM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiSGFtbWVyIChEZWVwd2ludGVyKVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2NiZWI0YjE5MGI2YVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWlkd2ludGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW50ZXJjYWxhcnlcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF84OWJhZDkwODliN2JcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFsdHVyaWFrIChUaGUgQ2xhdyBvZiBXaW50ZXIpXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNmEwOGE4YWFjYjdiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDaGVzIChUaGUgQ2xhdyBvZiB0aGUgU3Vuc2V0cylcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9kYjJhN2JmOTdhZmFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlRhcnNha2ggKFRoZSBDbGF3IG9mIFN0b3JtcylcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF82YjQ4OTgyYjBiZGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkdyZWVuZ3Jhc3NcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnRlcmNhbGFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzA4NzkwYWY5MjgwOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWlydHVsIChUaGUgTWVsdGluZylcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9iOTFiMzlmOTVhMjhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkt5dGhvcm4gKFRoZSBUaW1lIG9mIEZsb3dlcnMpXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZjhlOTU4NWEyYmY4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGbGFtZXJ1bGUgKFN1bW1lcnRpZGUpXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfZmE4OTViZGIzOGU5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJNaWRzdW1tZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnRlcmNhbGFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEX2E5MTgxYjVhNjgzYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRWxlYXNpcyAoSGlnaHN1bilcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8xYjFiMWIyODdiMGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVsZWludCAoVGhlIEZhZGluZylcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF8xYWNhNTkxODk5M2FcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkhpZ2hoYXJ2ZXN0aWRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW50ZXJjYWxhcnlcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAxLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9hOTRhMTgzYjRiODhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1hcnBlbm90aCAoTGVhZmZhbGwpXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNThkOTc5NjllYjc5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJVa3RhciAoVGhlIFJvdHRpbmcpXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW9udGhcIixcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiSURfNGIwOTBiNzg3YjE4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJUaGUgRmVhc3Qgb2YgdGhlIE1vb25cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnRlcmNhbGFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDEsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzFiMGFlOGRiZGI0YVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTmlnaHRhbCAoVGhlIERyYXdpbmcgRG93bilcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb250aFwiLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJJRF9hYmI4MmFmYWI4MGFcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb29uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZWxcdTAwRkFuZVwiLFxuICAgICAgICAgICAgICAgICAgICBjeWNsZTogMzAuNDM3NSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxMy45LFxuICAgICAgICAgICAgICAgICAgICBmYWNlQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzQ4ZWEyYTY5YTg4OFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGxlYXBEYXlzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNoaWVsZHNtZWV0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGVhcGRheVwiLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogNFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzcGFuOiA5LFxuICAgICAgICAgICAgICAgICAgICBpbnRlcmNhbGFyeTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcIklEXzViMDhmYWE4OGFkYVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVyYXM6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIHllYXI6IDE0OTEsXG4gICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICBtb250aDogMFxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbnRlciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU4OFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJuYXR1cmFsLWV2ZW50c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmVybmFsIEVxdWlub3hcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1ODlcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwibmF0dXJhbC1ldmVudHNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bW1lciBTb2xzdGljZVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU5MFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJuYXR1cmFsLWV2ZW50c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXV0dW1uYWwgRXF1aW5veFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU5MVwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJuYXR1cmFsLWV2ZW50c1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hpZWxkbWVldFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlNoaWVsZG1lZXQgd2FzIHRoZSBlcXVpdmFsZW50IG9mIGEgbGVhcCB5ZWFyIGRheSBpbiB0aGUgQ2FsZW5kYXIgb2YgSGFycHRvcywgb2NjdXJyaW5nIG9uY2UgZXZlcnkgZm91ciB5ZWFycywgYWRkaW5nIGEgZGF5IGFmdGVyIHRoZSBmZXN0aXZhbCBvZiBNaWRzdW1tZXIgYW5kIGJlZm9yZSBFbGVhc2lzIDEuIFRyYWRpdGlvbmFsbHkgdGhlIGRheSB3YXMgdXNlZCBmb3IgZmFpcnMsIGJhemFhcnMsIG11c2ljYWwgYW5kIHRoZWF0cmljYWwgcGVyZm9ybWFuY2VzLCBhbmQgdG91cm5hbWVudHMgb2Ygc2tpbGwgYW5kIG1hZ2ljYWwgYWJpbGl0eS4gTm9ibGVzIHVzdWFsbHkgaGVsZCBjb3VydCB0byBoZWFyIHRoZSBwZXRpdGlvbnMgb2YgdGhlaXIgcGVvcGxlIGFuZCB0byBtYWtlIG9yIHJlbmV3IHRyYWRlIHBhY3RzLCBhbGxpYW5jZXMsIGFuZCBhZ3JlZW1lbnRzLiBTaGllbGRtZWV0IHdhcyBrbm93biBhcyBDaW5uYWVsb3MnQ29yIChhbHNvIHNlZW4gYXMgQ2lubmFlbG9zY29yKSwgXFxcInRoZSBEYXkgb2YgQ29yZWxsb24ncyBQZWFjZVxcXCIgaW4gZWx2aXNoIGFuZCBtYXJrZWQgdGhlIGVuZCBvZiBhbiBhZWxvdWxhZXYgYW5kIHRoZSBiZWdpbm5pbmcgb2YgYSBuZXcgb25lIGluIHRoZSBlbHZlbiBBcnlzZWxtYWx5biBjYWxlbmRhci5cIixcbiAgICAgICAgICAgICAgICBpZDogXCI4MjQ1OTJcIixcbiAgICAgICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiAyLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogOVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwiZmVzdGl2YWxzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGZWFzdCBvZiB0aGUgTW9vblwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBGZWFzdCBvZiB0aGUgTW9vbiwgb3IgTW9vbmZlc3QsIHdhcyBhbiBhbm51YWwgZmVzdGl2YWwgaW4gdGhlIENhbGVuZGFyIG9mIEhhcnB0b3MsIG9jY3VycmluZyBiZXR3ZWVuIHRoZSBmaW5hbCBuaWdodCBvZiBVa3RhciBhbmQgdGhlIGZpcnN0IGRheSBvZiBOaWdodGFsLiBJdCB3YXMgdGhlIGxhc3QgZ3JlYXQgZmVzdGl2YWwgb2YgdGhlIGNhbGVuZGFyIHllYXIuXFxuXFxuVGhlIGRheSB0cmFkaXRpb25hbGx5IG1hcmtlZCB0aGUgb25zZXQgb2Ygd2ludGVyLiBJdCB3YXMgYWxzbyBhIHRpbWUgdG8gY2VsZWJyYXRlIGFuZCBob25vciB0aGUgYW5jZXN0b3JzIGFuZCB0aGUgcmVzcGVjdGVkIGRlYWQuIE9uIHRoaXMgZGF5LCBmb2xrIGJsZXNzZWQgdGhlaXIgYW5jZXN0b3JzJyBncmF2ZXMgYW5kIHBlcmZvcm1lZCB0aGUgUml0dWFsIG9mIFJlbWVtYnJhbmNlLiBQZW9wbGUgYWxzbyBnYXRoZXJlZCB0byB0ZWxsIHN0b3JpZXMgb2YgdGhlIGRlZWRzIG9mIHRoZWlyIGFuY2VzdG9ycyBhbmQgb2YgdGhlIGdvZHMgdW50aWwgZGVlcCBpbnRvIHRoZSBuaWdodCwgdW50aWwgdGhleSBtZXJnZWQgYW5kIGJlY2FtZSBsZWdlbmQuIFRoaXMgd2FzIGEgdGltZSB0byBoZWFyIG9mIHBhc3QgaGVyb2VzLCBncmVhdCB0cmVhc3VyZXMsIGFuZCBsb3N0IGNpdGllcy5cXG5cXG5JbiBGYWVyXHUwMEMzXHUwMTkyXHUwMEMyXHUwMEJCbiwgYmF0dGxlcyB3ZXJlIHR5cGljYWxseSBmb3VnaHQgYmV0d2VlbiBoYXJ2ZXN0LXRpbWUgYW5kIHRoZSBjb21pbmcgb2Ygd2ludGVyLiBUaGlzIG1lYW50IHRoYXQgbW9zdCBvZiB0aGUgZmlnaHRpbmcgdXN1YWxseSBvY2N1cnJlZCBpbiB0aGUgbW9udGggb2YgVWt0YXIuIFRoZSB0aW1pbmcgb2YgdGhlIEZlYXN0IG9mIHRoZSBNb29uXHUwMEMzXHUwMEEyXHUwMEUyXHUyMDFBXHUwMEFDXHUwMEUyXHUyMEFDYWZ0ZXIgcmVjZW50bHkgc2xhaW4gc29sZGllcnMgaGFkIGpvaW5lZCB0aGUgcmFua3Mgb2YgdGhlIGRlYWRcdTAwQzNcdTAwQTJcdTAwRTJcdTIwMUFcdTAwQUNcdTAwRTJcdTIwQUN3YXMgdGh1cyBwcmFjdGljYWwsIGlmIHNhZGx5IGlyb25pYy5cXG5cXG5UaGUgSGVyYWxkcyBvZiBGYWVyXHUwMEMzXHUwMTkyXHUwMEMyXHUwMEJCbiBoYWQgYSBudW1iZXIgb2Ygc3BlY2lhbCBkdXRpZXMgb24gdGhlIEZlYXN0IG9mIHRoZSBNb29uLiBQcmltZSBhbW9uZyB0aGVzZSB3YXMgdG8gcGVyZm9ybSB0aGUgQmxvb2Rzb25nIGNlcmVtb255LCBhdCB3aGljaCBhIEhlcmFsZCBwdWJsaWNseSByZWNpdGVkIHRoZSBnZW5lYWxvZ2llcyBvZiBlYWNoIG5vYmxlIGZhbWlseSBpbiB0aGUgYXJlYS4gSW4gdGhpcyB3YXksIHRoZSBIZXJhbGRzIHJlYWZmaXJtZWQgYSBub2JsZSBmYW1pbHkncyB0cmFkaXRpb25hbCBhdXRob3JpdHkgYW5kIHN0YXR1cywgYXMgd2VsbCBhcyB0aGUgcmVzcGVjdCBhY2NvcmRlZCB0byB0aGVtLlxcblxcblByaWVzdHMgb2YgYSBudW1iZXIgb2YgZGVpdGllcyBvZiB2YXJpb3VzIHBhbnRoZW9ucyBoZWxkIHJpdGVzLCBjZXJlbW9uaWVzLCBhbmQgZmVzdGl2YWxzIG9uIHRoZSBGZWFzdCBvZiB0aGUgTW9vbi4gTWFueSwgdGhvdWdoIG5vdCBhbGwsIGZvY3VzZWQgb24gcmVtZW1iZXJpbmcgdGhlIGRlYWQgaW4gb25lIHdheSBvciBhbm90aGVyLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU5M1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwiZmVzdGl2YWxzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIaWdoaGFydmVzdHRpZGVcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgJ0hpZ2hoYXJ2ZXN0aWRlIHdhcyBhbiBhbm51YWwgZmVzdGl2YWwgaW4gdGhlIENhbGVuZGFyIG9mIEhhcnB0b3MsIHRha2luZyBwbGFjZSBiZXR3ZWVuIDMwIEVsZWludCBhbmQgMSBNYXJwZW5vdGguIEl0IHdhcyB0cmFkaXRpb25hbGx5IGEgZmVhc3QgdG8gY2VsZWJyYXRlIHRoZSBoYXJ2ZXN0IGFuZCB0aGUgYWJ1bmRhbmNlIG9mIGZvb2QsIGJ1dCBhbHNvIHRoZSB0aW1lIHdoZW4gdGhvc2Ugd2lzaGluZyB0byB0cmF2ZWwgbGVmdCBvbiB0aGVpciBqb3VybmV5cyBiZWZvcmUgd2ludGVyIHNldCBpbi5cXG5cXG5QcmVwYXJhdGlvbnMgZm9yIHRoZSBmZWFzdCBzdGFydGVkIGFzIGVhcmx5IGFzIGEgdGVuZGF5IGJlZm9yZSwgd2hpbGUgcHJlcGFyaW5nLCBjb29raW5nLCBhbmQgcHJlc2VydmluZyB0aGUgaGFydmVzdCBmb3IgdGhlIGNvbGQgd2ludGVyIG1vbnRocy4gVHJhZGl0aW9ucyB2YXJpZWQgZnJvbSBjb21tdW5pdHkgdG8gY29tbXVuaXR5LCBidXQgZXhhbXBsZXMgb2YgZmVzdGl2ZSBhY3Rpdml0eSBpbmNsdWRlZCBmb29kLXJlbGF0ZWQgY29udGVzdHM7IHJhY2VzIGFuZCBjaGFsbGVuZ2VzIG9mIHNraWxsIGFuZCBzdHJlbmd0aDsgcmVjZWl2aW5nIGhvbWVtYWRlIHN3ZWV0cyBmcm9tIHRoZSBsb2NhbCBjbGVyZ3k7IGFuZCBwcmllc3RzIGJsZXNzaW5nIGxhcmRlcnMsIHdpbmUgY2VsbGFycywgZ3JhaW4gYmlucywgYW5kIGZvb2QgcHJlc2VydmVzLlxcblxcblRoaXMgZGF5IHdhcyBvZnRlbiBhbiBpbXBvcnRhbnQgYW5uaXZlcnNhcnkgdG8gdmFyaW91cyBnb3Zlcm5tZW50cy4gT2Z0ZW4sIHRheGVzIGFuZCB0aXRoZXMgY2FtZSBkdWUsIHJ1bGVycyBoZWxkIFwib3BlbiBjb3VydHNcIiB0byBoZWFyIHRoZSBjb25jZXJucyBvZiB0aGVpciBjaXRpemVucywgb2F0aHMgd2VyZSBwdWJsaWNseSByZW5ld2VkLCB0cm9vcHMgcmVjZWl2ZWQgbWFyY2hpbmcgb3JkZXJzIHRvIG5ldyBkdXR5IHN0YXRpb25zLCBhbmQgZ3VpbGRzIG1ldCB0byBjb25mZXIgb24gcHJpY2VzIGFuZCByYXRlIGNoYW5nZXMgZm9yIGdvb2RzIGFuZCBzZXJ2aWNlcy5cXG5cXG5BY2NvcmRpbmcgdG8gdHJhZGl0aW9uLCBkd2FydmVzIG9ubHkgZHJhbmsgd2F0ZXIgYW5kIGVsdmVzIGRyYW5rIG9ubHkgZGV3IG9uIHRoaXMgZGF5LiBIb3dldmVyLCB0aGVzZSB0cmFkaXRpb25zIGJlZ2FuIHRvIGZhZGUgaW4gdGhlIDE0dGggYW5kIDE1dGggY2VudHVyeSBEUi5cXG5cXG5JdCB3YXMgc2FpZCB0aGF0IGNoaWxkcmVuIGJvcm4gb24gdGhpcyBkYXkgd2VyZSBmYXZvcmVkIGJ5IFR5bW9yYSB0byBoYXZlIGxpZmVsb25nIGdvb2QgbHVjayBidXQgYmUgc21pdHRlbiB3aXRoIHdhbmRlcmx1c3QuIEFub3RoZXIgbGVnZW5kIHdhcyB0aGF0IGh1bWFuIGZlbWFsZXMgYm9ybiBvbiB0aGlzIGRheSBoYWQgY29udHJvbCBvdmVyIHRoZWlyIHJlcHJvZHVjdGl2ZSBzeXN0ZW0gKGkuZS4sIGdvdCBwcmVnbmFudCBvbmx5IHdoZW4gdGhleSB3YW50ZWQgdG8pIGJ5IGZvcmNlIG9mIHdpbGwgYWxvbmUsIGFuZCB0aGF0IHRoZXkgY291bGQgaW5zdGFudGx5IHNlbnNlIHdoZW4gdGhleSBoYWQgYmVlbiBwb2lzb25lZCwgZWl0aGVyIGJ5IGluZ2VzdGlvbiBvciBiZWluZyBiaXR0ZW4gYnkgYSB2ZW5vbW91cyBjcmVhdHVyZSBmb3IgZXhhbXBsZS4nLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU5NFwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwiZmVzdGl2YWxzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHcmVlbmdyYXNzXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiR3JlZW5ncmFzcyB3YXMgYSBmZXN0aXZhbCB0byB3ZWxjb21lIGluIHRoZSBmaXJzdCBkYXkgb2Ygc3ByaW5nIGluIHRoZSBDYWxlbmRhciBvZiBIYXJwdG9zLiBJdCBvY2N1cmVkIGFubnVhbGx5IG9uIGEgc3BlY2lhbCBkYXkgYmV0d2VlbiBUYXJzYWtoIDMwIGFuZCBNaXJ0dWwgMS4gVHJhZGl0aW9uYWxseSwgdGhlIHdlYWx0aGllciBwZW9wbGUgYnJvdWdodCBvdXQgZmxvd2VycyB0byBnaXZlIHRvIHRoZSBsZXNzIHdlYWx0aHksIHdobyBlaXRoZXIgd29yZSB0aGVtIG9yIHNwcmVhZCB0aGVtIG9uIHRoZSBncm91bmQgdG8gZW5jb3VyYWdlIHRoZSBkZWl0aWVzIHRvIHVzaGVyIGluIHRoZSBzdW1tZXIuXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiODI0NTk1XCIsXG4gICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogMSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IDVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcImZlc3RpdmFsc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWlkd2ludGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgIFwiTWlkd2ludGVyIChhbHNvIGtub3duIGFzIERlYWR3aW50ZXIgRGF5KSB3YXMgYSBmZXN0aXZhbCB0byBtYXJrIHRoZSBtaWRwb2ludCBvZiB3aW50ZXIgaW4gdGhlIENhbGVuZGFyIG9mIEhhcnB0b3MuIEl0IG9jY3VyZWQgb24gYSBzcGVjaWFsIGRheSBiZXR3ZWVuIEhhbW1lciAzMCBhbmQgQWx0dXJpYWsgMS4gQW1vbmdzdCBub2JsZXMgYW5kIG1vbmFyY2hzIGl0IHdhcyBrbm93biBhcyBNaWR3aW50ZXIgYW5kIHdhcyB0cmFkaXRpb25hbGx5IHVzZWQgdG8gbWFrZSBvciByZW5ldyBhbGxpYW5jZXMsIGFsdGhvdWdoIHRoZSBjb21tb24gcGVvcGxlIGNhbGxlZCBpdCBEZWFkd2ludGVyIERheSwgYSByZWZlcmVuY2UgdG8gdGhlIGNvbGQgYW5kIGhhcmQgdGltZXMgdGhhdCByZW1haW5lZCBiZWZvcmUgdGhlIHNwcmluZy5cXG5cXG5PbiBNaWR3aW50ZXIgRGF5IHRoZSBSZWQgRmVsbG93c2hpcCBvZiB0aGUgRGVpdHkga25vd24gYXMgdGhlIFJlZCBLbmlnaHQgb2JzZXJ2ZXMgdGhlIFJldHJlYXQuIFRoaXMgc29sZW1uIGNlcmVtb255IGNvbnNpc3RzIG9mIGFuIGFzc2VtYmx5IHdoZXJlaW4gdGhlIGNsZXJneSBkaXNjdXNzIHRoZSBwcmV2aW91cyB5ZWFyJ3MgY2FtcGFpZ25zLiBTdHJhdGVnaWVzIGFyZSBkaXNjdXNzZWQsIGJhdHRsZXMgYW5hbHl6ZWQsIGFuZCB0aGUgYWNjdW11bGF0ZWQgbG9yZSBpbnRlZ3JhdGVkIGludG8gdGhlIGNodXJjaCdzIHRlYWNoaW5ncy5cXG5cXG5UaGUgaG9saWVzdCBkYXkgb2YgdGhlIHllYXIgZm9yIHRoZSBDaHVyY2ggb2YgU2hldmFyYXNoIGlzIE1pZHdpbnRlciBOaWdodCwgZHVyaW5nIHdoaWNoIHRoZSBEYXJrIENvdXJ0IFNsYXVnaHRlciBpcyByZW1lbWJlcmVkLiBJbmR1Y3Rpb25zIGludG8gdGhlIHJhbmtzIG9mIHRoZSBjbGVyZ3kgb2NjdXIgYXQgdGhpcyB0aW1lLiBFYWNoIG5ldyBjbGVyaWMgc2NyZWFtcyB2b3dzIG9mIHZlbmdlYW5jZSBpbnRvIHRoZSBuaWdodCBhaXIgYW5kIHN3ZWFycyBuZWl0aGVyIHRvIGxhdWdoIG5vciBzbWlsZSB1bnRpbCB0aGUgU3BpZGVyIFF1ZWVuIGFuZCBoZXIgZm9sbG93ZXJzIGFyZSBubyBtb3JlLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU5NlwiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJmZXN0aXZhbHNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1pZHN1bW1lclwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgICBcIk1pZHN1bW1lciB3YXMgYSBmZXN0aXZhbCB0aGF0IGNlbGVicmF0ZWQgbG92ZSBhbmQgbXVzaWMgdGhyb3VnaCBmZWFzdC4gSXQgb2NjdXJyZWQgYmV0d2VlbiBGbGFtZXJ1bGUgMzAgYW5kIEVsZWFzaXMgMSBvbiB0aGUgQ2FsZW5kYXIgb2YgSGFycHRvcy4gSXQgd2FzIGEgdGltZSB3aGVuIGxvdmUgYWR2YW5jZWQsIGFuZCBpdCB3YXMgc2FpZCB0aGUgZGVpdGllcyB0aGVtc2VsdmVzIHRvb2sgYSBoYW5kIHRvIGVuc3VyZSBnb29kIHdlYXRoZXIuIElmIGJhZCB3ZWF0aGVyIHdhcyBleHBlcmllbmNlZCBvbiB0aGlzIG5pZ2h0IGl0IHdhcyBjb25zaWRlcmVkIGFuIGV4dHJlbWVseSBiYWQgb21lbi4gU2hpZWxkbWVldCBvY2N1cnJlZCB0aGUgZGF5IGFmdGVyIE1pZHN1bW1lciBvbiBsZWFwIHllYXJzLlwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjgyNDU5N1wiLFxuICAgICAgICAgICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICBkYXk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiA5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJmZXN0aXZhbHNcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgY2F0ZWdvcmllczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTmF0dXJhbCBFdmVudHNcIixcbiAgICAgICAgICAgICAgICBpZDogXCJuYXR1cmFsLWV2ZW50c1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMyRTdEMzJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZlc3RpdmFsc1wiLFxuICAgICAgICAgICAgICAgIGlkOiBcImZlc3RpdmFsc1wiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiM5YjJjMmNcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxuXTtcbiIsICJmdW5jdGlvbiBub29wKCkgeyB9XG5jb25zdCBpZGVudGl0eSA9IHggPT4geDtcbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKVxuICAgICAgICB0YXJba10gPSBzcmNba107XG4gICAgcmV0dXJuIHRhcjtcbn1cbmZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcbiAgICBlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG4gICAgICAgIGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuICAgIH07XG59XG5mdW5jdGlvbiBydW4oZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbn1cbmZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG4gICAgZm5zLmZvckVhY2gocnVuKTtcbn1cbmZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5sZXQgc3JjX3VybF9lcXVhbF9hbmNob3I7XG5mdW5jdGlvbiBzcmNfdXJsX2VxdWFsKGVsZW1lbnRfc3JjLCB1cmwpIHtcbiAgICBpZiAoIXNyY191cmxfZXF1YWxfYW5jaG9yKSB7XG4gICAgICAgIHNyY191cmxfZXF1YWxfYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIH1cbiAgICBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuICAgIHJldHVybiBlbGVtZW50X3NyYyA9PT0gc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZjtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Qoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICB1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pO1xufVxuZnVuY3Rpb24gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKCQkc2NvcGUpIHtcbiAgICBpZiAoJCRzY29wZS5jdHgubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgY29uc3QgZGlydHkgPSBbXTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gJCRzY29wZS5jdHgubGVuZ3RoIC8gMzI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRpcnR5W2ldID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcnR5O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9zbG90cyhzbG90cykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xubGV0IG5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xubGV0IHJhZiA9IGlzX2NsaWVudCA/IGNiID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuLy8gdXNlZCBpbnRlcm5hbGx5IGZvciB0ZXN0aW5nXG5mdW5jdGlvbiBzZXRfbm93KGZuKSB7XG4gICAgbm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgcmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xufVxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5IVxuICovXG5mdW5jdGlvbiBjbGVhcl9sb29wcygpIHtcbiAgICB0YXNrcy5jbGVhcigpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICovXG5mdW5jdGlvbiBsb29wKGNhbGxiYWNrKSB7XG4gICAgbGV0IHRhc2s7XG4gICAgaWYgKHRhc2tzLnNpemUgPT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBUcmFjayB3aGljaCBub2RlcyBhcmUgY2xhaW1lZCBkdXJpbmcgaHlkcmF0aW9uLiBVbmNsYWltZWQgbm9kZXMgY2FuIHRoZW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbi8vIGF0IHRoZSBlbmQgb2YgaHlkcmF0aW9uIHdpdGhvdXQgdG91Y2hpbmcgdGhlIHJlbWFpbmluZyBub2Rlcy5cbmxldCBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0YXJ0X2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gZW5kX2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwcGVyX2JvdW5kKGxvdywgaGlnaCwga2V5LCB2YWx1ZSkge1xuICAgIC8vIFJldHVybiBmaXJzdCBpbmRleCBvZiB2YWx1ZSBsYXJnZXIgdGhhbiBpbnB1dCB2YWx1ZSBpbiB0aGUgcmFuZ2UgW2xvdywgaGlnaClcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICBjb25zdCBtaWQgPSBsb3cgKyAoKGhpZ2ggLSBsb3cpID4+IDEpO1xuICAgICAgICBpZiAoa2V5KG1pZCkgPD0gdmFsdWUpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG59XG5mdW5jdGlvbiBpbml0X2h5ZHJhdGUodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5oeWRyYXRlX2luaXQpXG4gICAgICAgIHJldHVybjtcbiAgICB0YXJnZXQuaHlkcmF0ZV9pbml0ID0gdHJ1ZTtcbiAgICAvLyBXZSBrbm93IHRoYXQgYWxsIGNoaWxkcmVuIGhhdmUgY2xhaW1fb3JkZXIgdmFsdWVzIHNpbmNlIHRoZSB1bmNsYWltZWQgaGF2ZSBiZWVuIGRldGFjaGVkIGlmIHRhcmdldCBpcyBub3QgPGhlYWQ+XG4gICAgbGV0IGNoaWxkcmVuID0gdGFyZ2V0LmNoaWxkTm9kZXM7XG4gICAgLy8gSWYgdGFyZ2V0IGlzIDxoZWFkPiwgdGhlcmUgbWF5IGJlIGNoaWxkcmVuIHdpdGhvdXQgY2xhaW1fb3JkZXJcbiAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnSEVBRCcpIHtcbiAgICAgICAgY29uc3QgbXlDaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbXlDaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuID0gbXlDaGlsZHJlbjtcbiAgICB9XG4gICAgLypcbiAgICAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG4gICAgKiBXZSBjYW4gcmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseSBieSBmaW5kaW5nIHRoZSBsb25nZXN0IHN1YnNlcXVlbmNlIG9mXG4gICAgKiBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IGNsYWltZWQgaW4gb3JkZXIgYW5kIG9ubHkgbW92aW5nIHRoZSByZXN0LiBUaGUgbG9uZ2VzdFxuICAgICogc3Vic2VxdWVuY2Ugc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcbiAgICAqIGNvbXB1dGluZyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIC5jbGFpbV9vcmRlciB2YWx1ZXMuXG4gICAgKlxuICAgICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG4gICAgKiBwb3NzaWJsZS5cbiAgICAqXG4gICAgKiBQcm9vZjpcbiAgICAqIFdlIGtub3cgdGhhdCwgZ2l2ZW4gYSBzZXQgb2YgcmVvcmRlcmluZyBvcGVyYXRpb25zLCB0aGUgbm9kZXMgdGhhdCBkbyBub3QgbW92ZVxuICAgICogYWx3YXlzIGZvcm0gYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSwgc2luY2UgdGhleSBkbyBub3QgbW92ZSBhbW9uZyBlYWNoIG90aGVyXG4gICAgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuICAgICogc2V0IG9mIG5vZGVzIHRoYXQgZG8gbm90IG1vdmUgZm9ybSBhIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZS5cbiAgICAqL1xuICAgIC8vIENvbXB1dGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgLy8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuICAgIGNvbnN0IG0gPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGggKyAxKTtcbiAgICAvLyBQcmVkZWNlc3NvciBpbmRpY2VzICsgMVxuICAgIGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuICAgIG1bMF0gPSAtMTtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gY2hpbGRyZW5baV0uY2xhaW1fb3JkZXI7XG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3Qgc3Vic2VxdWVuY2UgbGVuZ3RoIHN1Y2ggdGhhdCBpdCBlbmRzIGluIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBjdXJyZW50IHZhbHVlXG4gICAgICAgIC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG4gICAgICAgIC8vIHdpdGggZmFzdCBwYXRoIGZvciB3aGVuIHdlIGFyZSBvbiB0aGUgY3VycmVudCBsb25nZXN0IHN1YnNlcXVlbmNlXG4gICAgICAgIGNvbnN0IHNlcUxlbiA9ICgobG9uZ2VzdCA+IDAgJiYgY2hpbGRyZW5bbVtsb25nZXN0XV0uY2xhaW1fb3JkZXIgPD0gY3VycmVudCkgPyBsb25nZXN0ICsgMSA6IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QsIGlkeCA9PiBjaGlsZHJlblttW2lkeF1dLmNsYWltX29yZGVyLCBjdXJyZW50KSkgLSAxO1xuICAgICAgICBwW2ldID0gbVtzZXFMZW5dICsgMTtcbiAgICAgICAgY29uc3QgbmV3TGVuID0gc2VxTGVuICsgMTtcbiAgICAgICAgLy8gV2UgY2FuIGd1YXJhbnRlZSB0aGF0IGN1cnJlbnQgaXMgdGhlIHNtYWxsZXN0IHZhbHVlLiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgZ2VuZXJhdGVkIGEgbG9uZ2VyIHNlcXVlbmNlLlxuICAgICAgICBtW25ld0xlbl0gPSBpO1xuICAgICAgICBsb25nZXN0ID0gTWF0aC5tYXgobmV3TGVuLCBsb25nZXN0KTtcbiAgICB9XG4gICAgLy8gVGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBub2RlcyAoaW5pdGlhbGx5IHJldmVyc2VkKVxuICAgIGNvbnN0IGxpcyA9IFtdO1xuICAgIC8vIFRoZSByZXN0IG9mIHRoZSBub2Rlcywgbm9kZXMgdGhhdCB3aWxsIGJlIG1vdmVkXG4gICAgY29uc3QgdG9Nb3ZlID0gW107XG4gICAgbGV0IGxhc3QgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuICAgICAgICBsaXMucHVzaChjaGlsZHJlbltjdXIgLSAxXSk7XG4gICAgICAgIGZvciAoOyBsYXN0ID49IGN1cjsgbGFzdC0tKSB7XG4gICAgICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC0tO1xuICAgIH1cbiAgICBmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pIHtcbiAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgIH1cbiAgICBsaXMucmV2ZXJzZSgpO1xuICAgIC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuICAgIHRvTW92ZS5zb3J0KChhLCBiKSA9PiBhLmNsYWltX29yZGVyIC0gYi5jbGFpbV9vcmRlcik7XG4gICAgLy8gRmluYWxseSwgd2UgbW92ZSB0aGUgbm9kZXNcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b01vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd2hpbGUgKGogPCBsaXMubGVuZ3RoICYmIHRvTW92ZVtpXS5jbGFpbV9vcmRlciA+PSBsaXNbal0uY2xhaW1fb3JkZXIpIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUodG9Nb3ZlW2ldLCBhbmNob3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzKHRhcmdldCwgc3R5bGVfc2hlZXRfaWQsIHN0eWxlcykge1xuICAgIGNvbnN0IGFwcGVuZF9zdHlsZXNfdG8gPSBnZXRfcm9vdF9mb3Jfc3R5bGUodGFyZ2V0KTtcbiAgICBpZiAoIWFwcGVuZF9zdHlsZXNfdG8uZ2V0RWxlbWVudEJ5SWQoc3R5bGVfc2hlZXRfaWQpKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUuaWQgPSBzdHlsZV9zaGVldF9pZDtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG4gICAgICAgIGFwcGVuZF9zdHlsZXNoZWV0KGFwcGVuZF9zdHlsZXNfdG8sIHN0eWxlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIGNvbnN0IHJvb3QgPSBub2RlLmdldFJvb3ROb2RlID8gbm9kZS5nZXRSb290Tm9kZSgpIDogbm9kZS5vd25lckRvY3VtZW50O1xuICAgIGlmIChyb290ICYmIHJvb3QuaG9zdCkge1xuICAgICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZV9lbGVtZW50ID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICBhcHBlbmRfc3R5bGVzaGVldChnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSksIHN0eWxlX2VsZW1lbnQpO1xuICAgIHJldHVybiBzdHlsZV9lbGVtZW50LnNoZWV0O1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlc2hlZXQobm9kZSwgc3R5bGUpIHtcbiAgICBhcHBlbmQobm9kZS5oZWFkIHx8IG5vZGUsIHN0eWxlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKSB7XG4gICAgaWYgKGlzX2h5ZHJhdGluZykge1xuICAgICAgICBpbml0X2h5ZHJhdGUodGFyZ2V0KTtcbiAgICAgICAgaWYgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9PT0gdW5kZWZpbmVkKSB8fCAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQucGFyZW50RWxlbWVudCAhPT0gdGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2tpcCBub2RlcyBvZiB1bmRlZmluZWQgb3JkZXJpbmdcbiAgICAgICAgd2hpbGUgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCkgJiYgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLmNsYWltX29yZGVyID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlICE9PSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCkge1xuICAgICAgICAgICAgLy8gV2Ugb25seSBpbnNlcnQgaWYgdGhlIG9yZGVyaW5nIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUgbW9kaWZpZWQgb3IgdGhlIHBhcmVudCBub2RlIGlzIG5vdCB0YXJnZXRcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQgfHwgbm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcbiAgICAgICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9IGFuY2hvcikge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cnVzdGVkKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC5pc1RydXN0ZWQpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHR5cGVvZiBub2RlW3Byb3BdID09PSAnYm9vbGVhbicgJiYgdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBpbml0X2NsYWltX2luZm8obm9kZXMpIHtcbiAgICBpZiAobm9kZXMuY2xhaW1faW5mbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGVzLmNsYWltX2luZm8gPSB7IGxhc3RfaW5kZXg6IDAsIHRvdGFsX2NsYWltZWQ6IDAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGFpbV9ub2RlKG5vZGVzLCBwcmVkaWNhdGUsIHByb2Nlc3NOb2RlLCBjcmVhdGVOb2RlLCBkb250VXBkYXRlTGFzdEluZGV4ID0gZmFsc2UpIHtcbiAgICAvLyBUcnkgdG8gZmluZCBub2RlcyBpbiBhbiBvcmRlciBzdWNoIHRoYXQgd2UgbGVuZ3RoZW4gdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgcmVzdWx0Tm9kZSA9ICgoKSA9PiB7XG4gICAgICAgIC8vIFdlIGZpcnN0IHRyeSB0byBmaW5kIGFuIGVsZW1lbnQgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4OyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBmaW5kIG9uZSBiZWZvcmVcbiAgICAgICAgLy8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIHNvIHRoYXQgd2UgZG9uJ3QgZ28gdG9vIGZhciBiYWNrXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2Ugc3BsaWNlZCBiZWZvcmUgdGhlIGxhc3RfaW5kZXgsIHdlIGRlY3JlYXNlIGl0XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGFueSBtYXRjaGluZyBub2RlLCB3ZSBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgIHJldHVybiBjcmVhdGVOb2RlKCk7XG4gICAgfSkoKTtcbiAgICByZXN1bHROb2RlLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgIG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuICAgIHJldHVybiByZXN1bHROb2RlO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBjcmVhdGVfZWxlbWVudCkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gbmFtZSwgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbW92ZS5mb3JFYWNoKHYgPT4gbm9kZS5yZW1vdmVBdHRyaWJ1dGUodikpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sICgpID0+IGNyZWF0ZV9lbGVtZW50KG5hbWUpKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGNsYWltX3N2Z19lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnX2VsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fdGV4dChub2RlcywgZGF0YSkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gMywgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YVN0ciA9ICcnICsgZGF0YTtcbiAgICAgICAgaWYgKG5vZGUuZGF0YS5zdGFydHNXaXRoKGRhdGFTdHIpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5kYXRhLmxlbmd0aCAhPT0gZGF0YVN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5zcGxpdFRleHQoZGF0YVN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gZGF0YVN0cjtcbiAgICAgICAgfVxuICAgIH0sICgpID0+IHRleHQoZGF0YSksIHRydWUgLy8gVGV4dCBub2RlcyBzaG91bGQgbm90IHVwZGF0ZSBsYXN0IGluZGV4IHNpbmNlIGl0IGlzIGxpa2VseSBub3Qgd29ydGggaXQgdG8gZWxpbWluYXRlIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgYWN0dWFsIGVsZW1lbnRzXG4gICAgKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5mdW5jdGlvbiBmaW5kX2NvbW1lbnQobm9kZXMsIHRleHQsIHN0YXJ0KSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8gJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkgPT09IHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2Rlcy5sZW5ndGg7XG59XG5mdW5jdGlvbiBjbGFpbV9odG1sX3RhZyhub2Rlcykge1xuICAgIC8vIGZpbmQgaHRtbCBvcGVuaW5nIHRhZ1xuICAgIGNvbnN0IHN0YXJ0X2luZGV4ID0gZmluZF9jb21tZW50KG5vZGVzLCAnSFRNTF9UQUdfU1RBUlQnLCAwKTtcbiAgICBjb25zdCBlbmRfaW5kZXggPSBmaW5kX2NvbW1lbnQobm9kZXMsICdIVE1MX1RBR19FTkQnLCBzdGFydF9pbmRleCk7XG4gICAgaWYgKHN0YXJ0X2luZGV4ID09PSBlbmRfaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKCk7XG4gICAgfVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgaHRtbF90YWdfbm9kZXMgPSBub2Rlcy5zcGxpY2Uoc3RhcnRfaW5kZXgsIGVuZF9pbmRleCAtIHN0YXJ0X2luZGV4ICsgMSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzWzBdKTtcbiAgICBkZXRhY2goaHRtbF90YWdfbm9kZXNbaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMV0pO1xuICAgIGNvbnN0IGNsYWltZWRfbm9kZXMgPSBodG1sX3RhZ19ub2Rlcy5zbGljZSgxLCBodG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxKTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgY2xhaW1lZF9ub2Rlcykge1xuICAgICAgICBuLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKGNsYWltZWRfbm9kZXMpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSAtMTsgLy8gbm8gb3B0aW9uIHNob3VsZCBiZSBzZWxlY3RlZFxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChjb21wdXRlZF9zdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG4gICAgICAgICdvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaWZyYW1lLnRhYkluZGV4ID0gLTE7XG4gICAgY29uc3QgY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbigpO1xuICAgIGxldCB1bnN1YnNjcmliZTtcbiAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9IFwiZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+XCI7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKHdpbmRvdywgJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KVxuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3RlbihpZnJhbWUuY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUsIGlmcmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuc3Vic2NyaWJlICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRldGFjaChpZnJhbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVfY2xhc3MoZWxlbWVudCwgbmFtZSwgdG9nZ2xlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3RbdG9nZ2xlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCBidWJibGVzID0gZmFsc2UpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgYnViYmxlcywgZmFsc2UsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgfVxuICAgIGMoaHRtbCkge1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmMoaHRtbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pKGFuY2hvcik7XG4gICAgfVxuICAgIGgoaHRtbCkge1xuICAgICAgICB0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cbmNsYXNzIEh0bWxUYWdIeWRyYXRpb24gZXh0ZW5kcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgICAgIHRoaXMubCA9IGNsYWltZWRfbm9kZXM7XG4gICAgfVxuICAgIGMoaHRtbCkge1xuICAgICAgICBpZiAodGhpcy5sKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSB0aGlzLmw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5jKGh0bWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnRfaHlkcmF0aW9uKHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYXR0cmlidXRlX3RvX29iamVjdChhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcykge1xuICAgICAgICByZXN1bHRbYXR0cmlidXRlLm5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cyhlbGVtZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZWxlbWVudC5jaGlsZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgcmVzdWx0W25vZGUuc2xvdCB8fCAnZGVmYXVsdCddID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBpbmZvcm1hdGlvbiBmb3IgbXVsdGlwbGUgZG9jdW1lbnRzIGJlY2F1c2UgYSBTdmVsdGUgYXBwbGljYXRpb24gY291bGQgYWxzbyBjb250YWluIGlmcmFtZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzM2MjRcbmNvbnN0IG1hbmFnZWRfc3R5bGVzID0gbmV3IE1hcCgpO1xubGV0IGFjdGl2ZSA9IDA7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaC9ibG9iL21hc3Rlci9pbmRleC5qc1xuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgICBsZXQgaGFzaCA9IDUzODE7XG4gICAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBoYXNoID4+PiAwO1xufVxuZnVuY3Rpb24gY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSkge1xuICAgIGNvbnN0IGluZm8gPSB7IHN0eWxlc2hlZXQ6IGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpLCBydWxlczoge30gfTtcbiAgICBtYW5hZ2VkX3N0eWxlcy5zZXQoZG9jLCBpbmZvKTtcbiAgICByZXR1cm4gaW5mbztcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9ydWxlKG5vZGUsIGEsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzZSwgZm4sIHVpZCA9IDApIHtcbiAgICBjb25zdCBzdGVwID0gMTYuNjY2IC8gZHVyYXRpb247XG4gICAgbGV0IGtleWZyYW1lcyA9ICd7XFxuJztcbiAgICBmb3IgKGxldCBwID0gMDsgcCA8PSAxOyBwICs9IHN0ZXApIHtcbiAgICAgICAgY29uc3QgdCA9IGEgKyAoYiAtIGEpICogZWFzZShwKTtcbiAgICAgICAga2V5ZnJhbWVzICs9IHAgKiAxMDAgKyBgJXske2ZuKHQsIDEgLSB0KX19XFxuYDtcbiAgICB9XG4gICAgY29uc3QgcnVsZSA9IGtleWZyYW1lcyArIGAxMDAlIHske2ZuKGIsIDEgLSBiKX19XFxufWA7XG4gICAgY29uc3QgbmFtZSA9IGBfX3N2ZWx0ZV8ke2hhc2gocnVsZSl9XyR7dWlkfWA7XG4gICAgY29uc3QgZG9jID0gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHsgc3R5bGVzaGVldCwgcnVsZXMgfSA9IG1hbmFnZWRfc3R5bGVzLmdldChkb2MpIHx8IGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpO1xuICAgIGlmICghcnVsZXNbbmFtZV0pIHtcbiAgICAgICAgcnVsZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBzdHlsZXNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtuYW1lfSAke3J1bGV9YCwgc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJztcbiAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiAnJ30ke25hbWV9ICR7ZHVyYXRpb259bXMgbGluZWFyICR7ZGVsYXl9bXMgMSBib3RoYDtcbiAgICBhY3RpdmUgKz0gMTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IChub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgbmV4dCA9IHByZXZpb3VzLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgICk7XG4gICAgY29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuICAgIGlmIChkZWxldGVkKSB7XG4gICAgICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKCcsICcpO1xuICAgICAgICBhY3RpdmUgLT0gZGVsZXRlZDtcbiAgICAgICAgaWYgKCFhY3RpdmUpXG4gICAgICAgICAgICBjbGVhcl9ydWxlcygpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyX3J1bGVzKCkge1xuICAgIHJhZigoKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG1hbmFnZWRfc3R5bGVzLmZvckVhY2goaW5mbyA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHN0eWxlc2hlZXQgfSA9IGluZm87XG4gICAgICAgICAgICBsZXQgaSA9IHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGktLSlcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0LmRlbGV0ZVJ1bGUoaSk7XG4gICAgICAgICAgICBpbmZvLnJ1bGVzID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxubGV0IGN1cnJlbnRfY29tcG9uZW50O1xuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG4gICAgcmV0dXJuIGN1cnJlbnRfY29tcG9uZW50O1xufVxuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9tb3VudC5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFmdGVyVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYWZ0ZXJfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICByZXR1cm4gKHR5cGUsIGRldGFpbCkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG5mdW5jdGlvbiBnZXRBbGxDb250ZXh0cygpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dDtcbn1cbmZ1bmN0aW9uIGhhc0NvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuaGFzKGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcbiAgICB9XG59XG5cbmNvbnN0IGRpcnR5X2NvbXBvbmVudHMgPSBbXTtcbmNvbnN0IGludHJvcyA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbmNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5jb25zdCByZW5kZXJfY2FsbGJhY2tzID0gW107XG5jb25zdCBmbHVzaF9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlc29sdmVkX3Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbmxldCB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG5mdW5jdGlvbiBzY2hlZHVsZV91cGRhdGUoKSB7XG4gICAgaWYgKCF1cGRhdGVfc2NoZWR1bGVkKSB7XG4gICAgICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRpY2soKSB7XG4gICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgcmV0dXJuIHJlc29sdmVkX3Byb21pc2U7XG59XG5mdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG4gICAgcmVuZGVyX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFkZF9mbHVzaF9jYWxsYmFjayhmbikge1xuICAgIGZsdXNoX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbi8vIGZsdXNoKCkgY2FsbHMgY2FsbGJhY2tzIGluIHRoaXMgb3JkZXI6XG4vLyAxLiBBbGwgYmVmb3JlVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuXG4vLyAyLiBBbGwgYmluZDp0aGlzIGNhbGxiYWNrcywgaW4gcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyAzLiBBbGwgYWZ0ZXJVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW4uIEVYQ0VQVFxuLy8gICAgZm9yIGFmdGVyVXBkYXRlcyBjYWxsZWQgZHVyaW5nIHRoZSBpbml0aWFsIG9uTW91bnQsIHdoaWNoIGFyZSBjYWxsZWQgaW5cbi8vICAgIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gU2luY2UgY2FsbGJhY2tzIG1pZ2h0IHVwZGF0ZSBjb21wb25lbnQgdmFsdWVzLCB3aGljaCBjb3VsZCB0cmlnZ2VyIGFub3RoZXJcbi8vIGNhbGwgdG8gZmx1c2goKSwgdGhlIGZvbGxvd2luZyBzdGVwcyBndWFyZCBhZ2FpbnN0IHRoaXM6XG4vLyAxLiBEdXJpbmcgYmVmb3JlVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4vLyAgICBkaXJ0eV9jb21wb25lbnRzIGFycmF5IGFuZCB3aWxsIGNhdXNlIGEgcmVlbnRyYW50IGNhbGwgdG8gZmx1c2goKS4gQmVjYXVzZVxuLy8gICAgdGhlIGZsdXNoIGluZGV4IGlzIGtlcHQgb3V0c2lkZSB0aGUgZnVuY3Rpb24sIHRoZSByZWVudHJhbnQgY2FsbCB3aWxsIHBpY2tcbi8vICAgIHVwIHdoZXJlIHRoZSBlYXJsaWVyIGNhbGwgbGVmdCBvZmYgYW5kIGdvIHRocm91Z2ggYWxsIGRpcnR5IGNvbXBvbmVudHMuIFRoZVxuLy8gICAgY3VycmVudF9jb21wb25lbnQgdmFsdWUgaXMgc2F2ZWQgYW5kIHJlc3RvcmVkIHNvIHRoYXQgdGhlIHJlZW50cmFudCBjYWxsIHdpbGxcbi8vICAgIG5vdCBpbnRlcmZlcmUgd2l0aCB0aGUgXCJwYXJlbnRcIiBmbHVzaCgpIGNhbGwuXG4vLyAyLiBiaW5kOnRoaXMgY2FsbGJhY2tzIGNhbm5vdCB0cmlnZ2VyIG5ldyBmbHVzaCgpIGNhbGxzLlxuLy8gMy4gRHVyaW5nIGFmdGVyVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgTk9UIGhhdmUgdGhlaXIgYWZ0ZXJVcGRhdGVcbi8vICAgIGNhbGxiYWNrIGNhbGxlZCBhIHNlY29uZCB0aW1lOyB0aGUgc2Vlbl9jYWxsYmFja3Mgc2V0LCBvdXRzaWRlIHRoZSBmbHVzaCgpXG4vLyAgICBmdW5jdGlvbiwgZ3VhcmFudGVlcyB0aGlzIGJlaGF2aW9yLlxuY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG5sZXQgZmx1c2hpZHggPSAwOyAvLyBEbyAqbm90KiBtb3ZlIHRoaXMgaW5zaWRlIHRoZSBmbHVzaCgpIGZ1bmN0aW9uXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBjb25zdCBzYXZlZF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIHdoaWxlIChmbHVzaGlkeCA8IGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ZsdXNoaWR4XTtcbiAgICAgICAgICAgIGZsdXNoaWR4Kys7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShjb21wb25lbnQuJCQpO1xuICAgICAgICB9XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICBmbHVzaGlkeCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChzYXZlZF9jb21wb25lbnQpO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICQkLnVwZGF0ZSgpO1xuICAgICAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICAgICBjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuICAgICAgICAkJC5kaXJ0eSA9IFstMV07XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgICAgICQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuICAgIH1cbn1cblxubGV0IHByb21pc2U7XG5mdW5jdGlvbiB3YWl0KCkge1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5sZXQgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICAgIG91dHJvcyA9IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgYzogW10sXG4gICAgICAgIHA6IG91dHJvcyAvLyBwYXJlbnQgZ3JvdXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuICAgIGlmICghb3V0cm9zLnIpIHtcbiAgICAgICAgcnVuX2FsbChvdXRyb3MuYyk7XG4gICAgfVxuICAgIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICBibG9jay5pKGxvY2FsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2subykge1xuICAgICAgICBpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICAgICAgb3V0cm9zLmMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2subyhsb2NhbCk7XG4gICAgfVxufVxuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB1aWQgPSAwO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MsIHVpZCsrKTtcbiAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGFzaylcbiAgICAgICAgICAgIHRhc2suYWJvcnQoKTtcbiAgICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCgpIHtcbiAgICAgICAgICAgIGlmIChzdGFydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgIGdvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ28oKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kKHJlc2V0KSB7XG4gICAgICAgICAgICBpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcbiAgICAgICAgICAgICAgICBjb25maWcudGljaygxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gKHByb2dyYW0uYiAtIHQpO1xuICAgICAgICBkdXJhdGlvbiAqPSBNYXRoLmFicyhkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGE6IHQsXG4gICAgICAgICAgICBiOiBwcm9ncmFtLmIsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBzdGFydDogcHJvZ3JhbS5zdGFydCxcbiAgICAgICAgICAgIGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuICAgICAgICAgICAgZ3JvdXA6IHByb2dyYW0uZ3JvdXBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oYikge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG5vdygpICsgZGVsYXksXG4gICAgICAgICAgICBiXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIHByb2dyYW0uZ3JvdXAgPSBvdXRyb3M7XG4gICAgICAgICAgICBvdXRyb3MuciArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIFx1MjAxNCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIFx1MjAxNCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGNoaWxkX2N0eCA9IGluZm8uY3R4O1xuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9jayA9IHR5cGUgJiYgKGluZm8uY3VycmVudCA9IHR5cGUpKGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgbmVlZHNfZmx1c2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uYmxvY2sgPSBibG9jaztcbiAgICAgICAgaWYgKGluZm8uYmxvY2tzKVxuICAgICAgICAgICAgaW5mby5ibG9ja3NbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgICAgICBpZiAoIWluZm8uaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHdlIHByZXZpb3VzbHkgaGFkIGEgdGhlbi9jYXRjaCBibG9jaywgZGVzdHJveSBpdFxuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnBlbmRpbmcsIDApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8udGhlbikge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLnJlc29sdmVkID0gcHJvbWlzZTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfYXdhaXRfYmxvY2tfYnJhbmNoKGluZm8sIGN0eCwgZGlydHkpIHtcbiAgICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgICBjb25zdCB7IHJlc29sdmVkIH0gPSBpbmZvO1xuICAgIGlmIChpbmZvLmN1cnJlbnQgPT09IGluZm8udGhlbikge1xuICAgICAgICBjaGlsZF9jdHhbaW5mby52YWx1ZV0gPSByZXNvbHZlZDtcbiAgICB9XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby5jYXRjaCkge1xuICAgICAgICBjaGlsZF9jdHhbaW5mby5lcnJvcl0gPSByZXNvbHZlZDtcbiAgICB9XG4gICAgaW5mby5ibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG5mdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5kKDEpO1xuICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfbG9va3VwLnNldChrZXksIG5ld19ibG9ja3NbaV0gPSBibG9jayk7XG4gICAgICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICAgICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgYmxvY2subShub2RlLCBuZXh0KTtcbiAgICAgICAgbG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcbiAgICAgICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgICAgICBuLS07XG4gICAgfVxuICAgIHdoaWxlIChvICYmIG4pIHtcbiAgICAgICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuICAgICAgICBjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcbiAgICAgICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgICAgIGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgbmV4dCA9IG5ld19ibG9jay5maXJzdDtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgYmxvY2tcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBkaWRfbW92ZS5hZGQobmV3X2tleSk7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG8tLSkge1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuICAgICAgICBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKVxuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgfVxuICAgIHdoaWxlIChuKVxuICAgICAgICBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2gnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbmNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgICAnYXN5bmMnLFxuICAgICdhdXRvZm9jdXMnLFxuICAgICdhdXRvcGxheScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdjb250cm9scycsXG4gICAgJ2RlZmF1bHQnLFxuICAgICdkZWZlcicsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZm9ybW5vdmFsaWRhdGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dKTtcblxuY29uc3QgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIgPSAvW1xccydcIj4vPVxcdXtGREQwfS1cXHV7RkRFRn1cXHV7RkZGRX1cXHV7RkZGRn1cXHV7MUZGRkV9XFx1ezFGRkZGfVxcdXsyRkZGRX1cXHV7MkZGRkZ9XFx1ezNGRkZFfVxcdXszRkZGRn1cXHV7NEZGRkV9XFx1ezRGRkZGfVxcdXs1RkZGRX1cXHV7NUZGRkZ9XFx1ezZGRkZFfVxcdXs2RkZGRn1cXHV7N0ZGRkV9XFx1ezdGRkZGfVxcdXs4RkZGRX1cXHV7OEZGRkZ9XFx1ezlGRkZFfVxcdXs5RkZGRn1cXHV7QUZGRkV9XFx1e0FGRkZGfVxcdXtCRkZGRX1cXHV7QkZGRkZ9XFx1e0NGRkZFfVxcdXtDRkZGRn1cXHV7REZGRkV9XFx1e0RGRkZGfVxcdXtFRkZGRX1cXHV7RUZGRkZ9XFx1e0ZGRkZFfVxcdXtGRkZGRn1cXHV7MTBGRkZFfVxcdXsxMEZGRkZ9XS91O1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4vLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jbm9uY2hhcmFjdGVyXG5mdW5jdGlvbiBzcHJlYWQoYXJncywgYXR0cnNfdG9fYWRkKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGlmIChhdHRyc190b19hZGQpIHtcbiAgICAgICAgY29uc3QgY2xhc3Nlc190b19hZGQgPSBhdHRyc190b19hZGQuY2xhc3NlcztcbiAgICAgICAgY29uc3Qgc3R5bGVzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5zdHlsZXM7XG4gICAgICAgIGlmIChjbGFzc2VzX3RvX2FkZCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuY2xhc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlc190b19hZGQpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLnN0eWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnN0eWxlID0gc3R5bGVfb2JqZWN0X3RvX3N0cmluZyhzdHlsZXNfdG9fYWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKG1lcmdlX3Nzcl9zdHlsZXMoYXR0cmlidXRlcy5zdHlsZSwgc3R5bGVzX3RvX2FkZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgZWxzZSBpZiAoYm9vbGVhbl9hdHRyaWJ1dGVzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9IGAgJHtuYW1lfT1cIiR7dmFsdWV9XCJgO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIG1lcmdlX3Nzcl9zdHlsZXMoc3R5bGVfYXR0cmlidXRlLCBzdHlsZV9kaXJlY3RpdmUpIHtcbiAgICBjb25zdCBzdHlsZV9vYmplY3QgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGluZGl2aWR1YWxfc3R5bGUgb2Ygc3R5bGVfYXR0cmlidXRlLnNwbGl0KCc7JykpIHtcbiAgICAgICAgY29uc3QgY29sb25faW5kZXggPSBpbmRpdmlkdWFsX3N0eWxlLmluZGV4T2YoJzonKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoMCwgY29sb25faW5kZXgpLnRyaW0oKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbmRpdmlkdWFsX3N0eWxlLnNsaWNlKGNvbG9uX2luZGV4ICsgMSkudHJpbSgpO1xuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgc3R5bGVfb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBzdHlsZV9kaXJlY3RpdmUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdHlsZV9kaXJlY3RpdmVbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgc3R5bGVfb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgc3R5bGVfb2JqZWN0W25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZV9vYmplY3Q7XG59XG5jb25zdCBlc2NhcGVkID0ge1xuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7J1xufTtcbmZ1bmN0aW9uIGVzY2FwZShodG1sKSB7XG4gICAgcmV0dXJuIFN0cmluZyhodG1sKS5yZXBsYWNlKC9bXCInJjw+XS9nLCBtYXRjaCA9PiBlc2NhcGVkW21hdGNoXSk7XG59XG5mdW5jdGlvbiBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBlc2NhcGUodmFsdWUpIDogdmFsdWU7XG59XG5mdW5jdGlvbiBlc2NhcGVfb2JqZWN0KG9iaikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICByZXN1bHRba2V5XSA9IGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUob2JqW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZGVidWcoZmlsZSwgbGluZSwgY29sdW1uLCB2YWx1ZXMpIHtcbiAgICBjb25zb2xlLmxvZyhge0BkZWJ1Z30gJHtmaWxlID8gZmlsZSArICcgJyA6ICcnfSgke2xpbmV9OiR7Y29sdW1ufSlgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2codmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgcmV0dXJuICcnO1xufVxubGV0IG9uX2Rlc3Ryb3k7XG5mdW5jdGlvbiBjcmVhdGVfc3NyX2NvbXBvbmVudChmbikge1xuICAgIGZ1bmN0aW9uICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cywgY29udGV4dCkge1xuICAgICAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgICAgIGNvbnN0ICQkID0ge1xuICAgICAgICAgICAgb25fZGVzdHJveSxcbiAgICAgICAgICAgIGNvbnRleHQ6IG5ldyBNYXAoY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgICAgICAgICAvLyB0aGVzZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGRpc2NhcmRlZFxuICAgICAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKVxuICAgICAgICB9O1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoeyAkJCB9KTtcbiAgICAgICAgY29uc3QgaHRtbCA9IGZuKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cyk7XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcjogKHByb3BzID0ge30sIHsgJCRzbG90cyA9IHt9LCBjb250ZXh0ID0gbmV3IE1hcCgpIH0gPSB7fSkgPT4ge1xuICAgICAgICAgICAgb25fZGVzdHJveSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB0aXRsZTogJycsIGhlYWQ6ICcnLCBjc3M6IG5ldyBTZXQoKSB9O1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9ICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIHt9LCAkJHNsb3RzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHJ1bl9hbGwob25fZGVzdHJveSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IEFycmF5LmZyb20ocmVzdWx0LmNzcykubWFwKGNzcyA9PiBjc3MuY29kZSkuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgIG1hcDogbnVsbCAvLyBUT0RPXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFkOiByZXN1bHQudGl0bGUgKyByZXN1bHQuaGVhZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgJCRyZW5kZXJcbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkX2F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChib29sZWFuICYmICF2YWx1ZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gYCAke25hbWV9JHt2YWx1ZSA9PT0gdHJ1ZSAmJiBib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUpID8gJycgOiBgPSR7dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGVzY2FwZSh2YWx1ZSkpIDogYFwiJHt2YWx1ZX1cImB9YH1gO1xufVxuZnVuY3Rpb24gYWRkX2NsYXNzZXMoY2xhc3Nlcykge1xuICAgIHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiAnJztcbn1cbmZ1bmN0aW9uIHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlX29iamVjdClcbiAgICAgICAgLmZpbHRlcihrZXkgPT4gc3R5bGVfb2JqZWN0W2tleV0pXG4gICAgICAgIC5tYXAoa2V5ID0+IGAke2tleX06ICR7c3R5bGVfb2JqZWN0W2tleV19O2ApXG4gICAgICAgIC5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBhZGRfc3R5bGVzKHN0eWxlX29iamVjdCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KTtcbiAgICByZXR1cm4gc3R5bGVzID8gYCBzdHlsZT1cIiR7c3R5bGVzfVwiYCA6ICcnO1xufVxuXG5mdW5jdGlvbiBiaW5kKGNvbXBvbmVudCwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbaW5kZXhdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG4gICAgYmxvY2sgJiYgYmxvY2suYygpO1xufVxuZnVuY3Rpb24gY2xhaW1fY29tcG9uZW50KGJsb2NrLCBwYXJlbnRfbm9kZXMpIHtcbiAgICBibG9jayAmJiBibG9jay5sKHBhcmVudF9ub2Rlcyk7XG59XG5mdW5jdGlvbiBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCB0YXJnZXQsIGFuY2hvciwgY3VzdG9tRWxlbWVudCkge1xuICAgIGNvbnN0IHsgZnJhZ21lbnQsIG9uX21vdW50LCBvbl9kZXN0cm95LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gb25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcbiAgICAgICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgICAgIC8vIG1vc3QgbGlrZWx5IGFzIGEgcmVzdWx0IG9mIGEgYmluZGluZyBpbml0aWFsaXNpbmdcbiAgICAgICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9tb3VudCA9IFtdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBhcHBlbmRfc3R5bGVzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQgPSB7XG4gICAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgICBjdHg6IG51bGwsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgb25fZGlzY29ubmVjdDogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKG9wdGlvbnMuY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2UsXG4gICAgICAgIHJvb3Q6IG9wdGlvbnMudGFyZ2V0IHx8IHBhcmVudF9jb21wb25lbnQuJCQucm9vdFxuICAgIH07XG4gICAgYXBwZW5kX3N0eWxlcyAmJiBhcHBlbmRfc3R5bGVzKCQkLnJvb3QpO1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgc3RhcnRfaHlkcmF0aW5nKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZW5kX2h5ZHJhdGluZygpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbl9tb3VudCB9ID0gdGhpcy4kJDtcbiAgICAgICAgICAgIHRoaXMuJCQub25fZGlzY29ubmVjdCA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy40Ni4yJyB9LCBkZXRhaWwpLCB0cnVlKSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmUnLCB7IG5vZGUgfSk7XG4gICAgZGV0YWNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2JldHdlZW5fZGV2KGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nICYmIGJlZm9yZS5uZXh0U2libGluZyAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9iZWZvcmVfZGV2KGFmdGVyKSB7XG4gICAgd2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGFmdGVyLnByZXZpb3VzU2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2FmdGVyX2RldihiZWZvcmUpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5fZGV2KG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zLCBoYXNfcHJldmVudF9kZWZhdWx0LCBoYXNfc3RvcF9wcm9wYWdhdGlvbikge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IG9wdGlvbnMgPT09IHRydWUgPyBbJ2NhcHR1cmUnXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuICAgIGlmIChoYXNfcHJldmVudF9kZWZhdWx0KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgncHJldmVudERlZmF1bHQnKTtcbiAgICBpZiAoaGFzX3N0b3BfcHJvcGFnYXRpb24pXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdzdG9wUHJvcGFnYXRpb24nKTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUFkZEV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlIH0pO1xuICAgIGVsc2VcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0UHJvcGVydHknLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIGRhdGFzZXRfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGUuZGF0YXNldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGFzZXQnLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhX2Rldih0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGEnLCB7IG5vZGU6IHRleHQsIGRhdGEgfSk7XG4gICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfYXJndW1lbnQoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdzdHJpbmcnICYmICEoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIGFyZykpIHtcbiAgICAgICAgbGV0IG1zZyA9ICd7I2VhY2h9IG9ubHkgaXRlcmF0ZXMgb3ZlciBhcnJheS1saWtlIG9iamVjdHMuJztcbiAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgYXJnICYmIFN5bWJvbC5pdGVyYXRvciBpbiBhcmcpIHtcbiAgICAgICAgICAgIG1zZyArPSAnIFlvdSBjYW4gdXNlIGEgc3ByZWFkIHRvIGNvbnZlcnQgdGhpcyBpdGVyYWJsZSBpbnRvIGFuIGFycmF5Lic7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfc2xvdHMobmFtZSwgc2xvdCwga2V5cykge1xuICAgIGZvciAoY29uc3Qgc2xvdF9rZXkgb2YgT2JqZWN0LmtleXMoc2xvdCkpIHtcbiAgICAgICAgaWYgKCF+a2V5cy5pbmRleE9mKHNsb3Rfa2V5KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGA8JHtuYW1lfT4gcmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBzbG90IFwiJHtzbG90X2tleX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMgd2l0aCBzb21lIG1pbm9yIGRldi1lbmhhbmNlbWVudHMuIFVzZWQgd2hlbiBkZXY9dHJ1ZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAoIW9wdGlvbnMudGFyZ2V0ICYmICFvcHRpb25zLiQkaW5saW5lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3RhcmdldCcgaXMgYSByZXF1aXJlZCBvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIHRvIGNyZWF0ZSBzdHJvbmdseSB0eXBlZCBTdmVsdGUgY29tcG9uZW50cy5cbiAqIFRoaXMgb25seSBleGlzdHMgZm9yIHR5cGluZyBwdXJwb3NlcyBhbmQgc2hvdWxkIGJlIHVzZWQgaW4gYC5kLnRzYCBmaWxlcy5cbiAqXG4gKiAjIyMgRXhhbXBsZTpcbiAqXG4gKiBZb3UgaGF2ZSBjb21wb25lbnQgbGlicmFyeSBvbiBucG0gY2FsbGVkIGBjb21wb25lbnQtbGlicmFyeWAsIGZyb20gd2hpY2hcbiAqIHlvdSBleHBvcnQgYSBjb21wb25lbnQgY2FsbGVkIGBNeUNvbXBvbmVudGAuIEZvciBTdmVsdGUrVHlwZVNjcmlwdCB1c2VycyxcbiAqIHlvdSB3YW50IHRvIHByb3ZpZGUgdHlwaW5ncy4gVGhlcmVmb3JlIHlvdSBjcmVhdGUgYSBgaW5kZXguZC50c2A6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50VHlwZWQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnRUeXBlZDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogYGBgXG4gKiBUeXBpbmcgdGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgSURFcyBsaWtlIFZTIENvZGUgd2l0aCB0aGUgU3ZlbHRlIGV4dGVuc2lvblxuICogdG8gcHJvdmlkZSBpbnRlbGxpc2Vuc2UgYW5kIHRvIHVzZSB0aGUgY29tcG9uZW50IGxpa2UgdGhpcyBpbiBhIFN2ZWx0ZSBmaWxlXG4gKiB3aXRoIFR5cGVTY3JpcHQ6XG4gKiBgYGBzdmVsdGVcbiAqIDxzY3JpcHQgbGFuZz1cInRzXCI+XG4gKiBcdGltcG9ydCB7IE15Q29tcG9uZW50IH0gZnJvbSBcImNvbXBvbmVudC1saWJyYXJ5XCI7XG4gKiA8L3NjcmlwdD5cbiAqIDxNeUNvbXBvbmVudCBmb289eydiYXInfSAvPlxuICogYGBgXG4gKlxuICogIyMjIyBXaHkgbm90IG1ha2UgdGhpcyBwYXJ0IG9mIGBTdmVsdGVDb21wb25lbnQoRGV2KWA/XG4gKiBCZWNhdXNlXG4gKiBgYGB0c1xuICogY2xhc3MgQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGNvbnN0IGNvbXBvbmVudDogdHlwZW9mIFN2ZWx0ZUNvbXBvbmVudCA9IEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50O1xuICogYGBgXG4gKiB3aWxsIHRocm93IGEgdHlwZSBlcnJvciwgc28gd2UgbmVlZCB0byBzZXBhcmF0ZSB0aGUgbW9yZSBzdHJpY3RseSB0eXBlZCBjbGFzcy5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50VHlwZWQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnREZXYge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AgZGV0ZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IEh0bWxUYWcsIEh0bWxUYWdIeWRyYXRpb24sIFN2ZWx0ZUNvbXBvbmVudCwgU3ZlbHRlQ29tcG9uZW50RGV2LCBTdmVsdGVDb21wb25lbnRUeXBlZCwgU3ZlbHRlRWxlbWVudCwgYWN0aW9uX2Rlc3Ryb3llciwgYWRkX2F0dHJpYnV0ZSwgYWRkX2NsYXNzZXMsIGFkZF9mbHVzaF9jYWxsYmFjaywgYWRkX2xvY2F0aW9uLCBhZGRfcmVuZGVyX2NhbGxiYWNrLCBhZGRfcmVzaXplX2xpc3RlbmVyLCBhZGRfc3R5bGVzLCBhZGRfdHJhbnNmb3JtLCBhZnRlclVwZGF0ZSwgYXBwZW5kLCBhcHBlbmRfZGV2LCBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldCwgYXBwZW5kX2h5ZHJhdGlvbiwgYXBwZW5kX2h5ZHJhdGlvbl9kZXYsIGFwcGVuZF9zdHlsZXMsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGF0dHJpYnV0ZV90b19vYmplY3QsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX2h0bWxfdGFnLCBjbGFpbV9zcGFjZSwgY2xhaW1fc3ZnX2VsZW1lbnQsIGNsYWltX3RleHQsIGNsZWFyX2xvb3BzLCBjb21wb25lbnRfc3Vic2NyaWJlLCBjb21wdXRlX3Jlc3RfcHJvcHMsIGNvbXB1dGVfc2xvdHMsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgY3JlYXRlX2FuaW1hdGlvbiwgY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbiwgY3JlYXRlX2NvbXBvbmVudCwgY3JlYXRlX2luX3RyYW5zaXRpb24sIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbiwgY3JlYXRlX3Nsb3QsIGNyZWF0ZV9zc3JfY29tcG9uZW50LCBjdXJyZW50X2NvbXBvbmVudCwgY3VzdG9tX2V2ZW50LCBkYXRhc2V0X2RldiwgZGVidWcsIGRlc3Ryb3lfYmxvY2ssIGRlc3Ryb3lfY29tcG9uZW50LCBkZXN0cm95X2VhY2gsIGRldGFjaCwgZGV0YWNoX2FmdGVyX2RldiwgZGV0YWNoX2JlZm9yZV9kZXYsIGRldGFjaF9iZXR3ZWVuX2RldiwgZGV0YWNoX2RldiwgZGlydHlfY29tcG9uZW50cywgZGlzcGF0Y2hfZGV2LCBlYWNoLCBlbGVtZW50LCBlbGVtZW50X2lzLCBlbXB0eSwgZW5kX2h5ZHJhdGluZywgZXNjYXBlLCBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlLCBlc2NhcGVfb2JqZWN0LCBlc2NhcGVkLCBleGNsdWRlX2ludGVybmFsX3Byb3BzLCBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2ssIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIGZpeF9wb3NpdGlvbiwgZmx1c2gsIGdldEFsbENvbnRleHRzLCBnZXRDb250ZXh0LCBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUsIGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlLCBnZXRfY3VycmVudF9jb21wb25lbnQsIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMsIGdldF9yb290X2Zvcl9zdHlsZSwgZ2V0X3Nsb3RfY2hhbmdlcywgZ2V0X3NwcmVhZF9vYmplY3QsIGdldF9zcHJlYWRfdXBkYXRlLCBnZXRfc3RvcmVfdmFsdWUsIGdsb2JhbHMsIGdyb3VwX291dHJvcywgaGFuZGxlX3Byb21pc2UsIGhhc0NvbnRleHQsIGhhc19wcm9wLCBpZGVudGl0eSwgaW5pdCwgaW5zZXJ0LCBpbnNlcnRfZGV2LCBpbnNlcnRfaHlkcmF0aW9uLCBpbnNlcnRfaHlkcmF0aW9uX2RldiwgaW50cm9zLCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciwgaXNfY2xpZW50LCBpc19jcm9zc29yaWdpbiwgaXNfZW1wdHksIGlzX2Z1bmN0aW9uLCBpc19wcm9taXNlLCBsaXN0ZW4sIGxpc3Rlbl9kZXYsIGxvb3AsIGxvb3BfZ3VhcmQsIG1lcmdlX3Nzcl9zdHlsZXMsIG1pc3NpbmdfY29tcG9uZW50LCBtb3VudF9jb21wb25lbnQsIG5vb3AsIG5vdF9lcXVhbCwgbm93LCBudWxsX3RvX2VtcHR5LCBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzLCBvbkRlc3Ryb3ksIG9uTW91bnQsIG9uY2UsIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBwcmV2ZW50X2RlZmF1bHQsIHByb3BfZGV2LCBxdWVyeV9zZWxlY3Rvcl9hbGwsIHJhZiwgcnVuLCBydW5fYWxsLCBzYWZlX25vdF9lcXVhbCwgc2NoZWR1bGVfdXBkYXRlLCBzZWxlY3RfbXVsdGlwbGVfdmFsdWUsIHNlbGVjdF9vcHRpb24sIHNlbGVjdF9vcHRpb25zLCBzZWxlY3RfdmFsdWUsIHNlbGYsIHNldENvbnRleHQsIHNldF9hdHRyaWJ1dGVzLCBzZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXN0b21fZWxlbWVudF9kYXRhLCBzZXRfZGF0YSwgc2V0X2RhdGFfZGV2LCBzZXRfaW5wdXRfdHlwZSwgc2V0X2lucHV0X3ZhbHVlLCBzZXRfbm93LCBzZXRfcmFmLCBzZXRfc3RvcmVfdmFsdWUsIHNldF9zdHlsZSwgc2V0X3N2Z19hdHRyaWJ1dGVzLCBzcGFjZSwgc3ByZWFkLCBzcmNfdXJsX2VxdWFsLCBzdGFydF9oeWRyYXRpbmcsIHN0b3BfcHJvcGFnYXRpb24sIHN1YnNjcmliZSwgc3ZnX2VsZW1lbnQsIHRleHQsIHRpY2ssIHRpbWVfcmFuZ2VzX3RvX2FycmF5LCB0b19udW1iZXIsIHRvZ2dsZV9jbGFzcywgdHJhbnNpdGlvbl9pbiwgdHJhbnNpdGlvbl9vdXQsIHRydXN0ZWQsIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2gsIHVwZGF0ZV9rZXllZF9lYWNoLCB1cGRhdGVfc2xvdCwgdXBkYXRlX3Nsb3RfYmFzZSwgdmFsaWRhdGVfY29tcG9uZW50LCB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50LCB2YWxpZGF0ZV9lYWNoX2tleXMsIHZhbGlkYXRlX3Nsb3RzLCB2YWxpZGF0ZV9zdG9yZSwgeGxpbmtfYXR0ciB9O1xuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IGNvcHkgZnJvbSBcImZhc3QtY29weVwiO1xuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50LCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBDYWxlbmRhciB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IHsgREVGQVVMVF9DQUxFTkRBUiB9IGZyb20gXCJzcmMvbWFpblwiO1xuICAgIGltcG9ydCB0eXBlIEZhbnRhc3lDYWxlbmRhciBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgeyBDYWxlbmRhclByZXNldE1vZGFsIH0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IGZseSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IERldGFpbHMgZnJvbSBcIi4vVXRpbGl0aWVzL0RldGFpbHMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IERhdGVGaWVsZHMgZnJvbSBcIi4vVXRpbGl0aWVzL0RhdGVGaWVsZHMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEluZm8gZnJvbSBcIi4vQ29udGFpbmVycy9JbmZvLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBXZWVrZGF5Q29udGFpbmVyIGZyb20gXCIuL0NvbnRhaW5lcnMvV2Vla2RheUNvbnRhaW5lci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTW9udGhDb250YWluZXIgZnJvbSBcIi4vQ29udGFpbmVycy9Nb250aENvbnRhaW5lci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgWWVhckNvbnRhaW5lciBmcm9tIFwiLi9Db250YWluZXJzL1llYXJDb250YWluZXIuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEV2ZW50Q29udGFpbmVyIGZyb20gXCIuL0NvbnRhaW5lcnMvRXZlbnRDb250YWluZXIuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IENhdGVnb3J5Q29udGFpbmVyIGZyb20gXCIuL0NvbnRhaW5lcnMvQ2F0ZWdvcnlDb250YWluZXIuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IE1vb25Db250YWluZXIgZnJvbSBcIi4vQ29udGFpbmVycy9Nb29uQ29udGFpbmVyLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IGxvZyB9IGZyb20gXCJjb25zb2xlXCI7XG5cbiAgICBsZXQgcmVhZHkgPSBmYWxzZTtcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgY3JlYXRvcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIHdpZHRoID0gY3JlYXRvci5jbGllbnRXaWR0aDtcbiAgICAgICAgcmVhZHkgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGV4cG9ydCBsZXQgY2FsZW5kYXI6IENhbGVuZGFyO1xuICAgICQ6IHdpbmRvdy5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgIGV4cG9ydCBsZXQgcGx1Z2luOiBGYW50YXN5Q2FsZW5kYXI7XG5cbiAgICBjb25zdCBiYWNrID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJsZWZ0LWFycm93LXdpdGgtdGFpbFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJTYXZlIGFuZCBleGl0XCIpO1xuICAgIH07XG4gICAgY29uc3QgY2FuY2VsID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJFeGl0IHdpdGhvdXQgc2F2aW5nXCIpO1xuICAgIH07XG4gICAgY29uc3QgcHJlc2V0ID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXNldEVsID0gbm9kZS5jcmVhdGVEaXYoXCJmYW50YXN5LWNhbGVuZGFyLWFwcGx5LXByZXNldFwiKTtcbiAgICAgICAgbmV3IFNldHRpbmcocHJlc2V0RWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkFwcGx5IFByZXNldFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJBcHBseSBhIGNvbW1vbiBmYW50YXN5IGNhbGVuZGFyIGFzIGEgcHJlc2V0LlwiKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgIGIuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCJDaG9vc2UgUHJlc2V0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENhbGVuZGFyUHJlc2V0TW9kYWwocGx1Z2luLmFwcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbW9kYWwuc2F2ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY29weShtb2RhbC5wcmVzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogY2FsZW5kYXIuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxlbmRhcj8ubmFtZSA9PSBcIkdyZWdvcmlhbiBDYWxlbmRhclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5jdXJyZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogdG9kYXkuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiB0b2RheS5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5OiB0b2RheS5nZXREYXRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBpbmZvID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwiaW5mb1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IHdlZWtzID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwiaW5mb1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IG1vbnRocyA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge307XG4gICAgY29uc3QgeWVhcnMgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHt9O1xuICAgIGNvbnN0IGRhdGUgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHt9O1xuICAgIGNvbnN0IGV2ZW50cyA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge307XG4gICAgY29uc3QgY2F0cyA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge307XG4gICAgY29uc3QgbW9vbnMgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJmYy1tb29uXCIpO1xuICAgIH07XG4gICAgbGV0IHk6IG51bWJlcjtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiZmFudGFzeS1jYWxlbmRhci1jcmVhdG9yXCIgYmluZDp0aGlzPXtjcmVhdG9yfT5cbiAgICB7I2lmIHJlYWR5fVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cImluaGVyaXRcIlxuICAgICAgICAgICAgdHJhbnNpdGlvbjpmbHk9e3sgeDogd2lkdGggfX1cbiAgICAgICAgICAgIG9uOmludHJvZW5kPXsoKSA9PiBkaXNwYXRjaChcImZsb3duXCIpfVxuICAgICAgICAgICAgb246b3V0cm9lbmQ9eygpID0+IGRpc3BhdGNoKFwiZXhpdFwiKX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1uYXZcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJiYWNrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gKHJlYWR5ID0gZmFsc2UpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNhbmNlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2U6Y2FuY2VsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gKHJlYWR5ID0gZmFsc2UpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cImZhbnRhc3ktY2FsZW5kYXItY3JlYXRvci1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgQ2FsZW5kYXIgQ3JlYXRvclxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgdXNlOnByZXNldCAvPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFudGFzeS1jcmVhdG9yLWFwcFwiXG4gICAgICAgICAgICAgICAgb246c2Nyb2xsPXsoZXZ0KSA9PiBjb25zb2xlLmxvZyhldnQpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz1cImxlZnQtbmF2XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOmluZm8gLz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIgY2xpY2thYmxlLWljb25cIj5XPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIiBjbGlja2FibGUtaWNvblwiPk08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiIGNsaWNrYWJsZS1pY29uXCI+WTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIgY2xpY2thYmxlLWljb25cIj5EPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIiBjbGlja2FibGUtaWNvblwiPkU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiIGNsaWNrYWJsZS1pY29uXCI+QzwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB1c2U6bW9vbnMgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+XG4gICAgICAgICAgICAgICAgPERldGFpbHMgbmFtZT17XCJCYXNpYyBJbmZvXCJ9PlxuICAgICAgICAgICAgICAgICAgICA8SW5mbyB7Y2FsZW5kYXJ9IC8+XG4gICAgICAgICAgICAgICAgPC9EZXRhaWxzPlxuICAgICAgICAgICAgICAgIDxEZXRhaWxzIG5hbWU9e1wiV2Vla2RheXNcIn0+XG4gICAgICAgICAgICAgICAgICAgIDxXZWVrZGF5Q29udGFpbmVyIHtjYWxlbmRhcn0gLz5cbiAgICAgICAgICAgICAgICA8L0RldGFpbHM+XG4gICAgICAgICAgICAgICAgPERldGFpbHMgbmFtZT17XCJNb250aHNcIn0+XG4gICAgICAgICAgICAgICAgICAgIDxNb250aENvbnRhaW5lciB7Y2FsZW5kYXJ9IC8+XG4gICAgICAgICAgICAgICAgPC9EZXRhaWxzPlxuICAgICAgICAgICAgICAgIDxEZXRhaWxzIG5hbWU9e1wiWWVhcnNcIn0+XG4gICAgICAgICAgICAgICAgICAgIDxZZWFyQ29udGFpbmVyIHtjYWxlbmRhcn0gYXBwPXtwbHVnaW4uYXBwfSAvPlxuICAgICAgICAgICAgICAgIDwvRGV0YWlscz5cblxuICAgICAgICAgICAgICAgIDxEZXRhaWxzIG5hbWU9e1wiQ3VycmVudCBEYXRlXCJ9PlxuICAgICAgICAgICAgICAgICAgICA8RGF0ZUZpZWxkcyB7Y2FsZW5kYXJ9IC8+XG4gICAgICAgICAgICAgICAgPC9EZXRhaWxzPlxuICAgICAgICAgICAgICAgIDxEZXRhaWxzIG5hbWU9e1wiRXZlbnRzXCJ9PlxuICAgICAgICAgICAgICAgICAgICA8RXZlbnRDb250YWluZXIge2NhbGVuZGFyfSAvPlxuICAgICAgICAgICAgICAgIDwvRGV0YWlscz5cbiAgICAgICAgICAgICAgICA8RGV0YWlscyBuYW1lPXtcIkNhdGVnb3JpZXNcIn0+XG4gICAgICAgICAgICAgICAgICAgIDxDYXRlZ29yeUNvbnRhaW5lciB7Y2FsZW5kYXJ9IC8+XG4gICAgICAgICAgICAgICAgPC9EZXRhaWxzPlxuICAgICAgICAgICAgICAgIDxEZXRhaWxzIG5hbWU9e1wiTW9vbnNcIn0+XG4gICAgICAgICAgICAgICAgICAgIDxNb29uQ29udGFpbmVyIHtjYWxlbmRhcn0gLz5cbiAgICAgICAgICAgICAgICA8L0RldGFpbHM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmZhbnRhc3ktY2FsZW5kYXItY3JlYXRvcixcbiAgICAuaW5oZXJpdCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgfVxuICAgIC5mYW50YXN5LWNhbGVuZGFyLWNyZWF0b3ItaGVhZGVyIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbiAgICAudG9wLW5hdiB7XG4gICAgICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgICAgIHRvcDogMHB4O1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDBweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICB9XG4gICAgLmljb25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIH1cbiAgICAvKiAuZmFudGFzeS1jcmVhdG9yLWFwcCB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7XG4gICAgICAgIGdhcDogMC4yNXJlbTtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmxlZnQtbmF2IHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH0gKi9cbiAgICAuYmFjayB7XG4gICAgICAgIHdpZHRoOiBtaW4tY29udGVudDtcbiAgICB9XG4gICAgLmJhY2sgOmdsb2JhbCguY2xpY2thYmxlLWljb24pIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgfVxuPC9zdHlsZT5cbiIsICJleHBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIgfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG4vKlxuQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZGVzbFxuRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL21hdHRkZXNsL2Vhc2VzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiovXG5mdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4ICogMS41MjU7XG4gICAgaWYgKCh0ICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgocyArIDEpICogdCAtIHMpKTtcbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMik7XG59XG5mdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xufVxuZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG59XG5mdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICAgIGNvbnN0IGEgPSA0LjAgLyAxMS4wO1xuICAgIGNvbnN0IGIgPSA4LjAgLyAxMS4wO1xuICAgIGNvbnN0IGMgPSA5LjAgLyAxMC4wO1xuICAgIGNvbnN0IGNhID0gNDM1Ni4wIC8gMzYxLjA7XG4gICAgY29uc3QgY2IgPSAzNTQ0Mi4wIC8gMTgwNS4wO1xuICAgIGNvbnN0IGNjID0gMTYwNjEuMCAvIDE4MDUuMDtcbiAgICBjb25zdCB0MiA9IHQgKiB0O1xuICAgIHJldHVybiB0IDwgYVxuICAgICAgICA/IDcuNTYyNSAqIHQyXG4gICAgICAgIDogdCA8IGJcbiAgICAgICAgICAgID8gOS4wNzUgKiB0MiAtIDkuOSAqIHQgKyAzLjRcbiAgICAgICAgICAgIDogdCA8IGNcbiAgICAgICAgICAgICAgICA/IGNhICogdDIgLSBjYiAqIHQgKyBjY1xuICAgICAgICAgICAgICAgIDogMTAuOCAqIHQgKiB0IC0gMjAuNTIgKiB0ICsgMTAuNzI7XG59XG5mdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKiAoMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQgKiAyLjApKVxuICAgICAgICA6IDAuNSAqIGJvdW5jZU91dCh0ICogMi4wIC0gMS4wKSArIDAuNTtcbn1cbmZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgICByZXR1cm4gMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQpO1xufVxuZnVuY3Rpb24gY2lyY0luT3V0KHQpIHtcbiAgICBpZiAoKHQgKj0gMikgPCAxKVxuICAgICAgICByZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpO1xuICAgIHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSk7XG59XG5mdW5jdGlvbiBjaXJjSW4odCkge1xuICAgIHJldHVybiAxLjAgLSBNYXRoLnNxcnQoMS4wIC0gdCAqIHQpO1xufVxuZnVuY3Rpb24gY2lyY091dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG59XG5mdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNSA/IDQuMCAqIHQgKiB0ICogdCA6IDAuNSAqIE1hdGgucG93KDIuMCAqIHQgLSAyLjAsIDMuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0O1xufVxuZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICAgIGNvbnN0IGYgPSB0IC0gMS4wO1xuICAgIHJldHVybiBmICogZiAqIGYgKyAxLjA7XG59XG5mdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiB0IDwgMC41XG4gICAgICAgID8gMC41ICpcbiAgICAgICAgICAgIE1hdGguc2luKCgoKzEzLjAgKiBNYXRoLlBJKSAvIDIpICogMi4wICogdCkgKlxuICAgICAgICAgICAgTWF0aC5wb3coMi4wLCAxMC4wICogKDIuMCAqIHQgLSAxLjApKVxuICAgICAgICA6IDAuNSAqXG4gICAgICAgICAgICBNYXRoLnNpbigoKC0xMy4wICogTWF0aC5QSSkgLyAyKSAqICgyLjAgKiB0IC0gMS4wICsgMS4wKSkgKlxuICAgICAgICAgICAgTWF0aC5wb3coMi4wLCAtMTAuMCAqICgyLjAgKiB0IC0gMS4wKSkgK1xuICAgICAgICAgICAgMS4wO1xufVxuZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oKDEzLjAgKiB0ICogTWF0aC5QSSkgLyAyKSAqIE1hdGgucG93KDIuMCwgMTAuMCAqICh0IC0gMS4wKSk7XG59XG5mdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gKE1hdGguc2luKCgtMTMuMCAqICh0ICsgMS4wKSAqIE1hdGguUEkpIC8gMikgKiBNYXRoLnBvdygyLjAsIC0xMC4wICogdCkgKyAxLjApO1xufVxuZnVuY3Rpb24gZXhwb0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA9PT0gMC4wIHx8IHQgPT09IDEuMFxuICAgICAgICA/IHRcbiAgICAgICAgOiB0IDwgMC41XG4gICAgICAgICAgICA/ICswLjUgKiBNYXRoLnBvdygyLjAsIDIwLjAgKiB0IC0gMTAuMClcbiAgICAgICAgICAgIDogLTAuNSAqIE1hdGgucG93KDIuMCwgMTAuMCAtIHQgKiAyMC4wKSArIDEuMDtcbn1cbmZ1bmN0aW9uIGV4cG9Jbih0KSB7XG4gICAgcmV0dXJuIHQgPT09IDAuMCA/IHQgOiBNYXRoLnBvdygyLjAsIDEwLjAgKiAodCAtIDEuMCkpO1xufVxuZnVuY3Rpb24gZXhwb091dCh0KSB7XG4gICAgcmV0dXJuIHQgPT09IDEuMCA/IHQgOiAxLjAgLSBNYXRoLnBvdygyLjAsIC0xMC4wICogdCk7XG59XG5mdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICAgIHQgLz0gMC41O1xuICAgIGlmICh0IDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqIHQgKiB0O1xuICAgIHQtLTtcbiAgICByZXR1cm4gLTAuNSAqICh0ICogKHQgLSAyKSAtIDEpO1xufVxuZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG59XG5mdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgICByZXR1cm4gLXQgKiAodCAtIDIuMCk7XG59XG5mdW5jdGlvbiBxdWFydEluT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNVxuICAgICAgICA/ICs4LjAgKiBNYXRoLnBvdyh0LCA0LjApXG4gICAgICAgIDogLTguMCAqIE1hdGgucG93KHQgLSAxLjAsIDQuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBxdWFydEluKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCwgNC4wKTtcbn1cbmZ1bmN0aW9uIHF1YXJ0T3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCAtIDEuMCwgMy4wKSAqICgxLjAgLSB0KSArIDEuMDtcbn1cbmZ1bmN0aW9uIHF1aW50SW5PdXQodCkge1xuICAgIGlmICgodCAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0ICogdDtcbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xufVxuZnVuY3Rpb24gcXVpbnRJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdCAqIHQgKiB0O1xufVxuZnVuY3Rpb24gcXVpbnRPdXQodCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogdCAqIHQgKiB0ICsgMTtcbn1cbmZ1bmN0aW9uIHNpbmVJbk91dCh0KSB7XG4gICAgcmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQpIC0gMSk7XG59XG5mdW5jdGlvbiBzaW5lSW4odCkge1xuICAgIGNvbnN0IHYgPSBNYXRoLmNvcyh0ICogTWF0aC5QSSAqIDAuNSk7XG4gICAgaWYgKE1hdGguYWJzKHYpIDwgMWUtMTQpXG4gICAgICAgIHJldHVybiAxO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDEgLSB2O1xufVxuZnVuY3Rpb24gc2luZU91dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc2luKCh0ICogTWF0aC5QSSkgLyAyKTtcbn1cblxuZXhwb3J0IHsgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQsIGJvdW5jZUluLCBib3VuY2VJbk91dCwgYm91bmNlT3V0LCBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCwgY3ViaWNJbiwgY3ViaWNJbk91dCwgY3ViaWNPdXQsIGVsYXN0aWNJbiwgZWxhc3RpY0luT3V0LCBlbGFzdGljT3V0LCBleHBvSW4sIGV4cG9Jbk91dCwgZXhwb091dCwgcXVhZEluLCBxdWFkSW5PdXQsIHF1YWRPdXQsIHF1YXJ0SW4sIHF1YXJ0SW5PdXQsIHF1YXJ0T3V0LCBxdWludEluLCBxdWludEluT3V0LCBxdWludE91dCwgc2luZUluLCBzaW5lSW5PdXQsIHNpbmVPdXQgfTtcbiIsICJpbXBvcnQgeyBjdWJpY0luT3V0LCBsaW5lYXIsIGN1YmljT3V0IH0gZnJvbSAnLi4vZWFzaW5nL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc19mdW5jdGlvbiwgYXNzaWduIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXgubWpzJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxuXG5mdW5jdGlvbiBibHVyKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNJbk91dCwgYW1vdW50ID0gNSwgb3BhY2l0eSA9IDAgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRhcmdldF9vcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgZiA9IHN0eWxlLmZpbHRlciA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS5maWx0ZXI7XG4gICAgY29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKF90LCB1KSA9PiBgb3BhY2l0eTogJHt0YXJnZXRfb3BhY2l0eSAtIChvZCAqIHUpfTsgZmlsdGVyOiAke2Z9IGJsdXIoJHt1ICogYW1vdW50fXB4KTtgXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZhZGUobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBsaW5lYXIgfSA9IHt9KSB7XG4gICAgY29uc3QgbyA9ICtnZXRDb21wdXRlZFN0eWxlKG5vZGUpLm9wYWNpdHk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogdCA9PiBgb3BhY2l0eTogJHt0ICogb31gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZseShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCB4ID0gMCwgeSA9IDAsIG9wYWNpdHkgPSAwIH0gPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgY29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKHQsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgkeygxIC0gdCkgKiB4fXB4LCAkeygxIC0gdCkgKiB5fXB4KTtcblx0XHRcdG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX1gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNsaWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUZsb2F0KHN0eWxlLmhlaWdodCk7XG4gICAgY29uc3QgcGFkZGluZ190b3AgPSBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdUb3ApO1xuICAgIGNvbnN0IHBhZGRpbmdfYm90dG9tID0gcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nQm90dG9tKTtcbiAgICBjb25zdCBtYXJnaW5fdG9wID0gcGFyc2VGbG9hdChzdHlsZS5tYXJnaW5Ub3ApO1xuICAgIGNvbnN0IG1hcmdpbl9ib3R0b20gPSBwYXJzZUZsb2F0KHN0eWxlLm1hcmdpbkJvdHRvbSk7XG4gICAgY29uc3QgYm9yZGVyX3RvcF93aWR0aCA9IHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpO1xuICAgIGNvbnN0IGJvcmRlcl9ib3R0b21fd2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiB0ID0+ICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICAgICAgICAgYG9wYWNpdHk6ICR7TWF0aC5taW4odCAqIDIwLCAxKSAqIG9wYWNpdHl9O2AgK1xuICAgICAgICAgICAgYGhlaWdodDogJHt0ICogaGVpZ2h0fXB4O2AgK1xuICAgICAgICAgICAgYHBhZGRpbmctdG9wOiAke3QgKiBwYWRkaW5nX3RvcH1weDtgICtcbiAgICAgICAgICAgIGBwYWRkaW5nLWJvdHRvbTogJHt0ICogcGFkZGluZ19ib3R0b219cHg7YCArXG4gICAgICAgICAgICBgbWFyZ2luLXRvcDogJHt0ICogbWFyZ2luX3RvcH1weDtgICtcbiAgICAgICAgICAgIGBtYXJnaW4tYm90dG9tOiAke3QgKiBtYXJnaW5fYm90dG9tfXB4O2AgK1xuICAgICAgICAgICAgYGJvcmRlci10b3Atd2lkdGg6ICR7dCAqIGJvcmRlcl90b3Bfd2lkdGh9cHg7YCArXG4gICAgICAgICAgICBgYm9yZGVyLWJvdHRvbS13aWR0aDogJHt0ICogYm9yZGVyX2JvdHRvbV93aWR0aH1weDtgXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNjYWxlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQsIHN0YXJ0ID0gMCwgb3BhY2l0eSA9IDAgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRhcmdldF9vcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICBjb25zdCBzZCA9IDEgLSBzdGFydDtcbiAgICBjb25zdCBvZCA9IHRhcmdldF9vcGFjaXR5ICogKDEgLSBvcGFjaXR5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiAoX3QsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHNjYWxlKCR7MSAtIChzZCAqIHUpfSk7XG5cdFx0XHRvcGFjaXR5OiAke3RhcmdldF9vcGFjaXR5IC0gKG9kICogdSl9XG5cdFx0YFxuICAgIH07XG59XG5mdW5jdGlvbiBkcmF3KG5vZGUsIHsgZGVsYXkgPSAwLCBzcGVlZCwgZHVyYXRpb24sIGVhc2luZyA9IGN1YmljSW5PdXQgfSA9IHt9KSB7XG4gICAgbGV0IGxlbiA9IG5vZGUuZ2V0VG90YWxMZW5ndGgoKTtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnN0cm9rZUxpbmVjYXAgIT09ICdidXR0Jykge1xuICAgICAgICBsZW4gKz0gcGFyc2VJbnQoc3R5bGUuc3Ryb2tlV2lkdGgpO1xuICAgIH1cbiAgICBpZiAoZHVyYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoc3BlZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSA4MDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IGxlbiAvIHNwZWVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uKGxlbik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6ICh0LCB1KSA9PiBgc3Ryb2tlLWRhc2hhcnJheTogJHt0ICogbGVufSAke3UgKiBsZW59YFxuICAgIH07XG59XG5mdW5jdGlvbiBjcm9zc2ZhZGUoX2EpIHtcbiAgICB2YXIgeyBmYWxsYmFjayB9ID0gX2EsIGRlZmF1bHRzID0gX19yZXN0KF9hLCBbXCJmYWxsYmFja1wiXSk7XG4gICAgY29uc3QgdG9fcmVjZWl2ZSA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCB0b19zZW5kID0gbmV3IE1hcCgpO1xuICAgIGZ1bmN0aW9uIGNyb3NzZmFkZShmcm9tLCBub2RlLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gZCA9PiBNYXRoLnNxcnQoZCkgKiAzMCwgZWFzaW5nID0gY3ViaWNPdXQgfSA9IGFzc2lnbihhc3NpZ24oe30sIGRlZmF1bHRzKSwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBkeCA9IGZyb20ubGVmdCAtIHRvLmxlZnQ7XG4gICAgICAgIGNvbnN0IGR5ID0gZnJvbS50b3AgLSB0by50b3A7XG4gICAgICAgIGNvbnN0IGR3ID0gZnJvbS53aWR0aCAvIHRvLndpZHRoO1xuICAgICAgICBjb25zdCBkaCA9IGZyb20uaGVpZ2h0IC8gdG8uaGVpZ2h0O1xuICAgICAgICBjb25zdCBkID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBjb25zdCBvcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWxheSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBpc19mdW5jdGlvbihkdXJhdGlvbikgPyBkdXJhdGlvbihkKSA6IGR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzaW5nLFxuICAgICAgICAgICAgY3NzOiAodCwgdSkgPT4gYFxuXHRcdFx0XHRvcGFjaXR5OiAke3QgKiBvcGFjaXR5fTtcblx0XHRcdFx0dHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG5cdFx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke3UgKiBkeH1weCwke3UgKiBkeX1weCkgc2NhbGUoJHt0ICsgKDEgLSB0KSAqIGR3fSwgJHt0ICsgKDEgLSB0KSAqIGRofSk7XG5cdFx0XHRgXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zaXRpb24oaXRlbXMsIGNvdW50ZXJwYXJ0cywgaW50cm8pIHtcbiAgICAgICAgcmV0dXJuIChub2RlLCBwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIGl0ZW1zLnNldChwYXJhbXMua2V5LCB7XG4gICAgICAgICAgICAgICAgcmVjdDogbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb3VudGVycGFydHMuaGFzKHBhcmFtcy5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVjdCB9ID0gY291bnRlcnBhcnRzLmdldChwYXJhbXMua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlcnBhcnRzLmRlbGV0ZShwYXJhbXMua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyb3NzZmFkZShyZWN0LCBub2RlLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbm9kZSBpcyBkaXNhcHBlYXJpbmcgYWx0b2dldGhlclxuICAgICAgICAgICAgICAgIC8vIChpLmUuIHdhc24ndCBjbGFpbWVkIGJ5IHRoZSBvdGhlciBsaXN0KVxuICAgICAgICAgICAgICAgIC8vIHRoZW4gd2UgbmVlZCB0byBzdXBwbHkgYW4gb3V0cm9cbiAgICAgICAgICAgICAgICBpdGVtcy5kZWxldGUocGFyYW1zLmtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrICYmIGZhbGxiYWNrKG5vZGUsIHBhcmFtcywgaW50cm8pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdHJhbnNpdGlvbih0b19zZW5kLCB0b19yZWNlaXZlLCBmYWxzZSksXG4gICAgICAgIHRyYW5zaXRpb24odG9fcmVjZWl2ZSwgdG9fc2VuZCwgdHJ1ZSlcbiAgICBdO1xufVxuXG5leHBvcnQgeyBibHVyLCBjcm9zc2ZhZGUsIGRyYXcsIGZhZGUsIGZseSwgc2NhbGUsIHNsaWRlIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbiAgICBleHBvcnQgbGV0IG9wZW4gPSB0cnVlO1xuICAgIGV4cG9ydCBsZXQgbmFtZTogc3RyaW5nO1xuICAgIGNvbnN0IGRldGFpbHMgPSAobm9kZTogSFRNTERldGFpbHNFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmIChvcGVuKSBub2RlLnNldEF0dHIoXCJvcGVuXCIsIFwib3BlblwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHN1bW1hcnkgPSAobm9kZTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IFNldHRpbmcobm9kZSkuc2V0SGVhZGluZygpLnNldE5hbWUobmFtZSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGV0YWlscyBjbGFzcz1cImZhbnRhc3ktY2FsZW5kYXItbmVzdGVkLXNldHRpbmdzXCIgdXNlOmRldGFpbHM+XG4gICAgPHN1bW1hcnk+XG4gICAgICAgIDxkaXYgdXNlOnN1bW1hcnkgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbGxhcHNlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhhbmRsZVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvc3VtbWFyeT5cbiAgICA8c2xvdCAvPlxuPC9kZXRhaWxzPlxuXG48c3R5bGU+XG4gICAgc3VtbWFyeSB7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDFyZW07XG4gICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMXJlbTtcbiAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMXJlbTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgfVxuXG4gICAgc3VtbWFyeTo6LXdlYmtpdC1kZXRhaWxzLW1hcmtlcixcbiAgICBzdW1tYXJ5OjptYXJrZXIge1xuICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gICAgfVxuICAgIC5jb2xsYXBzZXIge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICByaWdodDogOHB4O1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgfVxuXG4gICAgLmhhbmRsZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4yNXM7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICAtd2Via2l0LW1hc2stc2l6ZTogY29udGFpbjtcbiAgICAgICAgbWFzay1zaXplOiBjb250YWluO1xuICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWFkbW9uaXRpb24tZGV0YWlscy1pY29uKTtcbiAgICAgICAgbWFzay1pbWFnZTogdmFyKC0tYWRtb25pdGlvbi1kZXRhaWxzLWljb24pO1xuICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuICAgIGRldGFpbHNbb3Blbl0gLmhhbmRsZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgRHJvcGRvd25Db21wb25lbnQsIFNldHRpbmcsIFRleHRDb21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuICAgIGltcG9ydCB0eXBlIHsgQ2FsZW5kYXIgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuXG4gICAgZXhwb3J0IGxldCBjYWxlbmRhcjogQ2FsZW5kYXI7XG5cbiAgICAkOiBjdXJyZW50ID0gY2FsZW5kYXIuY3VycmVudDtcblxuICAgIGNvbnN0IGRheSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBsYWJlbCA9IG5vZGUuY3JlYXRlRWwoXCJsYWJlbFwiLCB7IHRleHQ6IFwiRGF5XCIgfSk7XG4gICAgICAgIG5ldyBUZXh0Q29tcG9uZW50KG5vZGUpLnNldFBsYWNlaG9sZGVyKFwiRGF5XCIpO1xuICAgIH07XG4gICAgY29uc3QgbW9udGggPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBub2RlLmNyZWF0ZUVsKFwibGFiZWxcIiwgeyB0ZXh0OiBcIk1vbnRoXCIgfSk7XG4gICAgICAgIG5ldyBEcm9wZG93bkNvbXBvbmVudChub2RlKTtcbiAgICB9O1xuICAgIGNvbnN0IHllYXIgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBub2RlLmNyZWF0ZUVsKFwibGFiZWxcIiwgeyB0ZXh0OiBcIlllYXJcIiB9KTtcbiAgICAgICAgbmV3IFRleHRDb21wb25lbnQobm9kZSkuc2V0UGxhY2Vob2xkZXIoXCJZZWFyXCIpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZC1jb250YWluZXIgc2V0dGluZy1pdGVtXCI+XG4gICAgPGRpdiBjbGFzcz1cImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZFwiIHVzZTpkYXkgLz5cbiAgICA8ZGl2IGNsYXNzPVwiZmFudGFzeS1jYWxlbmRhci1kYXRlLWZpZWxkXCIgdXNlOm1vbnRoIC8+XG4gICAgPGRpdiBjbGFzcz1cImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZFwiIHVzZTp5ZWFyIC8+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5mYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGQtY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgICAgICBib3JkZXI6IDA7XG4gICAgfVxuICAgIC5mYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGQge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICAgICAgIGZsZXg6IDEgMSAwO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCB2YWx1ZTogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgbmFtZTogc3RyaW5nO1xuXG4gICAgZXhwb3J0IGxldCBwbGFjZWhvbGRlciA9IG5hbWU7XG4gICAgZXhwb3J0IGxldCBjbHMgPSBcIlwiO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ0ZXh0LWFyZWEtY29tcG9uZW50IHNldHRpbmctaXRlbVwiIGNsYXNzOmNscz5cbiAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sIC0tPlxuICAgIDxsYWJlbD57bmFtZX08L2xhYmVsPlxuICAgIDx0ZXh0YXJlYVxuICAgICAgICBzcGVsbGNoZWNrPVwiZmFsc2VcIlxuICAgICAgICB7cGxhY2Vob2xkZXJ9XG4gICAgICAgIGJpbmQ6dmFsdWVcbiAgICAgICAgb246Ymx1cj17KCkgPT4gZGlzcGF0Y2goXCJibHVyXCIsIHZhbHVlKX1cbiAgICAvPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAudGV4dC1hcmVhLWNvbXBvbmVudCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgICB0ZXh0YXJlYSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCB2YWx1ZTogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgbmFtZTogc3RyaW5nO1xuXG4gICAgZXhwb3J0IGxldCBkZXNjID0gXCJcIjtcblxuICAgIGV4cG9ydCBsZXQgcGxhY2Vob2xkZXIgPSBuYW1lO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJzZXR0aW5nLWl0ZW1cIj5cbiAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWluZm9cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1uYW1lXCI+e25hbWV9PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIj57ZGVzY308L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWNvbnRyb2xcIj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBzcGVsbGNoZWNrPVwiZmFsc2VcIlxuICAgICAgICAgICAge3BsYWNlaG9sZGVyfVxuICAgICAgICAgICAgYmluZDp2YWx1ZVxuICAgICAgICAgICAgb246Ymx1cj17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwiYmx1clwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBleHBvcnQgbGV0IG5hbWU6IHN0cmluZztcbiAgICBleHBvcnQgbGV0IGRlc2M6IHN0cmluZyB8IERvY3VtZW50RnJhZ21lbnQ7XG4gICAgZXhwb3J0IGxldCB2YWx1ZTogYm9vbGVhbjtcbiAgICBjb25zdCBkZXNjRWwgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbm9kZS5hcHBlbmQoZGVzYyk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtIG1vZC10b2dnbGVcIj5cbiAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWluZm9cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1uYW1lXCI+e25hbWV9PC9kaXY+XG4gICAgICAgIHsjaWYgZGVzY31cbiAgICAgICAgICAgIHsjaWYgdHlwZW9mIGRlc2MgPT0gXCJzdHJpbmdcIn1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCI+e2Rlc2N9PC9kaXY+XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiIHVzZTpkZXNjRWwgLz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1jb250cm9sXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVja2JveC1jb250YWluZXJcIiBjbGFzczppcy1lbmFibGVkPXt2YWx1ZX0gb246Y2xpY2sgLz5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBDYWxlbmRhciB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IFRleHRBcmVhQ29tcG9uZW50IGZyb20gXCIuLi9TZXR0aW5ncy9UZXh0QXJlYUNvbXBvbmVudC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVGV4dENvbXBvbmVudCBmcm9tIFwiLi4vU2V0dGluZ3MvVGV4dENvbXBvbmVudC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVG9nZ2xlQ29tcG9uZW50IGZyb20gXCIuLi9TZXR0aW5ncy9Ub2dnbGVDb21wb25lbnQuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IGNhbGVuZGFyOiBDYWxlbmRhcjtcblxuICAgICQ6IGRpc3BsYXlEYXlOdW1iZXIgPSBjYWxlbmRhci5zdGF0aWMuZGlzcGxheURheU51bWJlcjtcbiAgICAkOiBpbmNyZW1lbnREYXkgPSBjYWxlbmRhci5zdGF0aWMuaW5jcmVtZW50RGF5O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJmYW50YXN5LWNhbGVuZGFyLWluZm9cIj5cbiAgICA8VGV4dENvbXBvbmVudFxuICAgICAgICBuYW1lPXtcIkNhbGVuZGFyIE5hbWVcIn1cbiAgICAgICAgdmFsdWU9e2NhbGVuZGFyLm5hbWV9XG4gICAgICAgIG9uOmJsdXI9eyhldnQpID0+IChjYWxlbmRhci5uYW1lID0gZXZ0LmRldGFpbCl9XG4gICAgLz5cbiAgICA8VGV4dEFyZWFDb21wb25lbnRcbiAgICAgICAgbmFtZT17XCJDYWxlbmRhciBEZXNjcmlwdGlvblwifVxuICAgICAgICB2YWx1ZT17Y2FsZW5kYXIuZGVzY3JpcHRpb259XG4gICAgICAgIG9uOmJsdXI9eyhldnQpID0+IChjYWxlbmRhci5kZXNjcmlwdGlvbiA9IGV2dC5kZXRhaWwpfVxuICAgIC8+XG4gICAgPFRvZ2dsZUNvbXBvbmVudFxuICAgICAgICBuYW1lPXtcIkRpc3BsYXkgRGF5IE51bWJlclwifVxuICAgICAgICBkZXNjPXtcIkRpc3BsYXkgZGF5IG9mIHllYXIgaW4gRGF5IFZpZXdcIn1cbiAgICAgICAgdmFsdWU9e2Rpc3BsYXlEYXlOdW1iZXJ9XG4gICAgICAgIG9uOmNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBjYWxlbmRhci5zdGF0aWMuZGlzcGxheURheU51bWJlciA9XG4gICAgICAgICAgICAgICAgIWNhbGVuZGFyLnN0YXRpYy5kaXNwbGF5RGF5TnVtYmVyO1xuICAgICAgICB9fVxuICAgIC8+XG4gICAgPFRvZ2dsZUNvbXBvbmVudFxuICAgICAgICBuYW1lPXtcIkF1dG8gSW5jcmVtZW50IERheVwifVxuICAgICAgICBkZXNjPXtcIkF1dG9tYXRpY2FsbHkgaW5jcmVtZW50IHRoZSBjdXJyZW50IGRheSBldmVyeSByZWFsLXdvcmxkIGRheS5cIn1cbiAgICAgICAgdmFsdWU9e2luY3JlbWVudERheX1cbiAgICAgICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGNhbGVuZGFyLnN0YXRpYy5pbmNyZW1lbnREYXkgPSAhY2FsZW5kYXIuc3RhdGljLmluY3JlbWVudERheTtcbiAgICAgICAgfX1cbiAgICAvPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuZmFudGFzeS1jYWxlbmRhci1pbmZvIDpnbG9iYWwoLnNldHRpbmctaXRlbSkge1xuICAgICAgICBwYWRkaW5nLXRvcDogMThweDtcbiAgICB9XG4gICAgLmZhbnRhc3ktY2FsZW5kYXItaW5mbyA6Z2xvYmFsKC5mYW50YXN5LWNhbGVuZGFyLWRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uO1xuICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICB9XG4gICAgLmZhbnRhc3ktY2FsZW5kYXItaW5mb1xuICAgICAgICA6Z2xvYmFsKC5mYW50YXN5LWNhbGVuZGFyLWRlc2NyaXB0aW9uKVxuICAgICAgICA6Z2xvYmFsKHRleHRhcmVhKSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiaW1wb3J0IHsgY3ViaWNPdXQgfSBmcm9tICcuLi9lYXNpbmcvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzX2Z1bmN0aW9uIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gZmxpcChub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgY29uc3QgW294LCBveV0gPSBzdHlsZS50cmFuc2Zvcm1PcmlnaW4uc3BsaXQoJyAnKS5tYXAocGFyc2VGbG9hdCk7XG4gICAgY29uc3QgZHggPSAoZnJvbS5sZWZ0ICsgZnJvbS53aWR0aCAqIG94IC8gdG8ud2lkdGgpIC0gKHRvLmxlZnQgKyBveCk7XG4gICAgY29uc3QgZHkgPSAoZnJvbS50b3AgKyBmcm9tLmhlaWdodCAqIG95IC8gdG8uaGVpZ2h0KSAtICh0by50b3AgKyBveSk7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gKGQpID0+IE1hdGguc3FydChkKSAqIDEyMCwgZWFzaW5nID0gY3ViaWNPdXQgfSA9IHBhcmFtcztcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb246IGlzX2Z1bmN0aW9uKGR1cmF0aW9uKSA/IGR1cmF0aW9uKE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSkpIDogZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiAodCwgdSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeCA9IHUgKiBkeDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSB1ICogZHk7XG4gICAgICAgICAgICBjb25zdCBzeCA9IHQgKyB1ICogZnJvbS53aWR0aCAvIHRvLndpZHRoO1xuICAgICAgICAgICAgY29uc3Qgc3kgPSB0ICsgdSAqIGZyb20uaGVpZ2h0IC8gdG8uaGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2Zvcm06ICR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpIHNjYWxlKCR7c3h9LCAke3N5fSk7YDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IGZsaXAgfTtcbiIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0O1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICAgIGY6IEZcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuICB9XG5cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgICAgZGlkRXJyID0gZmFsc2UsXG4gICAgICBlcnI7XG4gIHJldHVybiB7XG4gICAgczogZnVuY3Rpb24gKCkge1xuICAgICAgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICB9LFxuICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH0sXG4gICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRpZEVyciA9IHRydWU7XG4gICAgICBlcnIgPSBlO1xuICAgIH0sXG4gICAgZjogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8vIGV4dGVybmFsIGV2ZW50c1xudmFyIEZJTkFMSVpFX0VWRU5UX05BTUUgPSBcImZpbmFsaXplXCI7XG52YXIgQ09OU0lERVJfRVZFTlRfTkFNRSA9IFwiY29uc2lkZXJcIjtcbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW5mb1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHRyaWdnZXJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZVxuICogQHBhcmFtIHtOb2RlfSBlbFxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEBwYXJhbSB7SW5mb30gaW5mb1xuICovXG5cbmZ1bmN0aW9uIGRpc3BhdGNoRmluYWxpemVFdmVudChlbCwgaXRlbXMsIGluZm8pIHtcbiAgZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRklOQUxJWkVfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgaW5mbzogaW5mb1xuICAgIH1cbiAgfSkpO1xufVxuLyoqXG4gKiBEaXNwYXRjaGVzIGEgY29uc2lkZXIgZXZlbnRcbiAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge0luZm99IGluZm9cbiAqL1xuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnNpZGVyRXZlbnQoZWwsIGl0ZW1zLCBpbmZvKSB7XG4gIGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KENPTlNJREVSX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgIGluZm86IGluZm9cbiAgICB9XG4gIH0pKTtcbn0gLy8gaW50ZXJuYWwgZXZlbnRzXG5cbnZhciBEUkFHR0VEX0VOVEVSRURfRVZFTlRfTkFNRSA9IFwiZHJhZ2dlZEVudGVyZWRcIjtcbnZhciBEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSA9IFwiZHJhZ2dlZExlZnRcIjtcbnZhciBEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSA9IFwiZHJhZ2dlZE92ZXJJbmRleFwiO1xudmFyIERSQUdHRURfTEVGVF9ET0NVTUVOVF9FVkVOVF9OQU1FID0gXCJkcmFnZ2VkTGVmdERvY3VtZW50XCI7XG52YXIgRFJBR0dFRF9MRUZUX1RZUEVTID0ge1xuICBMRUZUX0ZPUl9BTk9USEVSOiBcImxlZnRGb3JBbm90aGVyXCIsXG4gIE9VVFNJREVfT0ZfQU5ZOiBcIm91dHNpZGVPZkFueVwiXG59O1xuZnVuY3Rpb24gZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudEVudGVyZWRDb250YWluZXIoY29udGFpbmVyRWwsIGluZGV4T2JqLCBkcmFnZ2VkRWwpIHtcbiAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRFJBR0dFRF9FTlRFUkVEX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGluZGV4T2JqOiBpbmRleE9iaixcbiAgICAgIGRyYWdnZWRFbDogZHJhZ2dlZEVsXG4gICAgfVxuICB9KSk7XG59XG4vKipcbiAqIEBwYXJhbSBjb250YWluZXJFbCAtIHRoZSBkcm9wem9uZSB0aGUgZWxlbWVudCBsZWZ0XG4gKiBAcGFyYW0gZHJhZ2dlZEVsIC0gdGhlIGRyYWdnZWQgZWxlbWVudFxuICogQHBhcmFtIHRoZU90aGVyRHogLSB0aGUgbmV3IGRyb3B6b25lIHRoZSBlbGVtZW50IGVudGVyZWRcbiAqL1xuXG5mdW5jdGlvbiBkaXNwYXRjaERyYWdnZWRFbGVtZW50TGVmdENvbnRhaW5lckZvckFub3RoZXIoY29udGFpbmVyRWwsIGRyYWdnZWRFbCwgdGhlT3RoZXJEeikge1xuICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWwsXG4gICAgICB0eXBlOiBEUkFHR0VEX0xFRlRfVFlQRVMuTEVGVF9GT1JfQU5PVEhFUixcbiAgICAgIHRoZU90aGVyRHo6IHRoZU90aGVyRHpcbiAgICB9XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRMZWZ0Q29udGFpbmVyRm9yTm9uZShjb250YWluZXJFbCwgZHJhZ2dlZEVsKSB7XG4gIGNvbnRhaW5lckVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbCxcbiAgICAgIHR5cGU6IERSQUdHRURfTEVGVF9UWVBFUy5PVVRTSURFX09GX0FOWVxuICAgIH1cbiAgfSkpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudElzT3ZlckluZGV4KGNvbnRhaW5lckVsLCBpbmRleE9iaiwgZHJhZ2dlZEVsKSB7XG4gIGNvbnRhaW5lckVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpbmRleE9iajogaW5kZXhPYmosXG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbFxuICAgIH1cbiAgfSkpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hEcmFnZ2VkTGVmdERvY3VtZW50KGRyYWdnZWRFbCkge1xuICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRFJBR0dFRF9MRUZUX0RPQ1VNRU5UX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGRyYWdnZWRFbDogZHJhZ2dlZEVsXG4gICAgfVxuICB9KSk7XG59XG5cbnZhciBUUklHR0VSUyA9IHtcbiAgRFJBR19TVEFSVEVEOiBcImRyYWdTdGFydGVkXCIsXG4gIERSQUdHRURfRU5URVJFRDogRFJBR0dFRF9FTlRFUkVEX0VWRU5UX05BTUUsXG4gIERSQUdHRURfRU5URVJFRF9BTk9USEVSOiBcImRyYWdFbnRlcmVkQW5vdGhlclwiLFxuICBEUkFHR0VEX09WRVJfSU5ERVg6IERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FLFxuICBEUkFHR0VEX0xFRlQ6IERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLFxuICBEUkFHR0VEX0xFRlRfQUxMOiBcImRyYWdnZWRMZWZ0QWxsXCIsXG4gIERST1BQRURfSU5UT19aT05FOiBcImRyb3BwZWRJbnRvWm9uZVwiLFxuICBEUk9QUEVEX0lOVE9fQU5PVEhFUjogXCJkcm9wcGVkSW50b0Fub3RoZXJcIixcbiAgRFJPUFBFRF9PVVRTSURFX09GX0FOWTogXCJkcm9wcGVkT3V0c2lkZU9mQW55XCIsXG4gIERSQUdfU1RPUFBFRDogXCJkcmFnU3RvcHBlZFwiXG59O1xudmFyIFNPVVJDRVMgPSB7XG4gIFBPSU5URVI6IFwicG9pbnRlclwiLFxuICBLRVlCT0FSRDogXCJrZXlib2FyZFwiXG59O1xudmFyIFNIQURPV19JVEVNX01BUktFUl9QUk9QRVJUWV9OQU1FID0gXCJpc0RuZFNoYWRvd0l0ZW1cIjtcbnZhciBTSEFET1dfRUxFTUVOVF9BVFRSSUJVVEVfTkFNRSA9IFwiZGF0YS1pcy1kbmQtc2hhZG93LWl0ZW1cIjtcbnZhciBTSEFET1dfUExBQ0VIT0xERVJfSVRFTV9JRCA9IFwiaWQ6ZG5kLXNoYWRvdy1wbGFjZWhvbGRlci0wMDAwXCI7XG52YXIgRFJBR0dFRF9FTEVNRU5UX0lEID0gXCJkbmQtYWN0aW9uLWRyYWdnZWQtZWxcIjtcbnZhciBJVEVNX0lEX0tFWSA9IFwiaWRcIjtcbnZhciBhY3RpdmVEbmRab25lQ291bnQgPSAwO1xuZnVuY3Rpb24gaW5jcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpIHtcbiAgYWN0aXZlRG5kWm9uZUNvdW50Kys7XG59XG5mdW5jdGlvbiBkZWNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCkge1xuICBpZiAoYWN0aXZlRG5kWm9uZUNvdW50ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQnVnISB0cnlpbmcgdG8gZGVjcmVtZW50IHdoZW4gdGhlcmUgYXJlIG5vIGRyb3B6b25lc1wiKTtcbiAgfVxuXG4gIGFjdGl2ZURuZFpvbmVDb3VudC0tO1xufVxuLyoqXG4gKiBBbGxvd3MgdXNpbmcgYW5vdGhlciBrZXkgaW5zdGVhZCBvZiBcImlkXCIgaW4gdGhlIGl0ZW1zIGRhdGEuIFRoaXMgaXMgZ2xvYmFsIGFuZCBhcHBsaWVzIHRvIGFsbCBkbmR6b25lcy5cbiAqIEhhcyB0byBiZSBjYWxsZWQgd2hlbiB0aGVyZSBhcmUgbm8gcmVuZGVyZWQgZG5kem9uZXMgd2hhdHNvZXZlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuZXdLZXlOYW1lXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgaXQgd2FzIGNhbGxlZCB3aGVuIHRoZXJlIGFyZSByZW5kZXJlZCBkbmR6b25lcyBvciBpZiBpdCBpcyBnaXZlbiB0aGUgd3JvbmcgdHlwZSAobm90IGEgc3RyaW5nKVxuICovXG5cbmZ1bmN0aW9uIG92ZXJyaWRlSXRlbUlkS2V5TmFtZUJlZm9yZUluaXRpYWxpc2luZ0RuZFpvbmVzKG5ld0tleU5hbWUpIHtcbiAgaWYgKGFjdGl2ZURuZFpvbmVDb3VudCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW4gb25seSBvdmVycmlkZSB0aGUgaWQga2V5IGJlZm9yZSBpbml0aWFsaXNpbmcgYW55IGRuZHpvbmVcIik7XG4gIH1cblxuICBpZiAodHlwZW9mIG5ld0tleU5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpdGVtIGlkIGtleSBoYXMgdG8gYmUgYSBzdHJpbmdcIik7XG4gIH1cblxuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wib3ZlcnJpZGluZyBpdGVtIGlkIGtleSBuYW1lXCIsIG5ld0tleU5hbWVdO1xuICB9KTtcbiAgSVRFTV9JRF9LRVkgPSBuZXdLZXlOYW1lO1xufVxudmFyIGlzT25TZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiO1xudmFyIHByaW50RGVidWcgPSBmdW5jdGlvbiBwcmludERlYnVnKCkge307XG4vKipcbiAqIEFsbG93cyB0aGUgdXNlciB0byBzaG93L2hpZGUgY29uc29sZSBkZWJ1ZyBvdXRwdXRcbiAqICogQHBhcmFtIHtCb29sZWFufSBpc0RlYnVnXG4gKi9cblxuZnVuY3Rpb24gc2V0RGVidWdNb2RlKGlzRGVidWcpIHtcbiAgaWYgKGlzRGVidWcpIHtcbiAgICBwcmludERlYnVnID0gZnVuY3Rpb24gcHJpbnREZWJ1ZyhnZW5lcmF0ZU1lc3NhZ2UpIHtcbiAgICAgIHZhciBsb2dGdW5jdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY29uc29sZS5kZWJ1ZztcbiAgICAgIHZhciBtZXNzYWdlID0gZ2VuZXJhdGVNZXNzYWdlKCk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UpKSB7XG4gICAgICAgIGxvZ0Z1bmN0aW9uLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KG1lc3NhZ2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ0Z1bmN0aW9uKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcHJpbnREZWJ1ZyA9IGZ1bmN0aW9uIHByaW50RGVidWcoKSB7fTtcbiAgfVxufVxuXG4vLyBUaGlzIGlzIGJhc2VkIG9mZiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNzc0NTQzOC9ob3ctdG8tY29tcHV0ZS1nZXRib3VuZGluZ2NsaWVudHJlY3Qtd2l0aG91dC1jb25zaWRlcmluZy10cmFuc2Zvcm1zLzU3ODc2NjAxIzU3ODc2NjAxXG4vLyBJdCByZW1vdmVzIHRoZSB0cmFuc2Zvcm1zIHRoYXQgYXJlIHBvdGVudGlhbGx5IGFwcGxpZWQgYnkgdGhlIGZsaXAgYW5pbWF0aW9uc1xuXG4vKipcbiAqIEdldHMgdGhlIGJvdW5kaW5nIHJlY3QgYnV0IHJlbW92ZXMgdHJhbnNmb3JtcyAoZXg6IGZsaXAgYW5pbWF0aW9uKVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge3t0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyLCBib3R0b206IG51bWJlciwgcmlnaHQ6IG51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdE5vVHJhbnNmb3JtcyhlbCkge1xuICB2YXIgdGE7XG4gIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHggPSBzdHlsZS50cmFuc2Zvcm07XG5cbiAgaWYgKHR4KSB7XG4gICAgdmFyIHN4LCBzeSwgZHgsIGR5O1xuXG4gICAgaWYgKHR4LnN0YXJ0c1dpdGgoXCJtYXRyaXgzZChcIikpIHtcbiAgICAgIHRhID0gdHguc2xpY2UoOSwgLTEpLnNwbGl0KC8sIC8pO1xuICAgICAgc3ggPSArdGFbMF07XG4gICAgICBzeSA9ICt0YVs1XTtcbiAgICAgIGR4ID0gK3RhWzEyXTtcbiAgICAgIGR5ID0gK3RhWzEzXTtcbiAgICB9IGVsc2UgaWYgKHR4LnN0YXJ0c1dpdGgoXCJtYXRyaXgoXCIpKSB7XG4gICAgICB0YSA9IHR4LnNsaWNlKDcsIC0xKS5zcGxpdCgvLCAvKTtcbiAgICAgIHN4ID0gK3RhWzBdO1xuICAgICAgc3kgPSArdGFbM107XG4gICAgICBkeCA9ICt0YVs0XTtcbiAgICAgIGR5ID0gK3RhWzVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVjdDtcbiAgICB9XG5cbiAgICB2YXIgdG8gPSBzdHlsZS50cmFuc2Zvcm1PcmlnaW47XG4gICAgdmFyIHggPSByZWN0LnggLSBkeCAtICgxIC0gc3gpICogcGFyc2VGbG9hdCh0byk7XG4gICAgdmFyIHkgPSByZWN0LnkgLSBkeSAtICgxIC0gc3kpICogcGFyc2VGbG9hdCh0by5zbGljZSh0by5pbmRleE9mKFwiIFwiKSArIDEpKTtcbiAgICB2YXIgdyA9IHN4ID8gcmVjdC53aWR0aCAvIHN4IDogZWwub2Zmc2V0V2lkdGg7XG4gICAgdmFyIGggPSBzeSA/IHJlY3QuaGVpZ2h0IC8gc3kgOiBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgd2lkdGg6IHcsXG4gICAgICBoZWlnaHQ6IGgsXG4gICAgICB0b3A6IHksXG4gICAgICByaWdodDogeCArIHcsXG4gICAgICBib3R0b206IHkgKyBoLFxuICAgICAgbGVmdDogeFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlY3Q7XG4gIH1cbn1cbi8qKlxuICogR2V0cyB0aGUgYWJzb2x1dGUgYm91bmRpbmcgcmVjdCAoYWNjb3VudHMgZm9yIHRoZSB3aW5kb3cncyBzY3JvbGwgcG9zaXRpb24gYW5kIHJlbW92ZXMgdHJhbnNmb3JtcylcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHt7dG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHJpZ2h0OiBudW1iZXJ9fVxuICovXG5cbmZ1bmN0aW9uIGdldEFic29sdXRlUmVjdE5vVHJhbnNmb3JtcyhlbCkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nUmVjdE5vVHJhbnNmb3JtcyhlbCk7XG4gIHJldHVybiB7XG4gICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICByaWdodDogcmVjdC5yaWdodCArIHdpbmRvdy5zY3JvbGxYXG4gIH07XG59XG4vKipcbiAqIEdldHMgdGhlIGFic29sdXRlIGJvdW5kaW5nIHJlY3QgKGFjY291bnRzIGZvciB0aGUgd2luZG93J3Mgc2Nyb2xsIHBvc2l0aW9uKVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge3t0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyLCBib3R0b206IG51bWJlciwgcmlnaHQ6IG51bWJlcn19XG4gKi9cblxuZnVuY3Rpb24gZ2V0QWJzb2x1dGVSZWN0KGVsKSB7XG4gIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICByaWdodDogcmVjdC5yaWdodCArIHdpbmRvdy5zY3JvbGxYXG4gIH07XG59XG4vKipcbiAqIGZpbmRzIHRoZSBjZW50ZXIgOilcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFJlY3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3BcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBib3R0b21cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZWZ0XG4gKiBAcHJvcGVydHkge251bWJlcn0gcmlnaHRcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxuICogQHJldHVybiB7e3g6IG51bWJlciwgeTogbnVtYmVyfX1cbiAqL1xuXG5mdW5jdGlvbiBmaW5kQ2VudGVyKHJlY3QpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkgLyAyLFxuICAgIHk6IChyZWN0LnRvcCArIHJlY3QuYm90dG9tKSAvIDJcbiAgfTtcbn1cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUG9pbnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB4XG4gKiBAcHJvcGVydHkge251bWJlcn0geVxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRBXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludEJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5mdW5jdGlvbiBjYWxjRGlzdGFuY2UocG9pbnRBLCBwb2ludEIpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwb2ludEEueCAtIHBvaW50Qi54LCAyKSArIE1hdGgucG93KHBvaW50QS55IC0gcG9pbnRCLnksIDIpKTtcbn1cbi8qKlxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxuICogQHJldHVybiB7Ym9vbGVhbnxib29sZWFufVxuICovXG5cblxuZnVuY3Rpb24gaXNQb2ludEluc2lkZVJlY3QocG9pbnQsIHJlY3QpIHtcbiAgcmV0dXJuIHBvaW50LnkgPD0gcmVjdC5ib3R0b20gJiYgcG9pbnQueSA+PSByZWN0LnRvcCAmJiBwb2ludC54ID49IHJlY3QubGVmdCAmJiBwb2ludC54IDw9IHJlY3QucmlnaHQ7XG59XG4vKipcbiAqIGZpbmQgdGhlIGFic29sdXRlIGNvb3JkaW5hdGVzIG9mIHRoZSBjZW50ZXIgb2YgYSBkb20gZWxlbWVudFxuICogQHBhcmFtIGVsIHtIVE1MRWxlbWVudH1cbiAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxuICovXG5cbmZ1bmN0aW9uIGZpbmRDZW50ZXJPZkVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuIGZpbmRDZW50ZXIoZ2V0QWJzb2x1dGVSZWN0KGVsKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsQVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxCXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzQ2VudGVyT2ZBSW5zaWRlQihlbEEsIGVsQikge1xuICB2YXIgY2VudGVyT2ZBID0gZmluZENlbnRlck9mRWxlbWVudChlbEEpO1xuICB2YXIgcmVjdE9mQiA9IGdldEFic29sdXRlUmVjdE5vVHJhbnNmb3JtcyhlbEIpO1xuICByZXR1cm4gaXNQb2ludEluc2lkZVJlY3QoY2VudGVyT2ZBLCByZWN0T2ZCKTtcbn1cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxDaGlsZE5vZGV9IGVsQVxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxDaGlsZE5vZGV9IGVsQlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cbmZ1bmN0aW9uIGNhbGNEaXN0YW5jZUJldHdlZW5DZW50ZXJzKGVsQSwgZWxCKSB7XG4gIHZhciBjZW50ZXJPZkEgPSBmaW5kQ2VudGVyT2ZFbGVtZW50KGVsQSk7XG4gIHZhciBjZW50ZXJPZkIgPSBmaW5kQ2VudGVyT2ZFbGVtZW50KGVsQik7XG4gIHJldHVybiBjYWxjRGlzdGFuY2UoY2VudGVyT2ZBLCBjZW50ZXJPZkIpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIHRoZSBlbGVtZW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSB0cnVlIGlmIHRoZSBlbGVtZW50IGluIGl0cyBlbnRpcmV0eSBpcyBvZmYgc2NyZWVuIGluY2x1ZGluZyB0aGUgc2Nyb2xsYWJsZSBhcmVhICh0aGUgbm9ybWFsIGRvbSBldmVudHMgbG9vayBhdCB0aGUgbW91c2UgcmF0aGVyIHRoYW4gdGhlIGVsZW1lbnQpXG4gKi9cblxuZnVuY3Rpb24gaXNFbGVtZW50T2ZmRG9jdW1lbnQoZWwpIHtcbiAgdmFyIHJlY3QgPSBnZXRBYnNvbHV0ZVJlY3QoZWwpO1xuICByZXR1cm4gcmVjdC5yaWdodCA8IDAgfHwgcmVjdC5sZWZ0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoIHx8IHJlY3QuYm90dG9tIDwgMCB8fCByZWN0LnRvcCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XG59XG4vKipcbiAqIElmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIGVsZW1lbnQgcmV0dXJucyBpdHMgZGlzdGFuY2VzIGZyb20gdGhlIHNpZGVzLCBvdGhlcndpc2UgcmV0dXJucyBudWxsXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge251bGx8e3RvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCByaWdodDogbnVtYmVyfX1cbiAqL1xuXG5mdW5jdGlvbiBjYWxjSW5uZXJEaXN0YW5jZXNCZXR3ZWVuUG9pbnRBbmRTaWRlc09mRWxlbWVudChwb2ludCwgZWwpIHtcbiAgdmFyIHJlY3QgPSBnZXRBYnNvbHV0ZVJlY3QoZWwpO1xuXG4gIGlmICghaXNQb2ludEluc2lkZVJlY3QocG9pbnQsIHJlY3QpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogcG9pbnQueSAtIHJlY3QudG9wLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLSBwb2ludC55LFxuICAgIGxlZnQ6IHBvaW50LnggLSByZWN0LmxlZnQsXG4gICAgLy8gVE9ETyAtIGZpZ3VyZSBvdXQgd2hhdCBpcyBzbyBzcGVjaWFsIGFib3V0IHJpZ2h0ICh3aHkgdGhlIHJlY3QgaXMgdG9vIGJpZylcbiAgICByaWdodDogTWF0aC5taW4ocmVjdC5yaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSAtIHBvaW50LnhcbiAgfTtcbn1cblxudmFyIGR6VG9TaGFkb3dJbmRleFRvUmVjdDtcbi8qKlxuICogUmVzZXRzIHRoZSBjYWNoZSB0aGF0IGFsbG93cyBmb3Igc21hcnRlciBcIndvdWxkIGJlIGluZGV4XCIgcmVzb2x1dGlvbi4gU2hvdWxkIGJlIGNhbGxlZCBhZnRlciBldmVyeSBkcmFnIG9wZXJhdGlvblxuICovXG5cbmZ1bmN0aW9uIHJlc2V0SW5kZXhlc0NhY2hlKCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJyZXNldHRpbmcgaW5kZXhlcyBjYWNoZVwiO1xuICB9KTtcbiAgZHpUb1NoYWRvd0luZGV4VG9SZWN0ID0gbmV3IE1hcCgpO1xufVxucmVzZXRJbmRleGVzQ2FjaGUoKTtcbi8qKlxuICogQ2FjaGVzIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgc2hhZG93IGVsZW1lbnQgd2hlbiBpdCdzIGluIGEgY2VydGFpbiBpbmRleCBpbiBhIGNlcnRhaW4gZHJvcHpvbmUuXG4gKiBIZWxwZnVsIGluIG9yZGVyIHRvIGRldGVybWluZSBcIndvdWxkIGJlIGluZGV4XCIgbW9yZSBlZmZlY3RpdmVseVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHpcbiAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgc2hhZG93IGVsZW1lbnQgaW5kZXhcbiAqL1xuXG5mdW5jdGlvbiBjYWNoZVNoYWRvd1JlY3QoZHopIHtcbiAgdmFyIHNoYWRvd0VsSW5kZXggPSBBcnJheS5mcm9tKGR6LmNoaWxkcmVuKS5maW5kSW5kZXgoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLmdldEF0dHJpYnV0ZShTSEFET1dfRUxFTUVOVF9BVFRSSUJVVEVfTkFNRSk7XG4gIH0pO1xuXG4gIGlmIChzaGFkb3dFbEluZGV4ID49IDApIHtcbiAgICBpZiAoIWR6VG9TaGFkb3dJbmRleFRvUmVjdC5oYXMoZHopKSB7XG4gICAgICBkelRvU2hhZG93SW5kZXhUb1JlY3Quc2V0KGR6LCBuZXcgTWFwKCkpO1xuICAgIH1cblxuICAgIGR6VG9TaGFkb3dJbmRleFRvUmVjdC5nZXQoZHopLnNldChzaGFkb3dFbEluZGV4LCBnZXRBYnNvbHV0ZVJlY3ROb1RyYW5zZm9ybXMoZHouY2hpbGRyZW5bc2hhZG93RWxJbmRleF0pKTtcbiAgICByZXR1cm4gc2hhZG93RWxJbmRleDtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluZGV4XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW5kZXggLSB0aGUgd291bGQgYmUgaW5kZXhcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNQcm94aW1pdHlCYXNlZCAtIGZhbHNlIGlmIHRoZSBlbGVtZW50IGlzIGFjdHVhbGx5IG92ZXIgdGhlIGluZGV4LCB0cnVlIGlmIGl0IGlzIG5vdCBvdmVyIGl0IGJ1dCB0aGlzIGluZGV4IGlzIHRoZSBjbG9zZXN0XG4gKi9cblxuLyoqXG4gKiBGaW5kIHRoZSBpbmRleCBmb3IgdGhlIGRyYWdnZWQgZWxlbWVudCBpbiB0aGUgbGlzdCBpdCBpcyBkcmFnZ2VkIG92ZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGZsb2F0aW5nQWJvdmVFbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29sbGVjdGlvbkJlbG93RWxcbiAqIEByZXR1cm5zIHtJbmRleHxudWxsfSAtICBpZiB0aGUgZWxlbWVudCBpcyBvdmVyIHRoZSBjb250YWluZXIgdGhlIEluZGV4IG9iamVjdCBvdGhlcndpc2UgbnVsbFxuICovXG5cblxuZnVuY3Rpb24gZmluZFdvdWxkQmVJbmRleChmbG9hdGluZ0Fib3ZlRWwsIGNvbGxlY3Rpb25CZWxvd0VsKSB7XG4gIGlmICghaXNDZW50ZXJPZkFJbnNpZGVCKGZsb2F0aW5nQWJvdmVFbCwgY29sbGVjdGlvbkJlbG93RWwpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2hpbGRyZW4gPSBjb2xsZWN0aW9uQmVsb3dFbC5jaGlsZHJlbjsgLy8gdGhlIGNvbnRhaW5lciBpcyBlbXB0eSwgZmxvYXRpbmcgZWxlbWVudCBzaG91bGQgYmUgdGhlIGZpcnN0XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbmRleDogMCxcbiAgICAgIGlzUHJveGltaXR5QmFzZWQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNoYWRvd0VsSW5kZXggPSBjYWNoZVNoYWRvd1JlY3QoY29sbGVjdGlvbkJlbG93RWwpOyAvLyB0aGUgc2VhcmNoIGNvdWxkIGJlIG1vcmUgZWZmaWNpZW50IGJ1dCBrZWVwaW5nIGl0IHNpbXBsZSBmb3Igbm93XG4gIC8vIGEgcG9zc2libGUgaW1wcm92ZW1lbnQ6IHBhc3MgaW4gdGhlIGxhc3RJbmRleCBpdCB3YXMgZm91bmQgaW4gYW5kIGNoZWNrIHRoZXJlIGZpcnN0LCB0aGVuIGV4cGFuZCBmcm9tIHRoZXJlXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0NlbnRlck9mQUluc2lkZUIoZmxvYXRpbmdBYm92ZUVsLCBjaGlsZHJlbltpXSkpIHtcbiAgICAgIHZhciBjYWNoZWRTaGFkb3dSZWN0ID0gZHpUb1NoYWRvd0luZGV4VG9SZWN0Lmhhcyhjb2xsZWN0aW9uQmVsb3dFbCkgJiYgZHpUb1NoYWRvd0luZGV4VG9SZWN0LmdldChjb2xsZWN0aW9uQmVsb3dFbCkuZ2V0KGkpO1xuXG4gICAgICBpZiAoY2FjaGVkU2hhZG93UmVjdCkge1xuICAgICAgICBpZiAoIWlzUG9pbnRJbnNpZGVSZWN0KGZpbmRDZW50ZXJPZkVsZW1lbnQoZmxvYXRpbmdBYm92ZUVsKSwgY2FjaGVkU2hhZG93UmVjdCkpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXg6IHNoYWRvd0VsSW5kZXgsXG4gICAgICAgICAgICBpc1Byb3hpbWl0eUJhc2VkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIGlzUHJveGltaXR5QmFzZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyB0aGlzIGNhbiBoYXBwZW4gaWYgdGhlcmUgaXMgc3BhY2UgYXJvdW5kIHRoZSBjaGlsZHJlbiBzbyB0aGUgZmxvYXRpbmcgZWxlbWVudCBoYXNcbiAgLy9lbnRlcmVkIHRoZSBjb250YWluZXIgYnV0IG5vdCBhbnkgb2YgdGhlIGNoaWxkcmVuLCBpbiB0aGlzIGNhc2Ugd2Ugd2lsbCBmaW5kIHRoZSBuZWFyZXN0IGNoaWxkXG5cblxuICB2YXIgbWluRGlzdGFuY2VTb0ZhciA9IE51bWJlci5NQVhfVkFMVUU7XG4gIHZhciBpbmRleE9mTWluID0gdW5kZWZpbmVkOyAvLyB3ZSBhcmUgY2hlY2tpbmcgYWxsIG9mIHRoZW0gYmVjYXVzZSB3ZSBkb24ndCBrbm93IHdoZXRoZXIgd2UgYXJlIGRlYWxpbmcgd2l0aCBhIGhvcml6b250YWwgb3IgdmVydGljYWwgY29udGFpbmVyIGFuZCB3aGVyZSB0aGUgZmxvYXRpbmcgZWxlbWVudCBlbnRlcmVkIGZyb21cblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgY2hpbGRyZW4ubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIGRpc3RhbmNlID0gY2FsY0Rpc3RhbmNlQmV0d2VlbkNlbnRlcnMoZmxvYXRpbmdBYm92ZUVsLCBjaGlsZHJlbltfaV0pO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2VTb0Zhcikge1xuICAgICAgbWluRGlzdGFuY2VTb0ZhciA9IGRpc3RhbmNlO1xuICAgICAgaW5kZXhPZk1pbiA9IF9pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGluZGV4T2ZNaW4sXG4gICAgaXNQcm94aW1pdHlCYXNlZDogdHJ1ZVxuICB9O1xufVxuXG52YXIgU0NST0xMX1pPTkVfUFggPSAyNTtcbmZ1bmN0aW9uIG1ha2VTY3JvbGxlcigpIHtcbiAgdmFyIHNjcm9sbGluZ0luZm87XG5cbiAgZnVuY3Rpb24gcmVzZXRTY3JvbGxpbmcoKSB7XG4gICAgc2Nyb2xsaW5nSW5mbyA9IHtcbiAgICAgIGRpcmVjdGlvbk9iajogdW5kZWZpbmVkLFxuICAgICAgc3RlcFB4OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJlc2V0U2Nyb2xsaW5nKCk7IC8vIGRpcmVjdGlvbk9iaiB7eDogMHwxfC0xLCB5OjB8MXwtMX0gLSAxIG1lYW5zIGRvd24gaW4geSBhbmQgcmlnaHQgaW4geFxuXG4gIGZ1bmN0aW9uIHNjcm9sbENvbnRhaW5lcihjb250YWluZXJFbCkge1xuICAgIHZhciBfc2Nyb2xsaW5nSW5mbyA9IHNjcm9sbGluZ0luZm8sXG4gICAgICAgIGRpcmVjdGlvbk9iaiA9IF9zY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iaixcbiAgICAgICAgc3RlcFB4ID0gX3Njcm9sbGluZ0luZm8uc3RlcFB4O1xuXG4gICAgaWYgKGRpcmVjdGlvbk9iaikge1xuICAgICAgY29udGFpbmVyRWwuc2Nyb2xsQnkoZGlyZWN0aW9uT2JqLnggKiBzdGVwUHgsIGRpcmVjdGlvbk9iai55ICogc3RlcFB4KTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsQ29udGFpbmVyKGNvbnRhaW5lckVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VQeCkge1xuICAgIHJldHVybiBTQ1JPTExfWk9ORV9QWCAtIGRpc3RhbmNlUHg7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBwb2ludGVyIGlzIG5leHQgdG8gdGhlIHNpZGVzIG9mIHRoZSBlbGVtZW50IHRvIHNjcm9sbCwgd2lsbCB0cmlnZ2VyIHNjcm9sbGluZ1xuICAgKiBDYW4gYmUgY2FsbGVkIHJlcGVhdGVkbHkgd2l0aCB1cGRhdGVkIHBvaW50ZXIgYW5kIGVsZW1lbnRUb1Njcm9sbCB2YWx1ZXMgd2l0aG91dCBpc3N1ZXNcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSB0cnVlIGlmIHNjcm9sbGluZyB3YXMgbmVlZGVkXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2Nyb2xsSWZOZWVkZWQocG9pbnRlciwgZWxlbWVudFRvU2Nyb2xsKSB7XG4gICAgaWYgKCFlbGVtZW50VG9TY3JvbGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZGlzdGFuY2VzID0gY2FsY0lubmVyRGlzdGFuY2VzQmV0d2VlblBvaW50QW5kU2lkZXNPZkVsZW1lbnQocG9pbnRlciwgZWxlbWVudFRvU2Nyb2xsKTtcblxuICAgIGlmIChkaXN0YW5jZXMgPT09IG51bGwpIHtcbiAgICAgIHJlc2V0U2Nyb2xsaW5nKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGlzQWxyZWFkeVNjcm9sbGluZyA9ICEhc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmo7XG4gICAgdmFyIHNjcm9sbGluZ1ZlcnRpY2FsbHkgPSBmYWxzZSxcbiAgICAgICAgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5ID0gZmFsc2U7IC8vIHZlcnRpY2FsXG5cbiAgICBpZiAoZWxlbWVudFRvU2Nyb2xsLnNjcm9sbEhlaWdodCA+IGVsZW1lbnRUb1Njcm9sbC5jbGllbnRIZWlnaHQpIHtcbiAgICAgIGlmIChkaXN0YW5jZXMuYm90dG9tIDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nVmVydGljYWxseSA9IHRydWU7XG4gICAgICAgIHNjcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqID0ge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMVxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxpbmdJbmZvLnN0ZXBQeCA9IGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VzLmJvdHRvbSk7XG4gICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlcy50b3AgPCBTQ1JPTExfWk9ORV9QWCkge1xuICAgICAgICBzY3JvbGxpbmdWZXJ0aWNhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAtMVxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxpbmdJbmZvLnN0ZXBQeCA9IGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VzLnRvcCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNBbHJlYWR5U2Nyb2xsaW5nICYmIHNjcm9sbGluZ1ZlcnRpY2FsbHkpIHtcbiAgICAgICAgc2Nyb2xsQ29udGFpbmVyKGVsZW1lbnRUb1Njcm9sbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gaG9yaXpvbnRhbFxuXG5cbiAgICBpZiAoZWxlbWVudFRvU2Nyb2xsLnNjcm9sbFdpZHRoID4gZWxlbWVudFRvU2Nyb2xsLmNsaWVudFdpZHRoKSB7XG4gICAgICBpZiAoZGlzdGFuY2VzLnJpZ2h0IDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogMSxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH07XG4gICAgICAgIHNjcm9sbGluZ0luZm8uc3RlcFB4ID0gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZXMucmlnaHQpO1xuICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZXMubGVmdCA8IFNDUk9MTF9aT05FX1BYKSB7XG4gICAgICAgIHNjcm9sbGluZ0hvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgIHNjcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqID0ge1xuICAgICAgICAgIHg6IC0xLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5zdGVwUHggPSBjYWxjU2Nyb2xsU3RlcFB4KGRpc3RhbmNlcy5sZWZ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0FscmVhZHlTY3JvbGxpbmcgJiYgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5KSB7XG4gICAgICAgIHNjcm9sbENvbnRhaW5lcihlbGVtZW50VG9TY3JvbGwpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldFNjcm9sbGluZygpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2Nyb2xsSWZOZWVkZWQ6IHNjcm9sbElmTmVlZGVkLFxuICAgIHJlc2V0U2Nyb2xsaW5nOiByZXNldFNjcm9sbGluZ1xuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcob2JqZWN0KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QsIG51bGwsIDIpO1xufVxuLyoqXG4gKiBGaW5kcyB0aGUgZGVwdGggb2YgdGhlIGdpdmVuIG5vZGUgaW4gdGhlIERPTSB0cmVlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gdGhlIGRlcHRoIG9mIHRoZSBub2RlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVwdGgobm9kZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZ2V0IGRlcHRoIG9mIGEgZmFsc3kgbm9kZVwiKTtcbiAgfVxuXG4gIHJldHVybiBfZ2V0RGVwdGgobm9kZSwgMCk7XG59XG5cbmZ1bmN0aW9uIF9nZXREZXB0aChub2RlKSB7XG4gIHZhciBjb3VudFNvRmFyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gIGlmICghbm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIGNvdW50U29GYXIgLSAxO1xuICB9XG5cbiAgcmV0dXJuIF9nZXREZXB0aChub2RlLnBhcmVudEVsZW1lbnQsIGNvdW50U29GYXIgKyAxKTtcbn1cbi8qKlxuICogQSBzaW1wbGUgdXRpbCB0byBzaGFsbG93IGNvbXBhcmUgb2JqZWN0cyBxdWlja2x5LCBpdCBkb2Vzbid0IHZhbGlkYXRlIHRoZSBhcmd1bWVudHMgc28gcGFzcyBvYmplY3RzIGluXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqQVxuICogQHBhcmFtIHtPYmplY3R9IG9iakJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IC0gdHJ1ZSBpZiBvYmpBIGFuZCBvYmpCIGFyZSBzaGFsbG93IGVxdWFsXG4gKi9cblxuXG5mdW5jdGlvbiBhcmVPYmplY3RzU2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKE9iamVjdC5rZXlzKG9iakEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMob2JqQikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIga2V5QSBpbiBvYmpBKSB7XG4gICAgaWYgKCF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleUEpIHx8IG9iakJba2V5QV0gIT09IG9iakFba2V5QV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogU2hhbGxvdyBjb21wYXJlcyB0d28gYXJyYXlzXG4gKiBAcGFyYW0gYXJyQVxuICogQHBhcmFtIGFyckJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IC0gd2hldGhlciB0aGUgYXJyYXlzIGFyZSBzaGFsbG93IGVxdWFsXG4gKi9cblxuZnVuY3Rpb24gYXJlQXJyYXlzU2hhbGxvd0VxdWFsU2FtZU9yZGVyKGFyckEsIGFyckIpIHtcbiAgaWYgKGFyckEubGVuZ3RoICE9PSBhcnJCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyQS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJBW2ldICE9PSBhcnJCW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBJTlRFUlZBTF9NUyA9IDIwMDtcbnZhciBUT0xFUkFOQ0VfUFggPSAxMDtcblxudmFyIF9tYWtlU2Nyb2xsZXIgPSBtYWtlU2Nyb2xsZXIoKSxcbiAgICBzY3JvbGxJZk5lZWRlZCA9IF9tYWtlU2Nyb2xsZXIuc2Nyb2xsSWZOZWVkZWQsXG4gICAgcmVzZXRTY3JvbGxpbmcgPSBfbWFrZVNjcm9sbGVyLnJlc2V0U2Nyb2xsaW5nO1xuXG52YXIgbmV4dDtcbi8qKlxuICogVHJhY2tzIHRoZSBkcmFnZ2VkIGVsZW1lbnRzIGFuZCBwZXJmb3JtcyB0aGUgc2lkZSBlZmZlY3RzIHdoZW4gaXQgaXMgZHJhZ2dlZCBvdmVyIGEgZHJvcCB6b25lIChiYXNpY2FsbHkgZGlzcGF0Y2hpbmcgY3VzdG9tLWV2ZW50cyBzY3JvbGxpbmcpXG4gKiBAcGFyYW0ge1NldDxIVE1MRWxlbWVudD59IGRyb3Bab25lc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHJhZ2dlZEVsXG4gKiBAcGFyYW0ge251bWJlcn0gW2ludGVydmFsTXMgPSBJTlRFUlZBTF9NU11cbiAqL1xuXG5mdW5jdGlvbiBvYnNlcnZlKGRyYWdnZWRFbCwgZHJvcFpvbmVzKSB7XG4gIHZhciBpbnRlcnZhbE1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBJTlRFUlZBTF9NUztcbiAgLy8gaW5pdGlhbGl6YXRpb25cbiAgdmFyIGxhc3REcm9wWm9uZUZvdW5kO1xuICB2YXIgbGFzdEluZGV4Rm91bmQ7XG4gIHZhciBsYXN0SXNEcmFnZ2VkSW5BRHJvcFpvbmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZDsgLy8gV2UgYXJlIHNvcnRpbmcgdG8gbWFrZSBzdXJlIHRoYXQgaW4gY2FzZSBvZiBuZXN0ZWQgem9uZXMgb2YgdGhlIHNhbWUgdHlwZSB0aGUgb25lIFwib24gdG9wXCIgaXMgY29uc2lkZXJlZCBmaXJzdFxuXG4gIHZhciBkcm9wWm9uZXNGcm9tRGVlcFRvU2hhbGxvdyA9IEFycmF5LmZyb20oZHJvcFpvbmVzKS5zb3J0KGZ1bmN0aW9uIChkejEsIGR6Mikge1xuICAgIHJldHVybiBnZXREZXB0aChkejIpIC0gZ2V0RGVwdGgoZHoxKTtcbiAgfSk7XG4gIC8qKlxuICAgKiBUaGUgbWFpbiBmdW5jdGlvbiBpbiB0aGlzIG1vZHVsZS4gVHJhY2tzIHdoZXJlIGV2ZXJ5dGhpbmcgaXMvIHNob3VsZCBiZSBhIHRha2UgdGhlIGFjdGlvbnNcbiAgICovXG5cbiAgZnVuY3Rpb24gYW5kTm93KCkge1xuICAgIHZhciBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkID0gZmluZENlbnRlck9mRWxlbWVudChkcmFnZ2VkRWwpO1xuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbElmTmVlZGVkKGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQsIGxhc3REcm9wWm9uZUZvdW5kKTsgLy8gd2Ugb25seSB3YW50IHRvIG1ha2UgYSBuZXcgZGVjaXNpb24gYWZ0ZXIgdGhlIGVsZW1lbnQgd2FzIG1vdmVkIGEgYml0IHRvIHByZXZlbnQgZmxpY2tlcmluZ1xuXG4gICAgaWYgKCFzY3JvbGxlZCAmJiBsYXN0Q2VudHJlUG9zaXRpb25PZkRyYWdnZWQgJiYgTWF0aC5hYnMobGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkLnggLSBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkLngpIDwgVE9MRVJBTkNFX1BYICYmIE1hdGguYWJzKGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZC55IC0gY3VycmVudENlbnRlck9mRHJhZ2dlZC55KSA8IFRPTEVSQU5DRV9QWCkge1xuICAgICAgbmV4dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGFuZE5vdywgaW50ZXJ2YWxNcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRWxlbWVudE9mZkRvY3VtZW50KGRyYWdnZWRFbCkpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJvZmYgZG9jdW1lbnRcIjtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2hEcmFnZ2VkTGVmdERvY3VtZW50KGRyYWdnZWRFbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkID0gY3VycmVudENlbnRlck9mRHJhZ2dlZDsgLy8gdGhpcyBpcyBhIHNpbXBsZSBhbGdvcml0aG0sIHBvdGVudGlhbCBpbXByb3ZlbWVudDogZmlyc3QgbG9vayBhdCBsYXN0RHJvcFpvbmVGb3VuZFxuXG4gICAgdmFyIGlzRHJhZ2dlZEluQURyb3Bab25lID0gZmFsc2U7XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZHJvcFpvbmVzRnJvbURlZXBUb1NoYWxsb3cpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZHogPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgdmFyIGluZGV4T2JqID0gZmluZFdvdWxkQmVJbmRleChkcmFnZ2VkRWwsIGR6KTtcblxuICAgICAgICBpZiAoaW5kZXhPYmogPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBpdCBpcyBub3QgaW5zaWRlXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5kZXggPSBpbmRleE9iai5pbmRleDtcbiAgICAgICAgaXNEcmFnZ2VkSW5BRHJvcFpvbmUgPSB0cnVlOyAvLyB0aGUgZWxlbWVudCBpcyBvdmVyIGEgY29udGFpbmVyXG5cbiAgICAgICAgaWYgKGR6ICE9PSBsYXN0RHJvcFpvbmVGb3VuZCkge1xuICAgICAgICAgIGxhc3REcm9wWm9uZUZvdW5kICYmIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRMZWZ0Q29udGFpbmVyRm9yQW5vdGhlcihsYXN0RHJvcFpvbmVGb3VuZCwgZHJhZ2dlZEVsLCBkeik7XG4gICAgICAgICAgZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudEVudGVyZWRDb250YWluZXIoZHosIGluZGV4T2JqLCBkcmFnZ2VkRWwpO1xuICAgICAgICAgIGxhc3REcm9wWm9uZUZvdW5kID0gZHo7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggIT09IGxhc3RJbmRleEZvdW5kKSB7XG4gICAgICAgICAgZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudElzT3ZlckluZGV4KGR6LCBpbmRleE9iaiwgZHJhZ2dlZEVsKTtcbiAgICAgICAgICBsYXN0SW5kZXhGb3VuZCA9IGluZGV4O1xuICAgICAgICB9IC8vIHdlIGhhbmRsZSBsb29waW5nIHdpdGggdGhlICdjb250aW51ZScgc3RhdGVtZW50IGFib3ZlXG5cblxuICAgICAgICBicmVhaztcbiAgICAgIH0gLy8gdGhlIGZpcnN0IHRpbWUgdGhlIGRyYWdnZWQgZWxlbWVudCBpcyBub3QgaW4gYW55IGRyb3B6b25lIHdlIG5lZWQgdG8gbm90aWZ5IHRoZSBsYXN0IGRyb3B6b25lIGl0IHdhcyBpblxuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIGlmICghaXNEcmFnZ2VkSW5BRHJvcFpvbmUgJiYgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lICYmIGxhc3REcm9wWm9uZUZvdW5kKSB7XG4gICAgICBkaXNwYXRjaERyYWdnZWRFbGVtZW50TGVmdENvbnRhaW5lckZvck5vbmUobGFzdERyb3Bab25lRm91bmQsIGRyYWdnZWRFbCk7XG4gICAgICBsYXN0RHJvcFpvbmVGb3VuZCA9IHVuZGVmaW5lZDtcbiAgICAgIGxhc3RJbmRleEZvdW5kID0gdW5kZWZpbmVkO1xuICAgICAgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RJc0RyYWdnZWRJbkFEcm9wWm9uZSA9IHRydWU7XG4gICAgfVxuXG4gICAgbmV4dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGFuZE5vdywgaW50ZXJ2YWxNcyk7XG4gIH1cblxuICBhbmROb3coKTtcbn0gLy8gYXNzdW1wdGlvbiAtIHdlIGNhbiBvbmx5IG9ic2VydmUgb25lIGRyYWdnZWQgZWxlbWVudCBhdCBhIHRpbWUsIHRoaXMgY291bGQgYmUgY2hhbmdlZCBpbiB0aGUgZnV0dXJlXG5cbmZ1bmN0aW9uIHVub2JzZXJ2ZSgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW5vYnNlcnZpbmdcIjtcbiAgfSk7XG4gIGNsZWFyVGltZW91dChuZXh0KTtcbiAgcmVzZXRTY3JvbGxpbmcoKTtcbiAgcmVzZXRJbmRleGVzQ2FjaGUoKTtcbn1cblxudmFyIElOVEVSVkFMX01TJDEgPSAzMDA7XG52YXIgbW91c2VQb3NpdGlvbjtcbi8qKlxuICogRG8gbm90IHVzZSB0aGlzISBpdCBpcyB2aXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkgdW50aWwgd2UgZ2V0IG92ZXIgdGhlIGlzc3VlIEN5cHJlc3Mgbm90IHRyaWdnZXJpbmcgdGhlIG1vdXNlbW92ZSBsaXN0ZW5lcnNcbiAqIC8vIFRPRE8gLSBtYWtlIHByaXZhdGUgKHJlbW92ZSBleHBvcnQpXG4gKiBAcGFyYW0ge3tjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcn19IGVcbiAqL1xuXG5mdW5jdGlvbiB1cGRhdGVNb3VzZVBvc2l0aW9uKGUpIHtcbiAgdmFyIGMgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICBtb3VzZVBvc2l0aW9uID0ge1xuICAgIHg6IGMuY2xpZW50WCxcbiAgICB5OiBjLmNsaWVudFlcbiAgfTtcbn1cblxudmFyIF9tYWtlU2Nyb2xsZXIkMSA9IG1ha2VTY3JvbGxlcigpLFxuICAgIHNjcm9sbElmTmVlZGVkJDEgPSBfbWFrZVNjcm9sbGVyJDEuc2Nyb2xsSWZOZWVkZWQsXG4gICAgcmVzZXRTY3JvbGxpbmckMSA9IF9tYWtlU2Nyb2xsZXIkMS5yZXNldFNjcm9sbGluZztcblxudmFyIG5leHQkMTtcblxuZnVuY3Rpb24gbG9vcCgpIHtcbiAgaWYgKG1vdXNlUG9zaXRpb24pIHtcbiAgICBzY3JvbGxJZk5lZWRlZCQxKG1vdXNlUG9zaXRpb24sIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIH1cblxuICBuZXh0JDEgPSB3aW5kb3cuc2V0VGltZW91dChsb29wLCBJTlRFUlZBTF9NUyQxKTtcbn1cbi8qKlxuICogd2lsbCBzdGFydCB3YXRjaGluZyB0aGUgbW91c2UgcG9pbnRlciBhbmQgc2Nyb2xsIHRoZSB3aW5kb3cgaWYgaXQgZ29lcyBuZXh0IHRvIHRoZSBlZGdlc1xuICovXG5cblxuZnVuY3Rpb24gYXJtV2luZG93U2Nyb2xsZXIoKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImFybWluZyB3aW5kb3cgc2Nyb2xsZXJcIjtcbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHVwZGF0ZU1vdXNlUG9zaXRpb24pO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB1cGRhdGVNb3VzZVBvc2l0aW9uKTtcbiAgbG9vcCgpO1xufVxuLyoqXG4gKiB3aWxsIHN0b3Agd2F0Y2hpbmcgdGhlIG1vdXNlIHBvaW50ZXIgYW5kIHdvbid0IHNjcm9sbCB0aGUgd2luZG93IGFueW1vcmVcbiAqL1xuXG5mdW5jdGlvbiBkaXNhcm1XaW5kb3dTY3JvbGxlcigpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiZGlzYXJtaW5nIHdpbmRvdyBzY3JvbGxlclwiO1xuICB9KTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdXBkYXRlTW91c2VQb3NpdGlvbik7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHVwZGF0ZU1vdXNlUG9zaXRpb24pO1xuICBtb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICB3aW5kb3cuY2xlYXJUaW1lb3V0KG5leHQkMSk7XG4gIHJlc2V0U2Nyb2xsaW5nJDEoKTtcbn1cblxudmFyIFRSQU5TSVRJT05fRFVSQVRJT05fU0VDT05EUyA9IDAuMjtcbi8qKlxuICogcHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb24gLSBjcmVhdGVzIGEgdHJhbnNpdGlvbiBzdHJpbmcgZm9yIGEgcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybiB7c3RyaW5nfSAtIHRoZSB0cmFuc2l0aW9uIHN0cmluZ1xuICovXG5cbmZ1bmN0aW9uIHRycyhwcm9wZXJ0eSkge1xuICByZXR1cm4gXCJcIi5jb25jYXQocHJvcGVydHksIFwiIFwiKS5jb25jYXQoVFJBTlNJVElPTl9EVVJBVElPTl9TRUNPTkRTLCBcInMgZWFzZVwiKTtcbn1cbi8qKlxuICogY2xvbmVzIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBhcHBsaWVzIHByb3BlciBzdHlsZXMgYW5kIHRyYW5zaXRpb25zIHRvIHRoZSBkcmFnZ2VkIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9yaWdpbmFsRWxlbWVudFxuICogQHBhcmFtIHtQb2ludH0gW3Bvc2l0aW9uQ2VudGVyT25YWV1cbiAqIEByZXR1cm4ge05vZGV9IC0gdGhlIGNsb25lZCwgc3R5bGVkIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZURyYWdnZWRFbGVtZW50RnJvbShvcmlnaW5hbEVsZW1lbnQsIHBvc2l0aW9uQ2VudGVyT25YWSkge1xuICB2YXIgcmVjdCA9IG9yaWdpbmFsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGRyYWdnZWRFbCA9IG9yaWdpbmFsRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gIGNvcHlTdHlsZXNGcm9tVG8ob3JpZ2luYWxFbGVtZW50LCBkcmFnZ2VkRWwpO1xuICBkcmFnZ2VkRWwuaWQgPSBEUkFHR0VEX0VMRU1FTlRfSUQ7XG4gIGRyYWdnZWRFbC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgdmFyIGVsVG9wUHggPSByZWN0LnRvcDtcbiAgdmFyIGVsTGVmdFB4ID0gcmVjdC5sZWZ0O1xuICBkcmFnZ2VkRWwuc3R5bGUudG9wID0gXCJcIi5jb25jYXQoZWxUb3BQeCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLmxlZnQgPSBcIlwiLmNvbmNhdChlbExlZnRQeCwgXCJweFwiKTtcblxuICBpZiAocG9zaXRpb25DZW50ZXJPblhZKSB7XG4gICAgdmFyIGNlbnRlciA9IGZpbmRDZW50ZXIocmVjdCk7XG4gICAgZWxUb3BQeCAtPSBjZW50ZXIueSAtIHBvc2l0aW9uQ2VudGVyT25YWS55O1xuICAgIGVsTGVmdFB4IC09IGNlbnRlci54IC0gcG9zaXRpb25DZW50ZXJPblhZLng7XG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZHJhZ2dlZEVsLnN0eWxlLnRvcCA9IFwiXCIuY29uY2F0KGVsVG9wUHgsIFwicHhcIik7XG4gICAgICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KGVsTGVmdFB4LCBcInB4XCIpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgZHJhZ2dlZEVsLnN0eWxlLm1hcmdpbiA9IFwiMFwiOyAvLyB3ZSBjYW4ndCBoYXZlIHJlbGF0aXZlIG9yIGF1dG9tYXRpYyBoZWlnaHQgYW5kIHdpZHRoIG9yIGl0IHdpbGwgYnJlYWsgdGhlIGlsbHVzaW9uXG5cbiAgZHJhZ2dlZEVsLnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICBkcmFnZ2VkRWwuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQocmVjdC5oZWlnaHQsIFwicHhcIik7XG4gIGRyYWdnZWRFbC5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KHJlY3Qud2lkdGgsIFwicHhcIik7XG4gIGRyYWdnZWRFbC5zdHlsZS50cmFuc2l0aW9uID0gXCJcIi5jb25jYXQodHJzKFwidG9wXCIpLCBcIiwgXCIpLmNvbmNhdCh0cnMoXCJsZWZ0XCIpLCBcIiwgXCIpLmNvbmNhdCh0cnMoXCJiYWNrZ3JvdW5kLWNvbG9yXCIpLCBcIiwgXCIpLmNvbmNhdCh0cnMoXCJvcGFjaXR5XCIpLCBcIiwgXCIpLmNvbmNhdCh0cnMoXCJjb2xvclwiKSwgXCIgXCIpOyAvLyB0aGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgYSBzdHJhbmdlIGJyb3dzZXIgYnVnIHRoYXQgY2F1c2VzIHRoZSByaWdodCBib3JkZXIgdG8gZGlzYXBwZWFyIHdoZW4gYWxsIHRoZSB0cmFuc2l0aW9ucyBhcmUgYWRkZWQgYXQgdGhlIHNhbWUgdGltZVxuXG4gIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gKz0gXCIsIFwiLmNvbmNhdCh0cnMoXCJ3aWR0aFwiKSwgXCIsIFwiKS5jb25jYXQodHJzKFwiaGVpZ2h0XCIpKTtcbiAgfSwgMCk7XG4gIGRyYWdnZWRFbC5zdHlsZS56SW5kZXggPSBcIjk5OTlcIjtcbiAgZHJhZ2dlZEVsLnN0eWxlLmN1cnNvciA9IFwiZ3JhYmJpbmdcIjtcbiAgcmV0dXJuIGRyYWdnZWRFbDtcbn1cbi8qKlxuICogc3R5bGVzIHRoZSBkcmFnZ2VkIGVsZW1lbnQgdG8gYSAnZHJvcHBlZCcgc3RhdGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnZWRFbFxuICovXG5cbmZ1bmN0aW9uIG1vdmVEcmFnZ2VkRWxlbWVudFRvV2FzRHJvcHBlZFN0YXRlKGRyYWdnZWRFbCkge1xuICBkcmFnZ2VkRWwuc3R5bGUuY3Vyc29yID0gXCJncmFiXCI7XG59XG4vKipcbiAqIE1vcnBocyB0aGUgZHJhZ2dlZCBlbGVtZW50IHN0eWxlLCBtYWludGFpbnMgdGhlIG1vdXNlIHBvaW50ZXIgd2l0aGluIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnZ2VkRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvcHlGcm9tRWwgLSB0aGUgZWxlbWVudCB0aGUgZHJhZ2dlZCBlbGVtZW50IHNob3VsZCBsb29rIGxpa2UsIHR5cGljYWxseSB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50TW91c2VYXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudE1vdXNlWVxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQgLSBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gdGhlIGRyYWdnZWQgZWxlbWVudCwgZG9lcyBub3RoaW5nIGJ5IGRlZmF1bHQuXG4gKi9cblxuZnVuY3Rpb24gbW9ycGhEcmFnZ2VkRWxlbWVudFRvQmVMaWtlKGRyYWdnZWRFbCwgY29weUZyb21FbCwgY3VycmVudE1vdXNlWCwgY3VycmVudE1vdXNlWSwgdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQpIHtcbiAgdmFyIG5ld1JlY3QgPSBjb3B5RnJvbUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgZHJhZ2dlZEVsUmVjdCA9IGRyYWdnZWRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHdpZHRoQ2hhbmdlID0gbmV3UmVjdC53aWR0aCAtIGRyYWdnZWRFbFJlY3Qud2lkdGg7XG4gIHZhciBoZWlnaHRDaGFuZ2UgPSBuZXdSZWN0LmhlaWdodCAtIGRyYWdnZWRFbFJlY3QuaGVpZ2h0O1xuXG4gIGlmICh3aWR0aENoYW5nZSB8fCBoZWlnaHRDaGFuZ2UpIHtcbiAgICB2YXIgcmVsYXRpdmVEaXN0YW5jZU9mTW91c2VQb2ludGVyRnJvbURyYWdnZWRTaWRlcyA9IHtcbiAgICAgIGxlZnQ6IChjdXJyZW50TW91c2VYIC0gZHJhZ2dlZEVsUmVjdC5sZWZ0KSAvIGRyYWdnZWRFbFJlY3Qud2lkdGgsXG4gICAgICB0b3A6IChjdXJyZW50TW91c2VZIC0gZHJhZ2dlZEVsUmVjdC50b3ApIC8gZHJhZ2dlZEVsUmVjdC5oZWlnaHRcbiAgICB9O1xuICAgIGRyYWdnZWRFbC5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChuZXdSZWN0LmhlaWdodCwgXCJweFwiKTtcbiAgICBkcmFnZ2VkRWwuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdChuZXdSZWN0LndpZHRoLCBcInB4XCIpO1xuICAgIGRyYWdnZWRFbC5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQocGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUubGVmdCkgLSByZWxhdGl2ZURpc3RhbmNlT2ZNb3VzZVBvaW50ZXJGcm9tRHJhZ2dlZFNpZGVzLmxlZnQgKiB3aWR0aENoYW5nZSwgXCJweFwiKTtcbiAgICBkcmFnZ2VkRWwuc3R5bGUudG9wID0gXCJcIi5jb25jYXQocGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUudG9wKSAtIHJlbGF0aXZlRGlzdGFuY2VPZk1vdXNlUG9pbnRlckZyb21EcmFnZ2VkU2lkZXMudG9wICogaGVpZ2h0Q2hhbmdlLCBcInB4XCIpO1xuICB9IC8vLyBvdGhlciBwcm9wZXJ0aWVzXG5cblxuICBjb3B5U3R5bGVzRnJvbVRvKGNvcHlGcm9tRWwsIGRyYWdnZWRFbCk7XG4gIHRyYW5zZm9ybURyYWdnZWRFbGVtZW50KCk7XG59XG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvcHlGcm9tRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvcHlUb0VsXG4gKi9cblxuZnVuY3Rpb24gY29weVN0eWxlc0Zyb21Ubyhjb3B5RnJvbUVsLCBjb3B5VG9FbCkge1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNvcHlGcm9tRWwpO1xuICBBcnJheS5mcm9tKGNvbXB1dGVkU3R5bGUpLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzLnN0YXJ0c1dpdGgoXCJiYWNrZ3JvdW5kXCIpIHx8IHMuc3RhcnRzV2l0aChcInBhZGRpbmdcIikgfHwgcy5zdGFydHNXaXRoKFwiZm9udFwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJ0ZXh0XCIpIHx8IHMuc3RhcnRzV2l0aChcImFsaWduXCIpIHx8IHMuc3RhcnRzV2l0aChcImp1c3RpZnlcIikgfHwgcy5zdGFydHNXaXRoKFwiZGlzcGxheVwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJmbGV4XCIpIHx8IHMuc3RhcnRzV2l0aChcImJvcmRlclwiKSB8fCBzID09PSBcIm9wYWNpdHlcIiB8fCBzID09PSBcImNvbG9yXCIgfHwgcyA9PT0gXCJsaXN0LXN0eWxlLXR5cGVcIjtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBjb3B5VG9FbC5zdHlsZS5zZXRQcm9wZXJ0eShzLCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocyksIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShzKSk7XG4gIH0pO1xufVxuLyoqXG4gKiBtYWtlcyB0aGUgZWxlbWVudCBjb21wYXRpYmxlIHdpdGggYmVpbmcgZHJhZ2dhYmxlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnZ2FibGVFbFxuICogQHBhcmFtIHtib29sZWFufSBkcmFnRGlzYWJsZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIHN0eWxlRHJhZ2dhYmxlKGRyYWdnYWJsZUVsLCBkcmFnRGlzYWJsZWQpIHtcbiAgZHJhZ2dhYmxlRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG5cbiAgZHJhZ2dhYmxlRWwub25kcmFnc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGlmICghZHJhZ0Rpc2FibGVkKSB7XG4gICAgZHJhZ2dhYmxlRWwuc3R5bGUudXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5jdXJzb3IgPSBcImdyYWJcIjtcbiAgfSBlbHNlIHtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS51c2VyU2VsZWN0ID0gXCJcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5XZWJraXRVc2VyU2VsZWN0ID0gXCJcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICB9XG59XG4vKipcbiAqIEhpZGVzIHRoZSBwcm92aWRlZCBlbGVtZW50IHNvIHRoYXQgaXQgY2FuIHN0YXkgaW4gdGhlIGRvbSB3aXRob3V0IGludGVycnVwdGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHJhZ1RhcmdldFxuICovXG5cbmZ1bmN0aW9uIGhpZGVPcmlnaW5hbERyYWdUYXJnZXQoZHJhZ1RhcmdldCkge1xuICBkcmFnVGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZHJhZ1RhcmdldC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgZHJhZ1RhcmdldC5zdHlsZS56SW5kZXggPSBcIi01XCI7XG59XG4vKipcbiAqIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cblxuZnVuY3Rpb24gZGVjb3JhdGVTaGFkb3dFbChzaGFkb3dFbCkge1xuICBzaGFkb3dFbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgc2hhZG93RWwuc2V0QXR0cmlidXRlKFNIQURPV19FTEVNRU5UX0FUVFJJQlVURV9OQU1FLCBcInRydWVcIik7XG59XG4vKipcbiAqIHVuZG8gdGhlIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cblxuZnVuY3Rpb24gdW5EZWNvcmF0ZVNoYWRvd0VsZW1lbnQoc2hhZG93RWwpIHtcbiAgc2hhZG93RWwuc3R5bGUudmlzaWJpbGl0eSA9IFwiXCI7XG4gIHNoYWRvd0VsLnJlbW92ZUF0dHJpYnV0ZShTSEFET1dfRUxFTUVOVF9BVFRSSUJVVEVfTkFNRSk7XG59XG4vKipcbiAqIHdpbGwgbWFyayB0aGUgZ2l2ZW4gZHJvcHpvbmVzIGFzIHZpc3VhbGx5IGFjdGl2ZVxuICogQHBhcmFtIHtBcnJheTxIVE1MRWxlbWVudD59IGRyb3Bab25lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0U3R5bGVzIC0gbWFwcyBhIGRyb3B6b25lIHRvIGEgc3R5bGVzIG9iamVjdCAoc28gdGhlIHN0eWxlcyBjYW4gYmUgcmVtb3ZlZClcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuXG5mdW5jdGlvbiBzdHlsZUFjdGl2ZURyb3Bab25lcyhkcm9wWm9uZXMpIHtcbiAgdmFyIGdldFN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge307XG4gIHZhciBnZXRDbGFzc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9O1xuICBkcm9wWm9uZXMuZm9yRWFjaChmdW5jdGlvbiAoZHopIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKGR6KTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBkei5zdHlsZVtzdHlsZV0gPSBzdHlsZXNbc3R5bGVdO1xuICAgIH0pO1xuICAgIGdldENsYXNzZXMoZHopLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBkei5jbGFzc0xpc3QuYWRkKGMpO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogd2lsbCByZW1vdmUgdGhlICdhY3RpdmUnIHN0eWxpbmcgZnJvbSBnaXZlbiBkcm9wem9uZXNcbiAqIEBwYXJhbSB7QXJyYXk8SFRNTEVsZW1lbnQ+fSBkcm9wWm9uZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFN0eWxlcyAtIG1hcHMgYSBkcm9wem9uZSB0byBhIHN0eWxlcyBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuXG5mdW5jdGlvbiBzdHlsZUluYWN0aXZlRHJvcFpvbmVzKGRyb3Bab25lcykge1xuICB2YXIgZ2V0U3R5bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7fTtcbiAgdmFyIGdldENsYXNzZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW107XG4gIH07XG4gIGRyb3Bab25lcy5mb3JFYWNoKGZ1bmN0aW9uIChkeikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoZHopO1xuICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIGR6LnN0eWxlW3N0eWxlXSA9IFwiXCI7XG4gICAgfSk7XG4gICAgZ2V0Q2xhc3NlcyhkeikuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGR6LmNsYXNzTGlzdC5jb250YWlucyhjKSAmJiBkei5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogd2lsbCBwcmV2ZW50IHRoZSBwcm92aWRlZCBlbGVtZW50IGZyb20gc2hyaW5raW5nIGJ5IHNldHRpbmcgaXRzIG1pbldpZHRoIGFuZCBtaW5IZWlnaHQgdG8gdGhlIGN1cnJlbnQgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOiB2b2lkfSAtIHJ1biB0aGlzIGZ1bmN0aW9uIHRvIHVuZG8gdGhlIG9wZXJhdGlvbiBhbmQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gKi9cblxuZnVuY3Rpb24gcHJldmVudFNocmlua2luZyhlbCkge1xuICB2YXIgb3JpZ2luYWxNaW5IZWlnaHQgPSBlbC5zdHlsZS5taW5IZWlnaHQ7XG4gIGVsLnN0eWxlLm1pbkhlaWdodCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKFwiaGVpZ2h0XCIpO1xuICB2YXIgb3JpZ2luYWxNaW5XaWR0aCA9IGVsLnN0eWxlLm1pbldpZHRoO1xuICBlbC5zdHlsZS5taW5XaWR0aCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKFwid2lkdGhcIik7XG4gIHJldHVybiBmdW5jdGlvbiB1bmRvKCkge1xuICAgIGVsLnN0eWxlLm1pbkhlaWdodCA9IG9yaWdpbmFsTWluSGVpZ2h0O1xuICAgIGVsLnN0eWxlLm1pbldpZHRoID0gb3JpZ2luYWxNaW5XaWR0aDtcbiAgfTtcbn1cblxudmFyIERFRkFVTFRfRFJPUF9aT05FX1RZUEUgPSBcIi0tYW55LS1cIjtcbnZhciBNSU5fT0JTRVJWQVRJT05fSU5URVJWQUxfTVMgPSAxMDA7XG52YXIgTUlOX01PVkVNRU5UX0JFRk9SRV9EUkFHX1NUQVJUX1BYID0gMztcbnZhciBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFID0ge1xuICBvdXRsaW5lOiBcInJnYmEoMjU1LCAyNTUsIDEwMiwgMC43KSBzb2xpZCAycHhcIlxufTtcbnZhciBvcmlnaW5hbERyYWdUYXJnZXQ7XG52YXIgZHJhZ2dlZEVsO1xudmFyIGRyYWdnZWRFbERhdGE7XG52YXIgZHJhZ2dlZEVsVHlwZTtcbnZhciBvcmlnaW5Ecm9wWm9uZTtcbnZhciBvcmlnaW5JbmRleDtcbnZhciBzaGFkb3dFbERhdGE7XG52YXIgc2hhZG93RWxEcm9wWm9uZTtcbnZhciBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uO1xudmFyIGN1cnJlbnRNb3VzZVBvc2l0aW9uO1xudmFyIGlzV29ya2luZ09uUHJldmlvdXNEcmFnID0gZmFsc2U7XG52YXIgZmluYWxpemluZ1ByZXZpb3VzRHJhZyA9IGZhbHNlO1xudmFyIHVubG9ja09yaWdpbkR6TWluRGltZW5zaW9ucztcbnZhciBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA9IGZhbHNlOyAvLyBhIG1hcCBmcm9tIHR5cGUgdG8gYSBzZXQgb2YgZHJvcC16b25lc1xuXG52YXIgdHlwZVRvRHJvcFpvbmVzID0gbmV3IE1hcCgpOyAvLyBpbXBvcnRhbnQgLSB0aGlzIGlzIG5lZWRlZCBiZWNhdXNlIG90aGVyd2lzZSB0aGUgY29uZmlnIHRoYXQgd291bGQgYmUgdXNlZCBmb3IgZXZlcnlvbmUgaXMgdGhlIGNvbmZpZyBvZiB0aGUgZWxlbWVudCB0aGF0IGNyZWF0ZWQgdGhlIGV2ZW50IGxpc3RlbmVyc1xuXG52YXIgZHpUb0NvbmZpZyA9IG5ldyBNYXAoKTsgLy8gdGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBjbGVhbnVwIG9sZCBsaXN0ZW5lcnMgYW5kIGF2b2lkIHN0YWxlIGNsb3N1cmVzIGlzc3VlcyAoYXMgdGhlIGxpc3RlbmVyIGlzIGRlZmluZWQgd2l0aGluIGVhY2ggem9uZSlcblxudmFyIGVsVG9Nb3VzZURvd25MaXN0ZW5lciA9IG5ldyBXZWFrTWFwKCk7XG4vKiBkcm9wLXpvbmVzIHJlZ2lzdHJhdGlvbiBtYW5hZ2VtZW50ICovXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRHJvcFpvbmUoZHJvcFpvbmVFbCwgdHlwZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJyZWdpc3RlcmluZyBkcm9wLXpvbmUgaWYgYWJzZW50XCI7XG4gIH0pO1xuXG4gIGlmICghdHlwZVRvRHJvcFpvbmVzLmhhcyh0eXBlKSkge1xuICAgIHR5cGVUb0Ryb3Bab25lcy5zZXQodHlwZSwgbmV3IFNldCgpKTtcbiAgfVxuXG4gIGlmICghdHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKS5oYXMoZHJvcFpvbmVFbCkpIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXMuZ2V0KHR5cGUpLmFkZChkcm9wWm9uZUVsKTtcbiAgICBpbmNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlckRyb3Bab25lKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgdHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKVtcImRlbGV0ZVwiXShkcm9wWm9uZUVsKTtcbiAgZGVjcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpO1xuXG4gIGlmICh0eXBlVG9Ecm9wWm9uZXMuZ2V0KHR5cGUpLnNpemUgPT09IDApIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXNbXCJkZWxldGVcIl0odHlwZSk7XG4gIH1cbn1cbi8qIGZ1bmN0aW9ucyB0byBtYW5hZ2Ugb2JzZXJ2aW5nIHRoZSBkcmFnZ2VkIGVsZW1lbnQgYW5kIHRyaWdnZXIgY3VzdG9tIGRyYWctZXZlbnRzICovXG5cblxuZnVuY3Rpb24gd2F0Y2hEcmFnZ2VkRWxlbWVudCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwid2F0Y2hpbmcgZHJhZ2dlZCBlbGVtZW50XCI7XG4gIH0pO1xuICBhcm1XaW5kb3dTY3JvbGxlcigpO1xuICB2YXIgZHJvcFpvbmVzID0gdHlwZVRvRHJvcFpvbmVzLmdldChkcmFnZ2VkRWxUeXBlKTtcblxuICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZHJvcFpvbmVzKSxcbiAgICAgIF9zdGVwO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgIHZhciBkeiA9IF9zdGVwLnZhbHVlO1xuICAgICAgZHouYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0VOVEVSRURfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZEVudGVyZWQpO1xuICAgICAgZHouYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZExlZnQpO1xuICAgICAgZHouYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZElzT3ZlckluZGV4KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKERSQUdHRURfTEVGVF9ET0NVTUVOVF9FVkVOVF9OQU1FLCBoYW5kbGVEcm9wKTsgLy8gaXQgaXMgaW1wb3J0YW50IHRoYXQgd2UgZG9uJ3QgaGF2ZSBhbiBpbnRlcnZhbCB0aGF0IGlzIGZhc3RlciB0aGFuIHRoZSBmbGlwIGR1cmF0aW9uIGJlY2F1c2UgaXQgY2FuIGNhdXNlIGVsZW1lbnRzIHRvIGp1bXAgYmFjaCBhbmQgZm9ydGhcblxuICB2YXIgb2JzZXJ2YXRpb25JbnRlcnZhbE1zID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgW01JTl9PQlNFUlZBVElPTl9JTlRFUlZBTF9NU10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShBcnJheS5mcm9tKGRyb3Bab25lcy5rZXlzKCkpLm1hcChmdW5jdGlvbiAoZHopIHtcbiAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BBbmltYXRpb25EdXJhdGlvbk1zO1xuICB9KSkpKTtcbiAgb2JzZXJ2ZShkcmFnZ2VkRWwsIGRyb3Bab25lcywgb2JzZXJ2YXRpb25JbnRlcnZhbE1zICogMS4wNyk7XG59XG5cbmZ1bmN0aW9uIHVuV2F0Y2hEcmFnZ2VkRWxlbWVudCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW53YXRjaGluZyBkcmFnZ2VkIGVsZW1lbnRcIjtcbiAgfSk7XG4gIGRpc2FybVdpbmRvd1Njcm9sbGVyKCk7XG4gIHZhciBkcm9wWm9uZXMgPSB0eXBlVG9Ecm9wWm9uZXMuZ2V0KGRyYWdnZWRFbFR5cGUpO1xuXG4gIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZHJvcFpvbmVzKSxcbiAgICAgIF9zdGVwMjtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgZHogPSBfc3RlcDIudmFsdWU7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkRW50ZXJlZCk7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkTGVmdCk7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkSXNPdmVySW5kZXgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yMi5mKCk7XG4gIH1cblxuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0xFRlRfRE9DVU1FTlRfRVZFTlRfTkFNRSwgaGFuZGxlRHJvcCk7XG4gIHVub2JzZXJ2ZSgpO1xufSAvLyBmaW5kcyB0aGUgaW5pdGlhbCBwbGFjZWhvbGRlciB0aGF0IGlzIHBsYWNlZCB0aGVyZSBvbiBkcmFnIHN0YXJ0XG5cblxuZnVuY3Rpb24gZmluZFNoYWRvd1BsYWNlSG9sZGVySWR4KGl0ZW1zKSB7XG4gIHJldHVybiBpdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtJVEVNX0lEX0tFWV0gPT09IFNIQURPV19QTEFDRUhPTERFUl9JVEVNX0lEO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZFNoYWRvd0VsZW1lbnRJZHgoaXRlbXMpIHtcbiAgLy8gY2hlY2tpbmcgdGhhdCB0aGUgaWQgaXMgbm90IHRoZSBwbGFjZWhvbGRlcidzIGZvciBEcmFndWxhIGxpa2UgdXNlY2FzZXNcbiAgcmV0dXJuIGl0ZW1zLmZpbmRJbmRleChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAhIWl0ZW1bU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUVdICYmIGl0ZW1bSVRFTV9JRF9LRVldICE9PSBTSEFET1dfUExBQ0VIT0xERVJfSVRFTV9JRDtcbiAgfSk7XG59XG4vKiBjdXN0b20gZHJhZy1ldmVudHMgaGFuZGxlcnMgKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVEcmFnZ2VkRW50ZXJlZChlKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkcmFnZ2VkIGVudGVyZWRcIiwgZS5jdXJyZW50VGFyZ2V0LCBlLmRldGFpbF07XG4gIH0pO1xuXG4gIHZhciBfZHpUb0NvbmZpZyRnZXQgPSBkelRvQ29uZmlnLmdldChlLmN1cnJlbnRUYXJnZXQpLFxuICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQuaXRlbXMsXG4gICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX2R6VG9Db25maWckZ2V0LmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG5cbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiaWdub3JpbmcgZHJhZ2dlZCBlbnRlcmVkIGJlY2F1c2UgZHJvcCBpcyBjdXJyZW50bHkgZGlzYWJsZWRcIjtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA9IGZhbHNlOyAvLyB0aGlzIGRlYWxzIHdpdGggYW5vdGhlciByYWNlIGNvbmRpdGlvbi4gaW4gcmFyZSBvY2Nhc2lvbnMgKHN1cGVyIHJhcGlkIG9wZXJhdGlvbnMpIHRoZSBsaXN0IGhhc24ndCB1cGRhdGVkIHlldFxuXG4gIGl0ZW1zID0gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bSVRFTV9JRF9LRVldICE9PSBzaGFkb3dFbERhdGFbSVRFTV9JRF9LRVldO1xuICB9KTtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiZHJhZ2dlZCBlbnRlcmVkIGl0ZW1zIFwiLmNvbmNhdCh0b1N0cmluZyhpdGVtcykpO1xuICB9KTtcblxuICBpZiAob3JpZ2luRHJvcFpvbmUgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgIHZhciBvcmlnaW5ab25lSXRlbXMgPSBkelRvQ29uZmlnLmdldChvcmlnaW5Ecm9wWm9uZSkuaXRlbXM7XG4gICAgdmFyIG5ld09yaWdpblpvbmVJdGVtcyA9IG9yaWdpblpvbmVJdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXRlbVtTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRV07XG4gICAgfSk7XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG9yaWdpbkRyb3Bab25lLCBuZXdPcmlnaW5ab25lSXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdHRURfRU5URVJFRF9BTk9USEVSLFxuICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2hhZG93UGxhY2VIb2xkZXJJZHggPSBmaW5kU2hhZG93UGxhY2VIb2xkZXJJZHgoaXRlbXMpO1xuXG4gICAgaWYgKHNoYWRvd1BsYWNlSG9sZGVySWR4ICE9PSAtMSkge1xuICAgICAgLy8gb25seSBoYXBwZW5zIHJpZ2h0IGFmdGVyIGRyYWcgc3RhcnQsIG9uIHRoZSBmaXJzdCBkcmFnIGVudGVyZWQgZXZlbnRcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJyZW1vdmluZyBwbGFjZWhvbGRlciBpdGVtIGZyb20gb3JpZ2luIGR6XCI7XG4gICAgICB9KTtcbiAgICAgIGl0ZW1zLnNwbGljZShzaGFkb3dQbGFjZUhvbGRlcklkeCwgMSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9lJGRldGFpbCRpbmRleE9iaiA9IGUuZGV0YWlsLmluZGV4T2JqLFxuICAgICAgaW5kZXggPSBfZSRkZXRhaWwkaW5kZXhPYmouaW5kZXgsXG4gICAgICBpc1Byb3hpbWl0eUJhc2VkID0gX2UkZGV0YWlsJGluZGV4T2JqLmlzUHJveGltaXR5QmFzZWQ7XG4gIHZhciBzaGFkb3dFbElkeCA9IGlzUHJveGltaXR5QmFzZWQgJiYgaW5kZXggPT09IGUuY3VycmVudFRhcmdldC5jaGlsZHJlbi5sZW5ndGggLSAxID8gaW5kZXggKyAxIDogaW5kZXg7XG4gIHNoYWRvd0VsRHJvcFpvbmUgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gIGl0ZW1zLnNwbGljZShzaGFkb3dFbElkeCwgMCwgc2hhZG93RWxEYXRhKTtcbiAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KGUuY3VycmVudFRhcmdldCwgaXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHR0VEX0VOVEVSRUQsXG4gICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEcmFnZ2VkTGVmdChlKSB7XG4gIC8vIGRlYWxpbmcgd2l0aCBhIHJhcmUgcmFjZSBjb25kaXRpb24gb24gZXh0cmVtZWx5IHJhcGlkIGNsaWNraW5nIGFuZCBkcm9wcGluZ1xuICBpZiAoIWlzV29ya2luZ09uUHJldmlvdXNEcmFnKSByZXR1cm47XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkcmFnZ2VkIGxlZnRcIiwgZS5jdXJyZW50VGFyZ2V0LCBlLmRldGFpbF07XG4gIH0pO1xuXG4gIHZhciBfZHpUb0NvbmZpZyRnZXQyID0gZHpUb0NvbmZpZy5nZXQoZS5jdXJyZW50VGFyZ2V0KSxcbiAgICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0Mi5pdGVtcyxcbiAgICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBfZHpUb0NvbmZpZyRnZXQyLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG5cbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSAmJiBlLmN1cnJlbnRUYXJnZXQgIT09IHNoYWRvd0VsRHJvcFpvbmUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImRyb3AgaXMgY3VycmVudGx5IGRpc2FibGVkXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoYWRvd0VsSWR4ID0gZmluZFNoYWRvd0VsZW1lbnRJZHgoaXRlbXMpO1xuICB2YXIgc2hhZG93SXRlbSA9IGl0ZW1zLnNwbGljZShzaGFkb3dFbElkeCwgMSlbMF07XG4gIHNoYWRvd0VsRHJvcFpvbmUgPSB1bmRlZmluZWQ7XG4gIHZhciBfZSRkZXRhaWwgPSBlLmRldGFpbCxcbiAgICAgIHR5cGUgPSBfZSRkZXRhaWwudHlwZSxcbiAgICAgIHRoZU90aGVyRHogPSBfZSRkZXRhaWwudGhlT3RoZXJEejtcblxuICBpZiAodHlwZSA9PT0gRFJBR0dFRF9MRUZUX1RZUEVTLk9VVFNJREVfT0ZfQU5ZIHx8IHR5cGUgPT09IERSQUdHRURfTEVGVF9UWVBFUy5MRUZUX0ZPUl9BTk9USEVSICYmIHRoZU90aGVyRHogIT09IG9yaWdpbkRyb3Bab25lICYmIGR6VG9Db25maWcuZ2V0KHRoZU90aGVyRHopLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImRyYWdnZWQgbGVmdCBhbGwsIHB1dHRpbmcgc2hhZG93IGVsZW1lbnQgYmFjayBpbiB0aGUgb3JpZ2luIGR6XCI7XG4gICAgfSk7XG4gICAgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSB0cnVlO1xuICAgIHNoYWRvd0VsRHJvcFpvbmUgPSBvcmlnaW5Ecm9wWm9uZTtcbiAgICB2YXIgb3JpZ2luWm9uZUl0ZW1zID0gZHpUb0NvbmZpZy5nZXQob3JpZ2luRHJvcFpvbmUpLml0ZW1zO1xuICAgIG9yaWdpblpvbmVJdGVtcy5zcGxpY2Uob3JpZ2luSW5kZXgsIDAsIHNoYWRvd0l0ZW0pO1xuICAgIGRpc3BhdGNoQ29uc2lkZXJFdmVudChvcmlnaW5Ecm9wWm9uZSwgb3JpZ2luWm9uZUl0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHR0VEX0xFRlRfQUxMLFxuICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgICB9KTtcbiAgfSAvLyBmb3IgdGhlIG9yaWdpbiBkeiwgd2hlbiB0aGUgZHJhZ2dlZCBpcyBvdXRzaWRlIG9mIGFueSwgdGhpcyB3aWxsIGJlIGZpcmVkIGluIGFkZGl0aW9uIHRvIHRoZSBwcmV2aW91cy4gdGhpcyBpcyBmb3Igc2ltcGxpY2l0eVxuXG5cbiAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KGUuY3VycmVudFRhcmdldCwgaXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHR0VEX0xFRlQsXG4gICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEcmFnZ2VkSXNPdmVySW5kZXgoZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wiZHJhZ2dlZCBpcyBvdmVyIGluZGV4XCIsIGUuY3VycmVudFRhcmdldCwgZS5kZXRhaWxdO1xuICB9KTtcblxuICB2YXIgX2R6VG9Db25maWckZ2V0MyA9IGR6VG9Db25maWcuZ2V0KGUuY3VycmVudFRhcmdldCksXG4gICAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDMuaXRlbXMsXG4gICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX2R6VG9Db25maWckZ2V0My5kcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuXG4gIGlmIChkcm9wRnJvbU90aGVyc0Rpc2FibGVkICYmIGUuY3VycmVudFRhcmdldCAhPT0gb3JpZ2luRHJvcFpvbmUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImRyb3AgaXMgY3VycmVudGx5IGRpc2FibGVkXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTtcbiAgdmFyIGluZGV4ID0gZS5kZXRhaWwuaW5kZXhPYmouaW5kZXg7XG4gIHZhciBzaGFkb3dFbElkeCA9IGZpbmRTaGFkb3dFbGVtZW50SWR4KGl0ZW1zKTtcbiAgaXRlbXMuc3BsaWNlKHNoYWRvd0VsSWR4LCAxKTtcbiAgaXRlbXMuc3BsaWNlKGluZGV4LCAwLCBzaGFkb3dFbERhdGEpO1xuICBkaXNwYXRjaENvbnNpZGVyRXZlbnQoZS5jdXJyZW50VGFyZ2V0LCBpdGVtcywge1xuICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdHRURfT1ZFUl9JTkRFWCxcbiAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgfSk7XG59IC8vIEdsb2JhbCBtb3VzZS90b3VjaC1ldmVudHMgaGFuZGxlcnNcblxuXG5mdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHZhciBjID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcbiAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB7XG4gICAgeDogYy5jbGllbnRYLFxuICAgIHk6IGMuY2xpZW50WVxuICB9O1xuICBkcmFnZ2VkRWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIi5jb25jYXQoY3VycmVudE1vdXNlUG9zaXRpb24ueCAtIGRyYWdTdGFydE1vdXNlUG9zaXRpb24ueCwgXCJweCwgXCIpLmNvbmNhdChjdXJyZW50TW91c2VQb3NpdGlvbi55IC0gZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbi55LCBcInB4LCAwKVwiKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRHJvcCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiZHJvcHBlZFwiO1xuICB9KTtcbiAgZmluYWxpemluZ1ByZXZpb3VzRHJhZyA9IHRydWU7IC8vIGNsZWFudXBcblxuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRHJvcCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlRHJvcCk7XG4gIHVuV2F0Y2hEcmFnZ2VkRWxlbWVudCgpO1xuICBtb3ZlRHJhZ2dlZEVsZW1lbnRUb1dhc0Ryb3BwZWRTdGF0ZShkcmFnZ2VkRWwpO1xuXG4gIGlmICghc2hhZG93RWxEcm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiZWxlbWVudCB3YXMgZHJvcHBlZCByaWdodCBhZnRlciBpdCBsZWZ0IG9yaWdpbiBidXQgYmVmb3JlIGVudGVyaW5nIHNvbWV3aGVyZSBlbHNlXCI7XG4gICAgfSk7XG4gICAgc2hhZG93RWxEcm9wWm9uZSA9IG9yaWdpbkRyb3Bab25lO1xuICB9XG5cbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyb3BwZWQgaW4gZHpcIiwgc2hhZG93RWxEcm9wWm9uZV07XG4gIH0pO1xuXG4gIHZhciBfZHpUb0NvbmZpZyRnZXQ0ID0gZHpUb0NvbmZpZy5nZXQoc2hhZG93RWxEcm9wWm9uZSksXG4gICAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDQuaXRlbXMsXG4gICAgICB0eXBlID0gX2R6VG9Db25maWckZ2V0NC50eXBlO1xuXG4gIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXModHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gIH0sIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikuZHJvcFRhcmdldENsYXNzZXM7XG4gIH0pO1xuICB2YXIgc2hhZG93RWxJZHggPSBmaW5kU2hhZG93RWxlbWVudElkeChpdGVtcyk7IC8vIHRoZSBoYW5kbGVyIG1pZ2h0IHJlbW92ZSB0aGUgc2hhZG93IGVsZW1lbnQsIGV4OiBkcmFndWxhIGxpa2UgY29weSBvbiBkcmFnXG5cbiAgaWYgKHNoYWRvd0VsSWR4ID09PSAtMSkgc2hhZG93RWxJZHggPSBvcmlnaW5JbmRleDtcbiAgaXRlbXMgPSBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRV0gPyBkcmFnZ2VkRWxEYXRhIDogaXRlbTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZmluYWxpemVXaXRoaW5ab25lKCkge1xuICAgIHVubG9ja09yaWdpbkR6TWluRGltZW5zaW9ucygpO1xuICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChzaGFkb3dFbERyb3Bab25lLCBpdGVtcywge1xuICAgICAgdHJpZ2dlcjogaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPyBUUklHR0VSUy5EUk9QUEVEX09VVFNJREVfT0ZfQU5ZIDogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgIH0pO1xuXG4gICAgaWYgKHNoYWRvd0VsRHJvcFpvbmUgIT09IG9yaWdpbkRyb3Bab25lKSB7XG4gICAgICAvLyBsZXR0aW5nIHRoZSBvcmlnaW4gZHJvcCB6b25lIGtub3cgdGhlIGVsZW1lbnQgd2FzIHBlcm1hbmVudGx5IHRha2VuIGF3YXlcbiAgICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChvcmlnaW5Ecm9wWm9uZSwgZHpUb0NvbmZpZy5nZXQob3JpZ2luRHJvcFpvbmUpLml0ZW1zLCB7XG4gICAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRST1BQRURfSU5UT19BTk9USEVSLFxuICAgICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB1bkRlY29yYXRlU2hhZG93RWxlbWVudChzaGFkb3dFbERyb3Bab25lLmNoaWxkcmVuW3NoYWRvd0VsSWR4XSk7XG4gICAgY2xlYW51cFBvc3REcm9wKCk7XG4gIH1cblxuICBhbmltYXRlRHJhZ2dlZFRvRmluYWxQb3NpdGlvbihzaGFkb3dFbElkeCwgZmluYWxpemVXaXRoaW5ab25lKTtcbn0gLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBoYW5kbGVEcm9wXG5cblxuZnVuY3Rpb24gYW5pbWF0ZURyYWdnZWRUb0ZpbmFsUG9zaXRpb24oc2hhZG93RWxJZHgsIGNhbGxiYWNrKSB7XG4gIHZhciBzaGFkb3dFbFJlY3QgPSBnZXRCb3VuZGluZ1JlY3ROb1RyYW5zZm9ybXMoc2hhZG93RWxEcm9wWm9uZS5jaGlsZHJlbltzaGFkb3dFbElkeF0pO1xuICB2YXIgbmV3VHJhbnNmb3JtID0ge1xuICAgIHg6IHNoYWRvd0VsUmVjdC5sZWZ0IC0gcGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUubGVmdCksXG4gICAgeTogc2hhZG93RWxSZWN0LnRvcCAtIHBhcnNlRmxvYXQoZHJhZ2dlZEVsLnN0eWxlLnRvcClcbiAgfTtcblxuICB2YXIgX2R6VG9Db25maWckZ2V0NSA9IGR6VG9Db25maWcuZ2V0KHNoYWRvd0VsRHJvcFpvbmUpLFxuICAgICAgZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMgPSBfZHpUb0NvbmZpZyRnZXQ1LmRyb3BBbmltYXRpb25EdXJhdGlvbk1zO1xuXG4gIHZhciB0cmFuc2l0aW9uID0gXCJ0cmFuc2Zvcm0gXCIuY29uY2F0KGRyb3BBbmltYXRpb25EdXJhdGlvbk1zLCBcIm1zIGVhc2VcIik7XG4gIGRyYWdnZWRFbC5zdHlsZS50cmFuc2l0aW9uID0gZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gPyBkcmFnZ2VkRWwuc3R5bGUudHJhbnNpdGlvbiArIFwiLFwiICsgdHJhbnNpdGlvbiA6IHRyYW5zaXRpb247XG4gIGRyYWdnZWRFbC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChuZXdUcmFuc2Zvcm0ueCwgXCJweCwgXCIpLmNvbmNhdChuZXdUcmFuc2Zvcm0ueSwgXCJweCwgMClcIik7XG4gIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCBkcm9wQW5pbWF0aW9uRHVyYXRpb25Ncyk7XG59XG4vKiBjbGVhbnVwICovXG5cblxuZnVuY3Rpb24gY2xlYW51cFBvc3REcm9wKCkge1xuICBkcmFnZ2VkRWwucmVtb3ZlKCk7XG4gIG9yaWdpbmFsRHJhZ1RhcmdldC5yZW1vdmUoKTtcbiAgZHJhZ2dlZEVsID0gdW5kZWZpbmVkO1xuICBvcmlnaW5hbERyYWdUYXJnZXQgPSB1bmRlZmluZWQ7XG4gIGRyYWdnZWRFbERhdGEgPSB1bmRlZmluZWQ7XG4gIGRyYWdnZWRFbFR5cGUgPSB1bmRlZmluZWQ7XG4gIG9yaWdpbkRyb3Bab25lID0gdW5kZWZpbmVkO1xuICBvcmlnaW5JbmRleCA9IHVuZGVmaW5lZDtcbiAgc2hhZG93RWxEYXRhID0gdW5kZWZpbmVkO1xuICBzaGFkb3dFbERyb3Bab25lID0gdW5kZWZpbmVkO1xuICBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICBjdXJyZW50TW91c2VQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgaXNXb3JraW5nT25QcmV2aW91c0RyYWcgPSBmYWxzZTtcbiAgZmluYWxpemluZ1ByZXZpb3VzRHJhZyA9IGZhbHNlO1xuICB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnMgPSB1bmRlZmluZWQ7XG4gIGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGRuZHpvbmUobm9kZSwgb3B0aW9ucykge1xuICB2YXIgY29uZmlnID0ge1xuICAgIGl0ZW1zOiB1bmRlZmluZWQsXG4gICAgdHlwZTogdW5kZWZpbmVkLFxuICAgIGZsaXBEdXJhdGlvbk1zOiAwLFxuICAgIGRyYWdEaXNhYmxlZDogZmFsc2UsXG4gICAgbW9ycGhEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcFRhcmdldFN0eWxlOiBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFLFxuICAgIGRyb3BUYXJnZXRDbGFzc2VzOiBbXSxcbiAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudDogZnVuY3Rpb24gdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQoKSB7fSxcbiAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3I6IGZhbHNlXG4gIH07XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkbmR6b25lIGdvb2QgdG8gZ28gb3B0aW9uczogXCIuY29uY2F0KHRvU3RyaW5nKG9wdGlvbnMpLCBcIiwgY29uZmlnOiBcIikuY29uY2F0KHRvU3RyaW5nKGNvbmZpZykpLCB7XG4gICAgICBub2RlOiBub2RlXG4gICAgfV07XG4gIH0pO1xuICB2YXIgZWxUb0lkeCA9IG5ldyBNYXAoKTtcblxuICBmdW5jdGlvbiBhZGRNYXliZUxpc3RlbmVycygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmVNYXliZURyYWdTdGFydCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBoYW5kbGVNb3VzZU1vdmVNYXliZURyYWdTdGFydCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVGYWxzZUFsYXJtLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlRmFsc2VBbGFybSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1heWJlTGlzdGVuZXJzKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZU1heWJlRHJhZ1N0YXJ0KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBoYW5kbGVNb3VzZU1vdmVNYXliZURyYWdTdGFydCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGhhbmRsZUZhbHNlQWxhcm0pO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlRmFsc2VBbGFybSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVGYWxzZUFsYXJtKCkge1xuICAgIHJlbW92ZU1heWJlTGlzdGVuZXJzKCk7XG4gICAgb3JpZ2luYWxEcmFnVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIGRyYWdTdGFydE1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmVNYXliZURyYWdTdGFydChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcbiAgICBjdXJyZW50TW91c2VQb3NpdGlvbiA9IHtcbiAgICAgIHg6IGMuY2xpZW50WCxcbiAgICAgIHk6IGMuY2xpZW50WVxuICAgIH07XG5cbiAgICBpZiAoTWF0aC5hYnMoY3VycmVudE1vdXNlUG9zaXRpb24ueCAtIGRyYWdTdGFydE1vdXNlUG9zaXRpb24ueCkgPj0gTUlOX01PVkVNRU5UX0JFRk9SRV9EUkFHX1NUQVJUX1BYIHx8IE1hdGguYWJzKGN1cnJlbnRNb3VzZVBvc2l0aW9uLnkgLSBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uLnkpID49IE1JTl9NT1ZFTUVOVF9CRUZPUkVfRFJBR19TVEFSVF9QWCkge1xuICAgICAgcmVtb3ZlTWF5YmVMaXN0ZW5lcnMoKTtcbiAgICAgIGhhbmRsZURyYWdTdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy8gb24gc2FmYXJpIGNsaWNraW5nIG9uIGEgc2VsZWN0IGVsZW1lbnQgZG9lc24ndCBmaXJlIG1vdXNldXAgYXQgdGhlIGVuZCBvZiB0aGUgY2xpY2sgYW5kIGluIGdlbmVyYWwgdGhpcyBtYWtlcyBtb3JlIHNlbnNlXG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQgJiYgKGUudGFyZ2V0LnZhbHVlICE9PSB1bmRlZmluZWQgfHwgZS50YXJnZXQuaXNDb250ZW50RWRpdGFibGUpKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwid29uJ3QgaW5pdGlhdGUgZHJhZyBvbiBhIG5lc3RlZCBpbnB1dCBlbGVtZW50XCI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHByZXZlbnRzIHJlc3BvbmRpbmcgdG8gYW55IGJ1dHRvbiBidXQgbGVmdCBjbGljayB3aGljaCBlcXVhbHMgMCAod2hpY2ggaXMgZmFsc3kpXG5cblxuICAgIGlmIChlLmJ1dHRvbikge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcImlnbm9yaW5nIG5vbmUgbGVmdCBjbGljayBidXR0b246IFwiLmNvbmNhdChlLmJ1dHRvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNXb3JraW5nT25QcmV2aW91c0RyYWcpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJjYW5ub3Qgc3RhcnQgYSBuZXcgZHJhZyBiZWZvcmUgZmluYWxpemluZyBwcmV2aW91cyBvbmVcIjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIGMgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICAgIGRyYWdTdGFydE1vdXNlUG9zaXRpb24gPSB7XG4gICAgICB4OiBjLmNsaWVudFgsXG4gICAgICB5OiBjLmNsaWVudFlcbiAgICB9O1xuICAgIGN1cnJlbnRNb3VzZVBvc2l0aW9uID0gX29iamVjdFNwcmVhZDIoe30sIGRyYWdTdGFydE1vdXNlUG9zaXRpb24pO1xuICAgIG9yaWdpbmFsRHJhZ1RhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICBhZGRNYXliZUxpc3RlbmVycygpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KCkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFtcImRyYWcgc3RhcnQgY29uZmlnOiBcIi5jb25jYXQodG9TdHJpbmcoY29uZmlnKSksIG9yaWdpbmFsRHJhZ1RhcmdldF07XG4gICAgfSk7XG4gICAgaXNXb3JraW5nT25QcmV2aW91c0RyYWcgPSB0cnVlOyAvLyBpbml0aWFsaXNpbmcgZ2xvYmFsc1xuXG4gICAgdmFyIGN1cnJlbnRJZHggPSBlbFRvSWR4LmdldChvcmlnaW5hbERyYWdUYXJnZXQpO1xuICAgIG9yaWdpbkluZGV4ID0gY3VycmVudElkeDtcbiAgICBvcmlnaW5Ecm9wWm9uZSA9IG9yaWdpbmFsRHJhZ1RhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgIC8qKiBAdHlwZSB7U2hhZG93Um9vdCB8IEhUTUxEb2N1bWVudH0gKi9cblxuICAgIHZhciByb290Tm9kZSA9IG9yaWdpbkRyb3Bab25lLmdldFJvb3ROb2RlKCk7XG4gICAgdmFyIG9yaWdpbkRyb3Bab25lUm9vdCA9IHJvb3ROb2RlLmJvZHkgfHwgcm9vdE5vZGU7XG4gICAgdmFyIGl0ZW1zID0gY29uZmlnLml0ZW1zLFxuICAgICAgICB0eXBlID0gY29uZmlnLnR5cGUsXG4gICAgICAgIGNlbnRyZURyYWdnZWRPbkN1cnNvciA9IGNvbmZpZy5jZW50cmVEcmFnZ2VkT25DdXJzb3I7XG4gICAgZHJhZ2dlZEVsRGF0YSA9IF9vYmplY3RTcHJlYWQyKHt9LCBpdGVtc1tjdXJyZW50SWR4XSk7XG4gICAgZHJhZ2dlZEVsVHlwZSA9IHR5cGU7XG4gICAgc2hhZG93RWxEYXRhID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGRyYWdnZWRFbERhdGEpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRSwgdHJ1ZSkpOyAvLyBUaGUgaW5pdGlhbCBzaGFkb3cgZWxlbWVudC4gV2UgbmVlZCBhIGRpZmZlcmVudCBpZCBhdCBmaXJzdCBpbiBvcmRlciB0byBhdm9pZCBjb25mbGljdHMgYW5kIHRpbWluZyBpc3N1ZXNcblxuICAgIHZhciBwbGFjZUhvbGRlckVsRGF0YSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBzaGFkb3dFbERhdGEpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBJVEVNX0lEX0tFWSwgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQpKTsgLy8gY3JlYXRpbmcgdGhlIGRyYWdnYWJsZSBlbGVtZW50XG5cblxuICAgIGRyYWdnZWRFbCA9IGNyZWF0ZURyYWdnZWRFbGVtZW50RnJvbShvcmlnaW5hbERyYWdUYXJnZXQsIGNlbnRyZURyYWdnZWRPbkN1cnNvciAmJiBjdXJyZW50TW91c2VQb3NpdGlvbik7IC8vIFdlIHdpbGwga2VlcCB0aGUgb3JpZ2luYWwgZG9tIG5vZGUgaW4gdGhlIGRvbSBiZWNhdXNlIHRvdWNoIGV2ZW50cyBrZWVwIGZpcmluZyBvbiBpdCwgd2Ugd2FudCB0byByZS1hZGQgaXQgYWZ0ZXIgdGhlIGZyYW1ld29yayByZW1vdmVzIGl0XG5cbiAgICBmdW5jdGlvbiBrZWVwT3JpZ2luYWxFbGVtZW50SW5Eb20oKSB7XG4gICAgICBpZiAoIWRyYWdnZWRFbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIG9yaWdpbkRyb3Bab25lUm9vdC5hcHBlbmRDaGlsZChkcmFnZ2VkRWwpOyAvLyB0byBwcmV2ZW50IHRoZSBvdXRsaW5lIGZyb20gZGlzYXBwZWFyaW5nXG5cbiAgICAgICAgZHJhZ2dlZEVsLmZvY3VzKCk7XG4gICAgICAgIHdhdGNoRHJhZ2dlZEVsZW1lbnQoKTtcbiAgICAgICAgaGlkZU9yaWdpbmFsRHJhZ1RhcmdldChvcmlnaW5hbERyYWdUYXJnZXQpO1xuICAgICAgICBvcmlnaW5Ecm9wWm9uZVJvb3QuYXBwZW5kQ2hpbGQob3JpZ2luYWxEcmFnVGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoa2VlcE9yaWdpbmFsRWxlbWVudEluRG9tKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGtlZXBPcmlnaW5hbEVsZW1lbnRJbkRvbSk7XG4gICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoQXJyYXkuZnJvbSh0eXBlVG9Ecm9wWm9uZXMuZ2V0KGNvbmZpZy50eXBlKSkuZmlsdGVyKGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6ID09PSBvcmlnaW5Ecm9wWm9uZSB8fCAhZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgfSksIGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gICAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICAgIH0pOyAvLyByZW1vdmluZyB0aGUgb3JpZ2luYWwgZWxlbWVudCBieSByZW1vdmluZyBpdHMgZGF0YSBlbnRyeVxuXG4gICAgaXRlbXMuc3BsaWNlKGN1cnJlbnRJZHgsIDEsIHBsYWNlSG9sZGVyRWxEYXRhKTtcbiAgICB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnMgPSBwcmV2ZW50U2hyaW5raW5nKG9yaWdpbkRyb3Bab25lKTtcbiAgICBkaXNwYXRjaENvbnNpZGVyRXZlbnQob3JpZ2luRHJvcFpvbmUsIGl0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHX1NUQVJURUQsXG4gICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgIH0pOyAvLyBoYW5kaW5nIG92ZXIgdG8gZ2xvYmFsIGhhbmRsZXJzIC0gc3RhcnRpbmcgdG8gd2F0Y2ggdGhlIGVsZW1lbnRcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRHJvcCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZURyb3AsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmUoX3JlZikge1xuICAgIHZhciBfcmVmJGl0ZW1zID0gX3JlZi5pdGVtcyxcbiAgICAgICAgaXRlbXMgPSBfcmVmJGl0ZW1zID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJGl0ZW1zLFxuICAgICAgICBfcmVmJGZsaXBEdXJhdGlvbk1zID0gX3JlZi5mbGlwRHVyYXRpb25NcyxcbiAgICAgICAgZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMgPSBfcmVmJGZsaXBEdXJhdGlvbk1zID09PSB2b2lkIDAgPyAwIDogX3JlZiRmbGlwRHVyYXRpb25NcyxcbiAgICAgICAgX3JlZiR0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICBuZXdUeXBlID0gX3JlZiR0eXBlID09PSB2b2lkIDAgPyBERUZBVUxUX0RST1BfWk9ORV9UWVBFIDogX3JlZiR0eXBlLFxuICAgICAgICBfcmVmJGRyYWdEaXNhYmxlZCA9IF9yZWYuZHJhZ0Rpc2FibGVkLFxuICAgICAgICBkcmFnRGlzYWJsZWQgPSBfcmVmJGRyYWdEaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRyYWdEaXNhYmxlZCxcbiAgICAgICAgX3JlZiRtb3JwaERpc2FibGVkID0gX3JlZi5tb3JwaERpc2FibGVkLFxuICAgICAgICBtb3JwaERpc2FibGVkID0gX3JlZiRtb3JwaERpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkbW9ycGhEaXNhYmxlZCxcbiAgICAgICAgX3JlZiRkcm9wRnJvbU90aGVyc0RpID0gX3JlZi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkLFxuICAgICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX3JlZiRkcm9wRnJvbU90aGVyc0RpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZHJvcEZyb21PdGhlcnNEaSxcbiAgICAgICAgX3JlZiRkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmLmRyb3BUYXJnZXRTdHlsZSxcbiAgICAgICAgZHJvcFRhcmdldFN0eWxlID0gX3JlZiRkcm9wVGFyZ2V0U3R5bGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9UQVJHRVRfU1RZTEUgOiBfcmVmJGRyb3BUYXJnZXRTdHlsZSxcbiAgICAgICAgX3JlZiRkcm9wVGFyZ2V0Q2xhc3NlID0gX3JlZi5kcm9wVGFyZ2V0Q2xhc3NlcyxcbiAgICAgICAgZHJvcFRhcmdldENsYXNzZXMgPSBfcmVmJGRyb3BUYXJnZXRDbGFzc2UgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRkcm9wVGFyZ2V0Q2xhc3NlLFxuICAgICAgICBfcmVmJHRyYW5zZm9ybURyYWdnZWQgPSBfcmVmLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50LFxuICAgICAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IF9yZWYkdHJhbnNmb3JtRHJhZ2dlZCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJHRyYW5zZm9ybURyYWdnZWQsXG4gICAgICAgIF9yZWYkY2VudHJlRHJhZ2dlZE9uQyA9IF9yZWYuY2VudHJlRHJhZ2dlZE9uQ3Vyc29yLFxuICAgICAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBfcmVmJGNlbnRyZURyYWdnZWRPbkMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRjZW50cmVEcmFnZ2VkT25DO1xuICAgIGNvbmZpZy5kcm9wQW5pbWF0aW9uRHVyYXRpb25NcyA9IGRyb3BBbmltYXRpb25EdXJhdGlvbk1zO1xuXG4gICAgaWYgKGNvbmZpZy50eXBlICYmIG5ld1R5cGUgIT09IGNvbmZpZy50eXBlKSB7XG4gICAgICB1bnJlZ2lzdGVyRHJvcFpvbmUobm9kZSwgY29uZmlnLnR5cGUpO1xuICAgIH1cblxuICAgIGNvbmZpZy50eXBlID0gbmV3VHlwZTtcbiAgICByZWdpc3RlckRyb3Bab25lKG5vZGUsIG5ld1R5cGUpO1xuICAgIGNvbmZpZy5pdGVtcyA9IF90b0NvbnN1bWFibGVBcnJheShpdGVtcyk7XG4gICAgY29uZmlnLmRyYWdEaXNhYmxlZCA9IGRyYWdEaXNhYmxlZDtcbiAgICBjb25maWcubW9ycGhEaXNhYmxlZCA9IG1vcnBoRGlzYWJsZWQ7XG4gICAgY29uZmlnLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50ID0gdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQ7XG4gICAgY29uZmlnLmNlbnRyZURyYWdnZWRPbkN1cnNvciA9IGNlbnRyZURyYWdnZWRPbkN1cnNvcjsgLy8gcmVhbHRpbWUgdXBkYXRlIGZvciBkcm9wVGFyZ2V0U3R5bGVcblxuICAgIGlmIChpc1dvcmtpbmdPblByZXZpb3VzRHJhZyAmJiAhZmluYWxpemluZ1ByZXZpb3VzRHJhZyAmJiAoIWFyZU9iamVjdHNTaGFsbG93RXF1YWwoZHJvcFRhcmdldFN0eWxlLCBjb25maWcuZHJvcFRhcmdldFN0eWxlKSB8fCAhYXJlQXJyYXlzU2hhbGxvd0VxdWFsU2FtZU9yZGVyKGRyb3BUYXJnZXRDbGFzc2VzLCBjb25maWcuZHJvcFRhcmdldENsYXNzZXMpKSkge1xuICAgICAgc3R5bGVJbmFjdGl2ZURyb3Bab25lcyhbbm9kZV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kcm9wVGFyZ2V0U3R5bGU7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICAgIH0pO1xuICAgICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVGFyZ2V0U3R5bGU7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbmZpZy5kcm9wVGFyZ2V0U3R5bGUgPSBkcm9wVGFyZ2V0U3R5bGU7XG4gICAgY29uZmlnLmRyb3BUYXJnZXRDbGFzc2VzID0gX3RvQ29uc3VtYWJsZUFycmF5KGRyb3BUYXJnZXRDbGFzc2VzKTsgLy8gcmVhbHRpbWUgdXBkYXRlIGZvciBkcm9wRnJvbU90aGVyc0Rpc2FibGVkXG5cbiAgICBmdW5jdGlvbiBnZXRDb25maWdQcm9wKGR6LCBwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KSA/IGR6VG9Db25maWcuZ2V0KGR6KVtwcm9wTmFtZV0gOiBjb25maWdbcHJvcE5hbWVdO1xuICAgIH1cblxuICAgIGlmIChpc1dvcmtpbmdPblByZXZpb3VzRHJhZyAmJiBjb25maWcuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCAhPT0gZHJvcEZyb21PdGhlcnNEaXNhYmxlZCkge1xuICAgICAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQpIHtcbiAgICAgICAgc3R5bGVJbmFjdGl2ZURyb3Bab25lcyhbbm9kZV0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgICAgIHJldHVybiBnZXRDb25maWdQcm9wKGR6LCBcImRyb3BUYXJnZXRTdHlsZVwiKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbmZpZ1Byb3AoZHosIFwiZHJvcFRhcmdldENsYXNzZXNcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoZHopIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnUHJvcChkeiwgXCJkcm9wVGFyZ2V0U3R5bGVcIik7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgICAgIHJldHVybiBnZXRDb25maWdQcm9wKGR6LCBcImRyb3BUYXJnZXRDbGFzc2VzXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWcuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgZHpUb0NvbmZpZy5zZXQobm9kZSwgY29uZmlnKTtcbiAgICB2YXIgc2hhZG93RWxJZHggPSBmaW5kU2hhZG93RWxlbWVudElkeChjb25maWcuaXRlbXMpO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaWR4KSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlRWwgPSBub2RlLmNoaWxkcmVuW2lkeF07XG4gICAgICBzdHlsZURyYWdnYWJsZShkcmFnZ2FibGVFbCwgZHJhZ0Rpc2FibGVkKTtcblxuICAgICAgaWYgKGlkeCA9PT0gc2hhZG93RWxJZHgpIHtcbiAgICAgICAgaWYgKCFtb3JwaERpc2FibGVkKSB7XG4gICAgICAgICAgbW9ycGhEcmFnZ2VkRWxlbWVudFRvQmVMaWtlKGRyYWdnZWRFbCwgZHJhZ2dhYmxlRWwsIGN1cnJlbnRNb3VzZVBvc2l0aW9uLngsIGN1cnJlbnRNb3VzZVBvc2l0aW9uLnksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25maWcudHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQoZHJhZ2dlZEVsLCBkcmFnZ2VkRWxEYXRhLCBpZHgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVjb3JhdGVTaGFkb3dFbChkcmFnZ2FibGVFbCk7XG4gICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICB9XG5cbiAgICAgIGRyYWdnYWJsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZWxUb01vdXNlRG93bkxpc3RlbmVyLmdldChkcmFnZ2FibGVFbCkpO1xuICAgICAgZHJhZ2dhYmxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZWxUb01vdXNlRG93bkxpc3RlbmVyLmdldChkcmFnZ2FibGVFbCkpO1xuXG4gICAgICBpZiAoIWRyYWdEaXNhYmxlZCkge1xuICAgICAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgICAgIGVsVG9Nb3VzZURvd25MaXN0ZW5lci5zZXQoZHJhZ2dhYmxlRWwsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgICB9IC8vIHVwZGF0aW5nIHRoZSBpZHhcblxuXG4gICAgICBlbFRvSWR4LnNldChkcmFnZ2FibGVFbCwgaWR4KTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKGlkeCk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbmZpZ3VyZShvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicG9pbnRlciBkbmR6b25lIHdpbGwgdXBkYXRlIG5ld09wdGlvbnM6IFwiLmNvbmNhdCh0b1N0cmluZyhuZXdPcHRpb25zKSk7XG4gICAgICB9KTtcbiAgICAgIGNvbmZpZ3VyZShuZXdPcHRpb25zKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicG9pbnRlciBkbmR6b25lIHdpbGwgZGVzdHJveVwiO1xuICAgICAgfSk7XG4gICAgICB1bnJlZ2lzdGVyRHJvcFpvbmUobm9kZSwgY29uZmlnLnR5cGUpO1xuICAgICAgZHpUb0NvbmZpZ1tcImRlbGV0ZVwiXShub2RlKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBfSURfVE9fSU5TVFJVQ1RJT047XG52YXIgSU5TVFJVQ1RJT05fSURzID0ge1xuICBETkRfWk9ORV9BQ1RJVkU6IFwiZG5kLXpvbmUtYWN0aXZlXCIsXG4gIERORF9aT05FX0RSQUdfRElTQUJMRUQ6IFwiZG5kLXpvbmUtZHJhZy1kaXNhYmxlZFwiXG59O1xudmFyIElEX1RPX0lOU1RSVUNUSU9OID0gKF9JRF9UT19JTlNUUlVDVElPTiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX0lEX1RPX0lOU1RSVUNUSU9OLCBJTlNUUlVDVElPTl9JRHMuRE5EX1pPTkVfQUNUSVZFLCBcIlRhYiB0byBvbmUgdGhlIGl0ZW1zIGFuZCBwcmVzcyBzcGFjZS1iYXIgb3IgZW50ZXIgdG8gc3RhcnQgZHJhZ2dpbmcgaXRcIiksIF9kZWZpbmVQcm9wZXJ0eShfSURfVE9fSU5TVFJVQ1RJT04sIElOU1RSVUNUSU9OX0lEcy5ETkRfWk9ORV9EUkFHX0RJU0FCTEVELCBcIlRoaXMgaXMgYSBkaXNhYmxlZCBkcmFnIGFuZCBkcm9wIGxpc3RcIiksIF9JRF9UT19JTlNUUlVDVElPTik7XG52YXIgQUxFUlRfRElWX0lEID0gXCJkbmQtYWN0aW9uLWFyaWEtYWxlcnRcIjtcbnZhciBhbGVydHNEaXY7XG5cbmZ1bmN0aW9uIGluaXRBcmlhT25Ccm93c2VyKCkge1xuICAvLyBzZXR0aW5nIHRoZSBkeW5hbWljIGFsZXJ0c1xuICBhbGVydHNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gIChmdW5jdGlvbiBpbml0QWxlcnRzRGl2KCkge1xuICAgIGFsZXJ0c0Rpdi5pZCA9IEFMRVJUX0RJVl9JRDsgLy8gdGFiIGluZGV4IC0xIG1ha2VzIHRoZSBhbGVydCBiZSByZWFkIHR3aWNlIG9uIGNocm9tZSBmb3Igc29tZSByZWFzb25cbiAgICAvL2FsZXJ0c0Rpdi50YWJJbmRleCA9IC0xO1xuXG4gICAgYWxlcnRzRGl2LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS5ib3R0b20gPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS56SW5kZXggPSBcIi01XCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydFwiKTtcbiAgfSkoKTtcblxuICBkb2N1bWVudC5ib2R5LnByZXBlbmQoYWxlcnRzRGl2KTsgLy8gc2V0dGluZyB0aGUgaW5zdHJ1Y3Rpb25zXG5cbiAgT2JqZWN0LmVudHJpZXMoSURfVE9fSU5TVFJVQ1RJT04pLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgaWQgPSBfcmVmMlswXSxcbiAgICAgICAgdHh0ID0gX3JlZjJbMV07XG5cbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5wcmVwZW5kKGluc3RydWN0aW9uVG9IaWRkZW5EaXYoaWQsIHR4dCkpO1xuICB9KTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIHN0YXRpYyBhcmlhIGluc3RydWN0aW9ucyBzbyB0aGV5IGNhbiBiZSBhdHRhY2hlZCB0byB6b25lc1xuICogQHJldHVybiB7e0RORF9aT05FX0FDVElWRTogc3RyaW5nLCBETkRfWk9ORV9EUkFHX0RJU0FCTEVEOiBzdHJpbmd9IHwgbnVsbH0gLSB0aGUgSURzIGZvciBzdGF0aWMgYXJpYSBpbnN0cnVjdGlvbiAodG8gYmUgdXNlZCB2aWEgYXJpYS1kZXNjcmliZWRieSkgb3IgbnVsbCBvbiB0aGUgc2VydmVyXG4gKi9cblxuXG5mdW5jdGlvbiBpbml0QXJpYSgpIHtcbiAgaWYgKGlzT25TZXJ2ZXIpIHJldHVybiBudWxsO1xuXG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICBpbml0QXJpYU9uQnJvd3NlcigpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBpbml0QXJpYU9uQnJvd3Nlcik7XG4gIH1cblxuICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIElOU1RSVUNUSU9OX0lEcyk7XG59XG5cbmZ1bmN0aW9uIGluc3RydWN0aW9uVG9IaWRkZW5EaXYoaWQsIHR4dCkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LmlkID0gaWQ7XG4gIGRpdi5pbm5lckhUTUwgPSBcIjxwPlwiLmNvbmNhdCh0eHQsIFwiPC9wPlwiKTtcbiAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICBkaXYuc3R5bGUuekluZGV4ID0gXCItNVwiO1xuICByZXR1cm4gZGl2O1xufVxuLyoqXG4gKiBXaWxsIG1ha2UgdGhlIHNjcmVlbiByZWFkZXIgYWxlcnQgdGhlIHByb3ZpZGVkIHRleHQgdG8gdGhlIHVzZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eHRcbiAqL1xuXG5cbmZ1bmN0aW9uIGFsZXJ0VG9TY3JlZW5SZWFkZXIodHh0KSB7XG4gIGFsZXJ0c0Rpdi5pbm5lckhUTUwgPSBcIlwiO1xuICB2YXIgYWxlcnRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodHh0KTtcbiAgYWxlcnRzRGl2LmFwcGVuZENoaWxkKGFsZXJ0VGV4dCk7IC8vIHRoaXMgaXMgbmVlZGVkIGZvciBTYWZhcmlcblxuICBhbGVydHNEaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBhbGVydHNEaXYuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG59XG5cbnZhciBERUZBVUxUX0RST1BfWk9ORV9UWVBFJDEgPSBcIi0tYW55LS1cIjtcbnZhciBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFJDEgPSB7XG4gIG91dGxpbmU6IFwicmdiYSgyNTUsIDI1NSwgMTAyLCAwLjcpIHNvbGlkIDJweFwiXG59O1xudmFyIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbnZhciBkcmFnZ2VkSXRlbVR5cGU7XG52YXIgZm9jdXNlZER6O1xudmFyIGZvY3VzZWREekxhYmVsID0gXCJcIjtcbnZhciBmb2N1c2VkSXRlbTtcbnZhciBmb2N1c2VkSXRlbUlkO1xudmFyIGZvY3VzZWRJdGVtTGFiZWwgPSBcIlwiO1xudmFyIGFsbERyYWdUYXJnZXRzID0gbmV3IFdlYWtTZXQoKTtcbnZhciBlbFRvS2V5RG93bkxpc3RlbmVycyA9IG5ldyBXZWFrTWFwKCk7XG52YXIgZWxUb0ZvY3VzTGlzdGVuZXJzID0gbmV3IFdlYWtNYXAoKTtcbnZhciBkelRvSGFuZGxlcyA9IG5ldyBNYXAoKTtcbnZhciBkelRvQ29uZmlnJDEgPSBuZXcgTWFwKCk7XG52YXIgdHlwZVRvRHJvcFpvbmVzJDEgPSBuZXcgTWFwKCk7XG4vKiBUT0RPIChwb3RlbnRpYWxseSlcbiAqIHdoYXQncyB0aGUgZGVhbCB3aXRoIHRoZSBibGFjayBib3JkZXIgb2Ygdm9pY2UtcmVhZGVyIG5vdCBmb2xsb3dpbmcgZm9jdXM/XG4gKiBtYXliZSBrZWVwIGZvY3VzIG9uIHRoZSBsYXN0IGRyYWdnZWQgaXRlbSB1cG9uIGRyb3A/XG4gKi9cblxudmFyIElOU1RSVUNUSU9OX0lEcyQxID0gaW5pdEFyaWEoKTtcbi8qIGRyb3Atem9uZXMgcmVnaXN0cmF0aW9uIG1hbmFnZW1lbnQgKi9cblxuZnVuY3Rpb24gcmVnaXN0ZXJEcm9wWm9uZSQxKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwicmVnaXN0ZXJpbmcgZHJvcC16b25lIGlmIGFic2VudFwiO1xuICB9KTtcblxuICBpZiAodHlwZVRvRHJvcFpvbmVzJDEuc2l6ZSA9PT0gMCkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiYWRkaW5nIGdsb2JhbCBrZXlkb3duIGFuZCBjbGljayBoYW5kbGVyc1wiO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBnbG9iYWxLZXlEb3duSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBnbG9iYWxDbGlja0hhbmRsZXIpO1xuICB9XG5cbiAgaWYgKCF0eXBlVG9Ecm9wWm9uZXMkMS5oYXModHlwZSkpIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXMkMS5zZXQodHlwZSwgbmV3IFNldCgpKTtcbiAgfVxuXG4gIGlmICghdHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpLmhhcyhkcm9wWm9uZUVsKSkge1xuICAgIHR5cGVUb0Ryb3Bab25lcyQxLmdldCh0eXBlKS5hZGQoZHJvcFpvbmVFbCk7XG4gICAgaW5jcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJEcm9wWm9uZSQxKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW5yZWdpc3RlcmluZyBkcm9wLXpvbmVcIjtcbiAgfSk7XG5cbiAgaWYgKGZvY3VzZWREeiA9PT0gZHJvcFpvbmVFbCkge1xuICAgIGhhbmRsZURyb3AkMSgpO1xuICB9XG5cbiAgdHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpW1wiZGVsZXRlXCJdKGRyb3Bab25lRWwpO1xuICBkZWNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCk7XG5cbiAgaWYgKHR5cGVUb0Ryb3Bab25lcyQxLmdldCh0eXBlKS5zaXplID09PSAwKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzJDFbXCJkZWxldGVcIl0odHlwZSk7XG4gIH1cblxuICBpZiAodHlwZVRvRHJvcFpvbmVzJDEuc2l6ZSA9PT0gMCkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwicmVtb3ZpbmcgZ2xvYmFsIGtleWRvd24gYW5kIGNsaWNrIGhhbmRsZXJzXCI7XG4gICAgfSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGdsb2JhbEtleURvd25IYW5kbGVyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGdsb2JhbENsaWNrSGFuZGxlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2xvYmFsS2V5RG93bkhhbmRsZXIoZSkge1xuICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcblxuICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAge1xuICAgICAgICBoYW5kbGVEcm9wJDEoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2xvYmFsQ2xpY2tIYW5kbGVyKCkge1xuICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcblxuICBpZiAoIWFsbERyYWdUYXJnZXRzLmhhcyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiY2xpY2tlZCBvdXRzaWRlIG9mIGFueSBkcmFnZ2FibGVcIjtcbiAgICB9KTtcbiAgICBoYW5kbGVEcm9wJDEoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVab25lRm9jdXMoZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ6b25lIGZvY3VzXCI7XG4gIH0pO1xuICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgdmFyIG5ld2x5Rm9jdXNlZER6ID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpZiAobmV3bHlGb2N1c2VkRHogPT09IGZvY3VzZWREeikgcmV0dXJuO1xuICBmb2N1c2VkRHpMYWJlbCA9IG5ld2x5Rm9jdXNlZER6LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIikgfHwgXCJcIjtcblxuICB2YXIgX2R6VG9Db25maWckZ2V0ID0gZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLFxuICAgICAgb3JpZ2luSXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQuaXRlbXM7XG5cbiAgdmFyIG9yaWdpbkl0ZW0gPSBvcmlnaW5JdGVtcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bSVRFTV9JRF9LRVldID09PSBmb2N1c2VkSXRlbUlkO1xuICB9KTtcbiAgdmFyIG9yaWdpbklkeCA9IG9yaWdpbkl0ZW1zLmluZGV4T2Yob3JpZ2luSXRlbSk7XG4gIHZhciBpdGVtVG9Nb3ZlID0gb3JpZ2luSXRlbXMuc3BsaWNlKG9yaWdpbklkeCwgMSlbMF07XG5cbiAgdmFyIF9kelRvQ29uZmlnJGdldDIgPSBkelRvQ29uZmlnJDEuZ2V0KG5ld2x5Rm9jdXNlZER6KSxcbiAgICAgIHRhcmdldEl0ZW1zID0gX2R6VG9Db25maWckZ2V0Mi5pdGVtcyxcbiAgICAgIGF1dG9BcmlhRGlzYWJsZWQgPSBfZHpUb0NvbmZpZyRnZXQyLmF1dG9BcmlhRGlzYWJsZWQ7XG5cbiAgaWYgKG5ld2x5Rm9jdXNlZER6LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA8IGZvY3VzZWREei5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgfHwgbmV3bHlGb2N1c2VkRHouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCA8IGZvY3VzZWREei5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSB7XG4gICAgdGFyZ2V0SXRlbXMucHVzaChpdGVtVG9Nb3ZlKTtcblxuICAgIGlmICghYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgYWxlcnRUb1NjcmVlblJlYWRlcihcIk1vdmVkIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwsIFwiIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QgXCIpLmNvbmNhdChmb2N1c2VkRHpMYWJlbCkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRJdGVtcy51bnNoaWZ0KGl0ZW1Ub01vdmUpO1xuXG4gICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGR6RnJvbSA9IGZvY3VzZWREejtcbiAgZGlzcGF0Y2hGaW5hbGl6ZUV2ZW50KGR6RnJvbSwgb3JpZ2luSXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fQU5PVEhFUixcbiAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgfSk7XG4gIGRpc3BhdGNoRmluYWxpemVFdmVudChuZXdseUZvY3VzZWREeiwgdGFyZ2V0SXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fWk9ORSxcbiAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgfSk7XG4gIGZvY3VzZWREeiA9IG5ld2x5Rm9jdXNlZER6O1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyQWxsRHpzVXBkYXRlKCkge1xuICBkelRvSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmLCBkeikge1xuICAgIHZhciB1cGRhdGUgPSBfcmVmLnVwZGF0ZTtcbiAgICByZXR1cm4gdXBkYXRlKGR6VG9Db25maWckMS5nZXQoZHopKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURyb3AkMSgpIHtcbiAgdmFyIGRpc3BhdGNoQ29uc2lkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImRyb3BcIjtcbiAgfSk7XG5cbiAgaWYgKCFkelRvQ29uZmlnJDEuZ2V0KGZvY3VzZWREeikuYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJTdG9wcGVkIGRyYWdnaW5nIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwpKTtcbiAgfVxuXG4gIGlmIChhbGxEcmFnVGFyZ2V0cy5oYXMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxuXG4gIGlmIChkaXNwYXRjaENvbnNpZGVyKSB7XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KGZvY3VzZWREeiwgZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLml0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHX1NUT1BQRUQsXG4gICAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5LRVlCT0FSRFxuICAgIH0pO1xuICB9XG5cbiAgc3R5bGVJbmFjdGl2ZURyb3Bab25lcyh0eXBlVG9Ecm9wWm9uZXMkMS5nZXQoZHJhZ2dlZEl0ZW1UeXBlKSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRTdHlsZTtcbiAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICB9KTtcbiAgZm9jdXNlZEl0ZW0gPSBudWxsO1xuICBmb2N1c2VkSXRlbUlkID0gbnVsbDtcbiAgZm9jdXNlZEl0ZW1MYWJlbCA9IFwiXCI7XG4gIGRyYWdnZWRJdGVtVHlwZSA9IG51bGw7XG4gIGZvY3VzZWREeiA9IG51bGw7XG4gIGZvY3VzZWREekxhYmVsID0gXCJcIjtcbiAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyQWxsRHpzVXBkYXRlKCk7XG59IC8vLy8vL1xuXG5cbmZ1bmN0aW9uIGRuZHpvbmUkMShub2RlLCBvcHRpb25zKSB7XG4gIHZhciBjb25maWcgPSB7XG4gICAgaXRlbXM6IHVuZGVmaW5lZCxcbiAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgZHJhZ0Rpc2FibGVkOiBmYWxzZSxcbiAgICB6b25lVGFiSW5kZXg6IDAsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcFRhcmdldFN0eWxlOiBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFJDEsXG4gICAgZHJvcFRhcmdldENsYXNzZXM6IFtdLFxuICAgIGF1dG9BcmlhRGlzYWJsZWQ6IGZhbHNlXG4gIH07XG5cbiAgZnVuY3Rpb24gc3dhcChhcnIsIGksIGopIHtcbiAgICBpZiAoYXJyLmxlbmd0aCA8PSAxKSByZXR1cm47XG4gICAgYXJyLnNwbGljZShqLCAxLCBhcnIuc3BsaWNlKGksIDEsIGFycltqXSlbMF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW1wiaGFuZGxpbmcga2V5IGRvd25cIiwgZS5rZXldO1xuICAgIH0pO1xuXG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBhZmZlY3QgbmVzdGVkIGlucHV0IGVsZW1lbnRzIG9yIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgICAgICAgIGlmICgoZS50YXJnZXQuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCB8fCBlLnRhcmdldC5ocmVmIHx8IGUudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSAmJiAhYWxsRHJhZ1RhcmdldHMuaGFzKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudGluZyBzY3JvbGxpbmcgb24gc3BhY2ViYXJcblxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgLy8gVE9ETyAtIHNob3VsZCB0aGlzIHRyaWdnZXIgYSBkcm9wPyBvbmx5IGhlcmUgb3IgaW4gZ2VuZXJhbCAoYXMgaW4gd2hlbiBoaXR0aW5nIHNwYWNlIG9yIGVudGVyIG91dHNpZGUgb2YgYW55IHpvbmUpP1xuICAgICAgICAgICAgaGFuZGxlRHJvcCQxKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRyYWcgc3RhcnRcbiAgICAgICAgICAgIGhhbmRsZURyYWdTdGFydChlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IHNjcm9sbGluZ1xuXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgIHZhciBfZHpUb0NvbmZpZyRnZXQzID0gZHpUb0NvbmZpZyQxLmdldChub2RlKSxcbiAgICAgICAgICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQzLml0ZW1zO1xuXG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKTtcbiAgICAgICAgICB2YXIgaWR4ID0gY2hpbGRyZW4uaW5kZXhPZihlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcImFycm93IGRvd25cIiwgaWR4XTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChpZHggPCBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5hdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICAgICAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJNb3ZlZCBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsLCBcIiB0byBwb3NpdGlvbiBcIikuY29uY2F0KGlkeCArIDIsIFwiIGluIHRoZSBsaXN0IFwiKS5jb25jYXQoZm9jdXNlZER6TGFiZWwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dhcChpdGVtcywgaWR4LCBpZHggKyAxKTtcbiAgICAgICAgICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChub2RlLCBpdGVtcywge1xuICAgICAgICAgICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fWk9ORSxcbiAgICAgICAgICAgICAgaWQ6IGZvY3VzZWRJdGVtSWQsXG4gICAgICAgICAgICAgIHNvdXJjZTogU09VUkNFUy5LRVlCT0FSRFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBcIkFycm93VXBcIjpcbiAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAge1xuICAgICAgICAgIGlmICghaXNEcmFnZ2luZykgcmV0dXJuO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmdcblxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICB2YXIgX2R6VG9Db25maWckZ2V0NCA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgICAgICAgIF9pdGVtcyA9IF9kelRvQ29uZmlnJGdldDQuaXRlbXM7XG5cbiAgICAgICAgICB2YXIgX2NoaWxkcmVuID0gQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKTtcblxuICAgICAgICAgIHZhciBfaWR4ID0gX2NoaWxkcmVuLmluZGV4T2YoZS5jdXJyZW50VGFyZ2V0KTtcblxuICAgICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcImFycm93IHVwXCIsIF9pZHhdO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKF9pZHggPiAwKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5hdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICAgICAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJNb3ZlZCBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsLCBcIiB0byBwb3NpdGlvbiBcIikuY29uY2F0KF9pZHgsIFwiIGluIHRoZSBsaXN0IFwiKS5jb25jYXQoZm9jdXNlZER6TGFiZWwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dhcChfaXRlbXMsIF9pZHgsIF9pZHggLSAxKTtcbiAgICAgICAgICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChub2RlLCBfaXRlbXMsIHtcbiAgICAgICAgICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgICAgICAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgICAgICAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImRyYWcgc3RhcnRcIjtcbiAgICB9KTtcbiAgICBzZXRDdXJyZW50Rm9jdXNlZEl0ZW0oZS5jdXJyZW50VGFyZ2V0KTtcbiAgICBmb2N1c2VkRHogPSBub2RlO1xuICAgIGRyYWdnZWRJdGVtVHlwZSA9IGNvbmZpZy50eXBlO1xuICAgIGlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgIHZhciBkcm9wVGFyZ2V0cyA9IEFycmF5LmZyb20odHlwZVRvRHJvcFpvbmVzJDEuZ2V0KGNvbmZpZy50eXBlKSkuZmlsdGVyKGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6ID09PSBmb2N1c2VkRHogfHwgIWR6VG9Db25maWckMS5nZXQoZHopLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgfSk7XG4gICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoZHJvcFRhcmdldHMsIGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRTdHlsZTtcbiAgICB9LCBmdW5jdGlvbiAoZHopIHtcbiAgICAgIHJldHVybiBkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICB9KTtcblxuICAgIGlmICghY29uZmlnLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIHZhciBtc2cgPSBcIlN0YXJ0ZWQgZHJhZ2dpbmcgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIuIFVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlIGl0IHdpdGhpbiBpdHMgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKTtcblxuICAgICAgaWYgKGRyb3BUYXJnZXRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbXNnICs9IFwiLCBvciB0YWIgdG8gYW5vdGhlciBsaXN0IGluIG9yZGVyIHRvIG1vdmUgdGhlIGl0ZW0gaW50byBpdFwiO1xuICAgICAgfVxuXG4gICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKG1zZyk7XG4gICAgfVxuXG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG5vZGUsIGR6VG9Db25maWckMS5nZXQobm9kZSkuaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdfU1RBUlRFRCxcbiAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgfSk7XG4gICAgdHJpZ2dlckFsbER6c1VwZGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgIGlmICghaXNEcmFnZ2luZykgcmV0dXJuO1xuICAgIGlmIChlLmN1cnJlbnRUYXJnZXQgPT09IGZvY3VzZWRJdGVtKSByZXR1cm47XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBoYW5kbGVEcm9wJDEoZmFsc2UpO1xuICAgIGhhbmRsZURyYWdTdGFydChlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEN1cnJlbnRGb2N1c2VkSXRlbShkcmFnZ2FibGVFbCkge1xuICAgIHZhciBfZHpUb0NvbmZpZyRnZXQ1ID0gZHpUb0NvbmZpZyQxLmdldChub2RlKSxcbiAgICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ1Lml0ZW1zO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKTtcbiAgICB2YXIgZm9jdXNlZEl0ZW1JZHggPSBjaGlsZHJlbi5pbmRleE9mKGRyYWdnYWJsZUVsKTtcbiAgICBmb2N1c2VkSXRlbSA9IGRyYWdnYWJsZUVsO1xuICAgIGZvY3VzZWRJdGVtLnRhYkluZGV4ID0gMDtcbiAgICBmb2N1c2VkSXRlbUlkID0gaXRlbXNbZm9jdXNlZEl0ZW1JZHhdW0lURU1fSURfS0VZXTtcbiAgICBmb2N1c2VkSXRlbUxhYmVsID0gY2hpbGRyZW5bZm9jdXNlZEl0ZW1JZHhdLmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIikgfHwgXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShfcmVmMikge1xuICAgIHZhciBfcmVmMiRpdGVtcyA9IF9yZWYyLml0ZW1zLFxuICAgICAgICBpdGVtcyA9IF9yZWYyJGl0ZW1zID09PSB2b2lkIDAgPyBbXSA6IF9yZWYyJGl0ZW1zLFxuICAgICAgICBfcmVmMiR0eXBlID0gX3JlZjIudHlwZSxcbiAgICAgICAgbmV3VHlwZSA9IF9yZWYyJHR5cGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9aT05FX1RZUEUkMSA6IF9yZWYyJHR5cGUsXG4gICAgICAgIF9yZWYyJGRyYWdEaXNhYmxlZCA9IF9yZWYyLmRyYWdEaXNhYmxlZCxcbiAgICAgICAgZHJhZ0Rpc2FibGVkID0gX3JlZjIkZHJhZ0Rpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGRyYWdEaXNhYmxlZCxcbiAgICAgICAgX3JlZjIkem9uZVRhYkluZGV4ID0gX3JlZjIuem9uZVRhYkluZGV4LFxuICAgICAgICB6b25lVGFiSW5kZXggPSBfcmVmMiR6b25lVGFiSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcmVmMiR6b25lVGFiSW5kZXgsXG4gICAgICAgIF9yZWYyJGRyb3BGcm9tT3RoZXJzRCA9IF9yZWYyLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQsXG4gICAgICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBfcmVmMiRkcm9wRnJvbU90aGVyc0QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZHJvcEZyb21PdGhlcnNELFxuICAgICAgICBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMi5kcm9wVGFyZ2V0U3R5bGUsXG4gICAgICAgIGRyb3BUYXJnZXRTdHlsZSA9IF9yZWYyJGRyb3BUYXJnZXRTdHlsZSA9PT0gdm9pZCAwID8gREVGQVVMVF9EUk9QX1RBUkdFVF9TVFlMRSQxIDogX3JlZjIkZHJvcFRhcmdldFN0eWxlLFxuICAgICAgICBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MgPSBfcmVmMi5kcm9wVGFyZ2V0Q2xhc3NlcyxcbiAgICAgICAgZHJvcFRhcmdldENsYXNzZXMgPSBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MgPT09IHZvaWQgMCA/IFtdIDogX3JlZjIkZHJvcFRhcmdldENsYXNzLFxuICAgICAgICBfcmVmMiRhdXRvQXJpYURpc2FibGUgPSBfcmVmMi5hdXRvQXJpYURpc2FibGVkLFxuICAgICAgICBhdXRvQXJpYURpc2FibGVkID0gX3JlZjIkYXV0b0FyaWFEaXNhYmxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGF1dG9BcmlhRGlzYWJsZTtcbiAgICBjb25maWcuaXRlbXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoaXRlbXMpO1xuICAgIGNvbmZpZy5kcmFnRGlzYWJsZWQgPSBkcmFnRGlzYWJsZWQ7XG4gICAgY29uZmlnLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBkcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuICAgIGNvbmZpZy56b25lVGFiSW5kZXggPSB6b25lVGFiSW5kZXg7XG4gICAgY29uZmlnLmRyb3BUYXJnZXRTdHlsZSA9IGRyb3BUYXJnZXRTdHlsZTtcbiAgICBjb25maWcuZHJvcFRhcmdldENsYXNzZXMgPSBkcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICBjb25maWcuYXV0b0FyaWFEaXNhYmxlZCA9IGF1dG9BcmlhRGlzYWJsZWQ7XG5cbiAgICBpZiAoIWF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLCBkcmFnRGlzYWJsZWQpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwibGlzdFwiKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiLCBkcmFnRGlzYWJsZWQgPyBJTlNUUlVDVElPTl9JRHMkMS5ETkRfWk9ORV9EUkFHX0RJU0FCTEVEIDogSU5TVFJVQ1RJT05fSURzJDEuRE5EX1pPTkVfQUNUSVZFKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLnR5cGUgJiYgbmV3VHlwZSAhPT0gY29uZmlnLnR5cGUpIHtcbiAgICAgIHVucmVnaXN0ZXJEcm9wWm9uZSQxKG5vZGUsIGNvbmZpZy50eXBlKTtcbiAgICB9XG5cbiAgICBjb25maWcudHlwZSA9IG5ld1R5cGU7XG4gICAgcmVnaXN0ZXJEcm9wWm9uZSQxKG5vZGUsIG5ld1R5cGUpO1xuICAgIGR6VG9Db25maWckMS5zZXQobm9kZSwgY29uZmlnKTtcblxuICAgIGlmIChpc0RyYWdnaW5nKSB7XG4gICAgICBub2RlLnRhYkluZGV4ID0gbm9kZSA9PT0gZm9jdXNlZER6IHx8IGZvY3VzZWRJdGVtLmNvbnRhaW5zKG5vZGUpIHx8IGNvbmZpZy5kcm9wRnJvbU90aGVyc0Rpc2FibGVkIHx8IGZvY3VzZWREeiAmJiBjb25maWcudHlwZSAhPT0gZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLnR5cGUgPyAtMSA6IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUudGFiSW5kZXggPSBjb25maWcuem9uZVRhYkluZGV4O1xuICAgIH1cblxuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGhhbmRsZVpvbmVGb2N1cyk7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlRWwgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgYWxsRHJhZ1RhcmdldHMuYWRkKGRyYWdnYWJsZUVsKTtcbiAgICAgIGRyYWdnYWJsZUVsLnRhYkluZGV4ID0gaXNEcmFnZ2luZyA/IC0xIDogMDtcblxuICAgICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICAgIGRyYWdnYWJsZUVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJsaXN0aXRlbVwiKTtcbiAgICAgIH1cblxuICAgICAgZHJhZ2dhYmxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZWxUb0tleURvd25MaXN0ZW5lcnMuZ2V0KGRyYWdnYWJsZUVsKSk7XG4gICAgICBkcmFnZ2FibGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZWxUb0ZvY3VzTGlzdGVuZXJzLmdldChkcmFnZ2FibGVFbCkpO1xuXG4gICAgICBpZiAoIWRyYWdEaXNhYmxlZCkge1xuICAgICAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgZWxUb0tleURvd25MaXN0ZW5lcnMuc2V0KGRyYWdnYWJsZUVsLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrKTtcbiAgICAgICAgZWxUb0ZvY3VzTGlzdGVuZXJzLnNldChkcmFnZ2FibGVFbCwgaGFuZGxlQ2xpY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEcmFnZ2luZyAmJiBjb25maWcuaXRlbXNbaV1bSVRFTV9JRF9LRVldID09PSBmb2N1c2VkSXRlbUlkKSB7XG4gICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBbXCJmb2N1c2luZyBvblwiLCB7XG4gICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgZm9jdXNlZEl0ZW1JZDogZm9jdXNlZEl0ZW1JZFxuICAgICAgICAgIH1dO1xuICAgICAgICB9KTsgLy8gaWYgaXQgaXMgYSBuZXN0ZWQgZHJvcHpvbmUsIGl0IHdhcyByZS1yZW5kZXJlZCBhbmQgd2UgbmVlZCB0byByZWZyZXNoIG91ciBwb2ludGVyXG5cbiAgICAgICAgZm9jdXNlZEl0ZW0gPSBkcmFnZ2FibGVFbDtcbiAgICAgICAgZm9jdXNlZEl0ZW0udGFiSW5kZXggPSAwOyAvLyB3aXRob3V0IHRoaXMgdGhlIGVsZW1lbnQgbG9zZXMgZm9jdXMgaWYgaXQgbW92ZXMgYmFja3dhcmRzIGluIHRoZSBsaXN0XG5cbiAgICAgICAgZHJhZ2dhYmxlRWwuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBfbG9vcChpKTtcbiAgICB9XG4gIH1cblxuICBjb25maWd1cmUob3B0aW9ucyk7XG4gIHZhciBoYW5kbGVzID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG5ld09wdGlvbnMpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJrZXlib2FyZCBkbmR6b25lIHdpbGwgdXBkYXRlIG5ld09wdGlvbnM6IFwiLmNvbmNhdCh0b1N0cmluZyhuZXdPcHRpb25zKSk7XG4gICAgICB9KTtcbiAgICAgIGNvbmZpZ3VyZShuZXdPcHRpb25zKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwia2V5Ym9hcmQgZG5kem9uZSB3aWxsIGRlc3Ryb3lcIjtcbiAgICAgIH0pO1xuICAgICAgdW5yZWdpc3RlckRyb3Bab25lJDEobm9kZSwgY29uZmlnLnR5cGUpO1xuICAgICAgZHpUb0NvbmZpZyQxW1wiZGVsZXRlXCJdKG5vZGUpO1xuICAgICAgZHpUb0hhbmRsZXNbXCJkZWxldGVcIl0obm9kZSk7XG4gICAgfVxuICB9O1xuICBkelRvSGFuZGxlcy5zZXQobm9kZSwgaGFuZGxlcyk7XG4gIHJldHVybiBoYW5kbGVzO1xufVxuXG4vKipcbiAqIEEgY3VzdG9tIGFjdGlvbiB0byB0dXJuIGFueSBjb250YWluZXIgdG8gYSBkbmQgem9uZSBhbmQgYWxsIG9mIGl0cyBkaXJlY3QgY2hpbGRyZW4gdG8gZHJhZ2dhYmxlc1xuICogU3VwcG9ydHMgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCBpbnRlcmFjdGlvbnMuXG4gKiBEaXNwYXRjaGVzIHR3byBldmVudHMgdGhhdCB0aGUgY29udGFpbmVyIGlzIGV4cGVjdGVkIHRvIHJlYWN0IHRvIGJ5IG1vZGlmeWluZyBpdHMgbGlzdCBvZiBpdGVtcyxcbiAqIHdoaWNoIHdpbGwgdGhlbiBmZWVkIGJhY2sgaW4gdG8gdGhpcyBhY3Rpb24gdmlhIHRoZSB1cGRhdGUgZnVuY3Rpb25cbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge2FycmF5fSBpdGVtcyAtIHRoZSBsaXN0IG9mIGl0ZW1zIHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBnaXZlbiBub2RlICh0aGUgbGlzdCB1c2VkIGluIHRoZSAjZWFjaCBibG9ja1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlXSAtIHRoZSB0eXBlIG9mIHRoZSBkbmQgem9uZS4gY2hpbGRyZW4gZHJhZ2dlZCBmcm9tIGhlcmUgY2FuIG9ubHkgYmUgZHJvcHBlZCBpbiBvdGhlciB6b25lcyBvZiB0aGUgc2FtZSB0eXBlLCBkZWZhdWx0IHRvIGEgYmFzZSB0eXBlXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2ZsaXBEdXJhdGlvbk1zXSAtIGlmIHRoZSBsaXN0IGFuaW1hdGVkIHVzaW5nIGZsaXAgKHJlY29tbWVuZGVkKSwgc3BlY2lmaWVzIHRoZSBmbGlwIGR1cmF0aW9uIHN1Y2ggdGhhdCBldmVyeXRoaW5nIHN5bmNzIHdpdGggaXQgd2l0aG91dCBjb25mbGljdCwgZGVmYXVsdHMgdG8gemVyb1xuICogQHByb3BlcnR5IHtib29sZWFufSBbZHJhZ0Rpc2FibGVkXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbbW9ycGhEaXNhYmxlZF0gLSB3aGV0aGVyIGRyYWdnZWQgZWxlbWVudCBzaG91bGQgbW9ycGggdG8gem9uZSBkaW1lbnNpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkcm9wRnJvbU90aGVyc0Rpc2FibGVkXVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFt6b25lVGFiSW5kZXhdIC0gc2V0IHRoZSB0YWJpbmRleCBvZiB0aGUgbGlzdCBjb250YWluZXIgd2hlbiBub3QgZHJhZ2dpbmdcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZHJvcFRhcmdldFN0eWxlXVxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW2Ryb3BUYXJnZXRDbGFzc2VzXVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3RyYW5zZm9ybURyYWdnZWRFbGVtZW50XVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZSAtIHRoZSBlbGVtZW50IHRvIGVuaGFuY2VcbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybiB7e3VwZGF0ZTogZnVuY3Rpb24sIGRlc3Ryb3k6IGZ1bmN0aW9ufX1cbiAqL1xuXG5mdW5jdGlvbiBkbmR6b25lJDIobm9kZSwgb3B0aW9ucykge1xuICB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gIHZhciBwb2ludGVyWm9uZSA9IGRuZHpvbmUobm9kZSwgb3B0aW9ucyk7XG4gIHZhciBrZXlib2FyZFpvbmUgPSBkbmR6b25lJDEobm9kZSwgb3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUobmV3T3B0aW9ucykge1xuICAgICAgdmFsaWRhdGVPcHRpb25zKG5ld09wdGlvbnMpO1xuICAgICAgcG9pbnRlclpvbmUudXBkYXRlKG5ld09wdGlvbnMpO1xuICAgICAga2V5Ym9hcmRab25lLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBwb2ludGVyWm9uZS5kZXN0cm95KCk7XG4gICAgICBrZXlib2FyZFpvbmUuZGVzdHJveSgpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSovXG4gIHZhciBpdGVtcyA9IG9wdGlvbnMuaXRlbXMsXG4gICAgICBmbGlwRHVyYXRpb25NcyA9IG9wdGlvbnMuZmxpcER1cmF0aW9uTXMsXG4gICAgICB0eXBlID0gb3B0aW9ucy50eXBlLFxuICAgICAgZHJhZ0Rpc2FibGVkID0gb3B0aW9ucy5kcmFnRGlzYWJsZWQsXG4gICAgICBtb3JwaERpc2FibGVkID0gb3B0aW9ucy5tb3JwaERpc2FibGVkLFxuICAgICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IG9wdGlvbnMuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCxcbiAgICAgIHpvbmVUYWJJbmRleCA9IG9wdGlvbnMuem9uZVRhYkluZGV4LFxuICAgICAgZHJvcFRhcmdldFN0eWxlID0gb3B0aW9ucy5kcm9wVGFyZ2V0U3R5bGUsXG4gICAgICBkcm9wVGFyZ2V0Q2xhc3NlcyA9IG9wdGlvbnMuZHJvcFRhcmdldENsYXNzZXMsXG4gICAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IG9wdGlvbnMudHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQsXG4gICAgICBhdXRvQXJpYURpc2FibGVkID0gb3B0aW9ucy5hdXRvQXJpYURpc2FibGVkLFxuICAgICAgY2VudHJlRHJhZ2dlZE9uQ3Vyc29yID0gb3B0aW9ucy5jZW50cmVEcmFnZ2VkT25DdXJzb3IsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcIml0ZW1zXCIsIFwiZmxpcER1cmF0aW9uTXNcIiwgXCJ0eXBlXCIsIFwiZHJhZ0Rpc2FibGVkXCIsIFwibW9ycGhEaXNhYmxlZFwiLCBcImRyb3BGcm9tT3RoZXJzRGlzYWJsZWRcIiwgXCJ6b25lVGFiSW5kZXhcIiwgXCJkcm9wVGFyZ2V0U3R5bGVcIiwgXCJkcm9wVGFyZ2V0Q2xhc3Nlc1wiLCBcInRyYW5zZm9ybURyYWdnZWRFbGVtZW50XCIsIFwiYXV0b0FyaWFEaXNhYmxlZFwiLCBcImNlbnRyZURyYWdnZWRPbkN1cnNvclwiXSk7XG4gIC8qZXNsaW50LWVuYWJsZSovXG5cblxuICBpZiAoT2JqZWN0LmtleXMocmVzdCkubGVuZ3RoID4gMCkge1xuICAgIGNvbnNvbGUud2FybihcImRuZHpvbmUgd2lsbCBpZ25vcmUgdW5rbm93biBvcHRpb25zXCIsIHJlc3QpO1xuICB9XG5cbiAgaWYgKCFpdGVtcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm5vICdpdGVtcycga2V5IHByb3ZpZGVkIHRvIGRuZHpvbmVcIik7XG4gIH1cblxuICB2YXIgaXRlbVdpdGhNaXNzaW5nSWQgPSBpdGVtcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuICF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZW0sIElURU1fSURfS0VZKTtcbiAgfSk7XG5cbiAgaWYgKGl0ZW1XaXRoTWlzc2luZ0lkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyAnXCIuY29uY2F0KElURU1fSURfS0VZLCBcIicgcHJvcGVydHkgZm9yIGl0ZW0gXCIpLmNvbmNhdCh0b1N0cmluZyhpdGVtV2l0aE1pc3NpbmdJZCkpKTtcbiAgfVxuXG4gIGlmIChkcm9wVGFyZ2V0Q2xhc3NlcyAmJiAhQXJyYXkuaXNBcnJheShkcm9wVGFyZ2V0Q2xhc3NlcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkcm9wVGFyZ2V0Q2xhc3NlcyBzaG91bGQgYmUgYW4gYXJyYXkgYnV0IGluc3RlYWQgaXQgaXMgYSBcIi5jb25jYXQoX3R5cGVvZihkcm9wVGFyZ2V0Q2xhc3NlcyksIFwiLCBcIikuY29uY2F0KHRvU3RyaW5nKGRyb3BUYXJnZXRDbGFzc2VzKSkpO1xuICB9XG5cbiAgaWYgKHpvbmVUYWJJbmRleCAmJiAhaXNJbnQoem9uZVRhYkluZGV4KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInpvbmVUYWJJbmRleCBzaG91bGQgYmUgYSBudW1iZXIgYnV0IGluc3RlYWQgaXQgaXMgYSBcIi5jb25jYXQoX3R5cGVvZih6b25lVGFiSW5kZXgpLCBcIiwgXCIpLmNvbmNhdCh0b1N0cmluZyh6b25lVGFiSW5kZXgpKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbnQodmFsdWUpIHtcbiAgcmV0dXJuICFpc05hTih2YWx1ZSkgJiYgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gKHggfCAwKSA9PT0geDtcbiAgfShwYXJzZUZsb2F0KHZhbHVlKSk7XG59XG5cbmV4cG9ydCB7IERSQUdHRURfRUxFTUVOVF9JRCwgU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUUsIFNIQURPV19QTEFDRUhPTERFUl9JVEVNX0lELCBTT1VSQ0VTLCBUUklHR0VSUywgYWxlcnRUb1NjcmVlblJlYWRlciwgZG5kem9uZSQyIGFzIGRuZHpvbmUsIG92ZXJyaWRlSXRlbUlkS2V5TmFtZUJlZm9yZUluaXRpYWxpc2luZ0RuZFpvbmVzLCBzZXREZWJ1Z01vZGUgfTtcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBmbGlwIH0gZnJvbSBcInN2ZWx0ZS9hbmltYXRlXCI7XG4gICAgaW1wb3J0IHsgZG5kem9uZSwgU09VUkNFUywgVFJJR0dFUlMgfSBmcm9tIFwic3ZlbHRlLWRuZC1hY3Rpb25cIjtcbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgc2V0SWNvbiwgVGV4dENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB0eXBlIHsgQ2FsZW5kYXIsIERheSB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG5cbiAgICBpbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwic3JjL3V0aWxzL2Z1bmN0aW9uc1wiO1xuXG4gICAgaW1wb3J0IFRvZ2dsZUNvbXBvbmVudCBmcm9tIFwiLi4vU2V0dGluZ3MvVG9nZ2xlQ29tcG9uZW50LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBBZGROZXcgZnJvbSBcIi4uL1V0aWxpdGllcy9BZGROZXcuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IE5vRXhpc3RpbmdJdGVtcyBmcm9tIFwiLi4vVXRpbGl0aWVzL05vRXhpc3RpbmdJdGVtcy5zdmVsdGVcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG4gICAgZXhwb3J0IGxldCBjYWxlbmRhcjogQ2FsZW5kYXI7XG5cbiAgICAkOiB3ZWVrZGF5cyA9IGNhbGVuZGFyLnN0YXRpYy53ZWVrZGF5cztcbiAgICBsZXQgZmlyc3RXZWVrZGF5ID0gY2FsZW5kYXIuc3RhdGljLmZpcnN0V2Vla0RheTtcbiAgICAkOiB7XG4gICAgICAgIGZpcnN0V2Vla2RheSA9IGNhbGVuZGFyLnN0YXRpYy5maXJzdFdlZWtEYXk7XG4gICAgICAgIGNvbnNvbGUubG9nKGZpcnN0V2Vla2RheSwgY2FsZW5kYXIuc3RhdGljLmZpcnN0V2Vla0RheSk7XG4gICAgfVxuICAgICQ6IG92ZXJmbG93ID0gY2FsZW5kYXIuc3RhdGljLm92ZXJmbG93O1xuXG4gICAgJDoge1xuICAgICAgICBkaXNwYXRjaChcIndlZWtkYXktdXBkYXRlXCIsIHdlZWtkYXlzKTtcbiAgICB9XG5cbiAgICAkOiB7XG4gICAgICAgIGRpc3BhdGNoKFwiZmlyc3Qtd2Vla2RheS11cGRhdGVcIiwgZmlyc3RXZWVrZGF5KTtcbiAgICB9XG5cbiAgICAkOiB7XG4gICAgICAgIGRpc3BhdGNoKFwib3ZlcmZsb3ctdXBkYXRlXCIsIG92ZXJmbG93KTtcbiAgICB9XG4gICAgY29uc3QgZ3JpcCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwiZmFudGFzeS1jYWxlbmRhci1ncmlwXCIpO1xuICAgIH07XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCwgaXRlbTogRGF5KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soXG4gICAgICAgICAgICAgICAgKCkgPT4gKHdlZWtkYXlzID0gd2Vla2RheXMuZmlsdGVyKChkYXkpID0+IGRheS5pZCAhPT0gaXRlbS5pZCkpXG4gICAgICAgICAgICApO1xuICAgIH07XG4gICAgZnVuY3Rpb24gc3RhcnREcmFnKGU6IEV2ZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGZsaXBEdXJhdGlvbk1zID0gMzAwO1xuICAgIGxldCBkcmFnRGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNvbnNpZGVyKGU6IEN1c3RvbUV2ZW50PEdlbmVyaWNEbmRFdmVudDxEYXk+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSwgdHJpZ2dlciB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgd2Vla2RheXMgPSBuZXdJdGVtcztcbiAgICAgICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIGtleWJvYXJkXG4gICAgICAgIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuS0VZQk9BUkQgJiYgdHJpZ2dlciA9PT0gVFJJR0dFUlMuRFJBR19TVE9QUEVEKSB7XG4gICAgICAgICAgICBkcmFnRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUZpbmFsaXplKGU6IEN1c3RvbUV2ZW50PEdlbmVyaWNEbmRFdmVudDxEYXk+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgd2Vla2RheXMgPSBuZXdJdGVtcztcbiAgICAgICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIHBvaW50ZXIgKG1vdXNlLCB0b3VjaClcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gU09VUkNFUy5QT0lOVEVSKSB7XG4gICAgICAgICAgICBkcmFnRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9IChub2RlOiBIVE1MRWxlbWVudCwgaXRlbTogRGF5KSA9PiB7XG4gICAgICAgIG5ldyBUZXh0Q29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VmFsdWUoaXRlbS5uYW1lKVxuICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiTmFtZVwiKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5uYW1lID0gdjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcIndlZWtkYXktdXBkYXRlXCIsIHdlZWtkYXlzKTtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5cyA9IHdlZWtkYXlzO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5pbnB1dEVsLnNldEF0dHIoXCJzdHlsZVwiLCBcIndpZHRoOiAxMDAlO1wiKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxUb2dnbGVDb21wb25lbnRcbiAgICBuYW1lPXtcIk92ZXJmbG93IFdlZWtzXCJ9XG4gICAgZGVzYz17XCJUdXJuIHRoaXMgb2ZmIHRvIG1ha2UgZWFjaCBtb250aCBzdGFydCBvbiB0aGUgZmlyc3Qgb2YgdGhlIHdlZWsuXCJ9XG4gICAgdmFsdWU9e2NhbGVuZGFyLnN0YXRpYy5vdmVyZmxvd31cbiAgICBvbjpjbGljaz17KCkgPT4gKGNhbGVuZGFyLnN0YXRpYy5vdmVyZmxvdyA9ICFjYWxlbmRhci5zdGF0aWMub3ZlcmZsb3cpfVxuLz5cblxuPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbVwiPlxuICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWl0ZW0taW5mb1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLW5hbWVcIj5GaXJzdCBEYXk8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgVGhlIGRheSBvZiB0aGUgd2VlayB0aGUgZmlyc3QgeWVhciBzdGFydHMgb24uXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWl0ZW0tY29udHJvbFwiPlxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICBjbGFzcz1cImRyb3Bkb3duXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e3dlZWtkYXlzLmZpbHRlcigodikgPT4gdi5uYW1lPy5sZW5ndGgpLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogXCJOYW1lZCBXZWVrZGF5IFJlcXVpcmVkXCJ9XG4gICAgICAgICAgICBiaW5kOnZhbHVlPXtjYWxlbmRhci5zdGF0aWMuZmlyc3RXZWVrRGF5fVxuICAgICAgICA+XG4gICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkIGhpZGRlbiBkaXNhYmxlZD5TZWxlY3QgYSBXZWVrZGF5PC9vcHRpb24+XG4gICAgICAgICAgICB7I2VhY2ggd2Vla2RheXMuZmlsdGVyKCh2KSA9PiB2Lm5hbWU/Lmxlbmd0aCkgYXMgd2Vla2RheSwgaW5kZXh9XG4gICAgICAgICAgICAgICAgPG9wdGlvbiBkaXNhYmxlZD17IW92ZXJmbG93fSB2YWx1ZT17aW5kZXh9PlxuICAgICAgICAgICAgICAgICAgICB7d2Vla2RheS5uYW1lID8/IFwiXCJ9XG4gICAgICAgICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvc2VsZWN0PlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxBZGROZXdcbiAgICBvbjpjbGljaz17KCkgPT5cbiAgICAgICAgKGNhbGVuZGFyLnN0YXRpYy53ZWVrZGF5cyA9IFtcbiAgICAgICAgICAgIC4uLndlZWtkYXlzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF5XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKDYpXG4gICAgICAgICAgICB9XG4gICAgICAgIF0pfVxuLz5cblxueyNpZiAhd2Vla2RheXMubGVuZ3RofVxuICAgIDxOb0V4aXN0aW5nSXRlbXMgbWVzc2FnZT17XCJDcmVhdGUgYSBuZXcgd2Vla2RheSB0byBzZWUgaXQgaGVyZS5cIn0gLz5cbns6ZWxzZX1cbiAgICA8ZGl2XG4gICAgICAgIHVzZTpkbmR6b25lPXt7IGl0ZW1zOiB3ZWVrZGF5cywgZmxpcER1cmF0aW9uTXMsIGRyYWdEaXNhYmxlZCB9fVxuICAgICAgICBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCJcbiAgICAgICAgb246Y29uc2lkZXI9e2hhbmRsZUNvbnNpZGVyfVxuICAgICAgICBvbjpmaW5hbGl6ZT17aGFuZGxlRmluYWxpemV9XG4gICAgPlxuICAgICAgICB7I2VhY2ggd2Vla2RheXMgYXMgaXRlbSAoaXRlbS5pZCl9XG4gICAgICAgICAgICA8ZGl2IGFuaW1hdGU6ZmxpcD17eyBkdXJhdGlvbjogZmxpcER1cmF0aW9uTXMgfX0gY2xhc3M9XCJ3ZWVrZGF5XCI+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICB1c2U6Z3JpcFxuICAgICAgICAgICAgICAgICAgICBvbjptb3VzZWRvd249e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgb246dG91Y2hzdGFydD17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHVzZTpuYW1lPXtpdGVtfSAvPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIiB1c2U6dHJhc2g9e2l0ZW19IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2Plxuey9pZn1cblxuPHN0eWxlPlxuICAgIC5leGlzdGluZy1pdGVtcyB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC53ZWVrZGF5IHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmciBhdXRvO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgLndlZWtkYXkgLmljb24ge1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAud2Vla2RheSB7XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuXG4gICAgY29uc3QgYWRkID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQobm9kZSkuc2V0VG9vbHRpcChcIkFkZCBOZXdcIikuc2V0QnV0dG9uVGV4dChcIitcIik7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiYWRkLW5ldyBzZXR0aW5nLWl0ZW1cIiB1c2U6YWRkIG9uOmNsaWNrIC8+XG5cbjxzdHlsZT5cbiAgICAuYWRkLW5ldyxcbiAgICAuYWRkLW5ldyA6Z2xvYmFsKGJ1dHRvbikge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgZXhwb3J0IGxldCBtZXNzYWdlOiBzdHJpbmc7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cIm5vLWV4aXN0aW5nLWl0ZW1zIHNldHRpbmctaXRlbVwiPlxuICAgIDxzcGFuPnttZXNzYWdlfTwvc3Bhbj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLm5vLWV4aXN0aW5nLWl0ZW1zIHNwYW4ge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1mYWludCk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBmbGlwIH0gZnJvbSBcInN2ZWx0ZS9hbmltYXRlXCI7XG4gICAgaW1wb3J0IHsgZG5kem9uZSwgU09VUkNFUywgVFJJR0dFUlMgfSBmcm9tIFwic3ZlbHRlLWRuZC1hY3Rpb25cIjtcbiAgICBpbXBvcnQgeyBCdXR0b25Db21wb25lbnQsIHNldEljb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IENhbGVuZGFyLCBNb250aCB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG5cbiAgICBpbXBvcnQgTW9udGhJbnN0YW5jZSBmcm9tIFwiLi9Nb250aEluc3RhbmNlLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcInNyYy91dGlscy9mdW5jdGlvbnNcIjtcbiAgICBpbXBvcnQgQWRkTmV3IGZyb20gXCIuLi9VdGlsaXRpZXMvQWRkTmV3LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBOb0V4aXN0aW5nSXRlbXMgZnJvbSBcIi4uL1V0aWxpdGllcy9Ob0V4aXN0aW5nSXRlbXMuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IGNhbGVuZGFyOiBDYWxlbmRhcjtcblxuICAgICQ6IG1vbnRocyA9IGNhbGVuZGFyLnN0YXRpYy5tb250aHM7XG5cbiAgICBjb25zdCBkZWxldGVNb250aCA9IChtb250aDogTW9udGgpID0+IHtcbiAgICAgICAgbW9udGhzID0gbW9udGhzLmZpbHRlcigobSkgPT4gbS5pZCAhPSBtb250aC5pZCk7XG5cbiAgICAgICAgZGlzcGF0Y2goXCJtb250aC11cGRhdGVcIiwgbW9udGhzKTtcbiAgICB9O1xuICAgIGNvbnN0IGdyaXAgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgc2V0SWNvbihub2RlLCBcImZhbnRhc3ktY2FsZW5kYXItZ3JpcFwiKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhcnREcmFnKGU6IEV2ZW50KSB7XG4gICAgICAgIC8vIHByZXZlbnRpbmcgZGVmYXVsdCB0byBwcmV2ZW50IGxhZyBvbiB0b3VjaCBkZXZpY2VzIChiZWNhdXNlIG9mIHRoZSBicm93c2VyIGNoZWNraW5nIGZvciBzY3JlZW4gc2Nyb2xsaW5nKVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGRyYWdEaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBmbGlwRHVyYXRpb25NcyA9IDMwMDtcbiAgICBsZXQgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDb25zaWRlcihlOiBDdXN0b21FdmVudDxHZW5lcmljRG5kRXZlbnQ8TW9udGg+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSwgdHJpZ2dlciB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgbW9udGhzID0gbmV3SXRlbXM7XG4gICAgICAgIC8vIEVuc3VyZSBkcmFnZ2luZyBpcyBzdG9wcGVkIG9uIGRyYWcgZmluaXNoIHZpYSBrZXlib2FyZFxuICAgICAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLktFWUJPQVJEICYmIHRyaWdnZXIgPT09IFRSSUdHRVJTLkRSQUdfU1RPUFBFRCkge1xuICAgICAgICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVGaW5hbGl6ZShlOiBDdXN0b21FdmVudDxHZW5lcmljRG5kRXZlbnQ8TW9udGg+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgbW9udGhzID0gbmV3SXRlbXM7XG4gICAgICAgIGRpc3BhdGNoKFwibW9udGgtdXBkYXRlXCIsIG1vbnRocyk7XG4gICAgICAgIC8vIEVuc3VyZSBkcmFnZ2luZyBpcyBzdG9wcGVkIG9uIGRyYWcgZmluaXNoIHZpYSBwb2ludGVyIChtb3VzZSwgdG91Y2gpXG4gICAgICAgIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuUE9JTlRFUikge1xuICAgICAgICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG48L3NjcmlwdD5cblxuPEFkZE5ld1xuICAgIG9uOmNsaWNrPXsoKSA9PlxuICAgICAgICAoY2FsZW5kYXIuc3RhdGljLm1vbnRocyA9IFtcbiAgICAgICAgICAgIC4uLm1vbnRocyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IG51bGwsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KVxuICAgICAgICAgICAgfVxuICAgICAgICBdKX1cbi8+XG5cbnsjaWYgIW1vbnRocy5sZW5ndGh9XG4gICAgPE5vRXhpc3RpbmdJdGVtcyBtZXNzYWdlPXtcIkNyZWF0ZSBhIG5ldyBtb250aCB0byBzZWUgaXQgaGVyZS5cIn0gLz5cbns6ZWxzZX1cbiAgICA8ZGl2XG4gICAgICAgIHVzZTpkbmR6b25lPXt7IGl0ZW1zOiBtb250aHMsIGZsaXBEdXJhdGlvbk1zLCBkcmFnRGlzYWJsZWQgfX1cbiAgICAgICAgY2xhc3M9XCJleGlzdGluZy1pdGVtc1wiXG4gICAgICAgIG9uOmNvbnNpZGVyPXtoYW5kbGVDb25zaWRlcn1cbiAgICAgICAgb246ZmluYWxpemU9e2hhbmRsZUZpbmFsaXplfVxuICAgID5cbiAgICAgICAgeyNlYWNoIG1vbnRocyBhcyBtb250aCAobW9udGguaWQpfVxuICAgICAgICAgICAgPGRpdiBhbmltYXRlOmZsaXA9e3sgZHVyYXRpb246IGZsaXBEdXJhdGlvbk1zIH19IGNsYXNzPVwibW9udGhcIj5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvblwiXG4gICAgICAgICAgICAgICAgICAgIHVzZTpncmlwXG4gICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlZG93bj17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICBvbjp0b3VjaHN0YXJ0PXtzdGFydERyYWd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8TW9udGhJbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICB7bW9udGh9XG4gICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlZG93bj17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICBvbjptb250aC1kZWxldGU9eygpID0+IGRlbGV0ZU1vbnRoKG1vbnRoKX1cbiAgICAgICAgICAgICAgICAgICAgb246bW9udGgtdXBkYXRlPXsoKSA9PiBkaXNwYXRjaChcIm1vbnRoLXVwZGF0ZVwiLCBtb250aHMpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2Plxuey9pZn1cblxuPHN0eWxlPlxuICAgIC5tb250aCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBkZWJvdW5jZSwgRXh0cmFCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IE1vbnRoIH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBtb250aDogTW9udGg7XG5cbiAgICBsZXQgbmFtZSA9IG1vbnRoLm5hbWU7XG4gICAgbGV0IHR5cGUgPSBtb250aC50eXBlO1xuICAgIGxldCBsZW5ndGggPSBtb250aC5sZW5ndGg7XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInRyYXNoXCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2goXCJtb250aC1kZWxldGVcIik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGUgPSBkZWJvdW5jZShcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgbW9udGgubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICBtb250aC50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIG1vbnRoLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgICAgIGRpc3BhdGNoKFwibW9udGgtdXBkYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICAzMDAsXG4gICAgICAgIHRydWVcbiAgICApO1xuXG4gICAgJDoge1xuICAgICAgICBtb250aC50eXBlID0gdHlwZTtcbiAgICAgICAgLyogZGlzcGF0Y2goXCJtb250aC11cGRhdGVcIiwgbW9udGgpOyAqL1xuICAgIH1cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwibW9udGhcIj5cbiAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBzcGVsbGNoZWNrPVwiZmFsc2VcIlxuICAgICAgICBiaW5kOnZhbHVlPXtuYW1lfVxuICAgICAgICBvbjppbnB1dD17dXBkYXRlfVxuICAgICAgICBwbGFjZWhvbGRlcj1cIk5hbWVcIlxuICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlO1wiXG4gICAgLz5cbiAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgIHNwZWxsY2hlY2s9XCJmYWxzZVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiTGVuZ3RoXCJcbiAgICAgICAgYmluZDp2YWx1ZT17bGVuZ3RofVxuICAgICAgICBvbjppbnB1dD17dXBkYXRlfVxuICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlO1wiXG4gICAgICAgIG1pbj1cIjBcIlxuICAgIC8+XG4gICAgPHNlbGVjdCBjbGFzcz1cImRyb3Bkb3duXCIgYmluZDp2YWx1ZT17dHlwZX0gb246aW5wdXQ9e3VwZGF0ZX0+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJtb250aFwiPk1vbnRoPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJpbnRlcmNhbGFyeVwiPkludGVyY2FsYXJ5PC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaWNvblwiIHVzZTp0cmFzaCAvPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAubW9udGgge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgYXV0byBhdXRvO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICB9XG5cbiAgICAubW9udGggLmljb24ge1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgZmxpcCB9IGZyb20gXCJzdmVsdGUvYW5pbWF0ZVwiO1xuICAgIGltcG9ydCB7IGRuZHpvbmUsIFNPVVJDRVMsIFRSSUdHRVJTIH0gZnJvbSBcInN2ZWx0ZS1kbmQtYWN0aW9uXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBCdXR0b25Db21wb25lbnQsXG4gICAgICAgIEV4dHJhQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBzZXRJY29uLFxuICAgICAgICBTZXR0aW5nLFxuICAgICAgICBUZXh0Q29tcG9uZW50XG4gICAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IENhbGVuZGFyLCBZZWFyIH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcblxuICAgIGltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJzcmMvdXRpbHMvZnVuY3Rpb25zXCI7XG4gICAgaW1wb3J0IHsgY29uZmlybVdpdGhNb2RhbCB9IGZyb20gXCIuLi8uLi9tb2RhbHMvY29uZmlybVwiO1xuICAgIGltcG9ydCBUb2dnbGVDb21wb25lbnQgZnJvbSBcIi4uL1NldHRpbmdzL1RvZ2dsZUNvbXBvbmVudC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgQWRkTmV3IGZyb20gXCIuLi9VdGlsaXRpZXMvQWRkTmV3LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBOb0V4aXN0aW5nSXRlbXMgZnJvbSBcIi4uL1V0aWxpdGllcy9Ob0V4aXN0aW5nSXRlbXMuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IGNhbGVuZGFyOiBDYWxlbmRhcjtcblxuICAgICQ6IHllYXJzID0gY2FsZW5kYXIuc3RhdGljLnllYXJzO1xuICAgICQ6IHVzZUN1c3RvbVllYXJzID0gY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzO1xuXG4gICAgY29uc3QgZ3JpcCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwiZmFudGFzeS1jYWxlbmRhci1ncmlwXCIpO1xuICAgIH07XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCwgaXRlbTogWWVhcikgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKFxuICAgICAgICAgICAgICAgICgpID0+ICh5ZWFycyA9IHllYXJzLmZpbHRlcigoeWVhcikgPT4geWVhci5pZCAhPT0gaXRlbS5pZCkpXG4gICAgICAgICAgICApO1xuICAgIH07XG5cbiAgICBjb25zdCBuYW1lID0gKG5vZGU6IEhUTUxFbGVtZW50LCBpdGVtOiBZZWFyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBuZXcgVGV4dENvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldFZhbHVlKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIk5hbWVcIilcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0ubmFtZSA9IHY7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJ5ZWFycy11cGRhdGVcIiwgeWVhcnMpO1xuICAgICAgICAgICAgICAgIHllYXJzID0geWVhcnM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29tcC5pbnB1dEVsLnNldEF0dHIoXCJzdHlsZVwiLCBcIndpZHRoOiAxMDAlO1wiKTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGxldCBhcHA6IEFwcDtcblxuICAgIGNvbnN0IGN1c3RvbURlc2MgPSBjcmVhdGVGcmFnbWVudCgoZWwpID0+IHtcbiAgICAgICAgZWwuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICB0ZXh0OiBcIkNyZWF0ZSBjdXN0b20geWVhcnMgdG8gZGlzcGxheSBpbnN0ZWFkIG9mIGluY3JlbWVudGluZyBmcm9tIDEuXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgIGVsLmNyZWF0ZVNwYW4oeyB0ZXh0OiBcIklmIG9uLCBcIiB9KTtcbiAgICAgICAgZWwuY3JlYXRlRWwoXCJzdHJvbmdcIiwge1xuICAgICAgICAgICAgdGV4dDogXCJvbmx5IHRoZSB5ZWFycyBhZGRlZCBiZWxvdyB3aWxsIGJlIGRpc3BsYXllZC5cIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29uZmlybUN1c3RvbSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzICYmXG4gICAgICAgICAgICB5ZWFycy5sZW5ndGggJiZcbiAgICAgICAgICAgIChhd2FpdCBjb25maXJtV2l0aE1vZGFsKFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICBcIlRoZSBjdXN0b20geWVhcnMgeW91IGhhdmUgY3JlYXRlZCB3aWxsIGJlIHJlbW92ZWQuIFByb2NlZWQ/XCJcbiAgICAgICAgICAgICkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgY2FsZW5kYXIuc3RhdGljLnllYXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzID0gIWNhbGVuZGFyLnN0YXRpYy51c2VDdXN0b21ZZWFycztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhcnREcmFnKGU6IEV2ZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGZsaXBEdXJhdGlvbk1zID0gMzAwO1xuICAgIGxldCBkcmFnRGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNvbnNpZGVyKGU6IEN1c3RvbUV2ZW50PEdlbmVyaWNEbmRFdmVudDxZZWFyPj4pIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxuICAgICAgICAgICAgaW5mbzogeyBzb3VyY2UsIHRyaWdnZXIgfVxuICAgICAgICB9ID0gZS5kZXRhaWw7XG4gICAgICAgIHllYXJzID0gbmV3SXRlbXM7XG4gICAgICAgIC8vIEVuc3VyZSBkcmFnZ2luZyBpcyBzdG9wcGVkIG9uIGRyYWcgZmluaXNoIHZpYSBrZXlib2FyZFxuICAgICAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLktFWUJPQVJEICYmIHRyaWdnZXIgPT09IFRSSUdHRVJTLkRSQUdfU1RPUFBFRCkge1xuICAgICAgICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVGaW5hbGl6ZShlOiBDdXN0b21FdmVudDxHZW5lcmljRG5kRXZlbnQ8WWVhcj4+KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGl0ZW1zOiBuZXdJdGVtcyxcbiAgICAgICAgICAgIGluZm86IHsgc291cmNlIH1cbiAgICAgICAgfSA9IGUuZGV0YWlsO1xuICAgICAgICB5ZWFycyA9IG5ld0l0ZW1zO1xuICAgICAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEgcG9pbnRlciAobW91c2UsIHRvdWNoKVxuICAgICAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLlBPSU5URVIpIHtcbiAgICAgICAgICAgIGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgJDoge1xuICAgICAgICBkaXNwYXRjaChcInllYXJzLXVwZGF0ZVwiLCB5ZWFycyk7XG4gICAgICAgIC8vVE9ETzogYWRkIG5ldyBkYXlzIHRvIGRyb3Bkb3duLCByZW1vdmUgcmVtb3ZlZCBkYXlzIGZyb20gZHJvcGRvd25cbiAgICB9XG5cbiAgICAkOiB7XG4gICAgICAgIGRpc3BhdGNoKFwidXNlLWN1c3RvbS11cGRhdGVcIiwgdXNlQ3VzdG9tWWVhcnMpO1xuICAgIH1cbjwvc2NyaXB0PlxuXG48VG9nZ2xlQ29tcG9uZW50XG4gICAgbmFtZT1cIlVzZSBDdXN0b20gWWVhcnNcIlxuICAgIGRlc2M9e2N1c3RvbURlc2N9XG4gICAgdmFsdWU9e3VzZUN1c3RvbVllYXJzfVxuICAgIG9uOmNsaWNrPXsoKSA9PiBjb25maXJtQ3VzdG9tKCl9XG4vPlxuXG57I2lmIHVzZUN1c3RvbVllYXJzfVxuICAgIDxBZGROZXdcbiAgICAgICAgb246Y2xpY2s9eygpID0+XG4gICAgICAgICAgICAoY2FsZW5kYXIuc3RhdGljLnllYXJzID0gW1xuICAgICAgICAgICAgICAgIC4uLih5ZWFycyA/PyBbXSksXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpZDogbmFub2lkKDYpLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInllYXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pfVxuICAgIC8+XG5cbiAgICB7I2lmICF5ZWFycyB8fCAheWVhcnMubGVuZ3RofVxuICAgICAgICA8Tm9FeGlzdGluZ0l0ZW1zIG1lc3NhZ2U9e1wiQ3JlYXRlIGEgbmV3IHllYXIgdG8gc2VlIGl0IGhlcmUuXCJ9IC8+XG4gICAgezplbHNlfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICB1c2U6ZG5kem9uZT17eyBpdGVtczogeWVhcnMsIGZsaXBEdXJhdGlvbk1zLCBkcmFnRGlzYWJsZWQgfX1cbiAgICAgICAgICAgIGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIlxuICAgICAgICAgICAgb246Y29uc2lkZXI9e2hhbmRsZUNvbnNpZGVyfVxuICAgICAgICAgICAgb246ZmluYWxpemU9e2hhbmRsZUZpbmFsaXplfVxuICAgICAgICA+XG4gICAgICAgICAgICB7I2VhY2ggeWVhcnMgYXMgaXRlbSAoaXRlbS5pZCl9XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlOmZsaXA9e3sgZHVyYXRpb246IGZsaXBEdXJhdGlvbk1zIH19XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwid2Vla2RheVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlOmdyaXBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlZG93bj17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICAgICAgb246dG91Y2hzdGFydD17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOm5hbWU9e2l0ZW19IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIiB1c2U6dHJhc2g9e2l0ZW19IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG57L2lmfVxuXG48c3R5bGU+XG4gICAgLnVzZS1jdXN0b20ge1xuICAgICAgICBwYWRkaW5nLXRvcDogMC43NXJlbTtcbiAgICB9XG4gICAgLndlZWtkYXkge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIGF1dG87XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgIH1cblxuICAgIC53ZWVrZGF5IC5pY29uIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLndlZWtkYXkge1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgfVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgeyBBcHAsIEJ1dHRvbkNvbXBvbmVudCwgTW9kYWwgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpcm1XaXRoTW9kYWwoXG4gICAgYXBwOiBBcHAsXG4gICAgdGV4dDogc3RyaW5nLFxuICAgIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH0gPSB7XG4gICAgICAgIGN0YTogXCJZZXNcIixcbiAgICAgICAgc2Vjb25kYXJ5OiBcIk5vXCJcbiAgICB9XG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDb25maXJtTW9kYWwoYXBwLCB0ZXh0LCBidXR0b25zKTtcbiAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobW9kYWwuY29uZmlybWVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgbW9kYWwub3BlbigpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCxcbiAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgY29uZmlybWVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5hZGRDbGFzcyhcImNvbmZpcm0tbW9kYWxcIik7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcInBcIiwge1xuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItY29uZmlybS1idXR0b25zXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgQnV0dG9uQ29tcG9uZW50KGJ1dHRvbkVsKVxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KHRoaXMuYnV0dG9ucy5jdGEpXG4gICAgICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uRWwpXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQodGhpcy5idXR0b25zLnNlY29uZGFyeSlcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgRXZlbnQsIEV2ZW50Q2F0ZWdvcnkgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IERvdCBmcm9tIFwiLi4vVXRpbGl0aWVzL0RvdC5zdmVsdGVcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgYiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIik7XG4gICAgICAgIGIuZXh0cmFTZXR0aW5nc0VsLnNldEF0dHIoXCJzdHlsZVwiLCBcIm1hcmdpbi1sZWZ0OiAwO1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJwZW5jaWxcIikuc2V0VG9vbHRpcChcIkVkaXRcIik7XG4gICAgfTtcbiAgICBleHBvcnQgbGV0IGV2ZW50OiBFdmVudDtcbiAgICBleHBvcnQgbGV0IGNhdGVnb3J5OiBFdmVudENhdGVnb3J5O1xuICAgIGV4cG9ydCBsZXQgZGF0ZTogc3RyaW5nO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJldmVudFwiPlxuICAgIDxkaXYgY2xhc3M9XCJldmVudC1pbmZvXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwic2V0dGluZy1pdGVtLW5hbWVcIj5cbiAgICAgICAgICAgIHsjaWYgY2F0ZWdvcnkgIT0gbnVsbH1cbiAgICAgICAgICAgICAgICA8RG90IGNvbG9yPXtjYXRlZ29yeS5jb2xvcn0gbGFiZWw9e2NhdGVnb3J5Lm5hbWV9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAge2V2ZW50Lm5hbWV9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRhdGVcIj5cbiAgICAgICAgICAgICAgICB7ZGF0ZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbGFtcFwiPntldmVudC5kZXNjcmlwdGlvbiA/PyBcIlwifTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaWNvbnNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIiB1c2U6ZWRpdCBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJlZGl0XCIpfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvblwiIHVzZTp0cmFzaCBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJkZWxldGVcIil9IC8+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5ldmVudCB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG87XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgfVxuICAgIC5ldmVudC1pbmZvIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgLmljb25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICAgICAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmV2ZW50IC5pY29uIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmRhdGUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGdhcDogMC4yNXJlbTtcbiAgICB9XG4gICAgLmNsYW1wIHtcbiAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgICAgIC13ZWJraXQtbGluZS1jbGFtcDogMztcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAgICAgd29yZC1icmVhazoga2VlcC1hbGw7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHdpZHRoOiBjYWxjKHZhcigtLWV2ZW50LW1heC13aWR0aCkgKiAwLjc1KTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgZXhwb3J0IGxldCBjb2xvcjogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgbGFiZWw6IHN0cmluZztcbjwvc2NyaXB0PlxuXG48c3ZnXG4gICAgY2xhc3M9XCJkb3RcIlxuICAgIHZpZXdCb3g9XCIwIDAgNiA2XCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICBhcmlhLWxhYmVsPXtsYWJlbH1cbj5cbiAgICA8Y2lyY2xlIHN0cm9rZT17Y29sb3J9IGZpbGw9e2NvbG9yfSBjeD1cIjNcIiBjeT1cIjNcIiByPVwiMlwiIC8+XG48L3N2Zz5cblxuPHN0eWxlPlxuICAgIC5kb3Qge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICAgaGVpZ2h0OiAwLjg3NWVtO1xuICAgICAgICB3aWR0aDogMC44NzVlbTtcbiAgICAgICAgbWFyZ2luOiAwIDFweDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBFdmVudCwgQ2FsZW5kYXIgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuICAgIGltcG9ydCB7IGRhdGVTdHJpbmcsIG5hbm9pZCB9IGZyb20gXCJzcmMvdXRpbHMvZnVuY3Rpb25zXCI7XG5cbiAgICBpbXBvcnQgRXZlbnRJbnN0YW5jZSBmcm9tIFwiLi9FdmVudEluc3RhbmNlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCBBZGROZXcgZnJvbSBcIi4uL1V0aWxpdGllcy9BZGROZXcuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IE5vRXhpc3RpbmdJdGVtcyBmcm9tIFwiLi4vVXRpbGl0aWVzL05vRXhpc3RpbmdJdGVtcy5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgY2FsZW5kYXI6IENhbGVuZGFyO1xuICAgICQ6IGNhdGVnb3JpZXMgPSBjYWxlbmRhci5jYXRlZ29yaWVzO1xuICAgICQ6IGV2ZW50cyA9IGNhbGVuZGFyLmV2ZW50cztcbiAgICAkOiBtb250aHMgPSBjYWxlbmRhci5zdGF0aWMubW9udGhzO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IGVkaXRFdmVudCA9IChpdGVtOiBFdmVudCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChcIm5ldy1pdGVtXCIsIGl0ZW0pO1xuICAgIH07XG4gICAgY29uc3QgZGVsZXRlRXZlbnQgPSAoaXRlbTogRXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnRzID0gZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IGV2ZW50LmlkICE9PSBpdGVtLmlkKTtcbiAgICAgICAgZGlzcGF0Y2goXCJlZGl0LWV2ZW50c1wiLCBldmVudHMpO1xuICAgIH07XG5cbiAgICAkOiB7XG4gICAgICAgIGV2ZW50cy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS5kYXRlLnllYXIgIT0gYi5kYXRlLnllYXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5kYXRlLnllYXIgLSBiLmRhdGUueWVhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhLmRhdGUubW9udGggIT0gYi5kYXRlLm1vbnRoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuZGF0ZS5tb250aCAtIGIuZGF0ZS5tb250aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhLmRhdGUuZGF5IC0gYi5kYXRlLmRheTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGdldENhdGVnb3J5ID0gKGNhdGVnb3J5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXMuZmluZCgoeyBpZCB9KSA9PiBpZCA9PSBjYXRlZ29yeSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48QWRkTmV3IC8+XG5cbnsjaWYgIWV2ZW50cy5sZW5ndGh9XG4gICAgPE5vRXhpc3RpbmdJdGVtcyBtZXNzYWdlPXtcIkNyZWF0ZSBhIG5ldyBldmVudCB0byBzZWUgaXQgaGVyZS5cIn0gLz5cbns6ZWxzZX1cbiAgICA8ZGl2IGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIj5cbiAgICAgICAgeyNlYWNoIGV2ZW50cyBhcyBldmVudH1cbiAgICAgICAgICAgIDxFdmVudEluc3RhbmNlXG4gICAgICAgICAgICAgICAge2V2ZW50fVxuICAgICAgICAgICAgICAgIGNhdGVnb3J5PXtnZXRDYXRlZ29yeShldmVudC5jYXRlZ29yeSl9XG4gICAgICAgICAgICAgICAgZGF0ZT17ZGF0ZVN0cmluZyhldmVudC5kYXRlLCBtb250aHMsIGV2ZW50LmVuZCl9XG4gICAgICAgICAgICAgICAgb246ZWRpdD17KCkgPT4gZWRpdEV2ZW50KGV2ZW50KX1cbiAgICAgICAgICAgICAgICBvbjpkZWxldGU9eygpID0+IGRlbGV0ZUV2ZW50KGV2ZW50KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIHsvZWFjaH1cbiAgICA8L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQge1xuICAgICAgICBCdXR0b25Db21wb25lbnQsXG4gICAgICAgIEV4dHJhQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBUZXh0Q29tcG9uZW50XG4gICAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgdHlwZSB7IENhbGVuZGFyLCBFdmVudENhdGVnb3J5IH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwic3JjL3V0aWxzL2Z1bmN0aW9uc1wiO1xuICAgIGltcG9ydCB7IERFRkFVTFRfQ0FURUdPUllfQ09MT1IgfSBmcm9tIFwic3JjL3V0aWxzL2NvbnN0YW50c1wiO1xuICAgIGltcG9ydCBBZGROZXcgZnJvbSBcIi4uL1V0aWxpdGllcy9BZGROZXcuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IE5vRXhpc3RpbmdJdGVtcyBmcm9tIFwiLi4vVXRpbGl0aWVzL05vRXhpc3RpbmdJdGVtcy5zdmVsdGVcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBleHBvcnQgbGV0IGNhbGVuZGFyOiBDYWxlbmRhcjtcblxuICAgICQ6IGNhdGVnb3JpZXMgPSBjYWxlbmRhci5jYXRlZ29yaWVzO1xuXG4gICAgY29uc3QgbmFtZSA9IChub2RlOiBIVE1MRWxlbWVudCwgY2F0ZWdvcnk6IEV2ZW50Q2F0ZWdvcnkpID0+IHtcbiAgICAgICAgY29uc3QgY29tcCA9IG5ldyBUZXh0Q29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VmFsdWUoY2F0ZWdvcnkubmFtZSlcbiAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIk5hbWVcIilcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5Lm5hbWUgPSB2O1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwidXBkYXRlXCIsIGNhdGVnb3J5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb21wLmlucHV0RWwuc2V0QXR0cihcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7XCIpO1xuICAgIH07XG4gICAgY29uc3QgdHJhc2ggPSAobm9kZTogSFRNTEVsZW1lbnQsIGl0ZW06IEV2ZW50Q2F0ZWdvcnkpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAoY2F0ZWdvcnkpID0+IGNhdGVnb3J5LmlkICE9PSBpdGVtLmlkXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkaXNwYXRjaChcImRlbGV0ZVwiLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDb2xvciA9IChldmVudDogRXZlbnQsIGNhdGVnb3J5OiBFdmVudENhdGVnb3J5KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcbiAgICAgICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkpIHJldHVybjtcbiAgICAgICAgY2F0ZWdvcnkuY29sb3IgPSB0YXJnZXQudmFsdWU7XG4gICAgICAgIGRpc3BhdGNoKFwidXBkYXRlXCIsIGNhdGVnb3J5KTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWRkIE5ld1wiKVxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCIrXCIpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXIuY2F0ZWdvcmllcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBERUZBVUxUX0NBVEVHT1JZX0NPTE9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDYXRlZ29yeVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSkuYnV0dG9uRWwuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxBZGROZXdcbiAgICBvbjpjbGljaz17KCkgPT5cbiAgICAgICAgKGNhbGVuZGFyLmNhdGVnb3JpZXMgPSBbXG4gICAgICAgICAgICAuLi5jYXRlZ29yaWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoNiksXG4gICAgICAgICAgICAgICAgY29sb3I6IERFRkFVTFRfQ0FURUdPUllfQ09MT1IsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJDYXRlZ29yeVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0pfVxuLz5cblxueyNpZiAhY2F0ZWdvcmllcy5sZW5ndGh9XG4gICAgPE5vRXhpc3RpbmdJdGVtcyBtZXNzYWdlPXtcIkNyZWF0ZSBhIG5ldyBldmVudCBjYXRlZ29yeSB0byBzZWUgaXQgaGVyZS5cIn0gLz5cbns6ZWxzZX1cbiAgICA8ZGl2IGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIj5cbiAgICAgICAgeyNlYWNoIGNhdGVnb3JpZXMgYXMgY2F0ZWdvcnl9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2F0ZWdvcnlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHVzZTpuYW1lPXtjYXRlZ29yeX0gLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY29sb3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NhdGVnb3J5LmNvbG9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgb246Y2hhbmdlPXsoZXZ0KSA9PiB1cGRhdGVDb2xvcihldnQsIGNhdGVnb3J5KX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHVzZTp0cmFzaD17Y2F0ZWdvcnl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2Plxuey9pZn1cblxuPHN0eWxlPlxuICAgIC5jYXRlZ29yeSB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG8gYXV0bztcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgICAgIHBhZGRpbmctdG9wOiAwLjc1cmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiZXhwb3J0IGNvbnN0IERFRkFVTFRfQ0FURUdPUllfQ09MT1IgPSBcIiM4MDgwODBcIjtcblxuZXhwb3J0IGNvbnN0IE1PT05fU0hBRE9XUyA9IFtcbiAgICBcIk02LjUsMTZhOS41LDkuNSAwIDEsMCAxOSwwYTkuNSw5LjUgMCAxLDAgLTE5LDBcIixcbiAgICBcIk0xOS43OSw2QzIyLjI1LDcuMiwyNSw5LjkyLDI1LDE2cy0yLjc1LDguOC01LjIxLDEwYTEwLjU5LDEwLjU5LDAsMCwxLTMuNzkuNzFBMTAuNzIsMTAuNzIsMCwwLDEsMTYsNS4yOCwxMC41OSwxMC41OSwwLDAsMSwxOS43OSw2WlwiLFxuICAgIFwiTTE5LjQzLDUuODZDMjEuNzksNywyNC41LDkuNywyNC41LDE2cy0yLjcxLDktNS4wNywxMC4xNGExMC41NSwxMC41NSwwLDAsMS0zLjQzLjU4QTEwLjcyLDEwLjcyLDAsMCwxLDE2LDUuMjgsMTAuNTUsMTAuNTUsMCwwLDEsMTkuNDMsNS44NlpcIixcbiAgICBcIk0xNy44Nyw1LjQ2QzIwLjIzLDYuMzQsMjQsOC44OCwyNCwxNi4xN2MwLDYuODUtMy4zMyw5LjM2LTUuNjksMTAuMjlhMTEsMTEsMCwwLDEtMi4zMS4yNkExMC43MiwxMC43MiwwLDAsMSwxNiw1LjI4LDEwLjQ5LDEwLjQ5LDAsMCwxLDE3Ljg3LDUuNDZaXCIsXG4gICAgXCJNMTcuNzksNS40NUMyMCw2LjMsMjMuNSw4Ljc3LDIzLjUsMTUuODhjMCw3LjM3LTMuNzUsOS44Ny01Ljk1LDEwLjcxYTkuOTIsOS45MiwwLDAsMS0xLjU1LjEzQTEwLjcyLDEwLjcyLDAsMCwxLDE2LDUuMjgsMTAuNTQsMTAuNTQsMCwwLDEsMTcuNzksNS40NVpcIixcbiAgICBcIk0xNy4zNSw1LjM4YzEuOS43OSw1LjE1LDMuMjUsNS4xNSwxMC43MiwwLDcuMjUtMy4wNiw5LjY4LTUsMTAuNWExMC44NywxMC44NywwLDAsMS0xLjUyLjEyQTEwLjcyLDEwLjcyLDAsMCwxLDE2LDUuMjgsMTAuMSwxMC4xLDAsMCwxLDE3LjM1LDUuMzhaXCIsXG4gICAgXCJNMTcuMDUsNS4zNGMxLjYuNzUsNC40NSwzLjE3LDQuNDUsMTAuNzksMCw3LjM5LTIuNjgsOS43Ni00LjMsMTAuNTJhMTEuOSwxMS45LDAsMCwxLTEuMi4wN0ExMC43MiwxMC43MiwwLDAsMSwxNiw1LjI4LDksOSwwLDAsMSwxNy4wNSw1LjM0WlwiLFxuICAgIFwiTTE2Ljg1LDUuMzNjMS4zLjc0LDMuNjUsMy4xMiwzLjY1LDEwLjY3cy0yLjM1LDkuOTMtMy42NSwxMC42N2MtLjI4LDAtLjU2LDAtLjg1LDBBMTAuNzIsMTAuNzIsMCwwLDEsMTYsNS4yOCw3LjkyLDcuOTIsMCwwLDEsMTYuODUsNS4zM1pcIixcbiAgICBcIk0xNi40Niw1LjMxYy45NS43OCwzLDMuMzQsMywxMC42OXMtMi4wOSw5LjkxLTMsMTAuNjlsLS40NiwwQTEwLjcyLDEwLjcyLDAsMCwxLDE2LDUuMjhaXCIsXG4gICAgXCJNMTYuMjksNS4zYy42NS44LDIuMjEsMy40OCwyLjIxLDEwLjc4UzE3LDI1LjkxLDE2LjMsMjYuN2wtLjMsMEExMC43MiwxMC43MiwwLDAsMSwxNiw1LjI4WlwiLFxuICAgIFwiTTE2LjEzLDUuMjljLjM3Ljg5LDEuMzcsMy45MiwxLjM3LDEwLjc5cy0xLDkuNzYtMS4zNiwxMC42M0gxNkExMC43MiwxMC43MiwwLDAsMSwxNiw1LjI4WlwiLFxuICAgIFwiTTE2LDUuMjlBODUuNSw4NS41LDAsMCwxLDE2LjUsMTYsODUuNSw4NS41LDAsMCwxLDE2LDI2LjcxaDBBMTAuNzIsMTAuNzIsMCwwLDEsMTYsNS4yOFpcIixcbiAgICBcIk0xNiwyNi43MkExMC43MiwxMC43MiwwLDAsMSwxNiw1LjI4WlwiLFxuICAgIFwiTTE1LjUsMTZBODUuNTksODUuNTksMCwwLDAsMTYsMjYuNzIsMTAuNzIsMTAuNzIsMCwwLDEsMTYsNS4yOCw4NS41OSw4NS41OSwwLDAsMCwxNS41LDE2WlwiLFxuICAgIFwiTTE0LjUsMTYuMDhjMCw2Ljg0LDEsOS43NywxLjM2LDEwLjYzYTEwLjcxLDEwLjcxLDAsMCwxLDAtMjEuNDJDMTUuNSw2LjE3LDE0LjUsOS4yLDE0LjUsMTYuMDhaXCIsXG4gICAgXCJNMTUuNywyNi43YTEwLjcsMTAuNywwLDAsMSwwLTIxLjRjLS42NS44LTIuMjEsMy40Ny0yLjIxLDEwLjc4UzE1LDI1LjkyLDE1LjcsMjYuN1pcIixcbiAgICBcIk0xNS41NSwyNi43YTEwLjcxLDEwLjcxLDAsMCwxLDAtMjEuNGMtMSwuNzgtMy4wNSwzLjM0LTMuMDUsMTAuN1MxNC42LDI1LjkyLDE1LjU1LDI2LjdaXCIsXG4gICAgXCJNMTUuMTYsMjYuNjhhMTAuNzEsMTAuNzEsMCwwLDEsMC0yMS4zNkMxMy44NSw2LjA2LDExLjUsOC40MywxMS41LDE2UzEzLjg1LDI1Ljk0LDE1LjE2LDI2LjY4WlwiLFxuICAgIFwiTTE0LjgxLDI2LjY1QTEwLjcyLDEwLjcyLDAsMCwxLDE1LDUuMzNjLTEuNTkuNzYtNC40NSwzLjE3LTQuNDUsMTAuOEMxMC41LDIzLjUzLDEzLjE5LDI1LjksMTQuODEsMjYuNjVaXCIsXG4gICAgXCJNMTQuNDksMjYuNmExMC43MSwxMC43MSwwLDAsMSwuMTctMjEuMjNjLTEuOS44LTUuMTYsMy4yNC01LjE2LDEwLjczQzkuNSwyMy4zNywxMi41NywyNS43OSwxNC40OSwyNi42WlwiLFxuICAgIFwiTTE0LjQ2LDI2LjZhMTAuNzEsMTAuNzEsMCwwLDEtLjI0LTIxLjE2QzEyLDYuMjksOC41LDguNzYsOC41LDE1Ljg4LDguNSwyMy4yNiwxMi4yNywyNS43NiwxNC40NiwyNi42WlwiLFxuICAgIFwiTTEzLjcyLDI2LjQ3YTEwLjcxLDEwLjcxLDAsMCwxLC40My0yMUMxMS43OCw2LjMzLDgsOC44Nyw4LDE2LjE3LDgsMjMsMTEuMzUsMjUuNTUsMTMuNzIsMjYuNDdaXCIsXG4gICAgXCJNMTIuNiwyNi4xOWExMC43MywxMC43MywwLDAsMSwwLTIwLjM1QzEwLjIzLDcsNy41LDkuNjcsNy41LDE2czIuNzMsOSw1LjEsMTAuMTZaXCIsXG4gICAgXCJNMTIuMjMsMjZhMTAuNywxMC43LDAsMCwxLDAtMjBDOS43Nyw3LjE5LDcsOS45LDcsMTZTOS43NywyNC44MSwxMi4yMywyNlpcIixcbiAgICBudWxsLFxuICAgIFwiTTE5Ljc3LDI2QzIyLjIzLDI0LjgxLDI1LDIyLjEsMjUsMTZTMjIuMjMsNy4xOSwxOS43Nyw2YTEwLjcsMTAuNywwLDAsMSwwLDIwWlwiLFxuICAgIFwiTTE5LjQsMjYuMTZDMjEuNzcsMjUsMjQuNSwyMi4zMywyNC41LDE2UzIxLjc3LDcsMTkuNCw1Ljg0YTEwLjcxLDEwLjcxLDAsMCwxLDAsMjAuMzJaXCIsXG4gICAgXCJNMTguMjgsMjYuNDdDMjAuNjUsMjUuNTUsMjQsMjMsMjQsMTYuMTdjMC03LjMtMy43OC05Ljg0LTYuMTUtMTAuNzJhMTAuNzEsMTAuNzEsMCwwLDEsLjQzLDIxWlwiLFxuICAgIFwiTTE3LjU0LDI2LjZjMi4xOS0uODQsNi0zLjM0LDYtMTAuNzIsMC03LjEyLTMuNS05LjU5LTUuNzItMTAuNDRhMTAuNzEsMTAuNzEsMCwwLDEtLjI0LDIxLjE2WlwiLFxuICAgIFwiTTE3LjUxLDI2LjZjMS45Mi0uODEsNS0zLjIzLDUtMTAuNSwwLTcuNDktMy4yNi05LjkzLTUuMTYtMTAuNzNhMTAuNzEsMTAuNzEsMCwwLDEsLjE3LDIxLjIzWlwiLFxuICAgIFwiTTE3LjE5LDI2LjY1YzEuNjItLjc1LDQuMzEtMy4xMiw0LjMxLTEwLjUyLDAtNy42My0yLjg2LTEwLTQuNDUtMTAuOGExMC43MiwxMC43MiwwLDAsMSwuMTQsMjEuMzJaXCIsXG4gICAgXCJNMTYuODQsMjYuNjhjMS4zMS0uNzQsMy42Ni0zLjExLDMuNjYtMTAuNjhTMTguMTUsNi4wNiwxNi44NCw1LjMyYTEwLjcxLDEwLjcxLDAsMCwxLDAsMjEuMzZaXCIsXG4gICAgXCJNMTYuNDUsMjYuN2MuOTUtLjc4LDMuMDUtMy4zNCwzLjA1LTEwLjdTMTcuNCw2LjA4LDE2LjQ1LDUuM2ExMC43MSwxMC43MSwwLDAsMSwwLDIxLjRaXCIsXG4gICAgXCJNMTYuMywyNi43Yy42Ny0uNzgsMi4yLTMuMzcsMi4yLTEwLjYyUzE2Ljk0LDYuMSwxNi4yOSw1LjNhMTAuNywxMC43LDAsMCwxLDAsMjEuNFpcIixcbiAgICBcIk0xNi4xNCwyNi43MWMuMzctLjg2LDEuMzYtMy43OSwxLjM2LTEwLjYzcy0xLTkuOTEtMS4zNy0xMC43OWExMC43MSwxMC43MSwwLDAsMSwwLDIxLjQyWlwiLFxuICAgIFwiTTE2LDI2LjcyQTg1LjU5LDg1LjU5LDAsMCwwLDE2LjUsMTYsODUuNTksODUuNTksMCwwLDAsMTYsNS4yOGExMC43MiwxMC43MiwwLDAsMSwwLDIxLjQ0WlwiLFxuICAgIFwiTTE2LDI2LjcyVjUuMjhhMTAuNzIsMTAuNzIsMCwwLDEsMCwyMS40NFpcIixcbiAgICBcIk0xNiwyNi43MmgwQTg1LjU5LDg1LjU5LDAsMCwxLDE1LjUsMTYsODUuNTksODUuNTksMCwwLDEsMTYsNS4yOGgwYTEwLjcyLDEwLjcyLDAsMCwxLDAsMjEuNDRaXCIsXG4gICAgXCJNMTYsMjYuNzJoLS4xNGMtLjM3LS44Ni0xLjM2LTMuNzktMS4zNi0xMC42M3MxLTkuOTEsMS4zNy0xMC43OUgxNmExMC43MiwxMC43MiwwLDAsMSwwLDIxLjQ0WlwiLFxuICAgIFwiTTE2LDI2LjcybC0uMywwYy0uNjctLjc4LTIuMi0zLjM3LTIuMi0xMC42MnMxLjU2LTEwLDIuMjEtMTAuNzhsLjI5LDBhMTAuNzIsMTAuNzIsMCwwLDEsMCwyMS40NFpcIixcbiAgICBcIk0xNiwyNi43MmwtLjQ1LDBjLTEtLjc4LTMuMDUtMy4zNC0zLjA1LTEwLjdzMi4xLTkuOTIsMy4wNS0xMC43bC40NSwwYTEwLjcyLDEwLjcyLDAsMCwxLDAsMjEuNDRaXCIsXG4gICAgXCJNMTYsMjYuNzJjLS4yOCwwLS41NiwwLS44NCwwQzEzLjg1LDI1Ljk0LDExLjUsMjMuNTcsMTEuNSwxNnMyLjM1LTkuOTQsMy42Ni0xMC42OGMuMjgsMCwuNTYsMCwuODQsMGExMC43MiwxMC43MiwwLDAsMSwwLDIxLjQ0WlwiLFxuICAgIFwiTTE2LDI2LjcyYTExLjcsMTEuNywwLDAsMS0xLjE5LS4wN2MtMS42Mi0uNzUtNC4zMS0zLjEyLTQuMzEtMTAuNTIsMC03LjYzLDIuODYtMTAsNC40NS0xMC44LjM1LDAsLjcsMCwxLjA1LDBhMTAuNzIsMTAuNzIsMCwwLDEsMCwyMS40NFpcIixcbiAgICBcIk0xNiwyNi43MmExMC44NSwxMC44NSwwLDAsMS0xLjUxLS4xMmMtMS45Mi0uODEtNS0zLjIzLTUtMTAuNSwwLTcuNDksMy4yNi05LjkzLDUuMTYtMTAuNzNBMTEuOSwxMS45LDAsMCwxLDE2LDUuMjhhMTAuNzIsMTAuNzIsMCwwLDEsMCwyMS40NFpcIixcbiAgICBcIk0xNiwyNi43MmExMS4xNiwxMS4xNiwwLDAsMS0xLjU0LS4xMmMtMi4xOS0uODQtNi0zLjM0LTYtMTAuNzIsMC03LjEyLDMuNS05LjU5LDUuNzItMTAuNDRBMTAuNDMsMTAuNDMsMCwwLDEsMTYsNS4yOGExMC43MiwxMC43MiwwLDAsMSwwLDIxLjQ0WlwiLFxuICAgIFwiTTE2LDI2LjcyYTEwLjY5LDEwLjY5LDAsMCwxLTIuMjgtLjI1QzExLjM1LDI1LjU1LDgsMjMsOCwxNi4xN2MwLTcuMywzLjc4LTkuODQsNi4xNS0xMC43MkExMS4yNiwxMS4yNiwwLDAsMSwxNiw1LjI4YTEwLjcyLDEwLjcyLDAsMCwxLDAsMjEuNDRaXCIsXG4gICAgXCJNMTYsMjYuNzJhMTAuNjMsMTAuNjMsMCwwLDEtMy40LS41NkMxMC4yMywyNSw3LjUsMjIuMzMsNy41LDE2czIuNzMtOSw1LjEtMTAuMTZBMTAuNzIsMTAuNzIsMCwxLDEsMTYsMjYuNzJaXCIsXG4gICAgXCJNMTYsMjYuNzJhMTAuNTIsMTAuNTIsMCwwLDEtMy43Ny0uN0M5Ljc3LDI0LjgxLDcsMjIuMSw3LDE2UzkuNzcsNy4xOSwxMi4yMyw2QTEwLjUyLDEwLjUyLDAsMCwxLDE2LDUuMjhhMTAuNzIsMTAuNzIsMCwwLDEsMCwyMS40NFpcIlxuXTtcblxuZXhwb3J0IGNvbnN0IFNIQURPV19NQVAgPSB7XG4gICAgXCJOZXcgTW9vblwiOiBNT09OX1NIQURPV1NbMF0sXG4gICAgXCJOZXcgTW9vbiBGYWRpbmdcIjogTU9PTl9TSEFET1dTWzFdLFxuICAgIFwiTmV3IE1vb24gRmFkZWRcIjogTU9PTl9TSEFET1dTWzJdLFxuICAgIFwiV2F4aW5nIENyZXNjZW50IFJpc2luZ1wiOiBNT09OX1NIQURPV1NbM10sXG4gICAgXCJXYXhpbmcgQ3Jlc2NlbnQgUmlzZW5cIjogTU9PTl9TSEFET1dTWzRdLFxuICAgIFwiV2F4aW5nIENyZXNjZW50XCI6IE1PT05fU0hBRE9XU1s2XSxcbiAgICBcIldheGluZyBDcmVzY2VudCBGYWRpbmdcIjogTU9PTl9TSEFET1dTWzddLFxuICAgIFwiV2F4aW5nIENyZXNjZW50IEZhZGVkXCI6IE1PT05fU0hBRE9XU1s4XSxcbiAgICBcIkZpcnN0IFF1YXJ0ZXIgUmlzaW5nXCI6IE1PT05fU0hBRE9XU1s5XSxcbiAgICBcIkZpcnN0IFF1YXJ0ZXIgUmlzZW5cIjogTU9PTl9TSEFET1dTWzEwXSxcbiAgICBcIkZpcnN0IFF1YXJ0ZXJcIjogTU9PTl9TSEFET1dTWzEyXSxcbiAgICBcIkZpcnN0IFF1YXJ0ZXIgRmFkaW5nXCI6IE1PT05fU0hBRE9XU1sxM10sXG4gICAgXCJGaXJzdCBRdWFydGVyIEZhZGVkXCI6IE1PT05fU0hBRE9XU1sxNF0sXG4gICAgXCJXYXhpbmcgR2liYm91cyBSaXNpbmdcIjogTU9PTl9TSEFET1dTWzE1XSxcbiAgICBcIldheGluZyBHaWJib3VzIFJpc2VuXCI6IE1PT05fU0hBRE9XU1sxNl0sXG4gICAgXCJXYXhpbmcgR2liYm91c1wiOiBNT09OX1NIQURPV1NbMThdLFxuICAgIFwiV2F4aW5nIEdpYmJvdXMgRmFkaW5nXCI6IE1PT05fU0hBRE9XU1sxOV0sXG4gICAgXCJXYXhpbmcgR2liYm91cyBGYWRlZFwiOiBNT09OX1NIQURPV1NbMjBdLFxuICAgIFwiRnVsbCBNb29uIFJpc2luZ1wiOiBNT09OX1NIQURPV1NbMjFdLFxuICAgIFwiRnVsbCBNb29uIFJpc2VuXCI6IE1PT05fU0hBRE9XU1syMl0sXG4gICAgXCJGdWxsIE1vb25cIjogTU9PTl9TSEFET1dTWzI0XSxcbiAgICBcIkZ1bGwgTW9vbiBGYWRpbmdcIjogTU9PTl9TSEFET1dTWzI1XSxcbiAgICBcIkZ1bGwgTW9vbiBGYWRlZFwiOiBNT09OX1NIQURPV1NbMjZdLFxuICAgIFwiV2FuaW5nIEdpYmJvdXMgUmlzaW5nXCI6IE1PT05fU0hBRE9XU1syN10sXG4gICAgXCJXYW5pbmcgR2liYm91cyBSaXNlblwiOiBNT09OX1NIQURPV1NbMjhdLFxuICAgIFwiV2FuaW5nIEdpYmJvdXNcIjogTU9PTl9TSEFET1dTWzMwXSxcbiAgICBcIldhbmluZyBHaWJib3VzIEZhZGluZ1wiOiBNT09OX1NIQURPV1NbMzFdLFxuICAgIFwiV2FuaW5nIEdpYmJvdXMgRmFkZWRcIjogTU9PTl9TSEFET1dTWzMyXSxcbiAgICBcIkxhc3QgUXVhcnRlciBSaXNpbmdcIjogTU9PTl9TSEFET1dTWzMzXSxcbiAgICBcIkxhc3QgUXVhcnRlciBSaXNlblwiOiBNT09OX1NIQURPV1NbMzRdLFxuICAgIFwiTGFzdCBRdWFydGVyXCI6IE1PT05fU0hBRE9XU1szNl0sXG4gICAgXCJMYXN0IFF1YXJ0ZXIgRmFkaW5nXCI6IE1PT05fU0hBRE9XU1szN10sXG4gICAgXCJMYXN0IFF1YXJ0ZXIgRmFkZWRcIjogTU9PTl9TSEFET1dTWzM4XSxcbiAgICBcIldhbmluZyBDcmVzY2VudCBSaXNpbmdcIjogTU9PTl9TSEFET1dTWzM5XSxcbiAgICBcIldhbmluZyBDcmVzY2VudCBSaXNlblwiOiBNT09OX1NIQURPV1NbNDBdLFxuICAgIFwiV2FuaW5nIENyZXNjZW50XCI6IE1PT05fU0hBRE9XU1s0Ml0sXG4gICAgXCJXYW5pbmcgQ3Jlc2NlbnQgRmFkaW5nXCI6IE1PT05fU0hBRE9XU1s0M10sXG4gICAgXCJXYW5pbmcgQ3Jlc2NlbnQgRmFkZWRcIjogTU9PTl9TSEFET1dTWzQ0XSxcbiAgICBcIk5ldyBNb29uIFJpc2luZ1wiOiBNT09OX1NIQURPV1NbNDVdLFxuICAgIFwiTmV3IE1vb24gUmlzZW5cIjogTU9PTl9TSEFET1dTWzQ2XVxufTtcblxuZXhwb3J0IGNvbnN0IE1PT05fUEhBU0VTOiB7XG4gICAgW2dyYW51bGFyaXR5OiBudW1iZXJdOiBBcnJheTxQaGFzZT47XG59ID0ge1xuICAgIDQ6IFtcIk5ldyBNb29uXCIsIFwiRmlyc3QgUXVhcnRlclwiLCBcIkZ1bGwgTW9vblwiLCBcIkxhc3QgUXVhcnRlclwiXSxcblxuICAgIDg6IFtcbiAgICAgICAgXCJOZXcgTW9vblwiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudFwiLFxuICAgICAgICBcIkZpcnN0IFF1YXJ0ZXJcIixcbiAgICAgICAgXCJXYXhpbmcgR2liYm91c1wiLFxuICAgICAgICBcIkZ1bGwgTW9vblwiLFxuICAgICAgICBcIldhbmluZyBHaWJib3VzXCIsXG4gICAgICAgIFwiTGFzdCBRdWFydGVyXCIsXG4gICAgICAgIFwiV2FuaW5nIENyZXNjZW50XCJcbiAgICBdLFxuXG4gICAgMTY6IFtcbiAgICAgICAgXCJOZXcgTW9vblwiLFxuICAgICAgICBcIk5ldyBNb29uIEZhZGluZ1wiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudFwiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudCBGYWRpbmdcIixcbiAgICAgICAgXCJGaXJzdCBRdWFydGVyXCIsXG4gICAgICAgIFwiRmlyc3QgUXVhcnRlciBGYWRpbmdcIixcbiAgICAgICAgXCJXYXhpbmcgR2liYm91c1wiLFxuICAgICAgICBcIldheGluZyBHaWJib3VzIEZhZGluZ1wiLFxuICAgICAgICBcIkZ1bGwgTW9vblwiLFxuICAgICAgICBcIkZ1bGwgTW9vbiBGYWRpbmdcIixcbiAgICAgICAgXCJXYW5pbmcgR2liYm91c1wiLFxuICAgICAgICBcIldhbmluZyBHaWJib3VzIEZhZGluZ1wiLFxuICAgICAgICBcIkxhc3QgUXVhcnRlclwiLFxuICAgICAgICBcIkxhc3QgUXVhcnRlciBGYWRpbmdcIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnRcIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnQgRmFkaW5nXCJcbiAgICBdLFxuXG4gICAgMjQ6IFtcbiAgICAgICAgXCJOZXcgTW9vblwiLFxuICAgICAgICBcIk5ldyBNb29uIEZhZGluZ1wiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudCBSaXNpbmdcIixcbiAgICAgICAgXCJXYXhpbmcgQ3Jlc2NlbnRcIixcbiAgICAgICAgXCJXYXhpbmcgQ3Jlc2NlbnQgRmFkaW5nXCIsXG4gICAgICAgIFwiRmlyc3QgUXVhcnRlciBSaXNpbmdcIixcbiAgICAgICAgXCJGaXJzdCBRdWFydGVyXCIsXG4gICAgICAgIFwiRmlyc3QgUXVhcnRlciBGYWRpbmdcIixcbiAgICAgICAgXCJXYXhpbmcgR2liYm91cyBSaXNpbmdcIixcbiAgICAgICAgXCJXYXhpbmcgR2liYm91c1wiLFxuICAgICAgICBcIldheGluZyBHaWJib3VzIEZhZGluZ1wiLFxuICAgICAgICBcIkZ1bGwgTW9vbiBSaXNpbmdcIixcbiAgICAgICAgXCJGdWxsIE1vb25cIixcbiAgICAgICAgXCJGdWxsIE1vb24gRmFkaW5nXCIsXG4gICAgICAgIFwiV2FuaW5nIEdpYmJvdXMgUmlzaW5nXCIsXG4gICAgICAgIFwiV2FuaW5nIEdpYmJvdXNcIixcbiAgICAgICAgXCJXYW5pbmcgR2liYm91cyBGYWRpbmdcIixcbiAgICAgICAgXCJMYXN0IFF1YXJ0ZXIgUmlzaW5nXCIsXG4gICAgICAgIFwiTGFzdCBRdWFydGVyXCIsXG4gICAgICAgIFwiTGFzdCBRdWFydGVyIEZhZGluZ1wiLFxuICAgICAgICBcIldhbmluZyBDcmVzY2VudCBSaXNpbmdcIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnRcIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnQgRmFkaW5nXCIsXG4gICAgICAgIFwiTmV3IE1vb24gUmlzaW5nXCJcbiAgICBdLFxuXG4gICAgNDA6IFtcbiAgICAgICAgXCJOZXcgTW9vblwiLFxuICAgICAgICBcIk5ldyBNb29uIEZhZGluZ1wiLFxuICAgICAgICBcIk5ldyBNb29uIEZhZGVkXCIsXG4gICAgICAgIFwiV2F4aW5nIENyZXNjZW50IFJpc2luZ1wiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudCBSaXNlblwiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudFwiLFxuICAgICAgICBcIldheGluZyBDcmVzY2VudCBGYWRpbmdcIixcbiAgICAgICAgXCJXYXhpbmcgQ3Jlc2NlbnQgRmFkZWRcIixcbiAgICAgICAgXCJGaXJzdCBRdWFydGVyIFJpc2luZ1wiLFxuICAgICAgICBcIkZpcnN0IFF1YXJ0ZXIgUmlzZW5cIixcbiAgICAgICAgXCJGaXJzdCBRdWFydGVyXCIsXG4gICAgICAgIFwiRmlyc3QgUXVhcnRlciBGYWRpbmdcIixcbiAgICAgICAgXCJGaXJzdCBRdWFydGVyIEZhZGVkXCIsXG4gICAgICAgIFwiV2F4aW5nIEdpYmJvdXMgUmlzaW5nXCIsXG4gICAgICAgIFwiV2F4aW5nIEdpYmJvdXMgUmlzZW5cIixcbiAgICAgICAgXCJXYXhpbmcgR2liYm91c1wiLFxuICAgICAgICBcIldheGluZyBHaWJib3VzIEZhZGluZ1wiLFxuICAgICAgICBcIldheGluZyBHaWJib3VzIEZhZGVkXCIsXG4gICAgICAgIFwiRnVsbCBNb29uIFJpc2luZ1wiLFxuICAgICAgICBcIkZ1bGwgTW9vbiBSaXNlblwiLFxuICAgICAgICBcIkZ1bGwgTW9vblwiLFxuICAgICAgICBcIkZ1bGwgTW9vbiBGYWRpbmdcIixcbiAgICAgICAgXCJGdWxsIE1vb24gRmFkZWRcIixcbiAgICAgICAgXCJXYW5pbmcgR2liYm91cyBSaXNpbmdcIixcbiAgICAgICAgXCJXYW5pbmcgR2liYm91cyBSaXNlblwiLFxuICAgICAgICBcIldhbmluZyBHaWJib3VzXCIsXG4gICAgICAgIFwiV2FuaW5nIEdpYmJvdXMgRmFkaW5nXCIsXG4gICAgICAgIFwiV2FuaW5nIEdpYmJvdXMgRmFkZWRcIixcbiAgICAgICAgXCJMYXN0IFF1YXJ0ZXIgUmlzaW5nXCIsXG4gICAgICAgIFwiTGFzdCBRdWFydGVyIFJpc2VuXCIsXG4gICAgICAgIFwiTGFzdCBRdWFydGVyXCIsXG4gICAgICAgIFwiTGFzdCBRdWFydGVyIEZhZGluZ1wiLFxuICAgICAgICBcIkxhc3QgUXVhcnRlciBGYWRlZFwiLFxuICAgICAgICBcIldhbmluZyBDcmVzY2VudCBSaXNpbmdcIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnQgUmlzZW5cIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnRcIixcbiAgICAgICAgXCJXYW5pbmcgQ3Jlc2NlbnQgRmFkaW5nXCIsXG4gICAgICAgIFwiV2FuaW5nIENyZXNjZW50IEZhZGVkXCIsXG4gICAgICAgIFwiTmV3IE1vb24gUmlzaW5nXCIsXG4gICAgICAgIFwiTmV3IE1vb24gUmlzZW5cIlxuICAgIF1cbn07XG5cbmV4cG9ydCB0eXBlIFBoYXNlID1cbiAgICB8IFwiTmV3IE1vb25cIlxuICAgIHwgXCJOZXcgTW9vbiBGYWRpbmdcIlxuICAgIHwgXCJOZXcgTW9vbiBGYWRlZFwiXG4gICAgfCBcIldheGluZyBDcmVzY2VudCBSaXNpbmdcIlxuICAgIHwgXCJXYXhpbmcgQ3Jlc2NlbnQgUmlzZW5cIlxuICAgIHwgXCJXYXhpbmcgQ3Jlc2NlbnRcIlxuICAgIHwgXCJXYXhpbmcgQ3Jlc2NlbnQgRmFkaW5nXCJcbiAgICB8IFwiV2F4aW5nIENyZXNjZW50IEZhZGVkXCJcbiAgICB8IFwiRmlyc3QgUXVhcnRlciBSaXNpbmdcIlxuICAgIHwgXCJGaXJzdCBRdWFydGVyIFJpc2VuXCJcbiAgICB8IFwiRmlyc3QgUXVhcnRlclwiXG4gICAgfCBcIkZpcnN0IFF1YXJ0ZXIgRmFkaW5nXCJcbiAgICB8IFwiRmlyc3QgUXVhcnRlciBGYWRlZFwiXG4gICAgfCBcIldheGluZyBHaWJib3VzIFJpc2luZ1wiXG4gICAgfCBcIldheGluZyBHaWJib3VzIFJpc2VuXCJcbiAgICB8IFwiV2F4aW5nIEdpYmJvdXNcIlxuICAgIHwgXCJXYXhpbmcgR2liYm91cyBGYWRpbmdcIlxuICAgIHwgXCJXYXhpbmcgR2liYm91cyBGYWRlZFwiXG4gICAgfCBcIkZ1bGwgTW9vbiBSaXNpbmdcIlxuICAgIHwgXCJGdWxsIE1vb24gUmlzZW5cIlxuICAgIHwgXCJGdWxsIE1vb25cIlxuICAgIHwgXCJGdWxsIE1vb24gRmFkaW5nXCJcbiAgICB8IFwiRnVsbCBNb29uIEZhZGVkXCJcbiAgICB8IFwiV2FuaW5nIEdpYmJvdXMgUmlzaW5nXCJcbiAgICB8IFwiV2FuaW5nIEdpYmJvdXMgUmlzZW5cIlxuICAgIHwgXCJXYW5pbmcgR2liYm91c1wiXG4gICAgfCBcIldhbmluZyBHaWJib3VzIEZhZGluZ1wiXG4gICAgfCBcIldhbmluZyBHaWJib3VzIEZhZGVkXCJcbiAgICB8IFwiTGFzdCBRdWFydGVyIFJpc2luZ1wiXG4gICAgfCBcIkxhc3QgUXVhcnRlciBSaXNlblwiXG4gICAgfCBcIkxhc3QgUXVhcnRlclwiXG4gICAgfCBcIkxhc3QgUXVhcnRlciBGYWRpbmdcIlxuICAgIHwgXCJMYXN0IFF1YXJ0ZXIgRmFkZWRcIlxuICAgIHwgXCJXYW5pbmcgQ3Jlc2NlbnQgUmlzaW5nXCJcbiAgICB8IFwiV2FuaW5nIENyZXNjZW50IFJpc2VuXCJcbiAgICB8IFwiV2FuaW5nIENyZXNjZW50XCJcbiAgICB8IFwiV2FuaW5nIENyZXNjZW50IEZhZGluZ1wiXG4gICAgfCBcIldhbmluZyBDcmVzY2VudCBGYWRlZFwiXG4gICAgfCBcIk5ldyBNb29uIFJpc2luZ1wiXG4gICAgfCBcIk5ldyBNb29uIFJpc2VuXCI7XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgdHlwZSB7IENhbGVuZGFyLCBNb29uIH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBCdXR0b25Db21wb25lbnQsIEV4dHJhQnV0dG9uQ29tcG9uZW50LCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IE1vb25TVkcgZnJvbSBcInNyYy92aWV3L3VpL01vb24uc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEFkZE5ldyBmcm9tIFwiLi4vVXRpbGl0aWVzL0FkZE5ldy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTm9FeGlzdGluZ0l0ZW1zIGZyb20gXCIuLi9VdGlsaXRpZXMvTm9FeGlzdGluZ0l0ZW1zLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBUb2dnbGVDb21wb25lbnQgZnJvbSBcIi4uL1NldHRpbmdzL1RvZ2dsZUNvbXBvbmVudC5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgY2FsZW5kYXI6IENhbGVuZGFyO1xuXG4gICAgJDogbW9vbnMgPSBjYWxlbmRhci5zdGF0aWMubW9vbnM7XG4gICAgJDogZGlzcGxheU1vb25zID0gY2FsZW5kYXIuc3RhdGljLmRpc3BsYXlNb29ucztcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgYiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIik7XG4gICAgfTtcbiAgICBjb25zdCBlZGl0ID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwicGVuY2lsXCIpLnNldFRvb2x0aXAoXCJFZGl0XCIpO1xuICAgIH07XG4gICAgY29uc3QgZGVsZXRlTW9vbiA9IChpdGVtOiBNb29uKSA9PiB7XG4gICAgICAgIGNhbGVuZGFyLnN0YXRpYy5tb29ucyA9IGNhbGVuZGFyLnN0YXRpYy5tb29ucy5maWx0ZXIoXG4gICAgICAgICAgICAobW9vbikgPT4gbW9vbi5pZCAhPT0gaXRlbS5pZFxuICAgICAgICApO1xuICAgIH07XG48L3NjcmlwdD5cblxuPFRvZ2dsZUNvbXBvbmVudFxuICAgIG5hbWU9e1wiRGlzcGxheSBNb29uc1wifVxuICAgIGRlc2M9e1wiRGlzcGxheSBtb29ucyBieSBkZWZhdWx0IHdoZW4gdmlld2luZyB0aGlzIGNhbGVuZGFyLlwifVxuICAgIHZhbHVlPXtkaXNwbGF5TW9vbnN9XG4gICAgb246Y2xpY2s9eygpID0+XG4gICAgICAgIChjYWxlbmRhci5zdGF0aWMuZGlzcGxheU1vb25zID0gIWNhbGVuZGFyLnN0YXRpYy5kaXNwbGF5TW9vbnMpfVxuLz5cblxuPEFkZE5ldyAvPlxuXG57I2lmICFtb29ucy5sZW5ndGh9XG4gICAgPE5vRXhpc3RpbmdJdGVtcyBtZXNzYWdlPXtcIkNyZWF0ZSBhIG5ldyBtb29uIHRvIHNlZSBpdCBoZXJlLlwifSAvPlxuezplbHNlfVxuICAgIDxkaXYgY2xhc3M9XCJleGlzdGluZy1pdGVtc1wiPlxuICAgICAgICB7I2VhY2ggbW9vbnMgYXMgbW9vbn1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb29uXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vb24taW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNldHRpbmctaXRlbS1uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TW9vblNWR1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttb29ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBoYXNlPXtcIkZpcnN0IFF1YXJ0ZXJcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17MjB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAge21vb24ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN5Y2xlOiB7bW9vbi5jeWNsZX0gZGF5c1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlOmVkaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaChcIm5ldy1pdGVtXCIsIG1vb24pfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlOnRyYXNoXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gZGVsZXRlTW9vbihtb29uKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG57L2lmfVxuXG48c3R5bGU+XG4gICAgLm1vb24ge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMC41cmVtO1xuICAgIH1cbiAgICAuc2V0dGluZy1pdGVtLW5hbWUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuaWNvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuICAgICAgICBqdXN0aWZ5LXNlbGY6IGZsZXgtZW5kO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuaWNvbiB7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIHsgTW9vbiB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IHsgUGhhc2UsIFNIQURPV19NQVAgfSBmcm9tIFwic3JjL3V0aWxzL2NvbnN0YW50c1wiO1xuXG4gICAgZXhwb3J0IGxldCBtb29uOiBNb29uO1xuICAgIGV4cG9ydCBsZXQgbGFiZWw6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGV4cG9ydCBsZXQgc2l6ZSA9IDI4O1xuICAgIGV4cG9ydCBsZXQgcGhhc2U6IFBoYXNlO1xuXG4gICAgJDogcGF0aCA9IFNIQURPV19NQVBbcGhhc2VdO1xuPC9zY3JpcHQ+XG5cbjxzdmdcbiAgICBjbGFzcz1cIm1vb25cIlxuICAgIGlkPXttb29uLmlkfVxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZFwiXG4gICAgYXJpYS1sYWJlbD17bGFiZWwgPyBgJHttb29uLm5hbWV9XFxuJHtwaGFzZX1gIDogbnVsbH1cbiAgICB3aWR0aD17c2l6ZX1cbiAgICBoZWlnaHQ9e3NpemV9XG4gICAgdmlld0JveD1cIjAgMCAzMiAzMlwiXG4+XG4gICAgPGNpcmNsZSBjeD1cIjE2XCIgY3k9XCIxNlwiIHI9XCIxMFwiIGZpbGw9e21vb24uZmFjZUNvbG9yfSAvPlxuICAgIDxwYXRoIGNsYXNzPVwic2hhZG93XCIgZmlsbD17bW9vbi5zaGFkb3dDb2xvcn0gZD17cGF0aH0gLz5cbiAgICA8Y2lyY2xlXG4gICAgICAgIGN4PVwiMTZcIlxuICAgICAgICBjeT1cIjE2XCJcbiAgICAgICAgcj1cIjEwXCJcbiAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICBzdHJva2U9XCIjMDAwXCJcbiAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMnB4XCJcbiAgICAvPlxuPC9zdmc+XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgZmxpcCB9IGZyb20gXCJzdmVsdGUvYW5pbWF0ZVwiO1xuICAgIGltcG9ydCB7IGRuZHpvbmUsIFNPVVJDRVMsIFRSSUdHRVJTIH0gZnJvbSBcInN2ZWx0ZS1kbmQtYWN0aW9uXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgc2V0SWNvbixcbiAgICAgICAgU2V0dGluZyxcbiAgICAgICAgVGV4dENvbXBvbmVudFxuICAgIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBEYXkgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuXG4gICAgaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcInNyYy91dGlscy9mdW5jdGlvbnNcIjtcbiAgICBpbXBvcnQgRGV0YWlsIGZyb20gXCIuL0RldGFpbC5zdmVsdGVcIjtcbiAgICBleHBvcnQgbGV0IGZpcnN0V2Vla2RheTogbnVtYmVyID0gMDtcbiAgICBleHBvcnQgbGV0IG92ZXJmbG93OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGNvbnN0IGFkZE5ldyA9ICgpID0+IHtcbiAgICAgICAgd2Vla2RheXMgPSBbXG4gICAgICAgICAgICAuLi53ZWVrZGF5cyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRheVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG5cbiAgICBjb25zdCBncmlwID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJmYW50YXN5LWNhbGVuZGFyLWdyaXBcIik7XG4gICAgfTtcblxuICAgIGNvbnN0IHRyYXNoID0gKG5vZGU6IEhUTUxFbGVtZW50LCBpdGVtOiBEYXkpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAub25DbGljayhcbiAgICAgICAgICAgICAgICAoKSA9PiAod2Vla2RheXMgPSB3ZWVrZGF5cy5maWx0ZXIoKGRheSkgPT4gZGF5LmlkICE9PSBpdGVtLmlkKSlcbiAgICAgICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IG5hbWUgPSAobm9kZTogSFRNTEVsZW1lbnQsIGl0ZW06IERheSkgPT4ge1xuICAgICAgICBjb25zdCBjb21wID0gbmV3IFRleHRDb21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRWYWx1ZShpdGVtLm5hbWUpXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJOYW1lXCIpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLm5hbWUgPSB2O1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwid2Vla2RheS11cGRhdGVcIiwgd2Vla2RheXMpO1xuICAgICAgICAgICAgICAgIHdlZWtkYXlzID0gd2Vla2RheXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29tcC5pbnB1dEVsLnNldEF0dHIoXCJzdHlsZVwiLCBcIndpZHRoOiAxMDAlO1wiKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb3ZlcmZsb3dOb2RlID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBTZXR0aW5nKG5vZGUpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk92ZXJmbG93IFdlZWtzXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBcIlR1cm4gdGhpcyBvZmYgdG8gbWFrZSBlYWNoIG1vbnRoIHN0YXJ0IG9uIHRoZSBmaXJzdCBvZiB0aGUgd2Vlay5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUob3ZlcmZsb3cpLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gdjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdGFydERyYWcoZTogRXZlbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBkcmFnRGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZmxpcER1cmF0aW9uTXMgPSAzMDA7XG4gICAgbGV0IGRyYWdEaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ29uc2lkZXIoZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PERheT4+KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGl0ZW1zOiBuZXdJdGVtcyxcbiAgICAgICAgICAgIGluZm86IHsgc291cmNlLCB0cmlnZ2VyIH1cbiAgICAgICAgfSA9IGUuZGV0YWlsO1xuICAgICAgICB3ZWVrZGF5cyA9IG5ld0l0ZW1zO1xuICAgICAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEga2V5Ym9hcmRcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gU09VUkNFUy5LRVlCT0FSRCAmJiB0cmlnZ2VyID09PSBUUklHR0VSUy5EUkFHX1NUT1BQRUQpIHtcbiAgICAgICAgICAgIGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRmluYWxpemUoZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PERheT4+KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGl0ZW1zOiBuZXdJdGVtcyxcbiAgICAgICAgICAgIGluZm86IHsgc291cmNlIH1cbiAgICAgICAgfSA9IGUuZGV0YWlsO1xuICAgICAgICB3ZWVrZGF5cyA9IG5ld0l0ZW1zO1xuICAgICAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEgcG9pbnRlciAobW91c2UsIHRvdWNoKVxuICAgICAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLlBPSU5URVIpIHtcbiAgICAgICAgICAgIGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCB3ZWVrZGF5czogRGF5W10gPSBbXTtcbiAgICAkOiB7XG4gICAgICAgIGRpc3BhdGNoKFwid2Vla2RheS11cGRhdGVcIiwgd2Vla2RheXMpO1xuICAgICAgICAvL1RPRE86IGFkZCBuZXcgZGF5cyB0byBkcm9wZG93biwgcmVtb3ZlIHJlbW92ZWQgZGF5cyBmcm9tIGRyb3Bkb3duXG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBkaXNwYXRjaChcImZpcnN0LXdlZWtkYXktdXBkYXRlXCIsIGZpcnN0V2Vla2RheSk7XG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBkaXNwYXRjaChcIm92ZXJmbG93LXVwZGF0ZVwiLCBvdmVyZmxvdyk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxEZXRhaWwgbGFiZWw9XCJXZWVrZGF5c1wiIG9uOm5ldy1pdGVtPXthZGROZXd9PlxuICAgIDxzdmVsdGU6ZnJhZ21lbnQgc2xvdD1cInByZS1hZGRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJmbG93XCIgdXNlOm92ZXJmbG93Tm9kZSAvPlxuICAgICAgICB7I2lmIHdlZWtkYXlzLmxlbmd0aH1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaXJzdC13ZWVrZGF5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWl0ZW0tbmFtZVwiPkZpcnN0IERheTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgb25seSBlZmZlY3RzIHdoaWNoIGRheSBvZiB0aGUgd2VlayB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ZWFyIHN0YXJ0cyBvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1jb250cm9sXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJkcm9wZG93blwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17Zmlyc3RXZWVrZGF5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9eyFvdmVyZmxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiQ2Fubm90IGJlIG1vZGlmaWVkIHdpdGhvdXQgb3ZlcmZsb3cuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyNlYWNoIHdlZWtkYXlzIGFzIHdlZWtkYXksIGluZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IW92ZXJmbG93fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2luZGV4ID09IGZpcnN0V2Vla2RheX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57d2Vla2RheS5uYW1lID8/IFwiXCJ9PC9vcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgIDwvc3ZlbHRlOmZyYWdtZW50PlxuICAgIHsjaWYgIXdlZWtkYXlzLmxlbmd0aH1cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCI+XG4gICAgICAgICAgICA8c3Bhbj5DcmVhdGUgYSBuZXcgd2Vla2RheSB0byBzZWUgaXQgaGVyZS48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgdXNlOmRuZHpvbmU9e3sgaXRlbXM6IHdlZWtkYXlzLCBmbGlwRHVyYXRpb25NcywgZHJhZ0Rpc2FibGVkIH19XG4gICAgICAgICAgICBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCJcbiAgICAgICAgICAgIG9uOmNvbnNpZGVyPXtoYW5kbGVDb25zaWRlcn1cbiAgICAgICAgICAgIG9uOmZpbmFsaXplPXtoYW5kbGVGaW5hbGl6ZX1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyNlYWNoIHdlZWtkYXlzIGFzIGl0ZW0gKGl0ZW0uaWQpfVxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZTpmbGlwPXt7IGR1cmF0aW9uOiBmbGlwRHVyYXRpb25NcyB9fVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIndlZWtkYXlcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpncmlwXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjptb3VzZWRvd249e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOnRvdWNoc3RhcnQ9e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHVzZTpuYW1lPXtpdGVtfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgdXNlOnRyYXNoPXtpdGVtfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuPC9EZXRhaWw+XG5cbjxzdHlsZT5cbiAgICAub3ZlcmZsb3cge1xuICAgICAgICBwYWRkaW5nLXRvcDogMC43NXJlbTtcbiAgICB9XG4gICAgLndlZWtkYXkge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIGF1dG87XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgIH1cblxuICAgIC53ZWVrZGF5IC5pY29uIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLndlZWtkYXkge1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBleHBvcnQgbGV0IGxhYmVsOiBzdHJpbmc7XG4gICAgZXhwb3J0IGxldCBvcGVuOiBib29sZWFuID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgbGV0IGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50O1xuICAgIGNvbnN0IGFkZCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBidXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZCBOZXdcIilcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiK1wiKVxuICAgICAgICAgICAgLnNldERpc2FibGVkKGRpc2FibGVkKVxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwibmV3LWl0ZW1cIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgYnV0dG9uLmJ1dHRvbkVsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgfTtcblxuICAgICQ6IHtcbiAgICAgICAgaWYgKGJ1dHRvbikge1xuICAgICAgICAgICAgYnV0dG9uLnNldERpc2FibGVkKGRpc2FibGVkKTtcbiAgICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuXG48ZGV0YWlscyB7b3Blbn0+XG4gICAgPHN1bW1hcnk+XG4gICAgICAgIDxoND5cbiAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgPC9oND5cbiAgICA8L3N1bW1hcnk+XG4gICAgPHNsb3QgbmFtZT1cInByZS1hZGRcIiAvPlxuICAgIDxkaXYgY2xhc3M9XCJhZGQtbmV3XCIgdXNlOmFkZCAvPlxuICAgIDxkaXYgY2xhc3M9XCJmYW50YXN5LWNhbGVuZGFyLWNvbnRhaW5lclwiPlxuICAgICAgICA8c2xvdCAvPlxuICAgIDwvZGl2PlxuPC9kZXRhaWxzPlxuXG48c3R5bGU+XG4gICAgLmFkZC1uZXcge1xuICAgICAgICBwYWRkaW5nLXRvcDogMC43NXJlbTtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDAuNzVyZW07XG5cbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBmbGlwIH0gZnJvbSBcInN2ZWx0ZS9hbmltYXRlXCI7XG4gICAgaW1wb3J0IHsgZG5kem9uZSwgU09VUkNFUywgVFJJR0dFUlMgfSBmcm9tIFwic3ZlbHRlLWRuZC1hY3Rpb25cIjtcbiAgICBpbXBvcnQgeyBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBNb250aCB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG5cbiAgICBpbXBvcnQgTW9udGhJbnN0YW5jZSBmcm9tIFwiLi9Nb250aC5zdmVsdGVcIjtcblxuICAgIGltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJzcmMvdXRpbHMvZnVuY3Rpb25zXCI7XG4gICAgaW1wb3J0IERldGFpbCBmcm9tIFwiLi9EZXRhaWwuc3ZlbHRlXCI7XG5cbiAgICBjb25zdCBhZGROZXcgPSAoKSA9PiB7XG4gICAgICAgIG1vbnRocyA9IFtcbiAgICAgICAgICAgIC4uLm1vbnRocyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm1vbnRoXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IG51bGwsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGRpc3BhdGNoKFwibW9udGgtdXBkYXRlXCIsIG1vbnRocyk7XG4gICAgfTtcblxuICAgIGNvbnN0IGRlbGV0ZU1vbnRoID0gKG1vbnRoOiBNb250aCkgPT4ge1xuICAgICAgICBtb250aHMgPSBtb250aHMuZmlsdGVyKChtKSA9PiBtLmlkICE9IG1vbnRoLmlkKTtcblxuICAgICAgICBkaXNwYXRjaChcIm1vbnRoLXVwZGF0ZVwiLCBtb250aHMpO1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlTW9udGggPSAobW9udGg6IE1vbnRoKSA9PiB7fTtcbiAgICBjb25zdCBncmlwID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJmYW50YXN5LWNhbGVuZGFyLWdyaXBcIik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0RHJhZyhlOiBFdmVudCkge1xuICAgICAgICAvLyBwcmV2ZW50aW5nIGRlZmF1bHQgdG8gcHJldmVudCBsYWcgb24gdG91Y2ggZGV2aWNlcyAoYmVjYXVzZSBvZiB0aGUgYnJvd3NlciBjaGVja2luZyBmb3Igc2NyZWVuIHNjcm9sbGluZylcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBkcmFnRGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZmxpcER1cmF0aW9uTXMgPSAzMDA7XG4gICAgbGV0IGRyYWdEaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ29uc2lkZXIoZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PE1vbnRoPj4pIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxuICAgICAgICAgICAgaW5mbzogeyBzb3VyY2UsIHRyaWdnZXIgfVxuICAgICAgICB9ID0gZS5kZXRhaWw7XG4gICAgICAgIG1vbnRocyA9IG5ld0l0ZW1zO1xuICAgICAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEga2V5Ym9hcmRcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gU09VUkNFUy5LRVlCT0FSRCAmJiB0cmlnZ2VyID09PSBUUklHR0VSUy5EUkFHX1NUT1BQRUQpIHtcbiAgICAgICAgICAgIGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRmluYWxpemUoZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PE1vbnRoPj4pIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxuICAgICAgICAgICAgaW5mbzogeyBzb3VyY2UgfVxuICAgICAgICB9ID0gZS5kZXRhaWw7XG4gICAgICAgIG1vbnRocyA9IG5ld0l0ZW1zO1xuICAgICAgICBkaXNwYXRjaChcIm1vbnRoLXVwZGF0ZVwiLCBtb250aHMpO1xuICAgICAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEgcG9pbnRlciAobW91c2UsIHRvdWNoKVxuICAgICAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLlBPSU5URVIpIHtcbiAgICAgICAgICAgIGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBtb250aHM6IE1vbnRoW10gPSBbXTtcbjwvc2NyaXB0PlxuXG48RGV0YWlsIGxhYmVsPVwiTW9udGhzXCIgb246bmV3LWl0ZW09e2FkZE5ld30+XG4gICAgeyNpZiAhbW9udGhzLmxlbmd0aH1cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCI+XG4gICAgICAgICAgICA8c3Bhbj5DcmVhdGUgYSBuZXcgbW9udGggdG8gc2VlIGl0IGhlcmUuPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIHVzZTpkbmR6b25lPXt7IGl0ZW1zOiBtb250aHMsIGZsaXBEdXJhdGlvbk1zLCBkcmFnRGlzYWJsZWQgfX1cbiAgICAgICAgICAgIGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIlxuICAgICAgICAgICAgb246Y29uc2lkZXI9e2hhbmRsZUNvbnNpZGVyfVxuICAgICAgICAgICAgb246ZmluYWxpemU9e2hhbmRsZUZpbmFsaXplfVxuICAgICAgICA+XG4gICAgICAgICAgICB7I2VhY2ggbW9udGhzIGFzIG1vbnRoIChtb250aC5pZCl9XG4gICAgICAgICAgICAgICAgPGRpdiBhbmltYXRlOmZsaXA9e3sgZHVyYXRpb246IGZsaXBEdXJhdGlvbk1zIH19IGNsYXNzPVwibW9udGhcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpncmlwXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjptb3VzZWRvd249e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOnRvdWNoc3RhcnQ9e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPE1vbnRoSW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHttb250aH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlZG93bj17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICAgICAgb246bW9udGgtZGVsZXRlPXsoKSA9PiBkZWxldGVNb250aChtb250aCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbjptb250aC11cGRhdGU9eygpID0+IGRpc3BhdGNoKFwibW9udGgtdXBkYXRlXCIsIG1vbnRocyl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG48L0RldGFpbD5cblxuPHN0eWxlPlxuICAgIC5tb250aCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBkZWJvdW5jZSwgRXh0cmFCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IE1vbnRoIH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBtb250aDogTW9udGg7XG5cbiAgICBsZXQgbmFtZSA9IG1vbnRoLm5hbWU7XG4gICAgbGV0IHR5cGUgPSBtb250aC50eXBlO1xuICAgIGxldCBsZW5ndGggPSBtb250aC5sZW5ndGg7XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInRyYXNoXCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2goXCJtb250aC1kZWxldGVcIik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGUgPSBkZWJvdW5jZShcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgbW9udGgubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICBtb250aC50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIG1vbnRoLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgICAgIGRpc3BhdGNoKFwibW9udGgtdXBkYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICAzMDAsXG4gICAgICAgIHRydWVcbiAgICApO1xuXG4gICAgJDoge1xuICAgICAgICBtb250aC50eXBlID0gdHlwZTtcbiAgICAgICAgLyogZGlzcGF0Y2goXCJtb250aC11cGRhdGVcIiwgbW9udGgpOyAqL1xuICAgIH1cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwibW9udGhcIj5cbiAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBzcGVsbGNoZWNrPVwiZmFsc2VcIlxuICAgICAgICBiaW5kOnZhbHVlPXtuYW1lfVxuICAgICAgICBvbjppbnB1dD17dXBkYXRlfVxuICAgICAgICBwbGFjZWhvbGRlcj1cIk5hbWVcIlxuICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlO1wiXG4gICAgLz5cbiAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgIHNwZWxsY2hlY2s9XCJmYWxzZVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiTGVuZ3RoXCJcbiAgICAgICAgYmluZDp2YWx1ZT17bGVuZ3RofVxuICAgICAgICBvbjppbnB1dD17dXBkYXRlfVxuICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlO1wiXG4gICAgICAgIG1pbj1cIjBcIlxuICAgIC8+XG4gICAgPHNlbGVjdCBjbGFzcz1cImRyb3Bkb3duXCIgYmluZDp2YWx1ZT17dHlwZX0gb246aW5wdXQ9e3VwZGF0ZX0+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJtb250aFwiPk1vbnRoPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJpbnRlcmNhbGFyeVwiPkludGVyY2FsYXJ5PC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaWNvblwiIHVzZTp0cmFzaCAvPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAubW9udGgge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgYXV0byBhdXRvO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICB9XG5cbiAgICAubW9udGggLmljb24ge1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBFdmVudCwgRXZlbnRDYXRlZ29yeSB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IHsgRXh0cmFCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgRG90IGZyb20gXCIuL0RvdC5zdmVsdGVcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgYiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIik7XG4gICAgICAgIGIuZXh0cmFTZXR0aW5nc0VsLnNldEF0dHIoXCJzdHlsZVwiLCBcIm1hcmdpbi1sZWZ0OiAwO1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJwZW5jaWxcIikuc2V0VG9vbHRpcChcIkVkaXRcIik7XG4gICAgfTtcbiAgICBleHBvcnQgbGV0IGV2ZW50OiBFdmVudDtcbiAgICBleHBvcnQgbGV0IGNhdGVnb3J5OiBFdmVudENhdGVnb3J5O1xuICAgIGV4cG9ydCBsZXQgZGF0ZTogc3RyaW5nO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJldmVudFwiPlxuICAgIDxkaXYgY2xhc3M9XCJldmVudC1pbmZvXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwic2V0dGluZy1pdGVtLW5hbWVcIj5cbiAgICAgICAgICAgIHsjaWYgY2F0ZWdvcnkgIT0gbnVsbH1cbiAgICAgICAgICAgICAgICA8RG90IGNvbG9yPXtjYXRlZ29yeS5jb2xvcn0gbGFiZWw9e2NhdGVnb3J5Lm5hbWV9IC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAge2V2ZW50Lm5hbWV9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRhdGVcIj5cbiAgICAgICAgICAgICAgICB7ZGF0ZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbGFtcFwiPntldmVudC5kZXNjcmlwdGlvbiA/PyBcIlwifTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaWNvbnNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIiB1c2U6ZWRpdCBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJlZGl0XCIpfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvblwiIHVzZTp0cmFzaCBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJkZWxldGVcIil9IC8+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5ldmVudCB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG87XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgfVxuICAgIC5ldmVudC1pbmZvIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgLmljb25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICAgICAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmV2ZW50IC5pY29uIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmRhdGUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGdhcDogMC4yNXJlbTtcbiAgICB9XG4gICAgLmNsYW1wIHtcbiAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgICAgIC13ZWJraXQtbGluZS1jbGFtcDogMztcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAgICAgd29yZC1icmVhazoga2VlcC1hbGw7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHdpZHRoOiBjYWxjKHZhcigtLWV2ZW50LW1heC13aWR0aCkgKiAwLjc1KTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgZXhwb3J0IGxldCBjb2xvcjogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgbGFiZWw6IHN0cmluZztcbjwvc2NyaXB0PlxuXG48c3ZnXG4gICAgY2xhc3M9XCJkb3RcIlxuICAgIHZpZXdCb3g9XCIwIDAgNiA2XCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICBhcmlhLWxhYmVsPXtsYWJlbH1cbj5cbiAgICA8Y2lyY2xlIHN0cm9rZT17Y29sb3J9IGZpbGw9e2NvbG9yfSBjeD1cIjNcIiBjeT1cIjNcIiByPVwiMlwiIC8+XG48L3N2Zz5cblxuPHN0eWxlPlxuICAgIC5kb3Qge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICAgaGVpZ2h0OiAwLjg3NWVtO1xuICAgICAgICB3aWR0aDogMC44NzVlbTtcbiAgICAgICAgbWFyZ2luOiAwIDFweDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBFdmVudCwgTW9udGgsIEV2ZW50Q2F0ZWdvcnkgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuICAgIGltcG9ydCB7IGRhdGVTdHJpbmcgfSBmcm9tIFwic3JjL3V0aWxzL2Z1bmN0aW9uc1wiO1xuXG4gICAgaW1wb3J0IERldGFpbCBmcm9tIFwiLi9EZXRhaWwuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IEV2ZW50VUkgZnJvbSBcIi4vRXZlbnQuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IGNhdGVnb3JpZXM6IEV2ZW50Q2F0ZWdvcnlbXSA9IFtdO1xuICAgIGV4cG9ydCBsZXQgZXZlbnRzOiBFdmVudFtdID0gW107XG4gICAgZXhwb3J0IGxldCBtb250aHM6IE1vbnRoW10gPSBbXTtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCBlZGl0RXZlbnQgPSAoaXRlbTogRXZlbnQpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goXCJuZXctaXRlbVwiLCBpdGVtKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlbGV0ZUV2ZW50ID0gKGl0ZW06IEV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50cyA9IGV2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiBldmVudC5pZCAhPT0gaXRlbS5pZCk7XG4gICAgICAgIGRpc3BhdGNoKFwiZWRpdC1ldmVudHNcIiwgZXZlbnRzKTtcbiAgICB9O1xuXG4gICAgJDoge1xuICAgICAgICBldmVudHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEuZGF0ZS55ZWFyICE9IGIuZGF0ZS55ZWFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuZGF0ZS55ZWFyIC0gYi5kYXRlLnllYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS5kYXRlLm1vbnRoICE9IGIuZGF0ZS5tb250aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLmRhdGUubW9udGggLSBiLmRhdGUubW9udGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYS5kYXRlLmRheSAtIGIuZGF0ZS5kYXk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBnZXRDYXRlZ29yeSA9IChjYXRlZ29yeTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBjYXRlZ29yaWVzLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT0gY2F0ZWdvcnkpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPERldGFpbCBsYWJlbD1cIkV2ZW50XCIgb246bmV3LWl0ZW0+XG4gICAgeyNpZiAhZXZlbnRzLmxlbmd0aH1cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCI+XG4gICAgICAgICAgICA8c3Bhbj5DcmVhdGUgYSBuZXcgZXZlbnQgdG8gc2VlIGl0IGhlcmUuPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJleGlzdGluZy1pdGVtc1wiPlxuICAgICAgICAgICAgeyNlYWNoIGV2ZW50cyBhcyBldmVudH1cbiAgICAgICAgICAgICAgICA8RXZlbnRVSVxuICAgICAgICAgICAgICAgICAgICB7ZXZlbnR9XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5PXtnZXRDYXRlZ29yeShldmVudC5jYXRlZ29yeSl9XG4gICAgICAgICAgICAgICAgICAgIGRhdGU9e2RhdGVTdHJpbmcoZXZlbnQuZGF0ZSwgbW9udGhzLCBldmVudC5lbmQpfVxuICAgICAgICAgICAgICAgICAgICBvbjplZGl0PXsoKSA9PiBlZGl0RXZlbnQoZXZlbnQpfVxuICAgICAgICAgICAgICAgICAgICBvbjpkZWxldGU9eygpID0+IGRlbGV0ZUV2ZW50KGV2ZW50KX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuPC9EZXRhaWw+XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgVGV4dENvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB0eXBlIHsgRXZlbnRDYXRlZ29yeSB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IERldGFpbCBmcm9tIFwiLi9EZXRhaWwuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcInNyYy91dGlscy9mdW5jdGlvbnNcIjtcbiAgICBpbXBvcnQgeyBERUZBVUxUX0NBVEVHT1JZX0NPTE9SIH0gZnJvbSBcInNyYy91dGlscy9jb25zdGFudHNcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBleHBvcnQgbGV0IGNhdGVnb3JpZXM6IEV2ZW50Q2F0ZWdvcnlbXSA9IFtdO1xuXG4gICAgY29uc3QgbmFtZSA9IChub2RlOiBIVE1MRWxlbWVudCwgY2F0ZWdvcnk6IEV2ZW50Q2F0ZWdvcnkpID0+IHtcbiAgICAgICAgY29uc3QgY29tcCA9IG5ldyBUZXh0Q29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VmFsdWUoY2F0ZWdvcnkubmFtZSlcbiAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIk5hbWVcIilcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5Lm5hbWUgPSB2O1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwidXBkYXRlXCIsIGNhdGVnb3J5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb21wLmlucHV0RWwuc2V0QXR0cihcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7XCIpO1xuICAgIH07XG4gICAgY29uc3QgdHJhc2ggPSAobm9kZTogSFRNTEVsZW1lbnQsIGl0ZW06IEV2ZW50Q2F0ZWdvcnkpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAoY2F0ZWdvcnkpID0+IGNhdGVnb3J5LmlkICE9PSBpdGVtLmlkXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkaXNwYXRjaChcImRlbGV0ZVwiLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVDb2xvciA9IChldmVudDogRXZlbnQsIGNhdGVnb3J5OiBFdmVudENhdGVnb3J5KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcbiAgICAgICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkpIHJldHVybjtcbiAgICAgICAgY2F0ZWdvcnkuY29sb3IgPSB0YXJnZXQudmFsdWU7XG4gICAgICAgIGRpc3BhdGNoKFwidXBkYXRlXCIsIGNhdGVnb3J5KTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkTmV3ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjYXQgPSB7XG4gICAgICAgICAgICBpZDogbmFub2lkKDYpLFxuICAgICAgICAgICAgY29sb3I6IERFRkFVTFRfQ0FURUdPUllfQ09MT1IsXG4gICAgICAgICAgICBuYW1lOiBcIkNhdGVnb3J5XCJcbiAgICAgICAgfTtcbiAgICAgICAgY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4gICAgICAgIGRpc3BhdGNoKFwibmV3XCIsIGNhdCk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48RGV0YWlsIGxhYmVsPVwiRXZlbnQgQ2F0ZWdvcmllc1wiIG9uOm5ldy1pdGVtPXthZGROZXd9PlxuICAgIHsjaWYgIWNhdGVnb3JpZXMubGVuZ3RofVxuICAgICAgICA8ZGl2IGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIj5cbiAgICAgICAgICAgIDxzcGFuPkNyZWF0ZSBhIG5ldyBjYXRlZ29yeSB0byBzZWUgaXQgaGVyZS48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCI+XG4gICAgICAgICAgICB7I2VhY2ggY2F0ZWdvcmllcyBhcyBjYXRlZ29yeX1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2F0ZWdvcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB1c2U6bmFtZT17Y2F0ZWdvcnl9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNvbG9yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y2F0ZWdvcnkuY29sb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2hhbmdlPXsoZXZ0KSA9PiB1cGRhdGVDb2xvcihldnQsIGNhdGVnb3J5KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHVzZTp0cmFzaD17Y2F0ZWdvcnl9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG48L0RldGFpbD5cblxuPHN0eWxlPlxuICAgIC5jYXRlZ29yeSB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG8gYXV0bztcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgICAgIHBhZGRpbmctdG9wOiAwLjc1cmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgZmxpcCB9IGZyb20gXCJzdmVsdGUvYW5pbWF0ZVwiO1xuICAgIGltcG9ydCB7IGRuZHpvbmUsIFNPVVJDRVMsIFRSSUdHRVJTIH0gZnJvbSBcInN2ZWx0ZS1kbmQtYWN0aW9uXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgc2V0SWNvbixcbiAgICAgICAgU2V0dGluZyxcbiAgICAgICAgVGV4dENvbXBvbmVudFxuICAgIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBZZWFyIH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcblxuICAgIGltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJzcmMvdXRpbHMvZnVuY3Rpb25zXCI7XG4gICAgaW1wb3J0IERldGFpbCBmcm9tIFwiLi9EZXRhaWwuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgY29uZmlybVdpdGhNb2RhbCB9IGZyb20gXCIuLi9tb2RhbHMvY29uZmlybVwiO1xuICAgIGV4cG9ydCBsZXQgdXNlQ3VzdG9tWWVhcnM6IGJvb2xlYW47XG4gICAgZXhwb3J0IGxldCB5ZWFyczogWWVhcltdO1xuXG4gICAgY29uc3QgYWRkTmV3ID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXllYXJzKSB5ZWFycyA9IFtdO1xuICAgICAgICB5ZWFycyA9IFtcbiAgICAgICAgICAgIC4uLnllYXJzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInllYXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG5cbiAgICBjb25zdCBncmlwID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJmYW50YXN5LWNhbGVuZGFyLWdyaXBcIik7XG4gICAgfTtcblxuICAgIGNvbnN0IHRyYXNoID0gKG5vZGU6IEhUTUxFbGVtZW50LCBpdGVtOiBZZWFyKSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soXG4gICAgICAgICAgICAgICAgKCkgPT4gKHllYXJzID0geWVhcnMuZmlsdGVyKCh5ZWFyKSA9PiB5ZWFyLmlkICE9PSBpdGVtLmlkKSlcbiAgICAgICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IG5hbWUgPSAobm9kZTogSFRNTEVsZW1lbnQsIGl0ZW06IFllYXIpID0+IHtcbiAgICAgICAgY29uc3QgY29tcCA9IG5ldyBUZXh0Q29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VmFsdWUoaXRlbS5uYW1lKVxuICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiTmFtZVwiKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5uYW1lID0gdjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcInllYXJzLXVwZGF0ZVwiLCB5ZWFycyk7XG4gICAgICAgICAgICAgICAgeWVhcnMgPSB5ZWFycztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb21wLmlucHV0RWwuc2V0QXR0cihcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7XCIpO1xuICAgIH07XG5cbiAgICBleHBvcnQgbGV0IGFwcDogQXBwO1xuXG4gICAgY29uc3QgY3VzdG9tTm9kZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgU2V0dGluZyhub2RlKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJVc2UgQ3VzdG9tIFllYXJzXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWwuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkNyZWF0ZSBjdXN0b20geWVhcnMgdG8gZGlzcGxheSBpbnN0ZWFkIG9mIGluY3JlbWVudGluZyBmcm9tIDEuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgIGVsLmNyZWF0ZVNwYW4oeyB0ZXh0OiBcIklmIG9uLCBcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWwuY3JlYXRlRWwoXCJzdHJvbmdcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJvbmx5IHRoZSB5ZWFycyBhZGRlZCBiZWxvdyB3aWxsIGJlIGRpc3BsYXllZC5cIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNraXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHVzZUN1c3RvbVllYXJzKS5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXAgJiYgdXNlQ3VzdG9tWWVhcnMgJiYgeWVhcnM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbmZpcm1XaXRoTW9kYWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGUgY3VzdG9tIHllYXJzIHlvdSBoYXZlIGNyZWF0ZWQgd2lsbCBiZSByZW1vdmVkLiBQcm9jZWVkP1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VDdXN0b21ZZWFycyA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHVzZUN1c3RvbVllYXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZUN1c3RvbVllYXJzID0gdjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0RHJhZyhlOiBFdmVudCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGRyYWdEaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBmbGlwRHVyYXRpb25NcyA9IDMwMDtcbiAgICBsZXQgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDb25zaWRlcihlOiBDdXN0b21FdmVudDxHZW5lcmljRG5kRXZlbnQ8WWVhcj4+KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGl0ZW1zOiBuZXdJdGVtcyxcbiAgICAgICAgICAgIGluZm86IHsgc291cmNlLCB0cmlnZ2VyIH1cbiAgICAgICAgfSA9IGUuZGV0YWlsO1xuICAgICAgICB5ZWFycyA9IG5ld0l0ZW1zO1xuICAgICAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEga2V5Ym9hcmRcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gU09VUkNFUy5LRVlCT0FSRCAmJiB0cmlnZ2VyID09PSBUUklHR0VSUy5EUkFHX1NUT1BQRUQpIHtcbiAgICAgICAgICAgIGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRmluYWxpemUoZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PFllYXI+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgeWVhcnMgPSBuZXdJdGVtcztcbiAgICAgICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIHBvaW50ZXIgKG1vdXNlLCB0b3VjaClcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gU09VUkNFUy5QT0lOVEVSKSB7XG4gICAgICAgICAgICBkcmFnRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgICQ6IHtcbiAgICAgICAgZGlzcGF0Y2goXCJ5ZWFycy11cGRhdGVcIiwgeWVhcnMpO1xuICAgICAgICAvL1RPRE86IGFkZCBuZXcgZGF5cyB0byBkcm9wZG93biwgcmVtb3ZlIHJlbW92ZWQgZGF5cyBmcm9tIGRyb3Bkb3duXG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBkaXNwYXRjaChcInVzZS1jdXN0b20tdXBkYXRlXCIsIHVzZUN1c3RvbVllYXJzKTtcbiAgICB9XG48L3NjcmlwdD5cblxuPERldGFpbCBsYWJlbD1cIlllYXJzXCIgb246bmV3LWl0ZW09e2FkZE5ld30gZGlzYWJsZWQ9eyF1c2VDdXN0b21ZZWFyc30+XG4gICAgPHN2ZWx0ZTpmcmFnbWVudCBzbG90PVwicHJlLWFkZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidXNlLWN1c3RvbVwiIHVzZTpjdXN0b21Ob2RlIC8+XG4gICAgPC9zdmVsdGU6ZnJhZ21lbnQ+XG4gICAgeyNpZiAheWVhcnMgfHwgIXllYXJzLmxlbmd0aH1cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCI+XG4gICAgICAgICAgICA8c3Bhbj5DcmVhdGUgYSBuZXcgeWVhciB0byBzZWUgaXQgaGVyZS48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgdXNlOmRuZHpvbmU9e3sgaXRlbXM6IHllYXJzLCBmbGlwRHVyYXRpb25NcywgZHJhZ0Rpc2FibGVkIH19XG4gICAgICAgICAgICBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCJcbiAgICAgICAgICAgIG9uOmNvbnNpZGVyPXtoYW5kbGVDb25zaWRlcn1cbiAgICAgICAgICAgIG9uOmZpbmFsaXplPXtoYW5kbGVGaW5hbGl6ZX1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyNlYWNoIHllYXJzIGFzIGl0ZW0gKGl0ZW0uaWQpfVxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZTpmbGlwPXt7IGR1cmF0aW9uOiBmbGlwRHVyYXRpb25NcyB9fVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIndlZWtkYXlcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpncmlwXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjptb3VzZWRvd249e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOnRvdWNoc3RhcnQ9e3N0YXJ0RHJhZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHVzZTpuYW1lPXtpdGVtfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgdXNlOnRyYXNoPXtpdGVtfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuPC9EZXRhaWw+XG5cbjxzdHlsZT5cbiAgICAudXNlLWN1c3RvbSB7XG4gICAgICAgIHBhZGRpbmctdG9wOiAwLjc1cmVtO1xuICAgIH1cbiAgICAud2Vla2RheSB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnIgYXV0bztcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgfVxuXG4gICAgLndlZWtkYXkgLmljb24ge1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAud2Vla2RheSB7XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwgImltcG9ydCB7XG4gICAgTW9kYWwsXG4gICAgQXBwLFxuICAgIFNldHRpbmcsXG4gICAgTm90aWNlLFxuICAgIFRleHRDb21wb25lbnQsXG4gICAgRHJvcGRvd25Db21wb25lbnQsXG4gICAgVGV4dEFyZWFDb21wb25lbnQsXG4gICAgVEZpbGVcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSB7IENhbGVuZGFyLCBFdmVudCB9IGZyb20gXCIuLi8uLi9AdHlwZXNcIjtcblxuaW1wb3J0IHsgZGF0ZVN0cmluZywgbmFub2lkIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Z1bmN0aW9uc1wiO1xuXG5pbXBvcnQgUGF0aFN1Z2dlc3Rpb25Nb2RhbCBmcm9tIFwiLi4vLi4vc3VnZ2VzdGVyL3BhdGhcIjtcbmltcG9ydCB7IGNvbmZpcm1XaXRoTW9kYWwgfSBmcm9tIFwiLi9jb25maXJtXCI7XG5cbmV4cG9ydCBjbGFzcyBDcmVhdGVFdmVudE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHNhdmVkID0gZmFsc2U7XG4gICAgZXZlbnQ6IEV2ZW50ID0ge1xuICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgbW9udGg6IG51bGwsXG4gICAgICAgICAgICBkYXk6IG51bGwsXG4gICAgICAgICAgICB5ZWFyOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiBuYW5vaWQoNiksXG4gICAgICAgIG5vdGU6IG51bGwsXG4gICAgICAgIGNhdGVnb3J5OiBudWxsXG4gICAgfTtcbiAgICBlZGl0aW5nOiBib29sZWFuO1xuICAgIGluZm9FbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgZGF0ZUVsOiBIVE1MRWxlbWVudDtcbiAgICBtb250aEVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBkYXlFbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgeWVhckVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBmaWVsZHNFbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgc3RyaW5nRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHN0YXJ0RGF0ZUVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBlbmREYXRlRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHN0YXJ0RWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIGVuZEVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYXBwOiBBcHAsXG4gICAgICAgIHB1YmxpYyBjYWxlbmRhcjogQ2FsZW5kYXIsXG4gICAgICAgIGV2ZW50PzogRXZlbnQsXG4gICAgICAgIGRhdGU/OiB7IG1vbnRoOiBudW1iZXI7IGRheTogbnVtYmVyOyB5ZWFyOiBudW1iZXIgfVxuICAgICkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnQgPSB7IC4uLmV2ZW50IH07XG4gICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50LmRhdGUgPSB7IC4uLmRhdGUgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwiZmFudGFzeS1jYWxlbmRhci1jcmVhdGUtZXZlbnRcIik7XG4gICAgfVxuXG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJoM1wiLCB7XG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmVkaXRpbmcgPyBcIkVkaXQgRXZlbnRcIiA6IFwiTmV3IEV2ZW50XCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbmZvRWwgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoXCJldmVudC1pbmZvXCIpO1xuICAgICAgICB0aGlzLmJ1aWxkSW5mbygpO1xuXG4gICAgICAgIHRoaXMuZGF0ZUVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwiZXZlbnQtZGF0ZVwiKTtcbiAgICAgICAgdGhpcy5idWlsZERhdGUoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJTYXZlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnQubmFtZT8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIlRoZSBldmVudCBtdXN0IGhhdmUgYSBuYW1lLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50LmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQuZW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudC5lbmQueWVhciA/PyB0aGlzLmV2ZW50LmRhdGUueWVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50LmVuZC5tb250aCA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudC5kYXRlLm1vbnRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXk6IHRoaXMuZXZlbnQuZW5kLmRheSA/PyB0aGlzLmV2ZW50LmRhdGUuZGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5ldmVudC5kYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IHRoaXMuZXZlbnQuZW5kO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4RGF5cyA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHMubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0pID0+IG0ubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG90YWwgZGF5cyBwZXIgeWVhciAoZG9lcyBub3QgbmVlZCB0byBiZSBhY2N1cmF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbERheXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXlzICogdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVOdW1iZXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF0ZS55ZWFyIC0gMSkgKiB0b3RhbERheXMgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF0ZS5tb250aCA/PyAtMSkgKiBtYXhEYXlzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5kYXk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmROdW1iZXIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5kLnllYXIgLSAxKSAqIHRvdGFsRGF5cyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlbmQubW9udGggPz8gLTEpICogbWF4RGF5cyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5kYXk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZU51bWJlciA+IGVuZE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0geyAuLi50aGlzLmV2ZW50LmVuZCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50LmVuZCA9IHsgLi4udGhpcy5ldmVudC5kYXRlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQuZGF0ZSA9IHsgLi4udGVtcCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkNhbmNlbFwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkRGF0ZSgpIHtcbiAgICAgICAgdGhpcy5kYXRlRWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5idWlsZFN0YXJ0RGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuZW5kRWwgPSB0aGlzLmRhdGVFbC5jcmVhdGVEaXYoKTtcblxuICAgICAgICBpZiAoIXRoaXMuZXZlbnQuZW5kKSB7XG4gICAgICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmVuZEVsKS5zZXROYW1lKFwiQWRkIEVuZCBEYXRlXCIpLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoZmFsc2UpLm9uQ2hhbmdlKCh2KSA9PiB0aGlzLmJ1aWxkRW5kRGF0ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWlsZEVuZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIHRoaXMuYnVpbGREYXRlRmllbGRzKHRoaXMuZW5kRGF0ZUVsKTsgKi9cblxuICAgICAgICB0aGlzLnN0cmluZ0VsID0gdGhpcy5kYXRlRWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJldmVudC1kYXRlLXN0cmluZyBzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLmJ1aWxkRGF0ZVN0cmluZygpO1xuICAgIH1cbiAgICBidWlsZFN0YXJ0RGF0ZSgpIHtcbiAgICAgICAgdGhpcy5zdGFydEVsID0gdGhpcy5kYXRlRWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jYWxlbmRhci1ldmVudC1kYXRlXCIpO1xuICAgICAgICB0aGlzLnN0YXJ0RWwuY3JlYXRlU3Bhbih7IHRleHQ6IFwiU3RhcnQ6XCIgfSk7XG4gICAgICAgIHRoaXMuc3RhcnREYXRlRWwgPSB0aGlzLnN0YXJ0RWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJmYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGRzXCJcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmJ1aWxkRGF0ZUZpZWxkcyh0aGlzLnN0YXJ0RGF0ZUVsLCB0aGlzLmV2ZW50LmRhdGUpO1xuICAgIH1cbiAgICBidWlsZEVuZERhdGUoKSB7XG4gICAgICAgIHRoaXMuZXZlbnQuZW5kID0gdGhpcy5ldmVudC5lbmQgPz8geyAuLi50aGlzLmV2ZW50LmRhdGUgfTtcbiAgICAgICAgdGhpcy5lbmRFbC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmVuZEVsLmFkZENsYXNzKFwiZmFudGFzeS1jYWxlbmRhci1ldmVudC1kYXRlXCIpO1xuICAgICAgICB0aGlzLmVuZEVsLmNyZWF0ZVNwYW4oeyB0ZXh0OiBcIkVuZDpcIiB9KTtcbiAgICAgICAgdGhpcy5lbmREYXRlRWwgPSB0aGlzLmVuZEVsLmNyZWF0ZURpdihcImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZHNcIik7XG5cbiAgICAgICAgdGhpcy5idWlsZERhdGVGaWVsZHModGhpcy5lbmREYXRlRWwsIHRoaXMuZXZlbnQuZW5kKTtcbiAgICB9XG4gICAgYnVpbGREYXRlU3RyaW5nKCkge1xuICAgICAgICB0aGlzLnN0cmluZ0VsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuc3RyaW5nRWwuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICB0ZXh0OiBkYXRlU3RyaW5nKFxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQuZGF0ZSxcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHMsXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudC5lbmRcbiAgICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkRGF0ZUZpZWxkcyhlbDogSFRNTEVsZW1lbnQsIGZpZWxkID0gdGhpcy5ldmVudC5kYXRlKSB7XG4gICAgICAgIGVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IGRheUVsID0gZWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jYWxlbmRhci1kYXRlLWZpZWxkXCIpO1xuICAgICAgICBkYXlFbC5jcmVhdGVFbChcImxhYmVsXCIsIHsgdGV4dDogXCJEYXlcIiB9KTtcbiAgICAgICAgY29uc3QgZGF5ID0gbmV3IFRleHRDb21wb25lbnQoZGF5RWwpXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJEYXlcIilcbiAgICAgICAgICAgIC5zZXRWYWx1ZShgJHtmaWVsZC5kYXl9YClcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIGZpZWxkLmRheSA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRGF0ZVN0cmluZygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGRheS5pbnB1dEVsLnNldEF0dHIoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuXG4gICAgICAgIGNvbnN0IG1vbnRoRWwgPSBlbC5jcmVhdGVEaXYoXCJmYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGRcIik7XG4gICAgICAgIG1vbnRoRWwuY3JlYXRlRWwoXCJsYWJlbFwiLCB7IHRleHQ6IFwiTW9udGhcIiB9KTtcbiAgICAgICAgbmV3IERyb3Bkb3duQ29tcG9uZW50KG1vbnRoRWwpXG4gICAgICAgICAgICAuYWRkT3B0aW9ucyhcbiAgICAgICAgICAgICAgICBPYmplY3QuZnJvbUVudHJpZXMoW1xuICAgICAgICAgICAgICAgICAgICBbXCJzZWxlY3RcIiwgXCJTZWxlY3QgTW9udGhcIl0sXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRocy5tYXAoKG1vbnRoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGgubmFtZVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgZmllbGQubW9udGggIT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzW2ZpZWxkLm1vbnRoXS5uYW1lXG4gICAgICAgICAgICAgICAgICAgIDogXCJzZWxlY3RcIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT09IFwic2VsZWN0XCIpIGZpZWxkLm1vbnRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRocy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAobSkgPT4gbS5uYW1lID09IHZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZpZWxkLm1vbnRoID0gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzLmluZGV4T2YoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGREYXRlU3RyaW5nKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB5ZWFyRWwgPSBlbC5jcmVhdGVEaXYoXCJmYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGRcIik7XG4gICAgICAgIHllYXJFbC5jcmVhdGVFbChcImxhYmVsXCIsIHsgdGV4dDogXCJZZWFyXCIgfSk7XG4gICAgICAgIGNvbnN0IHllYXIgPSBuZXcgVGV4dENvbXBvbmVudCh5ZWFyRWwpXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJZZWFyXCIpXG4gICAgICAgICAgICAuc2V0VmFsdWUoYCR7ZmllbGQueWVhcn1gKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF2IHx8IHYgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLnllYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQueWVhciA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZERhdGVTdHJpbmcoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB5ZWFyLmlucHV0RWwuc2V0QXR0cihcInR5cGVcIiwgXCJudW1iZXJcIik7XG4gICAgfVxuICAgIGJ1aWxkSW5mbygpIHtcbiAgICAgICAgdGhpcy5pbmZvRWwuZW1wdHkoKTtcbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5pbmZvRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk5vdGVcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiTGluayB0aGUgZXZlbnQgdG8gYSBub3RlLlwiKVxuICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpO1xuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoXCJQYXRoXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50Lm5vdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQubm90ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm90ZSAmJiBub3RlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQuc2V0VmFsdWUobm90ZS5iYXNlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBQYXRoU3VnZ2VzdGlvbk1vZGFsKHRoaXMuYXBwLCB0ZXh0LCBbXG4gICAgICAgICAgICAgICAgICAgIC4uLmZpbGVzXG4gICAgICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuYmx1cigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQubm90ZSA9IG1vZGFsLmZpbGUucGF0aDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeVBhcnNlKG1vZGFsLmZpbGUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmluZm9FbCkuc2V0TmFtZShcIkV2ZW50IE5hbWVcIikuYWRkVGV4dCgodCkgPT5cbiAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJFdmVudCBOYW1lXCIpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuZXZlbnQubmFtZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudC5uYW1lID0gdjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uRWwgPSB0aGlzLmluZm9FbC5jcmVhdGVEaXYoXCJldmVudC1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgZGVzY3JpcHRpb25FbC5jcmVhdGVFbChcImxhYmVsXCIsIHsgdGV4dDogXCJFdmVudCBEZXNjcmlwdGlvblwiIH0pO1xuICAgICAgICBuZXcgVGV4dEFyZWFDb21wb25lbnQoZGVzY3JpcHRpb25FbClcbiAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkV2ZW50IERlc2NyaXB0aW9uXCIpXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5ldmVudC5kZXNjcmlwdGlvbilcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQuZGVzY3JpcHRpb24gPSB2O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5pbmZvRWwpLnNldE5hbWUoXCJFdmVudCBDYXRlZ29yeVwiKS5hZGREcm9wZG93bigoZCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmNhdGVnb3JpZXMubWFwKChjYXRlZ29yeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NhdGVnb3J5LmlkLCBjYXRlZ29yeS5uYW1lXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZC5hZGRPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuZXZlbnQuY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiAodGhpcy5ldmVudC5jYXRlZ29yeSA9IHYpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHRyeVBhcnNlKC8qIG5vdGU6IHN0cmluZywgICovIGZpbGU6IFRGaWxlKSB7XG4gICAgICAgIHRoaXMuZXZlbnQubmFtZSA9IGZpbGUuYmFzZW5hbWU7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG5cbiAgICAgICAgY29uc3QgeyBmcm9udG1hdHRlciB9ID0gY2FjaGU7XG4gICAgICAgIGlmIChmcm9udG1hdHRlcikge1xuICAgICAgICAgICAgaWYgKFwiZmMtZGF0ZVwiIGluIGZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXksIG1vbnRoLCB5ZWFyIH0gPSBmcm9udG1hdHRlcltcImZjLWRhdGVcIl07XG4gICAgICAgICAgICAgICAgaWYgKGRheSkgdGhpcy5ldmVudC5kYXRlLmRheSA9IGRheTtcbiAgICAgICAgICAgICAgICBpZiAobW9udGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtb250aCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXhlciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzPy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobSkgPT4gbS5uYW1lID09IG1vbnRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA/PyB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHM/LlswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQuZGF0ZS5tb250aCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzPy5pbmRleE9mKGluZGV4ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9udGggPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudC5kYXRlLm1vbnRoID0gbW9udGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh5ZWFyKSB0aGlzLmV2ZW50LmRhdGUueWVhciA9IHllYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJmYy1jYXRlZ29yeVwiIGluIGZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAoYykgPT4gYy5uYW1lID09PSBmcm9udG1hdHRlcltcImZjLWNhdGVnb3J5XCJdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZnJvbnRtYXR0ZXJbXCJmYW50YXN5LWNhdGVnb3J5XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiIzgwODA4MFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCg2KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudC5jYXRlZ29yeSA9IHRoaXMuY2FsZW5kYXIuY2F0ZWdvcmllcy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAoYykgPT4gYy5uYW1lID09PSBmcm9udG1hdHRlcltcImZjLWNhdGVnb3J5XCJdXG4gICAgICAgICAgICAgICAgKT8uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgICBBcHAsXG4gICAgRnV6enlNYXRjaCxcbiAgICBGdXp6eVN1Z2dlc3RNb2RhbCxcbiAgICBTY29wZSxcbiAgICBTdWdnZXN0TW9kYWxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBjcmVhdGVQb3BwZXIsIEluc3RhbmNlIGFzIFBvcHBlckluc3RhbmNlIH0gZnJvbSBcIkBwb3BwZXJqcy9jb3JlXCI7XG5kZWNsYXJlIG1vZHVsZSBcIm9ic2lkaWFuXCIge1xuICAgIGludGVyZmFjZSBBcHAge1xuICAgICAgICBrZXltYXA6IHtcbiAgICAgICAgICAgIHB1c2hTY29wZShzY29wZTogU2NvcGUpOiB2b2lkO1xuICAgICAgICAgICAgcG9wU2NvcGUoc2NvcGU6IFNjb3BlKTogdm9pZDtcbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBTdWdnZXN0ZXI8VD4ge1xuICAgIG93bmVyOiBTdWdnZXN0TW9kYWw8VD47XG4gICAgaXRlbXM6IFRbXTtcbiAgICBzdWdnZXN0aW9uczogSFRNTERpdkVsZW1lbnRbXTtcbiAgICBzZWxlY3RlZEl0ZW06IG51bWJlcjtcbiAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG93bmVyOiBTdWdnZXN0TW9kYWw8VD4sXG4gICAgICAgIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCxcbiAgICAgICAgc2NvcGU6IFNjb3BlXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgICAgICBjb250YWluZXJFbC5vbihcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25DbGljay5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRhaW5lckVsLm9uKFxuICAgICAgICAgICAgXCJtb3VzZW1vdmVcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25Nb3VzZW92ZXIuYmluZCh0aGlzKVxuICAgICAgICApO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93VXBcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0odGhpcy5zZWxlY3RlZEl0ZW0gLSAxLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUucmVnaXN0ZXIoW10sIFwiQXJyb3dEb3duXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKHRoaXMuc2VsZWN0ZWRJdGVtICsgMSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVudGVyXCIsIChldnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXNlU2VsZWN0ZWRJdGVtKGV2dCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIlRhYlwiLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNob29zZVN1Z2dlc3Rpb24oZXZ0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNob29zZVN1Z2dlc3Rpb24oZXZ0OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pdGVtcyB8fCAhdGhpcy5pdGVtcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5pdGVtc1t0aGlzLnNlbGVjdGVkSXRlbV07XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub3duZXIub25DaG9vc2VTdWdnZXN0aW9uKGN1cnJlbnRWYWx1ZSwgZXZ0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblN1Z2dlc3Rpb25DbGljayhldmVudDogTW91c2VFdmVudCwgZWw6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICghdGhpcy5zdWdnZXN0aW9ucyB8fCAhdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zdWdnZXN0aW9ucy5pbmRleE9mKGVsKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnVzZVNlbGVjdGVkSXRlbShldmVudCk7XG4gICAgfVxuXG4gICAgb25TdWdnZXN0aW9uTW91c2VvdmVyKGV2ZW50OiBNb3VzZUV2ZW50LCBlbDogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1Z2dlc3Rpb25zIHx8ICF0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zdWdnZXN0aW9ucy5pbmRleE9mKGVsKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbXB0eSgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xuICAgIH1cbiAgICBzZXRTdWdnZXN0aW9ucyhpdGVtczogVFtdKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29uc3QgZWxzOiBIVE1MRGl2RWxlbWVudFtdID0gW107XG5cbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbkVsID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWl0ZW1cIik7XG4gICAgICAgICAgICB0aGlzLm93bmVyLnJlbmRlclN1Z2dlc3Rpb24oaXRlbSwgc3VnZ2VzdGlvbkVsKTtcbiAgICAgICAgICAgIGVscy5wdXNoKHN1Z2dlc3Rpb25FbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBlbHM7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKDAsIGZhbHNlKTtcbiAgICB9XG4gICAgdXNlU2VsZWN0ZWRJdGVtKGV2ZW50OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXRlbXMgfHwgIXRoaXMuaXRlbXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuaXRlbXNbdGhpcy5zZWxlY3RlZEl0ZW1dO1xuICAgICAgICBpZiAoY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm93bmVyLnNlbGVjdFN1Z2dlc3Rpb24oY3VycmVudFZhbHVlLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd3JhcCh2YWx1ZTogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKCh2YWx1ZSAlIHNpemUpICsgc2l6ZSkgJSBzaXplO1xuICAgIH1cbiAgICBzZXRTZWxlY3RlZEl0ZW0oaW5kZXg6IG51bWJlciwgc2Nyb2xsOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IG5JbmRleCA9IHRoaXMud3JhcChpbmRleCwgdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5zdWdnZXN0aW9uc1t0aGlzLnNlbGVjdGVkSXRlbV07XG4gICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLnN1Z2dlc3Rpb25zW25JbmRleF07XG5cbiAgICAgICAgaWYgKHByZXYpIHByZXYucmVtb3ZlQ2xhc3MoXCJpcy1zZWxlY3RlZFwiKTtcbiAgICAgICAgaWYgKG5leHQpIG5leHQuYWRkQ2xhc3MoXCJpcy1zZWxlY3RlZFwiKTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG5JbmRleDtcblxuICAgICAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgICAgICBuZXh0LnNjcm9sbEludG9WaWV3KGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN1Z2dlc3Rpb25Nb2RhbDxUPiBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPFQ+IHtcbiAgICBpdGVtczogVFtdID0gW107XG4gICAgc3VnZ2VzdGlvbnM6IEhUTUxEaXZFbGVtZW50W107XG4gICAgcG9wcGVyOiBQb3BwZXJJbnN0YW5jZTtcbiAgICBzY29wZTogU2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICBzdWdnZXN0ZXI6IFN1Z2dlc3RlcjxGdXp6eU1hdGNoPFQ+PjtcbiAgICBzdWdnZXN0RWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByb21wdEVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBlbXB0eVN0YXRlVGV4dDogc3RyaW5nID0gXCJObyBtYXRjaCBmb3VuZFwiO1xuICAgIGxpbWl0OiBudW1iZXIgPSAxMDA7XG4gICAgc2hvdWxkTm90T3BlbjogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaW5wdXRFbDogSFRNTElucHV0RWxlbWVudCwgaXRlbXM6IFRbXSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmlucHV0RWwgPSBpbnB1dEVsO1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0RWwgPSBjcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWNvbnRhaW5lclwiKTtcblxuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IHRoaXMuc3VnZ2VzdEVsLmNyZWF0ZURpdihcInN1Z2dlc3Rpb25cIik7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0ZXIgPSBuZXcgU3VnZ2VzdGVyKHRoaXMsIHRoaXMuY29udGVudEVsLCB0aGlzLnNjb3BlKTtcblxuICAgICAgICB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVzY2FwZVwiLCB0aGlzLm9uRXNjYXBlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5vbklucHV0Q2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnN1Z2dlc3RFbC5vbihcbiAgICAgICAgICAgIFwibW91c2Vkb3duXCIsXG4gICAgICAgICAgICBcIi5zdWdnZXN0aW9uLWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyLmVtcHR5KCk7XG4gICAgfVxuICAgIG9uSW5wdXRDaGFuZ2VkKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zaG91bGROb3RPcGVuKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGlucHV0U3RyID0gdGhpcy5tb2RpZnlJbnB1dCh0aGlzLmlucHV0RWwudmFsdWUpO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuZ2V0U3VnZ2VzdGlvbnMoaW5wdXRTdHIpO1xuICAgICAgICBpZiAoc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZXIuc2V0U3VnZ2VzdGlvbnMoc3VnZ2VzdGlvbnMuc2xpY2UoMCwgdGhpcy5saW1pdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbk5vU3VnZ2VzdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICBvbkZvY3VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNob3VsZE5vdE9wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbklucHV0Q2hhbmdlZCgpO1xuICAgIH1cbiAgICBtb2RpZnlJbnB1dChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBvbk5vU3VnZ2VzdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbXB0eSgpO1xuICAgICAgICB0aGlzLnJlbmRlclN1Z2dlc3Rpb24oXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwic3VnZ2VzdGlvbi1pdGVtXCIpXG4gICAgICAgICk7XG4gICAgfVxuICAgIG9wZW4oKTogdm9pZCB7XG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuIElkZWEgZnJvbSBQZXJpb2RpYyBOb3RlcyBwbHVnaW5cbiAgICAgICAgdGhpcy5hcHAua2V5bWFwLnB1c2hTY29wZSh0aGlzLnNjb3BlKTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc3VnZ2VzdEVsKTtcbiAgICAgICAgdGhpcy5wb3BwZXIgPSBjcmVhdGVQb3BwZXIodGhpcy5pbnB1dEVsLCB0aGlzLnN1Z2dlc3RFbCwge1xuICAgICAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbS1zdGFydFwiLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IFswLCAxMF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZsaXBcIixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tQbGFjZW1lbnRzOiBbXCJ0b3BcIl1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25Fc2NhcGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5zaG91bGROb3RPcGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuIElkZWEgZnJvbSBQZXJpb2RpYyBOb3RlcyBwbHVnaW5cbiAgICAgICAgdGhpcy5hcHAua2V5bWFwLnBvcFNjb3BlKHRoaXMuc2NvcGUpO1xuXG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyLnNldFN1Z2dlc3Rpb25zKFtdKTtcbiAgICAgICAgaWYgKHRoaXMucG9wcGVyKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN1Z2dlc3RFbC5kZXRhY2goKTtcbiAgICB9XG4gICAgY3JlYXRlUHJvbXB0KHByb21wdHM6IEhUTUxTcGFuRWxlbWVudFtdKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9tcHRFbClcbiAgICAgICAgICAgIHRoaXMucHJvbXB0RWwgPSB0aGlzLnN1Z2dlc3RFbC5jcmVhdGVEaXYoXCJwcm9tcHQtaW5zdHJ1Y3Rpb25zXCIpO1xuICAgICAgICBsZXQgcHJvbXB0ID0gdGhpcy5wcm9tcHRFbC5jcmVhdGVEaXYoXCJwcm9tcHQtaW5zdHJ1Y3Rpb25cIik7XG4gICAgICAgIGZvciAobGV0IHAgb2YgcHJvbXB0cykge1xuICAgICAgICAgICAgcHJvbXB0LmFwcGVuZENoaWxkKHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFic3RyYWN0IG9uQ2hvb3NlSXRlbShpdGVtOiBULCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBhYnN0cmFjdCBnZXRJdGVtVGV4dChhcmc6IFQpOiBzdHJpbmc7XG4gICAgYWJzdHJhY3QgZ2V0SXRlbXMoKTogVFtdO1xufVxuIiwgImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwgImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCAiLy8gaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVudXNlZC1pbXBvcnRzL25vLXVudXNlZC12YXJzXG5pbmNsdWRlU2NhbGUpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTsgLy8gRklYTUU6XG4gIC8vIGBvZmZzZXRXaWR0aGAgcmV0dXJucyBhbiBpbnRlZ2VyIHdoaWxlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgXG4gIC8vIHJldHVybnMgYSBmbG9hdC4gVGhpcyByZXN1bHRzIGluIGBzY2FsZVhgIG9yIGBzY2FsZVlgIGJlaW5nXG4gIC8vIG5vbi0xIHdoZW4gaXQgc2hvdWxkIGJlIGZvciBlbGVtZW50cyB0aGF0IGFyZW4ndCBhIGZ1bGwgcGl4ZWwgaW5cbiAgLy8gd2lkdGggb3IgaGVpZ2h0LlxuICAvLyBpZiAoaXNIVE1MRWxlbWVudChlbGVtZW50KSAmJiBpbmNsdWRlU2NhbGUpIHtcbiAgLy8gICBjb25zdCBvZmZzZXRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgLy8gICBjb25zdCBvZmZzZXRXaWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIC8vICAgLy8gRG8gbm90IGF0dGVtcHQgdG8gZGl2aWRlIGJ5IDAsIG90aGVyd2lzZSB3ZSBnZXQgYEluZmluaXR5YCBhcyBzY2FsZVxuICAvLyAgIC8vIEZhbGxiYWNrIHRvIDEgaW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgYDBgXG4gIC8vICAgaWYgKG9mZnNldFdpZHRoID4gMCkge1xuICAvLyAgICAgc2NhbGVYID0gcmVjdC53aWR0aCAvIG9mZnNldFdpZHRoIHx8IDE7XG4gIC8vICAgfVxuICAvLyAgIGlmIChvZmZzZXRIZWlnaHQgPiAwKSB7XG4gIC8vICAgICBzY2FsZVkgPSByZWN0LmhlaWdodCAvIG9mZnNldEhlaWdodCB8fCAxO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGggLyBzY2FsZVgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCAvIHNjYWxlWSxcbiAgICB0b3A6IHJlY3QudG9wIC8gc2NhbGVZLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0IC8gc2NhbGVYLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLyBzY2FsZVksXG4gICAgbGVmdDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHg6IHJlY3QubGVmdCAvIHNjYWxlWCxcbiAgICB5OiByZWN0LnRvcCAvIHNjYWxlWVxuICB9O1xufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59IiwgImltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufSIsICJpbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICBlbGVtZW50LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn0iLCAiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59IC8vIGAub2Zmc2V0UGFyZW50YCByZXBvcnRzIGBudWxsYCBmb3IgZml4ZWQgZWxlbWVudHMsIHdoaWxlIGFic29sdXRlIGVsZW1lbnRzXG4vLyByZXR1cm4gdGhlIGNvbnRhaW5pbmcgYmxvY2tcblxuXG5mdW5jdGlvbiBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkge1xuICB2YXIgaXNGaXJlZm94ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSAhPT0gLTE7XG4gIHZhciBpc0lFID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgIT09IC0xO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59IiwgImV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciByb3VuZCA9IE1hdGgucm91bmQ7IiwgImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIG1hdGhNYXgobWluLCBtYXRoTWluKHZhbHVlLCBtYXgpKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsICJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHdpdGhpbiBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwgImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZChyb3VuZCh4ICogZHByKSAvIGRwcikgfHwgMCxcbiAgICB5OiByb3VuZChyb3VuZCh5ICogZHByKSAvIGRwcikgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICB2YXJpYXRpb24gPSBfcmVmMi52YXJpYXRpb24sXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzO1xuXG4gIHZhciBfcmVmMyA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKG9mZnNldHMpIDogdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyhvZmZzZXRzKSA6IG9mZnNldHMsXG4gICAgICBfcmVmMyR4ID0gX3JlZjMueCxcbiAgICAgIHggPSBfcmVmMyR4ID09PSB2b2lkIDAgPyAwIDogX3JlZjMkeCxcbiAgICAgIF9yZWYzJHkgPSBfcmVmMy55LFxuICAgICAgeSA9IF9yZWYzJHkgPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR5O1xuXG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcbiAgICB2YXIgaGVpZ2h0UHJvcCA9ICdjbGllbnRIZWlnaHQnO1xuICAgIHZhciB3aWR0aFByb3AgPSAnY2xpZW50V2lkdGgnO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uICE9PSAnc3RhdGljJyAmJiBwb3NpdGlvbiA9PT0gJ2Fic29sdXRlJykge1xuICAgICAgICBoZWlnaHRQcm9wID0gJ3Njcm9sbEhlaWdodCc7XG4gICAgICAgIHdpZHRoUHJvcCA9ICdzY3JvbGxXaWR0aCc7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuXG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50O1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gdG9wIHx8IChwbGFjZW1lbnQgPT09IGxlZnQgfHwgcGxhY2VtZW50ID09PSByaWdodCkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVZID0gYm90dG9tOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgeSAtPSBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF0gLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQgfHwgKHBsYWNlbWVudCA9PT0gdG9wIHx8IHBsYWNlbWVudCA9PT0gYm90dG9tKSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVggPSByaWdodDsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICAgIHggLT0gb2Zmc2V0UGFyZW50W3dpZHRoUHJvcF0gLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9LCBhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNC5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoYWRhcHRpdmUgJiYgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICB9KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBEZXRlY3RlZCBDU1MgdHJhbnNpdGlvbnMgb24gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcnLCAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJywgJ1xcblxcbicsICdEaXNhYmxlIHRoZSBcImNvbXB1dGVTdHlsZXNcIiBtb2RpZmllclxcJ3MgYGFkYXB0aXZlYCBvcHRpb24gdG8gYWxsb3cnLCAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJywgJ3RyYW5zaXRpb24gZGVjbGFyYXRpb24gb24gdGhlIHBvcHBlciBlbGVtZW50IGlmIG9ubHkgdHJhbnNpdGlvbmluZycsICdvcGFjaXR5IG9yIGJhY2tncm91bmQtY29sb3IgZm9yIGV4YW1wbGUuJywgJ1xcblxcbicsICdXZSByZWNvbW1lbmQgdXNpbmcgdGhlIHBvcHBlciBlbGVtZW50IGFzIGEgd3JhcHBlciBhcm91bmQgYW4gaW5uZXInLCAnZWxlbWVudCB0aGF0IGNhbiBoYXZlIGFueSBDU1MgcHJvcGVydHkgdHJhbnNpdGlvbmVkIGZvciBhbmltYXRpb25zLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvblxuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMucG9wcGVyLCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgYWRhcHRpdmU6IGFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3cgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5hcnJvdyA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5hcnJvdywgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBhZGFwdGl2ZTogZmFsc2UsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXBsYWNlbWVudCc6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9XG59OyIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCAidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwgInZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCAiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7IC8vIE5COiBUaGlzIGlzbid0IHN1cHBvcnRlZCBvbiBpT1MgPD0gMTIuIElmIHRoZSBrZXlib2FyZCBpcyBvcGVuLCB0aGUgcG9wcGVyXG4gIC8vIGNhbiBiZSBvYnNjdXJlZCB1bmRlcm5lYXRoIGl0LlxuICAvLyBBbHNvLCBgaHRtbC5jbGllbnRIZWlnaHRgIGFkZHMgdGhlIGJvdHRvbSBiYXIgaGVpZ2h0IGluIFNhZmFyaSBpT1MsIGV2ZW5cbiAgLy8gaWYgaXQgaXNuJ3Qgb3Blbiwgc28gaWYgdGhpcyBpc24ndCBhdmFpbGFibGUsIHRoZSBwb3BwZXIgd2lsbCBiZSBkZXRlY3RlZFxuICAvLyB0byBvdmVyZmxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gdG9vIGVhcmx5LlxuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0OyAvLyBVc2VzIExheW91dCBWaWV3cG9ydCAobGlrZSBDaHJvbWU7IFNhZmFyaSBkb2VzIG5vdCBjdXJyZW50bHkpXG4gICAgLy8gSW4gQ2hyb21lLCBpdCByZXR1cm5zIGEgdmFsdWUgdmVyeSBjbG9zZSB0byAwICgrLy0pIGJ1dCBjb250YWlucyByb3VuZGluZ1xuICAgIC8vIGVycm9ycyBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgbnVtYmVycywgc28gd2UgbmVlZCB0byBjaGVjayBwcmVjaXNpb24uXG4gICAgLy8gU2FmYXJpIHJldHVybnMgYSBudW1iZXIgPD0gMCwgdXN1YWxseSA8IC0xIHdoZW4gcGluY2gtem9vbWVkXG4gICAgLy8gRmVhdHVyZSBkZXRlY3Rpb24gZmFpbHMgaW4gbW9iaWxlIGVtdWxhdGlvbiBtb2RlIGluIENocm9tZS5cbiAgICAvLyBNYXRoLmFicyh3aW4uaW5uZXJXaWR0aCAvIHZpc3VhbFZpZXdwb3J0LnNjYWxlIC0gdmlzdWFsVmlld3BvcnQud2lkdGgpIDxcbiAgICAvLyAwLjAwMVxuICAgIC8vIEZhbGxiYWNrIGhlcmU6IFwiTm90IFNhZmFyaVwiIHVzZXJBZ2VudFxuXG4gICAgaWYgKCEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59IiwgImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwgImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59IiwgImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSkgOiBpc0hUTUxFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwgImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsICJpbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwgImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMgXHUyMDEzIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7XG4gICAgX3NraXA6IGZhbHNlXG4gIH1cbn07IiwgImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwgImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCAiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSIsICJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHdpdGhpbiBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMgfHwgY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIHRldGhlck9mZnNldFZhbHVlIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWUgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XVttYWluQXhpc10gOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IG1hdGhNYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKF9taW4sIHRldGhlck1pbikgOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KF9tYXgsIHRldGhlck1heCkgOiBfbWF4KTtcblxuICAgICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59OyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tIFwiLi9nZXROb2RlU2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFNjYWxlZChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IHJlY3Qud2lkdGggLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByZWN0LmhlaWdodCAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChzdHIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChhcmdzKS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHtcbiAgICByZXR1cm4gcC5yZXBsYWNlKC8lcy8sIGMpO1xuICB9LCBzdHIpO1xufSIsICJpbXBvcnQgZm9ybWF0IGZyb20gXCIuL2Zvcm1hdC5qc1wiO1xuaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgW10uY29uY2F0KE9iamVjdC5rZXlzKG1vZGlmaWVyKSwgVkFMSURfUFJPUEVSVElFUykgLy8gSUUxMS1jb21wYXRpYmxlIHJlcGxhY2VtZW50IGZvciBgbmV3IFNldChpdGVyYWJsZSlgXG4gICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBTdHJpbmcobW9kaWZpZXIubmFtZSksICdcIm5hbWVcIicsICdcInN0cmluZ1wiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIubmFtZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VuYWJsZWQnOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlbmFibGVkXCInLCAnXCJib29sZWFuXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5lbmFibGVkKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGhhc2UnOlxuICAgICAgICAgIGlmIChtb2RpZmllclBoYXNlcy5pbmRleE9mKG1vZGlmaWVyLnBoYXNlKSA8IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInBoYXNlXCInLCBcImVpdGhlciBcIiArIG1vZGlmaWVyUGhhc2VzLmpvaW4oJywgJyksIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnBoYXNlKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm4nOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImZuXCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlZmZlY3QnOlxuICAgICAgICAgIGlmIChtb2RpZmllci5lZmZlY3QgIT0gbnVsbCAmJiB0eXBlb2YgbW9kaWZpZXIuZWZmZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlZmZlY3RcIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlcXVpcmVzJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIucmVxdWlyZXMgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCBjdXJyZW50Lm9wdGlvbnMpLFxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanNcIjtcbmltcG9ydCB1bmlxdWVCeSBmcm9tIFwiLi91dGlscy91bmlxdWVCeS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gXCIuL3V0aWxzL21lcmdlQnlOYW1lLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIFx1MjAxMyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSBcdTIwMTMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwgImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwgImltcG9ydCB7IFN1Z2dlc3Rpb25Nb2RhbCB9IGZyb20gXCIuL3N1Z2dlc3RlclwiO1xuaW1wb3J0IHtcbiAgICBGdXp6eU1hdGNoLFxuICAgIFRGaWxlLFxuICAgIEJsb2NrQ2FjaGUsXG4gICAgSGVhZGluZ0NhY2hlLFxuICAgIENhY2hlZE1ldGFkYXRhLFxuICAgIFRleHRDb21wb25lbnQsXG4gICAgQXBwLFxuICAgIFRGb2xkZXJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdGhTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0aW9uTW9kYWw8XG4gICAgVEZpbGUgfCBCbG9ja0NhY2hlIHwgSGVhZGluZ0NhY2hlXG4+IHtcbiAgICBmaWxlOiBURmlsZTtcbiAgICBmaWxlczogVEZpbGVbXTtcbiAgICB0ZXh0OiBUZXh0Q29tcG9uZW50O1xuICAgIGNhY2hlOiBDYWNoZWRNZXRhZGF0YTtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaW5wdXQ6IFRleHRDb21wb25lbnQsIGl0ZW1zOiBURmlsZVtdKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgaW5wdXQuaW5wdXRFbCwgaXRlbXMpO1xuICAgICAgICB0aGlzLmZpbGVzID0gWy4uLml0ZW1zXTtcbiAgICAgICAgdGhpcy50ZXh0ID0gaW5wdXQ7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVQcm9tcHRzKCk7XG5cbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLmdldEZpbGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIGNyZWF0ZVByb21wdHMoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlUHJvbXB0KFtcbiAgICAgICAgICAgIGNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgIGNsczogXCJwcm9tcHQtaW5zdHJ1Y3Rpb24tY29tbWFuZFwiLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiVHlwZSAjXCJcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY3JlYXRlU3Bhbih7IHRleHQ6IFwidG8gbGluayBoZWFkaW5nXCIgfSlcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuY3JlYXRlUHJvbXB0KFtcbiAgICAgICAgICAgIGNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgIGNsczogXCJwcm9tcHQtaW5zdHJ1Y3Rpb24tY29tbWFuZFwiLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiVHlwZSBeXCJcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY3JlYXRlU3Bhbih7IHRleHQ6IFwidG8gbGluayBibG9ja3NcIiB9KVxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5jcmVhdGVQcm9tcHQoW1xuICAgICAgICAgICAgY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgY2xzOiBcInByb21wdC1pbnN0cnVjdGlvbi1jb21tYW5kXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJOb3RlOiBcIlxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkJsb2NrcyBtdXN0IGhhdmUgYmVlbiBjcmVhdGVkIGFscmVhZHlcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGdldEZpbGUoKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmlucHV0RWwudmFsdWUsXG4gICAgICAgICAgICBmaWxlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChcbiAgICAgICAgICAgICAgICB2LnNwbGl0KC9bXFxeI10vKS5zaGlmdCgpIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgaWYgKGZpbGUgPT0gdGhpcy5maWxlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIGlmICh0aGlzLmZpbGUpXG4gICAgICAgICAgICB0aGlzLmNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGhpcy5maWxlKTtcbiAgICAgICAgdGhpcy5vbklucHV0Q2hhbmdlZCgpO1xuICAgIH1cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBURmlsZSB8IEhlYWRpbmdDYWNoZSB8IEJsb2NrQ2FjaGUpIHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBURmlsZSkgcmV0dXJuIGl0ZW0ucGF0aDtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBcImhlYWRpbmdcIikpIHtcbiAgICAgICAgICAgIHJldHVybiAoPEhlYWRpbmdDYWNoZT5pdGVtKS5oZWFkaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgXCJpZFwiKSkge1xuICAgICAgICAgICAgcmV0dXJuICg8QmxvY2tDYWNoZT5pdGVtKS5pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkNob29zZUl0ZW0oaXRlbTogVEZpbGUgfCBIZWFkaW5nQ2FjaGUgfCBCbG9ja0NhY2hlKSB7XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dC5zZXRWYWx1ZShpdGVtLmJhc2VuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZSA9IGl0ZW07XG4gICAgICAgICAgICB0aGlzLmNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUodGhpcy5maWxlKTtcbiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgXCJoZWFkaW5nXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHQuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlLmJhc2VuYW1lICsgXCIjXCIgKyAoPEhlYWRpbmdDYWNoZT5pdGVtKS5oZWFkaW5nXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBcImlkXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHQuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlLmJhc2VuYW1lICsgXCJeXCIgKyAoPEJsb2NrQ2FjaGU+aXRlbSkuaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0U3VnZ2VzdGlvbih7IGl0ZW0gfTogRnV6enlNYXRjaDxURmlsZSB8IEJsb2NrQ2FjaGUgfCBIZWFkaW5nQ2FjaGU+KSB7XG4gICAgICAgIGxldCBsaW5rOiBzdHJpbmc7XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZSA9IGl0ZW07XG4gICAgICAgICAgICBsaW5rID0gaXRlbS5iYXNlbmFtZTtcbiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgXCJoZWFkaW5nXCIpKSB7XG4gICAgICAgICAgICBsaW5rID0gdGhpcy5maWxlLmJhc2VuYW1lICsgXCIjXCIgKyAoPEhlYWRpbmdDYWNoZT5pdGVtKS5oZWFkaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBcImlkXCIpKSB7XG4gICAgICAgICAgICBsaW5rID0gdGhpcy5maWxlLmJhc2VuYW1lICsgXCJeXCIgKyAoPEJsb2NrQ2FjaGU+aXRlbSkuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0LnNldFZhbHVlKGxpbmspO1xuXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgfVxuICAgIHJlbmRlclN1Z2dlc3Rpb24oXG4gICAgICAgIHJlc3VsdDogRnV6enlNYXRjaDxURmlsZSB8IEJsb2NrQ2FjaGUgfCBIZWFkaW5nQ2FjaGU+LFxuICAgICAgICBlbDogSFRNTEVsZW1lbnRcbiAgICApIHtcbiAgICAgICAgbGV0IHsgaXRlbSwgbWF0Y2g6IG1hdGNoZXMgfSA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBlbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tY29udGVudFwiXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnRlbnQuc2V0VGV4dCh0aGlzLmVtcHR5U3RhdGVUZXh0KTtcbiAgICAgICAgICAgIGNvbnRlbnQucGFyZW50RWxlbWVudC5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgbGV0IHBhdGhMZW5ndGggPSBpdGVtLnBhdGgubGVuZ3RoIC0gaXRlbS5uYW1lLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoRWxlbWVudHMgPSBtYXRjaGVzLm1hdGNoZXMubWFwKChtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNwYW4oXCJzdWdnZXN0aW9uLWhpZ2hsaWdodFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBsZXQgaSA9IHBhdGhMZW5ndGg7XG4gICAgICAgICAgICAgICAgaSA8IGl0ZW0ucGF0aC5sZW5ndGggLSBpdGVtLmV4dGVuc2lvbi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbWF0Y2hlcy5tYXRjaGVzLmZpbmQoKG0pID0+IG1bMF0gPT09IGkpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IG1hdGNoRWxlbWVudHNbbWF0Y2hlcy5tYXRjaGVzLmluZGV4T2YobWF0Y2gpXTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRUZXh0KGl0ZW0ucGF0aC5zdWJzdHJpbmcobWF0Y2hbMF0sIG1hdGNoWzFdKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaSArPSBtYXRjaFsxXSAtIG1hdGNoWzBdIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRUZXh0KGl0ZW0ucGF0aFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgIGNsczogXCJzdWdnZXN0aW9uLW5vdGVcIixcbiAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBcImhlYWRpbmdcIikpIHtcbiAgICAgICAgICAgIGNvbnRlbnQuc2V0VGV4dCgoPEhlYWRpbmdDYWNoZT5pdGVtKS5oZWFkaW5nKTtcbiAgICAgICAgICAgIGNvbnRlbnQucHJlcGVuZChcbiAgICAgICAgICAgICAgICBjcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tZmxhaXJcIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYEgkeyg8SGVhZGluZ0NhY2hlPml0ZW0pLmxldmVsfWBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgXCJpZFwiKSkge1xuICAgICAgICAgICAgY29udGVudC5zZXRUZXh0KCg8QmxvY2tDYWNoZT5pdGVtKS5pZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGhlYWRpbmdzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsZSkgcmV0dXJuIFtdO1xuICAgICAgICBpZiAoIXRoaXMuY2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0aGlzLmZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmhlYWRpbmdzIHx8IFtdO1xuICAgIH1cbiAgICBnZXQgYmxvY2tzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsZSkgcmV0dXJuIFtdO1xuICAgICAgICBpZiAoIXRoaXMuY2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0aGlzLmZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuY2FjaGUuYmxvY2tzIHx8IHt9KSB8fCBbXTtcbiAgICB9XG4gICAgZ2V0SXRlbXMoKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmlucHV0RWwudmFsdWU7XG4gICAgICAgIGlmICgvIy8udGVzdCh2KSkge1xuICAgICAgICAgICAgdGhpcy5tb2RpZnlJbnB1dCA9IChpKSA9PiBpLnNwbGl0KC8jLykucG9wKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oZWFkaW5ncztcbiAgICAgICAgfSBlbHNlIGlmICgvXFxeLy50ZXN0KHYpKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGlmeUlucHV0ID0gKGkpID0+IGkuc3BsaXQoL1xcXi8pLnBvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVzO1xuICAgIH1cbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB0eXBlIHsgTW9vbiB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG5cbiAgICBpbXBvcnQgRGV0YWlsIGZyb20gXCIuL0RldGFpbC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCBNb29uU1ZHIGZyb20gXCJzcmMvdmlldy91aS9Nb29uLnN2ZWx0ZVwiO1xuXG4gICAgZXhwb3J0IGxldCBtb29uczogTW9vbltdID0gW107XG4gICAgZXhwb3J0IGxldCBkaXNwbGF5TW9vbnM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IGRpc3BsYXkgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IFNldHRpbmcobm9kZSlcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGlzcGxheSBNb29uc1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJEaXNwbGF5IG1vb25zIGJ5IGRlZmF1bHQgd2hlbiB2aWV3aW5nIHRoaXMgY2FsZW5kYXIuXCIpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZShkaXNwbGF5TW9vbnMpLm9uQ2hhbmdlKCh2KSA9PlxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcImRpc3BsYXktdG9nZ2xlXCIsIHYpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgYiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIik7XG4gICAgICAgIGIuZXh0cmFTZXR0aW5nc0VsLnNldEF0dHIoXCJzdHlsZVwiLCBcIm1hcmdpbi1sZWZ0OiAwO1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJwZW5jaWxcIikuc2V0VG9vbHRpcChcIkVkaXRcIik7XG4gICAgfTtcbiAgICBjb25zdCBkZWxldGVNb29uID0gKGl0ZW06IE1vb24pID0+IHtcbiAgICAgICAgbW9vbnMgPSBtb29ucy5maWx0ZXIoKG1vb24pID0+IG1vb24uaWQgIT09IGl0ZW0uaWQpO1xuICAgICAgICBkaXNwYXRjaChcImVkaXQtbW9vbnNcIiwgbW9vbnMpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPERldGFpbCBsYWJlbD1cIk1vb25zXCIgb246bmV3LWl0ZW0+XG4gICAgPHN2ZWx0ZTpmcmFnbWVudCBzbG90PVwicHJlLWFkZFwiPlxuICAgICAgICA8ZGl2IHVzZTpkaXNwbGF5IC8+XG4gICAgPC9zdmVsdGU6ZnJhZ21lbnQ+XG4gICAgeyNpZiAhbW9vbnMubGVuZ3RofVxuICAgICAgICA8ZGl2IGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIj5cbiAgICAgICAgICAgIDxzcGFuPkNyZWF0ZSBhIG5ldyBtb29uIHRvIHNlZSBpdCBoZXJlLjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgezplbHNlfVxuICAgICAgICA8ZGl2IGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIj5cbiAgICAgICAgICAgIHsjZWFjaCBtb29ucyBhcyBtb29ufVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb29uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb29uLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2V0dGluZy1pdGVtLW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TW9vblNWR1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bW9vbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2U9e1wiRmlyc3QgUXVhcnRlclwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9ezIwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge21vb24ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDeWNsZToge21vb24uY3ljbGV9IGRheXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2U6ZWRpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaChcIm5ldy1pdGVtXCIsIG1vb24pfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZTp0cmFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBkZWxldGVNb29uKG1vb24pfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG48L0RldGFpbD5cblxuPHN0eWxlPlxuICAgIC5tb29uIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgYXV0bztcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICB9XG4gICAgLnNldHRpbmctaXRlbS1uYW1lIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmljb25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICAgICAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmljb24ge1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBMZWFwRGF5IH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGdldEludGVydmFsRGVzY3JpcHRpb24gfSBmcm9tIFwic3JjL3V0aWxzL2Z1bmN0aW9uc1wiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IHRyYXNoID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGxldCBiID0gbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKTtcbiAgICAgICAgYi5leHRyYVNldHRpbmdzRWwuc2V0QXR0cihcInN0eWxlXCIsIFwibWFyZ2luLWxlZnQ6IDA7XCIpO1xuICAgIH07XG4gICAgY29uc3QgZWRpdCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInBlbmNpbFwiKS5zZXRUb29sdGlwKFwiRWRpdFwiKTtcbiAgICB9O1xuICAgIGV4cG9ydCBsZXQgbGVhcGRheTogTGVhcERheTtcblxuICAgICQ6IGRlc2NyaXB0aW9uID0gZ2V0SW50ZXJ2YWxEZXNjcmlwdGlvbihsZWFwZGF5KTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwibGVhcGRheVwiPlxuICAgIDxkaXYgY2xhc3M9XCJsZWFwZGF5LWluZm9cIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzZXR0aW5nLWl0ZW0tbmFtZVwiPlxuICAgICAgICAgICAge2xlYXBkYXkubmFtZX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCI+e2Rlc2NyaXB0aW9ufTwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImljb25zXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgdXNlOmVkaXQgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKFwiZWRpdFwiKX0gLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIiB1c2U6dHJhc2ggb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKFwiZGVsZXRlXCIpfSAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAubGVhcGRheSB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG87XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgfVxuICAgIC5sZWFwZGF5LWluZm8ge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAuaWNvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktc2VsZjogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC5sZWFwZGF5IC5pY29uIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBMZWFwRGF5IH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcblxuICAgIGltcG9ydCBEZXRhaWwgZnJvbSBcIi4vRGV0YWlsLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBMZWFwRGF5VUkgZnJvbSBcIi4vTGVhcERheS5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgbGVhcGRheXM6IExlYXBEYXlbXSA9IFtdO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IGVkaXRMZWFwRGF5ID0gKGl0ZW06IExlYXBEYXkpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goXCJuZXctaXRlbVwiLCBpdGVtKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlbGV0ZUxlYXBEYXkgPSAoaXRlbTogTGVhcERheSkgPT4ge1xuICAgICAgICBsZWFwZGF5cyA9IGxlYXBkYXlzLmZpbHRlcigobGVhcGRheSkgPT4gbGVhcGRheS5pZCAhPT0gaXRlbS5pZCk7XG4gICAgICAgIGRpc3BhdGNoKFwiZWRpdC1sZWFwZGF5c1wiLCBsZWFwZGF5cyk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48RGV0YWlsIGxhYmVsPVwiTGVhcCBEYXlzXCIgb246bmV3LWl0ZW0+XG4gICAgeyNpZiAhbGVhcGRheXMubGVuZ3RofVxuICAgICAgICA8ZGl2IGNsYXNzPVwiZXhpc3RpbmctaXRlbXNcIj5cbiAgICAgICAgICAgIDxzcGFuPkNyZWF0ZSBhIG5ldyBsZWFwIGRheSB0byBzZWUgaXQgaGVyZS48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIHs6ZWxzZX1cbiAgICAgICAgPGRpdiBjbGFzcz1cImV4aXN0aW5nLWl0ZW1zXCI+XG4gICAgICAgICAgICB7I2VhY2ggbGVhcGRheXMgYXMgbGVhcGRheX1cbiAgICAgICAgICAgICAgICA8TGVhcERheVVJXG4gICAgICAgICAgICAgICAgICAgIHtsZWFwZGF5fVxuICAgICAgICAgICAgICAgICAgICBvbjplZGl0PXsoKSA9PiBlZGl0TGVhcERheShsZWFwZGF5KX1cbiAgICAgICAgICAgICAgICAgICAgb246ZGVsZXRlPXsoKSA9PiBkZWxldGVMZWFwRGF5KGxlYXBkYXkpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG48L0RldGFpbD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsICJpbXBvcnQgeyBNb2RhbCwgQXBwLCBTZXR0aW5nLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIHsgQ2FsZW5kYXIsIE1vb24gfSBmcm9tIFwiLi4vLi4vQHR5cGVzXCI7XG5cbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCIuLi8uLi91dGlscy9mdW5jdGlvbnNcIjtcblxuZXhwb3J0IGNsYXNzIENyZWF0ZU1vb25Nb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzYXZlZCA9IGZhbHNlO1xuICAgIG1vb246IE1vb24gPSB7XG4gICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgIGN5Y2xlOiBudWxsLFxuICAgICAgICBvZmZzZXQ6IG51bGwsXG4gICAgICAgIGZhY2VDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgIHNoYWRvd0NvbG9yOiBcIiMwMDBcIixcbiAgICAgICAgaWQ6IG5hbm9pZCg2KVxuICAgIH07XG4gICAgZWRpdGluZzogYm9vbGVhbjtcbiAgICBpbmZvRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwdWJsaWMgY2FsZW5kYXI6IENhbGVuZGFyLCBtb29uPzogTW9vbikge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICBpZiAobW9vbikge1xuICAgICAgICAgICAgdGhpcy5tb29uID0geyAuLi5tb29uIH07XG4gICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJmYW50YXN5LWNhbGVuZGFyLWNyZWF0ZS1tb29uXCIpO1xuICAgIH1cblxuICAgIGFzeW5jIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwge1xuICAgICAgICAgICAgdGV4dDogdGhpcy5lZGl0aW5nID8gXCJFZGl0IE1vb25cIiA6IFwiTmV3IE1vb25cIlxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluZm9FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcIm1vb24taW5mb1wiKTtcbiAgICAgICAgdGhpcy5idWlsZEluZm8oKTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJTYXZlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubW9vbi5uYW1lPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiVGhlIG1vb24gbXVzdCBoYXZlIGEgbmFtZS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vb24uY3ljbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiVGhlIG1vb24gbXVzdCBoYXZlIGEgcG9zaXRpdmUgY3ljbGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkNhbmNlbFwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkSW5mbygpIHtcbiAgICAgICAgdGhpcy5pbmZvRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmluZm9FbCkuc2V0TmFtZShcIk5hbWVcIikuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLm1vb24ubmFtZSkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vb24ubmFtZSA9IHY7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuaW5mb0VsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJDeWNsZVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJIb3cgbWFueSBkYXlzIGl0IHRha2VzIGZvciB0aGUgbW9vbiB0byBjb21wbGV0ZSBhIGZ1bGwgY3ljbGUuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5pbnB1dEVsLnNldEF0dHIoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoYCR7dGhpcy5tb29uLmN5Y2xlfWApLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIodikpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9vbi5jeWNsZSA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmluZm9FbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiT2Zmc2V0XCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlNoaWZ0IHRoZSBzdGFydGluZyBtb29uIHBoYXNlIGJ5IGEgbnVtYmVyIG9mIGRheXMuXCIpXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuaW5wdXRFbC5zZXRBdHRyKFwidHlwZVwiLCBcIm51bWJlclwiKTtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKGAke3RoaXMubW9vbi5vZmZzZXR9YCkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKE51bWJlcih2KSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb29uLm9mZnNldCA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuaW5mb0VsKS5zZXROYW1lKFwiRmFjZSBDb2xvclwiKS5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICB0LmlucHV0RWwuc2V0QXR0cihcInR5cGVcIiwgXCJjb2xvclwiKTtcbiAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5tb29uLmZhY2VDb2xvcikub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vb24uZmFjZUNvbG9yID0gdjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmluZm9FbCkuc2V0TmFtZShcIlNoYWRvdyBDb2xvclwiKS5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICB0LmlucHV0RWwuc2V0QXR0cihcInR5cGVcIiwgXCJjb2xvclwiKTtcbiAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5tb29uLnNoYWRvd0NvbG9yKS5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW9vbi5zaGFkb3dDb2xvciA9IHY7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgTW9kYWwsXG4gICAgQXBwLFxuICAgIFNldHRpbmcsXG4gICAgTm90aWNlLFxuICAgIEJ1dHRvbkNvbXBvbmVudCxcbiAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudFxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIHsgQ2FsZW5kYXIsIExlYXBEYXksIExlYXBEYXlDb25kaXRpb24gfSBmcm9tIFwiLi4vLi4vQHR5cGVzXCI7XG5cbmltcG9ydCB7IGdldEludGVydmFsRGVzY3JpcHRpb24sIG5hbm9pZCB9IGZyb20gXCIuLi8uLi91dGlscy9mdW5jdGlvbnNcIjtcblxuZXhwb3J0IGNsYXNzIENyZWF0ZUxlYXBEYXlNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzYXZlZCA9IGZhbHNlO1xuICAgIGxlYXBkYXk6IExlYXBEYXkgPSB7XG4gICAgICAgIGlkOiBuYW5vaWQoNiksXG4gICAgICAgIG5hbWU6IFwiTGVhcCBEYXlcIixcbiAgICAgICAgaW50ZXJ2YWw6IFtdLFxuICAgICAgICBpbnRlcmNhbGFyeTogZmFsc2UsXG4gICAgICAgIHRpbWVzcGFuOiBudWxsLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIHR5cGU6IFwibGVhcGRheVwiXG4gICAgfTtcbiAgICBlZGl0aW5nOiBib29sZWFuO1xuICAgIGluZm9FbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgY29uZGl0aW9uc0VsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHVibGljIGNhbGVuZGFyOiBDYWxlbmRhciwgbGVhcGRheT86IExlYXBEYXkpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgaWYgKGxlYXBkYXkpIHtcbiAgICAgICAgICAgIHRoaXMubGVhcGRheSA9IHsgLi4ubGVhcGRheSB9O1xuICAgICAgICAgICAgdGhpcy5lZGl0aW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmFkZENsYXNzKFwiZmFudGFzeS1jYWxlbmRhci1jcmVhdGUtbGVhcGRheVwiKTtcbiAgICB9XG5cbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImgzXCIsIHtcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuZWRpdGluZyA/IFwiRWRpdCBMZWFwIERheVwiIDogXCJOZXcgTGVhcCBEYXlcIlxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluZm9FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcImxlYXBkYXktaW5mb1wiKTtcbiAgICAgICAgdGhpcy5idWlsZEluZm8oKTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJTYXZlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubGVhcGRheS5pbnRlcnZhbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiVGhlIGxlYXAgZGF5IG11c3QgaGF2ZSBhbiBpbnRlcnZhbC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVhcGRheS50aW1lc3BhbiA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRoZSBsZWFwIGRheSBtdXN0IGJlIGF0dGFjaGVkIHRvIGEgTW9udGguXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkNhbmNlbFwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkSW5mbygpIHtcbiAgICAgICAgdGhpcy5pbmZvRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmluZm9FbCkuc2V0TmFtZShcIk5hbWVcIikuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLmxlYXBkYXkubmFtZSkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxlYXBkYXkubmFtZSA9IHY7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuaW5mb0VsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJNb250aFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJUaGUgbGVhcCBkYXkgd2lsbCBiZSBhZGRlZCB0byB0aGlzIG1vbnRoLlwiKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbW9udGggb2YgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzLmluZGV4T2YobW9udGgpO1xuICAgICAgICAgICAgICAgICAgICBkLmFkZE9wdGlvbihgJHtpbmRleH1gLCBtb250aC5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZC5zZXRWYWx1ZShgJHt0aGlzLmxlYXBkYXkudGltZXNwYW59YCkub25DaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgICh2KSA9PiAodGhpcy5sZWFwZGF5LnRpbWVzcGFuID0gTnVtYmVyKHYpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcodGhpcy5pbmZvRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk9mZnNldFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJTaGlmdCB0aGUgeWVhcnMgdGhlIGxlYXAgZGF5IGlzIGFwcGxpZWQgdG8uXCIpXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuaW5wdXRFbC5zZXRBdHRyKFwidHlwZVwiLCBcIm51bWJlclwiKTtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKGAke3RoaXMubGVhcGRheS5vZmZzZXR9YCkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKE51bWJlcih2KSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFwZGF5Lm9mZnNldCA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY29uZGl0aW9uc0VsID0gdGhpcy5pbmZvRWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIHRoaXMuYnVpbGRDb25kaXRpb25zKCk7XG4gICAgfVxuICAgIGJ1aWxkQ29uZGl0aW9ucygpIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25zRWwuZW1wdHkoKTtcblxuICAgICAgICBjb25zdCBiID0gbmV3IEJ1dHRvbkNvbXBvbmVudCh0aGlzLmNvbmRpdGlvbnNFbClcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWRkIE5ld1wiKVxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCIrXCIpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgSW50ZXJ2YWxNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbW9kYWwuc2F2ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFwZGF5LmludGVydmFsLnB1c2gobW9kYWwuY29uZGl0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZENvbmRpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBiLmJ1dHRvbkVsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cbiAgICAgICAgdGhpcy5jb25kaXRpb25zRWwuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICB0ZXh0OiBnZXRJbnRlcnZhbERlc2NyaXB0aW9uKHRoaXMubGVhcGRheSksXG4gICAgICAgICAgICBjbHM6IFwiZmFudGFzeS1sZWFwLWRheS1pbnRlcnZhbC1kZXNjcmlwdGlvbiBzZXR0aW5nLWl0ZW1cIlxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBpbnRlcnZhbCBvZiB0aGlzLmludGVydmFscykge1xuICAgICAgICAgICAgbmV3IFNldHRpbmcodGhpcy5jb25kaXRpb25zRWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUodGhpcy5nZXRJbnRlcnZhbE5hbWUoaW50ZXJ2YWwpKVxuICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwZW5jaWxcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRWRpdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEludGVydmFsTW9kYWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVydmFscy5pbmRleE9mKGludGVydmFsKSAhPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYXBkYXkuaW50ZXJ2YWwuc3BsaWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFwZGF5LmludGVydmFsLmluZGV4T2YoaW50ZXJ2YWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmNvbmRpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQ29uZGl0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRGVsZXRlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFwZGF5LmludGVydmFsLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWFwZGF5LmludGVydmFsLmluZGV4T2YoaW50ZXJ2YWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVydmFsc1swXS5leGNsdXNpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbHNbMF0uZXhjbHVzaXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRDb25kaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaW50ZXJ2YWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWFwZGF5LmludGVydmFsLnNvcnQoKGEsIGIpID0+IGEuaW50ZXJ2YWwgLSBiLmludGVydmFsKTtcbiAgICB9XG4gICAgZ2V0SW50ZXJ2YWxOYW1lKGludGVydmFsOiBMZWFwRGF5Q29uZGl0aW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBbYCR7aW50ZXJ2YWwuaW50ZXJ2YWx9YF07XG4gICAgICAgIGlmIChpbnRlcnZhbC5leGNsdXNpdmUpIHtcbiAgICAgICAgICAgIG5hbWUucHVzaChcIihFeGNsdXNpdmUpXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnZhbC5pZ25vcmUpIHtcbiAgICAgICAgICAgIG5hbWUucHVzaChcIiAtIElnbm9yaW5nIE9mZnNldFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZS5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG59XG5cbmNsYXNzIEludGVydmFsTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBlZGl0aW5nOiBib29sZWFuID0gZmFsc2U7XG4gICAgY29uZGl0aW9uOiBMZWFwRGF5Q29uZGl0aW9uID0ge1xuICAgICAgICBpbnRlcnZhbDogbnVsbCxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgaWdub3JlOiBmYWxzZVxuICAgIH07XG4gICAgYnV0dG9uc0VsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGFwcDogQXBwLFxuICAgICAgICBwdWJsaWMgY2FuQmVFeGNsdXNpdmU/OiBib29sZWFuLFxuICAgICAgICBjb25kaXRpb24/OiBMZWFwRGF5Q29uZGl0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG5cbiAgICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSB7IC4uLmNvbmRpdGlvbiB9O1xuICAgICAgICAgICAgdGhpcy5lZGl0aW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIkxlYXAgRGF5IENvbmRpdGlvblwiIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbnRlcnZhbFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJIb3cgb2Z0ZW4gdGhlIGNvbmRpdGlvbiBhcHBsaWVzLlwiKVxuICAgICAgICAgICAgLmFkZFRleHQoKHQpID0+IHtcbiAgICAgICAgICAgICAgICB0LmlucHV0RWwuc2V0QXR0cihcInR5cGVcIiwgXCJudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZShgJHt0aGlzLmNvbmRpdGlvbi5pbnRlcnZhbH1gKS5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oTnVtYmVyKHYpKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvbi5pbnRlcnZhbCA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJFeGNsdXNpdmVcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiSWYgdHJ1ZSwgdGhlIGxlYXAgZGF5IHdpbGwgbm90IGFwcGx5IHdoZW4gdGhlIHllYXIgbWVldHMgdGhlIGNvbmRpdGlvbi5cXG5cXG5SZXF1aXJlcyB0aGUgbGVhcCBkYXkgdG8gaGF2ZSBhdCBsZWFzdCBvbmUgbm9uLWV4Y2x1c2l2ZSBjb25kaXRpb24uXCJcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT5cbiAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgIC5zZXREaXNhYmxlZCghdGhpcy5jYW5CZUV4Y2x1c2l2ZSlcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuY29uZGl0aW9uLmV4Y2x1c2l2ZSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiAodGhpcy5jb25kaXRpb24uZXhjbHVzaXZlID0gdikpXG4gICAgICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiSWdub3JlIE9mZnNldFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJUaGUgY29uZGl0aW9uIHdpbGwgaWdub3JlIHRoZSBsZWFwIGRheSdzIG9mZnNldCB3aGVuIGNoZWNraW5nIHRvIGFwcGx5LlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxuICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuY29uZGl0aW9uLmlnbm9yZSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiAodGhpcy5jb25kaXRpb24uaWdub3JlID0gdikpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuYnV0dG9uc0VsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwiZmFudGFzeS1jb250ZXh0LWJ1dHRvbnNcIik7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQodGhpcy5idXR0b25zRWwpXG4gICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KHRoaXMuZWRpdGluZyA/IFwiU2F2ZVwiIDogXCJDcmVhdGVcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29uZGl0aW9uLmludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJUaGUgY29uZGl0aW9uIHJlcXVpcmVzIGFuIGludGVydmFsLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KHRoaXMuYnV0dG9uc0VsKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgIC5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuY2xvc2UoKSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgVEZvbGRlcixcbiAgICBUZXh0Q29tcG9uZW50LFxuICAgIENhY2hlZE1ldGFkYXRhLFxuICAgIEFwcCxcbiAgICBGdXp6eU1hdGNoXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgU3VnZ2VzdGlvbk1vZGFsIH0gZnJvbSBcIi4vc3VnZ2VzdGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0aW9uTW9kYWw8VEZvbGRlcj4ge1xuICAgIHRleHQ6IFRleHRDb21wb25lbnQ7XG4gICAgY2FjaGU6IENhY2hlZE1ldGFkYXRhO1xuICAgIGZvbGRlcnM6IFRGb2xkZXJbXTtcbiAgICBmb2xkZXI6IFRGb2xkZXI7XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGlucHV0OiBUZXh0Q29tcG9uZW50LCBpdGVtczogVEZvbGRlcltdKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgaW5wdXQuaW5wdXRFbCwgaXRlbXMpO1xuICAgICAgICB0aGlzLmZvbGRlcnMgPSBbLi4uaXRlbXNdO1xuICAgICAgICB0aGlzLnRleHQgPSBpbnB1dDtcblxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHRoaXMuZ2V0Rm9sZGVyKCkpO1xuICAgIH1cbiAgICBnZXRGb2xkZXIoKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmlucHV0RWwudmFsdWUsXG4gICAgICAgICAgICBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodik7XG4gICAgICAgIGlmIChmb2xkZXIgPT0gdGhpcy5mb2xkZXIpIHJldHVybjtcbiAgICAgICAgaWYgKCEoZm9sZGVyIGluc3RhbmNlb2YgVEZvbGRlcikpIHJldHVybjtcbiAgICAgICAgdGhpcy5mb2xkZXIgPSBmb2xkZXI7XG5cbiAgICAgICAgdGhpcy5vbklucHV0Q2hhbmdlZCgpO1xuICAgIH1cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBURm9sZGVyKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnBhdGg7XG4gICAgfVxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBURm9sZGVyKSB7XG4gICAgICAgIHRoaXMudGV4dC5zZXRWYWx1ZShpdGVtLnBhdGgpO1xuICAgICAgICB0aGlzLmZvbGRlciA9IGl0ZW07XG4gICAgfVxuICAgIHNlbGVjdFN1Z2dlc3Rpb24oeyBpdGVtIH06IEZ1enp5TWF0Y2g8VEZvbGRlcj4pIHtcbiAgICAgICAgbGV0IGxpbmsgPSBpdGVtLnBhdGg7XG5cbiAgICAgICAgdGhpcy50ZXh0LnNldFZhbHVlKGxpbmspO1xuICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcblxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICAgIHJlbmRlclN1Z2dlc3Rpb24ocmVzdWx0OiBGdXp6eU1hdGNoPFRGb2xkZXI+LCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IHsgaXRlbSwgbWF0Y2g6IG1hdGNoZXMgfSA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBlbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tY29udGVudFwiXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnRlbnQuc2V0VGV4dCh0aGlzLmVtcHR5U3RhdGVUZXh0KTtcbiAgICAgICAgICAgIGNvbnRlbnQucGFyZW50RWxlbWVudC5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhdGhMZW5ndGggPSBpdGVtLnBhdGgubGVuZ3RoIC0gaXRlbS5uYW1lLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbWF0Y2hFbGVtZW50cyA9IG1hdGNoZXMubWF0Y2hlcy5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTcGFuKFwic3VnZ2VzdGlvbi1oaWdobGlnaHRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gcGF0aExlbmd0aDsgaSA8IGl0ZW0ucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gbWF0Y2hlcy5tYXRjaGVzLmZpbmQoKG0pID0+IG1bMF0gPT09IGkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBtYXRjaEVsZW1lbnRzW21hdGNoZXMubWF0Y2hlcy5pbmRleE9mKG1hdGNoKV07XG4gICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZFRleHQoaXRlbS5wYXRoLnN1YnN0cmluZyhtYXRjaFswXSwgbWF0Y2hbMV0pKTtcblxuICAgICAgICAgICAgICAgIGkgKz0gbWF0Y2hbMV0gLSBtYXRjaFswXSAtIDE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kVGV4dChpdGVtLnBhdGhbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1ub3RlXCIsXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLnBhdGhcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvbGRlcnM7XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgYWRkSWNvbixcbiAgICBCdXR0b25Db21wb25lbnQsXG4gICAgRHJvcGRvd25Db21wb25lbnQsXG4gICAgRmlsZVZpZXcsXG4gICAgSXRlbVZpZXcsXG4gICAgTWFya2Rvd25SZW5kZXJlcixcbiAgICBNYXJrZG93blZpZXcsXG4gICAgTWVudSxcbiAgICBNb2RhbCxcbiAgICBub3JtYWxpemVQYXRoLFxuICAgIE5vdGljZSxcbiAgICBTZXR0aW5nLFxuICAgIHN0cmluZ2lmeVlhbWwsXG4gICAgVGV4dENvbXBvbmVudCxcbiAgICBURmlsZSxcbiAgICBXb3Jrc3BhY2VMZWFmXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHR5cGUgeyBDYWxlbmRhciwgQ3VycmVudENhbGVuZGFyRGF0YSwgRXZlbnQgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBEYXlIZWxwZXIgfSBmcm9tIFwic3JjL2hlbHBlclwiO1xuaW1wb3J0IENhbGVuZGFySGVscGVyIGZyb20gXCJzcmMvaGVscGVyXCI7XG5pbXBvcnQgeyBDcmVhdGVFdmVudE1vZGFsIH0gZnJvbSBcInNyYy9zZXR0aW5ncy9tb2RhbHMvZXZlbnRcIjtcbmltcG9ydCB0eXBlIEZhbnRhc3lDYWxlbmRhciBmcm9tIFwiLi4vbWFpblwiO1xuXG5pbXBvcnQgXCIuL3ZpZXcuY3NzXCI7XG5cbmV4cG9ydCBjb25zdCBWSUVXX1RZUEUgPSBcIkZBTlRBU1lfQ0FMRU5EQVJcIjtcbmV4cG9ydCBjb25zdCBGVUxMX1ZJRVcgPSBcIkZBTlRBU1lfQ0FMRU5EQVJfRlVMTF9WSUVXXCI7XG5cbmltcG9ydCBDYWxlbmRhclVJIGZyb20gXCIuL3VpL0NhbGVuZGFyLnN2ZWx0ZVwiO1xuaW1wb3J0IHsgY29uZmlybVdpdGhNb2RhbCB9IGZyb20gXCJzcmMvc2V0dGluZ3MvbW9kYWxzL2NvbmZpcm1cIjtcbmltcG9ydCB7IGRheXNCZXR3ZWVuIH0gZnJvbSBcInNyYy91dGlscy9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IE1PRElGSUVSX0tFWSB9IGZyb20gXCIuLi9tYWluXCI7XG5cbmFkZEljb24oXG4gICAgVklFV19UWVBFLFxuICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwiY2FsZW5kYXJcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLWNhbGVuZGFyIGZhLXctMTRcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA0NDggNTEyXCI+PHBhdGggeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTQwMCA2NGgtNDhWMTJjMC02LjYtNS40LTEyLTEyLTEyaC00MGMtNi42IDAtMTIgNS40LTEyIDEydjUySDE2MFYxMmMwLTYuNi01LjQtMTItMTItMTJoLTQwYy02LjYgMC0xMiA1LjQtMTIgMTJ2NTJINDhDMjEuNSA2NCAwIDg1LjUgMCAxMTJ2MzUyYzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDM1MmMyNi41IDAgNDgtMjEuNSA0OC00OFYxMTJjMC0yNi41LTIxLjUtNDgtNDgtNDh6bS02IDQwMEg1NGMtMy4zIDAtNi0yLjctNi02VjE2MGgzNTJ2Mjk4YzAgMy4zLTIuNyA2LTYgNnpcIi8+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMTguMzIgMjU1Ljc4TDE5MiAyMjMuOTZsLTkxLjI4IDY4LjY5Yy0xMC4wOCAxMC4wOC0yLjk0IDI3LjMxIDExLjMxIDI3LjMxaDIyMi43Yy05LjQ0LTI2LjQtMTQuNzMtNTQuNDctMTQuNzMtODMuMzh2LTQyLjI3bC0xMTkuNzMtODcuNmMtMjMuODItMTUuODgtNTUuMjktMTQuMDEtNzcuMDYgNC41OUw1LjgxIDIyNy42NGMtMTIuMzggMTAuMzMtMy40NSAzMC40MiAxMi41MSAyOC4xNHptNTU2Ljg3IDM0LjFsLTEwMC42Ni01MC4zMUE0Ny45OTIgNDcuOTkyIDAgMCAxIDQ0OCAxOTYuNjV2LTM2LjY5aDY0bDI4LjA5IDIyLjYzYzYgNiAxNC4xNCA5LjM3IDIyLjYzIDkuMzdoMzAuOTdhMzIgMzIgMCAwIDAgMjguNjItMTcuNjlsMTQuMzEtMjguNjJhMzIuMDA1IDMyLjAwNSAwIDAgMC0zLjAyLTMzLjUxbC03NC41My05OS4zOEM1NTMuMDIgNC43IDU0My41NCAwIDUzMy40NyAwSDI5Ni4wMmMtNy4xMyAwLTEwLjcgOC41Ny01LjY2IDEzLjYxTDM1MiA2My45NiAyOTIuNDIgODguOGMtNS45IDIuOTUtNS45IDExLjM2IDAgMTQuMzFMMzUyIDEyNy45NnYxMDguNjJjMCA3Mi4wOCAzNi4wMyAxMzkuMzkgOTYgMTc5LjM4LTE5NS41OSA2LjgxLTM0NC41NiA0MS4wMS00MzQuMSA2MC45MUM1Ljc4IDQ3OC42NyAwIDQ4NS44OCAwIDQ5NC4yIDAgNTA0IDcuOTUgNTEyIDE3Ljc2IDUxMmg0OTkuMDhjNjMuMjkuMDEgMTE5LjYxLTQ3LjU2IDEyMi45OS0xMTAuNzYgMi41Mi00Ny4yOC0yMi43My05MC40LTY0LjY0LTExMS4zNnpNNDg5LjE4IDY2LjI1bDQ1LjY1IDExLjQxYy0yLjc1IDEwLjkxLTEyLjQ3IDE4Ljg5LTI0LjEzIDE4LjI2LTEyLjk2LS43MS0yNS44NS0xMi41My0yMS41Mi0yOS42N3pcIiBzdHlsZT1cIiYjMTA7ICAgIHRyYW5zZm9ybTogc2NhbGUoMC40MTI1KSB0cmFuc2xhdGUoNTAlLCA5NSUpOyYjMTA7XCIvPjwvc3ZnPmBcbik7XG5cbmFkZEljb24oXG4gICAgXCJmYW50YXN5LWNhbGVuZGFyLXJldmVhbFwiLFxuICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwiY2FsZW5kYXItZGF5XCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1jYWxlbmRhci1kYXkgZmEtdy0xNFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0wIDQ2NGMwIDI2LjUgMjEuNSA0OCA0OCA0OGgzNTJjMjYuNSAwIDQ4LTIxLjUgNDgtNDhWMTkySDB2Mjcyem02NC0xOTJjMC04LjggNy4yLTE2IDE2LTE2aDk2YzguOCAwIDE2IDcuMiAxNiAxNnY5NmMwIDguOC03LjIgMTYtMTYgMTZIODBjLTguOCAwLTE2LTcuMi0xNi0xNnYtOTZ6TTQwMCA2NGgtNDhWMTZjMC04LjgtNy4yLTE2LTE2LTE2aC0zMmMtOC44IDAtMTYgNy4yLTE2IDE2djQ4SDE2MFYxNmMwLTguOC03LjItMTYtMTYtMTZoLTMyYy04LjggMC0xNiA3LjItMTYgMTZ2NDhINDhDMjEuNSA2NCAwIDg1LjUgMCAxMTJ2NDhoNDQ4di00OGMwLTI2LjUtMjEuNS00OC00OC00OHpcIi8+PC9zdmc+YFxuKTtcblxuZGVjbGFyZSBtb2R1bGUgXCJvYnNpZGlhblwiIHtcbiAgICBpbnRlcmZhY2UgV29ya3NwYWNlSXRlbSB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGYW50YXN5Q2FsZW5kYXJWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIGRyb3Bkb3duRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIGhlbHBlcjogQ2FsZW5kYXJIZWxwZXI7XG4gICAgbm9DYWxlbmRhckVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICB1cGRhdGVNZTogYm9vbGVhbiA9IHRydWU7XG4gICAgZGF5TnVtYmVyOiBib29sZWFuO1xuICAgIC8qIGZ1bGwgPSAgZmFsc2U7ICovXG4gICAgZ2V0IHJvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlYWYuZ2V0Um9vdCgpO1xuICAgIH1cbiAgICBnZXQgZnVsbCgpIHtcbiAgICAgICAgcmV0dXJuICEoXCJjb2xsYXBzZVwiIGluIHRoaXMucm9vdCk7XG4gICAgfVxuICAgIHllYXJWaWV3OiBib29sZWFuID0gZmFsc2U7XG4gICAgbW9vbnM6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGNhbGVuZGFyOiBDYWxlbmRhcjtcbiAgICAvKiBjYWxlbmRhckRyb3Bkb3duRWw6IEhUTUxEaXZFbGVtZW50OyAqL1xuICAgIHByb3RlY3RlZCBfYXBwOiBDYWxlbmRhclVJO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcGx1Z2luOiBGYW50YXN5Q2FsZW5kYXIsXG4gICAgICAgIHB1YmxpYyBsZWFmOiBXb3Jrc3BhY2VMZWFmLFxuICAgICAgICBwdWJsaWMgb3B0aW9uczogeyBjYWxlbmRhcj86IENhbGVuZGFyOyBmdWxsPzogYm9vbGVhbiB9ID0ge31cbiAgICApIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJmYW50YXN5LWNhbGVuZGFyLXZpZXdcIik7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmFkZENsYXNzKFwiZmFudGFzeS1jYWxlbmRhci12aWV3LWNvbnRlbnRcIik7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub24oXCJmYW50YXN5LWNhbGVuZGFycy11cGRhdGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNhbGVuZGFycygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbihcImxheW91dC1jaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYXBwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoe1xuICAgICAgICAgICAgICAgICAgICBmdWxsVmlldzogdGhpcy5mdWxsLFxuICAgICAgICAgICAgICAgICAgICAuLi4odGhpcy5mdWxsID8geyBkYXlWaWV3OiBmYWxzZSB9IDoge30pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICAvKiB3aW5kb3cudmlldyA9IHRoaXM7ICovXG4gICAgfVxuICAgIHVwZGF0ZUNhbGVuZGFycygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVwZGF0ZU1lKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1lID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucGx1Z2luLmRhdGEuY2FsZW5kYXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fYXBwPy4kZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgICAgIHRoaXMubm9DYWxlbmRhckVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwiZmFudGFzeS1uby1jYWxlbmRhclwiKTtcbiAgICAgICAgICAgIHRoaXMubm9DYWxlbmRhckVsLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiTm8gY2FsZW5kYXJzIGNyZWF0ZWQhIENyZWF0ZSBhIGNhbGVuZGFyIHRvIHNlZSBpdCBoZXJlLlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGVuZGFyID1cbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuY2FsZW5kYXJzLmZpbmQoKGMpID0+IGMuaWQgPT0gdGhpcy5jYWxlbmRhcj8uaWQpID8/XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5kZWZhdWx0Q2FsZW5kYXIgPz9cbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuY2FsZW5kYXJzWzBdO1xuXG4gICAgICAgIGlmICh0aGlzLmhlbHBlciAmJiB0aGlzLmhlbHBlci5jYWxlbmRhci5pZCA9PSBjYWxlbmRhci5pZCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoY2FsZW5kYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50Q2FsZW5kYXIoY2FsZW5kYXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZShjYWxlbmRhcjogQ2FsZW5kYXIpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgICAgICB0aGlzLmhlbHBlci51cGRhdGUodGhpcy5jYWxlbmRhcik7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckNhbGVuZGFySW50ZXJ2YWwoKTtcblxuICAgICAgICBpZiAoIXRoaXMuX2FwcCkge1xuICAgICAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoeyBjYWxlbmRhcjogdGhpcy5oZWxwZXIgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWdpc3RlckNhbGVuZGFySW50ZXJ2YWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jYWxlbmRhci5zdGF0aWMuaW5jcmVtZW50RGF5KSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jYWxlbmRhci5kYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kYXRlID0gY3VycmVudC52YWx1ZU9mKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRpZiA9IGRheXNCZXR3ZWVuKG5ldyBEYXRlKHRoaXMuY2FsZW5kYXIuZGF0ZSksIGN1cnJlbnQpO1xuXG4gICAgICAgICAgICBpZiAoZGlmID49IDEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyLmdvVG9OZXh0Q3VycmVudERheSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmRhdGUgPSBjdXJyZW50LnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkYXlzQmV0d2VlbihuZXcgRGF0ZSgpLCBjdXJyZW50KSA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyLmdvVG9OZXh0Q3VycmVudERheSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlbHBlci5jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kYXRlID0gY3VycmVudC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDYwICogMTAwMCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGludGVydmFsOiBudW1iZXI7XG5cbiAgICBzZXRDdXJyZW50Q2FsZW5kYXIoY2FsZW5kYXI6IENhbGVuZGFyKSB7XG4gICAgICAgIHRoaXMubm9DYWxlbmRhckVsPy5kZXRhY2goKTtcblxuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY2FsZW5kYXI7XG5cbiAgICAgICAgdGhpcy5tb29ucyA9IHRoaXMuY2FsZW5kYXIuc3RhdGljLmRpc3BsYXlNb29ucztcbiAgICAgICAgdGhpcy5kYXlOdW1iZXIgPSB0aGlzLmNhbGVuZGFyLnN0YXRpYy5kaXNwbGF5RGF5TnVtYmVyO1xuICAgICAgICB0aGlzLmhlbHBlciA9IG5ldyBDYWxlbmRhckhlbHBlcih0aGlzLmNhbGVuZGFyLCB0aGlzLnBsdWdpbik7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckNhbGVuZGFySW50ZXJ2YWwoKTtcblxuICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICAgIGNyZWF0ZUV2ZW50Rm9yRGF5KGRhdGU6IEN1cnJlbnRDYWxlbmRhckRhdGEpIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgQ3JlYXRlRXZlbnRNb2RhbCh0aGlzLmFwcCwgdGhpcy5jYWxlbmRhciwgbnVsbCwgZGF0ZSk7XG5cbiAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghbW9kYWwuc2F2ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZXZlbnRzLnB1c2gobW9kYWwuZXZlbnQpO1xuXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblxuICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoe1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyOiB0aGlzLmhlbHBlclxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckhlbHBlckV2ZW50KFwiZGF5LXVwZGF0ZVwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUNhbGVuZGFycygpO1xuICAgIH1cbiAgICBidWlsZCgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5fYXBwID0gbmV3IENhbGVuZGFyVUkoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRlbnRFbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXI6IHRoaXMuaGVscGVyLFxuICAgICAgICAgICAgICAgIGZ1bGxWaWV3OiB0aGlzLmZ1bGwsXG4gICAgICAgICAgICAgICAgeWVhclZpZXc6IHRoaXMueWVhclZpZXcsXG4gICAgICAgICAgICAgICAgbW9vbnM6IHRoaXMubW9vbnMsXG4gICAgICAgICAgICAgICAgZGlzcGxheVdlZWtzOiB0aGlzLmhlbHBlci5kaXNwbGF5V2Vla3MsXG4gICAgICAgICAgICAgICAgZGlzcGxheURheU51bWJlcjogdGhpcy5kYXlOdW1iZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2FwcC4kb24oXCJkYXktY2xpY2tcIiwgKGV2ZW50OiBDdXN0b21FdmVudDxEYXlIZWxwZXI+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXkgPSBldmVudC5kZXRhaWw7XG5cbiAgICAgICAgICAgIGlmIChkYXkuZXZlbnRzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVFdmVudEZvckRheShkYXkuZGF0ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2FwcC4kb24oXCJkYXktZG91YmxlY2xpY2tcIiwgKGV2ZW50OiBDdXN0b21FdmVudDxEYXlIZWxwZXI+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXkgPSBldmVudC5kZXRhaWw7XG4gICAgICAgICAgICBpZiAoIWRheS5ldmVudHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMuaGVscGVyLnZpZXdpbmcuZGF5ID0gZGF5Lm51bWJlcjtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyLnZpZXdpbmcubW9udGggPSB0aGlzLmhlbHBlci5kaXNwbGF5ZWQubW9udGg7XG4gICAgICAgICAgICB0aGlzLmhlbHBlci52aWV3aW5nLnllYXIgPSB0aGlzLmhlbHBlci5kaXNwbGF5ZWQueWVhcjtcblxuICAgICAgICAgICAgdGhpcy55ZWFyVmlldyA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLl9hcHAuJHNldCh7IHllYXJWaWV3OiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHRoaXMuX2FwcC4kc2V0KHsgZGF5VmlldzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckhlbHBlckV2ZW50KFwiZGF5LXVwZGF0ZVwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2FwcC4kb24oXG4gICAgICAgICAgICBcImRheS1jb250ZXh0LW1lbnVcIixcbiAgICAgICAgICAgIChldmVudDogQ3VzdG9tRXZlbnQ8eyBkYXk6IERheUhlbHBlcjsgZXZ0OiBNb3VzZUV2ZW50IH0+KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXksIGV2dCB9ID0gZXZlbnQuZGV0YWlsO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KHRoaXMuYXBwKTtcblxuICAgICAgICAgICAgICAgIG1lbnUuc2V0Tm9JY29uKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJPcGVuIERheVwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5EYXkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXk6IGRheS5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoOiB0aGlzLmhlbHBlci5kaXNwbGF5ZWQubW9udGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6IHRoaXMuaGVscGVyLmRpc3BsYXllZC55ZWFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiU2V0IGFzIFRvZGF5XCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jdXJyZW50ID0gZGF5LmRhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyLmN1cnJlbnQuZGF5ID0gZGF5Lm51bWJlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VySGVscGVyRXZlbnQoXCJkYXktdXBkYXRlXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiTmV3IEV2ZW50XCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVFdmVudEZvckRheShkYXkuZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLl9hcHAuJG9uKFwic2V0dGluZ3NcIiwgKGV2ZW50OiBDdXN0b21FdmVudDxNb3VzZUV2ZW50PikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXZ0ID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KHRoaXMuYXBwKTtcblxuICAgICAgICAgICAgbWVudS5zZXROb0ljb24oKTtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXG4gICAgICAgICAgICAgICAgICAgIGAke3RoaXMuY2FsZW5kYXIuZGlzcGxheVdlZWtzID8gXCJIaWRlXCIgOiBcIlNob3dcIn0gV2Vla3NgXG4gICAgICAgICAgICAgICAgKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kaXNwbGF5V2Vla3MgPSAhdGhpcy5jYWxlbmRhci5kaXNwbGF5V2Vla3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyLnVwZGF0ZSh0aGlzLmNhbGVuZGFyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVdlZWtzOiB0aGlzLmNhbGVuZGFyLmRpc3BsYXlXZWVrc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXG4gICAgICAgICAgICAgICAgICAgIGBPcGVuICR7dGhpcy55ZWFyVmlldyA/IFwiTW9udGhcIiA6IFwiWWVhclwifWBcbiAgICAgICAgICAgICAgICApLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXJWaWV3ID0gIXRoaXMueWVhclZpZXc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FwcC4kc2V0KHsgeWVhclZpZXc6IHRoaXMueWVhclZpZXcgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9vbnMgPyBcIkhpZGUgTW9vbnNcIiA6IFwiRGlzcGxheSBNb29uc1wiXG4gICAgICAgICAgICAgICAgKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVNb29ucygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRheU51bWJlciA/IFwiSGlkZSBEYXkgTnVtYmVyXCIgOiBcIkRpc3BsYXkgRGF5IE51bWJlclwiXG4gICAgICAgICAgICAgICAgKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXlOdW1iZXIgPSAhdGhpcy5kYXlOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLmRpc3BsYXlEYXlOdW1iZXIgPSB0aGlzLmRheU51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoeyBkaXNwbGF5RGF5TnVtYmVyOiB0aGlzLmRheU51bWJlciB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJWaWV3IERheVwiKTtcblxuICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3BlbkRhdGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIlN3aXRjaCBDYWxlbmRhcnNcIik7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXREaXNhYmxlZCh0aGlzLnBsdWdpbi5kYXRhLmNhbGVuZGFycy5sZW5ndGggPD0gMSk7XG4gICAgICAgICAgICAgICAgaXRlbS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgU3dpdGNoTW9kYWwodGhpcy5wbHVnaW4sIHRoaXMuY2FsZW5kYXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLmNvbmZpcm1lZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRDYWxlbmRhcihtb2RhbC5jYWxlbmRhcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fYXBwLiRvbihcbiAgICAgICAgICAgIFwiZXZlbnQtY2xpY2tcIixcbiAgICAgICAgICAgIChldnQ6IEN1c3RvbUV2ZW50PHsgZXZlbnQ6IEV2ZW50OyBtb2RpZmllcjogYm9vbGVhbiB9PikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXZlbnQsIG1vZGlmaWVyIH0gPSBldnQuZGV0YWlsO1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5ub3RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsZWF2ZXM6IFdvcmtzcGFjZUxlYWZbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUFsbExlYXZlcygobGVhZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlYWYudmlldy5maWxlLmJhc2VuYW1lID09PSBldmVudC5ub3RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmVzLnB1c2gobGVhZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVhdmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobGVhdmVzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQubm90ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnVsbCB8fCBtb2RpZmllclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IFZpZXdFdmVudE1vZGFsKGV2ZW50LCB0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fYXBwLiRvbihcbiAgICAgICAgICAgIFwiZXZlbnQtbW91c2VvdmVyXCIsXG4gICAgICAgICAgICAoZXZ0OiBDdXN0b21FdmVudDx7IHRhcmdldDogSFRNTEVsZW1lbnQ7IGV2ZW50OiBFdmVudCB9PikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uZGF0YS5ldmVudFByZXZpZXcpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRhcmdldCwgZXZlbnQgfSA9IGV2dC5kZXRhaWw7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5vdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxpbmstaG92ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsIC8vaG92ZXIgcG9wb3ZlciwgYnV0IGRvbid0IG5lZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCwgLy90YXJnZXRFbFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQubm90ZSwgLy9saW5rVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcIiAvL3NvdXJjZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLl9hcHAuJG9uKFxuICAgICAgICAgICAgXCJldmVudC1jb250ZXh0XCIsXG4gICAgICAgICAgICAoY3VzdG9tOiBDdXN0b21FdmVudDx7IGV2dDogTW91c2VFdmVudDsgZXZlbnQ6IEV2ZW50IH0+KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBldnQsIGV2ZW50IH0gPSBjdXN0b20uZGV0YWlsO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KHRoaXMuYXBwKTtcblxuICAgICAgICAgICAgICAgIG1lbnUuc2V0Tm9JY29uKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50Lm5vdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiQ3JlYXRlIE5vdGVcIikub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk/LnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RmlsZVBhdGggPSBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5hcHAuZmlsZU1hbmFnZXIuZ2V0TmV3RmlsZVBhcmVudChwYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LnBhcmVudCA/PyBcIi9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiL1wiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGAke2V2ZW50LmRhdGUueWVhcn0tJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0ZS5tb250aCArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LSR7ZXZlbnQuZGF0ZS5kYXl9YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGAke2V2ZW50LmVuZC55ZWFyfS0ke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZW5kLm1vbnRoICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LSR7ZXZlbnQuZW5kLmRheX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmMtY2FsZW5kYXJcIjogdGhpcy5jYWxlbmRhci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZjLWRhdGVcIjogZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGV2ZW50LmVuZCA/IHsgXCJmYy1lbmRcIjogZW5kIH0gOiB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihldmVudC5jYXRlZ29yeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZjLWNhdGVnb3J5XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jYXRlZ29yaWVzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjYXQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXQuaWQgPT0gZXZlbnQuY2F0ZWdvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApPy5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5ub3RlID0gbm9ybWFsaXplUGF0aChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7bmV3RmlsZVBhdGh9LyR7ZXZlbnQubmFtZX0ubWRgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5ub3RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lm5vdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLS0tXFxuJHtzdHJpbmdpZnlZYW1sKGNvbnRlbnQpfVxcbi0tLWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZUNhbGVuZGFyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVWaWV3cyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWFya2Rvd25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBmaWxlVmlld3MuZmluZCgobCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC52aWV3IGluc3RhbmNlb2YgRmlsZVZpZXcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnZpZXcuZmlsZS5wYXRoID09IGV2ZW50Lm5vdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKGV4aXN0aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRVbnBpbm5lZExlYWYoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vcGVuRmlsZShmaWxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiRWRpdCBFdmVudFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENyZWF0ZUV2ZW50TW9kYWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnNhdmVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuY2FsZW5kYXIuZXZlbnRzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlKSA9PiBlLmlkID09IGV2ZW50LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZXZlbnRzLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5ldmVudHMuaW5kZXhPZihleGlzdGluZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhcjogdGhpcy5oZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckhlbHBlckV2ZW50KFwiZGF5LXVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShcIkRlbGV0ZSBFdmVudFwiKS5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb25maXJtV2l0aE1vZGFsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gZGVsZXRlIHRoaXMgZXZlbnQ/XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0YTogXCJEZWxldGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeTogXCJDYW5jZWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmNhbGVuZGFyLmV2ZW50cy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSkgPT4gZS5pZCA9PSBldmVudC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmV2ZW50cy5zcGxpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZXZlbnRzLmluZGV4T2YoZXhpc3RpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhcjogdGhpcy5oZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckhlbHBlckV2ZW50KFwiZGF5LXVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLl9hcHAuJG9uKFwiZXZlbnRcIiwgKGU6IEN1c3RvbUV2ZW50PEN1cnJlbnRDYWxlbmRhckRhdGE+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZS5kZXRhaWw7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUV2ZW50Rm9yRGF5KGRhdGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9hcHAuJG9uKFwicmVzZXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXIucmVzZXQoKTtcblxuICAgICAgICAgICAgdGhpcy55ZWFyVmlldyA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLl9hcHAuJHNldCh7IHllYXJWaWV3OiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHRoaXMuX2FwcC4kc2V0KHsgZGF5VmlldzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckhlbHBlckV2ZW50KFwiZGF5LXVwZGF0ZVwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvcGVuRGF5KGRhdGU6IEN1cnJlbnRDYWxlbmRhckRhdGEpIHtcbiAgICAgICAgdGhpcy5oZWxwZXIudmlld2luZy5kYXkgPSBkYXRlLmRheTtcbiAgICAgICAgdGhpcy5oZWxwZXIudmlld2luZy5tb250aCA9IGRhdGUubW9udGg7XG4gICAgICAgIHRoaXMuaGVscGVyLnZpZXdpbmcueWVhciA9IGRhdGUueWVhcjtcblxuICAgICAgICB0aGlzLnllYXJWaWV3ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fYXBwLiRzZXQoeyB5ZWFyVmlldzogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMuX2FwcC4kc2V0KHsgZGF5VmlldzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy50cmlnZ2VySGVscGVyRXZlbnQoXCJkYXktdXBkYXRlXCIsIGZhbHNlKTtcbiAgICB9XG4gICAgb3BlbkRhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5oZWxwZXIpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGVuZGFyKSByZXR1cm47XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENoYW5nZURhdGVNb2RhbCh0aGlzLnBsdWdpbiwgdGhpcy5jYWxlbmRhcik7XG4gICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1vZGFsLmNvbmZpcm1lZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG1vZGFsLnNldEN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnQgPSB7IC4uLm1vZGFsLmRhdGUgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRDYWxlbmRhcih0aGlzLmNhbGVuZGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWxwZXIuZGlzcGxheWVkID0geyAuLi5tb2RhbC5kYXRlIH07XG4gICAgICAgICAgICAgICAgdGhpcy5oZWxwZXIudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwLiRzZXQoeyBjYWxlbmRhcjogdGhpcy5oZWxwZXIgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICB9XG4gICAgdG9nZ2xlTW9vbnMoKSB7XG4gICAgICAgIHRoaXMubW9vbnMgPSAhdGhpcy5tb29ucztcbiAgICAgICAgdGhpcy5fYXBwLiRzZXQoeyBtb29uczogdGhpcy5tb29ucyB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBvbkNsb3NlKCkge31cbiAgICBvblJlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VySGVscGVyRXZlbnQoXCJ2aWV3LXJlc2l6ZWRcIiwgZmFsc2UpO1xuICAgIH1cbiAgICBnZXRWaWV3VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRTtcbiAgICB9XG4gICAgZ2V0RGlzcGxheVRleHQoKSB7XG4gICAgICAgIHJldHVybiBcIkZhbnRhc3kgQ2FsZW5kYXJcIjtcbiAgICB9XG4gICAgZ2V0SWNvbigpIHtcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRTtcbiAgICB9XG4gICAgdHJpZ2dlckhlbHBlckV2ZW50KGV2ZW50OiBzdHJpbmcsIGZ1bGw6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oZWxwZXIpIHJldHVybjtcbiAgICAgICAgdGhpcy5oZWxwZXIudHJpZ2dlcihldmVudCk7XG5cbiAgICAgICAgaWYgKGZ1bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UudHJpZ2dlcihcImZhbnRhc3ktY2FsZW5kYXJzLXVwZGF0ZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBvbnVubG9hZCgpIHt9XG59XG5cbi8qIGV4cG9ydCBjbGFzcyBGdWxsQ2FsZW5kYXJWaWV3IGV4dGVuZHMgRmFudGFzeUNhbGVuZGFyVmlldyB7XG4gICAgZnVsbCA9IHRydWU7XG59XG4gKi9cbmNsYXNzIFN3aXRjaE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbmZpcm1lZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwbHVnaW46IEZhbnRhc3lDYWxlbmRhciwgcHVibGljIGNhbGVuZGFyOiBDYWxlbmRhcikge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICB9XG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiU3dpdGNoIENhbGVuZGFyc1wiIH0pO1xuICAgICAgICBjb25zdCBkcm9wZG93bkVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJmYW50YXN5LWNhbGVuZGFyLWRyb3Bkb3duXCJcbiAgICAgICAgKTtcbiAgICAgICAgZHJvcGRvd25FbC5jcmVhdGVFbChcImxhYmVsXCIsIHtcbiAgICAgICAgICAgIHRleHQ6IFwiQ2hvb3NlIGEgQ2FsZW5kYXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBuZXcgRHJvcGRvd25Db21wb25lbnQoZHJvcGRvd25FbCkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIgPSB0aGlzLnBsdWdpbi5kYXRhLmNhbGVuZGFycy5maW5kKChjKSA9PiBjLmlkID09IHYpO1xuICAgICAgICB9KTtcbiAgICAgICAgZHJvcGRvd25cbiAgICAgICAgICAgIC5hZGRPcHRpb25zKFxuICAgICAgICAgICAgICAgIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5jYWxlbmRhcnMubWFwKChjKSA9PiBbYy5pZCwgYy5uYW1lXSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5jYWxlbmRhciA/IHRoaXMuY2FsZW5kYXIuaWQgOiBudWxsKTtcbiAgICAgICAgY29uc3QgYnV0dG9uRWwgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoXG4gICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItY29uZmlybS1idXR0b25zXCJcbiAgICAgICAgKTtcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChidXR0b25FbClcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiU3dpdGNoXCIpXG4gICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uRWwpLnNldEJ1dHRvblRleHQoXCJDYW5jZWxcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIH1cbn1cblxuY2xhc3MgQ2hhbmdlRGF0ZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbmZpcm1lZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGRhdGU6IEN1cnJlbnRDYWxlbmRhckRhdGE7XG4gICAgZGF0ZUZpZWxkRWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHRlbXBDdXJyZW50RGF5czogbnVtYmVyO1xuICAgIHNldEN1cnJlbnQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwbHVnaW46IEZhbnRhc3lDYWxlbmRhciwgcHVibGljIGNhbGVuZGFyOiBDYWxlbmRhcikge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICAgICAgdGhpcy5kYXRlID0geyAuLi50aGlzLmNhbGVuZGFyLmN1cnJlbnQgfTtcbiAgICAgICAgdGhpcy50ZW1wQ3VycmVudERheXMgPSB0aGlzLmRhdGUuZGF5O1xuICAgIH1cbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogXCJWaWV3IERheVwiIH0pO1xuICAgICAgICB0aGlzLmRhdGVGaWVsZEVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJmYW50YXN5LWNhbGVuZGFyLWRhdGUtZmllbGRzXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5idWlsZERhdGVGaWVsZHMoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiU2V0IGFzIEN1cnJlbnQgRGF0ZVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJBbHNvIHNldCB0aGlzIGRhdGUgdG8gdG9kYXkncyBkYXRlLlwiKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT5cbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMuc2V0Q3VycmVudCkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50ID0gdjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhci1jb25maXJtLWJ1dHRvbnNcIlxuICAgICAgICApO1xuXG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uRWwpXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIlN3aXRjaFwiKVxuICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maXJtZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZS5kYXkgPSB0aGlzLnRlbXBDdXJyZW50RGF5cztcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChidXR0b25FbCkuc2V0QnV0dG9uVGV4dChcIkNhbmNlbFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkRGF0ZUZpZWxkcygpIHtcbiAgICAgICAgdGhpcy5kYXRlRmllbGRFbC5lbXB0eSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnRlbXBDdXJyZW50RGF5cyAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuZGF0ZS5tb250aCAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMudGVtcEN1cnJlbnREYXlzID5cbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnN0YXRpYy5tb250aHNbdGhpcy5kYXRlLm1vbnRoXT8ubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50ZW1wQ3VycmVudERheXMgPVxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRoc1t0aGlzLmRhdGUubW9udGhdPy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF5RWwgPSB0aGlzLmRhdGVGaWVsZEVsLmNyZWF0ZURpdihcImZhbnRhc3ktY2FsZW5kYXItZGF0ZS1maWVsZFwiKTtcbiAgICAgICAgZGF5RWwuY3JlYXRlRWwoXCJsYWJlbFwiLCB7IHRleHQ6IFwiRGF5XCIgfSk7XG4gICAgICAgIGNvbnN0IGRheSA9IG5ldyBUZXh0Q29tcG9uZW50KGRheUVsKVxuICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRGF5XCIpXG4gICAgICAgICAgICAuc2V0VmFsdWUoYCR7dGhpcy50ZW1wQ3VycmVudERheXN9YClcbiAgICAgICAgICAgIC5zZXREaXNhYmxlZCh0aGlzLmRhdGUubW9udGggPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBOdW1iZXIodikgPCAxIHx8XG4gICAgICAgICAgICAgICAgICAgIChOdW1iZXIodikgPlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzW3RoaXMuZGF0ZS5tb250aF0/Lmxlbmd0aCA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgSW5maW5pdHkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBgVGhlIGN1cnJlbnQgZGF5IG11c3QgYmUgYmV0d2VlbiAxIGFuZCAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLm1vbnRoc1t0aGlzLmRhdGUubW9udGhdLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wQ3VycmVudERheXMgPSB0aGlzLmRhdGUuZGF5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRGF0ZUZpZWxkcygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudGVtcEN1cnJlbnREYXlzID0gTnVtYmVyKHYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGRheS5pbnB1dEVsLnNldEF0dHIoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuXG4gICAgICAgIGNvbnN0IG1vbnRoRWwgPSB0aGlzLmRhdGVGaWVsZEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhci1kYXRlLWZpZWxkXCJcbiAgICAgICAgKTtcbiAgICAgICAgbW9udGhFbC5jcmVhdGVFbChcImxhYmVsXCIsIHsgdGV4dDogXCJNb250aFwiIH0pO1xuICAgICAgICBuZXcgRHJvcGRvd25Db21wb25lbnQobW9udGhFbClcbiAgICAgICAgICAgIC5hZGRPcHRpb25zKFxuICAgICAgICAgICAgICAgIE9iamVjdC5mcm9tRW50cmllcyhbXG4gICAgICAgICAgICAgICAgICAgIFtcInNlbGVjdFwiLCBcIlNlbGVjdCBNb250aFwiXSxcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzLm1hcCgobW9udGgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aC5uYW1lXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zZXRWYWx1ZShcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUubW9udGggIT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzW3RoaXMuZGF0ZS5tb250aF0ubmFtZVxuICAgICAgICAgICAgICAgICAgICA6IFwic2VsZWN0XCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2ID09PSBcInNlbGVjdFwiKSB0aGlzLmRhdGUubW9udGggPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgIChtKSA9PiBtLm5hbWUgPT0gdlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlLm1vbnRoID0gdGhpcy5jYWxlbmRhci5zdGF0aWMubW9udGhzLmluZGV4T2YoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGREYXRlRmllbGRzKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB5ZWFyRWwgPSB0aGlzLmRhdGVGaWVsZEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhci1kYXRlLWZpZWxkXCJcbiAgICAgICAgKTtcbiAgICAgICAgeWVhckVsLmNyZWF0ZUVsKFwibGFiZWxcIiwgeyB0ZXh0OiBcIlllYXJcIiB9KTtcbiAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXIuc3RhdGljLnVzZUN1c3RvbVllYXJzKSB7XG4gICAgICAgICAgICBjb25zdCB5ZWFyRHJvcCA9IG5ldyBEcm9wZG93bkNvbXBvbmVudCh5ZWFyRWwpO1xuICAgICAgICAgICAgKHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzID8/IFtdKS5mb3JFYWNoKCh5ZWFyKSA9PiB7XG4gICAgICAgICAgICAgICAgeWVhckRyb3AuYWRkT3B0aW9uKHllYXIuaWQsIHllYXIubmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGUueWVhciA+IHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUueWVhciA9IHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5jYWxlbmRhci5zdGF0aWMueWVhcnMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHllYXJEcm9wXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzPy5bdGhpcy5kYXRlLnllYXIgLSAxXT8uaWQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZS55ZWFyID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuc3RhdGljLnllYXJzLmZpbmRJbmRleCgoeSkgPT4geS5pZCA9PSB2KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeWVhciA9IG5ldyBUZXh0Q29tcG9uZW50KHllYXJFbClcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJZZWFyXCIpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKGAke3RoaXMuZGF0ZS55ZWFyfWApXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZS55ZWFyID0gTnVtYmVyKHYpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgeWVhci5pbnB1dEVsLnNldEF0dHIoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuXG5jbGFzcyBWaWV3RXZlbnRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZXZlbnQ6IEV2ZW50LCBwdWJsaWMgcGx1Z2luOiBGYW50YXN5Q2FsZW5kYXIpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJmYW50YXN5LWNhbGVuZGFyLXZpZXctZXZlbnRcIik7XG4gICAgfVxuICAgIGFzeW5jIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiB0aGlzLmV2ZW50Lm5hbWUgfSk7XG5cbiAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihcbiAgICAgICAgICAgIHRoaXMuZXZlbnQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbCxcbiAgICAgICAgICAgIHRoaXMuZXZlbnQubm90ZSxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICB9XG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgRXZlbnRzLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIEZhbnRhc3lDYWxlbmRhciBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB7IE1PT05fUEhBU0VTLCBQaGFzZSB9IGZyb20gXCJzcmMvdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkYXRlU3RyaW5nLCB3cmFwIH0gZnJvbSBcInNyYy91dGlscy9mdW5jdGlvbnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgICBDYWxlbmRhcixcbiAgICBDdXJyZW50Q2FsZW5kYXJEYXRhLFxuICAgIE1vbnRoLFxuICAgIEV2ZW50LFxuICAgIExlYXBEYXksXG4gICAgTW9vblxufSBmcm9tIFwiLi4vQHR5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBNb250aEhlbHBlciB7XG4gICAgZGF5czogRGF5SGVscGVyW10gPSBbXTtcbiAgICBkYXlzQmVmb3JlOiBudW1iZXI7XG4gICAgbGVhcERheXM6IExlYXBEYXlbXSA9IFtdO1xuICAgIHNob3VsZFVwZGF0ZUV2ZW50czogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmlkO1xuICAgIH1cbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLmRhdGEubW9udGhzLmluZGV4T2YodGhpcy5kYXRhKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubmFtZTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0IGZpcnN0V2Vla2RheSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGVuZGFyLmRhdGEub3ZlcmZsb3cpIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXlzWzBdLndlZWtkYXk7XG4gICAgfVxuICAgIGdldCBsYXN0V2Vla2RheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5c1t0aGlzLmRheXMubGVuZ3RoIC0gMV0ud2Vla2RheTtcbiAgICB9XG5cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50eXBlO1xuICAgIH1cbiAgICBldmVudHM6IEV2ZW50W107XG4gICAgZ2V0RXZlbnRzT25EYXkoZGF5OiBDdXJyZW50Q2FsZW5kYXJEYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5ldmVudHMgfHwgIXRoaXMuZXZlbnRzLmxlbmd0aCB8fCB0aGlzLnNob3VsZFVwZGF0ZUV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmNhbGVuZGFyLmV2ZW50c0Zvck1vbnRoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0ZS5kYXkgPT0gZGF5LmRheSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmVuZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB7IC4uLmV2ZW50LmRhdGUgfTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHsgLi4uZXZlbnQuZW5kIH07XG5cbiAgICAgICAgICAgIGlmICghc3RhcnQueWVhcikgc3RhcnQueWVhciA9IGVuZC55ZWFyID0gdGhpcy55ZWFyO1xuICAgICAgICAgICAgaWYgKCFzdGFydC5tb250aCkgc3RhcnQubW9udGggPSBlbmQubW9udGggPSB0aGlzLm51bWJlcjtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBOdW1iZXIodGhpcy5jYWxlbmRhci5oYXNoKGRheSkpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIE51bWJlcih0aGlzLmNhbGVuZGFyLmhhc2goc3RhcnQpKSA8PSBoYXNoICYmXG4gICAgICAgICAgICAgICAgaGFzaCA8PSBOdW1iZXIodGhpcy5jYWxlbmRhci5oYXNoKGVuZCkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaG91bGRVcGRhdGVNb29ucyA9IGZhbHNlO1xuICAgIG1vb25zOiBBcnJheTxbTW9vbiwgUGhhc2VdPltdO1xuICAgIGdldE1vb25zRm9yRGF5KGRheTogQ3VycmVudENhbGVuZGFyRGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMubW9vbnMgfHwgIXRoaXMubW9vbnMubGVuZ3RoIHx8IHRoaXMuc2hvdWxkVXBkYXRlTW9vbnMpIHtcbiAgICAgICAgICAgIHRoaXMubW9vbnMgPSB0aGlzLmNhbGVuZGFyLmdldE1vb25zRm9yTW9udGgodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubW9vbnNbZGF5LmRheSAtIDFdO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGRhdGE6IE1vbnRoLFxuICAgICAgICBwdWJsaWMgbnVtYmVyOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyB5ZWFyOiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyBjYWxlbmRhcjogQ2FsZW5kYXJIZWxwZXJcbiAgICApIHtcbiAgICAgICAgdGhpcy5sZWFwRGF5cyA9IHRoaXMuY2FsZW5kYXIubGVhcERheXNGb3JNb250aCh0aGlzLm51bWJlciwgeWVhcik7XG4gICAgICAgIHRoaXMuZGF5c0JlZm9yZSA9IHRoaXMuY2FsZW5kYXIuZGF5c0JlZm9yZU1vbnRoKHRoaXMubnVtYmVyLCB0aGlzLnllYXIpO1xuXG4gICAgICAgIHRoaXMuZGF5cyA9IFtcbiAgICAgICAgICAgIC4uLm5ldyBBcnJheShkYXRhLmxlbmd0aCArIHRoaXMubGVhcERheXMubGVuZ3RoKS5rZXlzKClcbiAgICAgICAgXS5tYXAoKGspID0+IG5ldyBEYXlIZWxwZXIodGhpcywgayArIDEpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXlIZWxwZXIge1xuICAgIHByaXZhdGUgX2V2ZW50czogRXZlbnRbXTtcbiAgICBnZXQgY2FsZW5kYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoLmNhbGVuZGFyO1xuICAgIH1cbiAgICBnZXQgZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRheTogdGhpcy5udW1iZXIsXG4gICAgICAgICAgICBtb250aDogdGhpcy5tb250aC5udW1iZXIsXG4gICAgICAgICAgICB5ZWFyOiB0aGlzLnllYXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IGV2ZW50cygpOiBFdmVudFtdIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMuX2V2ZW50cyB8fFxuICAgICAgICAgICAgIXRoaXMuX2V2ZW50cy5sZW5ndGggfHxcbiAgICAgICAgICAgIHRoaXMubW9udGguc2hvdWxkVXBkYXRlRXZlbnRzXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gdGhpcy5tb250aC5nZXRFdmVudHNPbkRheSh0aGlzLmRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHM7XG4gICAgfVxuICAgIGdldCBsb25nRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRheTogdGhpcy5udW1iZXIsXG4gICAgICAgICAgICBtb250aDogdGhpcy5tb250aC5uYW1lLFxuICAgICAgICAgICAgeWVhcjogdGhpcy55ZWFyXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKiBEYXlzIGJlZm9yZSB0aGlzIGRheSBpbiB0aGUgeWVhci4gKi9cbiAgICBnZXQgZGF5c0JlZm9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGguZGF5c0JlZm9yZSArIHRoaXMubnVtYmVyIC0gMTtcbiAgICB9XG4gICAgZ2V0IHllYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoLnllYXI7XG4gICAgfVxuICAgIGdldCB3ZWVrZGF5KCkge1xuICAgICAgICBjb25zdCBmaXJzdE9mWWVhciA9IHRoaXMuY2FsZW5kYXIuZmlyc3REYXlPZlllYXIodGhpcy55ZWFyKTtcblxuICAgICAgICByZXR1cm4gd3JhcChcbiAgICAgICAgICAgICh0aGlzLmRheXNCZWZvcmUgJSB0aGlzLmNhbGVuZGFyLndlZWtkYXlzLmxlbmd0aCkgKyBmaXJzdE9mWWVhcixcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIud2Vla2RheXMubGVuZ3RoXG4gICAgICAgICk7XG4gICAgfVxuICAgIGdldCBpc0N1cnJlbnREYXkoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLm51bWJlciA9PSB0aGlzLmNhbGVuZGFyLmN1cnJlbnQuZGF5ICYmXG4gICAgICAgICAgICB0aGlzLm1vbnRoLm51bWJlciA9PSB0aGlzLmNhbGVuZGFyLmN1cnJlbnQubW9udGggJiZcbiAgICAgICAgICAgIHRoaXMubW9udGgueWVhciA9PSB0aGlzLmNhbGVuZGFyLmN1cnJlbnQueWVhclxuICAgICAgICApO1xuICAgIH1cbiAgICBnZXQgaXNEaXNwbGF5aW5nKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5udW1iZXIgPT0gdGhpcy5jYWxlbmRhci52aWV3aW5nLmRheSAmJlxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kaXNwbGF5ZWQueWVhciA9PSB0aGlzLmNhbGVuZGFyLnZpZXdpbmcueWVhciAmJlxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kaXNwbGF5ZWQubW9udGggPT0gdGhpcy5jYWxlbmRhci52aWV3aW5nLm1vbnRoXG4gICAgICAgICk7XG4gICAgfVxuICAgIHByaXZhdGUgX21vb25zOiBBcnJheTxbTW9vbiwgUGhhc2VdPjtcbiAgICBnZXQgbW9vbnMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbW9vbnMgfHwgIXRoaXMuX21vb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fbW9vbnMgPSB0aGlzLm1vbnRoLmdldE1vb25zRm9yRGF5KHRoaXMuZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vb25zO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBtb250aDogTW9udGhIZWxwZXIsIHB1YmxpYyBudW1iZXI6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FsZW5kYXJIZWxwZXIgZXh0ZW5kcyBFdmVudHMge1xuICAgIC8qKlxuICAgICAqIEdldCBhIGRheSBoZWxwZXIgZnJvbSBjYWNoZSBmb3IgYSBnaXZlbiBkYXRlIGNhbGVuZGFyLlxuICAgICAqL1xuICAgIGdldERheUZvckRhdGUoZGF0ZTogQ3VycmVudENhbGVuZGFyRGF0YSk6IERheUhlbHBlciB7XG4gICAgICAgIGNvbnN0IG1vbnRoID0gdGhpcy5nZXRNb250aChkYXRlLm1vbnRoLCBkYXRlLnllYXIpO1xuICAgICAgICBjb25zdCBkYXkgPSBtb250aC5kYXlzW2RhdGUuZGF5IC0gMV07XG4gICAgICAgIHJldHVybiBkYXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgdGhlIGV2ZW50cyB0aGF0IG9jY3VyIGluIGEgZ2l2ZW4gbW9udGguXG4gICAgICovXG4gICAgZXZlbnRzRm9yTW9udGgoaGVscGVyOiBNb250aEhlbHBlcik6IEV2ZW50W10ge1xuICAgICAgICAvL2dldCBmcm9tIGNhY2hlIGZpcnN0XG5cbiAgICAgICAgLy9lbHNlXG4gICAgICAgIGNvbnN0IHsgeWVhciwgbnVtYmVyOiBtb250aCB9ID0gaGVscGVyO1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLmNhbGVuZGFyLmV2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0geyAuLi5ldmVudC5kYXRlIH07XG4gICAgICAgICAgICBjb25zdCBlbmQgPSB7IC4uLmV2ZW50LmVuZCB9O1xuICAgICAgICAgICAgLy9Oby1tb250aCBldmVudHMgYXJlIG9uIGV2ZXJ5IG1vbnRoLlxuICAgICAgICAgICAgaWYgKGRhdGUubW9udGggPT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIC8vWWVhciBhbmQgTW9udGggbWF0Y2hcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZGF0ZS55ZWFyID09IHllYXIgfHwgZGF0ZS55ZWFyID09IHVuZGVmaW5lZCkgJiZcbiAgICAgICAgICAgICAgICBkYXRlLm1vbnRoID09IG1vbnRoXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAvL0V2ZW50IGlzIGFmdGVyIHRoZSBtb250aFxuICAgICAgICAgICAgaWYgKGRhdGUueWVhciA+IHllYXIgfHwgKGRhdGUueWVhciA9PSB5ZWFyICYmIGRhdGUubW9udGggPiBtb250aCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy9ObyBlbmQgZGF0ZSBhbmQgZXZlbnQgaXMgYmVmb3JlIHRoZSBtb250aFxuICAgICAgICAgICAgaWYgKCFlbmQgJiYgKGRhdGUubW9udGggIT0gbW9udGggfHwgZGF0ZS55ZWFyIDwgeWVhcikpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGRhdGUueWVhciA9PSB1bmRlZmluZWQpIGVuZC55ZWFyID0gZGF0ZS55ZWFyID0geWVhcjtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZGF0ZS55ZWFyIDw9IHllYXIgfHwgZGF0ZS5tb250aCA8PSBtb250aCkgJiZcbiAgICAgICAgICAgICAgICBlbmQueWVhciA+PSB5ZWFyICYmXG4gICAgICAgICAgICAgICAgZW5kLm1vbnRoID49IG1vbnRoXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkaXNwbGF5IG5hbWUgZm9yIGEgeWVhci4gVXNlZCBtYWlubHkgZm9yIGN1c3RvbSB5ZWFycy5cbiAgICAgKi9cbiAgICBnZXROYW1lRm9yWWVhcih5ZWFyOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS51c2VDdXN0b21ZZWFycykgcmV0dXJuIGAke3llYXJ9YDtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5kYXRhLnVzZUN1c3RvbVllYXJzICYmXG4gICAgICAgICAgICB5ZWFyIC0gMSA+PSAwICYmXG4gICAgICAgICAgICB5ZWFyIDw9IHRoaXMuZGF0YS55ZWFycz8ubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS55ZWFyc1t5ZWFyIC0gMV0ubmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBkYXlzIHBvc3NpYmxlIGluIGEgeWVhci5cbiAgICAgKi9cbiAgICBtYXhEYXlzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBhbGlhcy5cbiAgICAgKi9cbiAgICBnZXQgZGlzcGxheVdlZWtzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5kaXNwbGF5V2Vla3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ2FsZW5kYXJIZWxwZXIuXG4gICAgICogQHBhcmFtIHtDYWxlbmRhcn0gY2FsZW5kYXJcbiAgICAgKiBAcGFyYW0ge0ZhbnRhc3lDYWxlbmRhcn0gcGx1Z2luXG4gICAgICogQG1lbWJlcm9mIENhbGVuZGFySGVscGVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljIGNhbGVuZGFyOiBDYWxlbmRhciwgcHVibGljIHBsdWdpbjogRmFudGFzeUNhbGVuZGFyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkID0geyAuLi50aGlzLmN1cnJlbnQgfTtcbiAgICAgICAgdGhpcy51cGRhdGUodGhpcy5jYWxlbmRhcik7XG5cbiAgICAgICAgLy9UT0RPOiBUZWxsIGV4aXN0aW5nIG1vbnRocyAvIGRheXMgdG8gdXBkYXRlLlxuICAgICAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbihcbiAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXJzLWV2ZW50LXVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICh0cmVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJlZS5oYXModGhpcy5jYWxlbmRhci5pZCkpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ZWFycyA9IHRyZWUuZ2V0KHRoaXMuY2FsZW5kYXIuaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3llYXIsIG1vbnRoc10gb2YgeWVhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2FjaGUuaGFzKHllYXIpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbW9udGggb2YgbW9udGhzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5nZXQoeWVhcikuaGFzKG1vbnRoKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldCh5ZWFyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KG1vbnRoKS5zaG91bGRVcGRhdGVFdmVudHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHllYXIgPT0gdGhpcy5kaXNwbGF5ZWQueWVhciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPT0gdGhpcy5kaXNwbGF5ZWQubW9udGgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh5ZWFyID09IHRoaXMudmlld2luZy55ZWFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9PSB0aGlzLnZpZXdpbmcubW9udGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcIm1vbnRoLXVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgLyogd2luZG93LmNhbGVuZGFyID0gdGhpczsgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSB1c2VkIHRvIHN0b3JlIGJ1aWx0IG1vbnRoIGhlbHBlcnMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY2FjaGU6IE1hcDxudW1iZXIsIE1hcDxudW1iZXIsIE1vbnRoSGVscGVyPj4gPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgbW9udGggaGVscGVycyBmb3IgYW4gZW50aXJlIHllYXIuXG4gICAgICovXG4gICAgZ2V0TW9udGhzRm9yWWVhcih5ZWFyOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXMoeWVhcikpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLnNldChcbiAgICAgICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgICAgIG5ldyBNYXAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5tb250aHMubWFwKChtLCBpKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1vbnRoSGVscGVyKG0sIGksIHllYXIsIHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9jYWNoZS5nZXQoeWVhcikudmFsdWVzKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBoYXNoIG9mIGEgZ2l2ZW4gZGF0ZS5cbiAgICAgKlxuICAgICAqIEhhc2ggdGFrZXMgdGhlIGZvcm0gb2YgYFlZWVlNTUREYCwgd2l0aCBtb250aHMgYW5kIGRheXMgcGFkZGVkIHRvIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGhhc2goZGF0ZTogQ3VycmVudENhbGVuZGFyRGF0YSkge1xuICAgICAgICBpZiAoZGF0ZS55ZWFyID09IG51bGwgfHwgZGF0ZS5tb250aCA9PSBudWxsIHx8IGRhdGUuZGF5ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgbW9udGhzID0gYCR7dGhpcy5kYXRhLm1vbnRocy5sZW5ndGh9YC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG1vbnRoID0gYCR7ZGF0ZS5tb250aH1gLnBhZFN0YXJ0KG1vbnRocywgXCIwXCIpO1xuICAgICAgICBjb25zdCBkYXlzID0gYCR7dGhpcy5tYXhEYXlzfWAubGVuZ3RoO1xuICAgICAgICBjb25zdCBkYXkgPSBgJHtkYXRlLmRheX1gLnBhZFN0YXJ0KGRheXMsIFwiMFwiKTtcbiAgICAgICAgcmV0dXJuIGAke2RhdGUueWVhcn0ke21vbnRofSR7ZGF5fWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBjYWxlbmRhciBvYmplY3QgdG8gYSBuZXcgY2FsZW5kYXIuXG4gICAgICovXG4gICAgdXBkYXRlKGNhbGVuZGFyPzogQ2FsZW5kYXIpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IGNhbGVuZGFyID8/IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIHRoaXMubWF4RGF5cyA9IE1hdGgubWF4KC4uLnRoaXMuZGF0YS5tb250aHMubWFwKChtKSA9PiBtLmxlbmd0aCkpO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcihcIm1vbnRoLXVwZGF0ZVwiKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwiZGF5LXVwZGF0ZVwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNhbGVuZGFyIGNhdGVnb3JpZXMuXG4gICAgICovXG4gICAgZ2V0IGNhdGVnb3JpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLmNhdGVnb3JpZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjYWxlbmRhciBzdGF0aWMgZGF0YS5cbiAgICAgKi9cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuc3RhdGljO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2FsZW5kYXIgY3VycmVudCBkYXRlLlxuICAgICAqL1xuICAgIGdldCBjdXJyZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5jdXJyZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2FsZW5kYXIgbGVhcCBkYXlzIGRhdGEuXG4gICAgICovXG4gICAgZ2V0IGxlYXBkYXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlYXBEYXlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdHJhY2sgY3VycmVudGx5IGRpc3BsYXllZCBkYXRlIG9uIHRoZSBjYWxlbmRhci5cbiAgICAgKiBQcm9iYWJseSBqdXN0IG5lZWQgdG8gdHJhY2sgbW9udGggYW5kIHllYXIuLi4gb3IgYSBNb250aEhlbHBlci5cbiAgICAgKi9cbiAgICBkaXNwbGF5ZWQ6IEN1cnJlbnRDYWxlbmRhckRhdGEgPSB7XG4gICAgICAgIHllYXI6IG51bGwsXG4gICAgICAgIG1vbnRoOiBudWxsLFxuICAgICAgICBkYXk6IG51bGxcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdHJhY2sgY3VycmVudCB2aWV3ZWQgZGF0ZSAoZGF5IHZpZXcpIG9uIHRoZSBjYWxlbmRhci5cbiAgICAgKiBQcm9iYWJseSBqdXN0IG5lZWQgdG8gdHJhY2sgYSBEYXlIZWxwZXIuXG4gICAgICovXG4gICAgdmlld2luZzogQ3VycmVudENhbGVuZGFyRGF0YSA9IHtcbiAgICAgICAgeWVhcjogbnVsbCxcbiAgICAgICAgbW9udGg6IG51bGwsXG4gICAgICAgIGRheTogbnVsbFxuICAgIH07XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBzdHJpbmcgZm9yIGN1cnJlbnQgZGF0ZS5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudERhdGUoKSB7XG4gICAgICAgIHJldHVybiBkYXRlU3RyaW5nKHRoaXMuY3VycmVudCwgdGhpcy5kYXRhLm1vbnRocyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBzdHJpbmcgZm9yIGRpc3BsYXllZCBkYXRlLlxuICAgICAqL1xuICAgIGdldCBkaXNwbGF5ZWREYXRlKCkge1xuICAgICAgICByZXR1cm4gZGF0ZVN0cmluZyh0aGlzLmRpc3BsYXllZCwgdGhpcy5kYXRhLm1vbnRocyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgc3RyaW5nIGZvciB2aWV3ZWQgZGF0ZS5cbiAgICAgKi9cbiAgICBnZXQgdmlld2VkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGRhdGVTdHJpbmcodGhpcy52aWV3aW5nLCB0aGlzLmRhdGEubW9udGhzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCBhIGNhbGVuZGFyIHRvIGRpc3BsYXkgY3VycmVudCBkYXRlLlxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmRpc3BsYXllZCA9IHsgLi4udGhpcy5jdXJyZW50IH07XG4gICAgICAgIHRoaXMudmlld2luZyA9IHsgLi4udGhpcy5jdXJyZW50IH07XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKFwibW9udGgtdXBkYXRlXCIpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJkYXktdXBkYXRlXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBkaXNwbGF5ZWQgbW9udGguXG4gICAgICovXG4gICAgc2V0Q3VycmVudE1vbnRoKG46IG51bWJlcikge1xuICAgICAgICB0aGlzLmRpc3BsYXllZC5tb250aCA9IG47XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKFwibW9udGgtdXBkYXRlXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgdmlld2VkIGRheSBhbmQgb3ZlcmZsb3cgbW9udGhzIGFuZCB5ZWFycyBhcyBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgZ29Ub05leHREYXkoKSB7XG4gICAgICAgIHRoaXMudmlld2luZy5kYXkgKz0gMTtcbiAgICAgICAgY29uc3QgY3VycmVudE1vbnRoID0gdGhpcy5nZXRNb250aChcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkLm1vbnRoLFxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQueWVhclxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy52aWV3aW5nLmRheSA+IGN1cnJlbnRNb250aC5kYXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5nb1RvTmV4dCgpO1xuICAgICAgICAgICAgdGhpcy52aWV3aW5nLm1vbnRoID0gdGhpcy5kaXNwbGF5ZWQubW9udGg7XG4gICAgICAgICAgICB0aGlzLnZpZXdpbmcueWVhciA9IHRoaXMuZGlzcGxheWVkLnllYXI7XG4gICAgICAgICAgICB0aGlzLnZpZXdpbmcuZGF5ID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXIoXCJkYXktdXBkYXRlXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgY3VycmVudCBkYXkgYW5kIG92ZXJmbG93IG1vbnRocyBhbmQgeWVhcnMgYXMgbmVjZXNzYXJ5LlxuICAgICAqL1xuICAgIGdvVG9OZXh0Q3VycmVudERheSgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50LmRheSArPSAxO1xuICAgICAgICBjb25zdCBjdXJyZW50TW9udGggPSB0aGlzLmdldE1vbnRoKFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Lm1vbnRoLFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50LnllYXJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5kYXkgPj0gY3VycmVudE1vbnRoLmRheXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuZGF5ID0gMTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5tb250aCArPSAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudC5tb250aCA+PSB0aGlzLmRhdGEubW9udGhzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5tb250aCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnllYXIgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXIoXCJkYXktdXBkYXRlXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGluZGV4IG9mIHRoZSBuZXh0IG1vbnRoIHRvIGJlIGRpc3BsYXllZCwgd3JhcHBpbmcgYXMgbmVjZXNzYXJ5LlxuICAgICAqL1xuICAgIGdldCBuZXh0TW9udGhJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGhpcy5kaXNwbGF5ZWQubW9udGggKyAxLCB0aGlzLmRhdGEubW9udGhzLmxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgTW9udGhIZWxwZXIgb2YgdGhlIG5leHQgbW9udGggdG8gYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIGdldCBuZXh0TW9udGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1vbnRoKHRoaXMuZGlzcGxheWVkLm1vbnRoICsgMSwgdGhpcy5kaXNwbGF5ZWQueWVhcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjYWxlbmRhciBjYW4gaW5jcmVtZW50IHllYXIuIEFsd2F5cyByZXR1cm5zIHRydWUgdW5sZXNzIHRoZSBjYWxlbmRhciBoYXMgY3VzdG9tIHllYXJzIGRlZmluZWQuXG4gICAgICovXG4gICAgY2FuR29Ub05leHRZZWFyKHllYXIgPSB0aGlzLmRpc3BsYXllZC55ZWFyKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5kYXRhLnVzZUN1c3RvbVllYXJzIHx8IHllYXIgPCB0aGlzLmRhdGEueWVhcnMubGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHbyB0byB0aGUgbmV4dCBtb250aCBpbmRleC4gVXNlZCB0byBjaGFuZ2UgbW9udGhzIG9uIHRoZSBjYWxlbmRhci5cbiAgICAgKi9cbiAgICBnb1RvTmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMubmV4dE1vbnRoSW5kZXggPCB0aGlzLmRpc3BsYXllZC5tb250aCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNhbkdvVG9OZXh0WWVhcigpKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgXCJUaGlzIGlzIHRoZSBsYXN0IHllYXIuIEFkZGl0aW9uYWwgeWVhcnMgY2FuIGJlIGNyZWF0ZWQgaW4gc2V0dGluZ3MuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ29Ub05leHRZZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRDdXJyZW50TW9udGgodGhpcy5uZXh0TW9udGhJbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdvIHRvIHRoZSBuZXh0IHllYXIgaW5kZXguIFVzZWQgdG8gY2hhbmdlIHllYXJzIG9uIHRoZSBjYWxlbmRhci5cbiAgICAgKi9cbiAgICBnb1RvTmV4dFllYXIoKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkLnllYXIgKz0gMTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwieWVhci11cGRhdGVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaW5kZXggb2YgdGhlIHByZXZpb3VzIG1vbnRoIHRvIGJlIGRpc3BsYXllZCwgd3JhcHBpbmcgYXMgbmVjZXNzYXJ5LlxuICAgICAqL1xuICAgIGdldCBwcmV2TW9udGhJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGhpcy5kaXNwbGF5ZWQubW9udGggLSAxLCB0aGlzLmRhdGEubW9udGhzLmxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgTW9udGhIZWxwZXIgb2YgdGhlIHByZXZpb3VzIG1vbnRoIHRvIGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBnZXQgcHJldmlvdXNNb250aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TW9udGgodGhpcy5kaXNwbGF5ZWQubW9udGggLSAxLCB0aGlzLmRpc3BsYXllZC55ZWFyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR28gdG8gdGhlIHByZXZpb3VzIG1vbnRoIGluZGV4LiBVc2VkIHRvIGNoYW5nZSBtb250aHMgb24gdGhlIGNhbGVuZGFyLlxuICAgICAqL1xuICAgIGdvVG9QcmV2aW91cygpIHtcbiAgICAgICAgaWYgKHRoaXMucHJldk1vbnRoSW5kZXggPiB0aGlzLmRpc3BsYXllZC5tb250aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGxheWVkLnllYXIgPT0gMSkge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJUaGlzIGlzIHRoZSBlYXJsaWVzdCB5ZWFyLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdvVG9QcmV2aW91c1llYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEN1cnJlbnRNb250aCh0aGlzLnByZXZNb250aEluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR28gdG8gdGhlIHZpZXdlZCBwcmV2aW91cyBkYXkuIFVzZWQgdG8gY2hhbmdlIGRheXMgb24gdGhlIGRheSB2aWV3LlxuICAgICAqL1xuICAgIGdvVG9QcmV2aW91c0RheSgpIHtcbiAgICAgICAgdGhpcy52aWV3aW5nLmRheSAtPSAxO1xuICAgICAgICBpZiAodGhpcy52aWV3aW5nLmRheSA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZ29Ub1ByZXZpb3VzKCk7XG4gICAgICAgICAgICB0aGlzLnZpZXdpbmcubW9udGggPSB0aGlzLmRpc3BsYXllZC5tb250aDtcbiAgICAgICAgICAgIHRoaXMudmlld2luZy55ZWFyID0gdGhpcy5kaXNwbGF5ZWQueWVhcjtcbiAgICAgICAgICAgIHRoaXMudmlld2luZy5kYXkgPSB0aGlzLmN1cnJlbnRNb250aC5kYXlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXIoXCJkYXktdXBkYXRlXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHbyB0byB0aGUgcHJldmlvdXMgeWVhciBpbmRleC4gVXNlZCB0byBjaGFuZ2UgeWVhcnMgb24gdGhlIGNhbGVuZGFyLlxuICAgICAqL1xuICAgIGdvVG9QcmV2aW91c1llYXIoKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkLnllYXIgLT0gMTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwieWVhci11cGRhdGVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjYWxlbmRhciBkYXRhIHdlZWtkYXlzLlxuICAgICAqL1xuICAgIGdldCB3ZWVrZGF5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS53ZWVrZGF5cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBNb250aEhlbHBlciBmb3IgdGhlIGN1cnJlbnRseSBkaXNwbGF5ZWQgbW9udGguXG4gICAgICovXG4gICAgZ2V0IGN1cnJlbnRNb250aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TW9udGgodGhpcy5kaXNwbGF5ZWQubW9udGgsIHRoaXMuZGlzcGxheWVkLnllYXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYSBsZWFwIGRheSBvY2N1cnMgaW4gYSBnaXZlbiB5ZWFyLlxuICAgICAqL1xuICAgIHRlc3RMZWFwRGF5KGxlYXBkYXk6IExlYXBEYXksIHllYXI6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gbGVhcGRheS5pbnRlcnZhbFxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEuaW50ZXJ2YWwgLSBiLmludGVydmFsKVxuICAgICAgICAgICAgLnNvbWUoKHsgaW50ZXJ2YWwsIGV4Y2x1c2l2ZSB9LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVzaXZlICYmIGluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh5ZWFyIC0gbGVhcGRheS5vZmZzZXQgPz8gMCkgJSBpbnRlcnZhbCAhPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChleGNsdXNpdmUpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpbmRleCArIDFdICYmIGFycmF5W2luZGV4ICsgMV0uZXhjbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoeWVhciAtIGxlYXBkYXkub2Zmc2V0ID8/IDApICUgaW50ZXJ2YWwgPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHllYXIgLSBsZWFwZGF5Lm9mZnNldCA/PyAwKSAlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaW5kZXggKyAxXS5pbnRlcnZhbCAhPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICh5ZWFyIC0gbGVhcGRheS5vZmZzZXQgPz8gMCkgJSBpbnRlcnZhbCA9PSAwO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgbGVhcGRheXMgdGhhdCBvY2N1ciBpbiBhIGdpdmVuIHllYXIuXG4gICAgICovXG4gICAgbGVhcERheXNGb3JZZWFyKHllYXI6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWFwZGF5cy5maWx0ZXIoKGwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlc3RMZWFwRGF5KGwsIHllYXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBsZWFwZGF5cyB0aGF0IG9jY3VyIGluIGEgZ2l2ZW4gbW9udGggaW4gYSBzcGVjaWZpYyB5ZWFyLlxuICAgICAqL1xuICAgIGxlYXBEYXlzRm9yTW9udGgobW9udGg6IG51bWJlciwgeWVhciA9IHRoaXMuZGlzcGxheWVkLnllYXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVhcGRheXMuZmlsdGVyKChsKSA9PiB7XG4gICAgICAgICAgICBpZiAobC50aW1lc3BhbiAhPSBtb250aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGVzdExlYXBEYXkobCwgeWVhcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIE1vbnRoSGVscGVyIGZvciBhIG1vbnRoIG51bWJlciBpbiBhIHNwZWNpZmljIHllYXIsIHdyYXBwaW5nIHRoZSBtb250aCBudW1iZXIgYXMgbmVjZXNzYXJ5LlxuICAgICAqXG4gICAgICogV2lsbCBwcmlvcml0aXplIHB1bGxpbmcgYSBNb250aEhlbHBlciBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIFRPRE86IFdoYXQgaXMgdGhlIGludGVyY2FsYXJ5IGJlaGF2aW9yPyBOZWVkIHRvIGRvY3VtZW50IHRoaXMsIGJlY2F1c2UgSSBjYW4ndCByZW1lbWJlci5cbiAgICAgKi9cbiAgICBnZXRNb250aChudW1iZXI6IG51bWJlciwgeWVhcjogbnVtYmVyLCBkaXJlY3Rpb246IG51bWJlciA9IDApOiBNb250aEhlbHBlciB7XG4gICAgICAgIGNvbnN0IG1vbnRocyA9IHRoaXMuZGF0YS5tb250aHM7XG4gICAgICAgIGxldCBpbmRleCA9IHdyYXAobnVtYmVyLCBtb250aHMubGVuZ3RoKTtcblxuICAgICAgICBpZiAobnVtYmVyIDwgMCkgeWVhciAtPSAxO1xuICAgICAgICBpZiAoeWVhciA9PSAwKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBpZiAobnVtYmVyID49IG1vbnRocy5sZW5ndGgpIHllYXIgKz0gMTtcblxuICAgICAgICBpZiAodGhpcy5fY2FjaGUuaGFzKHllYXIpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUuZ2V0KHllYXIpIS5oYXMoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmdldCh5ZWFyKSEuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLnNldCh5ZWFyLCBuZXcgTWFwKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbnRoc1tpbmRleF0udHlwZSA9PSBcImludGVyY2FsYXJ5XCIgJiYgZGlyZWN0aW9uICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1vbnRoKG51bWJlciArIGRpcmVjdGlvbiwgeWVhciwgZGlyZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBNb250aEhlbHBlcihtb250aHNbaW5kZXhdLCBpbmRleCwgeWVhciwgdGhpcyk7XG4gICAgICAgIHRoaXMuX2NhY2hlLnNldCh5ZWFyLCB0aGlzLl9jYWNoZS5nZXQoeWVhcikuc2V0KGluZGV4LCBoZWxwZXIpKTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwYWRkZWQgZGF5cyBmb3IgYSBnaXZlbiBtb250aC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXNlZCB0byBkaXNwbGF5IHRoZSBcIm92ZXJmbG93ZWRcIiBkYXlzIGZyb20gdGhlIHByZXZpb3VzIGFuZCBuZXh0IG1vbnRoIG9uIHRoZSBjYWxlbmRhci5cbiAgICAgKlxuICAgICAqIFRoaXMgaGFzIHRoZSBzaWRlIGJlbmVmaXQgb2YgcHJlLWNhY2hpbmcgdGhlIHByZXZpb3VzIGFuZCBuZXh0IG1vbnRocywgc28gdGhleSBhcmUgYnVpbHQgd2hlbiBzd2l0Y2hlZCB0by5cbiAgICAgKi9cbiAgICBnZXRQYWRkZWREYXlzRm9yTW9udGgobW9udGg6IE1vbnRoSGVscGVyKSB7XG4gICAgICAgIGxldCBjdXJyZW50ID0gbW9udGguZGF5cztcblxuICAgICAgICAvKiogR2V0IERheXMgb2YgUHJldmlvdXMgTW9udGggKi9cbiAgICAgICAgbGV0IHByZXZpb3VzOiBEYXlIZWxwZXJbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHByZXZpb3VzTW9udGggPSB0aGlzLmdldE1vbnRoKFxuICAgICAgICAgICAgbW9udGguaW5kZXggLSAxLFxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQueWVhcixcbiAgICAgICAgICAgIC0xXG4gICAgICAgICk7XG4gICAgICAgIGlmIChtb250aC5maXJzdFdlZWtkYXkgPiAwICYmIG1vbnRoLnR5cGUgPT0gXCJtb250aFwiKSB7XG4gICAgICAgICAgICBwcmV2aW91cyA9XG4gICAgICAgICAgICAgICAgcHJldmlvdXNNb250aCAhPSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gcHJldmlvdXNNb250aC5kYXlzLnNsaWNlKC1tb250aC5maXJzdFdlZWtkYXkpXG4gICAgICAgICAgICAgICAgICAgIDogQXJyYXkobW9udGguZmlyc3RXZWVrZGF5KS5maWxsKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEdldCBEYXlzIG9mIE5leHQgTW9udGggKi9cbiAgICAgICAgbGV0IG5leHQ6IERheUhlbHBlcltdID0gW107XG4gICAgICAgIGNvbnN0IG5leHRNb250aCA9IHRoaXMuZ2V0TW9udGgoXG4gICAgICAgICAgICBtb250aC5pbmRleCArIDEsXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXllZC55ZWFyLFxuICAgICAgICAgICAgMVxuICAgICAgICApO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBtb250aC5sYXN0V2Vla2RheSA8IHRoaXMud2Vla2RheXMubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgbW9udGgudHlwZSA9PSBcIm1vbnRoXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dE1vbnRoLmRheXMuc2xpY2UoXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzLmxlbmd0aCAtIG1vbnRoLmxhc3RXZWVrZGF5IC0gMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcmV2aW91cyxcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICBuZXh0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIgb2Ygd2Vla3Mgb2YgdGhlIGN1cnJlbnQgbW9udGguIFVzZSB0byBidWlsZCBjYWxlbmRhciByb3dzLlxuICAgICAqL1xuICAgIGdldCB3ZWVrc1BlckN1cnJlbnRNb250aCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChcbiAgICAgICAgICAgIHRoaXMuZ2V0TW9udGgodGhpcy5kaXNwbGF5ZWQubW9udGgsIHRoaXMuZGlzcGxheWVkLnllYXIpLmxlbmd0aCAvXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLndlZWtkYXlzLmxlbmd0aFxuICAgICAgICApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiB3ZWVrcyBpbiBhIGdpdmVuIG1vbnRoLlxuICAgICAqL1xuICAgIHdlZWtzT2ZNb250aChtb250aDogTW9udGhIZWxwZXIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChcbiAgICAgICAgICAgIChtb250aC5sZW5ndGggKyBtb250aC5maXJzdFdlZWtkYXkpIC8gdGhpcy5kYXRhLndlZWtkYXlzLmxlbmd0aFxuICAgICAgICApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZpcnN0IHdlZWsgbnVtYmVyIG9mIGEgZ2l2ZW4gbW9udGguXG4gICAgICpcbiAgICAgKiBUT0RPOiBGaWd1cmUgb3V0IGhvdyB0byBhZGQgaW4gSVNPIHNwZWMgY29tcGxpYW5jZSBoZXJlLlxuICAgICAqL1xuICAgIHdlZWtOdW1iZXJzT2ZNb250aChtb250aDogTW9udGhIZWxwZXIpIHtcbiAgICAgICAgY29uc3QgZGF5c0JlZm9yZSA9IG1vbnRoLmRheXNCZWZvcmUgKyB0aGlzLmZpcnN0RGF5T2ZZZWFyKG1vbnRoLnllYXIpO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzQmVmb3JlIC8gdGhpcy5kYXRhLndlZWtkYXlzLmxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvdGFsIG51bWJlciBvZiBkYXlzIGluIGEgeWVhci4gRG9lcyBub3QgaW5jbHVkZSBsZWFwIGRheXMuXG4gICAgICovXG4gICAgZ2V0IGRheXNQZXJZZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLm1vbnRoc1xuICAgICAgICAgICAgLmZpbHRlcigobSkgPT4gbS50eXBlID09PSBcIm1vbnRoXCIpXG4gICAgICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYi5sZW5ndGgsIDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRvdGFsIG51bWJlciBvZiBkYXlzIGluIGEgeWVhciBiZWZvcmUgYSBnaXZlbiBtb250aC5cbiAgICAgKi9cbiAgICBkYXlzQmVmb3JlTW9udGgobW9udGg6IG51bWJlciwgeWVhcjogbnVtYmVyLCBhbGw6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAoIW1vbnRoIHx8IG1vbnRoID09IDApIHJldHVybiAwO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubW9udGhzXG4gICAgICAgICAgICAuc2xpY2UoMCwgbW9udGgpXG4gICAgICAgICAgICAuZmlsdGVyKChtKSA9PiAoYWxsID8gdHJ1ZSA6IG0udHlwZSA9PSBcIm1vbnRoXCIpKVxuICAgICAgICAgICAgLm1hcCgobSwgaSkgPT4gbS5sZW5ndGggKyB0aGlzLmxlYXBEYXlzRm9yTW9udGgoaSwgeWVhcikubGVuZ3RoKVxuICAgICAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGRldGVybWluZSBldmVudCBzb3J0aW5nLiBDYW4gcmVtb3ZlLlxuICAgICAqL1xuICAgIGFyZURhdGVzRXF1YWwoZGF0ZTogQ3VycmVudENhbGVuZGFyRGF0YSwgZGF0ZTI6IEN1cnJlbnRDYWxlbmRhckRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGUuZGF5ICE9IGRhdGUyLmRheSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBkYXRlLm1vbnRoICE9IGRhdGUyLm1vbnRoICYmXG4gICAgICAgICAgICBkYXRlLm1vbnRoICE9IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgZGF0ZTIubW9udGggIT0gdW5kZWZpbmVkXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZGF0ZS55ZWFyICE9IGRhdGUyLnllYXIgJiZcbiAgICAgICAgICAgIGRhdGUueWVhciAhPSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGRhdGUyLnllYXIgIT0gdW5kZWZpbmVkXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZGF5TnVtYmVyRm9yRGF0ZShkYXRlOiBDdXJyZW50Q2FsZW5kYXJEYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRheXNCZWZvcmVNb250aChkYXRlLm1vbnRoLCBkYXRlLnllYXIsIHRydWUpICsgZGF0ZS5kYXk7XG4gICAgfVxuXG4gICAgZ2V0IGZpcnN0V2Vla2RheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5maXJzdFdlZWtEYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxpYXMgdG8gZ2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgbGVhcCBkYXlzIHRoYXQgaGF2ZSBvY2N1cmVkIGJlZm9yZSB0aGUgY3VycmVudGx5IGRpc3BsYXllZCB5ZWFyLlxuICAgICAqL1xuICAgIGdldCBsZWFwRGF5c0JlZm9yZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheWVkLnllYXIgPT0gMSkgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB0aGlzLmxlYXBEYXlzQmVmb3JlWWVhcih0aGlzLmRpc3BsYXllZC55ZWFyIC0gMSk7XG4gICAgfVxuICAgIC8qKiBHZXQgVG90YWwgTnVtYmVyIG9mIExlYXAgRGF5cyBiZWZvcmUgYSBnaXZlbiB5ZWFyXG4gICAgICogQHBhcmFtIHRlc3RlciBZZWFyIHRvIGZpbmQgbGVhcCBkYXlzIGJlZm9yZSBOT1QgSU5DTFVESU5HIFRISVMgWUVBUlxuICAgICAqL1xuICAgIGxlYXBEYXlzQmVmb3JlWWVhcih0ZXN0ZXI6IG51bWJlcikge1xuICAgICAgICAvKiogSWYgd2UncmUgY2hlY2tpbmcgeWVhciAxLCB0aGVyZSBhcmUgbm8gbGVhcCBkYXlzLiAqL1xuICAgICAgICBpZiAodGVzdGVyID09IDEpIHJldHVybiAwO1xuICAgICAgICAvKiogU3VidHJhY3QgMSBmcm9tIHRlc3Rlci4gV2UncmUgbG9va2luZyBmb3IgbGVhcCBkYXlzIEJFRk9SRSB0aGUgeWVhci4gKi9cbiAgICAgICAgY29uc3QgeWVhciA9IHRlc3RlciAtIDE7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIC8qKiBJdGVyYXRlIG92ZXIgZWFjaCBsZWFwIGRheS4gKi9cbiAgICAgICAgZm9yIChjb25zdCB7IGludGVydmFsLCBvZmZzZXQgfSBvZiB0aGlzLmxlYXBkYXlzKSB7XG4gICAgICAgICAgICBsZXQgbGVhcGRheXMgPSAwO1xuXG4gICAgICAgICAgICAvKiogSXRlcmF0ZSBvdmVyIGVhY2ggY29uZGl0aW9uIG9uIGVhY2ggbGVhcGRheS4gKi9cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW50ZXJ2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSBpbnRlcnZhbFtpXTtcbiAgICAgICAgICAgICAgICAvKiogRGV0ZXJtaW5lIGhvdyBtYW55IGxlYXAgZGF5cyBtYXRjaCBub24tZXhjbHVzaXZlIHJ1bGVzIEFGVEVSIHRoaXMgcnVsZS5cbiAgICAgICAgICAgICAgICAgKiBUaGlzIGhhcyB0byBiZSBkb25lIHRvIGF2b2lkIFwiZG91YmxlLWNvdW50aW5nXCIgZGF5cyBmb3IgZGF5cyB0aGF0IG1hdGNoIG11bHRpcGxlIHJ1bGVzLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3QgPSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaSArIDEpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGMpID0+ICFjLmV4Y2x1c2l2ZSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoYykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHllYXIgKyAoYy5pZ25vcmUgPyAwIDogb2Zmc2V0KSkgLyBjLmludGVydmFsXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgICAgICAgICAgICAgIC8qKiBDYWxjdWxhdGUgaG93IG1hbnkgZGF5cyBtYXRjaCB0aGlzIHJ1bGUuICovXG4gICAgICAgICAgICAgICAgY29uc3QgY2FsYyA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgICh5ZWFyICsgKGNvbmRpdGlvbi5pZ25vcmUgPyAwIDogb2Zmc2V0KSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uLmludGVydmFsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uLmV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAvKiogSWYgdGhlIHJ1bGUgaXMgZXhsdXNpdmUsIHN1YnRyYWN0IHRoZSByZXN1bHQgZnJvbSB0aGUgdG90YWwsIHRoZW4gYWRkIGluIHRoZSByZXN0LiAqL1xuICAgICAgICAgICAgICAgICAgICBsZWFwZGF5cyAtPSBjYWxjO1xuICAgICAgICAgICAgICAgICAgICBsZWFwZGF5cyArPSByZXN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKiBJZiB0aGUgcnVsZSBpcyBleGx1c2l2ZSwgYWRkIHRoZSByZXN1bHQgdG8gdGhlIHRvdGFsLCB0aGVuIHN1YnRyYWN0IG91dCB0aGUgcmVzdC4gKi9cbiAgICAgICAgICAgICAgICAgICAgbGVhcGRheXMgKz0gY2FsYztcbiAgICAgICAgICAgICAgICAgICAgbGVhcGRheXMgLT0gcmVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3RhbCArPSBsZWFwZGF5cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIHRvIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIGRheXMgYmVmb3JlIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHllYXIuXG4gICAgICovXG4gICAgZ2V0IHRvdGFsRGF5c0JlZm9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG90YWxEYXlzQmVmb3JlWWVhcih0aGlzLmRpc3BsYXllZC55ZWFyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgZGF5cyBiZWZvcmUgYSBnaXZlbiB5ZWFyLlxuICAgICAqL1xuICAgIHRvdGFsRGF5c0JlZm9yZVllYXIoeWVhcjogbnVtYmVyLCBhbGwgPSBmYWxzZSkge1xuICAgICAgICBpZiAoeWVhciA8IDEpIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgTWF0aC5hYnMoeWVhciAtIDEpICpcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEubW9udGhzXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKG0pID0+IGFsbCB8fCBtLnR5cGUgPT0gXCJtb250aFwiKVxuICAgICAgICAgICAgICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYi5sZW5ndGgsIDApICtcbiAgICAgICAgICAgIHRoaXMubGVhcERheXNCZWZvcmVZZWFyKHllYXIpXG4gICAgICAgICk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2Vla2RheSBvZiBhIGdpdmVuIHllYXIuXG4gICAgICovXG4gICAgZmlyc3REYXlPZlllYXIoeWVhciA9IHRoaXMuZGlzcGxheWVkLnllYXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEub3ZlcmZsb3cpIHJldHVybiAwO1xuICAgICAgICBpZiAoeWVhciA9PSAxKSByZXR1cm4gdGhpcy5maXJzdFdlZWtkYXk7XG5cbiAgICAgICAgLy9ub3RlOiBhZGRlZCAxIGhlcmUgdG8gZml4IGdyZWdvcmlhbiBvZmZzZXQ/P1xuICAgICAgICAvL1RPRE86IEZpZ3VyZSBvdXQgd2h5LlxuICAgICAgICByZXR1cm4gd3JhcChcbiAgICAgICAgICAgICh0aGlzLnRvdGFsRGF5c0JlZm9yZVllYXIoeWVhcikgJSB0aGlzLmRhdGEud2Vla2RheXMubGVuZ3RoKSArXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFdlZWtkYXkgK1xuICAgICAgICAgICAgICAgICh0aGlzLmRhdGEub2Zmc2V0ID8/IDApLFxuICAgICAgICAgICAgdGhpcy5kYXRhLndlZWtkYXlzLmxlbmd0aFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsaWFzIHRvIGdldCB0aGUgbW9vbiBkYXRhLlxuICAgICAqL1xuICAgIGdldCBtb29ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tb29ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtb29ucyBhbmQgdGhlaXIgcGhhc2VzIGZvciBhIGdpdmVuIG1vbnRoLlxuICAgICAqXG4gICAgICogVE9ETzogVGhpcyBzZWVtcyB0byBiZSBhIGxpdHRsZSBvZmY/ICsvLSAxIGRheSBpbiBHcmVnb3JpYW4/XG4gICAgICovXG4gICAgZ2V0TW9vbnNGb3JNb250aChtb250aDogTW9udGhIZWxwZXIpOiBBcnJheTxbTW9vbiwgUGhhc2VdPltdIHtcbiAgICAgICAgY29uc3QgcGhhc2VzOiBBcnJheTxbTW9vbiwgUGhhc2VdPltdID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBkYXkgb2YgbW9udGguZGF5cykge1xuICAgICAgICAgICAgY29uc3QgZGF5c0JlZm9yZSA9XG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbERheXNCZWZvcmVZZWFyKG1vbnRoLnllYXIsIHRydWUpICtcbiAgICAgICAgICAgICAgICB0aGlzLmRheXNCZWZvcmVNb250aChtb250aC5udW1iZXIsIG1vbnRoLnllYXIsIHRydWUpICtcbiAgICAgICAgICAgICAgICBkYXkubnVtYmVyIC1cbiAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgY29uc3QgbW9vbnM6IEFycmF5PFtNb29uLCBQaGFzZV0+ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBtb29uIG9mIHRoaXMubW9vbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9mZnNldCwgY3ljbGUgfSA9IG1vb247XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JhbnVsYXJpdHkgPSAyNDtcblxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gKGRheXNCZWZvcmUgLSBvZmZzZXQpIC8gY3ljbGU7XG4gICAgICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gZGF0YSAtIE1hdGguZmxvb3IoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwaGFzZSA9IChwb3NpdGlvbiAqIGdyYW51bGFyaXR5KSAlIGdyYW51bGFyaXR5O1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE1PT05fUEhBU0VTW2dyYW51bGFyaXR5XTtcblxuICAgICAgICAgICAgICAgIG1vb25zLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICBtb29uLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3dyYXAoTWF0aC5yb3VuZChwaGFzZSksIG9wdGlvbnMubGVuZ3RoKV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBoYXNlcy5wdXNoKG1vb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwaGFzZXM7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IG5vb3AsIHNhZmVfbm90X2VxdWFsLCBzdWJzY3JpYmUsIHJ1bl9hbGwsIGlzX2Z1bmN0aW9uIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXgubWpzJztcbmV4cG9ydCB7IGdldF9zdG9yZV92YWx1ZSBhcyBnZXQgfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG5jb25zdCBzdWJzY3JpYmVyX3F1ZXVlID0gW107XG4vKipcbiAqIENyZWF0ZXMgYSBgUmVhZGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICogQHBhcmFtIHZhbHVlIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSB7U3RhcnRTdG9wTm90aWZpZXJ9c3RhcnQgc3RhcnQgYW5kIHN0b3Agbm90aWZpY2F0aW9ucyBmb3Igc3Vic2NyaXB0aW9uc1xuICovXG5mdW5jdGlvbiByZWFkYWJsZSh2YWx1ZSwgc3RhcnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzY3JpYmU6IHdyaXRhYmxlKHZhbHVlLCBzdGFydCkuc3Vic2NyaWJlXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgYFdyaXRhYmxlYCBzdG9yZSB0aGF0IGFsbG93cyBib3RoIHVwZGF0aW5nIGFuZCByZWFkaW5nIGJ5IHN1YnNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7Kj19dmFsdWUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtTdGFydFN0b3BOb3RpZmllcj19c3RhcnQgc3RhcnQgYW5kIHN0b3Agbm90aWZpY2F0aW9ucyBmb3Igc3Vic2NyaXB0aW9uc1xuICovXG5mdW5jdGlvbiB3cml0YWJsZSh2YWx1ZSwgc3RhcnQgPSBub29wKSB7XG4gICAgbGV0IHN0b3A7XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gc2V0KG5ld192YWx1ZSkge1xuICAgICAgICBpZiAoc2FmZV9ub3RfZXF1YWwodmFsdWUsIG5ld192YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbmV3X3ZhbHVlO1xuICAgICAgICAgICAgaWYgKHN0b3ApIHsgLy8gc3RvcmUgaXMgcmVhZHlcbiAgICAgICAgICAgICAgICBjb25zdCBydW5fcXVldWUgPSAhc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJzY3JpYmVyIG9mIHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJbMV0oKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZS5wdXNoKHN1YnNjcmliZXIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bl9xdWV1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1YnNjcmliZXJfcXVldWUubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJfcXVldWVbaV1bMF0oc3Vic2NyaWJlcl9xdWV1ZVtpICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJfcXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlKGZuKSB7XG4gICAgICAgIHNldChmbih2YWx1ZSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUocnVuLCBpbnZhbGlkYXRlID0gbm9vcCkge1xuICAgICAgICBjb25zdCBzdWJzY3JpYmVyID0gW3J1biwgaW52YWxpZGF0ZV07XG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChzdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDEpIHtcbiAgICAgICAgICAgIHN0b3AgPSBzdGFydChzZXQpIHx8IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgcnVuKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmRlbGV0ZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgICAgICAgIHN0b3AgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyBzZXQsIHVwZGF0ZSwgc3Vic2NyaWJlIH07XG59XG5mdW5jdGlvbiBkZXJpdmVkKHN0b3JlcywgZm4sIGluaXRpYWxfdmFsdWUpIHtcbiAgICBjb25zdCBzaW5nbGUgPSAhQXJyYXkuaXNBcnJheShzdG9yZXMpO1xuICAgIGNvbnN0IHN0b3Jlc19hcnJheSA9IHNpbmdsZVxuICAgICAgICA/IFtzdG9yZXNdXG4gICAgICAgIDogc3RvcmVzO1xuICAgIGNvbnN0IGF1dG8gPSBmbi5sZW5ndGggPCAyO1xuICAgIHJldHVybiByZWFkYWJsZShpbml0aWFsX3ZhbHVlLCAoc2V0KSA9PiB7XG4gICAgICAgIGxldCBpbml0ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGxldCBwZW5kaW5nID0gMDtcbiAgICAgICAgbGV0IGNsZWFudXAgPSBub29wO1xuICAgICAgICBjb25zdCBzeW5jID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmbihzaW5nbGUgPyB2YWx1ZXNbMF0gOiB2YWx1ZXMsIHNldCk7XG4gICAgICAgICAgICBpZiAoYXV0bykge1xuICAgICAgICAgICAgICAgIHNldChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCA9IGlzX2Z1bmN0aW9uKHJlc3VsdCkgPyByZXN1bHQgOiBub29wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZXJzID0gc3RvcmVzX2FycmF5Lm1hcCgoc3RvcmUsIGkpID0+IHN1YnNjcmliZShzdG9yZSwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB2YWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHBlbmRpbmcgJj0gfigxIDw8IGkpO1xuICAgICAgICAgICAgaWYgKGluaXRlZCkge1xuICAgICAgICAgICAgICAgIHN5bmMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgcGVuZGluZyB8PSAoMSA8PCBpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBpbml0ZWQgPSB0cnVlO1xuICAgICAgICBzeW5jKCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh1bnN1YnNjcmliZXJzKTtcbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgZGVyaXZlZCwgcmVhZGFibGUsIHdyaXRhYmxlIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB0eXBlIENhbGVuZGFySGVscGVyIGZyb20gXCJzcmMvaGVscGVyXCI7XG5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGdldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBXcml0YWJsZSB9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcbiAgICBpbXBvcnQgRmxhZ3MgZnJvbSBcIi4vRmxhZ3Muc3ZlbHRlXCI7XG4gICAgaW1wb3J0IE1vb24gZnJvbSBcIi4vTW9vbi5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgZGlzcGxheURheU51bWJlcjogYm9vbGVhbjtcblxuICAgIGNvbnN0IGNhbGVuZGFyU3RvcmUgPSBnZXRDb250ZXh0PFdyaXRhYmxlPENhbGVuZGFySGVscGVyPj4oXCJjYWxlbmRhclwiKTtcbiAgICBsZXQgY2FsZW5kYXI6IENhbGVuZGFySGVscGVyO1xuICAgIGNhbGVuZGFyU3RvcmUuc3Vic2NyaWJlKChjKSA9PiB7XG4gICAgICAgIGNhbGVuZGFyID0gYztcbiAgICB9KTtcblxuICAgICQ6IGN1cnJlbnREYXRlID0gY2FsZW5kYXIudmlld2VkRGF0ZTtcbiAgICAkOiBkYXRlID0gY2FsZW5kYXIudmlld2luZztcbiAgICAkOiBkYXkgPSBjYWxlbmRhci5nZXREYXlGb3JEYXRlKGRhdGUpO1xuICAgICQ6IGRheU51bWJlciA9IGNhbGVuZGFyLmRheU51bWJlckZvckRhdGUoZGF0ZSk7XG4gICAgJDogbW9vbnMgPSBkYXkubW9vbnM7XG4gICAgJDogY2F0ZWdvcmllcyA9IGNhbGVuZGFyLmNhdGVnb3JpZXM7XG5cbiAgICBsZXQgZGlzcGxheU1vb25zOiBib29sZWFuO1xuICAgIGNvbnN0IG1vb25TdG9yZSA9IGdldENvbnRleHQ8V3JpdGFibGU8Ym9vbGVhbj4+KFwiZGlzcGxheU1vb25zXCIpO1xuICAgIG1vb25TdG9yZS5zdWJzY3JpYmUoKHYpID0+IChkaXNwbGF5TW9vbnMgPSB2KSk7XG5cbiAgICBjYWxlbmRhci5vbihcImRheS11cGRhdGVcIiwgKCkgPT4ge1xuICAgICAgICBkYXRlID0gY2FsZW5kYXIudmlld2luZztcbiAgICAgICAgY3VycmVudERhdGUgPSBjYWxlbmRhci52aWV3ZWREYXRlO1xuICAgICAgICBkYXkgPSBjYWxlbmRhci5nZXREYXlGb3JEYXRlKGRhdGUpO1xuICAgICAgICBtb29ucyA9IGRheS5tb29ucztcbiAgICB9KTtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCBjbG9zZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcImNyb3NzXCIpLnNldFRvb2x0aXAoXCJDbG9zZVwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHJldmVhbCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFwiZmFudGFzeS1jYWxlbmRhci1yZXZlYWxcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiU2hvdyBvbiBDYWxlbmRhclwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLmRpc3BsYXllZC55ZWFyID0gY2FsZW5kYXIudmlld2luZy55ZWFyO1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLnNldEN1cnJlbnRNb250aChjYWxlbmRhci52aWV3aW5nLm1vbnRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgZXZlbnQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiTmV3IEV2ZW50XCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiBkaXNwYXRjaChcImV2ZW50XCIsIGRhdGUpKTtcbiAgICB9O1xuICAgIGNvbnN0IGxlZnQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJsZWZ0LWFycm93XCIpO1xuICAgIH07XG4gICAgY29uc3QgcmlnaHQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJyaWdodC1hcnJvd1wiKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJkYXktdmlld1wiPlxuICAgIDxkaXYgY2xhc3M9XCJuYXZcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxlZnQtbmF2XCI+XG4gICAgICAgICAgICA8ZGl2IHVzZTpyZXZlYWwgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKFwicmV2ZWFsXCIpfSAvPlxuICAgICAgICAgICAgPGRpdiB1c2U6ZXZlbnQgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgdXNlOmNsb3NlIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaChcImNsb3NlXCIpfSAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJkYXRlXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiYXJyb3cgY2FsZW5kYXItY2xpY2thYmxlXCJcbiAgICAgICAgICAgIHVzZTpsZWZ0XG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIlxuICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IGNhbGVuZGFyLmdvVG9QcmV2aW91c0RheSgpfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJmYW50YXN5LXRpdGxlIHRpdGxlXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjdXJyZW50XCI+e2N1cnJlbnREYXRlfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICB7I2lmIGRpc3BsYXlEYXlOdW1iZXJ9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRheS1udW1iZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgRGF5IHtkYXlOdW1iZXJ9XG4gICAgICAgICAgICAgICAgICAgIDwvZW0+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJhcnJvdyByaWdodCBjYWxlbmRhci1jbGlja2FibGVcIlxuICAgICAgICAgICAgdXNlOnJpZ2h0XG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiTmV4dFwiXG4gICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gY2FsZW5kYXIuZ29Ub05leHREYXkoKX1cbiAgICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgICB7I2lmIGRpc3BsYXlNb29ucyAmJiBtb29ucyAmJiBtb29ucy5sZW5ndGh9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb29uLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgeyNlYWNoIG1vb25zIGFzIFttb29uLCBwaGFzZV19XG4gICAgICAgICAgICAgICAgPE1vb24ge21vb259IHtwaGFzZX0gLz5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cbiAgICA8RmxhZ3NcbiAgICAgICAgZXZlbnRzPXtkYXkuZXZlbnRzfVxuICAgICAgICB7Y2F0ZWdvcmllc31cbiAgICAgICAge2RhdGV9XG4gICAgICAgIGRheVZpZXc9e3RydWV9XG4gICAgICAgIHtjYWxlbmRhcn1cbiAgICAgICAgb246ZXZlbnQtY2xpY2tcbiAgICAgICAgb246ZXZlbnQtbW91c2VvdmVyXG4gICAgICAgIG9uOmV2ZW50LWNvbnRleHRcbiAgICAvPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuZGF5LXZpZXcge1xuICAgICAgICBwYWRkaW5nOiA1cHggMTVweDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgICAgICBnYXA6IDAuNXJlbTtcbiAgICB9XG5cbiAgICAubmF2LFxuICAgIC5kYXRlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAubGVmdC1uYXYge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cbiAgICAubGVmdC1uYXYgOmdsb2JhbCguY2xpY2thYmxlLWljb24pIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIH1cblxuICAgIC5jYWxlbmRhci1jbGlja2FibGUge1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgICBoMyB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG5cbiAgICAuZGF5LXZpZXcgOmdsb2JhbCguZmxhZy1jb250YWluZXIgPiAuZmxhZykge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcbiAgICB9XG5cbiAgICAudGl0bGUtY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG4gICAgLmRheS1udW1iZXIge1xuICAgICAgICBmb250LXNpemU6IHNtYWxsO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBQbGF0Zm9ybSwgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBDdXJyZW50Q2FsZW5kYXJEYXRhLCBFdmVudCwgRXZlbnRDYXRlZ29yeSB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IHsgREVGQVVMVF9DQVRFR09SWV9DT0xPUiB9IGZyb20gXCJzcmMvdXRpbHMvY29uc3RhbnRzXCI7XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBleHBvcnQgbGV0IGV2ZW50OiBFdmVudDtcbiAgICBleHBvcnQgbGV0IGRhdGU6IEN1cnJlbnRDYWxlbmRhckRhdGE7XG5cbiAgICBleHBvcnQgbGV0IGRheVZpZXc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsZXQgbXVsdGkgPSBmYWxzZSxcbiAgICAgICAgc3RhcnQgPSBmYWxzZSxcbiAgICAgICAgZW5kID0gZmFsc2UsXG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgJDoge1xuICAgICAgICBpZiAoZXZlbnQuZW5kICE9IHVuZGVmaW5lZCAmJiAhZGF5Vmlldykge1xuICAgICAgICAgICAgbXVsdGkgPSB0cnVlO1xuICAgICAgICAgICAgc3RhcnQgPVxuICAgICAgICAgICAgICAgIGRhdGUuZGF5ID09PSBldmVudC5kYXRlLmRheSAmJlxuICAgICAgICAgICAgICAgIChldmVudC5kYXRlLm1vbnRoID09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICBkYXRlLm1vbnRoID09IGV2ZW50LmRhdGUubW9udGgpICYmXG4gICAgICAgICAgICAgICAgKGV2ZW50LmRhdGUueWVhciA9PSB1bmRlZmluZWQgfHwgZGF0ZS55ZWFyID09PSBldmVudC5kYXRlLnllYXIpO1xuICAgICAgICAgICAgZmlyc3QgPSBzdGFydCB8fCBkYXRlLmRheSA9PSAxO1xuICAgICAgICAgICAgZW5kID1cbiAgICAgICAgICAgICAgICBkYXRlLmRheSA9PT0gZXZlbnQuZW5kLmRheSAmJlxuICAgICAgICAgICAgICAgIChldmVudC5lbmQubW9udGggPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIGRhdGUubW9udGggPT0gZXZlbnQuZW5kLm1vbnRoKSAmJlxuICAgICAgICAgICAgICAgIChldmVudC5lbmQueWVhciA9PSB1bmRlZmluZWQgfHwgZGF0ZS55ZWFyID09PSBldmVudC5lbmQueWVhcik7XG4gICAgICAgICAgICBpZiAoc3RhcnQgJiYgZW5kKSB7XG4gICAgICAgICAgICAgICAgbXVsdGkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGxldCBjYXRlZ29yaWVzOiBFdmVudENhdGVnb3J5W107XG5cbiAgICBsZXQgY29sb3IgPVxuICAgICAgICBjYXRlZ29yaWVzLmZpbmQoKGMpID0+IGMuaWQgPT0gZXZlbnQuY2F0ZWdvcnkpPy5jb2xvciA/P1xuICAgICAgICBERUZBVUxUX0NBVEVHT1JZX0NPTE9SO1xuXG4gICAgJDogY29sb3IgPVxuICAgICAgICBjYXRlZ29yaWVzLmZpbmQoKGMpID0+IGMuaWQgPT0gZXZlbnQuY2F0ZWdvcnkpPy5jb2xvciA/P1xuICAgICAgICBERUZBVUxUX0NBVEVHT1JZX0NPTE9SO1xuXG4gICAgY29uc3QgbWV0YSA9IFBsYXRmb3JtLmlzTWFjT1MgPyBcIk1ldGFcIiA6IFwiQ29udHJvbFwiO1xuXG4gICAgY29uc3Qgbm90ZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwibm90ZS1nbHlwaFwiKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgICBjbGFzcz1cImZsYWdcIlxuICAgIGNsYXNzOm11bHRpXG4gICAgY2xhc3M6c3RhcnRcbiAgICBjbGFzczplbmRcbiAgICBjbGFzczpmaXJzdFxuICAgIGNsYXNzOmRheS12aWV3PXtkYXlWaWV3fVxuICAgIGFyaWEtbGFiZWw9eyFkYXlWaWV3ID8gZXZlbnQubmFtZSA6IG51bGx9XG4gICAgc3R5bGU9XCItLWhleC1hbHBoYToge2NvbG9yfTQwOyAtLWNvbG9yOntjb2xvcn1cIlxuICAgIG9uOmNsaWNrPXsoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZGlzcGF0Y2goXCJldmVudC1jbGlja1wiLCB7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBldnQuZ2V0TW9kaWZpZXJTdGF0ZShtZXRhKVxuICAgICAgICB9KTtcbiAgICB9fVxuICAgIG9uOm1vdXNlb3Zlcj17KGV2dCkgPT5cbiAgICAgICAgZGlzcGF0Y2goXCJldmVudC1tb3VzZW92ZXJcIiwgeyB0YXJnZXQ6IGV2dC50YXJnZXQsIGV2ZW50IH0pfVxuICAgIG9uOmZvY3VzPXsoKSA9PiB7fX1cbiAgICBvbjpjb250ZXh0bWVudT17KGV2dCkgPT4ge1xuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGRpc3BhdGNoKFwiZXZlbnQtY29udGV4dFwiLCB7IGV2dDogZXZ0LCBldmVudCB9KTtcbiAgICB9fVxuPlxuICAgIDxkaXYgY2xhc3M9XCJmbGFnLWNvbnRlbnRcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M6Y2xhbXA9eyFkYXlWaWV3fSBjbGFzczpkYXktdmlldz17ZGF5Vmlld30+XG4gICAgICAgICAgICB7ZXZlbnQubmFtZX08L3NwYW5cbiAgICAgICAgPlxuICAgICAgICB7I2lmIGV2ZW50Lm5vdGV9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZVwiIHVzZTpub3RlIC8+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5mbGFnIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMC4xMjVyZW07XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhleC1hbHBoYSk7XG4gICAgICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgdmFyKC0tY29sb3IpO1xuICAgIH1cbiAgICAuZmxhZy1jb250ZW50IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiAwLjI1cmVtO1xuICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIH1cbiAgICAuZGF5LXZpZXcgLmZsYWctY29udGVudCB7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG5cbiAgICAuY2xhbXAge1xuICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAgICAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xuICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAgICAgICB3b3JkLWJyZWFrOiBrZWVwLWFsbDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgfVxuXG4gICAgLm5vdGUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgfVxuICAgIC5tdWx0aSB7XG4gICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICAgICAgd2lkdGg6IHVuc2V0O1xuICAgIH1cbiAgICAubXVsdGkgLmNsYW1wIHtcbiAgICAgICAgLXdlYmtpdC1saW5lLWNsYW1wOiAxO1xuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB9XG4gICAgLm11bHRpLnN0YXJ0IHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgfVxuICAgIC5tdWx0aS5lbmQge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgfVxuICAgIC5tdWx0aS5maXJzdCB7XG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cbiAgICAubXVsdGk6bm90KC5maXJzdCkge1xuICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICAgIC5tdWx0aTpub3QoLnN0YXJ0KSB7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC02cHg7XG4gICAgfVxuICAgIC5tdWx0aTpub3QoLmVuZCkge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IC02cHg7XG4gICAgfVxuICAgIC5zdGFydCA+IC5mbGFnLWNvbnRlbnQge1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIGdhcDogMWVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgRmxhZyBmcm9tIFwiLi9GbGFnLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgQ3VycmVudENhbGVuZGFyRGF0YSwgRXZlbnQsIEV2ZW50Q2F0ZWdvcnkgfSBmcm9tIFwic3JjL0B0eXBlc1wiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25Nb3VudCwgdGljayB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgQ2FsZW5kYXJIZWxwZXIgZnJvbSBcInNyYy9oZWxwZXJcIjtcblxuICAgIGV4cG9ydCBsZXQgZXZlbnRzOiBFdmVudFtdID0gW107XG4gICAgZXhwb3J0IGxldCBjYXRlZ29yaWVzOiBFdmVudENhdGVnb3J5W107XG4gICAgZXhwb3J0IGxldCBkYXlWaWV3OiBib29sZWFuID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBkYXRlOiBDdXJyZW50Q2FsZW5kYXJEYXRhO1xuICAgIGV4cG9ydCBsZXQgY2FsZW5kYXI6IENhbGVuZGFySGVscGVyO1xuXG4gICAgJDogZXZlbnRzID0gWy4uLmV2ZW50c107XG5cbiAgICBsZXQgb3ZlcmZsb3c6IG51bWJlciA9IDA7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcbiAgICBsZXQgZmxhZ0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgbGV0IHByZXZpb3VzSGVpZ2h0ID0gMDtcbiAgICBjb25zdCBhZGRFdmVudHMgPSAoZmxhZ3M6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPVxuICAgICAgICAgICAgICAgIGZsYWdzPy5wYXJlbnRFbGVtZW50Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKT8uaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFkYXlWaWV3ICYmXG4gICAgICAgICAgICAgICAgKGhlaWdodCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoaGVpZ2h0KSA9PSBNYXRoLmZsb29yKHByZXZpb3VzSGVpZ2h0KSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBwcmV2aW91c0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIGZsYWdDb250YWluZXIgPSBmbGFncztcbiAgICAgICAgICAgIGZsYWdzLmVtcHR5KCk7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IDA7XG4gICAgICAgICAgICBsZXQgcmVtYWluaW5nID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsYWcgPSBuZXcgRmxhZyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogZmxhZ3MsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlWaWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZmxhZy4kb24oXCJldmVudC1jbGlja1wiLCAoZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJldmVudC1jbGlja1wiLCBlLmRldGFpbClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZsYWcuJG9uKFwiZXZlbnQtbW91c2VvdmVyXCIsIChlKSA9PlxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcImV2ZW50LW1vdXNlb3ZlclwiLCBlLmRldGFpbClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZsYWcuJG9uKFwiZXZlbnQtY29udGV4dFwiLCAoZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJldmVudC1jb250ZXh0XCIsIGUuZGV0YWlsKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXlWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IGhlaWdodCAtIGZsYWdzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLmxhc3RFbGVtZW50Q2hpbGQuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IGV2ZW50cy5sZW5ndGggLSBldmVudHMuaW5kZXhPZihldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZW1haW5pbmcgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBldmVudHMubGVuZ3RoIC0gZXZlbnRzLmluZGV4T2YoZXZlbnQpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNhbGVuZGFyLm9uKFwidmlldy1yZXNpemVkXCIsICgpID0+IHtcbiAgICAgICAgaWYgKGRheVZpZXcpIHJldHVybjtcbiAgICAgICAgYWRkRXZlbnRzKGZsYWdDb250YWluZXIpO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJmbGFncy1jb250YWluZXJcIj5cbiAgICB7I2tleSBldmVudHN9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGFnLWNvbnRhaW5lclwiIHVzZTphZGRFdmVudHM+XG4gICAgICAgICAgICA8IS0tIHsjZWFjaCBldmVudHMuc2xpY2UoMCwgTUFYX0VWRU5UUykgYXMgZXZlbnR9XG4gICAgICAgICAgICA8RmxhZ1xuICAgICAgICAgICAgICAgIHtldmVudH1cbiAgICAgICAgICAgICAgICB7Y2F0ZWdvcmllc31cbiAgICAgICAgICAgICAgICB7ZGF5Vmlld31cbiAgICAgICAgICAgICAgICB7ZGF0ZX1cbiAgICAgICAgICAgICAgICBvbjpldmVudC1jbGlja1xuICAgICAgICAgICAgICAgIG9uOmV2ZW50LW1vdXNlb3ZlclxuICAgICAgICAgICAgICAgIG9uOmV2ZW50LWNvbnRleHRcbiAgICAgICAgICAgIC8+XG4gICAgICAgIHsvZWFjaH0gLS0+XG4gICAgICAgIDwvZGl2PlxuICAgIHsva2V5fVxuICAgIDxkaXYgY2xhc3M9XCJvdmVyZmxvd1wiPlxuICAgICAgICB7I2lmIG92ZXJmbG93ID4gMH1cbiAgICAgICAgICAgIDxzcGFuPit7b3ZlcmZsb3d9PC9zcGFuPlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuZmxhZ3MtY29udGFpbmVyIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgICAuZmxhZy1jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICAgICAgIGdhcDogMC4yNXJlbTtcbiAgICB9XG5cbiAgICAub3ZlcmZsb3cge1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBleHBvcnQgbGV0IGlzRmlsbGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgICBleHBvcnQgbGV0IGlzQWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBjb2xvcjogc3RyaW5nO1xuPC9zY3JpcHQ+XG5cbjxzdmdcbiAgICBjbGFzcz1cImRvdFwiXG4gICAgY2xhc3M6ZmlsbGVkPXtpc0ZpbGxlZH1cbiAgICBjbGFzczphY3RpdmU9e2lzQWN0aXZlfVxuICAgIHZpZXdCb3g9XCIwIDAgNiA2XCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbj5cbiAgICA8Y2lyY2xlXG4gICAgICAgIHN0cm9rZT17Y29sb3IgPz8gXCJjdXJyZW50Q29sb3JcIn1cbiAgICAgICAgZmlsbD17Y29sb3IgPz8gXCJjdXJyZW50Q29sb3JcIn1cbiAgICAgICAgY3g9XCIzXCJcbiAgICAgICAgY3k9XCIzXCJcbiAgICAgICAgcj1cIjJcIlxuICAgIC8+XG48L3N2Zz5cblxuPHN0eWxlPlxuICAgIC5kb3Qge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDZweDtcbiAgICAgICAgbWluLXdpZHRoOiA2cHg7XG4gICAgICAgIGhlaWdodDogNnB4O1xuICAgICAgICB3aWR0aDogNnB4O1xuICAgICAgICBtYXJnaW46IDAgMnB4O1xuICAgIH1cbiAgICAuYWN0aXZlIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtb24tYWNjZW50KTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IERvdCBmcm9tIFwiLi9Eb3Quc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBFdmVudCwgRXZlbnRDYXRlZ29yeSB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgQ2FsZW5kYXJIZWxwZXIgZnJvbSBcInNyYy9oZWxwZXJcIjtcblxuICAgIGV4cG9ydCBsZXQgZXZlbnRzOiBFdmVudFtdID0gW107XG4gICAgZXhwb3J0IGxldCBjYXRlZ29yaWVzOiBFdmVudENhdGVnb3J5W107XG4gICAgZXhwb3J0IGxldCBjYWxlbmRhcjogQ2FsZW5kYXJIZWxwZXI7XG4gICAgXG4gICAgbGV0IG92ZXJmbG93OiBudW1iZXIgPSAwO1xuXG4gICAgbGV0IGRvdENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgbGV0IHByZXZpb3VzV2lkdGggPSAwO1xuICAgIGNvbnN0IGFkZEV2ZW50cyA9IChkb3RzOiBIVE1MRGl2RWxlbWVudCkgPT4ge1xuICAgICAgICBkb3RDb250YWluZXIgPSBkb3RzO1xuICAgICAgICBpZiAoZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBkb3RzLnBhcmVudEVsZW1lbnQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpPy53aWR0aDtcbiAgICAgICAgICAgIGlmICghd2lkdGggfHwgTWF0aC5mbG9vcih3aWR0aCkgPT0gTWF0aC5mbG9vcihwcmV2aW91c1dpZHRoKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBwcmV2aW91c1dpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBsZXQgcmVtYWluaW5nID0gd2lkdGg7XG4gICAgICAgICAgICBkb3RzLmVtcHR5KCk7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgbmV3IERvdCh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogZG90cyxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcihldmVudClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IHdpZHRoIC0gZG90cy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcblxuICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmcgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdHMubGFzdEVsZW1lbnRDaGlsZC5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBldmVudHMubGVuZ3RoIC0gZXZlbnRzLmluZGV4T2YoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlbWFpbmluZyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gZXZlbnRzLmxlbmd0aCAtIGV2ZW50cy5pbmRleE9mKGV2ZW50KSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjYWxlbmRhci5vbihcInZpZXctcmVzaXplZFwiLCAoKSA9PiB7XG4gICAgICAgIGlmICghZG90Q29udGFpbmVyKSByZXR1cm47XG4gICAgICAgIGFkZEV2ZW50cyhkb3RDb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29sb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIHJldHVybiBjYXRlZ29yaWVzLmZpbmQoKGMpID0+IGMuaWQgPT0gZXZlbnQuY2F0ZWdvcnkpPy5jb2xvcjtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJkb3RzLWNvbnRhaW5lclwiPlxuICAgIHsja2V5IGV2ZW50c31cbiAgICAgICAgPGRpdiBjbGFzcz1cImRvdC1jb250YWluZXIgY2VudGVyZWRcIiB1c2U6YWRkRXZlbnRzIC8+XG4gICAgey9rZXl9XG4gICAgPGRpdiBjbGFzcz1cIm92ZXJmbG93XCI+XG4gICAgICAgIHsjaWYgb3ZlcmZsb3cgPiAwfVxuICAgICAgICAgICAgPHNwYW4+K3tvdmVyZmxvd308L3NwYW4+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5kb3RzLWNvbnRhaW5lciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgICAuZG90LWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICBtYXJnaW46IGF1dG87XG4gICAgICAgIGxpbmUtaGVpZ2h0OiA2cHg7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDZweDtcbiAgICB9XG4gICAgLmNlbnRlcmVkIHtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC5vdmVyZmxvdyB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgZm9udC1zaXplOiB4eC1zbWFsbDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjI1O1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IERheUhlbHBlciB9IGZyb20gXCJzcmMvaGVscGVyXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBFdmVudCB9IGZyb20gXCJzcmMvQHR5cGVzXCI7XG4gICAgaW1wb3J0IERvdHMgZnJvbSBcIi4vRG90cy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTW9vbiBmcm9tIFwiLi9Nb29uLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCBGbGFncyBmcm9tIFwiLi9GbGFncy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGV4cG9ydCBsZXQgZGF5OiBEYXlIZWxwZXI7XG5cbiAgICBleHBvcnQgbGV0IGFkamFjZW50OiBib29sZWFuO1xuICAgIGV4cG9ydCBsZXQgZnVsbFZpZXc6IGJvb2xlYW47XG4gICAgbGV0IGV2ZW50czogRXZlbnRbXSA9IFtdO1xuXG4gICAgJDoge1xuICAgICAgICBpZiAoIWFkamFjZW50KSB7XG4gICAgICAgICAgICBldmVudHMgPSBkYXkuZXZlbnRzO1xuICAgICAgICB9XG4gICAgfVxuICAgICQ6IG1vb25zID0gZGF5Lm1vb25zO1xuICAgICQ6IGNhdGVnb3JpZXMgPSBkYXkuY2FsZW5kYXIuY2F0ZWdvcmllcztcbiAgICAkOiBkYXRlID0gZGF5LmRhdGU7XG4gICAgJDogdG9kYXkgPSBkYXkuaXNDdXJyZW50RGF5O1xuICAgICQ6IGRpc3BsYXlpbmcgPSBkYXkuaXNEaXNwbGF5aW5nO1xuXG4gICAgbGV0IGRheVZpZXc6IGJvb2xlYW47XG4gICAgY29uc3QgZGF5Vmlld1N0b3JlID0gZ2V0Q29udGV4dDxXcml0YWJsZTxib29sZWFuPj4oXCJkYXlWaWV3XCIpO1xuICAgIGRheVZpZXdTdG9yZS5zdWJzY3JpYmUoKHYpID0+IChkYXlWaWV3ID0gdikpO1xuICAgICQ6IGRheVZpZXcgPSBkYXlWaWV3O1xuXG4gICAgbGV0IGRpc3BsYXlNb29uczogYm9vbGVhbjtcbiAgICBjb25zdCBtb29uU3RvcmUgPSBnZXRDb250ZXh0PFdyaXRhYmxlPGJvb2xlYW4+PihcImRpc3BsYXlNb29uc1wiKTtcbiAgICBtb29uU3RvcmUuc3Vic2NyaWJlKCh2KSA9PiAoZGlzcGxheU1vb25zID0gdikpO1xuXG4gICAgZGF5LmNhbGVuZGFyLm9uKFwibW9udGgtdXBkYXRlXCIsICgpID0+IHtcbiAgICAgICAgdG9kYXkgPSBkYXkuaXNDdXJyZW50RGF5O1xuICAgICAgICBkaXNwbGF5aW5nID0gZGF5LmlzRGlzcGxheWluZztcbiAgICAgICAgZXZlbnRzID0gZGF5LmV2ZW50cztcbiAgICB9KTtcbiAgICBkYXkuY2FsZW5kYXIub24oXCJkYXktdXBkYXRlXCIsICgpID0+IHtcbiAgICAgICAgdG9kYXkgPSBkYXkuaXNDdXJyZW50RGF5O1xuICAgICAgICBkaXNwbGF5aW5nID0gZGF5LmlzRGlzcGxheWluZztcbiAgICB9KTtcbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAgY2xhc3M6ZGF5PXt0cnVlfVxuICAgIGNsYXNzOmZhbnRhc3ktZGF5PXt0cnVlfVxuICAgIGNsYXNzOmFjdGl2ZT17dG9kYXkgJiYgIWFkamFjZW50fVxuICAgIGNsYXNzOnZpZXdpbmc9e2RheVZpZXcgJiYgZGlzcGxheWluZyAmJiAhYWRqYWNlbnR9XG4gICAgY2xhc3M9e2FkamFjZW50ID8gXCJhZGphY2VudC1tb250aCBmYW50YXN5LWFkamFjZW50LW1vbnRoXCIgOiBcIlwifVxuICAgIGFyaWEtbGFiZWw9eyFmdWxsVmlldyAmJiBldmVudHMubGVuZ3RoXG4gICAgICAgID8gYCR7ZXZlbnRzLmxlbmd0aH0gZXZlbnQke2V2ZW50cy5sZW5ndGggPT0gMSA/IFwiXCIgOiBcInNcIn1gXG4gICAgICAgIDogdW5kZWZpbmVkfVxuICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaChcImRheS1jbGlja1wiLCBkYXkpfVxuICAgIG9uOmRibGNsaWNrPXsoKSA9PiBkaXNwYXRjaChcImRheS1kb3VibGVjbGlja1wiLCBkYXkpfVxuICAgIG9uOmNvbnRleHRtZW51PXsoZXZ0KSA9PiBkaXNwYXRjaChcImRheS1jb250ZXh0LW1lbnVcIiwgeyBkYXksIGV2dCB9KX1cbj5cbiAgICA8c3Bhbj5cbiAgICAgICAge2RheS5udW1iZXJ9XG4gICAgPC9zcGFuPlxuICAgIHsjaWYgZnVsbFZpZXd9XG4gICAgICAgIHsjaWYgZGlzcGxheU1vb25zICYmIG1vb25zICYmIG1vb25zLmxlbmd0aH1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb29uLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIHsjZWFjaCBtb29ucyBhcyBbbW9vbiwgcGhhc2VdfVxuICAgICAgICAgICAgICAgICAgICA8TW9vbiB7bW9vbn0ge3BoYXNlfSAvPlxuICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgICAgICA8RmxhZ3NcbiAgICAgICAgICAgIHtldmVudHN9XG4gICAgICAgICAgICB7Y2F0ZWdvcmllc31cbiAgICAgICAgICAgIHtkYXRlfVxuICAgICAgICAgICAgY2FsZW5kYXI9e2RheS5jYWxlbmRhcn1cbiAgICAgICAgICAgIG9uOmV2ZW50LWNsaWNrXG4gICAgICAgICAgICBvbjpldmVudC1tb3VzZW92ZXJcbiAgICAgICAgICAgIG9uOmV2ZW50LWNvbnRleHRcbiAgICAgICAgLz5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxEb3RzIHtldmVudHN9IHtjYXRlZ29yaWVzfSBjYWxlbmRhcj17ZGF5LmNhbGVuZGFyfSAvPlxuICAgIHsvaWZ9XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5kYXkge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXRleHQtZGF5KTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDJweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICB9XG4gICAgLmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICB9XG5cbiAgICAudmlld2luZyB7XG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICB9XG5cbiAgICAuYWRqYWNlbnQtbW9udGgge1xuICAgICAgICBvcGFjaXR5OiAwLjI1O1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IE1vbnRoSGVscGVyIH0gZnJvbSBcInNyYy9oZWxwZXJcIjtcbiAgICBpbXBvcnQgRGF5IGZyb20gXCIuL0RheS5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgeWVhclZpZXc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IG1vbnRoOiBNb250aEhlbHBlcjtcblxuICAgIGV4cG9ydCBsZXQgY29sdW1uczogbnVtYmVyO1xuICAgIGV4cG9ydCBsZXQgZnVsbFZpZXc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IHdlZWtzOiBudW1iZXI7XG5cbiAgICBleHBvcnQgbGV0IHNob3dQYWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgJDogcGFkZGVkID0gbW9udGguY2FsZW5kYXIuZ2V0UGFkZGVkRGF5c0Zvck1vbnRoKG1vbnRoKTtcbiAgICAkOiBwcmV2aW91cyA9IHBhZGRlZC5wcmV2aW91cztcbiAgICAkOiBjdXJyZW50ID0gbW9udGguZGF5cztcbiAgICAkOiBuZXh0ID0gcGFkZGVkLm5leHQ7XG48L3NjcmlwdD5cblxuPGRpdlxuICAgIGNsYXNzPVwibW9udGhcIlxuICAgIGNsYXNzOmZ1bGwtdmlldz17ZnVsbFZpZXd9XG4gICAgZGF0YS1pZD17bW9udGguaWR9XG4gICAgaWQ9e2BNT05USC0ke21vbnRoLmlkfS0ke21vbnRoLnllYXJ9YH1cbj5cbiAgICB7I2lmIHllYXJWaWV3fVxuICAgICAgICA8aDMgY2xhc3M9XCJtb250aC1uYW1lXCI+e21vbnRoLm5hbWV9PC9oMz5cbiAgICB7L2lmfVxuICAgIHsja2V5IGN1cnJlbnR9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiZmFudGFzeS1tb250aFwiXG4gICAgICAgICAgICBjbGFzczpmdWxsLXZpZXc9e2Z1bGxWaWV3fVxuICAgICAgICAgICAgY2xhc3M6eWVhci12aWV3PXt5ZWFyVmlld31cbiAgICAgICAgICAgIHN0eWxlPVwiLS1jYWxlbmRhci1jb2x1bW5zOiB7Y29sdW1uc307LS1jYWxlbmRhci1yb3dzOiB7ZnVsbFZpZXdcbiAgICAgICAgICAgICAgICA/IGAkeygxIC8gd2Vla3MpICogMTAwfSVgXG4gICAgICAgICAgICAgICAgOiAnMWZyJ307IFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIHsjZWFjaCBwcmV2aW91cyBhcyBkYXl9XG4gICAgICAgICAgICAgICAgeyNpZiBzaG93UGFkICYmIGRheSAhPSBudWxsfVxuICAgICAgICAgICAgICAgICAgICA8RGF5IHtkYXl9IGFkamFjZW50PXt0cnVlfSB7ZnVsbFZpZXd9IC8+XG4gICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICA8ZGl2IC8+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgIHsjZWFjaCBjdXJyZW50IGFzIGRheX1cbiAgICAgICAgICAgICAgICA8RGF5XG4gICAgICAgICAgICAgICAgICAgIHtkYXl9XG4gICAgICAgICAgICAgICAgICAgIGFkamFjZW50PXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAge2Z1bGxWaWV3fVxuICAgICAgICAgICAgICAgICAgICBvbjpkYXktY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgb246ZGF5LWRvdWJsZWNsaWNrXG4gICAgICAgICAgICAgICAgICAgIG9uOmRheS1jb250ZXh0LW1lbnVcbiAgICAgICAgICAgICAgICAgICAgb246ZXZlbnQtY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgb246ZXZlbnQtbW91c2VvdmVyXG4gICAgICAgICAgICAgICAgICAgIG9uOmV2ZW50LWNvbnRleHRcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgeyNlYWNoIG5leHQgYXMgZGF5fVxuICAgICAgICAgICAgICAgIHsjaWYgc2hvd1BhZH1cbiAgICAgICAgICAgICAgICAgICAgPERheSB7ZGF5fSBhZGphY2VudD17dHJ1ZX0ge2Z1bGxWaWV3fSAvPlxuICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiAvPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvZGl2PlxuICAgIHsva2V5fVxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuZmFudGFzeS1tb250aCB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KFxuICAgICAgICAgICAgdmFyKC0tY2FsZW5kYXItY29sdW1ucyksXG4gICAgICAgICAgICB2YXIoLS1jb2x1bW4td2lkdGhzKVxuICAgICAgICApO1xuXG4gICAgICAgIGdyaWQtYXV0by1yb3dzOiB2YXIoLS1jYWxlbmRhci1yb3dzKTtcbiAgICB9XG5cbiAgICAuZnVsbC12aWV3IHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgfVxuXG4gICAgLm1vbnRoIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMXJlbTtcbiAgICAgICAgcGFkZGluZzogMC4yNXJlbTtcbiAgICB9XG5cbiAgICAubW9udGgtbmFtZSB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gICAgLm1vbnRoIDpnbG9iYWwoLmZhbnRhc3ktZGF5LmRheSkge1xuICAgICAgICBwYWRkaW5nOiAwcHg7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IENhbGVuZGFySGVscGVyIGZyb20gXCJzcmMvaGVscGVyXCI7XG5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBtb250aDogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgeWVhcjogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgY3VycmVudDogc3RyaW5nO1xuXG4gICAgY29uc3QgbGVmdCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcImxlZnQtYXJyb3dcIik7XG4gICAgfTtcbiAgICBjb25zdCByaWdodCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInJpZ2h0LWFycm93XCIpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0dGluZ3MgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJnZWFyXCIpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImZhbnRhc3ktbmF2IG5hdlwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0aXRsZS1jb250YWluZXJcIj5cbiAgICAgICAgPGgzIGNsYXNzPVwiZmFudGFzeS10aXRsZSB0aXRsZVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYW50YXN5LW1vbnRoIG1vbnRoXCI+e21vbnRofTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFudGFzeS15ZWFyIHllYXJcIj57eWVhcn08L3NwYW4+XG4gICAgICAgIDwvaDM+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJpZ2h0LW5hdiBmYW50YXN5LXJpZ2h0LW5hdlwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJhcnJvdyBjYWxlbmRhci1jbGlja2FibGVcIlxuICAgICAgICAgICAgICAgIHVzZTpsZWZ0XG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlByZXZpb3VzIE1vbnRoXCJcbiAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJwcmV2aW91c1wiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJyZXNldC1idXR0b24gY2FsZW5kYXItY2xpY2thYmxlXCJcbiAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJyZXNldFwiKX1cbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiVG9kYXkgaXMge2N1cnJlbnR9XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3Bhbj5Ub2RheTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYXJyb3cgcmlnaHQgY2FsZW5kYXItY2xpY2thYmxlXCJcbiAgICAgICAgICAgICAgICB1c2U6cmlnaHRcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiTmV4dCBNb250aFwiXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eyhldnQpID0+IGRpc3BhdGNoKFwibmV4dFwiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjYWxlbmRhci1jbGlja2FibGVcIlxuICAgICAgICAgICAgICAgIHVzZTpzZXR0aW5nc1xuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDYWxlbmRhciBTZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eyhldnQpID0+IGRpc3BhdGNoKFwic2V0dGluZ3NcIiwgZXZ0KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuZmFudGFzeS1uYXYubmF2Lm5hdiB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMHB4O1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgICB9XG4gICAgLmNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC5mYW50YXN5LXRpdGxlIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBsaW5lLWhlaWdodDogMS4yNTtcbiAgICB9XG4gICAgLmZhbnRhc3ktcmlnaHQtbmF2IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgIH1cbiAgICAuY2FsZW5kYXItY2xpY2thYmxlIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG4gICAgLnRpdGxlLWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCB5ZWFyOiBzdHJpbmc7XG4gICAgZXhwb3J0IGxldCBhcnJvd3MgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGN1cnJlbnQ6IHN0cmluZztcblxuICAgIGNvbnN0IGxlZnQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJsZWZ0LWFycm93XCIpO1xuICAgIH07XG4gICAgY29uc3QgcmlnaHQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJyaWdodC1hcnJvd1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldHRpbmdzID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwiZ2VhclwiKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJmYW50YXN5LW5hdiBuYXZcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZmFudGFzeS15ZWFyLW5hdlwiPlxuICAgICAgICA8aDIgY2xhc3M9XCJmYW50YXN5LXRpdGxlXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhbnRhc3kteWVhclwiPnt5ZWFyfTwvc3Bhbj5cbiAgICAgICAgPC9oMj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicmlnaHQtbmF2IGZhbnRhc3ktcmlnaHQtbmF2XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgIHsjaWYgYXJyb3dzfVxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJhcnJvdyBjYWxlbmRhci1jbGlja2FibGVcIlxuICAgICAgICAgICAgICAgICAgICB1c2U6bGVmdFxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiUHJldmlvdXMgWWVhclwiXG4gICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaChcInByZXZpb3VzXCIpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzPVwicmVzZXQtYnV0dG9uIGNhbGVuZGFyLWNsaWNrYWJsZVwiXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKFwicmVzZXRcIil9XG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlRvZGF5IGlzIHtjdXJyZW50fVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHNwYW4+VG9kYXk8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgeyNpZiBhcnJvd3N9XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImFycm93IHJpZ2h0IGNhbGVuZGFyLWNsaWNrYWJsZVwiXG4gICAgICAgICAgICAgICAgICAgIHVzZTpyaWdodFxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiTmV4dCBZZWFyXCJcbiAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eyhldnQpID0+IGRpc3BhdGNoKFwibmV4dFwiKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzcz1cImNhbGVuZGFyLWNsaWNrYWJsZVwiXG4gICAgICAgICAgICAgICAgdXNlOnNldHRpbmdzXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkNhbGVuZGFyIFNldHRpbmdzXCJcbiAgICAgICAgICAgICAgICBvbjpjbGljaz17KGV2dCkgPT4gZGlzcGF0Y2goXCJzZXR0aW5nc1wiLCBldnQpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIDpnbG9iYWwoI2NhbGVuZGFyLWNvbnRhaW5lcikgLmZhbnRhc3ktbmF2Lm5hdi5uYXYge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwb3NpdGlvbjogc3RpY2t5O1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgfVxuICAgIC5mYW50YXN5LXllYXItbmF2IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIH1cblxuICAgIC5jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuZmFudGFzeS10aXRsZSB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gICAgLmZhbnRhc3ktcmlnaHQtbmF2IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgIH1cbiAgICAuY2FsZW5kYXItY2xpY2thYmxlIHtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgQ2FsZW5kYXJIZWxwZXIgZnJvbSBcInNyYy9oZWxwZXJcIjtcblxuICAgIGltcG9ydCB0eXBlIHsgTW9udGhIZWxwZXIgfSBmcm9tIFwic3JjL2hlbHBlclwiO1xuICAgIGltcG9ydCB7XG4gICAgICAgIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcixcbiAgICAgICAgZ2V0Q29udGV4dCxcbiAgICAgICAgb25EZXN0cm95LFxuICAgICAgICBvbk1vdW50LFxuICAgICAgICB0aWNrXG4gICAgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBXcml0YWJsZSB9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcblxuICAgIGltcG9ydCBNb250aCBmcm9tIFwiLi9Nb250aC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgWWVhck5hdiBmcm9tIFwiLi9ZZWFyTmF2LnN2ZWx0ZVwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGV4cG9ydCBsZXQgY3VycmVudDogc3RyaW5nO1xuXG4gICAgZXhwb3J0IGxldCB5ZWFyOiBudW1iZXI7XG4gICAgZXhwb3J0IGxldCBjb2x1bW5zOiBudW1iZXI7XG4gICAgZXhwb3J0IGxldCBmdWxsVmlldzogYm9vbGVhbjtcblxuICAgICQ6IHllYXJEaXNwbGF5ID0gY2FsZW5kYXIuZ2V0TmFtZUZvclllYXIoeWVhcik7XG5cbiAgICBsZXQgeWVhckNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG5cbiAgICBsZXQgZmlyc3RNb250aDogTW9udGhIZWxwZXI7XG4gICAgbGV0IGxhc3RNb250aDogTW9udGhIZWxwZXI7XG5cbiAgICBjb25zdCBjYWxlbmRhclN0b3JlID0gZ2V0Q29udGV4dDxXcml0YWJsZTxDYWxlbmRhckhlbHBlcj4+KFwiY2FsZW5kYXJcIik7XG4gICAgbGV0IGNhbGVuZGFyOiBDYWxlbmRhckhlbHBlcjtcbiAgICBjYWxlbmRhclN0b3JlLnN1YnNjcmliZSgoYykgPT4ge1xuICAgICAgICBjYWxlbmRhciA9IGM7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0cmFja2VkTW9udGhzOiBBcnJheTxNb250aCB8IEhUTUxIZWFkaW5nRWxlbWVudD4gPSBbXTtcblxuICAgIGNvbnN0IGRheVZpZXdTdG9yZSA9IGdldENvbnRleHQ8V3JpdGFibGU8Ym9vbGVhbj4+KFwiZGF5Vmlld1wiKTtcbiAgICBjb25zdCBtb29uU3RvcmUgPSBnZXRDb250ZXh0PFdyaXRhYmxlPGJvb2xlYW4+PihcImRpc3BsYXlNb29uc1wiKTtcblxuICAgIGNvbnN0IGFwcGVuZE9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlciAhPT0gYXBwZW5kT2JzZXJ2ZXIpIHJldHVybjtcbiAgICAgICAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIGlmICghZW50cmllc1swXS5pc0ludGVyc2VjdGluZykgcmV0dXJuO1xuICAgICAgICAgICAgYXBwZW5kT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFjYWxlbmRhci5jYW5Hb1RvTmV4dFllYXIobGFzdE1vbnRoLnllYXIpICYmXG4gICAgICAgICAgICAgICAgbGFzdE1vbnRoLm51bWJlciA9PT0gY2FsZW5kYXIuZGF0YS5tb250aHMubGVuZ3RoIC0gMVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGFwcGVuZE1vbnRoKCk7XG4gICAgICAgICAgICBkZXN0cm95KHRyYWNrZWRNb250aHMuc2hpZnQoKSk7XG4gICAgICAgICAgICByZXNldEFwcGVuZCgpO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByb290OiB5ZWFyQ29udGFpbmVyLFxuICAgICAgICAgICAgcm9vdE1hcmdpbjogXCIwcHhcIixcbiAgICAgICAgICAgIHRocmVzaG9sZDogMC4yNVxuICAgICAgICB9XG4gICAgKTtcbiAgICBjb25zdCByZXNldEFwcGVuZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSB5ZWFyQ29udGFpbmVyLmNoaWxkcmVuW3llYXJDb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMl07XG4gICAgICAgIGlmICghZWwpIHJldHVybjtcbiAgICAgICAgYXBwZW5kT2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XG4gICAgfTtcbiAgICBjb25zdCBhcHBlbmRIZWFkZXJPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcbiAgICAgICAgKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXIgIT09IGFwcGVuZEhlYWRlck9ic2VydmVyKSByZXR1cm47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgb2JzZXJ2ZXIgbG9va3MgYXQgdGhlIHByZXBlbmRlZCBoZWFkZXIgKGN1cnJlbnQgeWVhcikuIE9uY2UgdGhpcyBoZWFkZXIgaXMgZnVsbHkgaW4gdmlldywgdGhlIHllYXIgdmFyaWFibGUgc2hvdWxkIGJlIGRlY3JlbWVudGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWVudHJpZXMgJiYgIWVudHJpZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoZW50cmllc1swXS5pc0ludGVyc2VjdGluZykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCB5ZWFyUmVjdCA9IHllYXJDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIGlmIChlbnRyaWVzWzBdLmJvdW5kaW5nQ2xpZW50UmVjdC50b3AgPCB5ZWFyUmVjdC50b3ApIHtcbiAgICAgICAgICAgICAgICB5ZWFyICs9IDE7XG4gICAgICAgICAgICAgICAgcHJlcGVuZEhlYWRlck9ic2VydmVyLm9ic2VydmUoZW50cmllc1swXS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGFwcGVuZEhlYWRlck9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcm9vdDogeWVhckNvbnRhaW5lcixcbiAgICAgICAgICAgIHJvb3RNYXJnaW46IFwiMHB4XCIsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDBcbiAgICAgICAgfVxuICAgICk7XG4gICAgLyoqIFRoaXMgZnVuY3Rpb24gd2lsbCBhcHBlbmQgYSBuZXcgbW9udGggc3ZlbHRlIGluc3RhbmNlIHRvIHRoZSB5ZWFyIGNvbnRhaW5lci4gKi9cbiAgICBjb25zdCBhcHBlbmRNb250aCA9IChyZXNldCA9IHRydWUpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWNhbGVuZGFyLmNhbkdvVG9OZXh0WWVhcihsYXN0TW9udGgueWVhcikgJiZcbiAgICAgICAgICAgIGxhc3RNb250aC5udW1iZXIgPT09IGNhbGVuZGFyLmRhdGEubW9udGhzLmxlbmd0aCAtIDFcbiAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsYXN0TW9udGggPSBjYWxlbmRhci5nZXRNb250aChsYXN0TW9udGgubnVtYmVyICsgMSwgbGFzdE1vbnRoLnllYXIpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxhc3RNb250aC5udW1iZXIgPT09IDAgJiZcbiAgICAgICAgICAgICEoeWVhckNvbnRhaW5lci5sYXN0RWxlbWVudENoaWxkIGluc3RhbmNlb2YgSFRNTEhlYWRpbmdFbGVtZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHllYXJDb250YWluZXIuY3JlYXRlRWwoXCJoMlwiLCB7XG4gICAgICAgICAgICAgICAgdGV4dDogY2FsZW5kYXIuZ2V0TmFtZUZvclllYXIobGFzdE1vbnRoLnllYXIpLFxuICAgICAgICAgICAgICAgIGNsczogXCJmYW50YXN5LXRpdGxlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2tlZE1vbnRocy5wdXNoKGhlYWRlcik7XG4gICAgICAgICAgICBhcHBlbmRIZWFkZXJPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBhcHBlbmRIZWFkZXJPYnNlcnZlci5vYnNlcnZlKGhlYWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFja2VkTW9udGhzLnB1c2goY3JlYXRlTW9udGgobGFzdE1vbnRoLCBmYWxzZSkpO1xuXG4gICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgZmlyc3RNb250aCA9IGNhbGVuZGFyLmdldE1vbnRoKFxuICAgICAgICAgICAgICAgIChmaXJzdE1vbnRoPy5udW1iZXIgPz8gMCkgKyAxLFxuICAgICAgICAgICAgICAgIGZpcnN0TW9udGg/LnllYXIgPz8gMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXNldFByZXBlbmQoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcHJlcGVuZE9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlciAhPT0gcHJlcGVuZE9ic2VydmVyKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIWVudHJpZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIWVudHJpZXNbMF0uaXNJbnRlcnNlY3RpbmcpIHJldHVybjtcbiAgICAgICAgICAgIHByZXBlbmRPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBpZiAoIWZpcnN0TW9udGgpIHJldHVybjtcbiAgICAgICAgICAgIHByZXBlbmRNb250aCgpO1xuICAgICAgICAgICAgZGVzdHJveSh0cmFja2VkTW9udGhzLnBvcCgpKTtcbiAgICAgICAgICAgIHJlc2V0UHJlcGVuZCgpO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByb290OiB5ZWFyQ29udGFpbmVyLFxuICAgICAgICAgICAgcm9vdE1hcmdpbjogXCIwcHhcIixcbiAgICAgICAgICAgIHRocmVzaG9sZDogMC4yNVxuICAgICAgICB9XG4gICAgKTtcbiAgICBjb25zdCByZXNldFByZXBlbmQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0geWVhckNvbnRhaW5lci5jaGlsZHJlblsxXTtcbiAgICAgICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgICAgICBwcmVwZW5kT2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XG4gICAgfTtcbiAgICBjb25zdCBwcmVwZW5kSGVhZGVyT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgICAgIChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgaWYgKG9ic2VydmVyICE9PSBwcmVwZW5kSGVhZGVyT2JzZXJ2ZXIpIHJldHVybjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBvYnNlcnZlciBsb29rcyBhdCB0aGUgcHJlcGVuZGVkIGhlYWRlciAoY3VycmVudCB5ZWFyKS4gT25jZSB0aGlzIGhlYWRlciBpcyBmdWxseSBpbiB2aWV3LCB0aGUgeWVhciB2YXJpYWJsZSBzaG91bGQgYmUgZGVjcmVtZW50ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghZW50cmllcyAmJiAhZW50cmllcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChlbnRyaWVzWzBdLmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgeWVhciAtPSAxO1xuICAgICAgICAgICAgICAgIGFwcGVuZEhlYWRlck9ic2VydmVyLm9ic2VydmUoZW50cmllc1swXS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHByZXBlbmRIZWFkZXJPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJvb3Q6IHllYXJDb250YWluZXIsXG4gICAgICAgICAgICByb290TWFyZ2luOiBcIjBweFwiLFxuICAgICAgICAgICAgdGhyZXNob2xkOiAwXG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLyoqIFRoaXMgZnVuY3Rpb24gd2lsbCBwcmVwZW5kIGEgbmV3IG1vbnRoIHN2ZWx0ZSBpbnN0YW5jZSB0byB0aGUgeWVhciBjb250YWluZXIuICovXG4gICAgY29uc3QgcHJlcGVuZE1vbnRoID0gKHJlc2V0ID0gdHJ1ZSkgPT4ge1xuICAgICAgICBmaXJzdE1vbnRoID0gY2FsZW5kYXIuZ2V0TW9udGgoZmlyc3RNb250aC5udW1iZXIgLSAxLCBmaXJzdE1vbnRoLnllYXIpO1xuXG4gICAgICAgIGlmICghZmlyc3RNb250aCkgcmV0dXJuO1xuICAgICAgICB0cmFja2VkTW9udGhzLnVuc2hpZnQoY3JlYXRlTW9udGgoZmlyc3RNb250aCwgdHJ1ZSkpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBmaXJzdE1vbnRoLm51bWJlciA9PT0gMCAmJlxuICAgICAgICAgICAgISh5ZWFyQ29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkIGluc3RhbmNlb2YgSFRNTEhlYWRpbmdFbGVtZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGNyZWF0ZUVsKFwiaDJcIiwge1xuICAgICAgICAgICAgICAgIHRleHQ6IGNhbGVuZGFyLmdldE5hbWVGb3JZZWFyKGZpcnN0TW9udGgueWVhciksXG4gICAgICAgICAgICAgICAgY2xzOiBcImZhbnRhc3ktdGl0bGVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB5ZWFyQ29udGFpbmVyLnByZXBlbmQoaGVhZGVyKTtcbiAgICAgICAgICAgIHRyYWNrZWRNb250aHMudW5zaGlmdChoZWFkZXIpO1xuXG4gICAgICAgICAgICBwcmVwZW5kSGVhZGVyT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgcHJlcGVuZEhlYWRlck9ic2VydmVyLm9ic2VydmUoaGVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogVXBkYXRlIHRoZSBsYXN0IG1vbnRoIHRvIHRoZSBwcmV2aW91cyBsYXN0IG1vbnRoICovXG5cbiAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICBsYXN0TW9udGggPSBjYWxlbmRhci5nZXRNb250aChsYXN0TW9udGgubnVtYmVyIC0gMSwgbGFzdE1vbnRoLnllYXIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc2V0QXBwZW5kKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWF0ZU1vbnRoID0gKG1vbnRoOiBNb250aEhlbHBlciwgYW5jaG9yOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGNvbnN0IHN2ZWx0ZUluc3RhbmNlID0gbmV3IE1vbnRoKHtcbiAgICAgICAgICAgIHRhcmdldDogeWVhckNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcjogYW5jaG9yID8geWVhckNvbnRhaW5lci5jaGlsZHJlblswXSA6IG51bGwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgICAgICAgICAgICBmdWxsVmlldzogZmFsc2UsXG4gICAgICAgICAgICAgICAgeWVhclZpZXc6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sdW1ucyxcbiAgICAgICAgICAgICAgICB3ZWVrczogY2FsZW5kYXIud2Vla2RheXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHNob3dQYWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChbXG4gICAgICAgICAgICAgICAgW1wiZGF5Vmlld1wiLCBkYXlWaWV3U3RvcmVdLFxuICAgICAgICAgICAgICAgIFtcImRpc3BsYXlNb29uc1wiLCBtb29uU3RvcmVdXG4gICAgICAgICAgICBdKVxuICAgICAgICB9KTtcbiAgICAgICAgc3ZlbHRlSW5zdGFuY2UuJG9uKFwiZGF5LWNsaWNrXCIsIChlKSA9PiBkaXNwYXRjaChcImRheS1jbGlja1wiLCBlLmRldGFpbCkpO1xuICAgICAgICBzdmVsdGVJbnN0YW5jZS4kb24oXCJkYXktZG91YmxlY2xpY2tcIiwgKGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaChcImRheS1kb3VibGVjbGlja1wiLCBlLmRldGFpbClcbiAgICAgICAgKTtcbiAgICAgICAgc3ZlbHRlSW5zdGFuY2UuJG9uKFwiZGF5LWNvbnRleHQtbWVudVwiLCAoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKFwiZGF5LWNvbnRleHQtbWVudVwiLCBlLmRldGFpbClcbiAgICAgICAgKTtcbiAgICAgICAgc3ZlbHRlSW5zdGFuY2UuJG9uKFwiZXZlbnQtbW91c2VvdmVyXCIsIChlKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goXCJldmVudC1tb3VzZW92ZXJcIiwgZS5kZXRhaWwpXG4gICAgICAgICk7XG4gICAgICAgIHN2ZWx0ZUluc3RhbmNlLiRvbihcImV2ZW50LW1vdXNlb3ZlclwiLCAoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKFwiZXZlbnQtbW91c2VvdmVyXCIsIGUuZGV0YWlsKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gc3ZlbHRlSW5zdGFuY2U7XG4gICAgfTtcblxuICAgIGNvbnN0IGRlc3Ryb3kgPSAoaXRlbTogTW9udGggfCBIVE1MSGVhZGluZ0VsZW1lbnQpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBIVE1MSGVhZGluZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGl0ZW0uZGV0YWNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtLiRkZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVzZXQgPSBhc3luYyAoZnVsbCA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2YgdHJhY2tlZE1vbnRocykge1xuICAgICAgICAgICAgZGVzdHJveShpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICB0cmFja2VkTW9udGhzLnNwbGljZSgwLCB0cmFja2VkTW9udGhzLmxlbmd0aCk7XG4gICAgICAgIHllYXJDb250YWluZXIuZW1wdHkoKTtcblxuICAgICAgICBhd2FpdCB0aWNrKCk7XG5cbiAgICAgICAgeWVhciA9IGNhbGVuZGFyLmN1cnJlbnQueWVhcjtcblxuICAgICAgICBmaXJzdE1vbnRoID0gY2FsZW5kYXIuZ2V0TW9udGgoXG4gICAgICAgICAgICBjYWxlbmRhci5kaXNwbGF5ZWQubW9udGggLSAxLFxuICAgICAgICAgICAgY2FsZW5kYXIuZGlzcGxheWVkLnllYXJcbiAgICAgICAgKTtcbiAgICAgICAgLyogZmlyc3RNb250aCA9IG1vbnRoc1swXTsqL1xuICAgICAgICBsYXN0TW9udGggPSBmaXJzdE1vbnRoO1xuICAgICAgICAvKiB0cmFja2VkTW9udGhzLnB1c2goY3JlYXRlTW9udGgoZmlyc3RNb250aCwgZmFsc2UpKTsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxlbmRhci5kYXRhLm1vbnRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXBwZW5kTW9udGgoZmFsc2UpO1xuICAgICAgICAgICAgLyogdHJhY2tlZE1vbnRocy5wdXNoKGNyZWF0ZU1vbnRoKG1vbnRoLCBmYWxzZSkpOyAqL1xuICAgICAgICB9XG4gICAgICAgIHByZXBlbmRNb250aChmYWxzZSk7XG5cbiAgICAgICAgYXdhaXQgdGljaygpO1xuICAgICAgICAvKiogQWxsIG1vbnRocyBhcmUgY3JlYXRlZCB3aGVuIHllYXIgdmlldyBpcyByZXNldCwgc28gY3VycmVudCBtb250aCBleGlzdHMuICovXG4gICAgICAgIGNvbnN0IGN1cnJlbnRFbCA9IHllYXJDb250YWluZXIucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGAjTU9OVEgtJHtjYWxlbmRhci5jdXJyZW50TW9udGguaWR9LSR7eWVhcn1gXG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnRFbC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcbiAgICAgICAgaWYgKGZ1bGwpIHtcbiAgICAgICAgICAgIHNjcm9sbCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG9uRGVzdHJveSgoKSA9PiB7XG4gICAgICAgIHByZXBlbmRPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIGFwcGVuZE9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgcHJlcGVuZEhlYWRlck9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgYXBwZW5kSGVhZGVyT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuXG4gICAgb25Nb3VudChyZXNldCk7XG5cbiAgICBjb25zdCBzY3JvbGwgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRpY2soKTtcbiAgICAgICAgcHJlcGVuZE9ic2VydmVyLm9ic2VydmUoeWVhckNvbnRhaW5lci5jaGlsZHJlblsxXSk7XG4gICAgICAgIGFwcGVuZE9ic2VydmVyLm9ic2VydmUoXG4gICAgICAgICAgICB5ZWFyQ29udGFpbmVyLmNoaWxkcmVuW3llYXJDb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMl1cbiAgICAgICAgKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ5ZWFyLXZpZXdcIj5cbiAgICA8WWVhck5hdlxuICAgICAgICB5ZWFyPXt5ZWFyRGlzcGxheX1cbiAgICAgICAge2N1cnJlbnR9XG4gICAgICAgIG9uOm5leHRcbiAgICAgICAgb246cHJldmlvdXNcbiAgICAgICAgb246cmVzZXQ9eygpID0+IHJlc2V0KHRydWUpfVxuICAgICAgICBvbjpzZXR0aW5nc1xuICAgIC8+XG4gICAgPGRpdlxuICAgICAgICBjbGFzcz1cInllYXJcIlxuICAgICAgICBjbGFzczpmdWxsLXZpZXc9e2Z1bGxWaWV3fVxuICAgICAgICBiaW5kOnRoaXM9e3llYXJDb250YWluZXJ9XG4gICAgICAgIG9uOnNjcm9sbHxvbmNlPXtzY3JvbGx9XG4gICAgLz5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnllYXItdmlldyB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cbiAgICAueWVhciB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnI7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIGZsZXg6IDE7XG4gICAgfVxuICAgIC55ZWFyOm5vdCguZnVsbC12aWV3KSB7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuICAgIGltcG9ydCB0eXBlIENhbGVuZGFySGVscGVyIGZyb20gXCJzcmMvaGVscGVyXCI7XG5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGdldENvbnRleHQsIG9uTW91bnQsIHRpY2sgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBXcml0YWJsZSB9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcblxuICAgIGltcG9ydCBZZWFyTmF2IGZyb20gXCIuL1llYXJOYXYuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFllYXJWaWV3Q29udGFpbmVyIGZyb20gXCIuL1llYXJWaWV3Q29udGFpbmVyLnN2ZWx0ZVwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IGNhbGVuZGFyU3RvcmUgPSBnZXRDb250ZXh0PFdyaXRhYmxlPENhbGVuZGFySGVscGVyPj4oXCJjYWxlbmRhclwiKTtcbiAgICBjb25zdCBkYXlWaWV3U3RvcmUgPSBnZXRDb250ZXh0PFdyaXRhYmxlPGJvb2xlYW4+PihcImRheVZpZXdcIik7XG4gICAgY29uc3QgbW9vblN0b3JlID0gZ2V0Q29udGV4dDxXcml0YWJsZTxib29sZWFuPj4oXCJkaXNwbGF5TW9vbnNcIik7XG4gICAgbGV0IGNhbGVuZGFyOiBDYWxlbmRhckhlbHBlcjtcbiAgICBjYWxlbmRhclN0b3JlLnN1YnNjcmliZSgoYykgPT4ge1xuICAgICAgICBjYWxlbmRhciA9IGM7XG4gICAgfSk7XG5cbiAgICBleHBvcnQgbGV0IHllYXI6IG51bWJlcjtcbiAgICBleHBvcnQgbGV0IGN1cnJlbnQ6IHN0cmluZztcbiAgICBleHBvcnQgbGV0IGNvbHVtbnM6IG51bWJlcjtcblxuICAgICQ6IHllYXJEaXNwbGF5ID0gY2FsZW5kYXIuZ2V0TmFtZUZvclllYXIoeWVhcik7XG4gICAgbGV0IHllYXJDb250YWluZXI6IEhUTUxFbGVtZW50O1xuXG4gICAgLyoqIFNldHVwIGZvciBldmVudHVhbCBpbmZpbml0ZSBzY3JvbGwgb2YgYmlnIHllYXIgdmlldy4gKi9cbiAgICBjb25zdCBjcmVhdGVZZWFyID0gKHllYXI6IG51bWJlciwgYW5jaG9yOiBib29sZWFuID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgbW9udGhzID0gY2FsZW5kYXIuZ2V0TW9udGhzRm9yWWVhcih5ZWFyKTtcbiAgICAgICAgY29uc3Qgc3ZlbHRlSW5zdGFuY2UgPSBuZXcgWWVhclZpZXdDb250YWluZXIoe1xuICAgICAgICAgICAgdGFyZ2V0OiB5ZWFyQ29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yOiBhbmNob3IgPyB5ZWFyQ29udGFpbmVyLmNoaWxkcmVuWzBdIDogbnVsbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgICAgICAgICAgZnVsbFZpZXc6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sdW1uc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRleHQ6IG5ldyBNYXAoW1xuICAgICAgICAgICAgICAgIFtcImRheVZpZXdcIiwgZGF5Vmlld1N0b3JlXSxcbiAgICAgICAgICAgICAgICBbXCJkaXNwbGF5TW9vbnNcIiwgbW9vblN0b3JlXVxuICAgICAgICAgICAgXSlcbiAgICAgICAgfSk7XG4gICAgICAgIHN2ZWx0ZUluc3RhbmNlLiRvbihcImRheS1jbGlja1wiLCAoZSkgPT4gZGlzcGF0Y2goXCJkYXktY2xpY2tcIiwgZS5kZXRhaWwpKTtcbiAgICAgICAgc3ZlbHRlSW5zdGFuY2UuJG9uKFwiZGF5LWRvdWJsZWNsaWNrXCIsIChlKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goXCJkYXktZG91YmxlY2xpY2tcIiwgZS5kZXRhaWwpXG4gICAgICAgICk7XG4gICAgICAgIHN2ZWx0ZUluc3RhbmNlLiRvbihcImRheS1jb250ZXh0LW1lbnVcIiwgKGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaChcImRheS1jb250ZXh0LW1lbnVcIiwgZS5kZXRhaWwpXG4gICAgICAgICk7XG4gICAgICAgIHN2ZWx0ZUluc3RhbmNlLiRvbihcImV2ZW50LW1vdXNlb3ZlclwiLCAoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKFwiZXZlbnQtbW91c2VvdmVyXCIsIGUuZGV0YWlsKVxuICAgICAgICApO1xuICAgICAgICBzdmVsdGVJbnN0YW5jZS4kb24oXCJldmVudC1tb3VzZW92ZXJcIiwgKGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaChcImV2ZW50LW1vdXNlb3ZlclwiLCBlLmRldGFpbClcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHN2ZWx0ZUluc3RhbmNlO1xuICAgIH07XG4gICAgY29uc3QgZGVzdHJveSA9IChpdGVtOiBZZWFyVmlld0NvbnRhaW5lciB8IEhUTUxIZWFkaW5nRWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEhUTUxIZWFkaW5nRWxlbWVudCkge1xuICAgICAgICAgICAgaXRlbS5kZXRhY2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uJGRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB5ZWFyczogQXJyYXk8SFRNTEhlYWRpbmdFbGVtZW50IHwgWWVhclZpZXdDb250YWluZXI+ID0gW107XG5cbiAgICBjb25zdCBuZXh0ID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWNhbGVuZGFyLmNhbkdvVG9OZXh0WWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICBcIlRoaXMgaXMgdGhlIGxhc3QgeWVhci4gQWRkaXRpb25hbCB5ZWFycyBjYW4gYmUgY3JlYXRlZCBpbiBzZXR0aW5ncy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB5ZWFyID0geWVhciArIDE7XG4gICAgICAgIHJlc2V0KHllYXIpO1xuICAgIH07XG4gICAgY29uc3QgcHJldmlvdXMgPSAoKSA9PiB7XG4gICAgICAgIGlmICh5ZWFyID09PSAxKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiVGhpcyBpcyB0aGUgZWFybGllc3QgeWVhci5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgeWVhciA9IHllYXIgLSAxO1xuICAgICAgICByZXNldCh5ZWFyKTtcbiAgICB9O1xuXG4gICAgY29uc3QgY3VycmVudFllYXIgPSAoKSA9PiB7XG4gICAgICAgIHllYXIgPSBjYWxlbmRhci5jdXJyZW50LnllYXI7XG4gICAgICAgIHJlc2V0KHllYXIpO1xuICAgIH07XG5cbiAgICBjb25zdCByZXNldCA9IGFzeW5jICh5ZWFyPzogbnVtYmVyKSA9PiB7XG4gICAgICAgIHllYXJzLmZvckVhY2goKGVsKSA9PiBkZXN0cm95KGVsKSk7XG4gICAgICAgIHllYXJDb250YWluZXIuZW1wdHkoKTtcblxuICAgICAgICBhd2FpdCB0aWNrKCk7XG5cbiAgICAgICAgeWVhciA9IHllYXI7XG5cbiAgICAgICAgeWVhcnMucHVzaChjcmVhdGVZZWFyKHllYXIpKTtcbiAgICB9O1xuICAgIG9uTW91bnQoKCkgPT4geWVhcnMucHVzaChjcmVhdGVZZWFyKHllYXIpKSk7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInllYXItdmlld1wiPlxuICAgIDxZZWFyTmF2XG4gICAgICAgIHllYXI9e3llYXJEaXNwbGF5fVxuICAgICAgICB7Y3VycmVudH1cbiAgICAgICAgYXJyb3dzPXt0cnVlfVxuICAgICAgICBvbjpuZXh0PXsoKSA9PiBuZXh0KCl9XG4gICAgICAgIG9uOnByZXZpb3VzPXsoKSA9PiBwcmV2aW91cygpfVxuICAgICAgICBvbjpyZXNldD17KCkgPT4gY3VycmVudFllYXIoKX1cbiAgICAgICAgb246c2V0dGluZ3NcbiAgICAvPlxuICAgIDxkaXYgY2xhc3M9XCJ5ZWFyLWNvbnRhaW5lclwiIGJpbmQ6dGhpcz17eWVhckNvbnRhaW5lcn0gLz5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnllYXItdmlldyB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cbiAgICAueWVhci1jb250YWluZXIge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBNb250aEhlbHBlciB9IGZyb20gXCJzcmMvaGVscGVyXCI7XG5cbiAgICBpbXBvcnQgTW9udGggZnJvbSBcIi4vTW9udGguc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IGZ1bGxWaWV3OiBib29sZWFuO1xuICAgIGV4cG9ydCBsZXQgbW9udGhzOiBNb250aEhlbHBlcltdO1xuICAgIGV4cG9ydCBsZXQgY29sdW1uczogbnVtYmVyO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ5ZWFyXCIgY2xhc3M6ZnVsbC12aWV3PXtmdWxsVmlld30+XG4gICAgeyNlYWNoIG1vbnRocyBhcyBtb250aH1cbiAgICAgICAgPE1vbnRoXG4gICAgICAgICAgICB7bW9udGh9XG4gICAgICAgICAgICBmdWxsVmlldz17ZmFsc2V9XG4gICAgICAgICAgICB5ZWFyVmlldz17dHJ1ZX1cbiAgICAgICAgICAgIHtjb2x1bW5zfVxuICAgICAgICAgICAgd2Vla3M9e21vbnRoLmNhbGVuZGFyLndlZWtkYXlzLmxlbmd0aH1cbiAgICAgICAgICAgIHNob3dQYWQ9e2ZhbHNlfVxuICAgICAgICAgICAgb246ZGF5LWNsaWNrXG4gICAgICAgICAgICBvbjpkYXktZG91YmxlY2xpY2tcbiAgICAgICAgICAgIG9uOmRheS1jb250ZXh0LW1lbnVcbiAgICAgICAgICAgIG9uOmV2ZW50LWNsaWNrXG4gICAgICAgICAgICBvbjpldmVudC1tb3VzZW92ZXJcbiAgICAgICAgLz5cbiAgICB7L2VhY2h9XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC55ZWFyIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgZmxleDogMTtcbiAgICB9XG4gICAgLnllYXI6bm90KC5mdWxsLXZpZXcpIHtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIENhbGVuZGFySGVscGVyIGZyb20gXCJzcmMvaGVscGVyXCI7XG5cbiAgICBpbXBvcnQgeyBzZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuICAgIGltcG9ydCBEYXlWaWV3IGZyb20gXCIuL0RheVZpZXcuc3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgTW9udGhWaWV3IGZyb20gXCIuL01vbnRoLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBOYXYgZnJvbSBcIi4vTmF2LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBZZWFyVmlldyBmcm9tIFwiLi9ZZWFyVmlldy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgWWVhclZpZXdCaWcgZnJvbSBcIi4vWWVhclZpZXdCaWcuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IGZ1bGxWaWV3OiBib29sZWFuID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBkYXlWaWV3OiBib29sZWFuID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCB5ZWFyVmlldzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgY2FsZW5kYXI6IENhbGVuZGFySGVscGVyO1xuICAgIGV4cG9ydCBsZXQgbW9vbnM6IGJvb2xlYW47XG4gICAgZXhwb3J0IGxldCBkaXNwbGF5RGF5TnVtYmVyOiBib29sZWFuO1xuICAgIGV4cG9ydCBsZXQgZGlzcGxheVdlZWtzOiBib29sZWFuO1xuXG4gICAgJDoge1xuICAgICAgICBpZiAoeWVhclZpZXcpIGRheVZpZXcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXlWaWV3U3RvcmUgPSB3cml0YWJsZShkYXlWaWV3KTtcbiAgICBjb25zdCBtb29uU3RvcmUgPSB3cml0YWJsZShtb29ucyk7XG4gICAgY29uc3QgY2FsZW5kYXJTdG9yZSA9IHdyaXRhYmxlKGNhbGVuZGFyKTtcbiAgICBzZXRDb250ZXh0KFwiZGF5Vmlld1wiLCBkYXlWaWV3U3RvcmUpO1xuICAgIHNldENvbnRleHQoXCJkaXNwbGF5TW9vbnNcIiwgbW9vblN0b3JlKTtcbiAgICBzZXRDb250ZXh0KFwiY2FsZW5kYXJcIiwgY2FsZW5kYXJTdG9yZSk7XG5cbiAgICAkOiBkYXlWaWV3U3RvcmUuc2V0KGRheVZpZXcpO1xuICAgICQ6IG1vb25TdG9yZS5zZXQobW9vbnMpO1xuICAgICQ6IGNhbGVuZGFyU3RvcmUuc2V0KGNhbGVuZGFyKTtcblxuICAgIGNhbGVuZGFyLm9uKFwibW9udGgtdXBkYXRlXCIsICgpID0+IHtcbiAgICAgICAgeWVhciA9IGNhbGVuZGFyLmRpc3BsYXllZC55ZWFyO1xuICAgICAgICB5ZWFyRGlzcGxheSA9IGNhbGVuZGFyLmdldE5hbWVGb3JZZWFyKGNhbGVuZGFyLmRpc3BsYXllZC55ZWFyKTtcbiAgICAgICAgbW9udGggPSBjYWxlbmRhci5jdXJyZW50TW9udGg7XG4gICAgICAgIHdlZWtzID0gY2FsZW5kYXIud2Vla3NPZk1vbnRoKG1vbnRoKTtcbiAgICAgICAgZmlyc3RXZWVrID0gY2FsZW5kYXIud2Vla051bWJlcnNPZk1vbnRoKG1vbnRoKTtcbiAgICB9KTtcblxuICAgICQ6IHdlZWtkYXlzID0gY2FsZW5kYXIud2Vla2RheXM7XG4gICAgJDogeWVhciA9IGNhbGVuZGFyLmRpc3BsYXllZC55ZWFyO1xuICAgICQ6IHllYXJEaXNwbGF5ID0gY2FsZW5kYXIuZ2V0TmFtZUZvclllYXIoY2FsZW5kYXIuZGlzcGxheWVkLnllYXIpO1xuICAgICQ6IG1vbnRoID0gY2FsZW5kYXIuY3VycmVudE1vbnRoO1xuICAgICQ6IGZpcnN0V2VlayA9IGNhbGVuZGFyLndlZWtOdW1iZXJzT2ZNb250aChtb250aCk7XG4gICAgJDogd2Vla3MgPSBjYWxlbmRhci53ZWVrc09mTW9udGgobW9udGgpO1xuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgICBpZD1cImNhbGVuZGFyLWNvbnRhaW5lclwiXG4gICAgY2xhc3M9XCJmYW50YXN5LWNhbGVuZGFyXCJcbiAgICBjbGFzczpmdWxsLXZpZXc9e2Z1bGxWaWV3fVxuICAgIGNsYXNzOnllYXItdmlldz17eWVhclZpZXd9XG4gICAgc3R5bGU9XCItLWNhbGVuZGFyLWNvbHVtbnM6IHtjYWxlbmRhci53ZWVrZGF5c1xuICAgICAgICAubGVuZ3RofTsgIC0tY29sdW1uLXdpZHRoczogeygxIC8gY2FsZW5kYXIud2Vla2RheXMubGVuZ3RoKSAqXG4gICAgICAgIDEwMH0lOyAtLWNhbGVuZGFyLXJvd3M6IHtjYWxlbmRhci53ZWVrc1BlckN1cnJlbnRNb250aH07XCJcbj5cbiAgICB7I2lmIHllYXJWaWV3ICYmICFmdWxsVmlld31cbiAgICAgICAgPFllYXJWaWV3XG4gICAgICAgICAgICB7eWVhcn1cbiAgICAgICAgICAgIHtmdWxsVmlld31cbiAgICAgICAgICAgIGNvbHVtbnM9e3dlZWtkYXlzLmxlbmd0aH1cbiAgICAgICAgICAgIGN1cnJlbnQ9e2NhbGVuZGFyLmRpc3BsYXllZERhdGV9XG4gICAgICAgICAgICBvbjpuZXh0PXsoKSA9PiBjYWxlbmRhci5nb1RvTmV4dFllYXIoKX1cbiAgICAgICAgICAgIG9uOnByZXZpb3VzPXsoKSA9PiBjYWxlbmRhci5nb1RvUHJldmlvdXNZZWFyKCl9XG4gICAgICAgICAgICBvbjpyZXNldFxuICAgICAgICAgICAgb246c2V0dGluZ3NcbiAgICAgICAgICAgIG9uOmRheS1jbGlja1xuICAgICAgICAgICAgb246ZGF5LWRvdWJsZWNsaWNrXG4gICAgICAgICAgICBvbjpkYXktY29udGV4dC1tZW51XG4gICAgICAgICAgICBvbjpldmVudC1jbGlja1xuICAgICAgICAgICAgb246ZXZlbnQtbW91c2VvdmVyXG4gICAgICAgIC8+XG4gICAgezplbHNlIGlmIHllYXJWaWV3fVxuICAgICAgICA8WWVhclZpZXdCaWdcbiAgICAgICAgICAgIHt5ZWFyfVxuICAgICAgICAgICAgY29sdW1ucz17d2Vla2RheXMubGVuZ3RofVxuICAgICAgICAgICAgY3VycmVudD17Y2FsZW5kYXIuZGlzcGxheWVkRGF0ZX1cbiAgICAgICAgICAgIG9uOm5leHQ9eygpID0+IGNhbGVuZGFyLmdvVG9OZXh0WWVhcigpfVxuICAgICAgICAgICAgb246cHJldmlvdXM9eygpID0+IGNhbGVuZGFyLmdvVG9QcmV2aW91c1llYXIoKX1cbiAgICAgICAgICAgIG9uOnJlc2V0XG4gICAgICAgICAgICBvbjpzZXR0aW5nc1xuICAgICAgICAgICAgb246ZGF5LWNsaWNrXG4gICAgICAgICAgICBvbjpkYXktZG91YmxlY2xpY2tcbiAgICAgICAgICAgIG9uOmRheS1jb250ZXh0LW1lbnVcbiAgICAgICAgICAgIG9uOmV2ZW50LWNsaWNrXG4gICAgICAgICAgICBvbjpldmVudC1tb3VzZW92ZXJcbiAgICAgICAgLz5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxOYXZcbiAgICAgICAgICAgIG1vbnRoPXttb250aC5uYW1lfVxuICAgICAgICAgICAgeWVhcj17eWVhckRpc3BsYXl9XG4gICAgICAgICAgICBjdXJyZW50PXtjYWxlbmRhci5kaXNwbGF5ZWREYXRlfVxuICAgICAgICAgICAgb246bmV4dD17KCkgPT4gY2FsZW5kYXIuZ29Ub05leHQoKX1cbiAgICAgICAgICAgIG9uOnByZXZpb3VzPXsoKSA9PiBjYWxlbmRhci5nb1RvUHJldmlvdXMoKX1cbiAgICAgICAgICAgIG9uOnJlc2V0XG4gICAgICAgICAgICBvbjpzZXR0aW5nc1xuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9udGgtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwid2Vla3NcIj5cbiAgICAgICAgICAgICAgICB7I2lmIGRpc3BsYXlXZWVrc31cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ3ZWVrLW51bSB3ZWVrZGF5IGZhbnRhc3ktd2Vla2RheVwiPlc8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3ZWVrLW51bS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsjZWFjaCBbLi4uQXJyYXkod2Vla3MpLmtleXMoKV0gYXMgbnVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwid2Vlay1udW1cIj57Zmlyc3RXZWVrICsgMSArIG51bX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb250aC12aWV3XCI+XG4gICAgICAgICAgICAgICAgPCEtLSB7I2lmIG1vbnRoLnR5cGUgPT0gXCJtb250aFwifSAtLT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid2Vla2RheXNcIj5cbiAgICAgICAgICAgICAgICAgICAgeyNlYWNoIHdlZWtkYXlzIGFzIGRheX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwid2Vla2RheSBmYW50YXN5LXdlZWtkYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID57ZGF5Lm5hbWUuc2xpY2UoMCwgMyl9PC9zcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8IS0tIHsvaWZ9IC0tPlxuXG4gICAgICAgICAgICAgICAgPE1vbnRoVmlld1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zPXt3ZWVrZGF5cy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIHt3ZWVrc31cbiAgICAgICAgICAgICAgICAgICAge21vbnRofVxuICAgICAgICAgICAgICAgICAgICB7ZnVsbFZpZXd9XG4gICAgICAgICAgICAgICAgICAgIG9uOmRheS1jbGlja1xuICAgICAgICAgICAgICAgICAgICBvbjpkYXktZG91YmxlY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgb246ZGF5LWNvbnRleHQtbWVudVxuICAgICAgICAgICAgICAgICAgICBvbjpldmVudC1jbGlja1xuICAgICAgICAgICAgICAgICAgICBvbjpldmVudC1tb3VzZW92ZXJcbiAgICAgICAgICAgICAgICAgICAgb246ZXZlbnQtY29udGV4dFxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cbjwvZGl2PlxueyNpZiBkYXlWaWV3ICYmICFmdWxsVmlld31cbiAgICA8aHIgLz5cbiAgICA8RGF5Vmlld1xuICAgICAgICB7ZGlzcGxheURheU51bWJlcn1cbiAgICAgICAgb246Y2xvc2U9eygpID0+IChkYXlWaWV3ID0gZmFsc2UpfVxuICAgICAgICBvbjpldmVudC1jbGlja1xuICAgICAgICBvbjpldmVudC1tb3VzZW92ZXJcbiAgICAgICAgb246ZXZlbnQtY29udGV4dFxuICAgICAgICBvbjpldmVudFxuICAgIC8+XG57L2lmfVxuXG48c3R5bGU+XG4gICAgI2NhbGVuZGFyLWNvbnRhaW5lci55ZWFyLXZpZXcge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICAgICNjYWxlbmRhci1jb250YWluZXIuZmFudGFzeS1jYWxlbmRhci5mdWxsLXZpZXcge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgcGFkZGluZzogMCAwLjVyZW0gMC41cmVtO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG5cbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW47XG4gICAgfVxuXG4gICAgLmZhbnRhc3ktY2FsZW5kYXIuZnVsbC12aWV3IC5tb250aC1jb250YWluZXIge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuXG4gICAgLm1vbnRoLWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuICAgIC5tb250aC12aWV3IHtcbiAgICAgICAgZmxleC1ncm93OiAyO1xuICAgIH1cbiAgICAud2Vla3Mge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xuICAgIH1cbiAgICAud2Vlay1udW0tY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQodmFyKC0tY2FsZW5kYXItcm93cyksIGF1dG8pO1xuICAgICAgICBwYWRkaW5nOiAwLjI1cmVtIDA7XG4gICAgfVxuICAgIC53ZWVrLW51bSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItdGV4dC1kYXkpO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcGFkZGluZzogMnB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB9XG4gICAgLndlZWtkYXlzIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQodmFyKC0tY2FsZW5kYXItY29sdW1ucyksIDFmcik7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcbiAgICAgICAgcGFkZGluZzogMCAwLjI1cmVtO1xuICAgICAgICBnYXA6IDJweDtcbiAgICB9XG4gICAgLndlZWtkYXkge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWhlYWRpbmcpO1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItdGV4dC1oZWFkaW5nKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjZlbTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgICAgICAgcGFkZGluZzogNHB4O1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIH1cbiAgICBociB7XG4gICAgICAgIG1hcmdpbjogMXJlbSAwO1xuICAgIH1cblxuICAgIDpnbG9iYWwoLm1vb24tY29udGFpbmVyKSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiaW1wb3J0IHsgcmVuYW1lIH0gZnJvbSBcImZzXCI7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBUQWJzdHJhY3RGaWxlLFxuICAgIFRGaWxlLFxuICAgIFRGb2xkZXIsXG4gICAgVmF1bHQsXG4gICAgZ2V0QWxsVGFnc1xufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIHsgQ2FsZW5kYXIsIEV2ZW50IH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbmltcG9ydCB0eXBlIEZhbnRhc3lDYWxlbmRhciBmcm9tIFwic3JjL21haW5cIjtcbi8vaGF2ZSB0byBpZ25vcmUgdW50aWwgaSBmaXggdHlwaW5nIGlzc3VlXG4vL0B0cy1leHBlY3QtZXJyb3JcbmltcG9ydCBXb3JrZXIsIHtcbiAgICBDYWxlbmRhcnNNZXNzYWdlLFxuICAgIEdldEZpbGVDYWNoZU1lc3NhZ2UsXG4gICAgRmlsZUNhY2hlTWVzc2FnZSxcbiAgICBPcHRpb25zTWVzc2FnZSxcbiAgICBRdWV1ZU1lc3NhZ2UsXG4gICAgVXBkYXRlRXZlbnRNZXNzYWdlLFxuICAgIFNhdmVNZXNzYWdlLFxuICAgIFJlbmFtZU1lc3NhZ2Vcbn0gZnJvbSBcIi4vd2F0Y2hlci53b3JrZXJcIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXb3JrZXIge1xuICAgICAgICBwb3N0TWVzc2FnZTxUPihtZXNzYWdlOiBULCB0cmFuc2Zlcj86IFRyYW5zZmVyYWJsZVtdKTogdm9pZDtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIENhbGVuZGFyRXZlbnRUcmVlID0gTWFwPHN0cmluZywgTWFwPG51bWJlciwgU2V0PG51bWJlcj4+PjtcblxuZXhwb3J0IGNsYXNzIFdhdGNoZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHBhcnNpbmc6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIGdldCBjYWxlbmRhcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbi5kYXRhLmNhbGVuZGFycztcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZTtcbiAgICB9XG4gICAgZ2V0IHZhdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uYXBwLnZhdWx0O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBGYW50YXN5Q2FsZW5kYXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICB0cmVlOiBDYWxlbmRhckV2ZW50VHJlZSA9IG5ldyBNYXAoKTtcblxuICAgIHdvcmtlciA9IG5ldyBXb3JrZXIoKTtcbiAgICBvbmxvYWQoKSB7XG4gICAgICAgIC8qKiBTZW5kIHRoZSB3b3JrZXIgdGhlIGNhbGVuZGFycyBzbyBJIGRvbid0IGhhdmUgdG8gd2l0aCBldmVyeSBtZXNzYWdlLiAqL1xuICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZTxDYWxlbmRhcnNNZXNzYWdlPih7XG4gICAgICAgICAgICB0eXBlOiBcImNhbGVuZGFyc1wiLFxuICAgICAgICAgICAgY2FsZW5kYXJzOiB0aGlzLmNhbGVuZGFyc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbihcImZhbnRhc3ktY2FsZW5kYXJzLXVwZGF0ZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlPENhbGVuZGFyc01lc3NhZ2U+KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYWxlbmRhcnNcIixcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJzOiB0aGlzLmNhbGVuZGFyc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgLyoqIFNlbmQgdGhlIHdvcmtlcnMgdGhlIG9wdGlvbnMgc28gSSBkb24ndCBoYXZlIHRvIHdpdGggZXZlcnkgbWVzc2FnZS4gKi9cbiAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2U8T3B0aW9uc01lc3NhZ2U+KHtcbiAgICAgICAgICAgIHR5cGU6IFwib3B0aW9uc1wiLFxuICAgICAgICAgICAgcGFyc2VUaXRsZTogdGhpcy5wbHVnaW4uZGF0YS5wYXJzZURhdGVzLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLnBsdWdpbi5mb3JtYXQsXG4gICAgICAgICAgICBkZWZhdWx0Q2FsZW5kYXI6IHRoaXMucGx1Z2luLmRlZmF1bHRDYWxlbmRhcj8ubmFtZSxcbiAgICAgICAgICAgIHN1cHBvcnRzVGltZWxpbmVzOiB0aGlzLnBsdWdpbi5kYXRhLnN1cHBvcnRUaW1lbGluZXMsXG4gICAgICAgICAgICB0aW1lbGluZVRhZzogdGhpcy5wbHVnaW4uZGF0YS50aW1lbGluZVRhZ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbihcbiAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItc2V0dGluZ3MtY2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZTxPcHRpb25zTWVzc2FnZT4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvcHRpb25zXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZVRpdGxlOiB0aGlzLnBsdWdpbi5kYXRhLnBhcnNlRGF0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IHRoaXMucGx1Z2luLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYWxlbmRhcjogdGhpcy5wbHVnaW4uZGVmYXVsdENhbGVuZGFyPy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHNUaW1lbGluZXM6IHRoaXMucGx1Z2luLmRhdGEuc3VwcG9ydFRpbWVsaW5lcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lVGFnOiB0aGlzLnBsdWdpbi5kYXRhLnRpbWVsaW5lVGFnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICAvKiogTWV0YWRhdGEgZm9yIGEgZmlsZSBoYXMgY2hhbmdlZCBhbmQgdGhlIGZpbGUgc2hvdWxkIGJlIGNoZWNrZWQuICovXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGFDYWNoZS5vbihcImNoYW5nZWRcIiwgKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzaW5nOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgdGhpcy5nZXRGaWxlcyhmaWxlKSkgcGFyc2luZy5hZGQocGF0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFBhcnNpbmcoWy4uLnBhcnNpbmddKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIC8qKiBBIGZpbGUgaGFzIGJlZW4gcmVuYW1lZCBhbmQgc2hvdWxkIGJlIGNoZWNrZWQgZm9yIGV2ZW50cy5cbiAgICAgICAgICogQ291bGQgdGhpcyBiZSBoYXNoZWQ/XG4gICAgICAgICAqL1xuICAgICAgICAvL1RPRE86IFJlZmFjdG9yXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMudmF1bHQub24oXCJyZW5hbWVcIiwgKGFic3RyYWN0RmlsZSwgb2xkUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYWxlbmRhcnMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJzdHJhY3RGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2U8UmVuYW1lTWVzc2FnZT4oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlbmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBhYnN0cmFjdEZpbGUucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VuYW1lOiBhYnN0cmFjdEZpbGUuYmFzZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRQYXRoXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUNhbGVuZGFyczogdGhpcy5jYWxlbmRhcnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIC8qKiBBIGZpbGUgaGFzIGJlZW4gZGVsZXRlZCBhbmQgc2hvdWxkIGJlIGNoZWNrZWQgZm9yIGV2ZW50cyB0byB1bmxpbmsuICovXG4gICAgICAgIC8vVE9ETzogUmVmYWN0b3JcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy52YXVsdC5vbihcImRlbGV0ZVwiLCAoYWJzdHJhY3RGaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJzdHJhY3RGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjYWxlbmRhciBvZiB0aGlzLmNhbGVuZGFycykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBldmVudCBvZiBjYWxlbmRhci5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQubm90ZSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQubm90ZSA9PT0gYWJzdHJhY3RGaWxlLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5ub3RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlQ2FsZW5kYXIoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy93b3JrZXIgbWVzc2FnZXNcbiAgICAgICAgLyoqIFRoZSB3b3JrZXIgd2lsbCBhc2sgZm9yIGZpbGUgaW5mb3JtYXRpb24gZnJvbSBmaWxlcyBpbiBpdHMgcXVldWUgaGVyZSAqL1xuICAgICAgICB0aGlzLndvcmtlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBhc3luYyAoZXZlbnQ6IE1lc3NhZ2VFdmVudDxHZXRGaWxlQ2FjaGVNZXNzYWdlPikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5kYXRhLnR5cGUgPT0gXCJnZXRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmdldEZpbGVJbmZvcm1hdGlvbihwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiBBZGQgaW4gZmlsZSBkYXRhIHBhcnNpbmcgZm9yIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IEUuZy4sIHRpbWVsaW5lc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZTxGaWxlQ2FjaGVNZXNzYWdlPih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvKiogVGhlIHdvcmtlciBoYXMgZm91bmQgYW4gZXZlbnQgdGhhdCBzaG91bGQgYmUgdXBkYXRlZC4gKi9cbiAgICAgICAgdGhpcy53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgYXN5bmMgKGV2dDogTWVzc2FnZUV2ZW50PFVwZGF0ZUV2ZW50TWVzc2FnZT4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmRhdGEudHlwZSA9PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgaWQsIGluZGV4LCBldmVudCwgb3JpZ2luYWwgfSA9IGV2dC5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGVuZGFyID0gdGhpcy5jYWxlbmRhcnMuZmluZCgoYykgPT4gYy5pZCA9PSBpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FsZW5kYXIpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuZXZlbnRzLnNwbGljZShpbmRleCwgaW5kZXggPj0gMCA/IDEgOiAwLCBldmVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUb1RyZWUoY2FsZW5kYXIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRvVHJlZShjYWxlbmRhciwgb3JpZ2luYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8qKiBUaGUgd29ya2VyIGhhcyBwYXJzZWQgYWxsIGZpbGVzIGluIGl0cyBxdWV1ZS4gKi9cbiAgICAgICAgdGhpcy53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgYXN5bmMgKGV2dDogTWVzc2FnZUV2ZW50PFNhdmVNZXNzYWdlPikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldnQuZGF0YS50eXBlID09IFwic2F2ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UudHJpZ2dlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmFudGFzeS1jYWxlbmRhcnMtZXZlbnQtdXBkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlQ2FsZW5kYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGlmICghdGhpcy5jYWxlbmRhcnMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIC8vVE9ETzogQWRkIHBlci1jYWxlbmRhciByb290IHBhdGguXG4gICAgICAgIGNvbnN0IGZvbGRlciA9IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGx1Z2luLmRhdGEucGF0aCk7XG4gICAgICAgIGlmICghZm9sZGVyIHx8ICEoZm9sZGVyIGluc3RhbmNlb2YgVEZvbGRlcikpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwYXJzaW5nOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMuZ2V0RmlsZXMoZm9sZGVyKSkgcGFyc2luZy5hZGQocGF0aCk7XG4gICAgICAgIHRoaXMuc3RhcnRQYXJzaW5nKFsuLi5wYXJzaW5nXSk7XG4gICAgfVxuICAgIGFkZFRvVHJlZShjYWxlbmRhcjogQ2FsZW5kYXIsIGV2ZW50OiBFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMudHJlZS5oYXMoY2FsZW5kYXIuaWQpKSB7XG4gICAgICAgICAgICB0aGlzLnRyZWUuc2V0KGNhbGVuZGFyLmlkLCBuZXcgTWFwKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbGVuZGFyVHJlZSA9IHRoaXMudHJlZS5nZXQoY2FsZW5kYXIuaWQpO1xuXG4gICAgICAgIGlmICghY2FsZW5kYXJUcmVlLmhhcyhldmVudC5kYXRlLnllYXIpKSB7XG4gICAgICAgICAgICBjYWxlbmRhclRyZWUuc2V0KGV2ZW50LmRhdGUueWVhciwgbmV3IFNldCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHllYXJTZXQgPSBjYWxlbmRhclRyZWUuZ2V0KGV2ZW50LmRhdGUueWVhcik7XG5cbiAgICAgICAgdGhpcy50cmVlLnNldChcbiAgICAgICAgICAgIGNhbGVuZGFyLmlkLFxuICAgICAgICAgICAgY2FsZW5kYXJUcmVlLnNldChldmVudC5kYXRlLnllYXIsIHllYXJTZXQuYWRkKGV2ZW50LmRhdGUubW9udGgpKVxuICAgICAgICApO1xuICAgIH1cbiAgICBzdGFydFBhcnNpbmcocGF0aHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIGlmIChwYXRocy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlPFF1ZXVlTWVzc2FnZT4oe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicXVldWVcIixcbiAgICAgICAgICAgICAgICBwYXRoc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0RmlsZUluZm9ybWF0aW9uKHBhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcbiAgICAgICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgY29uc3QgYWxsVGFncyA9IGdldEFsbFRhZ3MoY2FjaGUpO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgICBmaWxlOiB7IHBhdGg6IGZpbGUucGF0aCwgYmFzZW5hbWU6IGZpbGUuYmFzZW5hbWUgfSxcbiAgICAgICAgICAgIGFsbFRhZ3MsXG4gICAgICAgICAgICBkYXRhXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldEZpbGVzKGZvbGRlcjogVEFic3RyYWN0RmlsZSk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5kYXRhLmF1dG9QYXJzZSkgcmV0dXJuIFtdO1xuICAgICAgICBsZXQgZmlsZXMgPSBbXTtcbiAgICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgZm9sZGVyLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaCguLi50aGlzLmdldEZpbGVzKGNoaWxkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICBmaWxlcy5wdXNoKGZvbGRlci5wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZXM7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIHRoaXMud29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICB0aGlzLndvcmtlciA9IG51bGw7XG4gICAgfVxufVxuIiwgIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5saW5lV29ya2VyKHNjcmlwdFRleHQpIHtcbiAgbGV0IGJsb2IgPSBuZXcgQmxvYihbc2NyaXB0VGV4dF0sIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pO1xuICBsZXQgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgbGV0IHdvcmtlciA9IG5ldyBXb3JrZXIodXJsKTtcbiAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICByZXR1cm4gd29ya2VyO1xufVxuIiwgImltcG9ydCBpbmxpbmVXb3JrZXIgZnJvbSAnX19pbmxpbmUtd29ya2VyJ1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV29ya2VyKCkge1xuICByZXR1cm4gaW5saW5lV29ya2VyKFwidmFyIGVlPShlLHQpPT4oKT0+KHR8fGUoKHQ9e2V4cG9ydHM6e319KS5leHBvcnRzLHQpLHQuZXhwb3J0cyk7dmFyIFJlPWVlKEllPT57SWUuZW50aXR5TWFwPXtsdDpcXFwiPFxcXCIsZ3Q6XFxcIj5cXFwiLGFtcDpcXFwiJlxcXCIscXVvdDonXFxcIicsYXBvczpcXFwiJ1xcXCIsQWdyYXZlOlxcXCJcXFxceEMwXFxcIixBYWN1dGU6XFxcIlxcXFx4QzFcXFwiLEFjaXJjOlxcXCJcXFxceEMyXFxcIixBdGlsZGU6XFxcIlxcXFx4QzNcXFwiLEF1bWw6XFxcIlxcXFx4QzRcXFwiLEFyaW5nOlxcXCJcXFxceEM1XFxcIixBRWxpZzpcXFwiXFxcXHhDNlxcXCIsQ2NlZGlsOlxcXCJcXFxceEM3XFxcIixFZ3JhdmU6XFxcIlxcXFx4QzhcXFwiLEVhY3V0ZTpcXFwiXFxcXHhDOVxcXCIsRWNpcmM6XFxcIlxcXFx4Q0FcXFwiLEV1bWw6XFxcIlxcXFx4Q0JcXFwiLElncmF2ZTpcXFwiXFxcXHhDQ1xcXCIsSWFjdXRlOlxcXCJcXFxceENEXFxcIixJY2lyYzpcXFwiXFxcXHhDRVxcXCIsSXVtbDpcXFwiXFxcXHhDRlxcXCIsRVRIOlxcXCJcXFxceEQwXFxcIixOdGlsZGU6XFxcIlxcXFx4RDFcXFwiLE9ncmF2ZTpcXFwiXFxcXHhEMlxcXCIsT2FjdXRlOlxcXCJcXFxceEQzXFxcIixPY2lyYzpcXFwiXFxcXHhENFxcXCIsT3RpbGRlOlxcXCJcXFxceEQ1XFxcIixPdW1sOlxcXCJcXFxceEQ2XFxcIixPc2xhc2g6XFxcIlxcXFx4RDhcXFwiLFVncmF2ZTpcXFwiXFxcXHhEOVxcXCIsVWFjdXRlOlxcXCJcXFxceERBXFxcIixVY2lyYzpcXFwiXFxcXHhEQlxcXCIsVXVtbDpcXFwiXFxcXHhEQ1xcXCIsWWFjdXRlOlxcXCJcXFxceEREXFxcIixUSE9STjpcXFwiXFxcXHhERVxcXCIsc3psaWc6XFxcIlxcXFx4REZcXFwiLGFncmF2ZTpcXFwiXFxcXHhFMFxcXCIsYWFjdXRlOlxcXCJcXFxceEUxXFxcIixhY2lyYzpcXFwiXFxcXHhFMlxcXCIsYXRpbGRlOlxcXCJcXFxceEUzXFxcIixhdW1sOlxcXCJcXFxceEU0XFxcIixhcmluZzpcXFwiXFxcXHhFNVxcXCIsYWVsaWc6XFxcIlxcXFx4RTZcXFwiLGNjZWRpbDpcXFwiXFxcXHhFN1xcXCIsZWdyYXZlOlxcXCJcXFxceEU4XFxcIixlYWN1dGU6XFxcIlxcXFx4RTlcXFwiLGVjaXJjOlxcXCJcXFxceEVBXFxcIixldW1sOlxcXCJcXFxceEVCXFxcIixpZ3JhdmU6XFxcIlxcXFx4RUNcXFwiLGlhY3V0ZTpcXFwiXFxcXHhFRFxcXCIsaWNpcmM6XFxcIlxcXFx4RUVcXFwiLGl1bWw6XFxcIlxcXFx4RUZcXFwiLGV0aDpcXFwiXFxcXHhGMFxcXCIsbnRpbGRlOlxcXCJcXFxceEYxXFxcIixvZ3JhdmU6XFxcIlxcXFx4RjJcXFwiLG9hY3V0ZTpcXFwiXFxcXHhGM1xcXCIsb2NpcmM6XFxcIlxcXFx4RjRcXFwiLG90aWxkZTpcXFwiXFxcXHhGNVxcXCIsb3VtbDpcXFwiXFxcXHhGNlxcXCIsb3NsYXNoOlxcXCJcXFxceEY4XFxcIix1Z3JhdmU6XFxcIlxcXFx4RjlcXFwiLHVhY3V0ZTpcXFwiXFxcXHhGQVxcXCIsdWNpcmM6XFxcIlxcXFx4RkJcXFwiLHV1bWw6XFxcIlxcXFx4RkNcXFwiLHlhY3V0ZTpcXFwiXFxcXHhGRFxcXCIsdGhvcm46XFxcIlxcXFx4RkVcXFwiLHl1bWw6XFxcIlxcXFx4RkZcXFwiLG5ic3A6XFxcIlxcXFx4QTBcXFwiLGlleGNsOlxcXCJcXFxceEExXFxcIixjZW50OlxcXCJcXFxceEEyXFxcIixwb3VuZDpcXFwiXFxcXHhBM1xcXCIsY3VycmVuOlxcXCJcXFxceEE0XFxcIix5ZW46XFxcIlxcXFx4QTVcXFwiLGJydmJhcjpcXFwiXFxcXHhBNlxcXCIsc2VjdDpcXFwiXFxcXHhBN1xcXCIsdW1sOlxcXCJcXFxceEE4XFxcIixjb3B5OlxcXCJcXFxceEE5XFxcIixvcmRmOlxcXCJcXFxceEFBXFxcIixsYXF1bzpcXFwiXFxcXHhBQlxcXCIsbm90OlxcXCJcXFxceEFDXFxcIixzaHk6XFxcIlxcXFx4QURcXFxceEFEXFxcIixyZWc6XFxcIlxcXFx4QUVcXFwiLG1hY3I6XFxcIlxcXFx4QUZcXFwiLGRlZzpcXFwiXFxcXHhCMFxcXCIscGx1c21uOlxcXCJcXFxceEIxXFxcIixzdXAyOlxcXCJcXFxceEIyXFxcIixzdXAzOlxcXCJcXFxceEIzXFxcIixhY3V0ZTpcXFwiXFxcXHhCNFxcXCIsbWljcm86XFxcIlxcXFx4QjVcXFwiLHBhcmE6XFxcIlxcXFx4QjZcXFwiLG1pZGRvdDpcXFwiXFxcXHhCN1xcXCIsY2VkaWw6XFxcIlxcXFx4QjhcXFwiLHN1cDE6XFxcIlxcXFx4QjlcXFwiLG9yZG06XFxcIlxcXFx4QkFcXFwiLHJhcXVvOlxcXCJcXFxceEJCXFxcIixmcmFjMTQ6XFxcIlxcXFx4QkNcXFwiLGZyYWMxMjpcXFwiXFxcXHhCRFxcXCIsZnJhYzM0OlxcXCJcXFxceEJFXFxcIixpcXVlc3Q6XFxcIlxcXFx4QkZcXFwiLHRpbWVzOlxcXCJcXFxceEQ3XFxcIixkaXZpZGU6XFxcIlxcXFx4RjdcXFwiLGZvcmFsbDpcXFwiXFxcXHUyMjAwXFxcIixwYXJ0OlxcXCJcXFxcdTIyMDJcXFwiLGV4aXN0OlxcXCJcXFxcdTIyMDNcXFwiLGVtcHR5OlxcXCJcXFxcdTIyMDVcXFwiLG5hYmxhOlxcXCJcXFxcdTIyMDdcXFwiLGlzaW46XFxcIlxcXFx1MjIwOFxcXCIsbm90aW46XFxcIlxcXFx1MjIwOVxcXCIsbmk6XFxcIlxcXFx1MjIwQlxcXCIscHJvZDpcXFwiXFxcXHUyMjBGXFxcIixzdW06XFxcIlxcXFx1MjIxMVxcXCIsbWludXM6XFxcIlxcXFx1MjIxMlxcXCIsbG93YXN0OlxcXCJcXFxcdTIyMTdcXFwiLHJhZGljOlxcXCJcXFxcdTIyMUFcXFwiLHByb3A6XFxcIlxcXFx1MjIxRFxcXCIsaW5maW46XFxcIlxcXFx1MjIxRVxcXCIsYW5nOlxcXCJcXFxcdTIyMjBcXFwiLGFuZDpcXFwiXFxcXHUyMjI3XFxcIixvcjpcXFwiXFxcXHUyMjI4XFxcIixjYXA6XFxcIlxcXFx1MjIyOVxcXCIsY3VwOlxcXCJcXFxcdTIyMkFcXFwiLGludDpcXFwiXFxcXHUyMjJCXFxcIix0aGVyZTQ6XFxcIlxcXFx1MjIzNFxcXCIsc2ltOlxcXCJcXFxcdTIyM0NcXFwiLGNvbmc6XFxcIlxcXFx1MjI0NVxcXCIsYXN5bXA6XFxcIlxcXFx1MjI0OFxcXCIsbmU6XFxcIlxcXFx1MjI2MFxcXCIsZXF1aXY6XFxcIlxcXFx1MjI2MVxcXCIsbGU6XFxcIlxcXFx1MjI2NFxcXCIsZ2U6XFxcIlxcXFx1MjI2NVxcXCIsc3ViOlxcXCJcXFxcdTIyODJcXFwiLHN1cDpcXFwiXFxcXHUyMjgzXFxcIixuc3ViOlxcXCJcXFxcdTIyODRcXFwiLHN1YmU6XFxcIlxcXFx1MjI4NlxcXCIsc3VwZTpcXFwiXFxcXHUyMjg3XFxcIixvcGx1czpcXFwiXFxcXHUyMjk1XFxcIixvdGltZXM6XFxcIlxcXFx1MjI5N1xcXCIscGVycDpcXFwiXFxcXHUyMkE1XFxcIixzZG90OlxcXCJcXFxcdTIyQzVcXFwiLEFscGhhOlxcXCJcXFxcdTAzOTFcXFwiLEJldGE6XFxcIlxcXFx1MDM5MlxcXCIsR2FtbWE6XFxcIlxcXFx1MDM5M1xcXCIsRGVsdGE6XFxcIlxcXFx1MDM5NFxcXCIsRXBzaWxvbjpcXFwiXFxcXHUwMzk1XFxcIixaZXRhOlxcXCJcXFxcdTAzOTZcXFwiLEV0YTpcXFwiXFxcXHUwMzk3XFxcIixUaGV0YTpcXFwiXFxcXHUwMzk4XFxcIixJb3RhOlxcXCJcXFxcdTAzOTlcXFwiLEthcHBhOlxcXCJcXFxcdTAzOUFcXFwiLExhbWJkYTpcXFwiXFxcXHUwMzlCXFxcIixNdTpcXFwiXFxcXHUwMzlDXFxcIixOdTpcXFwiXFxcXHUwMzlEXFxcIixYaTpcXFwiXFxcXHUwMzlFXFxcIixPbWljcm9uOlxcXCJcXFxcdTAzOUZcXFwiLFBpOlxcXCJcXFxcdTAzQTBcXFwiLFJobzpcXFwiXFxcXHUwM0ExXFxcIixTaWdtYTpcXFwiXFxcXHUwM0EzXFxcIixUYXU6XFxcIlxcXFx1MDNBNFxcXCIsVXBzaWxvbjpcXFwiXFxcXHUwM0E1XFxcIixQaGk6XFxcIlxcXFx1MDNBNlxcXCIsQ2hpOlxcXCJcXFxcdTAzQTdcXFwiLFBzaTpcXFwiXFxcXHUwM0E4XFxcIixPbWVnYTpcXFwiXFxcXHUwM0E5XFxcIixhbHBoYTpcXFwiXFxcXHUwM0IxXFxcIixiZXRhOlxcXCJcXFxcdTAzQjJcXFwiLGdhbW1hOlxcXCJcXFxcdTAzQjNcXFwiLGRlbHRhOlxcXCJcXFxcdTAzQjRcXFwiLGVwc2lsb246XFxcIlxcXFx1MDNCNVxcXCIsemV0YTpcXFwiXFxcXHUwM0I2XFxcIixldGE6XFxcIlxcXFx1MDNCN1xcXCIsdGhldGE6XFxcIlxcXFx1MDNCOFxcXCIsaW90YTpcXFwiXFxcXHUwM0I5XFxcIixrYXBwYTpcXFwiXFxcXHUwM0JBXFxcIixsYW1iZGE6XFxcIlxcXFx1MDNCQlxcXCIsbXU6XFxcIlxcXFx1MDNCQ1xcXCIsbnU6XFxcIlxcXFx1MDNCRFxcXCIseGk6XFxcIlxcXFx1MDNCRVxcXCIsb21pY3JvbjpcXFwiXFxcXHUwM0JGXFxcIixwaTpcXFwiXFxcXHUwM0MwXFxcIixyaG86XFxcIlxcXFx1MDNDMVxcXCIsc2lnbWFmOlxcXCJcXFxcdTAzQzJcXFwiLHNpZ21hOlxcXCJcXFxcdTAzQzNcXFwiLHRhdTpcXFwiXFxcXHUwM0M0XFxcIix1cHNpbG9uOlxcXCJcXFxcdTAzQzVcXFwiLHBoaTpcXFwiXFxcXHUwM0M2XFxcIixjaGk6XFxcIlxcXFx1MDNDN1xcXCIscHNpOlxcXCJcXFxcdTAzQzhcXFwiLG9tZWdhOlxcXCJcXFxcdTAzQzlcXFwiLHRoZXRhc3ltOlxcXCJcXFxcdTAzRDFcXFwiLHVwc2loOlxcXCJcXFxcdTAzRDJcXFwiLHBpdjpcXFwiXFxcXHUwM0Q2XFxcIixPRWxpZzpcXFwiXFxcXHUwMTUyXFxcIixvZWxpZzpcXFwiXFxcXHUwMTUzXFxcIixTY2Fyb246XFxcIlxcXFx1MDE2MFxcXCIsc2Nhcm9uOlxcXCJcXFxcdTAxNjFcXFwiLFl1bWw6XFxcIlxcXFx1MDE3OFxcXCIsZm5vZjpcXFwiXFxcXHUwMTkyXFxcIixjaXJjOlxcXCJcXFxcdTAyQzZcXFwiLHRpbGRlOlxcXCJcXFxcdTAyRENcXFwiLGVuc3A6XFxcIlxcXFx1MjAwMlxcXCIsZW1zcDpcXFwiXFxcXHUyMDAzXFxcIix0aGluc3A6XFxcIlxcXFx1MjAwOVxcXCIsenduajpcXFwiXFxcXHUyMDBDXFxcIix6d2o6XFxcIlxcXFx1MjAwRFxcXCIsbHJtOlxcXCJcXFxcdTIwMEVcXFwiLHJsbTpcXFwiXFxcXHUyMDBGXFxcIixuZGFzaDpcXFwiXFxcXHUyMDEzXFxcIixtZGFzaDpcXFwiXFxcXHUyMDE0XFxcIixsc3F1bzpcXFwiXFxcXHUyMDE4XFxcIixyc3F1bzpcXFwiXFxcXHUyMDE5XFxcIixzYnF1bzpcXFwiXFxcXHUyMDFBXFxcIixsZHF1bzpcXFwiXFxcXHUyMDFDXFxcIixyZHF1bzpcXFwiXFxcXHUyMDFEXFxcIixiZHF1bzpcXFwiXFxcXHUyMDFFXFxcIixkYWdnZXI6XFxcIlxcXFx1MjAyMFxcXCIsRGFnZ2VyOlxcXCJcXFxcdTIwMjFcXFwiLGJ1bGw6XFxcIlxcXFx1MjAyMlxcXCIsaGVsbGlwOlxcXCJcXFxcdTIwMjZcXFwiLHBlcm1pbDpcXFwiXFxcXHUyMDMwXFxcIixwcmltZTpcXFwiXFxcXHUyMDMyXFxcIixQcmltZTpcXFwiXFxcXHUyMDMzXFxcIixsc2FxdW86XFxcIlxcXFx1MjAzOVxcXCIscnNhcXVvOlxcXCJcXFxcdTIwM0FcXFwiLG9saW5lOlxcXCJcXFxcdTIwM0VcXFwiLGV1cm86XFxcIlxcXFx1MjBBQ1xcXCIsdHJhZGU6XFxcIlxcXFx1MjEyMlxcXCIsbGFycjpcXFwiXFxcXHUyMTkwXFxcIix1YXJyOlxcXCJcXFxcdTIxOTFcXFwiLHJhcnI6XFxcIlxcXFx1MjE5MlxcXCIsZGFycjpcXFwiXFxcXHUyMTkzXFxcIixoYXJyOlxcXCJcXFxcdTIxOTRcXFwiLGNyYXJyOlxcXCJcXFxcdTIxQjVcXFwiLGxjZWlsOlxcXCJcXFxcdTIzMDhcXFwiLHJjZWlsOlxcXCJcXFxcdTIzMDlcXFwiLGxmbG9vcjpcXFwiXFxcXHUyMzBBXFxcIixyZmxvb3I6XFxcIlxcXFx1MjMwQlxcXCIsbG96OlxcXCJcXFxcdTI1Q0FcXFwiLHNwYWRlczpcXFwiXFxcXHUyNjYwXFxcIixjbHViczpcXFwiXFxcXHUyNjYzXFxcIixoZWFydHM6XFxcIlxcXFx1MjY2NVxcXCIsZGlhbXM6XFxcIlxcXFx1MjY2NlxcXCJ9fSk7dmFyIFBlPWVlKHBlPT57dmFyIGZlPS9bQS1aX2EtelxcXFx4QzAtXFxcXHhENlxcXFx4RDgtXFxcXHhGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRF0vLE9lPW5ldyBSZWdFeHAoXFxcIltcXFxcXFxcXC1cXFxcXFxcXC4wLTlcXFwiK2ZlLnNvdXJjZS5zbGljZSgxLC0xKStcXFwiXFxcXFxcXFx1MDBCN1xcXFxcXFxcdTAzMDAtXFxcXFxcXFx1MDM2RlxcXFxcXFxcdTIwM0YtXFxcXFxcXFx1MjA0MF1cXFwiKSxTZT1uZXcgUmVnRXhwKFxcXCJeXFxcIitmZS5zb3VyY2UrT2Uuc291cmNlK1xcXCIqKD86OlxcXCIrZmUuc291cmNlK09lLnNvdXJjZStcXFwiKik/JFxcXCIpLHo9MCxPPTEsJD0yLGo9MyxGPTQsTD01LEc9Nix0ZT03O2Z1bmN0aW9uIFAoZSx0KXt0aGlzLm1lc3NhZ2U9ZSx0aGlzLmxvY2F0b3I9dCxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyxQKX1QLnByb3RvdHlwZT1uZXcgRXJyb3I7UC5wcm90b3R5cGUubmFtZT1QLm5hbWU7ZnVuY3Rpb24gTWUoKXt9TWUucHJvdG90eXBlPXtwYXJzZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5kb21CdWlsZGVyO3Iuc3RhcnREb2N1bWVudCgpLEZlKHQsdD17fSksdnQoZSx0LG4scix0aGlzLmVycm9ySGFuZGxlciksci5lbmREb2N1bWVudCgpfX07ZnVuY3Rpb24gdnQoZSx0LG4scixhKXtmdW5jdGlvbiBpKHYpe2lmKHY+NjU1MzUpe3YtPTY1NTM2O3ZhciBDPTU1Mjk2Kyh2Pj4xMCksZHQ9NTYzMjArKHYmMTAyMyk7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoQyxkdCl9ZWxzZSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2KX1mdW5jdGlvbiBvKHYpe3ZhciBDPXYuc2xpY2UoMSwtMSk7cmV0dXJuIEMgaW4gbj9uW0NdOkMuY2hhckF0KDApPT09XFxcIiNcXFwiP2kocGFyc2VJbnQoQy5zdWJzdHIoMSkucmVwbGFjZShcXFwieFxcXCIsXFxcIjB4XFxcIikpKTooYS5lcnJvcihcXFwiZW50aXR5IG5vdCBmb3VuZDpcXFwiK3YpLHYpfWZ1bmN0aW9uIGModil7aWYodj5tKXt2YXIgQz1lLnN1YnN0cmluZyhtLHYpLnJlcGxhY2UoLyYjP1xcXFx3KzsvZyxvKTtwJiZsKG0pLHIuY2hhcmFjdGVycyhDLDAsdi1tKSxtPXZ9fWZ1bmN0aW9uIGwodixDKXtmb3IoO3Y+PXUmJihDPWguZXhlYyhlKSk7KXM9Qy5pbmRleCx1PXMrQ1swXS5sZW5ndGgscC5saW5lTnVtYmVyKys7cC5jb2x1bW5OdW1iZXI9di1zKzF9Zm9yKHZhciBzPTAsdT0wLGg9Ly4qKD86XFxcXHJcXFxcbj98XFxcXG4pfC4qJC9nLHA9ci5sb2NhdG9yLGQ9W3tjdXJyZW50TlNNYXA6dH1dLFQ9e30sbT0wOzspe3RyeXt2YXIgZj1lLmluZGV4T2YoXFxcIjxcXFwiLG0pO2lmKGY8MCl7aWYoIWUuc3Vic3RyKG0pLm1hdGNoKC9eXFxcXHMqJC8pKXt2YXIgQT1yLmRvYyxiZT1BLmNyZWF0ZVRleHROb2RlKGUuc3Vic3RyKG0pKTtBLmFwcGVuZENoaWxkKGJlKSxyLmN1cnJlbnRFbGVtZW50PWJlfXJldHVybn1zd2l0Y2goZj5tJiZjKGYpLGUuY2hhckF0KGYrMSkpe2Nhc2VcXFwiL1xcXCI6dmFyIHk9ZS5pbmRleE9mKFxcXCI+XFxcIixmKzMpLF89ZS5zdWJzdHJpbmcoZisyLHkpLEk9ZC5wb3AoKTt5PDA/KF89ZS5zdWJzdHJpbmcoZisyKS5yZXBsYWNlKC9bXFxcXHM8XS4qLyxcXFwiXFxcIiksYS5lcnJvcihcXFwiZW5kIHRhZyBuYW1lOiBcXFwiK18rXFxcIiBpcyBub3QgY29tcGxldGU6XFxcIitJLnRhZ05hbWUpLHk9ZisxK18ubGVuZ3RoKTpfLm1hdGNoKC9cXFxcczwvKSYmKF89Xy5yZXBsYWNlKC9bXFxcXHM8XS4qLyxcXFwiXFxcIiksYS5lcnJvcihcXFwiZW5kIHRhZyBuYW1lOiBcXFwiK18rXFxcIiBtYXliZSBub3QgY29tcGxldGVcXFwiKSx5PWYrMStfLmxlbmd0aCk7dmFyIF9lPUkubG9jYWxOU01hcCxDZT1JLnRhZ05hbWU9PV8scHQ9Q2V8fEkudGFnTmFtZSYmSS50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PV8udG9Mb3dlckNhc2UoKTtpZihwdCl7aWYoci5lbmRFbGVtZW50KEkudXJpLEkubG9jYWxOYW1lLF8pLF9lKWZvcih2YXIgbXQgaW4gX2Upci5lbmRQcmVmaXhNYXBwaW5nKG10KTtDZXx8YS5mYXRhbEVycm9yKFxcXCJlbmQgdGFnIG5hbWU6IFxcXCIrXytcXFwiIGlzIG5vdCBtYXRjaCB0aGUgY3VycmVudCBzdGFydCB0YWdOYW1lOlxcXCIrSS50YWdOYW1lKX1lbHNlIGQucHVzaChJKTt5Kys7YnJlYWs7Y2FzZVxcXCI/XFxcIjpwJiZsKGYpLHk9RHQoZSxmLHIpO2JyZWFrO2Nhc2VcXFwiIVxcXCI6cCYmbChmKSx5PXl0KGUsZixyLGEpO2JyZWFrO2RlZmF1bHQ6cCYmbChmKTt2YXIgYj1uZXcgTGUsc2U9ZFtkLmxlbmd0aC0xXS5jdXJyZW50TlNNYXAseT1ndChlLGYsYixzZSxvLGEpLHhlPWIubGVuZ3RoO2lmKCFiLmNsb3NlZCYmTnQoZSx5LGIudGFnTmFtZSxUKSYmKGIuY2xvc2VkPSEwLG4ubmJzcHx8YS53YXJuaW5nKFxcXCJ1bmNsb3NlZCB4bWwgYXR0cmlidXRlXFxcIikpLHAmJnhlKXtmb3IodmFyIGh0PVVlKHAse30pLHVlPTA7dWU8eGU7dWUrKyl7dmFyIEFlPWJbdWVdO2woQWUub2Zmc2V0KSxBZS5sb2NhdG9yPVVlKHAse30pfXIubG9jYXRvcj1odCwkZShiLHIsc2UpJiZkLnB1c2goYiksci5sb2NhdG9yPXB9ZWxzZSAkZShiLHIsc2UpJiZkLnB1c2goYik7Yi51cmk9PT1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFxcXCImJiFiLmNsb3NlZD95PUV0KGUseSxiLnRhZ05hbWUsbyxyKTp5Kyt9fWNhdGNoKHYpe2lmKHYgaW5zdGFuY2VvZiBQKXRocm93IHY7YS5lcnJvcihcXFwiZWxlbWVudCBwYXJzZSBlcnJvcjogXFxcIit2KSx5PS0xfXk+bT9tPXk6YyhNYXRoLm1heChmLG0pKzEpfX1mdW5jdGlvbiBVZShlLHQpe3JldHVybiB0LmxpbmVOdW1iZXI9ZS5saW5lTnVtYmVyLHQuY29sdW1uTnVtYmVyPWUuY29sdW1uTnVtYmVyLHR9ZnVuY3Rpb24gZ3QoZSx0LG4scixhLGkpe2Z1bmN0aW9uIG8oZCxULG0pe2QgaW4gbi5hdHRyaWJ1dGVOYW1lcyYmaS5mYXRhbEVycm9yKFxcXCJBdHRyaWJ1dGUgXFxcIitkK1xcXCIgcmVkZWZpbmVkXFxcIiksbi5hZGRWYWx1ZShkLFQsbSl9Zm9yKHZhciBjLGwscz0rK3QsdT16Ozspe3ZhciBoPWUuY2hhckF0KHMpO3N3aXRjaChoKXtjYXNlXFxcIj1cXFwiOmlmKHU9PT1PKWM9ZS5zbGljZSh0LHMpLHU9ajtlbHNlIGlmKHU9PT0kKXU9ajtlbHNlIHRocm93IG5ldyBFcnJvcihcXFwiYXR0cmlidXRlIGVxdWFsIG11c3QgYWZ0ZXIgYXR0ck5hbWVcXFwiKTticmVhaztjYXNlXFxcIidcXFwiOmNhc2UnXFxcIic6aWYodT09PWp8fHU9PT1PKWlmKHU9PT1PJiYoaS53YXJuaW5nKCdhdHRyaWJ1dGUgdmFsdWUgbXVzdCBhZnRlciBcXFwiPVxcXCInKSxjPWUuc2xpY2UodCxzKSksdD1zKzEscz1lLmluZGV4T2YoaCx0KSxzPjApbD1lLnNsaWNlKHQscykucmVwbGFjZSgvJiM/XFxcXHcrOy9nLGEpLG8oYyxsLHQtMSksdT1MO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFxcXCJhdHRyaWJ1dGUgdmFsdWUgbm8gZW5kICdcXFwiK2grXFxcIicgbWF0Y2hcXFwiKTtlbHNlIGlmKHU9PUYpbD1lLnNsaWNlKHQscykucmVwbGFjZSgvJiM/XFxcXHcrOy9nLGEpLG8oYyxsLHQpLGkud2FybmluZygnYXR0cmlidXRlIFxcXCInK2MrJ1xcXCIgbWlzc2VkIHN0YXJ0IHF1b3QoJytoK1xcXCIpISFcXFwiKSx0PXMrMSx1PUw7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ2F0dHJpYnV0ZSB2YWx1ZSBtdXN0IGFmdGVyIFxcXCI9XFxcIicpO2JyZWFrO2Nhc2VcXFwiL1xcXCI6c3dpdGNoKHUpe2Nhc2UgejpuLnNldFRhZ05hbWUoZS5zbGljZSh0LHMpKTtjYXNlIEw6Y2FzZSBHOmNhc2UgdGU6dT10ZSxuLmNsb3NlZD0hMDtjYXNlIEY6Y2FzZSBPOmNhc2UgJDpicmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcXFwiYXR0cmlidXRlIGludmFsaWQgY2xvc2UgY2hhcignLycpXFxcIil9YnJlYWs7Y2FzZVxcXCJcXFwiOnJldHVybiBpLmVycm9yKFxcXCJ1bmV4cGVjdGVkIGVuZCBvZiBpbnB1dFxcXCIpLHU9PXomJm4uc2V0VGFnTmFtZShlLnNsaWNlKHQscykpLHM7Y2FzZVxcXCI+XFxcIjpzd2l0Y2godSl7Y2FzZSB6Om4uc2V0VGFnTmFtZShlLnNsaWNlKHQscykpO2Nhc2UgTDpjYXNlIEc6Y2FzZSB0ZTpicmVhaztjYXNlIEY6Y2FzZSBPOmw9ZS5zbGljZSh0LHMpLGwuc2xpY2UoLTEpPT09XFxcIi9cXFwiJiYobi5jbG9zZWQ9ITAsbD1sLnNsaWNlKDAsLTEpKTtjYXNlICQ6dT09PSQmJihsPWMpLHU9PUY/KGkud2FybmluZygnYXR0cmlidXRlIFxcXCInK2wrJ1xcXCIgbWlzc2VkIHF1b3QoXFxcIikhJyksbyhjLGwucmVwbGFjZSgvJiM/XFxcXHcrOy9nLGEpLHQpKTooKHJbXFxcIlxcXCJdIT09XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcXFwifHwhbC5tYXRjaCgvXig/OmRpc2FibGVkfGNoZWNrZWR8c2VsZWN0ZWQpJC9pKSkmJmkud2FybmluZygnYXR0cmlidXRlIFxcXCInK2wrJ1xcXCIgbWlzc2VkIHZhbHVlISEgXFxcIicrbCsnXFxcIiBpbnN0ZWFkISEnKSxvKGwsbCx0KSk7YnJlYWs7Y2FzZSBqOnRocm93IG5ldyBFcnJvcihcXFwiYXR0cmlidXRlIHZhbHVlIG1pc3NlZCEhXFxcIil9cmV0dXJuIHM7Y2FzZVxcXCJcXFxceDgwXFxcIjpoPVxcXCIgXFxcIjtkZWZhdWx0OmlmKGg8PVxcXCIgXFxcIilzd2l0Y2godSl7Y2FzZSB6Om4uc2V0VGFnTmFtZShlLnNsaWNlKHQscykpLHU9RzticmVhaztjYXNlIE86Yz1lLnNsaWNlKHQscyksdT0kO2JyZWFrO2Nhc2UgRjp2YXIgbD1lLnNsaWNlKHQscykucmVwbGFjZSgvJiM/XFxcXHcrOy9nLGEpO2kud2FybmluZygnYXR0cmlidXRlIFxcXCInK2wrJ1xcXCIgbWlzc2VkIHF1b3QoXFxcIikhIScpLG8oYyxsLHQpO2Nhc2UgTDp1PUc7YnJlYWt9ZWxzZSBzd2l0Y2godSl7Y2FzZSAkOnZhciBwPW4udGFnTmFtZTsocltcXFwiXFxcIl0hPT1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFxcXCJ8fCFjLm1hdGNoKC9eKD86ZGlzYWJsZWR8Y2hlY2tlZHxzZWxlY3RlZCkkL2kpKSYmaS53YXJuaW5nKCdhdHRyaWJ1dGUgXFxcIicrYysnXFxcIiBtaXNzZWQgdmFsdWUhISBcXFwiJytjKydcXFwiIGluc3RlYWQyISEnKSxvKGMsYyx0KSx0PXMsdT1PO2JyZWFrO2Nhc2UgTDppLndhcm5pbmcoJ2F0dHJpYnV0ZSBzcGFjZSBpcyByZXF1aXJlZFxcXCInK2MrJ1xcXCIhIScpO2Nhc2UgRzp1PU8sdD1zO2JyZWFrO2Nhc2Ugajp1PUYsdD1zO2JyZWFrO2Nhc2UgdGU6dGhyb3cgbmV3IEVycm9yKFxcXCJlbGVtZW50cyBjbG9zZWQgY2hhcmFjdGVyICcvJyBhbmQgJz4nIG11c3QgYmUgY29ubmVjdGVkIHRvXFxcIil9fXMrK319ZnVuY3Rpb24gJGUoZSx0LG4pe2Zvcih2YXIgcj1lLnRhZ05hbWUsYT1udWxsLGk9ZS5sZW5ndGg7aS0tOyl7dmFyIG89ZVtpXSxjPW8ucU5hbWUsbD1vLnZhbHVlLHA9Yy5pbmRleE9mKFxcXCI6XFxcIik7aWYocD4wKXZhciBzPW8ucHJlZml4PWMuc2xpY2UoMCxwKSx1PWMuc2xpY2UocCsxKSxoPXM9PT1cXFwieG1sbnNcXFwiJiZ1O2Vsc2UgdT1jLHM9bnVsbCxoPWM9PT1cXFwieG1sbnNcXFwiJiZcXFwiXFxcIjtvLmxvY2FsTmFtZT11LGghPT0hMSYmKGE9PW51bGwmJihhPXt9LEZlKG4sbj17fSkpLG5baF09YVtoXT1sLG8udXJpPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1xcXCIsdC5zdGFydFByZWZpeE1hcHBpbmcoaCxsKSl9Zm9yKHZhciBpPWUubGVuZ3RoO2ktLTspe289ZVtpXTt2YXIgcz1vLnByZWZpeDtzJiYocz09PVxcXCJ4bWxcXFwiJiYoby51cmk9XFxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVxcXCIpLHMhPT1cXFwieG1sbnNcXFwiJiYoby51cmk9bltzfHxcXFwiXFxcIl0pKX12YXIgcD1yLmluZGV4T2YoXFxcIjpcXFwiKTtwPjA/KHM9ZS5wcmVmaXg9ci5zbGljZSgwLHApLHU9ZS5sb2NhbE5hbWU9ci5zbGljZShwKzEpKToocz1udWxsLHU9ZS5sb2NhbE5hbWU9cik7dmFyIGQ9ZS51cmk9bltzfHxcXFwiXFxcIl07aWYodC5zdGFydEVsZW1lbnQoZCx1LHIsZSksZS5jbG9zZWQpe2lmKHQuZW5kRWxlbWVudChkLHUsciksYSlmb3IocyBpbiBhKXQuZW5kUHJlZml4TWFwcGluZyhzKX1lbHNlIHJldHVybiBlLmN1cnJlbnROU01hcD1uLGUubG9jYWxOU01hcD1hLCEwfWZ1bmN0aW9uIEV0KGUsdCxuLHIsYSl7aWYoL14oPzpzY3JpcHR8dGV4dGFyZWEpJC9pLnRlc3Qobikpe3ZhciBpPWUuaW5kZXhPZihcXFwiPC9cXFwiK24rXFxcIj5cXFwiLHQpLG89ZS5zdWJzdHJpbmcodCsxLGkpO2lmKC9bJjxdLy50ZXN0KG8pKXJldHVybi9ec2NyaXB0JC9pLnRlc3Qobik/KGEuY2hhcmFjdGVycyhvLDAsby5sZW5ndGgpLGkpOihvPW8ucmVwbGFjZSgvJiM/XFxcXHcrOy9nLHIpLGEuY2hhcmFjdGVycyhvLDAsby5sZW5ndGgpLGkpfXJldHVybiB0KzF9ZnVuY3Rpb24gTnQoZSx0LG4scil7dmFyIGE9cltuXTtyZXR1cm4gYT09bnVsbCYmKGE9ZS5sYXN0SW5kZXhPZihcXFwiPC9cXFwiK24rXFxcIj5cXFwiKSxhPHQmJihhPWUubGFzdEluZGV4T2YoXFxcIjwvXFxcIituKSkscltuXT1hKSxhPHR9ZnVuY3Rpb24gRmUoZSx0KXtmb3IodmFyIG4gaW4gZSl0W25dPWVbbl19ZnVuY3Rpb24geXQoZSx0LG4scil7dmFyIGE9ZS5jaGFyQXQodCsyKTtzd2l0Y2goYSl7Y2FzZVxcXCItXFxcIjppZihlLmNoYXJBdCh0KzMpPT09XFxcIi1cXFwiKXt2YXIgaT1lLmluZGV4T2YoXFxcIi0tPlxcXCIsdCs0KTtyZXR1cm4gaT50PyhuLmNvbW1lbnQoZSx0KzQsaS10LTQpLGkrMyk6KHIuZXJyb3IoXFxcIlVuY2xvc2VkIGNvbW1lbnRcXFwiKSwtMSl9ZWxzZSByZXR1cm4tMTtkZWZhdWx0OmlmKGUuc3Vic3RyKHQrMyw2KT09XFxcIkNEQVRBW1xcXCIpe3ZhciBpPWUuaW5kZXhPZihcXFwiXV0+XFxcIix0KzkpO3JldHVybiBuLnN0YXJ0Q0RBVEEoKSxuLmNoYXJhY3RlcnMoZSx0KzksaS10LTkpLG4uZW5kQ0RBVEEoKSxpKzN9dmFyIG89d3QoZSx0KSxjPW8ubGVuZ3RoO2lmKGM+MSYmLyFkb2N0eXBlL2kudGVzdChvWzBdWzBdKSl7dmFyIGw9b1sxXVswXSxzPSExLHU9ITE7Yz4zJiYoL15wdWJsaWMkL2kudGVzdChvWzJdWzBdKT8ocz1vWzNdWzBdLHU9Yz40JiZvWzRdWzBdKTovXnN5c3RlbSQvaS50ZXN0KG9bMl1bMF0pJiYodT1vWzNdWzBdKSk7dmFyIGg9b1tjLTFdO3JldHVybiBuLnN0YXJ0RFREKGwscyx1KSxuLmVuZERURCgpLGguaW5kZXgraFswXS5sZW5ndGh9fXJldHVybi0xfWZ1bmN0aW9uIER0KGUsdCxuKXt2YXIgcj1lLmluZGV4T2YoXFxcIj8+XFxcIix0KTtpZihyKXt2YXIgYT1lLnN1YnN0cmluZyh0LHIpLm1hdGNoKC9ePFxcXFw/KFxcXFxTKilcXFxccyooW1xcXFxzXFxcXFNdKj8pXFxcXHMqJC8pO2lmKGEpe3ZhciBpPWFbMF0ubGVuZ3RoO3JldHVybiBuLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihhWzFdLGFbMl0pLHIrMn1lbHNlIHJldHVybi0xfXJldHVybi0xfWZ1bmN0aW9uIExlKCl7dGhpcy5hdHRyaWJ1dGVOYW1lcz17fX1MZS5wcm90b3R5cGU9e3NldFRhZ05hbWU6ZnVuY3Rpb24oZSl7aWYoIVNlLnRlc3QoZSkpdGhyb3cgbmV3IEVycm9yKFxcXCJpbnZhbGlkIHRhZ05hbWU6XFxcIitlKTt0aGlzLnRhZ05hbWU9ZX0sYWRkVmFsdWU6ZnVuY3Rpb24oZSx0LG4pe2lmKCFTZS50ZXN0KGUpKXRocm93IG5ldyBFcnJvcihcXFwiaW52YWxpZCBhdHRyaWJ1dGU6XFxcIitlKTt0aGlzLmF0dHJpYnV0ZU5hbWVzW2VdPXRoaXMubGVuZ3RoLHRoaXNbdGhpcy5sZW5ndGgrK109e3FOYW1lOmUsdmFsdWU6dCxvZmZzZXQ6bn19LGxlbmd0aDowLGdldExvY2FsTmFtZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXS5sb2NhbE5hbWV9LGdldExvY2F0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXNbZV0ubG9jYXRvcn0sZ2V0UU5hbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXNbZV0ucU5hbWV9LGdldFVSSTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXS51cml9LGdldFZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzW2VdLnZhbHVlfX07ZnVuY3Rpb24gd3QoZSx0KXt2YXIgbixyPVtdLGE9LydbXiddKyd8XFxcIlteXFxcIl0rXFxcInxbXlxcXFxzPD5cXFxcLz1dKz0/fChcXFxcLz9cXFxccyo+fDwpL2c7Zm9yKGEubGFzdEluZGV4PXQsYS5leGVjKGUpO249YS5leGVjKGUpOylpZihyLnB1c2gobiksblsxXSlyZXR1cm4gcn1wZS5YTUxSZWFkZXI9TWU7cGUuUGFyc2VFcnJvcj1QfSk7dmFyIHdlPWVlKEs9PntmdW5jdGlvbiBXKGUsdCl7Zm9yKHZhciBuIGluIGUpdFtuXT1lW25dfWZ1bmN0aW9uIEQoZSx0KXt2YXIgbj1lLnByb3RvdHlwZTtpZighKG4gaW5zdGFuY2VvZiB0KSl7bGV0IGE9ZnVuY3Rpb24oKXt9O3ZhciByPWE7YS5wcm90b3R5cGU9dC5wcm90b3R5cGUsYT1uZXcgYSxXKG4sYSksZS5wcm90b3R5cGU9bj1hfW4uY29uc3RydWN0b3IhPWUmJih0eXBlb2YgZSE9XFxcImZ1bmN0aW9uXFxcIiYmY29uc29sZS5lcnJvcihcXFwidW5rbm93IENsYXNzOlxcXCIrZSksbi5jb25zdHJ1Y3Rvcj1lKX12YXIgVHQ9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcXFwiLHc9e30seD13LkVMRU1FTlRfTk9ERT0xLGs9dy5BVFRSSUJVVEVfTk9ERT0yLG5lPXcuVEVYVF9OT0RFPTMsa2U9dy5DREFUQV9TRUNUSU9OX05PREU9NCxWZT13LkVOVElUWV9SRUZFUkVOQ0VfTk9ERT01LGJ0PXcuRU5USVRZX05PREU9NixxZT13LlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERT03LFhlPXcuQ09NTUVOVF9OT0RFPTgsWWU9dy5ET0NVTUVOVF9OT0RFPTksemU9dy5ET0NVTUVOVF9UWVBFX05PREU9MTAsUj13LkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU9MTEsX3Q9dy5OT1RBVElPTl9OT0RFPTEyLEU9e30sZz17fSxxdD1FLklOREVYX1NJWkVfRVJSPShnWzFdPVxcXCJJbmRleCBzaXplIGVycm9yXFxcIiwxKSxYdD1FLkRPTVNUUklOR19TSVpFX0VSUj0oZ1syXT1cXFwiRE9NU3RyaW5nIHNpemUgZXJyb3JcXFwiLDIpLEN0PUUuSElFUkFSQ0hZX1JFUVVFU1RfRVJSPShnWzNdPVxcXCJIaWVyYXJjaHkgcmVxdWVzdCBlcnJvclxcXCIsMyksWXQ9RS5XUk9OR19ET0NVTUVOVF9FUlI9KGdbNF09XFxcIldyb25nIGRvY3VtZW50XFxcIiw0KSx6dD1FLklOVkFMSURfQ0hBUkFDVEVSX0VSUj0oZ1s1XT1cXFwiSW52YWxpZCBjaGFyYWN0ZXJcXFwiLDUpLGp0PUUuTk9fREFUQV9BTExPV0VEX0VSUj0oZ1s2XT1cXFwiTm8gZGF0YSBhbGxvd2VkXFxcIiw2KSxHdD1FLk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUj0oZ1s3XT1cXFwiTm8gbW9kaWZpY2F0aW9uIGFsbG93ZWRcXFwiLDcpLHh0PUUuTk9UX0ZPVU5EX0VSUj0oZ1s4XT1cXFwiTm90IGZvdW5kXFxcIiw4KSxXdD1FLk5PVF9TVVBQT1JURURfRVJSPShnWzldPVxcXCJOb3Qgc3VwcG9ydGVkXFxcIiw5KSxqZT1FLklOVVNFX0FUVFJJQlVURV9FUlI9KGdbMTBdPVxcXCJBdHRyaWJ1dGUgaW4gdXNlXFxcIiwxMCksUXQ9RS5JTlZBTElEX1NUQVRFX0VSUj0oZ1sxMV09XFxcIkludmFsaWQgc3RhdGVcXFwiLDExKSxCdD1FLlNZTlRBWF9FUlI9KGdbMTJdPVxcXCJTeW50YXggZXJyb3JcXFwiLDEyKSxadD1FLklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUj0oZ1sxM109XFxcIkludmFsaWQgbW9kaWZpY2F0aW9uXFxcIiwxMyksS3Q9RS5OQU1FU1BBQ0VfRVJSPShnWzE0XT1cXFwiSW52YWxpZCBuYW1lc3BhY2VcXFwiLDE0KSxKdD1FLklOVkFMSURfQUNDRVNTX0VSUj0oZ1sxNV09XFxcIkludmFsaWQgYWNjZXNzXFxcIiwxNSk7ZnVuY3Rpb24gTShlLHQpe2lmKHQgaW5zdGFuY2VvZiBFcnJvcil2YXIgbj10O2Vsc2Ugbj10aGlzLEVycm9yLmNhbGwodGhpcyxnW2VdKSx0aGlzLm1lc3NhZ2U9Z1tlXSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyxNKTtyZXR1cm4gbi5jb2RlPWUsdCYmKHRoaXMubWVzc2FnZT10aGlzLm1lc3NhZ2UrXFxcIjogXFxcIit0KSxufU0ucHJvdG90eXBlPUVycm9yLnByb3RvdHlwZTtXKEUsTSk7ZnVuY3Rpb24gUygpe31TLnByb3RvdHlwZT17bGVuZ3RoOjAsaXRlbTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXXx8bnVsbH0sdG9TdHJpbmc6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W10scj0wO3I8dGhpcy5sZW5ndGg7cisrKVgodGhpc1tyXSxuLGUsdCk7cmV0dXJuIG4uam9pbihcXFwiXFxcIil9fTtmdW5jdGlvbiBWKGUsdCl7dGhpcy5fbm9kZT1lLHRoaXMuX3JlZnJlc2g9dCxtZSh0aGlzKX1mdW5jdGlvbiBtZShlKXt2YXIgdD1lLl9ub2RlLl9pbmN8fGUuX25vZGUub3duZXJEb2N1bWVudC5faW5jO2lmKGUuX2luYyE9dCl7dmFyIG49ZS5fcmVmcmVzaChlLl9ub2RlKTtvdChlLFxcXCJsZW5ndGhcXFwiLG4ubGVuZ3RoKSxXKG4sZSksZS5faW5jPXR9fVYucHJvdG90eXBlLml0ZW09ZnVuY3Rpb24oZSl7cmV0dXJuIG1lKHRoaXMpLHRoaXNbZV19O0QoVixTKTtmdW5jdGlvbiByZSgpe31mdW5jdGlvbiBHZShlLHQpe2Zvcih2YXIgbj1lLmxlbmd0aDtuLS07KWlmKGVbbl09PT10KXJldHVybiBufWZ1bmN0aW9uIFdlKGUsdCxuLHIpe2lmKHI/dFtHZSh0LHIpXT1uOnRbdC5sZW5ndGgrK109bixlKXtuLm93bmVyRWxlbWVudD1lO3ZhciBhPWUub3duZXJEb2N1bWVudDthJiYociYmS2UoYSxlLHIpLEF0KGEsZSxuKSl9fWZ1bmN0aW9uIFFlKGUsdCxuKXt2YXIgcj1HZSh0LG4pO2lmKHI+PTApe2Zvcih2YXIgYT10Lmxlbmd0aC0xO3I8YTspdFtyXT10Wysrcl07aWYodC5sZW5ndGg9YSxlKXt2YXIgaT1lLm93bmVyRG9jdW1lbnQ7aSYmKEtlKGksZSxuKSxuLm93bmVyRWxlbWVudD1udWxsKX19ZWxzZSB0aHJvdyBNKHh0LG5ldyBFcnJvcihlLnRhZ05hbWUrXFxcIkBcXFwiK24pKX1yZS5wcm90b3R5cGU9e2xlbmd0aDowLGl0ZW06Uy5wcm90b3R5cGUuaXRlbSxnZXROYW1lZEl0ZW06ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMubGVuZ3RoO3QtLTspe3ZhciBuPXRoaXNbdF07aWYobi5ub2RlTmFtZT09ZSlyZXR1cm4gbn19LHNldE5hbWVkSXRlbTpmdW5jdGlvbihlKXt2YXIgdD1lLm93bmVyRWxlbWVudDtpZih0JiZ0IT10aGlzLl9vd25lckVsZW1lbnQpdGhyb3cgbmV3IE0oamUpO3ZhciBuPXRoaXMuZ2V0TmFtZWRJdGVtKGUubm9kZU5hbWUpO3JldHVybiBXZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxlLG4pLG59LHNldE5hbWVkSXRlbU5TOmZ1bmN0aW9uKGUpe3ZhciB0PWUub3duZXJFbGVtZW50LG47aWYodCYmdCE9dGhpcy5fb3duZXJFbGVtZW50KXRocm93IG5ldyBNKGplKTtyZXR1cm4gbj10aGlzLmdldE5hbWVkSXRlbU5TKGUubmFtZXNwYWNlVVJJLGUubG9jYWxOYW1lKSxXZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxlLG4pLG59LHJlbW92ZU5hbWVkSXRlbTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldE5hbWVkSXRlbShlKTtyZXR1cm4gUWUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsdCksdH0scmVtb3ZlTmFtZWRJdGVtTlM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmdldE5hbWVkSXRlbU5TKGUsdCk7cmV0dXJuIFFlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLG4pLG59LGdldE5hbWVkSXRlbU5TOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXRoaXMubGVuZ3RoO24tLTspe3ZhciByPXRoaXNbbl07aWYoci5sb2NhbE5hbWU9PXQmJnIubmFtZXNwYWNlVVJJPT1lKXJldHVybiByfXJldHVybiBudWxsfX07ZnVuY3Rpb24gQmUoZSl7aWYodGhpcy5fZmVhdHVyZXM9e30sZSlmb3IodmFyIHQgaW4gZSl0aGlzLl9mZWF0dXJlcz1lW3RdfUJlLnByb3RvdHlwZT17aGFzRmVhdHVyZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuX2ZlYXR1cmVzW2UudG9Mb3dlckNhc2UoKV07cmV0dXJuISEobiYmKCF0fHx0IGluIG4pKX0sY3JlYXRlRG9jdW1lbnQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW5ldyBCO2lmKHIuaW1wbGVtZW50YXRpb249dGhpcyxyLmNoaWxkTm9kZXM9bmV3IFMsci5kb2N0eXBlPW4sbiYmci5hcHBlbmRDaGlsZChuKSx0KXt2YXIgYT1yLmNyZWF0ZUVsZW1lbnROUyhlLHQpO3IuYXBwZW5kQ2hpbGQoYSl9cmV0dXJuIHJ9LGNyZWF0ZURvY3VtZW50VHlwZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9bmV3IEVlO3JldHVybiByLm5hbWU9ZSxyLm5vZGVOYW1lPWUsci5wdWJsaWNJZD10LHIuc3lzdGVtSWQ9bixyfX07ZnVuY3Rpb24gTigpe31OLnByb3RvdHlwZT17Zmlyc3RDaGlsZDpudWxsLGxhc3RDaGlsZDpudWxsLHByZXZpb3VzU2libGluZzpudWxsLG5leHRTaWJsaW5nOm51bGwsYXR0cmlidXRlczpudWxsLHBhcmVudE5vZGU6bnVsbCxjaGlsZE5vZGVzOm51bGwsb3duZXJEb2N1bWVudDpudWxsLG5vZGVWYWx1ZTpudWxsLG5hbWVzcGFjZVVSSTpudWxsLHByZWZpeDpudWxsLGxvY2FsTmFtZTpudWxsLGluc2VydEJlZm9yZTpmdW5jdGlvbihlLHQpe3JldHVybiBIZSh0aGlzLGUsdCl9LHJlcGxhY2VDaGlsZDpmdW5jdGlvbihlLHQpe3RoaXMuaW5zZXJ0QmVmb3JlKGUsdCksdCYmdGhpcy5yZW1vdmVDaGlsZCh0KX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oZSl7cmV0dXJuIEplKHRoaXMsZSl9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmluc2VydEJlZm9yZShlLG51bGwpfSxoYXNDaGlsZE5vZGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmlyc3RDaGlsZCE9bnVsbH0sY2xvbmVOb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBEZSh0aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsdGhpcyxlKX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuZmlyc3RDaGlsZDtlOyl7dmFyIHQ9ZS5uZXh0U2libGluZzt0JiZ0Lm5vZGVUeXBlPT1uZSYmZS5ub2RlVHlwZT09bmU/KHRoaXMucmVtb3ZlQ2hpbGQodCksZS5hcHBlbmREYXRhKHQuZGF0YSkpOihlLm5vcm1hbGl6ZSgpLGU9dCl9fSxpc1N1cHBvcnRlZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShlLHQpfSxoYXNBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5sZW5ndGg+MH0sbG9va3VwUHJlZml4OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzO3Q7KXt2YXIgbj10Ll9uc01hcDtpZihuKXtmb3IodmFyIHIgaW4gbilpZihuW3JdPT1lKXJldHVybiByfXQ9dC5ub2RlVHlwZT09az90Lm93bmVyRG9jdW1lbnQ6dC5wYXJlbnROb2RlfXJldHVybiBudWxsfSxsb29rdXBOYW1lc3BhY2VVUkk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXM7dDspe3ZhciBuPXQuX25zTWFwO2lmKG4mJmUgaW4gbilyZXR1cm4gbltlXTt0PXQubm9kZVR5cGU9PWs/dC5vd25lckRvY3VtZW50OnQucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH0saXNEZWZhdWx0TmFtZXNwYWNlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubG9va3VwUHJlZml4KGUpO3JldHVybiB0PT1udWxsfX07ZnVuY3Rpb24gWmUoZSl7cmV0dXJuIGU9PVxcXCI8XFxcIiYmXFxcIiZsdDtcXFwifHxlPT1cXFwiPlxcXCImJlxcXCImZ3Q7XFxcInx8ZT09XFxcIiZcXFwiJiZcXFwiJmFtcDtcXFwifHxlPT0nXFxcIicmJlxcXCImcXVvdDtcXFwifHxcXFwiJiNcXFwiK2UuY2hhckNvZGVBdCgpK1xcXCI7XFxcIn1XKHcsTik7Vyh3LE4ucHJvdG90eXBlKTtmdW5jdGlvbiBRKGUsdCl7aWYodChlKSlyZXR1cm4hMDtpZihlPWUuZmlyc3RDaGlsZClkbyBpZihRKGUsdCkpcmV0dXJuITA7d2hpbGUoZT1lLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBCKCl7fWZ1bmN0aW9uIEF0KGUsdCxuKXtlJiZlLl9pbmMrKzt2YXIgcj1uLm5hbWVzcGFjZVVSSTtyPT1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cXFwiJiYodC5fbnNNYXBbbi5wcmVmaXg/bi5sb2NhbE5hbWU6XFxcIlxcXCJdPW4udmFsdWUpfWZ1bmN0aW9uIEtlKGUsdCxuLHIpe2UmJmUuX2luYysrO3ZhciBhPW4ubmFtZXNwYWNlVVJJO2E9PVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1xcXCImJmRlbGV0ZSB0Ll9uc01hcFtuLnByZWZpeD9uLmxvY2FsTmFtZTpcXFwiXFxcIl19ZnVuY3Rpb24gaGUoZSx0LG4pe2lmKGUmJmUuX2luYyl7ZS5faW5jKys7dmFyIHI9dC5jaGlsZE5vZGVzO2lmKG4pcltyLmxlbmd0aCsrXT1uO2Vsc2V7Zm9yKHZhciBhPXQuZmlyc3RDaGlsZCxpPTA7YTspcltpKytdPWEsYT1hLm5leHRTaWJsaW5nO3IubGVuZ3RoPWl9fX1mdW5jdGlvbiBKZShlLHQpe3ZhciBuPXQucHJldmlvdXNTaWJsaW5nLHI9dC5uZXh0U2libGluZztyZXR1cm4gbj9uLm5leHRTaWJsaW5nPXI6ZS5maXJzdENoaWxkPXIscj9yLnByZXZpb3VzU2libGluZz1uOmUubGFzdENoaWxkPW4saGUoZS5vd25lckRvY3VtZW50LGUpLHR9ZnVuY3Rpb24gSGUoZSx0LG4pe3ZhciByPXQucGFyZW50Tm9kZTtpZihyJiZyLnJlbW92ZUNoaWxkKHQpLHQubm9kZVR5cGU9PT1SKXt2YXIgYT10LmZpcnN0Q2hpbGQ7aWYoYT09bnVsbClyZXR1cm4gdDt2YXIgaT10Lmxhc3RDaGlsZH1lbHNlIGE9aT10O3ZhciBvPW4/bi5wcmV2aW91c1NpYmxpbmc6ZS5sYXN0Q2hpbGQ7YS5wcmV2aW91c1NpYmxpbmc9byxpLm5leHRTaWJsaW5nPW4sbz9vLm5leHRTaWJsaW5nPWE6ZS5maXJzdENoaWxkPWEsbj09bnVsbD9lLmxhc3RDaGlsZD1pOm4ucHJldmlvdXNTaWJsaW5nPWk7ZG8gYS5wYXJlbnROb2RlPWU7d2hpbGUoYSE9PWkmJihhPWEubmV4dFNpYmxpbmcpKTtyZXR1cm4gaGUoZS5vd25lckRvY3VtZW50fHxlLGUpLHQubm9kZVR5cGU9PVImJih0LmZpcnN0Q2hpbGQ9dC5sYXN0Q2hpbGQ9bnVsbCksdH1mdW5jdGlvbiBJdChlLHQpe3ZhciBuPXQucGFyZW50Tm9kZTtpZihuKXt2YXIgcj1lLmxhc3RDaGlsZDtuLnJlbW92ZUNoaWxkKHQpO3ZhciByPWUubGFzdENoaWxkfXZhciByPWUubGFzdENoaWxkO3JldHVybiB0LnBhcmVudE5vZGU9ZSx0LnByZXZpb3VzU2libGluZz1yLHQubmV4dFNpYmxpbmc9bnVsbCxyP3IubmV4dFNpYmxpbmc9dDplLmZpcnN0Q2hpbGQ9dCxlLmxhc3RDaGlsZD10LGhlKGUub3duZXJEb2N1bWVudCxlLHQpLHR9Qi5wcm90b3R5cGU9e25vZGVOYW1lOlxcXCIjZG9jdW1lbnRcXFwiLG5vZGVUeXBlOlllLGRvY3R5cGU6bnVsbCxkb2N1bWVudEVsZW1lbnQ6bnVsbCxfaW5jOjEsaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGUsdCl7aWYoZS5ub2RlVHlwZT09Uil7Zm9yKHZhciBuPWUuZmlyc3RDaGlsZDtuOyl7dmFyIHI9bi5uZXh0U2libGluZzt0aGlzLmluc2VydEJlZm9yZShuLHQpLG49cn1yZXR1cm4gZX1yZXR1cm4gdGhpcy5kb2N1bWVudEVsZW1lbnQ9PW51bGwmJmUubm9kZVR5cGU9PXgmJih0aGlzLmRvY3VtZW50RWxlbWVudD1lKSxIZSh0aGlzLGUsdCksZS5vd25lckRvY3VtZW50PXRoaXMsZX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZG9jdW1lbnRFbGVtZW50PT1lJiYodGhpcy5kb2N1bWVudEVsZW1lbnQ9bnVsbCksSmUodGhpcyxlKX0saW1wb3J0Tm9kZTpmdW5jdGlvbihlLHQpe3JldHVybiBpdCh0aGlzLGUsdCl9LGdldEVsZW1lbnRCeUlkOmZ1bmN0aW9uKGUpe3ZhciB0PW51bGw7cmV0dXJuIFEodGhpcy5kb2N1bWVudEVsZW1lbnQsZnVuY3Rpb24obil7aWYobi5ub2RlVHlwZT09eCYmbi5nZXRBdHRyaWJ1dGUoXFxcImlkXFxcIik9PWUpcmV0dXJuIHQ9biwhMH0pLHR9LGdldEVsZW1lbnRzQnlDbGFzc05hbWU6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFJlZ0V4cChcXFwiKF58XFxcXFxcXFxzKVxcXCIrZStcXFwiKFxcXFxcXFxcc3wkKVxcXCIpO3JldHVybiBuZXcgVih0aGlzLGZ1bmN0aW9uKG4pe3ZhciByPVtdO3JldHVybiBRKG4uZG9jdW1lbnRFbGVtZW50LGZ1bmN0aW9uKGEpe2EhPT1uJiZhLm5vZGVUeXBlPT14JiZ0LnRlc3QoYS5nZXRBdHRyaWJ1dGUoXFxcImNsYXNzXFxcIikpJiZyLnB1c2goYSl9KSxyfSl9LGNyZWF0ZUVsZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHE7dC5vd25lckRvY3VtZW50PXRoaXMsdC5ub2RlTmFtZT1lLHQudGFnTmFtZT1lLHQuY2hpbGROb2Rlcz1uZXcgUzt2YXIgbj10LmF0dHJpYnV0ZXM9bmV3IHJlO3JldHVybiBuLl9vd25lckVsZW1lbnQ9dCx0fSxjcmVhdGVEb2N1bWVudEZyYWdtZW50OmZ1bmN0aW9uKCl7dmFyIGU9bmV3IGllO3JldHVybiBlLm93bmVyRG9jdW1lbnQ9dGhpcyxlLmNoaWxkTm9kZXM9bmV3IFMsZX0sY3JlYXRlVGV4dE5vZGU6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IGRlO3JldHVybiB0Lm93bmVyRG9jdW1lbnQ9dGhpcyx0LmFwcGVuZERhdGEoZSksdH0sY3JlYXRlQ29tbWVudDpmdW5jdGlvbihlKXt2YXIgdD1uZXcgdmU7cmV0dXJuIHQub3duZXJEb2N1bWVudD10aGlzLHQuYXBwZW5kRGF0YShlKSx0fSxjcmVhdGVDREFUQVNlY3Rpb246ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IGdlO3JldHVybiB0Lm93bmVyRG9jdW1lbnQ9dGhpcyx0LmFwcGVuZERhdGEoZSksdH0sY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uOmZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IHllO3JldHVybiBuLm93bmVyRG9jdW1lbnQ9dGhpcyxuLnRhZ05hbWU9bi50YXJnZXQ9ZSxuLm5vZGVWYWx1ZT1uLmRhdGE9dCxufSxjcmVhdGVBdHRyaWJ1dGU6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IGFlO3JldHVybiB0Lm93bmVyRG9jdW1lbnQ9dGhpcyx0Lm5hbWU9ZSx0Lm5vZGVOYW1lPWUsdC5sb2NhbE5hbWU9ZSx0LnNwZWNpZmllZD0hMCx0fSxjcmVhdGVFbnRpdHlSZWZlcmVuY2U6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IE5lO3JldHVybiB0Lm93bmVyRG9jdW1lbnQ9dGhpcyx0Lm5vZGVOYW1lPWUsdH0sY3JlYXRlRWxlbWVudE5TOmZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IHEscj10LnNwbGl0KFxcXCI6XFxcIiksYT1uLmF0dHJpYnV0ZXM9bmV3IHJlO3JldHVybiBuLmNoaWxkTm9kZXM9bmV3IFMsbi5vd25lckRvY3VtZW50PXRoaXMsbi5ub2RlTmFtZT10LG4udGFnTmFtZT10LG4ubmFtZXNwYWNlVVJJPWUsci5sZW5ndGg9PTI/KG4ucHJlZml4PXJbMF0sbi5sb2NhbE5hbWU9clsxXSk6bi5sb2NhbE5hbWU9dCxhLl9vd25lckVsZW1lbnQ9bixufSxjcmVhdGVBdHRyaWJ1dGVOUzpmdW5jdGlvbihlLHQpe3ZhciBuPW5ldyBhZSxyPXQuc3BsaXQoXFxcIjpcXFwiKTtyZXR1cm4gbi5vd25lckRvY3VtZW50PXRoaXMsbi5ub2RlTmFtZT10LG4ubmFtZT10LG4ubmFtZXNwYWNlVVJJPWUsbi5zcGVjaWZpZWQ9ITAsci5sZW5ndGg9PTI/KG4ucHJlZml4PXJbMF0sbi5sb2NhbE5hbWU9clsxXSk6bi5sb2NhbE5hbWU9dCxufX07RChCLE4pO2Z1bmN0aW9uIHEoKXt0aGlzLl9uc01hcD17fX1xLnByb3RvdHlwZT17bm9kZVR5cGU6eCxoYXNBdHRyaWJ1dGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZShlKSE9bnVsbH0sZ2V0QXR0cmlidXRlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0QXR0cmlidXRlTm9kZShlKTtyZXR1cm4gdCYmdC52YWx1ZXx8XFxcIlxcXCJ9LGdldEF0dHJpYnV0ZU5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oZSl9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoZSk7bi52YWx1ZT1uLm5vZGVWYWx1ZT1cXFwiXFxcIit0LHRoaXMuc2V0QXR0cmlidXRlTm9kZShuKX0scmVtb3ZlQXR0cmlidXRlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0QXR0cmlidXRlTm9kZShlKTt0JiZ0aGlzLnJlbW92ZUF0dHJpYnV0ZU5vZGUodCl9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGUpe3JldHVybiBlLm5vZGVUeXBlPT09Uj90aGlzLmluc2VydEJlZm9yZShlLG51bGwpOkl0KHRoaXMsZSl9LHNldEF0dHJpYnV0ZU5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zZXROYW1lZEl0ZW0oZSl9LHNldEF0dHJpYnV0ZU5vZGVOUzpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbU5TKGUpfSxyZW1vdmVBdHRyaWJ1dGVOb2RlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXMucmVtb3ZlTmFtZWRJdGVtKGUubm9kZU5hbWUpfSxyZW1vdmVBdHRyaWJ1dGVOUzpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKGUsdCk7biYmdGhpcy5yZW1vdmVBdHRyaWJ1dGVOb2RlKG4pfSxoYXNBdHRyaWJ1dGVOUzpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhlLHQpIT1udWxsfSxnZXRBdHRyaWJ1dGVOUzpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKGUsdCk7cmV0dXJuIG4mJm4udmFsdWV8fFxcXCJcXFwifSxzZXRBdHRyaWJ1dGVOUzpmdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZU5TKGUsdCk7ci52YWx1ZT1yLm5vZGVWYWx1ZT1cXFwiXFxcIituLHRoaXMuc2V0QXR0cmlidXRlTm9kZShyKX0sZ2V0QXR0cmlidXRlTm9kZU5TOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW1OUyhlLHQpfSxnZXRFbGVtZW50c0J5VGFnTmFtZTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFYodGhpcyxmdW5jdGlvbih0KXt2YXIgbj1bXTtyZXR1cm4gUSh0LGZ1bmN0aW9uKHIpe3IhPT10JiZyLm5vZGVUeXBlPT14JiYoZT09PVxcXCIqXFxcInx8ci50YWdOYW1lPT1lKSYmbi5wdXNoKHIpfSksbn0pfSxnZXRFbGVtZW50c0J5VGFnTmFtZU5TOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBWKHRoaXMsZnVuY3Rpb24obil7dmFyIHI9W107cmV0dXJuIFEobixmdW5jdGlvbihhKXthIT09biYmYS5ub2RlVHlwZT09PXgmJihlPT09XFxcIipcXFwifHxhLm5hbWVzcGFjZVVSST09PWUpJiYodD09PVxcXCIqXFxcInx8YS5sb2NhbE5hbWU9PXQpJiZyLnB1c2goYSl9KSxyfSl9fTtCLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZT1xLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZTtCLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TPXEucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlM7RChxLE4pO2Z1bmN0aW9uIGFlKCl7fWFlLnByb3RvdHlwZS5ub2RlVHlwZT1rO0QoYWUsTik7ZnVuY3Rpb24gWigpe31aLnByb3RvdHlwZT17ZGF0YTpcXFwiXFxcIixzdWJzdHJpbmdEYXRhOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZGF0YS5zdWJzdHJpbmcoZSxlK3QpfSxhcHBlbmREYXRhOmZ1bmN0aW9uKGUpe2U9dGhpcy5kYXRhK2UsdGhpcy5ub2RlVmFsdWU9dGhpcy5kYXRhPWUsdGhpcy5sZW5ndGg9ZS5sZW5ndGh9LGluc2VydERhdGE6ZnVuY3Rpb24oZSx0KXt0aGlzLnJlcGxhY2VEYXRhKGUsMCx0KX0sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGdbQ3RdKX0sZGVsZXRlRGF0YTpmdW5jdGlvbihlLHQpe3RoaXMucmVwbGFjZURhdGEoZSx0LFxcXCJcXFwiKX0scmVwbGFjZURhdGE6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuZGF0YS5zdWJzdHJpbmcoMCxlKSxhPXRoaXMuZGF0YS5zdWJzdHJpbmcoZSt0KTtuPXIrbithLHRoaXMubm9kZVZhbHVlPXRoaXMuZGF0YT1uLHRoaXMubGVuZ3RoPW4ubGVuZ3RofX07RChaLE4pO2Z1bmN0aW9uIGRlKCl7fWRlLnByb3RvdHlwZT17bm9kZU5hbWU6XFxcIiN0ZXh0XFxcIixub2RlVHlwZTpuZSxzcGxpdFRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5kYXRhLG49dC5zdWJzdHJpbmcoZSk7dD10LnN1YnN0cmluZygwLGUpLHRoaXMuZGF0YT10aGlzLm5vZGVWYWx1ZT10LHRoaXMubGVuZ3RoPXQubGVuZ3RoO3ZhciByPXRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKTtyZXR1cm4gdGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHIsdGhpcy5uZXh0U2libGluZykscn19O0QoZGUsWik7ZnVuY3Rpb24gdmUoKXt9dmUucHJvdG90eXBlPXtub2RlTmFtZTpcXFwiI2NvbW1lbnRcXFwiLG5vZGVUeXBlOlhlfTtEKHZlLFopO2Z1bmN0aW9uIGdlKCl7fWdlLnByb3RvdHlwZT17bm9kZU5hbWU6XFxcIiNjZGF0YS1zZWN0aW9uXFxcIixub2RlVHlwZTprZX07RChnZSxaKTtmdW5jdGlvbiBFZSgpe31FZS5wcm90b3R5cGUubm9kZVR5cGU9emU7RChFZSxOKTtmdW5jdGlvbiBldCgpe31ldC5wcm90b3R5cGUubm9kZVR5cGU9X3Q7RChldCxOKTtmdW5jdGlvbiB0dCgpe310dC5wcm90b3R5cGUubm9kZVR5cGU9YnQ7RCh0dCxOKTtmdW5jdGlvbiBOZSgpe31OZS5wcm90b3R5cGUubm9kZVR5cGU9VmU7RChOZSxOKTtmdW5jdGlvbiBpZSgpe31pZS5wcm90b3R5cGUubm9kZU5hbWU9XFxcIiNkb2N1bWVudC1mcmFnbWVudFxcXCI7aWUucHJvdG90eXBlLm5vZGVUeXBlPVI7RChpZSxOKTtmdW5jdGlvbiB5ZSgpe315ZS5wcm90b3R5cGUubm9kZVR5cGU9cWU7RCh5ZSxOKTtmdW5jdGlvbiBudCgpe31udC5wcm90b3R5cGUuc2VyaWFsaXplVG9TdHJpbmc9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBydC5jYWxsKGUsdCxuKX07Ti5wcm90b3R5cGUudG9TdHJpbmc9cnQ7ZnVuY3Rpb24gcnQoZSx0KXt2YXIgbj1bXSxyPXRoaXMubm9kZVR5cGU9PTkmJnRoaXMuZG9jdW1lbnRFbGVtZW50fHx0aGlzLGE9ci5wcmVmaXgsaT1yLm5hbWVzcGFjZVVSSTtpZihpJiZhPT1udWxsKXt2YXIgYT1yLmxvb2t1cFByZWZpeChpKTtpZihhPT1udWxsKXZhciBvPVt7bmFtZXNwYWNlOmkscHJlZml4Om51bGx9XX1yZXR1cm4gWCh0aGlzLG4sZSx0LG8pLG4uam9pbihcXFwiXFxcIil9ZnVuY3Rpb24gYXQoZSx0LG4pe3ZhciByPWUucHJlZml4fHxcXFwiXFxcIixhPWUubmFtZXNwYWNlVVJJO2lmKCFyJiYhYXx8cj09PVxcXCJ4bWxcXFwiJiZhPT09XFxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVxcXCJ8fGE9PVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1xcXCIpcmV0dXJuITE7Zm9yKHZhciBpPW4ubGVuZ3RoO2ktLTspe3ZhciBvPW5baV07aWYoby5wcmVmaXg9PXIpcmV0dXJuIG8ubmFtZXNwYWNlIT1hfXJldHVybiEwfWZ1bmN0aW9uIFgoZSx0LG4scixhKXtpZihyKWlmKGU9cihlKSxlKXtpZih0eXBlb2YgZT09XFxcInN0cmluZ1xcXCIpe3QucHVzaChlKTtyZXR1cm59fWVsc2UgcmV0dXJuO3N3aXRjaChlLm5vZGVUeXBlKXtjYXNlIHg6YXx8KGE9W10pO3ZhciBpPWEubGVuZ3RoLG89ZS5hdHRyaWJ1dGVzLGM9by5sZW5ndGgsbD1lLmZpcnN0Q2hpbGQscz1lLnRhZ05hbWU7bj1UdD09PWUubmFtZXNwYWNlVVJJfHxuLHQucHVzaChcXFwiPFxcXCIscyk7Zm9yKHZhciB1PTA7dTxjO3UrKyl7dmFyIGg9by5pdGVtKHUpO2gucHJlZml4PT1cXFwieG1sbnNcXFwiP2EucHVzaCh7cHJlZml4OmgubG9jYWxOYW1lLG5hbWVzcGFjZTpoLnZhbHVlfSk6aC5ub2RlTmFtZT09XFxcInhtbG5zXFxcIiYmYS5wdXNoKHtwcmVmaXg6XFxcIlxcXCIsbmFtZXNwYWNlOmgudmFsdWV9KX1mb3IodmFyIHU9MDt1PGM7dSsrKXt2YXIgaD1vLml0ZW0odSk7aWYoYXQoaCxuLGEpKXt2YXIgcD1oLnByZWZpeHx8XFxcIlxcXCIsZD1oLm5hbWVzcGFjZVVSSSxUPXA/XFxcIiB4bWxuczpcXFwiK3A6XFxcIiB4bWxuc1xcXCI7dC5wdXNoKFQsJz1cXFwiJyxkLCdcXFwiJyksYS5wdXNoKHtwcmVmaXg6cCxuYW1lc3BhY2U6ZH0pfVgoaCx0LG4scixhKX1pZihhdChlLG4sYSkpe3ZhciBwPWUucHJlZml4fHxcXFwiXFxcIixkPWUubmFtZXNwYWNlVVJJO2lmKGQpe3ZhciBUPXA/XFxcIiB4bWxuczpcXFwiK3A6XFxcIiB4bWxuc1xcXCI7dC5wdXNoKFQsJz1cXFwiJyxkLCdcXFwiJyksYS5wdXNoKHtwcmVmaXg6cCxuYW1lc3BhY2U6ZH0pfX1pZihsfHxuJiYhL14oPzptZXRhfGxpbmt8aW1nfGJyfGhyfGlucHV0KSQvaS50ZXN0KHMpKXtpZih0LnB1c2goXFxcIj5cXFwiKSxuJiYvXnNjcmlwdCQvaS50ZXN0KHMpKWZvcig7bDspbC5kYXRhP3QucHVzaChsLmRhdGEpOlgobCx0LG4scixhKSxsPWwubmV4dFNpYmxpbmc7ZWxzZSBmb3IoO2w7KVgobCx0LG4scixhKSxsPWwubmV4dFNpYmxpbmc7dC5wdXNoKFxcXCI8L1xcXCIscyxcXFwiPlxcXCIpfWVsc2UgdC5wdXNoKFxcXCIvPlxcXCIpO3JldHVybjtjYXNlIFllOmNhc2UgUjpmb3IodmFyIGw9ZS5maXJzdENoaWxkO2w7KVgobCx0LG4scixhKSxsPWwubmV4dFNpYmxpbmc7cmV0dXJuO2Nhc2UgazpyZXR1cm4gdC5wdXNoKFxcXCIgXFxcIixlLm5hbWUsJz1cXFwiJyxlLnZhbHVlLnJlcGxhY2UoL1s8JlxcXCJdL2csWmUpLCdcXFwiJyk7Y2FzZSBuZTpyZXR1cm4gdC5wdXNoKGUuZGF0YS5yZXBsYWNlKC9bPCZdL2csWmUpLnJlcGxhY2UoL11dPi9nLFxcXCJdXSZndDtcXFwiKSk7Y2FzZSBrZTpyZXR1cm4gdC5wdXNoKFxcXCI8IVtDREFUQVtcXFwiLGUuZGF0YSxcXFwiXV0+XFxcIik7Y2FzZSBYZTpyZXR1cm4gdC5wdXNoKFxcXCI8IS0tXFxcIixlLmRhdGEsXFxcIi0tPlxcXCIpO2Nhc2UgemU6dmFyIG09ZS5wdWJsaWNJZCxmPWUuc3lzdGVtSWQ7aWYodC5wdXNoKFxcXCI8IURPQ1RZUEUgXFxcIixlLm5hbWUpLG0pdC5wdXNoKFxcXCIgUFVCTElDIFxcXCIsbSksZiYmZiE9XFxcIi5cXFwiJiZ0LnB1c2goXFxcIiBcXFwiLGYpLHQucHVzaChcXFwiPlxcXCIpO2Vsc2UgaWYoZiYmZiE9XFxcIi5cXFwiKXQucHVzaChcXFwiIFNZU1RFTSBcXFwiLGYsXFxcIj5cXFwiKTtlbHNle3ZhciBBPWUuaW50ZXJuYWxTdWJzZXQ7QSYmdC5wdXNoKFxcXCIgW1xcXCIsQSxcXFwiXVxcXCIpLHQucHVzaChcXFwiPlxcXCIpfXJldHVybjtjYXNlIHFlOnJldHVybiB0LnB1c2goXFxcIjw/XFxcIixlLnRhcmdldCxcXFwiIFxcXCIsZS5kYXRhLFxcXCI/PlxcXCIpO2Nhc2UgVmU6cmV0dXJuIHQucHVzaChcXFwiJlxcXCIsZS5ub2RlTmFtZSxcXFwiO1xcXCIpO2RlZmF1bHQ6dC5wdXNoKFxcXCI/P1xcXCIsZS5ub2RlTmFtZSl9fWZ1bmN0aW9uIGl0KGUsdCxuKXt2YXIgcjtzd2l0Y2godC5ub2RlVHlwZSl7Y2FzZSB4OnI9dC5jbG9uZU5vZGUoITEpLHIub3duZXJEb2N1bWVudD1lO2Nhc2UgUjpicmVhaztjYXNlIGs6bj0hMDticmVha31pZihyfHwocj10LmNsb25lTm9kZSghMSkpLHIub3duZXJEb2N1bWVudD1lLHIucGFyZW50Tm9kZT1udWxsLG4pZm9yKHZhciBhPXQuZmlyc3RDaGlsZDthOylyLmFwcGVuZENoaWxkKGl0KGUsYSxuKSksYT1hLm5leHRTaWJsaW5nO3JldHVybiByfWZ1bmN0aW9uIERlKGUsdCxuKXt2YXIgcj1uZXcgdC5jb25zdHJ1Y3Rvcjtmb3IodmFyIGEgaW4gdCl7dmFyIGk9dFthXTt0eXBlb2YgaSE9XFxcIm9iamVjdFxcXCImJmkhPXJbYV0mJihyW2FdPWkpfXN3aXRjaCh0LmNoaWxkTm9kZXMmJihyLmNoaWxkTm9kZXM9bmV3IFMpLHIub3duZXJEb2N1bWVudD1lLHIubm9kZVR5cGUpe2Nhc2UgeDp2YXIgbz10LmF0dHJpYnV0ZXMsYz1yLmF0dHJpYnV0ZXM9bmV3IHJlLGw9by5sZW5ndGg7Yy5fb3duZXJFbGVtZW50PXI7Zm9yKHZhciBzPTA7czxsO3MrKylyLnNldEF0dHJpYnV0ZU5vZGUoRGUoZSxvLml0ZW0ocyksITApKTticmVhaztjYXNlIGs6bj0hMH1pZihuKWZvcih2YXIgdT10LmZpcnN0Q2hpbGQ7dTspci5hcHBlbmRDaGlsZChEZShlLHUsbikpLHU9dS5uZXh0U2libGluZztyZXR1cm4gcn1mdW5jdGlvbiBvdChlLHQsbil7ZVt0XT1ufXRyeXtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkpe2xldCBlPWZ1bmN0aW9uKHQpe3N3aXRjaCh0Lm5vZGVUeXBlKXtjYXNlIHg6Y2FzZSBSOnZhciBuPVtdO2Zvcih0PXQuZmlyc3RDaGlsZDt0Oyl0Lm5vZGVUeXBlIT09NyYmdC5ub2RlVHlwZSE9PTgmJm4ucHVzaChlKHQpKSx0PXQubmV4dFNpYmxpbmc7cmV0dXJuIG4uam9pbihcXFwiXFxcIik7ZGVmYXVsdDpyZXR1cm4gdC5ub2RlVmFsdWV9fTtIdD1lLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWLnByb3RvdHlwZSxcXFwibGVuZ3RoXFxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG1lKHRoaXMpLHRoaXMuJCRsZW5ndGh9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KE4ucHJvdG90eXBlLFxcXCJ0ZXh0Q29udGVudFxcXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBlKHRoaXMpfSxzZXQ6ZnVuY3Rpb24odCl7c3dpdGNoKHRoaXMubm9kZVR5cGUpe2Nhc2UgeDpjYXNlIFI6Zm9yKDt0aGlzLmZpcnN0Q2hpbGQ7KXRoaXMucmVtb3ZlQ2hpbGQodGhpcy5maXJzdENoaWxkKTsodHx8U3RyaW5nKHQpKSYmdGhpcy5hcHBlbmRDaGlsZCh0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodCkpO2JyZWFrO2RlZmF1bHQ6dGhpcy5kYXRhPXQsdGhpcy52YWx1ZT10LHRoaXMubm9kZVZhbHVlPXR9fX0pLG90PWZ1bmN0aW9uKHQsbixyKXt0W1xcXCIkJFxcXCIrbl09cn19fWNhdGNoKGUpe312YXIgSHQ7Sy5Ob2RlPU47Sy5ET01FeGNlcHRpb249TTtLLkRPTUltcGxlbWVudGF0aW9uPUJlO0suWE1MU2VyaWFsaXplcj1udH0pO3ZhciBjdD1lZShIPT57ZnVuY3Rpb24gc3QoZSl7dGhpcy5vcHRpb25zPWV8fHtsb2NhdG9yOnt9fX1zdC5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5vcHRpb25zLHI9bmV3IFN0LGE9bi5kb21CdWlsZGVyfHxuZXcgSixpPW4uZXJyb3JIYW5kbGVyLG89bi5sb2NhdG9yLGM9bi54bWxuc3x8e30sbD0vXFxcXC94P2h0bWw/JC8udGVzdCh0KSxzPWw/T3QuZW50aXR5TWFwOntsdDpcXFwiPFxcXCIsZ3Q6XFxcIj5cXFwiLGFtcDpcXFwiJlxcXCIscXVvdDonXFxcIicsYXBvczpcXFwiJ1xcXCJ9O3JldHVybiBvJiZhLnNldERvY3VtZW50TG9jYXRvcihvKSxyLmVycm9ySGFuZGxlcj1SdChpLGEsbyksci5kb21CdWlsZGVyPW4uZG9tQnVpbGRlcnx8YSxsJiYoY1tcXFwiXFxcIl09XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcXFwiKSxjLnhtbD1jLnhtbHx8XFxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVxcXCIsZSYmdHlwZW9mIGU9PVxcXCJzdHJpbmdcXFwiP3IucGFyc2UoZSxjLHMpOnIuZXJyb3JIYW5kbGVyLmVycm9yKFxcXCJpbnZhbGlkIGRvYyBzb3VyY2VcXFwiKSxhLmRvY307ZnVuY3Rpb24gUnQoZSx0LG4pe2lmKCFlKXtpZih0IGluc3RhbmNlb2YgSilyZXR1cm4gdDtlPXR9dmFyIHI9e30sYT1lIGluc3RhbmNlb2YgRnVuY3Rpb247bj1ufHx7fTtmdW5jdGlvbiBpKG8pe3ZhciBjPWVbb107IWMmJmEmJihjPWUubGVuZ3RoPT0yP2Z1bmN0aW9uKGwpe2UobyxsKX06ZSkscltvXT1jJiZmdW5jdGlvbihsKXtjKFxcXCJbeG1sZG9tIFxcXCIrbytcXFwiXVxcdFxcXCIrbCtUZShuKSl9fHxmdW5jdGlvbigpe319cmV0dXJuIGkoXFxcIndhcm5pbmdcXFwiKSxpKFxcXCJlcnJvclxcXCIpLGkoXFxcImZhdGFsRXJyb3JcXFwiKSxyfWZ1bmN0aW9uIEooKXt0aGlzLmNkYXRhPSExfWZ1bmN0aW9uIFkoZSx0KXt0LmxpbmVOdW1iZXI9ZS5saW5lTnVtYmVyLHQuY29sdW1uTnVtYmVyPWUuY29sdW1uTnVtYmVyfUoucHJvdG90eXBlPXtzdGFydERvY3VtZW50OmZ1bmN0aW9uKCl7dGhpcy5kb2M9bmV3IFV0KCkuY3JlYXRlRG9jdW1lbnQobnVsbCxudWxsLG51bGwpLHRoaXMubG9jYXRvciYmKHRoaXMuZG9jLmRvY3VtZW50VVJJPXRoaXMubG9jYXRvci5zeXN0ZW1JZCl9LHN0YXJ0RWxlbWVudDpmdW5jdGlvbihlLHQsbixyKXt2YXIgYT10aGlzLmRvYyxpPWEuY3JlYXRlRWxlbWVudE5TKGUsbnx8dCksbz1yLmxlbmd0aDtvZSh0aGlzLGkpLHRoaXMuY3VycmVudEVsZW1lbnQ9aSx0aGlzLmxvY2F0b3ImJlkodGhpcy5sb2NhdG9yLGkpO2Zvcih2YXIgYz0wO2M8bztjKyspe3ZhciBlPXIuZ2V0VVJJKGMpLGw9ci5nZXRWYWx1ZShjKSxuPXIuZ2V0UU5hbWUoYykscz1hLmNyZWF0ZUF0dHJpYnV0ZU5TKGUsbik7dGhpcy5sb2NhdG9yJiZZKHIuZ2V0TG9jYXRvcihjKSxzKSxzLnZhbHVlPXMubm9kZVZhbHVlPWwsaS5zZXRBdHRyaWJ1dGVOb2RlKHMpfX0sZW5kRWxlbWVudDpmdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5jdXJyZW50RWxlbWVudCxhPXIudGFnTmFtZTt0aGlzLmN1cnJlbnRFbGVtZW50PXIucGFyZW50Tm9kZX0sc3RhcnRQcmVmaXhNYXBwaW5nOmZ1bmN0aW9uKGUsdCl7fSxlbmRQcmVmaXhNYXBwaW5nOmZ1bmN0aW9uKGUpe30scHJvY2Vzc2luZ0luc3RydWN0aW9uOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5kb2MuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uKGUsdCk7dGhpcy5sb2NhdG9yJiZZKHRoaXMubG9jYXRvcixuKSxvZSh0aGlzLG4pfSxpZ25vcmFibGVXaGl0ZXNwYWNlOmZ1bmN0aW9uKGUsdCxuKXt9LGNoYXJhY3RlcnM6ZnVuY3Rpb24oZSx0LG4pe2lmKGU9dXQuYXBwbHkodGhpcyxhcmd1bWVudHMpLGUpe2lmKHRoaXMuY2RhdGEpdmFyIHI9dGhpcy5kb2MuY3JlYXRlQ0RBVEFTZWN0aW9uKGUpO2Vsc2UgdmFyIHI9dGhpcy5kb2MuY3JlYXRlVGV4dE5vZGUoZSk7dGhpcy5jdXJyZW50RWxlbWVudD90aGlzLmN1cnJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHIpOi9eXFxcXHMqJC8udGVzdChlKSYmdGhpcy5kb2MuYXBwZW5kQ2hpbGQociksdGhpcy5sb2NhdG9yJiZZKHRoaXMubG9jYXRvcixyKX19LHNraXBwZWRFbnRpdHk6ZnVuY3Rpb24oZSl7fSxlbmREb2N1bWVudDpmdW5jdGlvbigpe3RoaXMuZG9jLm5vcm1hbGl6ZSgpfSxzZXREb2N1bWVudExvY2F0b3I6ZnVuY3Rpb24oZSl7KHRoaXMubG9jYXRvcj1lKSYmKGUubGluZU51bWJlcj0wKX0sY29tbWVudDpmdW5jdGlvbihlLHQsbil7ZT11dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIHI9dGhpcy5kb2MuY3JlYXRlQ29tbWVudChlKTt0aGlzLmxvY2F0b3ImJlkodGhpcy5sb2NhdG9yLHIpLG9lKHRoaXMscil9LHN0YXJ0Q0RBVEE6ZnVuY3Rpb24oKXt0aGlzLmNkYXRhPSEwfSxlbmRDREFUQTpmdW5jdGlvbigpe3RoaXMuY2RhdGE9ITF9LHN0YXJ0RFREOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmRvYy5pbXBsZW1lbnRhdGlvbjtpZihyJiZyLmNyZWF0ZURvY3VtZW50VHlwZSl7dmFyIGE9ci5jcmVhdGVEb2N1bWVudFR5cGUoZSx0LG4pO3RoaXMubG9jYXRvciYmWSh0aGlzLmxvY2F0b3IsYSksb2UodGhpcyxhKX19LHdhcm5pbmc6ZnVuY3Rpb24oZSl7Y29uc29sZS53YXJuKFxcXCJbeG1sZG9tIHdhcm5pbmddXFx0XFxcIitlLFRlKHRoaXMubG9jYXRvcikpfSxlcnJvcjpmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKFxcXCJbeG1sZG9tIGVycm9yXVxcdFxcXCIrZSxUZSh0aGlzLmxvY2F0b3IpKX0sZmF0YWxFcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBuZXcgTXQoZSx0aGlzLmxvY2F0b3IpfX07ZnVuY3Rpb24gVGUoZSl7aWYoZSlyZXR1cm5gXFxuQGArKGUuc3lzdGVtSWR8fFxcXCJcXFwiKStcXFwiI1tsaW5lOlxcXCIrZS5saW5lTnVtYmVyK1xcXCIsY29sOlxcXCIrZS5jb2x1bW5OdW1iZXIrXFxcIl1cXFwifWZ1bmN0aW9uIHV0KGUsdCxuKXtyZXR1cm4gdHlwZW9mIGU9PVxcXCJzdHJpbmdcXFwiP2Uuc3Vic3RyKHQsbik6ZS5sZW5ndGg+PXQrbnx8dD9uZXcgamF2YS5sYW5nLlN0cmluZyhlLHQsbikrXFxcIlxcXCI6ZX1cXFwiZW5kRFRELHN0YXJ0RW50aXR5LGVuZEVudGl0eSxhdHRyaWJ1dGVEZWNsLGVsZW1lbnREZWNsLGV4dGVybmFsRW50aXR5RGVjbCxpbnRlcm5hbEVudGl0eURlY2wscmVzb2x2ZUVudGl0eSxnZXRFeHRlcm5hbFN1YnNldCxub3RhdGlvbkRlY2wsdW5wYXJzZWRFbnRpdHlEZWNsXFxcIi5yZXBsYWNlKC9cXFxcdysvZyxmdW5jdGlvbihlKXtKLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiBudWxsfX0pO2Z1bmN0aW9uIG9lKGUsdCl7ZS5jdXJyZW50RWxlbWVudD9lLmN1cnJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHQpOmUuZG9jLmFwcGVuZENoaWxkKHQpfXZhciBPdD1SZSgpLGx0PVBlKCksU3Q9bHQuWE1MUmVhZGVyLE10PWx0LlBhcnNlRXJyb3IsVXQ9SC5ET01JbXBsZW1lbnRhdGlvbj13ZSgpLkRPTUltcGxlbWVudGF0aW9uO0guWE1MU2VyaWFsaXplcj13ZSgpLlhNTFNlcmlhbGl6ZXI7SC5ET01QYXJzZXI9c3Q7SC5fX0RPTUhhbmRsZXI9Sn0pO2Z1bmN0aW9uIGxlKGUsdCl7cmV0dXJuKGUldCt0KSV0fWZ1bmN0aW9uIGNlKGUpe3JldHVyblxcXCJJRF94eXh5eHl4eXh5eHlcXFwiLnJlcGxhY2UoL1t4eV0vZyxmdW5jdGlvbih0KXt2YXIgbj1NYXRoLnJhbmRvbSgpKjE2fDAscj10PT1cXFwieFxcXCI/bjpuJjN8ODtyZXR1cm4gci50b1N0cmluZygxNil9KX12YXJ7RE9NUGFyc2VyOiR0fT1jdCgpLEZ0PS8oPChzcGFufGRpdikuKj88XFxcXC8oc3BhbnxkaXYpPikvZyxVPXNlbGYsZnQ9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLnF1ZXVlPVtdO3RoaXMucGFyc2luZz0hMTt0aGlzLnBhcnNlVGl0bGU9ITE7VS5hZGRFdmVudExpc3RlbmVyKFxcXCJtZXNzYWdlXFxcIix0PT57aWYodC5kYXRhLnR5cGU9PVxcXCJvcHRpb25zXFxcIil7bGV0e2RlZmF1bHRDYWxlbmRhcjpuLGZvcm1hdDpyLHBhcnNlVGl0bGU6YSxzdXBwb3J0c1RpbWVsaW5lczppLHRpbWVsaW5lVGFnOm99PXQuZGF0YTt0aGlzLmRlZmF1bHRDYWxlbmRhcj1uLHRoaXMuZm9ybWF0PXIsdGhpcy5wYXJzZVRpdGxlPWEsdGhpcy5zdXBwb3J0c1RpbWVsaW5lcz1pLHRoaXMudGltZWxpbmVUYWc9b319KSxVLmFkZEV2ZW50TGlzdGVuZXIoXFxcIm1lc3NhZ2VcXFwiLHQ9PntpZih0LmRhdGEudHlwZT09XFxcImNhbGVuZGFyc1xcXCIpe2xldHtjYWxlbmRhcnM6bn09dC5kYXRhO3RoaXMuY2FsZW5kYXJzPVsuLi5uXX19KSxVLmFkZEV2ZW50TGlzdGVuZXIoXFxcIm1lc3NhZ2VcXFwiLHQ9Pnt0LmRhdGEudHlwZT09XFxcInF1ZXVlXFxcIiYmdGhpcy5hZGQoLi4udC5kYXRhLnBhdGhzKX0pfWFkZCguLi50KXt0aGlzLnF1ZXVlLnB1c2goLi4udCksdGhpcy5wYXJzaW5nfHx0aGlzLnBhcnNlKCl9YXN5bmMgcGFyc2UoKXtmb3IodGhpcy5wYXJzaW5nPSEwO3RoaXMucXVldWUubGVuZ3RoOyl7bGV0IHQ9dGhpcy5xdWV1ZS5zaGlmdCgpLHtkYXRhOm4sZmlsZTpyLGNhY2hlOmEsYWxsVGFnczppfT1hd2FpdCB0aGlzLmdldEZpbGVEYXRhKHQpO3RoaXMucGFyc2VGaWxlRm9yRXZlbnRzKG4sYSxpLHIpfXRoaXMucGFyc2luZz0hMSxVLnBvc3RNZXNzYWdlKHt0eXBlOlxcXCJzYXZlXFxcIn0pfWFzeW5jIGdldEZpbGVEYXRhKHQpe3JldHVybiBuZXcgUHJvbWlzZShuPT57VS5hZGRFdmVudExpc3RlbmVyKFxcXCJtZXNzYWdlXFxcIixyPT57bihyLmRhdGEpfSksVS5wb3N0TWVzc2FnZSh7cGF0aDp0LHR5cGU6XFxcImdldFxcXCJ9KX0pfWdldERhdGFGcm9tRnJvbnRtYXR0ZXIodCl7bGV0IG4scjtyZXR1cm4gdCYmKG49dD09bnVsbD92b2lkIDA6dFtcXFwiZmMtY2FsZW5kYXJcXFwiXSxyPXQ9PW51bGw/dm9pZCAwOnRbXFxcImZjLWNhdGVnb3J5XFxcIl0pLCghbnx8IW4ubGVuZ3RoKSYmKG49dGhpcy5kZWZhdWx0Q2FsZW5kYXIpLG49bi50b0xvd2VyQ2FzZSgpLHtjYWxlbmRhcjp0aGlzLmNhbGVuZGFycy5maW5kKGk9Pm49PWkubmFtZS50b0xvd2VyQ2FzZSgpKSxmY0NhdGVnb3J5OnJ9fXBhcnNlRmlsZUZvckV2ZW50cyh0LG4scixhKXt2YXIgcyx1LGgscCxkLFQ7bGV0IGk9W10se2Zyb250bWF0dGVyOm99PW4hPW51bGw/bjp7fSx7Y2FsZW5kYXI6YyxmY0NhdGVnb3J5Omx9PXRoaXMuZ2V0RGF0YUZyb21Gcm9udG1hdHRlcihvKTtpZighIWMpe3RoaXMuc3VwcG9ydHNUaW1lbGluZXMmJnImJnIuaW5jbHVkZXModGhpcy50aW1lbGluZVRhZykmJmkucHVzaCguLi50aGlzLnBhcnNlVGltZWxpbmVFdmVudHMoYyx0LGEsbCkpLGkucHVzaCguLi50aGlzLnBhcnNlRnJvbnRtYXR0ZXJFdmVudHMoYyxsLG8sYSkpO2ZvcihsZXQgbSBvZiBpKXtsZXQgZj1jLmV2ZW50cy5maW5kKEE9PkEubm90ZT09YS5wYXRoJiYoIW0udGltZXN0YW1wfHxBLnRpbWVzdGFtcD09bS50aW1lc3RhbXApKTsoZj09bnVsbD92b2lkIDA6Zi5kYXRlLmRheSk9PW0uZGF0ZS5kYXkmJihmPT1udWxsP3ZvaWQgMDpmLmRhdGUubW9udGgpPT1tLmRhdGUubW9udGgmJihmPT1udWxsP3ZvaWQgMDpmLmRhdGUueWVhcik9PW0uZGF0ZS55ZWFyJiYoKHM9Zj09bnVsbD92b2lkIDA6Zi5lbmQpPT1udWxsP3ZvaWQgMDpzLmRheSk9PSgodT1tLmVuZCk9PW51bGw/dm9pZCAwOnUuZGF5KSYmKChoPWY9PW51bGw/dm9pZCAwOmYuZW5kKT09bnVsbD92b2lkIDA6aC5tb250aCk9PSgocD1tLmVuZCk9PW51bGw/dm9pZCAwOnAubW9udGgpJiYoKGQ9Zj09bnVsbD92b2lkIDA6Zi5lbmQpPT1udWxsP3ZvaWQgMDpkLnllYXIpPT0oKFQ9bS5lbmQpPT1udWxsP3ZvaWQgMDpULnllYXIpJiYoZj09bnVsbD92b2lkIDA6Zi5jYXRlZ29yeSk9PW0uY2F0ZWdvcnkmJighbS50aW1lc3RhbXAmJiEoZj09bnVsbD92b2lkIDA6Zi50aW1lc3RhbXApfHwoZj09bnVsbD92b2lkIDA6Zi50aW1lc3RhbXApPT1tLnRpbWVzdGFtcCl8fFUucG9zdE1lc3NhZ2Uoe3R5cGU6XFxcInVwZGF0ZVxcXCIsaWQ6Yy5pZCxpbmRleDpmP2MuZXZlbnRzLmZpbmRJbmRleChBPT5BLmlkPT0oZj09bnVsbD92b2lkIDA6Zi5pZCkpOi0xLGV2ZW50Om0sb3JpZ2luYWw6Zn0pfX19cGFyc2VGcm9udG1hdHRlckV2ZW50cyh0LG4scixhKXtsZXR7ZGF0ZTppLGVuZDpvfT10aGlzLmdldERhdGVzKHIsdGhpcy5wYXJzZVRpdGxlP2EuYmFzZW5hbWU6XFxcIlxcXCIpO2lmKCFpKXJldHVybltdO2lmKChpPT1udWxsP3ZvaWQgMDppLm1vbnRoKSYmdHlwZW9mKGk9PW51bGw/dm9pZCAwOmkubW9udGgpPT1cXFwic3RyaW5nXFxcIil7bGV0IHM9dC5zdGF0aWMubW9udGhzLmZpbmQodT0+dS5uYW1lPT1pLm1vbnRoKTtzP2kubW9udGg9dC5zdGF0aWMubW9udGhzLmluZGV4T2Yocyk6aS5tb250aD1udWxsfWVsc2UoaT09bnVsbD92b2lkIDA6aS5tb250aCkmJnR5cGVvZihpPT1udWxsP3ZvaWQgMDppLm1vbnRoKT09XFxcIm51bWJlclxcXCImJihpLm1vbnRoPWxlKGkubW9udGgtMSx0LnN0YXRpYy5tb250aHMubGVuZ3RoKSk7aWYoKG89PW51bGw/dm9pZCAwOm8ubW9udGgpJiZ0eXBlb2Yobz09bnVsbD92b2lkIDA6by5tb250aCk9PVxcXCJzdHJpbmdcXFwiKXtsZXQgcz10LnN0YXRpYy5tb250aHMuZmluZCh1PT51Lm5hbWU9PW8ubW9udGgpO3M/by5tb250aD10LnN0YXRpYy5tb250aHMuaW5kZXhPZihzKTpvLm1vbnRoPW51bGx9ZWxzZShvPT1udWxsP3ZvaWQgMDpvLm1vbnRoKSYmdHlwZW9mKG89PW51bGw/dm9pZCAwOm8ubW9udGgpPT1cXFwibnVtYmVyXFxcIiYmKG8ubW9udGg9bGUoby5tb250aC0xLHQuc3RhdGljLm1vbnRocy5sZW5ndGgpKTtsZXQgYz1OdW1iZXIoYCR7aS55ZWFyfSR7aS5tb250aH0ke2kuZGF5fTAwYCksbD10LmNhdGVnb3JpZXMuZmluZChzPT4ocz09bnVsbD92b2lkIDA6cy5uYW1lKT09bik7cmV0dXJuW3tpZDpjZSg2KSxuYW1lOmEuYmFzZW5hbWUsbm90ZTphLnBhdGgsZGF0ZTppLGVuZDpvLGNhdGVnb3J5Omw9PW51bGw/dm9pZCAwOmwuaWQsZGVzY3JpcHRpb246XFxcIlxcXCJ9XX1wYXJzZVRpbWVsaW5lRXZlbnRzKHQsbixyLGEpe3ZhciBjO2xldCBpPVtdLG89bmV3ICR0O2ZvcihsZXQgbCBvZiBuLm1hdGNoQWxsKEZ0KSl7bGV0IHM9by5wYXJzZUZyb21TdHJpbmcobFswXSxcXFwidGV4dC9odG1sXFxcIiksdT17Y2xhc3M6cy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxcXCJjbGFzc1xcXCIpLGRhdGFzZXQ6e2RhdGU6cy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxcXCJkYXRhLWRhdGVcXFwiKSx0aXRsZTpzLmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXFxcImRhdGEtdGl0bGVcXFwiKSxjbGFzczpzLmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXFxcImRhdGEtY2xhc3NcXFwiKSxlbmQ6cy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxcXCJkYXRhLWVuZFxcXCIpfSxjb250ZW50OnMuZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50fTtpZih1LmNsYXNzIT09XFxcIm9iLXRpbWVsaW5lc1xcXCJ8fCF1LmRhdGFzZXQuZGF0ZSljb250aW51ZTtsZXQgaD1OdW1iZXIodS5kYXRhc2V0LmRhdGVbMF09PVxcXCItXFxcIj8rdS5kYXRhc2V0LmRhdGUuc3Vic3RyaW5nKDEsdS5kYXRhc2V0LmRhdGUubGVuZ3RoKS5zcGxpdChcXFwiLVxcXCIpLmpvaW4oXFxcIlxcXCIpKi0xOit1LmRhdGFzZXQuZGF0ZS5zcGxpdChcXFwiLVxcXCIpLmpvaW4oXFxcIlxcXCIpKSxwPXUuZGF0YXNldC5kYXRlLnNwbGl0KC8oPzwhXiktLyksZD17eWVhcjpwYXJzZUludChwWzBdKSxtb250aDpwYXJzZUludChwWzFdKSxkYXk6cGFyc2VJbnQocFsyXSl9LFQ7dS5kYXRhc2V0LmVuZCYmKHA9dS5kYXRhc2V0LmVuZC5zcGxpdCgvKD88IV4pLS8pLFQ9e3llYXI6cGFyc2VJbnQocFswXSksbW9udGg6cGFyc2VJbnQocFsxXSksZGF5OnBhcnNlSW50KHBbMl0pfSk7bGV0IG09dC5jYXRlZ29yaWVzLmZpbmQoZj0+KGY9PW51bGw/dm9pZCAwOmYubmFtZSk9PWEpO2kucHVzaCh7aWQ6Y2UoNiksbmFtZTooYz11LmRhdGFzZXQudGl0bGUpIT1udWxsP2M6ci5iYXNlbmFtZSxub3RlOnIucGF0aCxkYXRlOmQsZW5kOlQsdGltZXN0YW1wOmgsY2F0ZWdvcnk6bT09bnVsbD92b2lkIDA6bS5pZCxkZXNjcmlwdGlvbjp1LmNvbnRlbnR9KX1yZXR1cm4gaX1wYXJzZURhdGUodCl7dmFyIG47aWYodHlwZW9mIHQ9PVxcXCJzdHJpbmdcXFwiKXtpZighL1xcXFxkK1suLy1dXFxcXGQrWy4vLV1cXFxcZCsvLnRlc3QodCkpcmV0dXJuO3RyeXtsZXRbcl09KG49dC5tYXRjaCgvXFxcXGQrWy4vLV1cXFxcZCtbLi8tXVxcXFxkKy8pKSE9bnVsbD9uOltdO2lmKCFyKXJldHVybjtsZXQgYT1yLnNwbGl0KC9bLlxcXFwtXFxcXC9dLykubWFwKG89Pk51bWJlcihvKSksaT1bLi4ubmV3IFNldCh0aGlzLmZvcm1hdC5yZXBsYWNlKC9bXlxcXFx3XS9nLFxcXCJcXFwiKS50b1VwcGVyQ2FzZSgpLnNwbGl0KFxcXCJcXFwiKSldO3JldHVybnt5ZWFyOmFbaS5pbmRleE9mKFxcXCJZXFxcIildLG1vbnRoOmFbaS5pbmRleE9mKFxcXCJNXFxcIildLGRheTphW2kuaW5kZXhPZihcXFwiRFxcXCIpXX19Y2F0Y2gocil7cmV0dXJufX1lbHNlIHJldHVybiB0fWdldERhdGVzKHQ9e30sbil7bGV0IHI9XFxcImZjLWRhdGVcXFwiaW4gdD9cXFwiZmMtZGF0ZVxcXCI6XFxcImZjLXN0YXJ0XFxcIixhO3QmJnIgaW4gdCYmKGE9dFtyXSksYXx8KGE9bik7bGV0IGk9dGhpcy5wYXJzZURhdGUoYSksbz1cXFwiZmMtZW5kXFxcImluIHQ/dFtcXFwiZmMtZW5kXFxcIl06bnVsbCxjPXRoaXMucGFyc2VEYXRlKG8pO3JldHVybntkYXRlOmksZW5kOmN9fX07bmV3IGZ0O1xcblwiKTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IEN1cnJlbnRDYWxlbmRhckRhdGEsIE1vb24sIFBoYXNlIH0gZnJvbSBcInNyYy9AdHlwZXNcIjtcbmltcG9ydCB0eXBlIEFQSURlZmluaXRpb24gZnJvbSBcInNyYy9AdHlwZXMvYXBpXCI7XG5pbXBvcnQgQ2FsZW5kYXJIZWxwZXIgZnJvbSBcInNyYy9oZWxwZXJcIjtcbmltcG9ydCBGYW50YXN5Q2FsZW5kYXIgZnJvbSBcInNyYy9tYWluXCI7XG5cbmltcG9ydCBNb29uVUkgZnJvbSBcIi4uL3ZpZXcvdWkvTW9vbi5zdmVsdGVcIjtcblxuZXhwb3J0IGNsYXNzIEFQSSBpbXBsZW1lbnRzIEFQSURlZmluaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBGYW50YXN5Q2FsZW5kYXIpIHt9XG4gICAgZ2V0TW9vbnMoZGF0ZT86IEN1cnJlbnRDYWxlbmRhckRhdGEsIG5hbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY2FsZW5kYXIgPSBuYW1lXG4gICAgICAgICAgICA/IHRoaXMucGx1Z2luLmRhdGEuY2FsZW5kYXJzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAoeyBuYW1lOiBjX25hbWUgfSkgPT4gY19uYW1lID09IG5hbWVcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiB0aGlzLnBsdWdpbi5kZWZhdWx0Q2FsZW5kYXIgPz8gdGhpcy5wbHVnaW4uZGVmYXVsdENhbGVuZGFyO1xuICAgICAgICBjb25zdCBoZWxwZXIgPSB0aGlzLl9nZXRIZWxwZXIoY2FsZW5kYXIpO1xuXG4gICAgICAgIGNvbnN0IGRhdGVUb0dldCA9IGRhdGUgPyBkYXRlIDogaGVscGVyLmN1cnJlbnQ7XG5cbiAgICAgICAgY29uc3QgZGF5ID0gaGVscGVyLmdldERheUZvckRhdGUoZGF0ZVRvR2V0KTtcblxuICAgICAgICBsZXQgbW9vbnM6IEFycmF5PHsgaWNvbjogSFRNTFNwYW5FbGVtZW50OyBtb29uOiBNb29uOyBwaGFzZTogUGhhc2UgfT4gPVxuICAgICAgICAgICAgW107XG4gICAgICAgIGZvciAoY29uc3QgW21vb24sIHBoYXNlXSBvZiBkYXkubW9vbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGNyZWF0ZVNwYW4oKTtcbiAgICAgICAgICAgIG5ldyBNb29uVUkoe1xuICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICBtb29uLFxuICAgICAgICAgICAgICAgICAgICBwaGFzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbW9vbnMucHVzaCh7IGljb246IHRhcmdldCwgbW9vbiwgcGhhc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vb25zO1xuICAgIH1cbiAgICBwcml2YXRlIF9nZXRIZWxwZXIoY2FsZW5kYXIgPSB0aGlzLnBsdWdpbi5kZWZhdWx0Q2FsZW5kYXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYWxlbmRhckhlbHBlcihjYWxlbmRhciwgdGhpcy5wbHVnaW4pO1xuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFRLFVBQVUsbUJBQXFCLFNBQVMsVUFBUztBQUV2RCxVQUFBLFNBTUUsT0FBTSxRQUxSLGlCQUtFLE9BQU0sZ0JBSlIsMkJBSUUsT0FBTSwwQkFIUixzQkFHRSxPQUFNLHFCQUZSLHdCQUVFLE9BQU0sdUJBRFIsaUJBQ0UsT0FBTTtBQUNKLFVBQUEsS0FBMkMsT0FBTyxXQUFoRCxpQkFBYyxHQUFBLGdCQUFFLHVCQUFvQixHQUFBO0FBVXJDLFVBQU0sV0FBVztRQUN0QixtQkFBbUIsT0FBTywwQkFBMEI7UUFDcEQsU0FBUyxPQUFPLFlBQVk7O0FBV3ZCLFVBQU0sY0FBYyxXQUFBO0FBQ3pCLFlBQUksU0FBUyxTQUFTO0FBQ3BCLGlCQUFPLElBQUk7O0FBSWIsWUFBTSxTQUFTLE9BQU87VUFDcEIsS0FBSyxTQUFDLEtBQVE7QUFBSyxtQkFBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sUUFBUTs7VUFDM0MsS0FBSyxTQUFDLEtBQVUsT0FBVTtBQUN4QixtQkFBTyxNQUFNLEtBQUs7QUFDbEIsbUJBQU8sUUFBUSxLQUFLOztVQUV0QixLQUFLLFNBQUMsS0FBUTtBQUFLLG1CQUFBLE9BQU8sUUFBUSxPQUFPLE1BQU0sUUFBUTs7O0FBR3pELGVBQU8sUUFBUTtBQUNmLGVBQU8sVUFBVTtBQUVqQixlQUFPOztBQWFGLFVBQU0sZ0JBQWdCLFNBQUMsUUFBYSxP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QVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXO0FBQUEsUUFDdkgsTUFBTSxDQUFDLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVc7QUFBQSxRQUNySCxNQUFNLENBQUMsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVztBQUFBLFFBQ3JILE1BQU0sQ0FBQyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXO0FBQUEsUUFDckgsUUFBUSxDQUFDLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVc7QUFBQSxRQUN2SCxNQUFNLENBQUMsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVztBQUFBLFFBQ3JILE1BQU0sQ0FBQyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXO0FBQUEsUUFDckgsTUFBTSxDQUFDLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVc7QUFBQSxRQUlySCxNQUFNLENBQUMsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVztBQUFBLFFBQ3BGLFFBQVEsQ0FBQyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXO0FBQUEsUUFDdEYsTUFBTSxDQUFDLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVztBQUFBLFFBQy9GLE1BQU0sQ0FBQyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVc7QUFBQSxRQUNoSSxPQUFPLENBQUMsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVztBQUFBLFFBQ3JGLFFBQVEsQ0FBQyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFX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QVMsUUFBTyxVQUFTLFFBQU8sUUFBTyxVQUFTLEtBQUssUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLEtBQUksUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxRQUFPLFNBQVEsUUFBTyxTQUFRLEtBQUksUUFBTyxLQUFJLFFBQU8sS0FBSSxRQUFPLEtBQUksUUFBTyxLQUFJLFFBQU8sS0FBSSxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxLQUFJLFVBQVMsS0FBSSxPQUFNLEtBQUksT0FBTSxhQUFZLE1BQUssS0FBSSxPQUFNLEtBQUksT0FBTSxLQUFJLFVBQVMsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsS0FBSSxTQUFRLFFBQU8sU0FBUSxVQUFTLFNBQVEsS0FBSSxPQUFNLFFBQU8sUUFBTyxVQUFTLFNBQVEsVUFBUyxPQUFNLFFBQU8sT0FBTSxVQUFTLFFBQU8sVUFBUyxTQUFRLFFBQU8sU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxRQUFPLE9BQU0sUUFBTyxRQUFPLFFBQU8sT0FBTSxVQUFTLFVBQVMsVUFBUyxNQUFLLFVBQVMsTUFBSyxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsZ0JBQWUsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLGNBQWEsVUFBUyxZQUFXLFVBQVMsT0FBTSxVQUFTLGNBQWEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxnQkFBZSxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE1BQUssVUFBUyxTQUFRLFVBQVMsTUFBSyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxPQUFNLEtBQUksUUFBTyxRQUFPLE1BQUssUUFBTyxPQUFNLFFBQU8sU0FBUSxLQUFJLE1BQUssVUFBUyxPQUFNLFdBQVUsUUFBTyxLQUFJLFVBQVMsVUFBUyxNQUFLLFdBQVUsT0FBTSxVQUFTLFNBQVEsS0FBSSxNQUFLLFVBQVMsT0FBTSxXQUFVLFFBQU8sUUFBTyxPQUFNLEtBQUksUUFBTyxRQUFPLFVBQVMsVUFBUyxTQUFRLFVBQVMsTUFBSyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLE9BQU0sZ0JBQWUsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLE9BQU0sVUFBUyxNQUFLLFVBQVMsT0FBTSxnQkFBZSxRQUFPLFVBQVMsT0FBTSxnQkFBZSxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsUUFBTyxnQkFBZSxTQUFRLFVBQVMsUUFBTyxnQkFBZSxRQUFPLFVBQVMsTUFBSyxnQkFBZSxPQUFNLFVBQVMsT0FBTSxVQUFTLE1BQUssVUFBUyxRQUFPLGdCQUFlLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLE1BQUssVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sZ0JBQWUsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsYUFBWSxnQkFBZSxRQUFPLFVBQVMsUUFBTyxnQkFBZSxTQUFRLFVBQVMsU0FBUSxnQkFBZSxVQUFTLFVBQVMsU0FBUSxnQkFBZSxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxnQkFBZSxXQUFVLFVBQVMsTUFBSyxVQUFTLE9BQU0sZ0JBQWUsUUFBTyxVQUFTLE1BQUssVUFBUyxPQUFNLGdCQUFlLFFBQU8sVUFBUyxNQUFLLGdCQUFlLE9BQU0sVUFBUyxNQUFLLGdCQUFlLE9BQU0sZ0JBQWUsUUFBTyxVQUFTLE9BQU0sVUFBUyxPQUFNLGdCQUFlLFFBQU8sVUFBUyxNQUFLLGdCQUFlLFFBQU8sZ0JBQWUsT0FBTSxVQUFTLE1BQUssZ0JBQWUsUUFBTyxnQkFBZSxPQUFNLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxNQUFLLFVBQVMsUUFBTyxVQUFTLE1BQUssVUFBUyxRQUFPLFVBQVMsTUFBSyxVQUFTLE9BQU0sVUFBUyxNQUFLLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxnQkFBZSxvQkFBbUIsVUFBUyxPQUFNLFVBQVMsUUFBTyxnQkFBZSxTQUFRLFVBQVMsT0FBTSxVQUFTLFFBQU8sZ0JBQWUsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsZ0JBQWUsVUFBUyxVQUFTLFNBQVEsZ0JBQWUsVUFBUyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsZ0JBQWUsbUJBQWtCLFVBQVMsU0FBUSxnQkFBZSxxQkFBb0IsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsU0FBUSxnQkFBZSxVQUFTLFVBQVMsU0FBUSxnQkFBZSxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsZ0JBQWUsV0FBVSxVQUFTLFNBQVEsVUFBUyxVQUFTLGdCQUFlLFdBQVUsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxNQUFLLGdCQUFlLE9BQU0sVUFBUyxNQUFLLGdCQUFlLE9BQU0sZ0JBQWUsUUFBTyxVQUFTLE9BQU0sVUFBUyxPQUFNLGdCQUFlLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsV0FBVSxnQkFBZSxZQUFXLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxTQUFRLGdCQUFlLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLE9BQU0sVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFlBQVcsVUFBUyxtQkFBa0IsVUFBUyxvQkFBbUIsVUFBUyxhQUFZLFVBQVMsY0FBYSxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLHdCQUF1QixVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsb0JBQW1CLFVBQVMscUJBQW9CLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxxQkFBb0IsVUFBUyxZQUFXLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsWUFBVyxVQUFTLGNBQWEsVUFBUyxnQkFBZSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsU0FBUSxnQkFBZSxVQUFTLFVBQVMsV0FBVSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsbUJBQWtCLFVBQVMscUJBQW9CLFVBQVMsdUJBQXNCLFVBQVMsb0JBQW1CLFVBQVMsaUJBQWdCLFVBQVMsa0JBQWlCLFVBQVMsb0JBQW1CLFVBQVMsc0JBQXFCLFVBQVMscUJBQW9CLFVBQVMsc0JBQXFCLFVBQVMsbUJBQWtCLFVBQVMscUJBQW9CLFVBQVMsaUJBQWdCLFVBQVMsa0JBQWlCLFVBQVMsb0JBQW1CLFVBQVMsc0JBQXFCLFVBQVMscUJBQW9CLFVBQVMsc0JBQXFCLFVBQVMsbUJBQWtCLFVBQVMscUJBQW9CLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxnQkFBZSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxXQUFVLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsbUJBQWtCLGdCQUFlLHNCQUFxQixVQUFTLG9CQUFtQixnQkFBZSx1QkFBc0IsVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxRQUFPLFVBQVMsZUFBYyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsU0FBUSxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsT0FBTSxVQUFTLE1BQUssVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsUUFBTyxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFdBQVUsZ0JBQWUsWUFBVyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxnQkFBZSxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsT0FBTSxnQkFBZSxRQUFPLFVBQVMsT0FBTSxnQkFBZSxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxNQUFLLFVBQVMsTUFBSyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxZQUFXLGdCQUFlLHFCQUFvQixVQUFTLGtCQUFpQixnQkFBZSwyQkFBMEIsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sZ0JBQWUsU0FBUSxVQUFTLFFBQU8sZ0JBQWUsU0FBUSxVQUFTLFNBQVEsVUFBUyxPQUFNLGdCQUFlLFFBQU8sVUFBUyxPQUFNLGdCQUFlLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxRQUFPLGdCQUFlLFNBQVEsVUFBUyxRQUFPLGdCQUFlLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxnQkFBZSxVQUFTLFVBQVMsU0FBUSxnQkFBZSxVQUFTLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFNBQVEsZ0JBQWUsVUFBUyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxRQUFPLFVBQVMsUUFBTyxRQUFPLEtBQUksVUFBUyxRQUFPLFNBQVEsUUFBTyxPQUFNLFVBQVMsUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxRQUFPLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFNBQVEsUUFBTyxTQUFRLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsUUFBTyxTQUFRLFFBQU8sU0FBUSxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxRQUFPLGFBQWUsT0FBTSxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxVQUFTLE9BQU0sYUFBZSxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLGFBQWUsT0FBTSxVQUFTLE1BQUssYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLFVBQVMsTUFBSyxhQUFlLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sT0FBTSxRQUFPLE9BQU0sVUFBUyxNQUFLLFVBQVMsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLFVBQVMsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFNBQVEsUUFBTyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsTUFBSyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxhQUFlLE9BQU0sVUFBUyxXQUFVLGFBQWUsUUFBTyxhQUFlLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxVQUFTLE1BQUssYUFBZSxRQUFPLFVBQVMsUUFBTyxVQUFTLE1BQUssUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sU0FBUSxRQUFPLFNBQVEsUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxhQUFlLE9BQU0sYUFBZSxRQUFPLFVBQVMsT0FBTSxhQUFlLFFBQU8sVUFBUyxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLGFBQWUsT0FBTSxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLE9BQU0sYUFBZSxRQUFPLGFBQWUsT0FBTSxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sUUFBTyxRQUFPLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFNBQVEsUUFBTyxTQUFRLFFBQU8sUUFBTyxRQUFPLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLGFBQWUsT0FBTSxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sVUFBUyxRQUFPLFVBQVMsVUFBUyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxVQUFTLFFBQU8sVUFBUyxNQUFLLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxVQUFTLE1BQUssVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFNBQVEsYUFBZSxPQUFNLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sU0FBUSxRQUFPLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsYUFBZSxPQUFNLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sVUFBUyxTQUFRLFVBQVMsU0FBUSxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxhQUFlLE9BQU0sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsUUFBTyxRQUFPLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLGFBQWUsUUFBTyxVQUFTLE9BQU0sVUFBUyxRQUFPLGFBQWUsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsUUFBTyxTQUFRLFFBQU8sU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxNQUFLLFFBQU8sU0FBUSxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsTUFBSyxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxNQUFLLFVBQVMsT0FBTSxVQUFTLE1BQUssVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxXQUFVLFVBQVMsUUFBTyxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVM7QUFFeG0wQixVQUFJLGNBQWM7QUFDbEIsVUFBSSxZQUFZO0FBQUEsUUFDZixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFNO0FBQUEsUUFDTixLQUFLO0FBQUEsUUFLTCxLQUFLO0FBQUEsUUFLTCxLQUFLO0FBQUE7QUFHTixVQUFJLHFCQUFxQjtBQUN6QixVQUFJLDJCQUEyQjtBQUMvQixVQUFJLGNBQWM7QUFDbEIsVUFBSSxZQUFZLEVBQUMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLE1BQUssVUFBUyxPQUFNLFVBQVMsT0FBTSxnQkFBZSxTQUFRLFFBQU8sU0FBUSxRQUFPLFNBQVEsUUFBTyxPQUFNLFVBQVMsT0FBTSxVQUFTLFNBQVEsUUFBTyxTQUFRLFFBQU8sTUFBSyxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsVUFBUyxRQUFPLFVBQVMsUUFBTyxXQUFVLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxLQUFJLE9BQU0sS0FBSSxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsWUFBVyxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxVQUFTLFVBQVMsU0FBUSxRQUFPLFdBQVUsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsTUFBSyxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLEtBQUssaUJBQWdCLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxTQUFRLFFBQU8sU0FBUSxRQUFPLFFBQU8sYUFBZSxRQUFPLGFBQWUsVUFBUyxVQUFTLE9BQU0sS0FBSSxTQUFRLFVBQVMsV0FBVSxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxZQUFXLFVBQVMsU0FBUSxVQUFTLFlBQVcsVUFBUyxlQUFjLFVBQVMsYUFBWSxVQUFTLFdBQVUsVUFBUyxhQUFZLFVBQVMsYUFBWSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxZQUFXLFVBQVMsUUFBTyxVQUFTLFlBQVcsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsY0FBYSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxPQUFNLGFBQWUsT0FBTSxhQUFlLFVBQVMsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsYUFBWSxVQUFTLFlBQVcsVUFBUyxXQUFVLFVBQVMsbUJBQWtCLFVBQVMsaUJBQWdCLFVBQVMsWUFBVyxVQUFTLFVBQVMsVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLGdCQUFlLFVBQVMsZUFBYyxVQUFTLGlCQUFnQixVQUFTLHFCQUFvQixVQUFTLHFCQUFvQixVQUFTLHNCQUFxQixVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxXQUFVLFdBQVUsZ0JBQWUsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxRQUFPLFFBQU8sYUFBZSxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsUUFBTyxNQUFLLFNBQVEsVUFBUyxZQUFXLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLHdCQUF1QixVQUFTLFFBQU8sZ0JBQWUsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxRQUFPLFdBQVUsUUFBTyxXQUFVLFVBQVMsUUFBTyxRQUFPLGFBQVksUUFBTyxhQUFZLFFBQU8sT0FBTSxhQUFlLE9BQU0sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxhQUFZLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxtQkFBa0IsVUFBUyxvQkFBbUIsVUFBUyxjQUFhLFVBQVMsZUFBYyxVQUFTLGVBQWMsVUFBUyxhQUFZLFVBQVMsWUFBVyxRQUFPLFlBQVcsVUFBUyxlQUFjLFVBQVMsY0FBYSxVQUFTLGVBQWMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFlBQVcsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLDRCQUEyQixVQUFTLHlCQUF3QixVQUFTLG1CQUFrQixVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsU0FBUSxLQUFJLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFdBQVUsVUFBUyxTQUFRLEtBQUksVUFBUyxLQUFJLFFBQU8sVUFBUyxVQUFTLFVBQVMsY0FBYSxVQUFTLGFBQVksVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLGFBQVksVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLG1CQUFrQixVQUFTLFFBQU8sYUFBZSxRQUFPLFVBQVMsVUFBUyxVQUFTLGFBQVksVUFBUyxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsVUFBUyxtQ0FBa0MsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxRQUFPLGdCQUFlLFVBQVMsVUFBUyxXQUFVLFVBQVMsZUFBYyxVQUFTLGVBQWMsVUFBUyxZQUFXLFVBQVMsY0FBYSxVQUFTLFVBQVMsUUFBTyxrQkFBaUIsVUFBUyxtQkFBa0IsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFlBQVcsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsV0FBVSxVQUFTLE9BQU0sUUFBTyxPQUFNLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsb0JBQW1CLFFBQU8sa0JBQWlCLFVBQVMsMEJBQXlCLFVBQVMsb0JBQW1CLEtBQUksb0JBQW1CLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsZUFBYyxVQUFTLFNBQVEsVUFBUyxPQUFNLFFBQU8saUJBQWdCLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxPQUFNLFFBQU8sVUFBUyxRQUFPLGlCQUFnQixVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxLQUFJLFFBQU8sYUFBZSxRQUFPLGFBQWUsT0FBTSxVQUFTLE9BQU0sUUFBTyxVQUFTLFVBQVMsU0FBUSxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFdBQVUsVUFBUyxhQUFZLFVBQVMsa0JBQWlCLFVBQVMseUJBQXdCLFVBQVMsYUFBWSxRQUFPLG1CQUFrQixVQUFTLG1CQUFrQixVQUFTLHdCQUF1QixVQUFTLGlCQUFnQixVQUFTLHVCQUFzQixVQUFTLDRCQUEyQixVQUFTLHdCQUF1QixVQUFTLG9CQUFtQixVQUFTLGtCQUFpQixVQUFTLGlCQUFnQixVQUFTLHFCQUFvQixVQUFTLHFCQUFvQixVQUFTLGFBQVksVUFBUyxhQUFZLFVBQVMsYUFBWSxVQUFTLGdCQUFlLFVBQVMsb0JBQW1CLFVBQVMsYUFBWSxVQUFTLGtCQUFpQixVQUFTLG1CQUFrQixVQUFTLG9CQUFtQixVQUFTLHVCQUFzQixVQUFTLHFCQUFvQixVQUFTLGtCQUFpQixVQUFTLHFCQUFvQixVQUFTLHNCQUFxQixVQUFTLG1CQUFrQixVQUFTLHNCQUFxQixVQUFTLFdBQVUsVUFBUyxnQkFBZSxVQUFTLFlBQVcsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFlBQVcsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxTQUFRLFFBQU8sU0FBUSxRQUFPLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxNQUFLLFVBQVMsU0FBUSxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsTUFBSyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sT0FBTSxVQUFTLFVBQVMsVUFBUyxNQUFLLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsb0JBQW1CLFVBQVMsVUFBUyxVQUFTLHdCQUF1QixVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsY0FBYSxVQUFTLGVBQWMsVUFBUyxTQUFRLFVBQVMsVUFBUyxLQUFJLGNBQWEsVUFBUyxVQUFTLFVBQVMsZUFBYyxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sUUFBTyxPQUFNLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsUUFBTyxLQUFJLFNBQVEsVUFBUyxVQUFTLFVBQVMsZUFBYyxVQUFTLGdCQUFlLFVBQVMsZ0JBQWUsVUFBUyxpQkFBZ0IsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxPQUFNLGFBQWUsT0FBTSxhQUFlLFNBQVEsVUFBUyxxQkFBb0IsVUFBUyx5QkFBd0IsVUFBUyxTQUFRLE1BQUssUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLGNBQWEsVUFBUyxZQUFXLFVBQVMsVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLGFBQWUsUUFBTyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFlBQVcsVUFBUyxPQUFNLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFFBQU8sZ0JBQWUsVUFBUyxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsTUFBSyxVQUFTLE1BQUssVUFBUyxPQUFNLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsTUFBSyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxZQUFXLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLFNBQVEsS0FBSSxnQkFBZSxVQUFTLG9CQUFtQixVQUFTLG9CQUFtQixVQUFTLGtCQUFpQixVQUFTLGVBQWMsVUFBUyxxQkFBb0IsVUFBUyxnQkFBZSxVQUFTLFFBQU8sVUFBUyxRQUFPLGFBQWUsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsTUFBSyxLQUFJLE1BQUssVUFBUyxNQUFLLEtBQUksUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFdBQVUsVUFBUyxhQUFZLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxhQUFZLFVBQVMsY0FBYSxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsYUFBWSxnQkFBZSxRQUFPLGdCQUFlLFNBQVEsVUFBUyxVQUFTLFVBQVMsUUFBTyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxPQUFNLEtBQUksUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLGFBQVksVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLE9BQU0sYUFBZSxPQUFNLFVBQVMsZ0JBQWUsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsaUJBQWdCLFVBQVMsa0JBQWlCLFVBQVMsUUFBTyxhQUFlLFFBQU8sVUFBUyxVQUFTLFVBQVMsa0JBQWlCLFVBQVMsUUFBTyxhQUFlLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxnQkFBZSxVQUFTLGFBQVksVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sTUFBSyxVQUFTLFNBQVEsUUFBTyxTQUFRLFFBQU8sT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFFBQU8sT0FBTSxVQUFTLE9BQU0sYUFBZSxPQUFNLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxNQUFLLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsTUFBSyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLGNBQWEsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxNQUFLLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLGdCQUFlLFVBQVMsWUFBVyxVQUFTLFdBQVUsVUFBUyxrQkFBaUIsVUFBUyxrQkFBaUIsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxVQUFTLFFBQU8sUUFBTyxhQUFlLFFBQU8sVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxNQUFLLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sUUFBTyxRQUFPLFFBQU8sU0FBUSxVQUFTLFNBQVEsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsU0FBUSxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsY0FBYSxVQUFT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QUFNLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsUUFBTyxLQUFJLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxNQUFLLEtBQUksTUFBSyxVQUFTLE1BQUssS0FBSSxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxXQUFVLFVBQVMsYUFBWSxnQkFBZSxRQUFPLGdCQUFlLFFBQU8sUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxjQUFhLFVBQVMsY0FBYSxVQUFTLFlBQVcsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxpQkFBZ0IsVUFBUyxlQUFjLFVBQVMsYUFBWSxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsT0FBTSxVQUFTLFNBQVEsUUFBTyxPQUFNLFVBQVMsVUFBUyxLQUFJLFVBQVMsVUFBUyxVQUFTLFFBQU8sU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLGFBQVksVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxNQUFLLFVBQVMsUUFBTyxhQUFlLFFBQU8sVUFBUyxVQUFTLFVBQVMsTUFBSyxVQUFTLE1BQUssVUFBUyxZQUFXLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFFBQU8sZ0JBQWUsT0FBTSxVQUFTLFFBQU8sZ0JBQWUsU0FBUSxnQkFBZSxTQUFRLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsWUFBVyxVQUFTLFFBQU8sUUFBTyxTQUFRLGdCQUFlLFVBQVMsZ0JBQWUsUUFBTyxVQUFTLFVB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USxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLGdCQUFlLFdBQVUsZ0JBQWUsYUFBWSxVQUFTLGNBQWEsZ0JBQWUsU0FBUSxVQUFTLFdBQVUsZ0JBQWUsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLGdCQUFlLFdBQVUsZ0JBQWUsYUFBWSxVQUFTLGNBQWEsZ0JBQWUsUUFBTyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sUUFBTyxVQUFTLGlCQUFnQixVQUFTLG1CQUFrQixVQUFTLGtCQUFpQixVQUFTLG9CQUFtQixVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsT0FBTSxLQUFJLFVBQVMsVUFBUyxTQUFRLFVBQVMsUUFBTyxnQkFBZSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxnQkFBZSxRQUFPLFdBQVUsVUFBUyxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsUUFBTyxnQkFBZSxRQUFPLFdBQVUsV0FBVSxnQkFBZSxVQUFTLFVBQVMsV0FBVSxnQkFBZSxTQUFRLGdCQUFlLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsUUFBTyxTQUFRLFFBQU8sT0FBTSxVQUFTLE9BQU0sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxPQUFNLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLE9BQU0sVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsd0JBQXVCLFVBQVMsa0JBQWlCLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxNQUFLLFVBQVMsTUFBSyxVQUFTLFNBQVEsVUFBUyxPQUFNLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLE9BQU0sVUFBUyxNQUFLLFVBQVMsUUFBTyxVQUFTLFFBQU8sYUFBZSxVQUFTLFFBQU8sVUFBUyxRQUFPLFFBQU8sVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFFBQU8sUUFBTyxRQUFPLFFBQU8sU0FBUSxVQUFTLFdBQVUsVUFBUyxhQUFZLFVBQVMsZUFBYyxVQUFTLG1CQUFrQixVQUFTLE9BQU0sVUFBUyxRQUFPLFFBQU8sWUFBVyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFlBQVcsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsS0FBSSxVQUFTLEtBQUksVUFBUyxVQUFTLFFBQU8sVUFBUyxXQUFVLFVBQVMsT0FBTSxhQUFlLE9BQU0sYUFBZSxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsYUFBWSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxRQUFPLEtBQUksWUFBVyxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsYUFBWSxRQUFPLFVBQVMsUUFBTyxXQUFVLFVBQVMsV0FBVSxVQUFTLE1BQUssUUFBTyxpQkFBZ0IsVUFBUyxZQUFXLFVBQVMsUUFBTyxhQUFlLFFBQU8sVUFBUyxTQUFRLFFBQU8sTUFBSyxVQUFTLE1BQUssVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLGNBQWEsVUFBUyxlQUFjLFVBQVMsWUFBVyxVQUFTLGlCQUFnQixVQUFTLHNCQUFxQixVQUFTLGlCQUFnQixVQUFTLFVBQVMsVUFBUyxlQUFjLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxXQUFVLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFlBQVcsVUFBUyxRQUFPLFVBQVMsY0FBYSxVQUFTLGdCQUFlLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxPQUFNLGFBQWUsT0FBTSxhQUFlLFFBQU8sVUFBUyxRQUFPLGFBQWUsUUFBTyxVQUFTLFVBQVMsVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLGVBQWMsVUFBUyxXQUFVLFVBQVMsU0FBUSxLQUFJLFdBQVUsVUFBUyxRQUFPLEtBQUksUUFBTyxLQUFJLFNBQVEsVUFBUyxRQUFPLGdCQUFlLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFlBQVcsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFNBQVEsUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFdBQVUsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxhQUFZLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsS0FBSSxVQUFTLEtBQUksU0FBUSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxRQUFPLEtBQUksT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLE1BQUssVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLE9BQU0sUUFBTyxPQUFNLFFBQU8sa0JBQWlCLFVBQVMsc0JBQXFCLFVBQVMsd0JBQXVCLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxPQUFNLGFBQWUsT0FBTSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxxQkFBb0IsVUFBUyxjQUFhLFVBQVMsY0FBYSxVQUFTLGNBQWEsVUFBUyxpQkFBZ0IsVUFBUyx1QkFBc0IsVUFBUyxrQkFBaUIsVUFBUyxnQkFBZSxVQUFTLHNCQUFxQixVQUFTLHNCQUFxQixVQUFTLG1CQUFrQixVQUFTLHNCQUFxQixVQUFTLGNBQWEsVUFBUyxvQkFBbUIsVUFBUyxrQkFBaUIsVUFBUyxtQkFBa0IsVUFBUyxxQkFBb0IsVUFBUyxvQkFBbUIsVUFBUyxtQkFBa0IsVUFBUyxZQUFXLFVBQVMsaUJBQWdCLFVBQVMsa0JBQWlCLFVBQVMsbUJBQWtCLFVBQVMsaUJBQWdCLFVBQVMsb0JBQW1CLFVBQVMsc0JBQXFCLFVBQVMscUJBQW9CLFVBQVMsb0JBQW1CLFVBQVMsaUJBQWdCLFVBQVMsb0JBQW1CLFVBQVMsZUFBYyxVQUFTLGtCQUFpQixVQUFTLFFBQU8sVUFBUyxnQkFBZSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxjQUFhLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLGFBQWUsUUFBTyxVQUFTLFVBQVMsVUFBUyxXQUFVLFVBQVMsZ0JBQWUsVUFBUyxRQUFPLEtBQUksVUFBUyxVQUFTLFlBQVcsVUFBUyxTQUFRLFVBQVMsZUFBYyxVQUFTLFVBQVMsVUFBUyxRQUFPLGFBQWUsUUFBTyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxLQUFJLFNBQVEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsZUFBYyxVQUFTLFdBQVUsVUFBUyxNQUFLLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsTUFBSyxVQUFTLE1BQUssVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLFNBQVEsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxTQUFRLFVBQVMsU0FBUSxVQUFTLFdBQVUsVUFBUyxRQUFPLFFBQU8sUUFBTyxLQUFJLFVBQVMsVUFBUyxZQUFXLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxPQUFNLGFBQWUsT0FBTSxhQUFlLFVBQVMsVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLGtCQUFpQixVQUFTLGtCQUFpQixVQUFTLFlBQVcsVUFBUyxpQkFBZ0IsVUFBUyxtQkFBa0IsVUFBUyxnQkFBZSxVQUFTLE9BQU0sUUFBTyxTQUFRLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxTQUFRLFVBQVMsZUFBYyxVQUFTLGlCQUFnQixVQUFTLFVBQVMsVUFBUyxZQUFXLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFNBQVEsZ0JBQWUsVUFBUyxVQUFTLFVBQVMsVUFBUyxPQUFNLEtBQUksUUFBTyxVQUFTLFVBQVMsVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLFVBQVMsVUFBUyxhQUFZLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxVQUFTLGdCQUFlLFNBQVEsVUFBUyxVQUFTLGdCQUFlLFFBQU8sVUFBUyxTQUFRLFVBQVMsVUFBUyxVQUFTLFlBQVcsVUFBUyxjQUFhLFVBQVMsU0FBUSxVQUFTLFVBQVMsVUFBUyxZQUFXLFVBQVMsY0FBYSxVQUFTLE9BQU0sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLHNCQUFxQixVQUFTLGdCQUFlLFVBQVMscUJBQW9CLFVBQVMsa0JBQWlCLFVBQVMsdUJBQXNCLFVBQVMsZUFBYyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsbUJBQWtCLFVBQVMsZUFBYyxVQUFTLFNBQVEsUUFBTyxPQUFNLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsWUFBVyxVQUFTLGFBQVksVUFBUyxlQUFjLFVBQVMsYUFBWSxVQUFTLGNBQWEsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsY0FBYSxVQUFTLGVBQWMsVUFBUyxZQUFXLFVBQVMsaUJBQWdCLFVBQVMsc0JBQXFCLFVBQVMsaUJBQWdCLFVBQVMsVUFBUyxVQUFTLGVBQWMsVUFBUyxZQUFXLFVBQVMsWUFBVyxVQUFTLFdBQVUsVUFBUyxZQUFXLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFVBQVMsV0FBVSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFlBQVcsVUFBUyxpQkFBZ0IsVUFBUyxXQUFVLFVBQVMsV0FBVSxVQUFTLFdBQVUsVUFBUyxXQUFVLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxXQUFVLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxZQUFXLFVBQVMsYUFBWSxVQUFTLGFBQVksVUFBUyxjQUFhLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsV0FBVSxVQUFTLFVBQVMsVUFBUyxTQUFRLFFBQU8sT0FBTSxLQUFLLFVBQVMsVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxRQUFPLFVBQVMsVUFBUyxVQUFTLE9BQU0sYUFBZSxPQUFNLGFBQWUsVUFBUyxVQUFTLGFBQVksVUFBUyxhQUFZLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLGVBQWMsVUFBUyxZQUFXLFVBQVMsY0FBYSxnQkFBZSxVQUFTLFVBQVMsYUFBWSxVQUFTLFNBQVEsVUFBUyxVQUFTLFVBQVMsU0FBUSxRQUFPLFNBQVEsUUFBTyxTQUFRLFVBQVMsU0FBUSxVQUFTLGNBQWEsVUFBUyxrQkFBaUIsVUFBUyxjQUFhLFVBQVMsU0FBUSxRQUFPLFVBQVMsVUFBUyxZQUFXLFVBQVMsVUFBUyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxXQUFVLFVBQVMsUUFBTyxVQUFTLFVBQVMsVUFBUyxT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QVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxPQUFNLGFBQWUsT0FBTSxhQUFlLFFBQU8sYUFBZSxRQUFPLGFBQWUsTUFBSyxVQUFTLE1BQUssVUFBUyxVQUFTLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxTQUFRLFVBQVMsT0FBTSxhQUFlLE9BQU0sYUFBZSxTQUFRLFVBQVMsU0FBUSxVQUFTLE1BQUssVUFBUyxNQUFLLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFNBQVEsVUFBUyxRQUFPLGFBQWUsUUFBTyxhQUFlLFVBQVMsVUFBUyxVQUFTLFVBQVMsU0FBUSxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsVUFBUyxRQUFPLFVBQVMsUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFNBQVEsVUFBUyxTQUFRLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFFBQU8sT0FBTSxhQUFlLE9BQU0sYUFBZSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sYUFBZSxRQUFPLGFBQWUsUUFBTyxhQUFlLFFBQU8sYUFBZSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sUUFBTyxRQUFPLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLFVBQVMsVUFBUyxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUFTLFVBQVMsa0JBQWlCLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxPQUFNLGFBQWUsT0FBTSxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsV0FBVSxVQUFTLFFBQU8sYUFBZSxRQUFPLFVBQVMsUUFBTyxhQUFlLFFBQU8sYUFBZSxPQUFNLFVBQVMsUUFBTztBQUM1OHVDLFVBQUksa0JBQWtCLEVBQUMsVUFBUyxRQUFPLFVBQVMsUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFNBQVEsUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sT0FBTSxLQUFJLE9BQU0sS0FBSSxTQUFRLFFBQU8sU0FBUSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxTQUFRLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFFBQU8sVUFBUyxRQUFPLE9BQU0sUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sT0FBTSxRQUFPLE9BQU0sUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLE1BQUssS0FBSSxNQUFLLEtBQUksVUFBUyxRQUFPLFVBQVMsUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFNBQVEsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFNBQVEsUUFBTyxNQUFLLEtBQUksTUFBSyxLQUFJLFFBQU8sUUFBTyxTQUFRLFFBQU8sVUFBUyxRQUFPLFFBQU8sUUFBTyxPQUFNLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFNBQVEsUUFBTyxTQUFRLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxVQUFTLFFBQU8sU0FBUSxRQUFPLFFBQU8sS0FBSSxRQUFPLEtBQUksU0FBUSxRQUFPLE9BQU0sUUFBTyxPQUFNLFFBQU8sUUFBTyxRQUFPLE9BQU0sUUFBTyxRQUFPLFFBQU8sUUFBTyxRQUFPLFFBQU8sUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFNBQVEsUUFBTyxTQUFRLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxTQUFRLFFBQU8sU0FBUSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sT0FBTSxRQUFPLFFBQU8sUUFBTyxRQUFPLFFBQU8sVUFBUyxRQUFPLFVBQVMsUUFBTyxPQUFNLFFBQU8sUUFBTztBQUM1aEQsVUFBSSxtQkFBbUIsRUFBQyxLQUFJLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNLFVBQVMsT0FBTSxVQUFTLE9BQU0sVUFBUyxPQUFNO0FBQ2piLFVBQUksNkJBQTZCLENBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxNQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FB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QUFPO0FBQUEsRUFDUCxlQUFlO0FBQUEsRUFDZixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUE7OztBRS9SVixJQUFNLG1CQUErQjtBQUFBLEVBQ3hDO0FBQUEsSUFDSSxNQUFNO0FBQUEsSUFDTixhQUNJO0FBQUEsSUFDSixRQUFRO0FBQUEsTUFDSixrQkFBa0I7QUFBQSxNQUNsQixjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsUUFDTjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUE7QUFBQSxNQUdaLFFBQVE7QUFBQSxRQUNKO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQTtBQUFBLE1BR1osT0FBTztBQUFBLFFBQ0g7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBO0FBQUEsTUFHWixVQUFVO0FBQUEsUUFDTjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sVUFBVTtBQUFBLFlBQ047QUFBQSxjQUNJLFFBQVE7QUFBQSxjQUNSLFdBQVc7QUFBQSxjQUNYLFVBQVU7QUFBQTtBQUFBLFlBRWQ7QUFBQSxjQUNJLFFBQVE7QUFBQSxjQUNSLFdBQVc7QUFBQSxjQUNYLFVBQVU7QUFBQTtBQUFBLFlBRWQ7QUFBQSxjQUNJLFFBQVE7QUFBQSxjQUNSLFdBQVc7QUFBQSxjQUNYLFVBQVU7QUFBQTtBQUFBO0FBQUEsVUFHbEIsUUFBUTtBQUFBLFVBQ1IsVUFBVTtBQUFBLFVBQ1YsYUFBYTtBQUFBLFVBQ2IsSUFBSTtBQUFBO0FBQUE7QUFBQSxNQUdaLE1BQU07QUFBQSxRQUNGO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixhQUFhO0FBQUEsVUFDYixRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsWUFDSCxNQUFNO0FBQUEsWUFDTixPQUFPO0FBQUEsWUFDUCxLQUFLO0FBQUE7QUFBQTtBQUFBLFFBR2I7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLGFBQWE7QUFBQSxVQUNiLFFBQVE7QUFBQSxVQUNSLE9BQU87QUFBQSxZQUNILE1BQU07QUFBQSxZQUNOLE9BQU87QUFBQSxZQUNQLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlqQixRQUFRO0FBQUE7QUFBQSxJQUVaLFNBQVM7QUFBQSxNQUNMLE1BQU07QUFBQSxNQUNOLEtBQUs7QUFBQSxNQUNMLE9BQU87QUFBQTtBQUFBLElBRVgsUUFBUTtBQUFBLE1BQ0o7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUE7QUFBQSxJQUdsQixJQUFJO0FBQUEsSUFDSixZQUFZO0FBQUEsTUFDUjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSW5CO0FBQUEsSUFDSSxNQUFNO0FBQUEsSUFDTixhQUFhO0FBQUEsSUFDYixRQUFRO0FBQUEsTUFDSixrQkFBa0I7QUFBQSxNQUNsQixjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsUUFDTjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUE7QUFBQSxNQUdaLFFBQVE7QUFBQSxRQUNKO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQTtBQUFBLE1BR1osT0FBTztBQUFBLFFBQ0g7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBO0FBQUEsTUFHWixVQUFVO0FBQUEsTUFDVixNQUFNO0FBQUEsUUFDRjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sYUFBYTtBQUFBLFVBQ2IsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFlBQ0gsTUFBTTtBQUFBLFlBQ04sT0FBTztBQUFBLFlBQ1AsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLckIsU0FBUztBQUFBLE1BQ0wsTUFBTTtBQUFBLE1BQ04sS0FBSztBQUFBLE1BQ0wsT0FBTztBQUFBO0FBQUEsSUFFWCxRQUFRO0FBQUEsTUFDSjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBO0FBQUE7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBO0FBQUEsSUFHbEIsSUFBSTtBQUFBLElBQ0osWUFBWTtBQUFBLE1BQ1I7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLElBQUk7QUFBQSxRQUNKLE9BQU87QUFBQTtBQUFBLE1BRVg7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLElBQUk7QUFBQSxRQUNKLE9BQU87QUFBQTtBQUFBLE1BRVg7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLElBQUk7QUFBQSxRQUNKLE9BQU87QUFBQTtBQUFBLE1BRVg7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLElBQUk7QUFBQSxRQUNKLE9BQU87QUFBQTtBQUFBLE1BRVg7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLElBQUk7QUFBQSxRQUNKLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUluQjtBQUFBLElBQ0ksTUFBTTtBQUFBLElBQ04sYUFBYTtBQUFBLElBQ2IsUUFBUTtBQUFBLE1BQ0osa0JBQWtCO0FBQUEsTUFDbEIsY0FBYztBQUFBLE1BQ2QsY0FBYztBQUFBLE1BQ2QsY0FBYztBQUFBLE1BQ2QsVUFBVTtBQUFBLE1BQ1YsVUFBVTtBQUFBLFFBQ047QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBO0FBQUEsTUFHWixRQUFRO0FBQUEsUUFDSjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFB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QU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQWE7QUFBQSxRQUNiLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUE7QUFBQSxJQUdsQixJQUFJO0FBQUEsSUFDSixZQUFZO0FBQUEsTUFDUjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sSUFBSTtBQUFBLFFBQ0osT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSW5CO0FBQUEsSUFDSSxNQUFNO0FBQUEsSUFDTixhQUFhO0FBQUEsSUFDYixRQUFRO0FBQUEsTUFDSixrQkFBa0I7QUFBQSxNQUNsQixjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsUUFDTjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sSUFBSTtBQUFBO0FBQUE7QUFBQSxNQUdaLFFBQVE7QUFBQSxRQUNKO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixJQUFJO0FBQUE7QUFBQTtBQUFBLE1BR1osT0FBTztBQUFBLFFBQ0g7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLGFBQWE7QUFBQSxVQUNiLElBQUk7QUFBQTtBQUFBO0FBQUEsTUFHWixVQUFVO0FBQUEsTUFDVixNQUFNO0FBQUE7QUFBQSxJQUVWLFNBQVM7QUFBQSxNQUNMLE1BQU07QUFBQSxNQUNOLEtBQUs7QUFBQSxNQUNMLE9BQU87QUFBQTtBQUFBLElBRVgsUUFBUTtBQUFBLE1BQ0o7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUFhO0FBQUEsUUFDYixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUE7QUFBQSxJQUdsQixJQUFJO0FBQUEsSUFDSixZQUFZO0FBQUE7QUFBQSxFQUVoQjtBQUFBLElBQ0ksTUFBTTtBQUFBLElBQ04sYUFBYTtBQUFBLElBQ2IsUUFBUTtBQUFBLE1BQ0osa0JBQWtCO0FBQUEsTUFDbEIsY0FBYztBQUFBLE1BQ2QsY0FBYztBQUFBLE1BQ2QsY0FBYztBQUFBLE1BQ2QsVUFBVTtBQUFBLE1BQ1YsVUFBVTtBQUFBLFFBQ047QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLElBQUk7QUFBQTtBQUFBO0FBQUEsTUFHWixRQUFRO0FBQUEsUUFDSjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsSUFBSTtBQUFBO0FBQUE7QUFBQSxNQUdaLE9B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O0FBQUEsUUFDSixPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJbkI7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLGFBQWE7QUFBQSxJQUNiLFFBQVE7QUFBQSxNQUNKLGtCQUFrQjtBQUFBLE1BQ2xCLGNBQWM7QUFBQSxNQUNkLGNBQWM7QUFBQSxNQUNkLGNBQWM7QUFBQSxNQUNkLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxRQUNOO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQTtBQUFBLE1BR1osUUFBUTtBQUFBLFFBQ0o7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBO0FBQUEsTUFHWixPQUFPO0FBQUEsUUFDSDtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsV0FBVztBQUFBLFVBQ1gsYUFBYTtBQUFBLFVBQ2IsSUFBSTtBQUFBO0FBQUEsUUFFUjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsV0FBVztBQUFBLFVBQ1gsYUFBYTtBQUFBLFVBQ2IsSUFBSTtBQUFBO0FBQUE7QUFBQSxNQUdaLFVBQVU7QUFBQSxNQUNWLE1BQU07QUFBQSxRQUNGO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixhQUFhO0FBQUEsVUFDYixRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsWUFDSCxNQUFNO0FBQUEsWUFDTixPQUFPO0FBQUEsWUFDUCxLQUFLO0FBQUE7QUFBQTtBQUFBLFFBR2I7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLGFBQWE7QUFBQSxVQUNiLFFBQVE7QUFBQSxVQUNSLE9BQU87QUFBQSxZQUNILE1BQU07QUFBQSxZQUNOLE9BQU87QUFBQSxZQUNQLEtBQUs7QUFBQTtBQUFBO0FBQUEsUUFHYjtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sYUFBYTtBQUFBLFVBQ2IsUUFBUTtBQUFBLFVBQ1IsT0FBTztBQUFBLFlBQ0gsTUFBTTtBQUFBLFlBQ04sT0FBTztBQUFBLFlBQ1AsS0FBSztBQUFBO0FBQUE7QUFBQSxRQUdiO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixhQUFhO0FBQUEsVUFDYixRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsWUFDSCxNQUFNO0FBQUEsWUFDTixPQUFPO0FBQUEsWUFDUCxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtyQixTQUFTO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxPQUFPO0FBQUEsTUFDUCxNQUFNO0FBQUE7QUFBQSxJQUVWLFFBQVE7QUFBQSxNQUNKO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUE7QUFBQTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQSxNQUVkO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixhQUNJO0FBQUEsUUFDSixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsVUFDRixLQUFLO0FBQUEsVUFDTCxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUE7QUFBQSxRQUVYLFVBQVU7QUFBQTtBQUFBLE1BRWQ7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLGFBQ0k7QUFBQSxRQUNKLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxVQUNGLEtBQUs7QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQTtBQUFBLFFBRVgsVUFBVTtBQUFBO0FBQUEsTUFFZDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sYUFDSTtBQUFBLFFBQ0osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0YsS0FBSztBQUFBLFVBQ0wsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBO0FBQUEsUUFFWCxVQUFVO0FBQUE7QUFBQTtBQUFBLElBR2xCLElBQUk7QUFBQSxJQUNKLFlBQVk7QUFBQSxNQUNSO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixJQUFJO0FBQUEsUUFDSixPQUFPO0FBQUE7QUFBQSxNQUVYO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixJQUFJO0FBQUEsUUFDSixPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJbkI7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLGFBQWE7QUFBQSxJQUNiLFFBQVE7QUFBQSxNQUNKLGtCQUFrQjtBQUFBLE1BQ2xCLGNBQWM7QUFBQSxNQUNkLGNBQWM7QUFBQSxNQUNkLGNBQWM7QUFBQSxNQUNkLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxRQUNOO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQSxRQUVSO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixNQUFNO0FBQUEsVUFDTixJQUFJO0FBQUE7QUFBQTtBQUFBLE1BR1osUUFBUTtBQUFBLFFBQ0o7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFBLFFBRVI7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLElBQUk7QUFBQTtBQUFB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O0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBQUEsRUFHSixJQUFJO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBQUEsRUFHSixJQUFJO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUE7QUFBQSxFQUdKLElBQUk7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNB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
