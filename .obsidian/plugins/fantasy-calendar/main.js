/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "popperGenerator": () => (/* binding */ popperGenerator),
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__["default"])
/* harmony export */ });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/debounce.js */ "./node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/mergeByName.js */ "./node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference.contextElement) : [],
          popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(modifiers);

          if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_7__.auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__["default"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(popper), state.options.strategy === 'fixed'),
          popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ contains)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBoundingClientRect)
/* harmony export */ });
// import { isHTMLElement } from './instanceOf';
function getBoundingClientRect(element, // eslint-disable-next-line unused-imports/no-unused-vars
includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1; // FIXME:
  // `offsetWidth` returns an integer while `getBoundingClientRect`
  // returns a float. This results in `scaleX` or `scaleY` being
  // non-1 when it should be for elements that aren't a full pixel in
  // width or height.
  // if (isHTMLElement(element) && includeScale) {
  //   const offsetHeight = element.offsetHeight;
  //   const offsetWidth = element.offsetWidth;
  //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
  //   // Fallback to 1 in case both values are `0`
  //   if (offsetWidth > 0) {
  //     scaleX = rect.width / offsetWidth || 1;
  //   }
  //   if (offsetHeight > 0) {
  //     scaleY = rect.height / offsetHeight || 1;
  //   }
  // }

  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getClippingRect)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getViewportRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");















function getInnerBoundingClientRect(element) {
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_1__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(element) : element;

  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent, clipperElement) && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_12__["default"])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.top, accRect.top);
    accRect.right = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.right, accRect.right);
    accRect.bottom = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.bottom, accRect.bottom);
    accRect.left = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCompositeRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getNodeScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");








function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = rect.width / element.offsetWidth || 1;
  var scaleY = rect.height / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent);
  var offsetParentIsScaled = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
  var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent);
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_4__["default"])(documentElement)) {
      scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent);
    }

    if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent)) {
      offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_6__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getComputedStyle)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentElement)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return (((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentRect)
/* harmony export */ });
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var y = -winScroll.scrollTop;

  if ((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(body || html).direction === 'rtl') {
    x += (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getHTMLElementScroll)
/* harmony export */ });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getLayoutRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeName)
/* harmony export */ });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeScroll)
/* harmony export */ });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {
    return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node);
  } else {
    return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOffsetParent)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isTableElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");







function getTrueOffsetParent(element) {
  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
  (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = (0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);

  while ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(currentNode) && ['html', 'body'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(currentNode)) < 0) {
    var css = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_4__["default"])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent) && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) === 'html' || (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getParentNode)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function getParentNode(element) {
  if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getScrollParent)
/* harmony export */ });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) {
    return node;
  }

  return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getViewportRect)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");



function getViewportRect(element) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element),
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindow)
/* harmony export */ });
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScroll)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScrollBarX)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isHTMLElement": () => (/* binding */ isHTMLElement),
/* harmony export */   "isShadowRoot": () => (/* binding */ isShadowRoot)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


function isElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isScrollParent)
/* harmony export */ });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isTableElement)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ listScrollParents)
/* harmony export */ });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(target)));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "auto": () => (/* binding */ auto),
/* harmony export */   "basePlacements": () => (/* binding */ basePlacements),
/* harmony export */   "start": () => (/* binding */ start),
/* harmony export */   "end": () => (/* binding */ end),
/* harmony export */   "clippingParents": () => (/* binding */ clippingParents),
/* harmony export */   "viewport": () => (/* binding */ viewport),
/* harmony export */   "popper": () => (/* binding */ popper),
/* harmony export */   "reference": () => (/* binding */ reference),
/* harmony export */   "variationPlacements": () => (/* binding */ variationPlacements),
/* harmony export */   "placements": () => (/* binding */ placements),
/* harmony export */   "beforeRead": () => (/* binding */ beforeRead),
/* harmony export */   "read": () => (/* binding */ read),
/* harmony export */   "afterRead": () => (/* binding */ afterRead),
/* harmony export */   "beforeMain": () => (/* binding */ beforeMain),
/* harmony export */   "main": () => (/* binding */ main),
/* harmony export */   "afterMain": () => (/* binding */ afterMain),
/* harmony export */   "beforeWrite": () => (/* binding */ beforeWrite),
/* harmony export */   "write": () => (/* binding */ write),
/* harmony export */   "afterWrite": () => (/* binding */ afterWrite),
/* harmony export */   "modifierPhases": () => (/* binding */ modifierPhases)
/* harmony export */ });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state.placement);
  var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_7__["default"])(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__.isHTMLElement)(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapToStyles": () => (/* binding */ mapToStyles),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");







 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)((0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(x * dpr) / dpr) || 0,
    y: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)((0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.left;
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;
  var win = window;

  if (adaptive) {
    var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper)) {
      offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper);

      if ((0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.right) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.right; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (true) {
    var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.placement),
    variation: (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {
    return [];
  }

  var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement);
  return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);

    var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    }

    var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyStyles": () => (/* reexport safe */ _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "arrow": () => (/* reexport safe */ _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "flip": () => (/* reexport safe */ _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "hide": () => (/* reexport safe */ _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "offset": () => (/* reexport safe */ _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");










/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distanceAndSkiddingToXY": () => (/* binding */ distanceAndSkiddingToXY),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement);
  var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(min, tetherMin) : min, offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(max, tetherMax) : max);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;

      var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(_min, tetherMin) : _min, _offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__.createPopper),
/* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.applyStyles),
/* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.arrow),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.computeStyles),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.eventListeners),
/* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.flip),
/* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.hide),
/* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.offset),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.popperOffsets),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.preventOverflow)
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");










var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeAutoPlacement)
/* harmony export */ });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;
  var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);
  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {
    return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements;
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeOffsets)
/* harmony export */ });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ debounce)
/* harmony export */ });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ detectOverflow)
/* harmony export */ });
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.reference);
  var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ expandToHashMap)
/* harmony export */ });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ format)
/* harmony export */ });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getAltAxis)
/* harmony export */ });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBasePlacement)
/* harmony export */ });

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getFreshSideObject)
/* harmony export */ });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMainAxisFromPlacement)
/* harmony export */ });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositePlacement)
/* harmony export */ });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositeVariationPlacement)
/* harmony export */ });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getVariation)
/* harmony export */ });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "round": () => (/* binding */ round)
/* harmony export */ });
var max = Math.max;
var min = Math.min;
var round = Math.round;

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeByName)
/* harmony export */ });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergePaddingObject)
/* harmony export */ });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ orderModifiers)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rectToClientRect)
/* harmony export */ });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ uniqueBy)
/* harmony export */ });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ validateModifiers)
/* harmony export */ });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "./node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
    .filter(function (value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

          break;

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (modifier.effect != null && typeof modifier.effect !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ within)
/* harmony export */ });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");

function within(min, value, max) {
  return (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(min, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(value, max));
}

/***/ }),

/***/ "./src/settings/ui/Categories.svelte":
/*!*******************************************!*\
  !*** ./src/settings/ui/Categories.svelte ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var src_utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/utils/constants */ "./src/utils/constants.ts");
/* src\settings\ui\Categories.svelte generated by Svelte v3.44.3 */







function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1ok7o99", ".category.svelte-1ok7o99{display:grid;grid-template-columns:1fr auto auto;align-items:center;gap:0.5rem;padding-top:0.75rem}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
} // (47:4) {:else}


function create_else_block(ctx) {
  let div;
  let each_value =
  /*categories*/
  ctx[0];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },

    p(ctx, dirty) {
      if (dirty &
      /*categories, updateColor*/
      9) {
        each_value =
        /*categories*/
        ctx[0];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value.length;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (43:4) {#if !categories.length}


function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new category to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (49:12) {#each categories as category}


function create_each_block(ctx) {
  let div3;
  let div0;
  let name_action;
  let t0;
  let div1;
  let input;
  let input_value_value;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let mounted;
  let dispose;

  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[5](
      /*category*/
      ctx[7], ...args)
    );
  }

  return {
    c() {
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      input = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("input");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input, "type", "color");
      input.value = input_value_value =
      /*category*/
      ctx[7].color;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "color");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "category svelte-1ok7o99");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div3, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, input);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t2);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(name_action =
        /*name*/
        ctx[1].call(null, div0,
        /*category*/
        ctx[7])), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(input, "change", change_handler), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[2].call(null, div2,
        /*category*/
        ctx[7]))];
        mounted = true;
      }
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(name_action.update) && dirty &
      /*categories*/
      1) name_action.update.call(null,
      /*category*/
      ctx[7]);

      if (dirty &
      /*categories*/
      1 && input_value_value !== (input_value_value =
      /*category*/
      ctx[7].color)) {
        input.value = input_value_value;
      }

      if (trash_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(trash_action.update) && dirty &
      /*categories*/
      1) trash_action.update.call(null,
      /*category*/
      ctx[7]);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div3);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (42:0) <Detail label="Event Categories" on:new-item={addNew}>


function create_default_slot(ctx) {
  let if_block_anchor;

  function select_block_type(ctx, dirty) {
    if (!
    /*categories*/
    ctx[0].length) return create_if_block;
    return create_else_block;
  }

  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_block.m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
    },

    p(ctx, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);

        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },

    d(detaching) {
      if_block.d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      label: "Event Categories",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*addNew*/
  ctx[4]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};

      if (dirty &
      /*$$scope, categories*/
      1025) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();
  let {
    categories = []
  } = $$props;

  const name = (node, category) => {
    const comp = new obsidian__WEBPACK_IMPORTED_MODULE_1__.TextComponent(node).setValue(category.name).setPlaceholder("Name").onChange(v => {
      category.name = v;
      dispatch("update", category);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };

  const trash = (node, item) => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      $$invalidate(0, categories = categories.filter(category => category.id !== item.id));
      dispatch("delete", item);
    });
  };

  const updateColor = (event, category) => {
    const {
      target
    } = event;
    if (!(target instanceof HTMLInputElement)) return;
    category.color = target.value;
    dispatch("update", category);
  };

  const addNew = () => {
    const cat = {
      id: (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_4__.nanoid)(6),
      color: src_utils_constants__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_CATEGORY_COLOR,
      name: "Category"
    };
    $$invalidate(0, categories);
    dispatch("new", cat);
  };

  const change_handler = (category, evt) => updateColor(evt, category);

  $$self.$$set = $$props => {
    if ('categories' in $$props) $$invalidate(0, categories = $$props.categories);
  };

  return [categories, name, trash, updateColor, addNew, change_handler];
}

class Categories extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      categories: 0
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Categories);

/***/ }),

/***/ "./src/settings/ui/Detail.svelte":
/*!***************************************!*\
  !*** ./src/settings/ui/Detail.svelte ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* src\settings\ui\Detail.svelte generated by Svelte v3.44.3 */





function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-lbt0gy", ".add-new.svelte-lbt0gy{padding-top:0.75rem;padding-bottom:0.75rem;display:flex;width:100%}");
}

const get_pre_add_slot_changes = dirty => ({});

const get_pre_add_slot_context = ctx => ({});

function create_fragment(ctx) {
  let details;
  let summary;
  let h4;
  let t0;
  let t1;
  let t2;
  let div0;
  let add_action;
  let t3;
  let div1;
  let current;
  let mounted;
  let dispose;
  const pre_add_slot_template =
  /*#slots*/
  ctx[6]["pre-add"];
  const pre_add_slot = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_slot)(pre_add_slot_template, ctx,
  /*$$scope*/
  ctx[5], get_pre_add_slot_context);
  const default_slot_template =
  /*#slots*/
  ctx[6].default;
  const default_slot = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_slot)(default_slot_template, ctx,
  /*$$scope*/
  ctx[5], null);
  return {
    c() {
      details = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("details");
      summary = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("summary");
      h4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("h4");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*label*/
      ctx[0]);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (pre_add_slot) pre_add_slot.c();
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if (default_slot) default_slot.c();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "add-new svelte-lbt0gy");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "fantasy-calendar-container");
      details.open =
      /*open*/
      ctx[1];
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, details, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(details, summary);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(summary, h4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h4, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(details, t1);

      if (pre_add_slot) {
        pre_add_slot.m(details, null);
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(details, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(details, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(details, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(details, div1);

      if (default_slot) {
        default_slot.m(div1, null);
      }

      current = true;

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(add_action =
        /*add*/
        ctx[2].call(null, div0));
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (!current || dirty &
      /*label*/
      1) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t0,
      /*label*/
      ctx[0]);

      if (pre_add_slot) {
        if (pre_add_slot.p && (!current || dirty &
        /*$$scope*/
        32)) {
          (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.update_slot_base)(pre_add_slot, pre_add_slot_template, ctx,
          /*$$scope*/
          ctx[5], !current ? (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.get_all_dirty_from_scope)(
          /*$$scope*/
          ctx[5]) : (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.get_slot_changes)(pre_add_slot_template,
          /*$$scope*/
          ctx[5], dirty, get_pre_add_slot_changes), get_pre_add_slot_context);
        }
      }

      if (default_slot) {
        if (default_slot.p && (!current || dirty &
        /*$$scope*/
        32)) {
          (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.update_slot_base)(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[5], !current ? (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.get_all_dirty_from_scope)(
          /*$$scope*/
          ctx[5]) : (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.get_slot_changes)(default_slot_template,
          /*$$scope*/
          ctx[5], dirty, null), null);
        }
      }

      if (!current || dirty &
      /*open*/
      2) {
        details.open =
        /*open*/
        ctx[1];
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(pre_add_slot, local);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(default_slot, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(pre_add_slot, local);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(default_slot, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(details);
      if (pre_add_slot) pre_add_slot.d(detaching);
      if (default_slot) default_slot.d(detaching);
      mounted = false;
      dispose();
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();
  let {
    label
  } = $$props;
  let {
    open = false
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let button;

  const add = node => {
    $$invalidate(4, button = new obsidian__WEBPACK_IMPORTED_MODULE_1__.ButtonComponent(node).setTooltip("Add New").setButtonText("+").setDisabled(disabled).onClick(() => (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(void 0, void 0, void 0, function* () {
      dispatch("new-item");
    })));
    $$invalidate(4, button.buttonEl.style.width = "100%", button);
  };

  $$self.$$set = $$props => {
    if ('label' in $$props) $$invalidate(0, label = $$props.label);
    if ('open' in $$props) $$invalidate(1, open = $$props.open);
    if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*button, disabled*/
    24) {
      $: {
        if (button) {
          button.setDisabled(disabled);
        }
      }
    }
  };

  return [label, open, add, disabled, button, $$scope, slots];
}

class Detail extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      label: 0,
      open: 1,
      disabled: 3
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Detail);

/***/ }),

/***/ "./src/settings/ui/Dot.svelte":
/*!************************************!*\
  !*** ./src/settings/ui/Dot.svelte ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* src\settings\ui\Dot.svelte generated by Svelte v3.44.3 */


function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1ldxqlp", ".dot.svelte-1ldxqlp{display:inline-block;height:0.875em;width:0.875em;margin:0 1px}");
}

function create_fragment(ctx) {
  let svg;
  let circle;
  return {
    c() {
      svg = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("svg");
      circle = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("circle");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "stroke",
      /*color*/
      ctx[0]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "fill",
      /*color*/
      ctx[0]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "cx", "3");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "cy", "3");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "r", "2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "class", "dot svelte-1ldxqlp");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "viewBox", "0 0 6 6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "xmlns", "http://www.w3.org/2000/svg");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "aria-label",
      /*label*/
      ctx[1]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, svg, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(svg, circle);
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*color*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "stroke",
        /*color*/
        ctx[0]);
      }

      if (dirty &
      /*color*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "fill",
        /*color*/
        ctx[0]);
      }

      if (dirty &
      /*label*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "aria-label",
        /*label*/
        ctx[1]);
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(svg);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    color
  } = $$props;
  let {
    label
  } = $$props;

  $$self.$$set = $$props => {
    if ('color' in $$props) $$invalidate(0, color = $$props.color);
    if ('label' in $$props) $$invalidate(1, label = $$props.label);
  };

  return [color, label];
}

class Dot extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      color: 0,
      label: 1
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dot);

/***/ }),

/***/ "./src/settings/ui/Event.svelte":
/*!**************************************!*\
  !*** ./src/settings/ui/Event.svelte ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Dot_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Dot.svelte */ "./src/settings/ui/Dot.svelte");
/* src\settings\ui\Event.svelte generated by Svelte v3.44.3 */





function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-3snb0d", ".event.svelte-3snb0d.svelte-3snb0d{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.event-info.svelte-3snb0d.svelte-3snb0d{width:100%}.icons.svelte-3snb0d.svelte-3snb0d{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.event.svelte-3snb0d .icon.svelte-3snb0d{align-items:center}.date.svelte-3snb0d.svelte-3snb0d{display:flex;justify-content:flex-start;gap:0.25rem}.clamp.svelte-3snb0d.svelte-3snb0d{display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;width:calc(var(--event-max-width) * 0.75)}");
} // (22:12) {#if category != null}


function create_if_block(ctx) {
  let dot;
  let current;
  dot = new _Dot_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      color:
      /*category*/
      ctx[1].color,
      label:
      /*category*/
      ctx[1].name
    }
  });
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(dot.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(dot, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const dot_changes = {};
      if (dirty &
      /*category*/
      2) dot_changes.color =
      /*category*/
      ctx[1].color;
      if (dirty &
      /*category*/
      2) dot_changes.label =
      /*category*/
      ctx[1].name;
      dot.$set(dot_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(dot.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(dot.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(dot, detaching);
    }

  };
}

function create_fragment(ctx) {
  let div6;
  let div2;
  let span0;
  let t0;
  let t1_value =
  /*event*/
  ctx[0].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4;
  let span1;
  let t5_value = (
  /*event*/
  ctx[0].description ?? "") + "";
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let current;
  let mounted;
  let dispose;
  let if_block =
  /*category*/
  ctx[1] != null && create_if_block(ctx);
  return {
    c() {
      div6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      if (if_block) if_block.c();
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t1_value);
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*date*/
      ctx[2]);
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      span1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t5_value);
      t6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t7 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span0, "class", "setting-item-name");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "date svelte-3snb0d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span1, "class", "clamp svelte-3snb0d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "setting-item-description");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "event-info svelte-3snb0d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "icon svelte-3snb0d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "icon svelte-3snb0d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "icons svelte-3snb0d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div6, "class", "event svelte-3snb0d");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div6, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, span0);
      if (if_block) if_block.m(span0, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span0, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span0, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, span1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span1, t5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, t6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, div5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t7);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div4);
      current = true;

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(edit_action =
        /*edit*/
        ctx[5].call(null, div3)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div3, "click",
        /*click_handler*/
        ctx[6]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[4].call(null, div4)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div4, "click",
        /*click_handler_1*/
        ctx[7])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (
      /*category*/
      ctx[1] != null) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*category*/
          2) {
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
          if_block.m(span0, t0);
        }
      } else if (if_block) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      if ((!current || dirty &
      /*event*/
      1) && t1_value !== (t1_value =
      /*event*/
      ctx[0].name + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t1, t1_value);
      if (!current || dirty &
      /*date*/
      4) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t3,
      /*date*/
      ctx[2]);
      if ((!current || dirty &
      /*event*/
      1) && t5_value !== (t5_value = (
      /*event*/
      ctx[0].description ?? "") + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t5, t5_value);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div6);
      if (if_block) if_block.d();
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();

  const trash = node => {
    let b = new obsidian__WEBPACK_IMPORTED_MODULE_2__.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };

  const edit = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_2__.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };

  let {
    event
  } = $$props;
  let {
    category
  } = $$props;
  let {
    date
  } = $$props;

  const click_handler = () => dispatch("edit");

  const click_handler_1 = () => dispatch("delete");

  $$self.$$set = $$props => {
    if ('event' in $$props) $$invalidate(0, event = $$props.event);
    if ('category' in $$props) $$invalidate(1, category = $$props.category);
    if ('date' in $$props) $$invalidate(2, date = $$props.date);
  };

  return [event, category, date, dispatch, trash, edit, click_handler, click_handler_1];
}

class Event extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      event: 0,
      category: 1,
      date: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Event);

/***/ }),

/***/ "./src/settings/ui/Events.svelte":
/*!***************************************!*\
  !*** ./src/settings/ui/Events.svelte ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* harmony import */ var _Event_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Event.svelte */ "./src/settings/ui/Event.svelte");
/* src\settings\ui\Events.svelte generated by Svelte v3.44.3 */






function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
} // (37:4) {:else}


function create_else_block(ctx) {
  let div;
  let current;
  let each_value =
  /*events*/
  ctx[0];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*events, getCategory, dateString, months, editEvent, deleteEvent*/
      31) {
        each_value =
        /*events*/
        ctx[0];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (33:4) {#if !events.length}


function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new event to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (39:12) {#each events as event}


function create_each_block(ctx) {
  let eventui;
  let current;

  function edit_handler() {
    return (
      /*edit_handler*/
      ctx[6](
      /*event*/
      ctx[10])
    );
  }

  function delete_handler() {
    return (
      /*delete_handler*/
      ctx[7](
      /*event*/
      ctx[10])
    );
  }

  eventui = new _Event_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
    props: {
      event:
      /*event*/
      ctx[10],
      category:
      /*getCategory*/
      ctx[4](
      /*event*/
      ctx[10].category),
      date: (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.dateString)(
      /*event*/
      ctx[10].date,
      /*months*/
      ctx[1],
      /*event*/
      ctx[10].end)
    }
  });
  eventui.$on("edit", edit_handler);
  eventui.$on("delete", delete_handler);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(eventui.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(eventui, target, anchor);
      current = true;
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      const eventui_changes = {};
      if (dirty &
      /*events*/
      1) eventui_changes.event =
      /*event*/
      ctx[10];
      if (dirty &
      /*events*/
      1) eventui_changes.category =
      /*getCategory*/
      ctx[4](
      /*event*/
      ctx[10].category);
      if (dirty &
      /*events, months*/
      3) eventui_changes.date = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.dateString)(
      /*event*/
      ctx[10].date,
      /*months*/
      ctx[1],
      /*event*/
      ctx[10].end);
      eventui.$set(eventui_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(eventui.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(eventui.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(eventui, detaching);
    }

  };
} // (32:0) <Detail label="Event" on:new-item>


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (!
    /*events*/
    ctx[0].length) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      label: "Event",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*new_item_handler*/
  ctx[8]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};

      if (dirty &
      /*$$scope, events, months*/
      8195) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    categories = []
  } = $$props;
  let {
    events = []
  } = $$props;
  let {
    months = []
  } = $$props;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();

  const editEvent = item => {
    dispatch("new-item", item);
  };

  const deleteEvent = item => {
    $$invalidate(0, events = events.filter(event => event.id !== item.id));
    dispatch("edit-events", events);
  };

  const getCategory = category => {
    return categories.find(({
      id
    }) => id == category);
  };

  const edit_handler = event => editEvent(event);

  const delete_handler = event => deleteEvent(event);

  function new_item_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('categories' in $$props) $$invalidate(5, categories = $$props.categories);
    if ('events' in $$props) $$invalidate(0, events = $$props.events);
    if ('months' in $$props) $$invalidate(1, months = $$props.months);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*events*/
    1) {
      $: {
        events.sort((a, b) => {
          if (a.date.year != b.date.year) {
            return a.date.year - b.date.year;
          }

          if (a.date.month != b.date.month) {
            return a.date.month - b.date.month;
          }

          return a.date.day - b.date.day;
        });
      }
    }
  };

  return [events, months, editEvent, deleteEvent, getCategory, categories, edit_handler, delete_handler, new_item_handler];
}

class Events extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      categories: 5,
      events: 0,
      months: 1
    });
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);

/***/ }),

/***/ "./src/settings/ui/LeapDay.svelte":
/*!****************************************!*\
  !*** ./src/settings/ui/LeapDay.svelte ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* src\settings\ui\LeapDay.svelte generated by Svelte v3.44.3 */





function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1rh93fc", ".leapday.svelte-1rh93fc.svelte-1rh93fc{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.leapday-info.svelte-1rh93fc.svelte-1rh93fc{width:100%}.icons.svelte-1rh93fc.svelte-1rh93fc{display:flex;align-self:center;justify-self:flex-end;align-items:center}.leapday.svelte-1rh93fc .icon.svelte-1rh93fc{align-items:center}");
}

function create_fragment(ctx) {
  let div5;
  let div1;
  let span;
  let t0_value =
  /*leapday*/
  ctx[0].name + "";
  let t0;
  let t1;
  let div0;
  let t2;
  let t3;
  let div4;
  let div2;
  let edit_action;
  let t4;
  let div3;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t0_value);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*description*/
      ctx[1]);
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "setting-item-name");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "setting-item-description");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "leapday-info svelte-1rh93fc");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "icon svelte-1rh93fc");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "icon svelte-1rh93fc");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "icons svelte-1rh93fc");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "leapday svelte-1rh93fc");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div5, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, span);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, t4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div3);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(edit_action =
        /*edit*/
        ctx[4].call(null, div2)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div2, "click",
        /*click_handler*/
        ctx[5]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[3].call(null, div3)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div3, "click",
        /*click_handler_1*/
        ctx[6])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*leapday*/
      1 && t0_value !== (t0_value =
      /*leapday*/
      ctx[0].name + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t0, t0_value);
      if (dirty &
      /*description*/
      2) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t2,
      /*description*/
      ctx[1]);
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div5);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let description;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();

  const trash = node => {
    let b = new obsidian__WEBPACK_IMPORTED_MODULE_2__.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };

  const edit = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_2__.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };

  let {
    leapday
  } = $$props;

  const click_handler = () => dispatch("edit");

  const click_handler_1 = () => dispatch("delete");

  $$self.$$set = $$props => {
    if ('leapday' in $$props) $$invalidate(0, leapday = $$props.leapday);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*leapday*/
    1) {
      $: $$invalidate(1, description = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_3__.getIntervalDescription)(leapday));
    }
  };

  return [leapday, description, dispatch, trash, edit, click_handler, click_handler_1];
}

class LeapDay extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      leapday: 0
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LeapDay);

/***/ }),

/***/ "./src/settings/ui/LeapDays.svelte":
/*!*****************************************!*\
  !*** ./src/settings/ui/LeapDays.svelte ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* harmony import */ var _LeapDay_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LeapDay.svelte */ "./src/settings/ui/LeapDay.svelte");
/* src\settings\ui\LeapDays.svelte generated by Svelte v3.44.3 */





function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
} // (20:4) {:else}


function create_else_block(ctx) {
  let div;
  let current;
  let each_value =
  /*leapdays*/
  ctx[0];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*leapdays, editLeapDay, deleteLeapDay*/
      7) {
        each_value =
        /*leapdays*/
        ctx[0];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (16:4) {#if !leapdays.length}


function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new leap day to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (22:12) {#each leapdays as leapday}


function create_each_block(ctx) {
  let leapdayui;
  let current;

  function edit_handler() {
    return (
      /*edit_handler*/
      ctx[3](
      /*leapday*/
      ctx[7])
    );
  }

  function delete_handler() {
    return (
      /*delete_handler*/
      ctx[4](
      /*leapday*/
      ctx[7])
    );
  }

  leapdayui = new _LeapDay_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      leapday:
      /*leapday*/
      ctx[7]
    }
  });
  leapdayui.$on("edit", edit_handler);
  leapdayui.$on("delete", delete_handler);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(leapdayui.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(leapdayui, target, anchor);
      current = true;
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      const leapdayui_changes = {};
      if (dirty &
      /*leapdays*/
      1) leapdayui_changes.leapday =
      /*leapday*/
      ctx[7];
      leapdayui.$set(leapdayui_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(leapdayui.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(leapdayui.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(leapdayui, detaching);
    }

  };
} // (15:0) <Detail label="Leap Days" on:new-item>


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (!
    /*leapdays*/
    ctx[0].length) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_2__["default"]({
    props: {
      label: "Leap Days",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*new_item_handler*/
  ctx[5]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};

      if (dirty &
      /*$$scope, leapdays*/
      1025) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    leapdays = []
  } = $$props;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();

  const editLeapDay = item => {
    dispatch("new-item", item);
  };

  const deleteLeapDay = item => {
    $$invalidate(0, leapdays = leapdays.filter(leapday => leapday.id !== item.id));
    dispatch("edit-leapdays", leapdays);
  };

  const edit_handler = leapday => editLeapDay(leapday);

  const delete_handler = leapday => deleteLeapDay(leapday);

  function new_item_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('leapdays' in $$props) $$invalidate(0, leapdays = $$props.leapdays);
  };

  return [leapdays, editLeapDay, deleteLeapDay, edit_handler, delete_handler, new_item_handler];
}

class LeapDays extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      leapdays: 0
    });
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LeapDays);

/***/ }),

/***/ "./src/settings/ui/Month.svelte":
/*!**************************************!*\
  !*** ./src/settings/ui/Month.svelte ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* src\settings\ui\Month.svelte generated by Svelte v3.44.3 */




function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1nt6wkb", ".month.svelte-1nt6wkb.svelte-1nt6wkb{display:grid;grid-template-columns:1fr 1fr auto auto;align-items:center;justify-content:space-between;gap:1rem}.month.svelte-1nt6wkb .icon.svelte-1nt6wkb{align-items:center}");
}

function create_fragment(ctx) {
  let div1;
  let input0;
  let t0;
  let input1;
  let t1;
  let select;
  let option0;
  let option1;
  let t4;
  let div0;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      input0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("input");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      input1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("input");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      select = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("select");
      option0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("option");
      option0.textContent = "Month";
      option1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("option");
      option1.textContent = "Intercalary";
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input0, "type", "text");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input0, "spellcheck", "false");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input0, "placeholder", "Name");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(input0, "width", "100%");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input1, "type", "number");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input1, "spellcheck", "false");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input1, "placeholder", "Length");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(input1, "width", "100%");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(input1, "min", "0");
      option0.__value = "month";
      option0.value = option0.__value;
      option1.__value = "intercalary";
      option1.value = option1.__value;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(select, "class", "dropdown");
      if (
      /*type*/
      ctx[0] === void 0) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.add_render_callback)(() =>
      /*select_change_handler*/
      ctx[8].call(select));
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "icon svelte-1nt6wkb");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "month svelte-1nt6wkb");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div1, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, input0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_input_value)(input0,
      /*name*/
      ctx[1]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, input1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_input_value)(input1,
      /*length*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, select);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(select, option0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(select, option1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.select_option)(select,
      /*type*/
      ctx[0]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(input0, "input",
        /*input0_input_handler*/
        ctx[6]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(input0, "input",
        /*update*/
        ctx[4]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(input1, "input",
        /*input1_input_handler*/
        ctx[7]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(input1, "input",
        /*update*/
        ctx[4]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(select, "change",
        /*select_change_handler*/
        ctx[8]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(select, "input",
        /*update*/
        ctx[4]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[3].call(null, div0))];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*name*/
      2 && input0.value !==
      /*name*/
      ctx[1]) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_input_value)(input0,
        /*name*/
        ctx[1]);
      }

      if (dirty &
      /*length*/
      4 && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.to_number)(input1.value) !==
      /*length*/
      ctx[2]) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_input_value)(input1,
        /*length*/
        ctx[2]);
      }

      if (dirty &
      /*type*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.select_option)(select,
        /*type*/
        ctx[0]);
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div1);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();
  let {
    month
  } = $$props;
  let name = month.name;
  let type = month.type;
  let length = month.length;

  const trash = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      dispatch("month-delete");
    });
  };

  const update = (0,obsidian__WEBPACK_IMPORTED_MODULE_1__.debounce)(() => {
    $$invalidate(5, month.name = name, month);
    $$invalidate(5, month.type = type, month);
    $$invalidate(5, month.length = length, month);
    dispatch("month-update");
  }, 300, true);

  function input0_input_handler() {
    name = this.value;
    $$invalidate(1, name);
  }

  function input1_input_handler() {
    length = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.to_number)(this.value);
    $$invalidate(2, length);
  }

  function select_change_handler() {
    type = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.select_value)(this);
    $$invalidate(0, type);
  }

  $$self.$$set = $$props => {
    if ('month' in $$props) $$invalidate(5, month = $$props.month);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*type*/
    1) {
      $: {
        $$invalidate(5, month.type = type, month);
      }
      /* dispatch("month-update", month); */

    }
  };

  return [type, name, length, trash, update, month, input0_input_handler, input1_input_handler, select_change_handler];
}

class Month extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      month: 5
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Month);

/***/ }),

/***/ "./src/settings/ui/Months.svelte":
/*!***************************************!*\
  !*** ./src/settings/ui/Months.svelte ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var svelte_animate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte/animate */ "./node_modules/svelte/animate/index.mjs");
/* harmony import */ var svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svelte-dnd-action */ "./node_modules/svelte-dnd-action/src/index.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _Month_svelte__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Month.svelte */ "./src/settings/ui/Month.svelte");
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* src\settings\ui\Months.svelte generated by Svelte v3.44.3 */









function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-xv4vbj", ".month.svelte-xv4vbj{display:flex;align-items:center;margin-top:0.5rem;gap:1rem}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
} // (61:4) {:else}


function create_else_block(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value =
  /*months*/
  ctx[0];

  const get_key = ctx =>
  /*month*/
  ctx[12].id;

  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(dndzone_action = svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.dndzone.call(null, div, {
          items:
          /*months*/
          ctx[0],
          flipDurationMs,
          dragDisabled:
          /*dragDisabled*/
          ctx[1]
        })), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "consider",
        /*handleConsider*/
        ctx[6]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "finalize",
        /*handleFinalize*/
        ctx[7])];
        mounted = true;
      }
    },

    p(ctx, dirty) {
      if (dirty &
      /*months, startDrag, deleteMonth, dispatch*/
      297) {
        each_value =
        /*months*/
        ctx[0];
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();

        each_blocks = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.update_keyed_each)(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);

        for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      if (dndzone_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(dndzone_action.update) && dirty &
      /*months, dragDisabled*/
      3) dndzone_action.update.call(null, {
        items:
        /*months*/
        ctx[0],
        flipDurationMs,
        dragDisabled:
        /*dragDisabled*/
        ctx[1]
      });
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }

      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (57:4) {#if !months.length}


function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new month to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (68:12) {#each months as month (month.id)}


function create_each_block(key_1, ctx) {
  let div1;
  let div0;
  let grip_action;
  let t0;
  let monthinstance;
  let t1;
  let rect;
  let stop_animation = svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop;
  let current;
  let mounted;
  let dispose;

  function month_delete_handler() {
    return (
      /*month_delete_handler*/
      ctx[9](
      /*month*/
      ctx[12])
    );
  }

  monthinstance = new _Month_svelte__WEBPACK_IMPORTED_MODULE_5__["default"]({
    props: {
      month:
      /*month*/
      ctx[12]
    }
  });
  monthinstance.$on("mousedown",
  /*startDrag*/
  ctx[5]);
  monthinstance.$on("month-delete", month_delete_handler);
  monthinstance.$on("month-update",
  /*month_update_handler*/
  ctx[10]);
  return {
    key: key_1,
    first: null,

    c() {
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(monthinstance.$$.fragment);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "icon");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "month svelte-xv4vbj");
      this.first = div1;
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div1, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(monthinstance, div1, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t1);
      current = true;

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(grip_action =
        /*grip*/
        ctx[4].call(null, div0)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "mousedown",
        /*startDrag*/
        ctx[5]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "touchstart",
        /*startDrag*/
        ctx[5])];
        mounted = true;
      }
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      const monthinstance_changes = {};
      if (dirty &
      /*months*/
      1) monthinstance_changes.month =
      /*month*/
      ctx[12];
      monthinstance.$set(monthinstance_changes);
    },

    r() {
      rect = div1.getBoundingClientRect();
    },

    f() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fix_position)(div1);
      stop_animation();
    },

    a() {
      stop_animation();
      stop_animation = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_animation)(div1, rect, svelte_animate__WEBPACK_IMPORTED_MODULE_2__.flip, {
        duration: flipDurationMs
      });
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(monthinstance.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(monthinstance.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(monthinstance);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (56:0) <Detail label="Months" on:new-item={addNew}>


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (!
    /*months*/
    ctx[0].length) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_7__["default"]({
    props: {
      label: "Months",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*addNew*/
  ctx[2]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};

      if (dirty &
      /*$$scope, months, dragDisabled*/
      32771) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

const flipDurationMs = 300;

function instance($$self, $$props, $$invalidate) {
  const addNew = () => {
    $$invalidate(0, months = [...months, {
      type: "month",
      name: null,
      length: null,
      id: (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_6__.nanoid)(6)
    }]);
    dispatch("month-update", months);
  };

  const deleteMonth = month => {
    $$invalidate(0, months = months.filter(m => m.id != month.id));
    dispatch("month-update", months);
  };

  const updateMonth = month => {};

  const grip = node => {
    (0,obsidian__WEBPACK_IMPORTED_MODULE_4__.setIcon)(node, "fantasy-calendar-grip");
  };

  function startDrag(e) {
    // preventing default to prevent lag on touch devices (because of the browser checking for screen scrolling)
    e.preventDefault();
    $$invalidate(1, dragDisabled = false);
  }

  let dragDisabled = false;

  function handleConsider(e) {
    const {
      items: newItems,
      info: {
        source,
        trigger
      }
    } = e.detail;
    $$invalidate(0, months = newItems); // Ensure dragging is stopped on drag finish via keyboard

    if (source === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.SOURCES.KEYBOARD && trigger === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.TRIGGERS.DRAG_STOPPED) {
      $$invalidate(1, dragDisabled = true);
    }
  }

  function handleFinalize(e) {
    const {
      items: newItems,
      info: {
        source
      }
    } = e.detail;
    $$invalidate(0, months = newItems);
    dispatch("month-update", months); // Ensure dragging is stopped on drag finish via pointer (mouse, touch)

    if (source === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.SOURCES.POINTER) {
      $$invalidate(1, dragDisabled = true);
    }
  }

  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();
  let {
    months = []
  } = $$props;

  const month_delete_handler = month => deleteMonth(month);

  const month_update_handler = () => dispatch("month-update", months);

  $$self.$$set = $$props => {
    if ('months' in $$props) $$invalidate(0, months = $$props.months);
  };

  return [months, dragDisabled, addNew, deleteMonth, grip, startDrag, handleConsider, handleFinalize, dispatch, month_delete_handler, month_update_handler];
}

class Months extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      months: 0
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Months);

/***/ }),

/***/ "./src/settings/ui/Moons.svelte":
/*!**************************************!*\
  !*** ./src/settings/ui/Moons.svelte ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var src_view_ui_Moon_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/view/ui/Moon.svelte */ "./src/view/ui/Moon.svelte");
/* src\settings\ui\Moons.svelte generated by Svelte v3.44.3 */






function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-v24qmo", ".moon.svelte-v24qmo{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.setting-item-name.svelte-v24qmo{display:flex;align-items:center}.icons.svelte-v24qmo{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.icon.svelte-v24qmo{align-items:center}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
} // (39:4) {:else}


function create_else_block(ctx) {
  let div;
  let current;
  let each_value =
  /*moons*/
  ctx[0];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*deleteMoon, moons, dispatch*/
      35) {
        each_value =
        /*moons*/
        ctx[0];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (35:4) {#if !moons.length}


function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new moon to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (41:12) {#each moons as moon}


function create_each_block(ctx) {
  let div6;
  let div2;
  let span;
  let moonsvg;
  let t0;
  let t1_value =
  /*moon*/
  ctx[10].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4_value =
  /*moon*/
  ctx[10].cycle + "";
  let t4;
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let t8;
  let current;
  let mounted;
  let dispose;
  moonsvg = new src_view_ui_Moon_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
    props: {
      moon:
      /*moon*/
      ctx[10],
      phase: "First Quarter",
      label: false,
      size: 20
    }
  });

  function click_handler() {
    return (
      /*click_handler*/
      ctx[7](
      /*moon*/
      ctx[10])
    );
  }

  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[8](
      /*moon*/
      ctx[10])
    );
  }

  return {
    c() {
      div6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(moonsvg.$$.fragment);
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t1_value);
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)("Cycle: ");
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t4_value);
      t5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(" days");
      t6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t7 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t8 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "setting-item-name svelte-v24qmo");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "date");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "setting-item-description");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "moon-info");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "icon svelte-v24qmo");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "icon svelte-v24qmo");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "icons svelte-v24qmo");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div6, "class", "moon svelte-v24qmo");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div6, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, span);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(moonsvg, span, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, t4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, t5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, t6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, div5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t7);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, t8);
      current = true;

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(edit_action =
        /*edit*/
        ctx[4].call(null, div3)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div3, "click", click_handler), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[3].call(null, div4)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div4, "click", click_handler_1)];
        mounted = true;
      }
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      const moonsvg_changes = {};
      if (dirty &
      /*moons*/
      1) moonsvg_changes.moon =
      /*moon*/
      ctx[10];
      moonsvg.$set(moonsvg_changes);
      if ((!current || dirty &
      /*moons*/
      1) && t1_value !== (t1_value =
      /*moon*/
      ctx[10].name + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t1, t1_value);
      if ((!current || dirty &
      /*moons*/
      1) && t4_value !== (t4_value =
      /*moon*/
      ctx[10].cycle + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t4, t4_value);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(moonsvg.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(moonsvg.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(moonsvg);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (31:0) <Detail label="Moons" on:new-item>


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (!
    /*moons*/
    ctx[0].length) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
} // (32:4) <svelte:fragment slot="pre-add">


function create_pre_add_slot(ctx) {
  let div;
  let display_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(display_action =
        /*display*/
        ctx[2].call(null, div));
        mounted = true;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      mounted = false;
      dispose();
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_2__["default"]({
    props: {
      label: "Moons",
      $$slots: {
        "pre-add": [create_pre_add_slot],
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*new_item_handler*/
  ctx[9]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};

      if (dirty &
      /*$$scope, moons*/
      8193) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    moons = []
  } = $$props;
  let {
    displayMoons = true
  } = $$props;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();

  const display = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_3__.Setting(node).setName("Display Moons").setDesc("Display moons by default when viewing this calendar.").addToggle(t => {
      t.setValue(displayMoons).onChange(v => dispatch("display-toggle", v));
    });
  };

  const trash = node => {
    let b = new obsidian__WEBPACK_IMPORTED_MODULE_3__.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };

  const edit = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_3__.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };

  const deleteMoon = item => {
    $$invalidate(0, moons = moons.filter(moon => moon.id !== item.id));
    dispatch("edit-moons", moons);
  };

  const click_handler = moon => dispatch("new-item", moon);

  const click_handler_1 = moon => deleteMoon(moon);

  function new_item_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('moons' in $$props) $$invalidate(0, moons = $$props.moons);
    if ('displayMoons' in $$props) $$invalidate(6, displayMoons = $$props.displayMoons);
  };

  return [moons, dispatch, display, trash, edit, deleteMoon, displayMoons, click_handler, click_handler_1, new_item_handler];
}

class Moons extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      moons: 0,
      displayMoons: 6
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Moons);

/***/ }),

/***/ "./src/settings/ui/Weekdays.svelte":
/*!*****************************************!*\
  !*** ./src/settings/ui/Weekdays.svelte ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var svelte_animate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte/animate */ "./node_modules/svelte/animate/index.mjs");
/* harmony import */ var svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svelte-dnd-action */ "./node_modules/svelte-dnd-action/src/index.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* src\settings\ui\Weekdays.svelte generated by Svelte v3.44.3 */








function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1xaj2n2", ".overflow.svelte-1xaj2n2.svelte-1xaj2n2{padding-top:0.75rem}.weekday.svelte-1xaj2n2.svelte-1xaj2n2{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1xaj2n2 .icon.svelte-1xaj2n2{align-items:center}.weekday.svelte-1xaj2n2.svelte-1xaj2n2{margin-top:0.5rem}");
}

function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i];
  return child_ctx;
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  child_ctx[16] = i;
  return child_ctx;
} // (123:4) {:else}


function create_else_block(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value_1 =
  /*weekdays*/
  ctx[2];

  const get_key = ctx =>
  /*item*/
  ctx[17].id;

  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_1(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
  }

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(dndzone_action = svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.dndzone.call(null, div, {
          items:
          /*weekdays*/
          ctx[2],
          flipDurationMs,
          dragDisabled:
          /*dragDisabled*/
          ctx[3]
        })), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "consider",
        /*handleConsider*/
        ctx[10]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "finalize",
        /*handleFinalize*/
        ctx[11])];
        mounted = true;
      }
    },

    p(ctx, dirty) {
      if (dirty &
      /*weekdays, startDrag*/
      516) {
        each_value_1 =
        /*weekdays*/
        ctx[2];

        for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();

        each_blocks = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.update_keyed_each)(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fix_and_destroy_block, create_each_block_1, null, get_each_context_1);

        for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
      }

      if (dndzone_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(dndzone_action.update) && dirty &
      /*weekdays, dragDisabled*/
      12) dndzone_action.update.call(null, {
        items:
        /*weekdays*/
        ctx[2],
        flipDurationMs,
        dragDisabled:
        /*dragDisabled*/
        ctx[3]
      });
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }

      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (119:4) {#if !weekdays.length}


function create_if_block_1(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new weekday to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (130:12) {#each weekdays as item (item.id)}


function create_each_block_1(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,

    c() {
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "icon svelte-1xaj2n2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "icon svelte-1xaj2n2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "weekday svelte-1xaj2n2");
      this.first = div3;
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div3, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t2);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(grip_action =
        /*grip*/
        ctx[5].call(null, div0)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "mousedown",
        /*startDrag*/
        ctx[9]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "touchstart",
        /*startDrag*/
        ctx[9]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(name_action =
        /*name*/
        ctx[7].call(null, div1,
        /*item*/
        ctx[17])), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[6].call(null, div2,
        /*item*/
        ctx[17]))];
        mounted = true;
      }
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(name_action.update) && dirty &
      /*weekdays*/
      4) name_action.update.call(null,
      /*item*/
      ctx[17]);
      if (trash_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(trash_action.update) && dirty &
      /*weekdays*/
      4) trash_action.update.call(null,
      /*item*/
      ctx[17]);
    },

    r() {
      rect = div3.getBoundingClientRect();
    },

    f() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fix_position)(div3);
      stop_animation();
    },

    a() {
      stop_animation();
      stop_animation = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_animation)(div3, rect, svelte_animate__WEBPACK_IMPORTED_MODULE_2__.flip, {
        duration: flipDurationMs
      });
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div3);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (84:0) <Detail label="Weekdays" on:new-item={addNew}>


function create_default_slot(ctx) {
  let if_block_anchor;

  function select_block_type(ctx, dirty) {
    if (!
    /*weekdays*/
    ctx[2].length) return create_if_block_1;
    return create_else_block;
  }

  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_block.m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
    },

    p(ctx, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);

        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },

    d(detaching) {
      if_block.d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
} // (87:8) {#if weekdays.length}


function create_if_block(ctx) {
  let div5;
  let div4;
  let div2;
  let t3;
  let div3;
  let select;
  let select_aria_label_value;
  let mounted;
  let dispose;
  let each_value =
  /*weekdays*/
  ctx[2];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  return {
    c() {
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div2.innerHTML = `<div class="setting-item-name">First Day</div> 
                        <div class="setting-item-description">This only effects which day of the week the first
                            year starts on.</div>`;
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      select = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("select");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "setting-item-info");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(select, "class", "dropdown");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(select, "aria-label", select_aria_label_value = !
      /*overflow*/
      ctx[1] ? "Cannot be modified without overflow." : undefined);
      if (
      /*firstWeekday*/
      ctx[0] === void 0) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.add_render_callback)(() =>
      /*select_change_handler*/
      ctx[12].call(select));
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "setting-item-control");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "setting-item");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "first-weekday");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div5, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, select);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(select, null);
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.select_option)(select,
      /*firstWeekday*/
      ctx[0]);

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(select, "change",
        /*select_change_handler*/
        ctx[12]);
        mounted = true;
      }
    },

    p(ctx, dirty) {
      if (dirty &
      /*overflow, firstWeekday, weekdays*/
      7) {
        each_value =
        /*weekdays*/
        ctx[2];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value.length;
      }

      if (dirty &
      /*overflow*/
      2 && select_aria_label_value !== (select_aria_label_value = !
      /*overflow*/
      ctx[1] ? "Cannot be modified without overflow." : undefined)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(select, "aria-label", select_aria_label_value);
      }

      if (dirty &
      /*firstWeekday*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.select_option)(select,
        /*firstWeekday*/
        ctx[0]);
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
      mounted = false;
      dispose();
    }

  };
} // (105:28) {#each weekdays as weekday, index}


function create_each_block(ctx) {
  let option;
  let t_value = (
  /*weekday*/
  ctx[14].name ?? "") + "";
  let t;
  let option_disabled_value;
  let option_value_value;
  let option_selected_value;
  return {
    c() {
      option = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("option");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t_value);
      option.disabled = option_disabled_value = !
      /*overflow*/
      ctx[1];
      option.__value = option_value_value =
      /*index*/
      ctx[16];
      option.value = option.__value;
      option.selected = option_selected_value =
      /*index*/
      ctx[16] ==
      /*firstWeekday*/
      ctx[0];
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, option, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(option, t);
    },

    p(ctx, dirty) {
      if (dirty &
      /*weekdays*/
      4 && t_value !== (t_value = (
      /*weekday*/
      ctx[14].name ?? "") + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t, t_value);

      if (dirty &
      /*overflow*/
      2 && option_disabled_value !== (option_disabled_value = !
      /*overflow*/
      ctx[1])) {
        option.disabled = option_disabled_value;
      }

      if (dirty &
      /*firstWeekday*/
      1 && option_selected_value !== (option_selected_value =
      /*index*/
      ctx[16] ==
      /*firstWeekday*/
      ctx[0])) {
        option.selected = option_selected_value;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(option);
    }

  };
} // (85:4) <svelte:fragment slot="pre-add">


function create_pre_add_slot(ctx) {
  let div;
  let overflowNode_action;
  let t;
  let if_block_anchor;
  let mounted;
  let dispose;
  let if_block =
  /*weekdays*/
  ctx[2].length && create_if_block(ctx);
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (if_block) if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "overflow svelte-1xaj2n2");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, t, anchor);
      if (if_block) if_block.m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(overflowNode_action =
        /*overflowNode*/
        ctx[8].call(null, div));
        mounted = true;
      }
    },

    p(ctx, dirty) {
      if (
      /*weekdays*/
      ctx[2].length) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(t);
      if (if_block) if_block.d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
      mounted = false;
      dispose();
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_6__["default"]({
    props: {
      label: "Weekdays",
      $$slots: {
        "pre-add": [create_pre_add_slot],
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*addNew*/
  ctx[4]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};

      if (dirty &
      /*$$scope, overflow, firstWeekday, weekdays, dragDisabled*/
      1048591) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

const flipDurationMs = 300;

function instance($$self, $$props, $$invalidate) {
  let {
    firstWeekday = 0
  } = $$props;
  let {
    overflow = true
  } = $$props;

  const addNew = () => {
    $$invalidate(2, weekdays = [...weekdays, {
      type: "day",
      name: null,
      id: (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_5__.nanoid)(6)
    }]);
  };

  const grip = node => {
    (0,obsidian__WEBPACK_IMPORTED_MODULE_4__.setIcon)(node, "fantasy-calendar-grip");
  };

  const trash = (node, item) => {
    new obsidian__WEBPACK_IMPORTED_MODULE_4__.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(2, weekdays = weekdays.filter(day => day.id !== item.id)));
  };

  const name = (node, item) => {
    const comp = new obsidian__WEBPACK_IMPORTED_MODULE_4__.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange(v => {
      item.name = v;
      dispatch("weekday-update", weekdays);
      $$invalidate(2, weekdays);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };

  const overflowNode = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_4__.Setting(node).setName("Overflow Weeks").setDesc("Turn this off to make each month start on the first of the week.").addToggle(t => {
      t.setValue(overflow).onChange(v => {
        $$invalidate(1, overflow = v);
      });
    });
  };

  function startDrag(e) {
    e.preventDefault();
    $$invalidate(3, dragDisabled = false);
  }

  let dragDisabled = false;

  function handleConsider(e) {
    const {
      items: newItems,
      info: {
        source,
        trigger
      }
    } = e.detail;
    $$invalidate(2, weekdays = newItems); // Ensure dragging is stopped on drag finish via keyboard

    if (source === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.SOURCES.KEYBOARD && trigger === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.TRIGGERS.DRAG_STOPPED) {
      $$invalidate(3, dragDisabled = true);
    }
  }

  function handleFinalize(e) {
    const {
      items: newItems,
      info: {
        source
      }
    } = e.detail;
    $$invalidate(2, weekdays = newItems); // Ensure dragging is stopped on drag finish via pointer (mouse, touch)

    if (source === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.SOURCES.POINTER) {
      $$invalidate(3, dragDisabled = true);
    }
  }

  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();
  let {
    weekdays = []
  } = $$props;

  function select_change_handler() {
    firstWeekday = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.select_value)(this);
    $$invalidate(0, firstWeekday);
  }

  $$self.$$set = $$props => {
    if ('firstWeekday' in $$props) $$invalidate(0, firstWeekday = $$props.firstWeekday);
    if ('overflow' in $$props) $$invalidate(1, overflow = $$props.overflow);
    if ('weekdays' in $$props) $$invalidate(2, weekdays = $$props.weekdays);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*weekdays*/
    4) {
      $: {
        dispatch("weekday-update", weekdays);
      } //TODO: add new days to dropdown, remove removed days from dropdown

    }

    if ($$self.$$.dirty &
    /*firstWeekday*/
    1) {
      $: {
        dispatch("first-weekday-update", firstWeekday);
      }
    }

    if ($$self.$$.dirty &
    /*overflow*/
    2) {
      $: {
        dispatch("overflow-update", overflow);
      }
    }
  };

  return [firstWeekday, overflow, weekdays, dragDisabled, addNew, grip, trash, name, overflowNode, startDrag, handleConsider, handleFinalize, select_change_handler];
}

class Weekdays extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      firstWeekday: 0,
      overflow: 1,
      weekdays: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Weekdays);

/***/ }),

/***/ "./src/settings/ui/Year.svelte":
/*!*************************************!*\
  !*** ./src/settings/ui/Year.svelte ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var svelte_animate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte/animate */ "./node_modules/svelte/animate/index.mjs");
/* harmony import */ var svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svelte-dnd-action */ "./node_modules/svelte-dnd-action/src/index.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var _Detail_svelte__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Detail.svelte */ "./src/settings/ui/Detail.svelte");
/* harmony import */ var _modals_confirm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../modals/confirm */ "./src/settings/modals/confirm.ts");
/* src\settings\ui\Year.svelte generated by Svelte v3.44.3 */










function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1f06yhl", ".use-custom.svelte-1f06yhl.svelte-1f06yhl{padding-top:0.75rem}.weekday.svelte-1f06yhl.svelte-1f06yhl{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1f06yhl .icon.svelte-1f06yhl{align-items:center}.weekday.svelte-1f06yhl.svelte-1f06yhl{margin-top:0.5rem}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
} // (116:4) {:else}


function create_else_block(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value =
  /*years*/
  ctx[1];

  const get_key = ctx =>
  /*item*/
  ctx[13].id;

  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(dndzone_action = svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.dndzone.call(null, div, {
          items:
          /*years*/
          ctx[1],
          flipDurationMs,
          dragDisabled:
          /*dragDisabled*/
          ctx[2]
        })), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "consider",
        /*handleConsider*/
        ctx[9]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "finalize",
        /*handleFinalize*/
        ctx[10])];
        mounted = true;
      }
    },

    p(ctx, dirty) {
      if (dirty &
      /*years, startDrag*/
      258) {
        each_value =
        /*years*/
        ctx[1];

        for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();

        each_blocks = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.update_keyed_each)(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fix_and_destroy_block, create_each_block, null, get_each_context);

        for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
      }

      if (dndzone_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(dndzone_action.update) && dirty &
      /*years, dragDisabled*/
      6) dndzone_action.update.call(null, {
        items:
        /*years*/
        ctx[1],
        flipDurationMs,
        dragDisabled:
        /*dragDisabled*/
        ctx[2]
      });
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }

      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (112:4) {#if !years || !years.length}


function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div.innerHTML = `<span>Create a new year to see it here.</span>`;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "existing-items");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (123:12) {#each years as item (item.id)}


function create_each_block(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,

    c() {
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "icon svelte-1f06yhl");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "icon svelte-1f06yhl");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "weekday svelte-1f06yhl");
      this.first = div3;
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div3, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t2);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(grip_action =
        /*grip*/
        ctx[4].call(null, div0)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "mousedown",
        /*startDrag*/
        ctx[8]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "touchstart",
        /*startDrag*/
        ctx[8]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(name_action =
        /*name*/
        ctx[6].call(null, div1,
        /*item*/
        ctx[13])), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(trash_action =
        /*trash*/
        ctx[5].call(null, div2,
        /*item*/
        ctx[13]))];
        mounted = true;
      }
    },

    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(name_action.update) && dirty &
      /*years*/
      2) name_action.update.call(null,
      /*item*/
      ctx[13]);
      if (trash_action && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.is_function)(trash_action.update) && dirty &
      /*years*/
      2) trash_action.update.call(null,
      /*item*/
      ctx[13]);
    },

    r() {
      rect = div3.getBoundingClientRect();
    },

    f() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fix_position)(div3);
      stop_animation();
    },

    a() {
      stop_animation();
      stop_animation = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_animation)(div3, rect, svelte_animate__WEBPACK_IMPORTED_MODULE_2__.flip, {
        duration: flipDurationMs
      });
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div3);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (108:0) <Detail label="Years" on:new-item={addNew} disabled={!useCustomYears}>


function create_default_slot(ctx) {
  let if_block_anchor;

  function select_block_type(ctx, dirty) {
    if (!
    /*years*/
    ctx[1] || !
    /*years*/
    ctx[1].length) return create_if_block;
    return create_else_block;
  }

  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_block.m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
    },

    p(ctx, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);

        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },

    d(detaching) {
      if_block.d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
} // (109:4) <svelte:fragment slot="pre-add">


function create_pre_add_slot(ctx) {
  let div;
  let customNode_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "use-custom svelte-1f06yhl");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(customNode_action =
        /*customNode*/
        ctx[7].call(null, div));
        mounted = true;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      mounted = false;
      dispose();
    }

  };
}

function create_fragment(ctx) {
  let detail;
  let current;
  detail = new _Detail_svelte__WEBPACK_IMPORTED_MODULE_6__["default"]({
    props: {
      label: "Years",
      disabled: !
      /*useCustomYears*/
      ctx[0],
      $$slots: {
        "pre-add": [create_pre_add_slot],
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    }
  });
  detail.$on("new-item",
  /*addNew*/
  ctx[3]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(detail.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(detail, target, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      const detail_changes = {};
      if (dirty &
      /*useCustomYears*/
      1) detail_changes.disabled = !
      /*useCustomYears*/
      ctx[0];

      if (dirty &
      /*$$scope, years, dragDisabled*/
      65542) {
        detail_changes.$$scope = {
          dirty,
          ctx
        };
      }

      detail.$set(detail_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(detail.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(detail.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(detail, detaching);
    }

  };
}

const flipDurationMs = 300;

function instance($$self, $$props, $$invalidate) {
  let {
    useCustomYears
  } = $$props;
  let {
    years
  } = $$props;

  const addNew = () => {
    if (!years) $$invalidate(1, years = []);
    $$invalidate(1, years = [...years, {
      name: null,
      id: (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_5__.nanoid)(6),
      type: "year"
    }]);
  };

  const grip = node => {
    (0,obsidian__WEBPACK_IMPORTED_MODULE_4__.setIcon)(node, "fantasy-calendar-grip");
  };

  const trash = (node, item) => {
    new obsidian__WEBPACK_IMPORTED_MODULE_4__.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(1, years = years.filter(year => year.id !== item.id)));
  };

  const name = (node, item) => {
    const comp = new obsidian__WEBPACK_IMPORTED_MODULE_4__.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange(v => {
      item.name = v;
      dispatch("years-update", years);
      $$invalidate(1, years);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };

  let {
    app
  } = $$props;

  const customNode = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_4__.Setting(node).setName("Use Custom Years").setDesc(createFragment(el => {
      el.createSpan({
        text: "Create custom years to display instead of incrementing from 1."
      });
      el.createEl("br");
      el.createSpan({
        text: "If on, "
      });
      el.createEl("strong", {
        text: "only the years added below will be displayed."
      });
      return el;
    })).addToggle(t => {
      let skip = false;
      t.setValue(useCustomYears).onChange(v => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(void 0, void 0, void 0, function* () {
        if (!skip && useCustomYears && (years === null || years === void 0 ? void 0 : years.length)) {
          if (yield (0,_modals_confirm__WEBPACK_IMPORTED_MODULE_7__.confirmWithModal)(app, "The custom years you have created will be removed. Proceed?")) {
            $$invalidate(1, years = []);
            $$invalidate(0, useCustomYears = v);
            skip = false;
          }

          skip = true;
          t.setValue(useCustomYears);
        } else {
          skip = false;
          $$invalidate(0, useCustomYears = v);
        }
      }));
    });
  };

  function startDrag(e) {
    e.preventDefault();
    $$invalidate(2, dragDisabled = false);
  }

  let dragDisabled = false;

  function handleConsider(e) {
    const {
      items: newItems,
      info: {
        source,
        trigger
      }
    } = e.detail;
    $$invalidate(1, years = newItems); // Ensure dragging is stopped on drag finish via keyboard

    if (source === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.SOURCES.KEYBOARD && trigger === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.TRIGGERS.DRAG_STOPPED) {
      $$invalidate(2, dragDisabled = true);
    }
  }

  function handleFinalize(e) {
    const {
      items: newItems,
      info: {
        source
      }
    } = e.detail;
    $$invalidate(1, years = newItems); // Ensure dragging is stopped on drag finish via pointer (mouse, touch)

    if (source === svelte_dnd_action__WEBPACK_IMPORTED_MODULE_3__.SOURCES.POINTER) {
      $$invalidate(2, dragDisabled = true);
    }
  }

  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();

  $$self.$$set = $$props => {
    if ('useCustomYears' in $$props) $$invalidate(0, useCustomYears = $$props.useCustomYears);
    if ('years' in $$props) $$invalidate(1, years = $$props.years);
    if ('app' in $$props) $$invalidate(11, app = $$props.app);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*years*/
    2) {
      $: {
        dispatch("years-update", years);
      } //TODO: add new days to dropdown, remove removed days from dropdown

    }

    if ($$self.$$.dirty &
    /*useCustomYears*/
    1) {
      $: {
        dispatch("use-custom-update", useCustomYears);
      }
    }
  };

  return [useCustomYears, years, dragDisabled, addNew, grip, trash, name, customNode, startDrag, handleConsider, handleFinalize, app];
}

class Year extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      useCustomYears: 0,
      years: 1,
      app: 11
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Year);

/***/ }),

/***/ "./src/view/ui/Calendar.svelte":
/*!*************************************!*\
  !*** ./src/view/ui/Calendar.svelte ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var svelte_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte/store */ "./node_modules/svelte/store/index.mjs");
/* harmony import */ var _DayView_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DayView.svelte */ "./src/view/ui/DayView.svelte");
/* harmony import */ var _Month_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Month.svelte */ "./src/view/ui/Month.svelte");
/* harmony import */ var _Nav_svelte__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Nav.svelte */ "./src/view/ui/Nav.svelte");
/* harmony import */ var _YearView_svelte__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./YearView.svelte */ "./src/view/ui/YearView.svelte");
/* harmony import */ var _YearViewBig_svelte__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./YearViewBig.svelte */ "./src/view/ui/YearViewBig.svelte");
/* src\view\ui\Calendar.svelte generated by Svelte v3.44.3 */









function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1kty1w6", "#calendar-container.year-view.svelte-1kty1w6.svelte-1kty1w6{height:100%}#calendar-container.fantasy-calendar.full-view.svelte-1kty1w6.svelte-1kty1w6{width:100%;padding:0 0.5rem 0.5rem;height:100%;display:flex;flex-flow:column}.fantasy-calendar.full-view.svelte-1kty1w6 .month-container.svelte-1kty1w6{height:100%}.month-container.svelte-1kty1w6.svelte-1kty1w6{display:flex}.month-view.svelte-1kty1w6.svelte-1kty1w6{flex-grow:2}.weeks.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-rows:auto 1fr}.week-num-container.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-rows:repeat(var(--calendar-rows), auto);padding:0.25rem 0}.week-num.svelte-1kty1w6.svelte-1kty1w6{background-color:transparent;border:2px solid transparent;border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:2px;position:relative;text-align:center;vertical-align:baseline;overflow:visible}.weekdays.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-columns:repeat(var(--calendar-columns), 1fr);grid-template-rows:auto;padding:0 0.25rem;gap:2px}.weekday.svelte-1kty1w6.svelte-1kty1w6{background-color:var(--color-background-heading);color:var(--color-text-heading);font-size:0.6em;letter-spacing:1px;padding:4px;text-transform:uppercase;text-align:center;border:2px solid transparent}hr.svelte-1kty1w6.svelte-1kty1w6{margin:1rem 0}.moon-container{display:flex;flex-flow:row wrap;align-items:center;justify-content:center}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[50] = list[i];
  return child_ctx;
}

function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[53] = list[i];
  return child_ctx;
} // (88:4) {:else}


function create_else_block(ctx) {
  let nav;
  let t0;
  let div3;
  let div0;
  let t1;
  let div2;
  let div1;
  let t2;
  let monthview;
  let current;
  nav = new _Nav_svelte__WEBPACK_IMPORTED_MODULE_5__["default"]({
    props: {
      month:
      /*month*/
      ctx[6].name,
      year:
      /*yearDisplay*/
      ctx[9],
      current:
      /*calendar*/
      ctx[3].displayedDate
    }
  });
  nav.$on("next",
  /*next_handler_2*/
  ctx[31]);
  nav.$on("previous",
  /*previous_handler_2*/
  ctx[32]);
  nav.$on("reset",
  /*reset_handler_2*/
  ctx[33]);
  nav.$on("settings",
  /*settings_handler_2*/
  ctx[34]);
  let if_block =
  /*displayWeeks*/
  ctx[5] && create_if_block_3(ctx);
  let each_value =
  /*weekdays*/
  ctx[11];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  monthview = new _Month_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
    props: {
      columns:
      /*weekdays*/
      ctx[11].length,
      weeks:
      /*weeks*/
      ctx[7],
      month:
      /*month*/
      ctx[6],
      fullView:
      /*fullView*/
      ctx[1]
    }
  });
  monthview.$on("day-click",
  /*day_click_handler_2*/
  ctx[35]);
  monthview.$on("day-doubleclick",
  /*day_doubleclick_handler_2*/
  ctx[36]);
  monthview.$on("day-context-menu",
  /*day_context_menu_handler_2*/
  ctx[37]);
  monthview.$on("event-click",
  /*event_click_handler_2*/
  ctx[38]);
  monthview.$on("event-mouseover",
  /*event_mouseover_handler_2*/
  ctx[39]);
  monthview.$on("event-context",
  /*event_context_handler*/
  ctx[40]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(nav.$$.fragment);
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if (if_block) if_block.c();
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(monthview.$$.fragment);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "weeks svelte-1kty1w6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "weekdays svelte-1kty1w6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "month-view svelte-1kty1w6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "month-container svelte-1kty1w6");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(nav, target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, t0, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div3, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div0);
      if (if_block) if_block.m(div0, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div1);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div1, null);
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(monthview, div2, null);
      current = true;
    },

    p(ctx, dirty) {
      const nav_changes = {};
      if (dirty[0] &
      /*month*/
      64) nav_changes.month =
      /*month*/
      ctx[6].name;
      if (dirty[0] &
      /*yearDisplay*/
      512) nav_changes.year =
      /*yearDisplay*/
      ctx[9];
      if (dirty[0] &
      /*calendar*/
      8) nav_changes.current =
      /*calendar*/
      ctx[3].displayedDate;
      nav.$set(nav_changes);

      if (
      /*displayWeeks*/
      ctx[5]) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_3(ctx);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }

      if (dirty[0] &
      /*weekdays*/
      2048) {
        each_value =
        /*weekdays*/
        ctx[11];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value.length;
      }

      const monthview_changes = {};
      if (dirty[0] &
      /*weekdays*/
      2048) monthview_changes.columns =
      /*weekdays*/
      ctx[11].length;
      if (dirty[0] &
      /*weeks*/
      128) monthview_changes.weeks =
      /*weeks*/
      ctx[7];
      if (dirty[0] &
      /*month*/
      64) monthview_changes.month =
      /*month*/
      ctx[6];
      if (dirty[0] &
      /*fullView*/
      2) monthview_changes.fullView =
      /*fullView*/
      ctx[1];
      monthview.$set(monthview_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(nav.$$.fragment, local);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(monthview.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(nav.$$.fragment, local);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(monthview.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(nav, detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(t0);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div3);
      if (if_block) if_block.d();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(monthview);
    }

  };
} // (73:23) 


function create_if_block_2(ctx) {
  let yearviewbig;
  let current;
  yearviewbig = new _YearViewBig_svelte__WEBPACK_IMPORTED_MODULE_7__["default"]({
    props: {
      year:
      /*year*/
      ctx[10],
      columns:
      /*weekdays*/
      ctx[11].length,
      current:
      /*calendar*/
      ctx[3].displayedDate
    }
  });
  yearviewbig.$on("next",
  /*next_handler_1*/
  ctx[22]);
  yearviewbig.$on("previous",
  /*previous_handler_1*/
  ctx[23]);
  yearviewbig.$on("reset",
  /*reset_handler_1*/
  ctx[24]);
  yearviewbig.$on("settings",
  /*settings_handler_1*/
  ctx[25]);
  yearviewbig.$on("day-click",
  /*day_click_handler_1*/
  ctx[26]);
  yearviewbig.$on("day-doubleclick",
  /*day_doubleclick_handler_1*/
  ctx[27]);
  yearviewbig.$on("day-context-menu",
  /*day_context_menu_handler_1*/
  ctx[28]);
  yearviewbig.$on("event-click",
  /*event_click_handler_1*/
  ctx[29]);
  yearviewbig.$on("event-mouseover",
  /*event_mouseover_handler_1*/
  ctx[30]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(yearviewbig.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(yearviewbig, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const yearviewbig_changes = {};
      if (dirty[0] &
      /*year*/
      1024) yearviewbig_changes.year =
      /*year*/
      ctx[10];
      if (dirty[0] &
      /*weekdays*/
      2048) yearviewbig_changes.columns =
      /*weekdays*/
      ctx[11].length;
      if (dirty[0] &
      /*calendar*/
      8) yearviewbig_changes.current =
      /*calendar*/
      ctx[3].displayedDate;
      yearviewbig.$set(yearviewbig_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(yearviewbig.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(yearviewbig.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(yearviewbig, detaching);
    }

  };
} // (57:4) {#if yearView && !fullView}


function create_if_block_1(ctx) {
  let yearview;
  let current;
  yearview = new _YearView_svelte__WEBPACK_IMPORTED_MODULE_6__["default"]({
    props: {
      year:
      /*year*/
      ctx[10],
      fullView:
      /*fullView*/
      ctx[1],
      columns:
      /*weekdays*/
      ctx[11].length,
      current:
      /*calendar*/
      ctx[3].displayedDate
    }
  });
  yearview.$on("next",
  /*next_handler*/
  ctx[13]);
  yearview.$on("previous",
  /*previous_handler*/
  ctx[14]);
  yearview.$on("reset",
  /*reset_handler*/
  ctx[15]);
  yearview.$on("settings",
  /*settings_handler*/
  ctx[16]);
  yearview.$on("day-click",
  /*day_click_handler*/
  ctx[17]);
  yearview.$on("day-doubleclick",
  /*day_doubleclick_handler*/
  ctx[18]);
  yearview.$on("day-context-menu",
  /*day_context_menu_handler*/
  ctx[19]);
  yearview.$on("event-click",
  /*event_click_handler*/
  ctx[20]);
  yearview.$on("event-mouseover",
  /*event_mouseover_handler*/
  ctx[21]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(yearview.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(yearview, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const yearview_changes = {};
      if (dirty[0] &
      /*year*/
      1024) yearview_changes.year =
      /*year*/
      ctx[10];
      if (dirty[0] &
      /*fullView*/
      2) yearview_changes.fullView =
      /*fullView*/
      ctx[1];
      if (dirty[0] &
      /*weekdays*/
      2048) yearview_changes.columns =
      /*weekdays*/
      ctx[11].length;
      if (dirty[0] &
      /*calendar*/
      8) yearview_changes.current =
      /*calendar*/
      ctx[3].displayedDate;
      yearview.$set(yearview_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(yearview.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(yearview.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(yearview, detaching);
    }

  };
} // (100:16) {#if displayWeeks}


function create_if_block_3(ctx) {
  let span;
  let t1;
  let div;
  let each_value_1 = [...Array(
  /*weeks*/
  ctx[7]).keys()];
  let each_blocks = [];

  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }

  return {
    c() {
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      span.textContent = "W";
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "week-num weekday fantasy-weekday svelte-1kty1w6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "week-num-container svelte-1kty1w6");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, span, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, t1, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },

    p(ctx, dirty) {
      if (dirty[0] &
      /*firstWeek, weeks*/
      384) {
        each_value_1 = [...Array(
        /*weeks*/
        ctx[7]).keys()];
        let i;

        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx, each_value_1, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value_1.length;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(span);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(t1);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (103:24) {#each [...Array(weeks).keys()] as num}


function create_each_block_1(ctx) {
  let span;
  let t_value =
  /*firstWeek*/
  ctx[8] + 1 +
  /*num*/
  ctx[53] + "";
  let t;
  return {
    c() {
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t_value);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "week-num svelte-1kty1w6");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, span, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t);
    },

    p(ctx, dirty) {
      if (dirty[0] &
      /*firstWeek, weeks*/
      384 && t_value !== (t_value =
      /*firstWeek*/
      ctx[8] + 1 +
      /*num*/
      ctx[53] + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t, t_value);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(span);
    }

  };
} // (112:20) {#each weekdays as day}


function create_each_block(ctx) {
  let span;
  let t_value =
  /*day*/
  ctx[50].name.slice(0, 3) + "";
  let t;
  return {
    c() {
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t_value);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "weekday fantasy-weekday svelte-1kty1w6");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, span, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t);
    },

    p(ctx, dirty) {
      if (dirty[0] &
      /*weekdays*/
      2048 && t_value !== (t_value =
      /*day*/
      ctx[50].name.slice(0, 3) + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t, t_value);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(span);
    }

  };
} // (136:0) {#if dayView && !fullView}


function create_if_block(ctx) {
  let hr;
  let t;
  let dayview;
  let current;
  dayview = new _DayView_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      displayDayNumber:
      /*displayDayNumber*/
      ctx[4]
    }
  });
  dayview.$on("close",
  /*close_handler*/
  ctx[41]);
  dayview.$on("event-click",
  /*event_click_handler_3*/
  ctx[42]);
  dayview.$on("event-mouseover",
  /*event_mouseover_handler_3*/
  ctx[43]);
  dayview.$on("event-context",
  /*event_context_handler_1*/
  ctx[44]);
  dayview.$on("event",
  /*event_handler*/
  ctx[45]);
  return {
    c() {
      hr = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("hr");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(dayview.$$.fragment);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(hr, "class", "svelte-1kty1w6");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, hr, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, t, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(dayview, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const dayview_changes = {};
      if (dirty[0] &
      /*displayDayNumber*/
      16) dayview_changes.displayDayNumber =
      /*displayDayNumber*/
      ctx[4];
      dayview.$set(dayview_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(dayview.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(dayview.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(hr);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(t);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(dayview, detaching);
    }

  };
}

function create_fragment(ctx) {
  let div;
  let current_block_type_index;
  let if_block0;
  let t;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_1, create_if_block_2, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*yearView*/
    ctx[2] && !
    /*fullView*/
    ctx[1]) return 0;
    if (
    /*yearView*/
    ctx[2]) return 1;
    return 2;
  }

  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 =
  /*dayView*/
  ctx[0] && !
  /*fullView*/
  ctx[1] && create_if_block(ctx);
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if_block0.c();
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (if_block1) if_block1.c();
      if_block1_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "id", "calendar-container");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "fantasy-calendar svelte-1kty1w6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-columns",
      /*calendar*/
      ctx[3].weekdays.length);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--column-widths", 1 /
      /*calendar*/
      ctx[3].weekdays.length * 100 + "%");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-rows",
      /*calendar*/
      ctx[3].weeksPerCurrentMonth);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
      /*fullView*/
      ctx[1]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "year-view",
      /*yearView*/
      ctx[2]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, t, anchor);
      if (if_block1) if_block1.m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block1_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block0 = if_blocks[current_block_type_index];

        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block0.c();
        } else {
          if_block0.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block0, 1);
        if_block0.m(div, null);
      }

      if (!current || dirty[0] &
      /*calendar*/
      8) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-columns",
        /*calendar*/
        ctx[3].weekdays.length);
      }

      if (!current || dirty[0] &
      /*calendar*/
      8) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--column-widths", 1 /
        /*calendar*/
        ctx[3].weekdays.length * 100 + "%");
      }

      if (!current || dirty[0] &
      /*calendar*/
      8) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-rows",
        /*calendar*/
        ctx[3].weeksPerCurrentMonth);
      }

      if (dirty[0] &
      /*fullView*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
        /*fullView*/
        ctx[1]);
      }

      if (dirty[0] &
      /*yearView*/
      4) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "year-view",
        /*yearView*/
        ctx[2]);
      }

      if (
      /*dayView*/
      ctx[0] && !
      /*fullView*/
      ctx[1]) {
        if (if_block1) {
          if_block1.p(ctx, dirty);

          if (dirty[0] &
          /*dayView, fullView*/
          3) {
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx);
          if_block1.c();
          (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block1);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block1);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      if_blocks[current_block_type_index].d();
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(t);
      if (if_block1) if_block1.d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block1_anchor);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let weekdays;
  let year;
  let yearDisplay;
  let month;
  let firstWeek;
  let weeks;
  let dayNumber;
  let {
    fullView = false
  } = $$props;
  let {
    dayView = false
  } = $$props;
  let {
    yearView = false
  } = $$props;
  let {
    calendar
  } = $$props;
  let {
    moons
  } = $$props;
  let {
    displayDayNumber
  } = $$props;
  let {
    displayWeeks
  } = $$props;
  const dayViewStore = (0,svelte_store__WEBPACK_IMPORTED_MODULE_2__.writable)(dayView);
  const moonStore = (0,svelte_store__WEBPACK_IMPORTED_MODULE_2__.writable)(moons);
  const calendarStore = (0,svelte_store__WEBPACK_IMPORTED_MODULE_2__.writable)(calendar);
  (0,svelte__WEBPACK_IMPORTED_MODULE_1__.setContext)("dayView", dayViewStore);
  (0,svelte__WEBPACK_IMPORTED_MODULE_1__.setContext)("displayMoons", moonStore);
  (0,svelte__WEBPACK_IMPORTED_MODULE_1__.setContext)("calendar", calendarStore);
  calendar.on("month-update", () => {
    $$invalidate(10, year = calendar.displayed.year);
    $$invalidate(9, yearDisplay = calendar.getNameForYear(calendar.displayed.year));
    $$invalidate(6, month = calendar.currentMonth);
    $$invalidate(7, weeks = calendar.weeksOfMonth(month));
    $$invalidate(8, firstWeek = calendar.weekNumbersOfMonth(month));
    dayNumber = calendar.dayNumberForDate(calendar.current);
  });
  calendar.on("day-update", () => {
    dayNumber = calendar.dayNumberForDate(calendar.current);
  });

  const next_handler = () => calendar.goToNextYear();

  const previous_handler = () => calendar.goToPreviousYear();

  function reset_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function settings_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_doubleclick_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_context_menu_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  const next_handler_1 = () => calendar.goToNextYear();

  const previous_handler_1 = () => calendar.goToPreviousYear();

  function reset_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function settings_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_click_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_doubleclick_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_context_menu_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_click_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  const next_handler_2 = () => calendar.goToNext();

  const previous_handler_2 = () => calendar.goToPrevious();

  function reset_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function settings_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_click_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_doubleclick_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_context_menu_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_click_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler_2(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_context_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  const close_handler = () => $$invalidate(0, dayView = false);

  function event_click_handler_3(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler_3(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_context_handler_1(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('fullView' in $$props) $$invalidate(1, fullView = $$props.fullView);
    if ('dayView' in $$props) $$invalidate(0, dayView = $$props.dayView);
    if ('yearView' in $$props) $$invalidate(2, yearView = $$props.yearView);
    if ('calendar' in $$props) $$invalidate(3, calendar = $$props.calendar);
    if ('moons' in $$props) $$invalidate(12, moons = $$props.moons);
    if ('displayDayNumber' in $$props) $$invalidate(4, displayDayNumber = $$props.displayDayNumber);
    if ('displayWeeks' in $$props) $$invalidate(5, displayWeeks = $$props.displayWeeks);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] &
    /*yearView*/
    4) {
      $: {
        if (yearView) $$invalidate(0, dayView = false);
      }
    }

    if ($$self.$$.dirty[0] &
    /*dayView*/
    1) {
      $: dayViewStore.set(dayView);
    }

    if ($$self.$$.dirty[0] &
    /*moons*/
    4096) {
      $: moonStore.set(moons);
    }

    if ($$self.$$.dirty[0] &
    /*calendar*/
    8) {
      $: calendarStore.set(calendar);
    }

    if ($$self.$$.dirty[0] &
    /*calendar*/
    8) {
      $: $$invalidate(11, weekdays = calendar.weekdays);
    }

    if ($$self.$$.dirty[0] &
    /*calendar*/
    8) {
      $: $$invalidate(10, year = calendar.displayed.year);
    }

    if ($$self.$$.dirty[0] &
    /*calendar*/
    8) {
      $: $$invalidate(9, yearDisplay = calendar.getNameForYear(calendar.displayed.year));
    }

    if ($$self.$$.dirty[0] &
    /*calendar*/
    8) {
      $: $$invalidate(6, month = calendar.currentMonth);
    }

    if ($$self.$$.dirty[0] &
    /*calendar, month*/
    72) {
      $: $$invalidate(8, firstWeek = calendar.weekNumbersOfMonth(month));
    }

    if ($$self.$$.dirty[0] &
    /*calendar, month*/
    72) {
      $: $$invalidate(7, weeks = calendar.weeksOfMonth(month));
    }

    if ($$self.$$.dirty[0] &
    /*calendar*/
    8) {
      $: dayNumber = calendar.dayNumberForDate(calendar.current);
    }
  };

  return [dayView, fullView, yearView, calendar, displayDayNumber, displayWeeks, month, weeks, firstWeek, yearDisplay, year, weekdays, moons, next_handler, previous_handler, reset_handler, settings_handler, day_click_handler, day_doubleclick_handler, day_context_menu_handler, event_click_handler, event_mouseover_handler, next_handler_1, previous_handler_1, reset_handler_1, settings_handler_1, day_click_handler_1, day_doubleclick_handler_1, day_context_menu_handler_1, event_click_handler_1, event_mouseover_handler_1, next_handler_2, previous_handler_2, reset_handler_2, settings_handler_2, day_click_handler_2, day_doubleclick_handler_2, day_context_menu_handler_2, event_click_handler_2, event_mouseover_handler_2, event_context_handler, close_handler, event_click_handler_3, event_mouseover_handler_3, event_context_handler_1, event_handler];
}

class Calendar extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      fullView: 1,
      dayView: 0,
      yearView: 2,
      calendar: 3,
      moons: 12,
      displayDayNumber: 4,
      displayWeeks: 5
    }, add_css, [-1, -1]);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Calendar);

/***/ }),

/***/ "./src/view/ui/Day.svelte":
/*!********************************!*\
  !*** ./src/view/ui/Day.svelte ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var _Dots_svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dots.svelte */ "./src/view/ui/Dots.svelte");
/* harmony import */ var _Moon_svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Moon.svelte */ "./src/view/ui/Moon.svelte");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _Flags_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Flags.svelte */ "./src/view/ui/Flags.svelte");
/* src\view\ui\Day.svelte generated by Svelte v3.44.3 */






function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-3pptg2", ".day.svelte-3pptg2{background-color:transparent;border:2px solid transparent;border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:2px;position:relative;text-align:center;vertical-align:baseline;overflow:visible;display:flex;flex-flow:column nowrap}.active.svelte-3pptg2{background-color:var(--background-secondary)}.viewing.svelte-3pptg2{border:2px solid var(--background-modifier-border)}.adjacent-month.svelte-3pptg2{opacity:0.25}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i][0];
  child_ctx[21] = list[i][1];
  return child_ctx;
} // (70:4) {:else}


function create_else_block(ctx) {
  let dots;
  let current;
  dots = new _Dots_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
    props: {
      events:
      /*events*/
      ctx[4],
      categories:
      /*categories*/
      ctx[9],
      calendar:
      /*day*/
      ctx[0].calendar
    }
  });
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(dots.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(dots, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const dots_changes = {};
      if (dirty &
      /*events*/
      16) dots_changes.events =
      /*events*/
      ctx[4];
      if (dirty &
      /*categories*/
      512) dots_changes.categories =
      /*categories*/
      ctx[9];
      if (dirty &
      /*day*/
      1) dots_changes.calendar =
      /*day*/
      ctx[0].calendar;
      dots.$set(dots_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(dots.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(dots.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(dots, detaching);
    }

  };
} // (53:4) {#if fullView}


function create_if_block(ctx) {
  let t;
  let flags;
  let current;
  let if_block =
  /*displayMoons*/
  ctx[5] &&
  /*moons*/
  ctx[10] &&
  /*moons*/
  ctx[10].length && create_if_block_1(ctx);
  flags = new _Flags_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
    props: {
      events:
      /*events*/
      ctx[4],
      categories:
      /*categories*/
      ctx[9],
      date:
      /*date*/
      ctx[8],
      calendar:
      /*day*/
      ctx[0].calendar
    }
  });
  flags.$on("event-click",
  /*event_click_handler*/
  ctx[12]);
  flags.$on("event-mouseover",
  /*event_mouseover_handler*/
  ctx[13]);
  flags.$on("event-context",
  /*event_context_handler*/
  ctx[14]);
  return {
    c() {
      if (if_block) if_block.c();
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(flags.$$.fragment);
    },

    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, t, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(flags, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      if (
      /*displayMoons*/
      ctx[5] &&
      /*moons*/
      ctx[10] &&
      /*moons*/
      ctx[10].length) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*displayMoons, moons*/
          1056) {
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block_1(ctx);
          if_block.c();
          (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      const flags_changes = {};
      if (dirty &
      /*events*/
      16) flags_changes.events =
      /*events*/
      ctx[4];
      if (dirty &
      /*categories*/
      512) flags_changes.categories =
      /*categories*/
      ctx[9];
      if (dirty &
      /*date*/
      256) flags_changes.date =
      /*date*/
      ctx[8];
      if (dirty &
      /*day*/
      1) flags_changes.calendar =
      /*day*/
      ctx[0].calendar;
      flags.$set(flags_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(flags.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(flags.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(t);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(flags, detaching);
    }

  };
} // (54:8) {#if displayMoons && moons && moons.length}


function create_if_block_1(ctx) {
  let div;
  let current;
  let each_value =
  /*moons*/
  ctx[10];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "moon-container");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*moons*/
      1024) {
        each_value =
        /*moons*/
        ctx[10];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (56:16) {#each moons as [moon, phase]}


function create_each_block(ctx) {
  let moon;
  let current;
  moon = new _Moon_svelte__WEBPACK_IMPORTED_MODULE_2__["default"]({
    props: {
      moon:
      /*moon*/
      ctx[20],
      phase:
      /*phase*/
      ctx[21]
    }
  });
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(moon.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(moon, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const moon_changes = {};
      if (dirty &
      /*moons*/
      1024) moon_changes.moon =
      /*moon*/
      ctx[20];
      if (dirty &
      /*moons*/
      1024) moon_changes.phase =
      /*phase*/
      ctx[21];
      moon.$set(moon_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(moon.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(moon.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(moon, detaching);
    }

  };
}

function create_fragment(ctx) {
  let div;
  let span;
  let t0_value =
  /*day*/
  ctx[0].number + "";
  let t0;
  let t1;
  let current_block_type_index;
  let if_block;
  let div_class_value;
  let div_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*fullView*/
    ctx[2]) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t0_value);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if_block.c();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", div_class_value = "" + ((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.null_to_empty)(
      /*adjacent*/
      ctx[1] ? "adjacent-month fantasy-adjacent-month" : "") + " svelte-3pptg2"));
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "aria-label", div_aria_label_value = !
      /*fullView*/
      ctx[2] &&
      /*day*/
      ctx[0].events.length ? `${
      /*day*/
      ctx[0].events.length} event${
      /*day*/
      ctx[0].events.length == 1 ? "" : "s"}` : undefined);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "day", true);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "fantasy-day", true);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "active",
      /*today*/
      ctx[7] && !
      /*adjacent*/
      ctx[1]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "viewing",
      /*dayView*/
      ctx[3] &&
      /*displaying*/
      ctx[6] && !
      /*adjacent*/
      ctx[1]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div, span);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div, t1);
      if_blocks[current_block_type_index].m(div, null);
      current = true;

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "click",
        /*click_handler*/
        ctx[15]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "dblclick",
        /*dblclick_handler*/
        ctx[16]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "contextmenu",
        /*contextmenu_handler*/
        ctx[17])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if ((!current || dirty &
      /*day*/
      1) && t0_value !== (t0_value =
      /*day*/
      ctx[0].number + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t0, t0_value);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(div, null);
      }

      if (!current || dirty &
      /*adjacent*/
      2 && div_class_value !== (div_class_value = "" + ((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.null_to_empty)(
      /*adjacent*/
      ctx[1] ? "adjacent-month fantasy-adjacent-month" : "") + " svelte-3pptg2"))) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", div_class_value);
      }

      if (!current || dirty &
      /*fullView, day*/
      5 && div_aria_label_value !== (div_aria_label_value = !
      /*fullView*/
      ctx[2] &&
      /*day*/
      ctx[0].events.length ? `${
      /*day*/
      ctx[0].events.length} event${
      /*day*/
      ctx[0].events.length == 1 ? "" : "s"}` : undefined)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "aria-label", div_aria_label_value);
      }

      if (dirty &
      /*adjacent*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "day", true);
      }

      if (dirty &
      /*adjacent*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "fantasy-day", true);
      }

      if (dirty &
      /*adjacent, today, adjacent*/
      130) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "active",
        /*today*/
        ctx[7] && !
        /*adjacent*/
        ctx[1]);
      }

      if (dirty &
      /*adjacent, dayView, displaying, adjacent*/
      74) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "viewing",
        /*dayView*/
        ctx[3] &&
        /*displaying*/
        ctx[6] && !
        /*adjacent*/
        ctx[1]);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      if_blocks[current_block_type_index].d();
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let moons;
  let categories;
  let date;
  let today;
  let displaying;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_3__.createEventDispatcher)();
  let {
    day
  } = $$props;
  let {
    adjacent
  } = $$props;
  let {
    fullView
  } = $$props;
  let events = [];
  let dayView;
  const dayViewStore = (0,svelte__WEBPACK_IMPORTED_MODULE_3__.getContext)("dayView");
  dayViewStore.subscribe(v => $$invalidate(3, dayView = v));
  let displayMoons;
  const moonStore = (0,svelte__WEBPACK_IMPORTED_MODULE_3__.getContext)("displayMoons");
  moonStore.subscribe(v => $$invalidate(5, displayMoons = v));
  day.calendar.on("month-update", () => {
    $$invalidate(7, today = day.isCurrentDay);
    $$invalidate(6, displaying = day.isDisplaying);
  });
  day.calendar.on("day-update", () => {
    $$invalidate(7, today = day.isCurrentDay);
    $$invalidate(6, displaying = day.isDisplaying);
  });

  function event_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_context_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  const click_handler = () => dispatch("day-click", day);

  const dblclick_handler = () => dispatch("day-doubleclick", day);

  const contextmenu_handler = evt => dispatch("day-context-menu", {
    day,
    evt
  });

  $$self.$$set = $$props => {
    if ('day' in $$props) $$invalidate(0, day = $$props.day);
    if ('adjacent' in $$props) $$invalidate(1, adjacent = $$props.adjacent);
    if ('fullView' in $$props) $$invalidate(2, fullView = $$props.fullView);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*adjacent, day*/
    3) {
      $: {
        if (!adjacent) {
          $$invalidate(4, events = day.events);
        }
      }
    }

    if ($$self.$$.dirty &
    /*day*/
    1) {
      $: $$invalidate(10, moons = day.moons);
    }

    if ($$self.$$.dirty &
    /*day*/
    1) {
      $: $$invalidate(9, categories = day.calendar.object.categories);
    }

    if ($$self.$$.dirty &
    /*day*/
    1) {
      $: $$invalidate(8, date = day.date);
    }

    if ($$self.$$.dirty &
    /*day*/
    1) {
      $: $$invalidate(7, today = day.isCurrentDay);
    }

    if ($$self.$$.dirty &
    /*day*/
    1) {
      $: $$invalidate(6, displaying = day.isDisplaying);
    }

    if ($$self.$$.dirty &
    /*dayView*/
    8) {
      $: $$invalidate(3, dayView);
    }
  };

  return [day, adjacent, fullView, dayView, events, displayMoons, displaying, today, date, categories, moons, dispatch, event_click_handler, event_mouseover_handler, event_context_handler, click_handler, dblclick_handler, contextmenu_handler];
}

class Day extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      day: 0,
      adjacent: 1,
      fullView: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Day);

/***/ }),

/***/ "./src/view/ui/DayView.svelte":
/*!************************************!*\
  !*** ./src/view/ui/DayView.svelte ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _Flags_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Flags.svelte */ "./src/view/ui/Flags.svelte");
/* harmony import */ var _Moon_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Moon.svelte */ "./src/view/ui/Moon.svelte");
/* src\view\ui\DayView.svelte generated by Svelte v3.44.3 */






function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1uhffao", ".day-view.svelte-1uhffao{padding:5px 15px;display:flex;flex-flow:column nowrap;gap:0.5rem}.nav.svelte-1uhffao,.date.svelte-1uhffao{display:flex;justify-content:space-between;align-items:center}.left-nav.svelte-1uhffao{display:flex}.left-nav.svelte-1uhffao .clickable-icon{margin-right:0}.calendar-clickable.svelte-1uhffao{align-items:center;cursor:pointer;display:flex;justify-content:center}h3.svelte-1uhffao{margin:0}.day-view.svelte-1uhffao .flag-container > .flag{padding-left:0.5rem}.title-container.svelte-1uhffao{display:flex;flex-flow:column nowrap;align-items:center;justify-content:center}.day-number.svelte-1uhffao{font-size:small}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i][0];
  child_ctx[25] = list[i][1];
  return child_ctx;
} // (72:12) {#if displayDayNumber}


function create_if_block_1(ctx) {
  let div;
  let em;
  let t0;
  let t1;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      em = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("em");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)("Day ");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*dayNumber*/
      ctx[8]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "day-number svelte-1uhffao");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div, em);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(em, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(em, t1);
    },

    p(ctx, dirty) {
      if (dirty &
      /*dayNumber*/
      256) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t1,
      /*dayNumber*/
      ctx[8]);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (87:4) {#if displayMoons && moons && moons.length}


function create_if_block(ctx) {
  let div;
  let current;
  let each_value =
  /*moons*/
  ctx[4];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "moon-container");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*moons*/
      16) {
        each_value =
        /*moons*/
        ctx[4];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
} // (89:12) {#each moons as [moon, phase]}


function create_each_block(ctx) {
  let moon;
  let current;
  moon = new _Moon_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
    props: {
      moon:
      /*moon*/
      ctx[24],
      phase:
      /*phase*/
      ctx[25]
    }
  });
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(moon.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(moon, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const moon_changes = {};
      if (dirty &
      /*moons*/
      16) moon_changes.moon =
      /*moon*/
      ctx[24];
      if (dirty &
      /*moons*/
      16) moon_changes.phase =
      /*phase*/
      ctx[25];
      moon.$set(moon_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(moon.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(moon.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(moon, detaching);
    }

  };
}

function create_fragment(ctx) {
  let div9;
  let div4;
  let div2;
  let div0;
  let reveal_action;
  let t0;
  let div1;
  let event_action;
  let t1;
  let div3;
  let close_action;
  let t2;
  let div8;
  let div5;
  let left_action;
  let t3;
  let div6;
  let h3;
  let span;
  let t4;
  let t5;
  let t6;
  let div7;
  let right_action;
  let t7;
  let t8;
  let flags;
  let current;
  let mounted;
  let dispose;
  let if_block0 =
  /*displayDayNumber*/
  ctx[0] && create_if_block_1(ctx);
  let if_block1 =
  /*displayMoons*/
  ctx[3] &&
  /*moons*/
  ctx[4] &&
  /*moons*/
  ctx[4].length && create_if_block(ctx);
  flags = new _Flags_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      events:
      /*events*/
      ctx[5],
      categories:
      /*categories*/
      ctx[7],
      date:
      /*date*/
      ctx[2],
      dayView: true,
      calendar:
      /*calendar*/
      ctx[1]
    }
  });
  flags.$on("event-click",
  /*event_click_handler*/
  ctx[19]);
  flags.$on("event-mouseover",
  /*event_mouseover_handler*/
  ctx[20]);
  flags.$on("event-context",
  /*event_context_handler*/
  ctx[21]);
  return {
    c() {
      div9 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div8 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      h3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("h3");
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*currentDate*/
      ctx[6]);
      t5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (if_block0) if_block0.c();
      t6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div7 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t7 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (if_block1) if_block1.c();
      t8 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(flags.$$.fragment);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "left-nav svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "nav svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "arrow calendar-clickable svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "aria-label", "Previous");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "current");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(h3, "class", "fantasy-title title svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div6, "class", "title-container svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div7, "class", "arrow right calendar-clickable svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div7, "aria-label", "Next");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div8, "class", "date svelte-1uhffao");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div9, "class", "day-view svelte-1uhffao");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div9, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div9, div4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div9, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div9, div8);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div8, div5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div8, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div8, div6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, h3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h3, span);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, t5);
      if (if_block0) if_block0.m(div6, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div8, t6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div8, div7);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div9, t7);
      if (if_block1) if_block1.m(div9, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div9, t8);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(flags, div9, null);
      current = true;

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(reveal_action =
        /*reveal*/
        ctx[11].call(null, div0)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "click",
        /*click_handler*/
        ctx[15]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(event_action =
        /*event*/
        ctx[12].call(null, div1)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(close_action =
        /*close*/
        ctx[10].call(null, div3)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div3, "click",
        /*click_handler_1*/
        ctx[16]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(left_action =
        /*left*/
        ctx[13].call(null, div5)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div5, "click",
        /*click_handler_2*/
        ctx[17]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(right_action =
        /*right*/
        ctx[14].call(null, div7)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div7, "click",
        /*click_handler_3*/
        ctx[18])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (!current || dirty &
      /*currentDate*/
      64) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t4,
      /*currentDate*/
      ctx[6]);

      if (
      /*displayDayNumber*/
      ctx[0]) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_1(ctx);
          if_block0.c();
          if_block0.m(div6, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }

      if (
      /*displayMoons*/
      ctx[3] &&
      /*moons*/
      ctx[4] &&
      /*moons*/
      ctx[4].length) {
        if (if_block1) {
          if_block1.p(ctx, dirty);

          if (dirty &
          /*displayMoons, moons*/
          24) {
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx);
          if_block1.c();
          (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block1, 1);
          if_block1.m(div9, t8);
        }
      } else if (if_block1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      const flags_changes = {};
      if (dirty &
      /*events*/
      32) flags_changes.events =
      /*events*/
      ctx[5];
      if (dirty &
      /*categories*/
      128) flags_changes.categories =
      /*categories*/
      ctx[7];
      if (dirty &
      /*date*/
      4) flags_changes.date =
      /*date*/
      ctx[2];
      if (dirty &
      /*calendar*/
      2) flags_changes.calendar =
      /*calendar*/
      ctx[1];
      flags.$set(flags_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(flags.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(flags.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div9);
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(flags);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let currentDate;
  let date;
  let dayNumber;
  let events;
  let moons;
  let categories;
  let {
    displayDayNumber
  } = $$props;
  const calendarStore = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.getContext)("calendar");
  let calendar;
  calendarStore.subscribe(c => {
    $$invalidate(1, calendar = c);
  });
  let displayMoons;
  const moonStore = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.getContext)("displayMoons");
  moonStore.subscribe(v => $$invalidate(3, displayMoons = v));
  calendar.on("day-update", () => {
    $$invalidate(2, date = calendar.viewing);
    $$invalidate(6, currentDate = calendar.viewedDate);
    $$invalidate(5, events = calendar.getEventsOnDate(calendar.viewing));
    $$invalidate(4, moons = calendar.getMoonsForDate(calendar.viewing));
  });
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();

  const close = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("cross").setTooltip("Close");
  };

  const reveal = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("fantasy-calendar-reveal").setTooltip("Show on Calendar").onClick(() => {
      $$invalidate(1, calendar.displayed.year = calendar.viewing.year, calendar);
      calendar.setCurrentMonth(calendar.viewing.month);
    });
  };

  const event = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("plus-with-circle").setTooltip("New Event").onClick(() => dispatch("event", date));
  };

  const left = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("left-arrow");
  };

  const right = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("right-arrow");
  };

  const click_handler = () => dispatch("reveal");

  const click_handler_1 = () => dispatch("close");

  const click_handler_2 = () => calendar.goToPreviousDay();

  const click_handler_3 = () => calendar.goToNextDay();

  function event_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_context_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('displayDayNumber' in $$props) $$invalidate(0, displayDayNumber = $$props.displayDayNumber);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*calendar*/
    2) {
      $: $$invalidate(6, currentDate = calendar.viewedDate);
    }

    if ($$self.$$.dirty &
    /*calendar*/
    2) {
      $: $$invalidate(2, date = calendar.viewing);
    }

    if ($$self.$$.dirty &
    /*calendar, date*/
    6) {
      $: $$invalidate(8, dayNumber = calendar.dayNumberForDate(date));
    }

    if ($$self.$$.dirty &
    /*calendar*/
    2) {
      $: $$invalidate(5, events = calendar.getEventsOnDate(calendar.viewing));
    }

    if ($$self.$$.dirty &
    /*calendar*/
    2) {
      $: $$invalidate(4, moons = calendar.getMoonsForDate(calendar.viewing));
    }

    if ($$self.$$.dirty &
    /*calendar*/
    2) {
      $: $$invalidate(7, categories = calendar.object.categories);
    }
  };

  return [displayDayNumber, calendar, date, displayMoons, moons, events, currentDate, categories, dayNumber, dispatch, close, reveal, event, left, right, click_handler, click_handler_1, click_handler_2, click_handler_3, event_click_handler, event_mouseover_handler, event_context_handler];
}

class DayView extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      displayDayNumber: 0
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DayView);

/***/ }),

/***/ "./src/view/ui/Dot.svelte":
/*!********************************!*\
  !*** ./src/view/ui/Dot.svelte ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* src\view\ui\Dot.svelte generated by Svelte v3.44.3 */


function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1gou5hh", ".dot.svelte-1gou5hh{display:inline-block;min-height:6px;min-width:6px;height:6px;width:6px;margin:0 2px}.active.svelte-1gou5hh{color:var(--text-on-accent)}");
}

function create_fragment(ctx) {
  let svg;
  let circle;
  let circle_stroke_value;
  let circle_fill_value;
  return {
    c() {
      svg = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("svg");
      circle = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("circle");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "stroke", circle_stroke_value =
      /*color*/
      ctx[2] ?? "currentColor");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "fill", circle_fill_value =
      /*color*/
      ctx[2] ?? "currentColor");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "cx", "3");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "cy", "3");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "r", "2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "class", "dot svelte-1gou5hh");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "viewBox", "0 0 6 6");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "xmlns", "http://www.w3.org/2000/svg");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(svg, "filled",
      /*isFilled*/
      ctx[0]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(svg, "active",
      /*isActive*/
      ctx[1]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, svg, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(svg, circle);
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*color*/
      4 && circle_stroke_value !== (circle_stroke_value =
      /*color*/
      ctx[2] ?? "currentColor")) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "stroke", circle_stroke_value);
      }

      if (dirty &
      /*color*/
      4 && circle_fill_value !== (circle_fill_value =
      /*color*/
      ctx[2] ?? "currentColor")) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle, "fill", circle_fill_value);
      }

      if (dirty &
      /*isFilled*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(svg, "filled",
        /*isFilled*/
        ctx[0]);
      }

      if (dirty &
      /*isActive*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(svg, "active",
        /*isActive*/
        ctx[1]);
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(svg);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    isFilled = true
  } = $$props;
  let {
    isActive = false
  } = $$props;
  let {
    color
  } = $$props;

  $$self.$$set = $$props => {
    if ('isFilled' in $$props) $$invalidate(0, isFilled = $$props.isFilled);
    if ('isActive' in $$props) $$invalidate(1, isActive = $$props.isActive);
    if ('color' in $$props) $$invalidate(2, color = $$props.color);
  };

  return [isFilled, isActive, color];
}

class Dot extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      isFilled: 0,
      isActive: 1,
      color: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dot);

/***/ }),

/***/ "./src/view/ui/Dots.svelte":
/*!*********************************!*\
  !*** ./src/view/ui/Dots.svelte ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Dot_svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dot.svelte */ "./src/view/ui/Dot.svelte");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var src_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/helper */ "./src/helper/index.ts");
/* src\view\ui\Dots.svelte generated by Svelte v3.44.3 */






function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-2o3rj3", ".dots-container.svelte-2o3rj3{width:100%}.dot-container.svelte-2o3rj3{display:flex;flex-flow:row nowrap;width:fit-content;margin:auto;line-height:6px;min-height:6px}.centered.svelte-2o3rj3{justify-content:center;align-items:center}.overflow.svelte-2o3rj3{color:var(--text-muted);font-size:xx-small;display:flex;justify-content:flex-end;width:100%}");
} // (58:8) {#if overflow > 0}


function create_if_block(ctx) {
  let span;
  let t0;
  let t1;
  return {
    c() {
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)("+");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*overflow*/
      ctx[2]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, span, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t1);
    },

    p(ctx, dirty) {
      if (dirty &
      /*overflow*/
      4) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t1,
      /*overflow*/
      ctx[2]);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(span);
    }

  };
}

function create_fragment(ctx) {
  let div2;
  let div0;
  let t;
  let div1;
  let if_block =
  /*overflow*/
  ctx[2] > 0 && create_if_block(ctx);
  return {
    c() {
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if (if_block) if_block.c();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "dot-container centered svelte-2o3rj3");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "overflow svelte-2o3rj3");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "dots-container svelte-2o3rj3");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div2, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div0);
      /*div0_binding*/

      ctx[6](div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, t);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div1);
      if (if_block) if_block.m(div1, null);
      /*div2_binding*/

      ctx[7](div2);
    },

    p(ctx, [dirty]) {
      if (
      /*overflow*/
      ctx[2] > 0) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(div1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div2);
      /*div0_binding*/

      ctx[6](null);
      if (if_block) if_block.d();
      /*div2_binding*/

      ctx[7](null);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    events = []
  } = $$props;
  let {
    categories
  } = $$props;
  let {
    calendar
  } = $$props;
  let container;
  let dots;
  let overflow = 0;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();

  const addEvents = () => (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function* () {
    $$invalidate(2, overflow = 0);

    if (events.length) {
      dots.empty();
      const width = container.getBoundingClientRect().width;
      let remaining = width;

      for (const event of events) {
        new _Dot_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: dots,
          props: {
            color: color(event)
          }
        });
        remaining = width - dots.getBoundingClientRect().width;

        if (remaining < 0) {
          dots.lastElementChild.detach();
          $$invalidate(2, overflow = events.length - events.indexOf(event));
          break;
        } else if (remaining == 0) {
          $$invalidate(2, overflow = events.length - events.indexOf(event) - 1);
          break;
        }
      }
    }
  });

  calendar.on("view-resized", () => {
    if (!container || !dots) return;
    addEvents();
  });
  (0,svelte__WEBPACK_IMPORTED_MODULE_2__.onMount)(addEvents);

  const color = event => {
    var _a;

    return (_a = categories.find(c => c.id == event.category)) === null || _a === void 0 ? void 0 : _a.color;
  };

  function div0_binding($$value) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      dots = $$value;
      $$invalidate(1, dots);
    });
  }

  function div2_binding($$value) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      container = $$value;
      $$invalidate(0, container);
    });
  }

  $$self.$$set = $$props => {
    if ('events' in $$props) $$invalidate(3, events = $$props.events);
    if ('categories' in $$props) $$invalidate(4, categories = $$props.categories);
    if ('calendar' in $$props) $$invalidate(5, calendar = $$props.calendar);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*events, container, dots*/
    11) {
      $: {
        if (events && container && dots) {
          addEvents();
        }
      }
    }
  };

  return [container, dots, overflow, events, categories, calendar, div0_binding, div2_binding];
}

class Dots extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      events: 3,
      categories: 4,
      calendar: 5
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dots);

/***/ }),

/***/ "./src/view/ui/Flag.svelte":
/*!*********************************!*\
  !*** ./src/view/ui/Flag.svelte ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/utils/constants */ "./src/utils/constants.ts");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* src\view\ui\Flag.svelte generated by Svelte v3.44.3 */





function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1e1nyi2", ".flag.svelte-1e1nyi2.svelte-1e1nyi2{cursor:pointer;position:relative;padding-left:0.125rem;text-align:left;width:100%;background-color:var(--hex-alpha);border-left:2px solid var(--color)}.flag-content.svelte-1e1nyi2.svelte-1e1nyi2{display:flex;gap:0.25rem;align-items:flex-start;justify-content:space-between}.day-view.svelte-1e1nyi2 .flag-content.svelte-1e1nyi2{justify-content:space-between}.clamp.svelte-1e1nyi2.svelte-1e1nyi2{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;text-overflow:ellipsis}.note.svelte-1e1nyi2.svelte-1e1nyi2{display:flex;align-self:center}.multi.svelte-1e1nyi2.svelte-1e1nyi2{flex-shrink:0;overflow:visible;width:unset}.multi.svelte-1e1nyi2 .clamp.svelte-1e1nyi2{-webkit-line-clamp:1;overflow:visible}.multi.start.svelte-1e1nyi2.svelte-1e1nyi2{margin-left:0}.multi.end.svelte-1e1nyi2.svelte-1e1nyi2{margin-right:0}.multi.first.svelte-1e1nyi2.svelte-1e1nyi2{overflow:visible;white-space:nowrap}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.first){color:transparent;overflow:hidden}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.start){border:0;margin-left:-6px}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.end){margin-right:-6px}.start.svelte-1e1nyi2>.flag-content.svelte-1e1nyi2{justify-content:flex-start;gap:1em}");
} // (69:8) {#if event.note}


function create_if_block(ctx) {
  let div;
  let note_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "note svelte-1e1nyi2");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(note_action =
        /*note*/
        ctx[9].call(null, div));
        mounted = true;
      }
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      mounted = false;
      dispose();
    }

  };
}

function create_fragment(ctx) {
  let div1;
  let div0;
  let span;
  let t0_value =
  /*event*/
  ctx[0].name + "";
  let t0;
  let t1;
  let div1_aria_label_value;
  let mounted;
  let dispose;
  let if_block =
  /*event*/
  ctx[0].note && create_if_block(ctx);
  return {
    c() {
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t0_value);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (if_block) if_block.c();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span, "class", "svelte-1e1nyi2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(span, "clamp", !
      /*dayView*/
      ctx[1]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(span, "day-view",
      /*dayView*/
      ctx[1]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "flag-content svelte-1e1nyi2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "flag svelte-1e1nyi2");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "aria-label", div1_aria_label_value = !
      /*dayView*/
      ctx[1] ?
      /*event*/
      ctx[0].name : null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div1, "--hex-alpha",
      /*color*/
      ctx[6] + "40");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div1, "--color",
      /*color*/
      ctx[6]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "multi",
      /*multi*/
      ctx[4]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "start",
      /*start*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "end",
      /*end*/
      ctx[3]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "first",
      /*first*/
      ctx[5]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "day-view",
      /*dayView*/
      ctx[1]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div1, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, span);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, t1);
      if (if_block) if_block.m(div0, null);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div1, "click",
        /*click_handler*/
        ctx[14]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div1, "mouseover",
        /*mouseover_handler*/
        ctx[15]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div1, "focus", focus_handler), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div1, "contextmenu",
        /*contextmenu_handler*/
        ctx[16])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*event*/
      1 && t0_value !== (t0_value =
      /*event*/
      ctx[0].name + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t0, t0_value);

      if (dirty &
      /*dayView*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(span, "clamp", !
        /*dayView*/
        ctx[1]);
      }

      if (dirty &
      /*dayView*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(span, "day-view",
        /*dayView*/
        ctx[1]);
      }

      if (
      /*event*/
      ctx[0].note) {
        if (if_block) {} else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }

      if (dirty &
      /*dayView, event*/
      3 && div1_aria_label_value !== (div1_aria_label_value = !
      /*dayView*/
      ctx[1] ?
      /*event*/
      ctx[0].name : null)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "aria-label", div1_aria_label_value);
      }

      if (dirty &
      /*color*/
      64) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div1, "--hex-alpha",
        /*color*/
        ctx[6] + "40");
      }

      if (dirty &
      /*color*/
      64) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div1, "--color",
        /*color*/
        ctx[6]);
      }

      if (dirty &
      /*multi*/
      16) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "multi",
        /*multi*/
        ctx[4]);
      }

      if (dirty &
      /*start*/
      4) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "start",
        /*start*/
        ctx[2]);
      }

      if (dirty &
      /*end*/
      8) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "end",
        /*end*/
        ctx[3]);
      }

      if (dirty &
      /*first*/
      32) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "first",
        /*first*/
        ctx[5]);
      }

      if (dirty &
      /*dayView*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div1, "day-view",
        /*dayView*/
        ctx[1]);
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div1);
      if (if_block) if_block.d();
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

const focus_handler = () => {};

function instance($$self, $$props, $$invalidate) {
  var _a, _b, _c, _d;

  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_3__.createEventDispatcher)();
  let {
    event
  } = $$props;
  let {
    date
  } = $$props;
  let {
    dayView = false
  } = $$props;
  let multi = false,
      start = false,
      end = false,
      first = false;
  let {
    categories
  } = $$props;
  let color = (_b = (_a = categories.find(c => c.id == event.category)) === null || _a === void 0 ? void 0 : _a.color) !== null && _b !== void 0 ? _b : src_utils_constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_CATEGORY_COLOR;
  const meta = obsidian__WEBPACK_IMPORTED_MODULE_1__.Platform.isMacOS ? "Meta" : "Control";

  const note = node => {
    (0,obsidian__WEBPACK_IMPORTED_MODULE_1__.setIcon)(node, "note-glyph");
  };

  const click_handler = evt => {
    evt.stopPropagation();
    dispatch("event-click", {
      event,
      modifier: evt.getModifierState(meta)
    });
  };

  const mouseover_handler = evt => dispatch("event-mouseover", {
    target: evt.target,
    event
  });

  const contextmenu_handler = evt => {
    evt.stopPropagation();
    dispatch("event-context", {
      evt,
      event
    });
  };

  $$self.$$set = $$props => {
    if ('event' in $$props) $$invalidate(0, event = $$props.event);
    if ('date' in $$props) $$invalidate(10, date = $$props.date);
    if ('dayView' in $$props) $$invalidate(1, dayView = $$props.dayView);
    if ('categories' in $$props) $$invalidate(11, categories = $$props.categories);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*event, dayView, date, start, end*/
    1039) {
      $: {
        if (event.end != undefined && !dayView) {
          $$invalidate(4, multi = true);
          $$invalidate(2, start = date.day === event.date.day && (event.date.month == undefined || date.month == event.date.month) && (event.date.year == undefined || date.year === event.date.year));
          $$invalidate(5, first = start || date.day == 1);
          $$invalidate(3, end = date.day === event.end.day && (event.end.month == undefined || date.month == event.end.month) && (event.end.year == undefined || date.year === event.end.year));

          if (start && end) {
            $$invalidate(4, multi = false);
            $$invalidate(2, start = false);
            $$invalidate(3, end = false);
          }
        }
      }
    }

    if ($$self.$$.dirty &
    /*categories, event, _c, _d*/
    14337) {
      $: $$invalidate(6, color = $$invalidate(13, _d = $$invalidate(12, _c = categories.find(c => c.id == event.category)) === null || _c === void 0 ? void 0 : _c.color) !== null && _d !== void 0 ? _d : src_utils_constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_CATEGORY_COLOR);
    }
  };

  return [event, dayView, start, end, multi, first, color, dispatch, meta, note, date, categories, _c, _d, click_handler, mouseover_handler, contextmenu_handler];
}

class Flag extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      event: 0,
      date: 10,
      dayView: 1,
      categories: 11
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Flag);

/***/ }),

/***/ "./src/view/ui/Flags.svelte":
/*!**********************************!*\
  !*** ./src/view/ui/Flags.svelte ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Flag_svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Flag.svelte */ "./src/view/ui/Flag.svelte");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var src_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/helper */ "./src/helper/index.ts");
/* src\view\ui\Flags.svelte generated by Svelte v3.44.3 */






function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-qnut28", ".flags-container.svelte-qnut28{height:100%}.flag-container.svelte-qnut28{display:flex;flex-flow:column nowrap;gap:0.25rem}.overflow.svelte-qnut28{color:var(--text-muted);display:flex;justify-content:flex-end;width:100%}");
} // (77:8) {#if overflow > 0}


function create_if_block(ctx) {
  let span;
  let t0;
  let t1;
  return {
    c() {
      span = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)("+");
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*overflow*/
      ctx[2]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, span, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span, t1);
    },

    p(ctx, dirty) {
      if (dirty &
      /*overflow*/
      4) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t1,
      /*overflow*/
      ctx[2]);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(span);
    }

  };
}

function create_fragment(ctx) {
  let div2;
  let div0;
  let t;
  let div1;
  let if_block =
  /*overflow*/
  ctx[2] > 0 && create_if_block(ctx);
  return {
    c() {
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if (if_block) if_block.c();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "flag-container svelte-qnut28");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "overflow svelte-qnut28");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "flags-container svelte-qnut28");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div2, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div0);
      /*div0_binding*/

      ctx[8](div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, t);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, div1);
      if (if_block) if_block.m(div1, null);
      /*div2_binding*/

      ctx[9](div2);
    },

    p(ctx, [dirty]) {
      if (
      /*overflow*/
      ctx[2] > 0) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(div1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div2);
      /*div0_binding*/

      ctx[8](null);
      if (if_block) if_block.d();
      /*div2_binding*/

      ctx[9](null);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    events = []
  } = $$props;
  let {
    categories
  } = $$props;
  let {
    dayView = false
  } = $$props;
  let {
    date
  } = $$props;
  let {
    calendar
  } = $$props;
  let container;
  let flags;
  let overflow = 0;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();

  const addEvents = () => (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function* () {
    flags === null || flags === void 0 ? void 0 : flags.empty();
    $$invalidate(2, overflow = 0);

    if (events.length && container && flags) {
      const height = container.getBoundingClientRect().height;
      let remaining = height;

      for (const event of events) {
        const flag = new _Flag_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: flags,
          props: {
            event,
            categories,
            dayView,
            date
          }
        });
        flag.$on("event-click", e => dispatch("event-click", e.detail));
        flag.$on("event-mouseover", e => dispatch("event-mouseover", e.detail));
        flag.$on("event-context", e => dispatch("event-context", e.detail));
        remaining = height - flags.getBoundingClientRect().height;

        if (!dayView) {
          if (remaining < 0) {
            flags.lastElementChild.detach();
            $$invalidate(2, overflow = events.length - events.indexOf(event));
            break;
          } else if (remaining == 0) {
            $$invalidate(2, overflow = events.length - events.indexOf(event) - 1);
            break;
          }
        }
      }
    }
  });

  calendar.on("view-resized", () => {
    if (dayView) return;
    addEvents();
  });
  (0,svelte__WEBPACK_IMPORTED_MODULE_2__.onMount)(addEvents);

  function div0_binding($$value) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      flags = $$value;
      $$invalidate(1, flags);
    });
  }

  function div2_binding($$value) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      container = $$value;
      $$invalidate(0, container);
    });
  }

  $$self.$$set = $$props => {
    if ('events' in $$props) $$invalidate(3, events = $$props.events);
    if ('categories' in $$props) $$invalidate(4, categories = $$props.categories);
    if ('dayView' in $$props) $$invalidate(5, dayView = $$props.dayView);
    if ('date' in $$props) $$invalidate(6, date = $$props.date);
    if ('calendar' in $$props) $$invalidate(7, calendar = $$props.calendar);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*events*/
    8) {
      $: $$invalidate(3, events);
    }

    if ($$self.$$.dirty &
    /*events, container, flags*/
    11) {
      $: {
        if (events && container && flags) {
          addEvents();
        }
      }
    }
  };

  return [container, flags, overflow, events, categories, dayView, date, calendar, div0_binding, div2_binding];
}

class Flags extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      events: 3,
      categories: 4,
      dayView: 5,
      date: 6,
      calendar: 7
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Flags);

/***/ }),

/***/ "./src/view/ui/Month.svelte":
/*!**********************************!*\
  !*** ./src/view/ui/Month.svelte ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var _Day_svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Day.svelte */ "./src/view/ui/Day.svelte");
/* src\view\ui\Month.svelte generated by Svelte v3.44.3 */



function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1xujcmn", ".fantasy-month.svelte-1xujcmn{display:grid;grid-template-columns:repeat(\r\n            var(--calendar-columns),\r\n            var(--column-widths)\r\n        );grid-auto-rows:var(--calendar-rows)}.full-view.svelte-1xujcmn{height:100%;margin-bottom:0.5rem}.month.svelte-1xujcmn{border-radius:1rem;padding:0.25rem}.month-name.svelte-1xujcmn{margin:0}.month.svelte-1xujcmn .fantasy-day.day{padding:0px}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}

function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}

function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
} // (20:4) {#if yearView}


function create_if_block_2(ctx) {
  let h3;
  let t_value =
  /*month*/
  ctx[1].name + "";
  let t;
  return {
    c() {
      h3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("h3");
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(t_value);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(h3, "class", "month-name svelte-1xujcmn");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, h3, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h3, t);
    },

    p(ctx, dirty) {
      if (dirty &
      /*month*/
      2 && t_value !== (t_value =
      /*month*/
      ctx[1].name + "")) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t, t_value);
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(h3);
    }

  };
} // (35:16) {:else}


function create_else_block_1(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (33:16) {#if showPad && day != null}


function create_if_block_1(ctx) {
  let day;
  let current;
  day = new _Day_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
    props: {
      day:
      /*day*/
      ctx[16],
      adjacent: true,
      fullView:
      /*fullView*/
      ctx[3]
    }
  });
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(day.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(day, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const day_changes = {};
      if (dirty &
      /*previous*/
      256) day_changes.day =
      /*day*/
      ctx[16];
      if (dirty &
      /*fullView*/
      8) day_changes.fullView =
      /*fullView*/
      ctx[3];
      day.$set(day_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(day.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(day.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(day, detaching);
    }

  };
} // (32:12) {#each previous as day}


function create_each_block_2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1, create_else_block_1];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*showPad*/
    ctx[5] &&
    /*day*/
    ctx[16] != null) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
} // (39:12) {#each current as day}


function create_each_block_1(ctx) {
  let day;
  let current;
  day = new _Day_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
    props: {
      day:
      /*day*/
      ctx[16],
      adjacent: false,
      fullView:
      /*fullView*/
      ctx[3]
    }
  });
  day.$on("day-click",
  /*day_click_handler*/
  ctx[10]);
  day.$on("day-doubleclick",
  /*day_doubleclick_handler*/
  ctx[11]);
  day.$on("day-context-menu",
  /*day_context_menu_handler*/
  ctx[12]);
  day.$on("event-click",
  /*event_click_handler*/
  ctx[13]);
  day.$on("event-mouseover",
  /*event_mouseover_handler*/
  ctx[14]);
  day.$on("event-context",
  /*event_context_handler*/
  ctx[15]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(day.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(day, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const day_changes = {};
      if (dirty &
      /*current*/
      128) day_changes.day =
      /*day*/
      ctx[16];
      if (dirty &
      /*fullView*/
      8) day_changes.fullView =
      /*fullView*/
      ctx[3];
      day.$set(day_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(day.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(day.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(day, detaching);
    }

  };
} // (55:16) {:else}


function create_else_block(ctx) {
  let div;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
    }

  };
} // (53:16) {#if showPad}


function create_if_block(ctx) {
  let day;
  let current;
  day = new _Day_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
    props: {
      day:
      /*day*/
      ctx[16],
      adjacent: true,
      fullView:
      /*fullView*/
      ctx[3]
    }
  });
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(day.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(day, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const day_changes = {};
      if (dirty &
      /*next*/
      64) day_changes.day =
      /*day*/
      ctx[16];
      if (dirty &
      /*fullView*/
      8) day_changes.fullView =
      /*fullView*/
      ctx[3];
      day.$set(day_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(day.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(day.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(day, detaching);
    }

  };
} // (52:12) {#each next as day}


function create_each_block(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type_1(ctx, dirty) {
    if (
    /*showPad*/
    ctx[5]) return 0;
    return 1;
  }

  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.empty)();
    },

    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(if_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(if_block);
      current = false;
    },

    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(if_block_anchor);
    }

  };
} // (23:4) {#key current}


function create_key_block(ctx) {
  let div;
  let t0;
  let t1;
  let current;
  let each_value_2 =
  /*previous*/
  ctx[8];
  let each_blocks_2 = [];

  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks_2[i], 1, 1, () => {
    each_blocks_2[i] = null;
  });

  let each_value_1 =
  /*current*/
  ctx[7];
  let each_blocks_1 = [];

  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }

  const out_1 = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });

  let each_value =
  /*next*/
  ctx[6];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out_2 = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }

      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }

      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "fantasy-month svelte-1xujcmn");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-columns",
      /*columns*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-rows",
      /*fullView*/
      ctx[3] ? `${1 /
      /*weeks*/
      ctx[4] * 100}%` : '1fr');
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
      /*fullView*/
      ctx[3]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "year-view",
      /*yearView*/
      ctx[0]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].m(div, null);
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div, t0);

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(div, null);
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div, t1);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (dirty &
      /*previous, fullView, showPad*/
      296) {
        each_value_2 =
        /*previous*/
        ctx[8];
        let i;

        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx, each_value_2, i);

          if (each_blocks_2[i]) {
            each_blocks_2[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks_2[i], 1);
          } else {
            each_blocks_2[i] = create_each_block_2(child_ctx);
            each_blocks_2[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks_2[i], 1);
            each_blocks_2[i].m(div, t0);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value_2.length; i < each_blocks_2.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      if (dirty &
      /*current, fullView*/
      136) {
        each_value_1 =
        /*current*/
        ctx[7];
        let i;

        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx, each_value_1, i);

          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks_1[i], 1);
            each_blocks_1[i].m(div, t1);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
          out_1(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      if (dirty &
      /*next, fullView, showPad*/
      104) {
        each_value =
        /*next*/
        ctx[6];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out_2(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      if (!current || dirty &
      /*columns*/
      4) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-columns",
        /*columns*/
        ctx[2]);
      }

      if (!current || dirty &
      /*fullView, weeks*/
      24) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_style)(div, "--calendar-rows",
        /*fullView*/
        ctx[3] ? `${1 /
        /*weeks*/
        ctx[4] * 100}%` : '1fr');
      }

      if (dirty &
      /*fullView*/
      8) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
        /*fullView*/
        ctx[3]);
      }

      if (dirty &
      /*yearView*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "year-view",
        /*yearView*/
        ctx[0]);
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value_2.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks_2[i]);
      }

      for (let i = 0; i < each_value_1.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks_1[i]);
      }

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks_2 = each_blocks_2.filter(Boolean);

      for (let i = 0; i < each_blocks_2.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks_2[i]);
      }

      each_blocks_1 = each_blocks_1.filter(Boolean);

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks_1[i]);
      }

      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks_2, detaching);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks_1, detaching);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
}

function create_fragment(ctx) {
  let div;
  let t;
  let previous_key =
  /*current*/
  ctx[7];
  let div_data_id_value;
  let div_id_value;
  let current;
  let if_block =
  /*yearView*/
  ctx[0] && create_if_block_2(ctx);
  let key_block = create_key_block(ctx);
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if (if_block) if_block.c();
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      key_block.c();
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "month svelte-1xujcmn");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "data-id", div_data_id_value =
      /*month*/
      ctx[1].id);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "id", div_id_value = `MONTH-${
      /*month*/
      ctx[1].id}-${
      /*month*/
      ctx[1].year}`);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
      /*fullView*/
      ctx[3]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);
      if (if_block) if_block.m(div, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div, t);
      key_block.m(div, null);
      current = true;
    },

    p(ctx, [dirty]) {
      if (
      /*yearView*/
      ctx[0]) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_2(ctx);
          if_block.c();
          if_block.m(div, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }

      if (dirty &
      /*current*/
      128 && (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal)(previous_key, previous_key =
      /*current*/
      ctx[7])) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(key_block, 1, 1, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop);
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
        key_block = create_key_block(ctx);
        key_block.c();
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(key_block);
        key_block.m(div, null);
      } else {
        key_block.p(ctx, dirty);
      }

      if (!current || dirty &
      /*month*/
      2 && div_data_id_value !== (div_data_id_value =
      /*month*/
      ctx[1].id)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "data-id", div_data_id_value);
      }

      if (!current || dirty &
      /*month*/
      2 && div_id_value !== (div_id_value = `MONTH-${
      /*month*/
      ctx[1].id}-${
      /*month*/
      ctx[1].year}`)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "id", div_id_value);
      }

      if (dirty &
      /*fullView*/
      8) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
        /*fullView*/
        ctx[3]);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(key_block);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(key_block);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      if (if_block) if_block.d();
      key_block.d(detaching);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let padded;
  let previous;
  let current;
  let next;
  let {
    yearView = false
  } = $$props;
  let {
    month
  } = $$props;
  let {
    columns
  } = $$props;
  let {
    fullView = false
  } = $$props;
  let {
    weeks
  } = $$props;
  let {
    showPad = true
  } = $$props;

  function day_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_doubleclick_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_context_menu_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_context_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('yearView' in $$props) $$invalidate(0, yearView = $$props.yearView);
    if ('month' in $$props) $$invalidate(1, month = $$props.month);
    if ('columns' in $$props) $$invalidate(2, columns = $$props.columns);
    if ('fullView' in $$props) $$invalidate(3, fullView = $$props.fullView);
    if ('weeks' in $$props) $$invalidate(4, weeks = $$props.weeks);
    if ('showPad' in $$props) $$invalidate(5, showPad = $$props.showPad);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*month*/
    2) {
      $: $$invalidate(9, padded = month.calendar.getPaddedDaysForMonth(month));
    }

    if ($$self.$$.dirty &
    /*padded*/
    512) {
      $: $$invalidate(8, previous = padded.previous);
    }

    if ($$self.$$.dirty &
    /*month*/
    2) {
      $: $$invalidate(7, current = month.days);
    }

    if ($$self.$$.dirty &
    /*padded*/
    512) {
      $: $$invalidate(6, next = padded.next);
    }
  };

  return [yearView, month, columns, fullView, weeks, showPad, next, current, previous, padded, day_click_handler, day_doubleclick_handler, day_context_menu_handler, event_click_handler, event_mouseover_handler, event_context_handler];
}

class Month extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      yearView: 0,
      month: 1,
      columns: 2,
      fullView: 3,
      weeks: 4,
      showPad: 5
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Month);

/***/ }),

/***/ "./src/view/ui/Moon.svelte":
/*!*********************************!*\
  !*** ./src/view/ui/Moon.svelte ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var src_utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/utils/constants */ "./src/utils/constants.ts");
/* src\view\ui\Moon.svelte generated by Svelte v3.44.3 */



function create_fragment(ctx) {
  let svg;
  let circle0;
  let circle0_fill_value;
  let path_1;
  let path_1_fill_value;
  let circle1;
  let svg_id_value;
  let svg_aria_label_value;
  return {
    c() {
      svg = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("svg");
      circle0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("circle");
      path_1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("path");
      circle1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.svg_element)("circle");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle0, "cx", "16");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle0, "cy", "16");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle0, "r", "10");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle0, "fill", circle0_fill_value =
      /*moon*/
      ctx[0].faceColor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(path_1, "class", "shadow");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(path_1, "fill", path_1_fill_value =
      /*moon*/
      ctx[0].shadowColor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(path_1, "d",
      /*path*/
      ctx[4]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle1, "cx", "16");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle1, "cy", "16");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle1, "r", "10");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle1, "fill", "none");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle1, "stroke", "#000");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle1, "stroke-width", "2px");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "class", "moon");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "id", svg_id_value =
      /*moon*/
      ctx[0].id);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "preserveAspectRatio", "xMidYMid");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "aria-label", svg_aria_label_value =
      /*label*/
      ctx[1] ? `${
      /*moon*/
      ctx[0].name}\n${
      /*phase*/
      ctx[3]}` : null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "width",
      /*size*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "height",
      /*size*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "viewBox", "0 0 32 32");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, svg, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(svg, circle0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(svg, path_1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(svg, circle1);
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*moon*/
      1 && circle0_fill_value !== (circle0_fill_value =
      /*moon*/
      ctx[0].faceColor)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(circle0, "fill", circle0_fill_value);
      }

      if (dirty &
      /*moon*/
      1 && path_1_fill_value !== (path_1_fill_value =
      /*moon*/
      ctx[0].shadowColor)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(path_1, "fill", path_1_fill_value);
      }

      if (dirty &
      /*path*/
      16) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(path_1, "d",
        /*path*/
        ctx[4]);
      }

      if (dirty &
      /*moon*/
      1 && svg_id_value !== (svg_id_value =
      /*moon*/
      ctx[0].id)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "id", svg_id_value);
      }

      if (dirty &
      /*label, moon, phase*/
      11 && svg_aria_label_value !== (svg_aria_label_value =
      /*label*/
      ctx[1] ? `${
      /*moon*/
      ctx[0].name}\n${
      /*phase*/
      ctx[3]}` : null)) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "aria-label", svg_aria_label_value);
      }

      if (dirty &
      /*size*/
      4) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "width",
        /*size*/
        ctx[2]);
      }

      if (dirty &
      /*size*/
      4) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(svg, "height",
        /*size*/
        ctx[2]);
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(svg);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let path;
  let {
    moon
  } = $$props;
  let {
    label = true
  } = $$props;
  let {
    size = 28
  } = $$props;
  let {
    phase
  } = $$props;

  $$self.$$set = $$props => {
    if ('moon' in $$props) $$invalidate(0, moon = $$props.moon);
    if ('label' in $$props) $$invalidate(1, label = $$props.label);
    if ('size' in $$props) $$invalidate(2, size = $$props.size);
    if ('phase' in $$props) $$invalidate(3, phase = $$props.phase);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*phase*/
    8) {
      $: $$invalidate(4, path = src_utils_constants__WEBPACK_IMPORTED_MODULE_1__.SHADOW_MAP[phase]);
    }
  };

  return [moon, label, size, phase, path];
}

class Moon extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      moon: 0,
      label: 1,
      size: 2,
      phase: 3
    });
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Moon);

/***/ }),

/***/ "./src/view/ui/Nav.svelte":
/*!********************************!*\
  !*** ./src/view/ui/Nav.svelte ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/helper */ "./src/helper/index.ts");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* src\view\ui\Nav.svelte generated by Svelte v3.44.3 */





function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-131055d", ".fantasy-nav.nav.nav.svelte-131055d{padding:10px 0px;margin:0;display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:stretch}.container.svelte-131055d{display:flex;align-items:center}.fantasy-title.svelte-131055d{margin:0;line-height:1.25}.fantasy-right-nav.svelte-131055d{display:flex;justify-content:center;align-items:flex-start}.calendar-clickable.svelte-131055d{align-items:center;cursor:pointer;display:flex;justify-content:center}.title-container.svelte-131055d{display:flex;flex-flow:column nowrap;align-items:flex-start}");
}

function create_fragment(ctx) {
  let div7;
  let div0;
  let h3;
  let span0;
  let t0;
  let t1;
  let span1;
  let t2;
  let t3;
  let div6;
  let div5;
  let div1;
  let left_action;
  let t4;
  let div2;
  let span2;
  let div2_aria_label_value;
  let t6;
  let div3;
  let right_action;
  let t7;
  let div4;
  let settings_action;
  let mounted;
  let dispose;
  return {
    c() {
      div7 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      h3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("h3");
      span0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*month*/
      ctx[0]);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      span1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*year*/
      ctx[1]);
      t3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      span2.textContent = "Today";
      t6 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      t7 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span0, "class", "fantasy-month month");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span1, "class", "fantasy-year year");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(h3, "class", "fantasy-title title svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "title-container svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "arrow calendar-clickable svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "aria-label", "Previous Month");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "reset-button calendar-clickable svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "aria-label", div2_aria_label_value = "Today is " +
      /*current*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "arrow right calendar-clickable svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "aria-label", "Next Month");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "calendar-clickable svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "aria-label", "Calendar Settings");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "container svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div6, "class", "right-nav fantasy-right-nav svelte-131055d");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div7, "class", "fantasy-nav nav svelte-131055d");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div7, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div7, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, h3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h3, span0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span0, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h3, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h3, span1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span1, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div7, t3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div7, div6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div6, div5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div2, span2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t6);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div3);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t7);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div4);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(left_action =
        /*left*/
        ctx[4].call(null, div1)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div1, "click",
        /*click_handler*/
        ctx[7]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div2, "click",
        /*click_handler_1*/
        ctx[8]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(right_action =
        /*right*/
        ctx[5].call(null, div3)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div3, "click",
        /*click_handler_2*/
        ctx[9]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(settings_action =
        /*settings*/
        ctx[6].call(null, div4)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div4, "click",
        /*click_handler_3*/
        ctx[10])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*month*/
      1) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t0,
      /*month*/
      ctx[0]);
      if (dirty &
      /*year*/
      2) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t2,
      /*year*/
      ctx[1]);

      if (dirty &
      /*current*/
      4 && div2_aria_label_value !== (div2_aria_label_value = "Today is " +
      /*current*/
      ctx[2])) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "aria-label", div2_aria_label_value);
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div7);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_3__.createEventDispatcher)();
  let {
    month
  } = $$props;
  let {
    year
  } = $$props;
  let {
    current
  } = $$props;

  const left = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("left-arrow");
  };

  const right = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("right-arrow");
  };

  const settings = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("gear");
  };

  const click_handler = () => dispatch("previous");

  const click_handler_1 = () => dispatch("reset");

  const click_handler_2 = evt => dispatch("next");

  const click_handler_3 = evt => dispatch("settings", evt);

  $$self.$$set = $$props => {
    if ('month' in $$props) $$invalidate(0, month = $$props.month);
    if ('year' in $$props) $$invalidate(1, year = $$props.year);
    if ('current' in $$props) $$invalidate(2, current = $$props.current);
  };

  return [month, year, current, dispatch, left, right, settings, click_handler, click_handler_1, click_handler_2, click_handler_3];
}

class Nav extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      month: 0,
      year: 1,
      current: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Nav);

/***/ }),

/***/ "./src/view/ui/YearNav.svelte":
/*!************************************!*\
  !*** ./src/view/ui/YearNav.svelte ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* src\view\ui\YearNav.svelte generated by Svelte v3.44.3 */




function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-i3pajt", "#calendar-container .fantasy-nav.nav.nav.svelte-i3pajt{padding:0;margin:0;display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:center;position:sticky;top:0;z-index:2}.fantasy-year-nav.svelte-i3pajt{display:flex;align-items:center;margin-right:auto}.container.svelte-i3pajt{display:flex;align-items:center}.fantasy-title.svelte-i3pajt{margin:0}.fantasy-right-nav.svelte-i3pajt{display:flex;justify-content:center;align-items:flex-start}.calendar-clickable.svelte-i3pajt{align-items:center;cursor:pointer;display:flex;justify-content:center}");
} // (26:12) {#if arrows}


function create_if_block_1(ctx) {
  let div;
  let left_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "arrow calendar-clickable svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "aria-label", "Previous Year");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(left_action =
        /*left*/
        ctx[4].call(null, div)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "click",
        /*click_handler*/
        ctx[7])];
        mounted = true;
      }
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
} // (42:12) {#if arrows}


function create_if_block(ctx) {
  let div;
  let right_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "arrow right calendar-clickable svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "aria-label", "Next Year");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(right_action =
        /*right*/
        ctx[5].call(null, div)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div, "click",
        /*click_handler_2*/
        ctx[9])];
        mounted = true;
      }
    },

    p: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function create_fragment(ctx) {
  let div5;
  let div0;
  let h2;
  let span0;
  let t0;
  let t1;
  let div4;
  let div3;
  let t2;
  let div1;
  let span1;
  let div1_aria_label_value;
  let t4;
  let t5;
  let div2;
  let settings_action;
  let mounted;
  let dispose;
  let if_block0 =
  /*arrows*/
  ctx[1] && create_if_block_1(ctx);
  let if_block1 =
  /*arrows*/
  ctx[1] && create_if_block(ctx);
  return {
    c() {
      div5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      h2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("h2");
      span0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      t0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.text)(
      /*year*/
      ctx[0]);
      t1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      div3 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      if (if_block0) if_block0.c();
      t2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      span1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("span");
      span1.textContent = "Today";
      t4 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      if (if_block1) if_block1.c();
      t5 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div2 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(span0, "class", "fantasy-year");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(h2, "class", "fantasy-title svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "fantasy-year-nav svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "reset-button calendar-clickable svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "aria-label", div1_aria_label_value = "Today is " +
      /*current*/
      ctx[2]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "class", "calendar-clickable svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div2, "aria-label", "Calendar Settings");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div3, "class", "container svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div4, "class", "right-nav fantasy-right-nav svelte-i3pajt");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div5, "class", "fantasy-nav nav svelte-i3pajt");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div5, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div0, h2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(h2, span0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(span0, t0);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, t1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div5, div4);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div4, div3);
      if (if_block0) if_block0.m(div3, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t2);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, span1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t4);
      if (if_block1) if_block1.m(div3, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, t5);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div3, div2);

      if (!mounted) {
        dispose = [(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div1, "click",
        /*click_handler_1*/
        ctx[8]), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.action_destroyer)(settings_action =
        /*settings*/
        ctx[6].call(null, div2)), (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div2, "click",
        /*click_handler_3*/
        ctx[10])];
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*year*/
      1) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.set_data)(t0,
      /*year*/
      ctx[0]);

      if (
      /*arrows*/
      ctx[1]) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_1(ctx);
          if_block0.c();
          if_block0.m(div3, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }

      if (dirty &
      /*current*/
      4 && div1_aria_label_value !== (div1_aria_label_value = "Today is " +
      /*current*/
      ctx[2])) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "aria-label", div1_aria_label_value);
      }

      if (
      /*arrows*/
      ctx[1]) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block(ctx);
          if_block1.c();
          if_block1.m(div3, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },

    i: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,
    o: svelte_internal__WEBPACK_IMPORTED_MODULE_0__.noop,

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div5);
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      mounted = false;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.run_all)(dispose);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();
  let {
    year
  } = $$props;
  let {
    arrows = false
  } = $$props;
  let {
    current
  } = $$props;

  const left = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("left-arrow");
  };

  const right = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("right-arrow");
  };

  const settings = node => {
    new obsidian__WEBPACK_IMPORTED_MODULE_1__.ExtraButtonComponent(node).setIcon("gear");
  };

  const click_handler = () => dispatch("previous");

  const click_handler_1 = () => dispatch("reset");

  const click_handler_2 = evt => dispatch("next");

  const click_handler_3 = evt => dispatch("settings", evt);

  $$self.$$set = $$props => {
    if ('year' in $$props) $$invalidate(0, year = $$props.year);
    if ('arrows' in $$props) $$invalidate(1, arrows = $$props.arrows);
    if ('current' in $$props) $$invalidate(2, current = $$props.current);
  };

  return [year, arrows, current, dispatch, left, right, settings, click_handler, click_handler_1, click_handler_2, click_handler_3];
}

class YearNav extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      year: 0,
      arrows: 1,
      current: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YearNav);

/***/ }),

/***/ "./src/view/ui/YearView.svelte":
/*!*************************************!*\
  !*** ./src/view/ui/YearView.svelte ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _Month_svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Month.svelte */ "./src/view/ui/Month.svelte");
/* harmony import */ var _YearNav_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./YearNav.svelte */ "./src/view/ui/YearNav.svelte");
/* src\view\ui\YearView.svelte generated by Svelte v3.44.3 */






function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-15hvixf", ".year-view.svelte-15hvixf{height:100%;position:relative;display:flex;flex-direction:column}.year.svelte-15hvixf{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;overflow:auto;flex:1}.year.svelte-15hvixf:not(.full-view){grid-template-columns:1fr}");
}

function create_fragment(ctx) {
  let div1;
  let yearnav;
  let t;
  let div0;
  let current;
  let mounted;
  let dispose;
  yearnav = new _YearNav_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      year:
      /*yearDisplay*/
      ctx[3],
      current:
      /*current*/
      ctx[0]
    }
  });
  yearnav.$on("next",
  /*next_handler*/
  ctx[9]);
  yearnav.$on("previous",
  /*previous_handler*/
  ctx[10]);
  yearnav.$on("reset",
  /*reset_handler*/
  ctx[11]);
  yearnav.$on("settings",
  /*settings_handler*/
  ctx[12]);
  return {
    c() {
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(yearnav.$$.fragment);
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "year svelte-15hvixf");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div0, "full-view",
      /*fullView*/
      ctx[1]);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "year-view svelte-15hvixf");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div1, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(yearnav, div1, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      /*div0_binding*/

      ctx[13](div0);
      current = true;

      if (!mounted) {
        dispose = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.listen)(div0, "scroll",
        /*scroll*/
        ctx[5], {
          once: true
        });
        mounted = true;
      }
    },

    p(ctx, [dirty]) {
      const yearnav_changes = {};
      if (dirty &
      /*yearDisplay*/
      8) yearnav_changes.year =
      /*yearDisplay*/
      ctx[3];
      if (dirty &
      /*current*/
      1) yearnav_changes.current =
      /*current*/
      ctx[0];
      yearnav.$set(yearnav_changes);

      if (dirty &
      /*fullView*/
      2) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div0, "full-view",
        /*fullView*/
        ctx[1]);
      }
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(yearnav.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(yearnav.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(yearnav);
      /*div0_binding*/

      ctx[13](null);
      mounted = false;
      dispose();
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let yearDisplay;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.createEventDispatcher)();
  let {
    current
  } = $$props;
  let {
    year
  } = $$props;
  let {
    columns
  } = $$props;
  let {
    fullView
  } = $$props;
  let yearContainer;
  let firstMonth;
  let lastMonth;
  const calendarStore = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.getContext)("calendar");
  let calendar;
  calendarStore.subscribe(c => {
    $$invalidate(8, calendar = c);
  });
  const trackedMonths = [];
  const dayViewStore = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.getContext)("dayView");
  const moonStore = (0,svelte__WEBPACK_IMPORTED_MODULE_1__.getContext)("displayMoons");
  const appendObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== appendObserver) return;
    if (!entries.length) return;
    if (!entries[0].isIntersecting) return;
    appendObserver.disconnect();
    if (!calendar.canGoToNextYear(lastMonth.year) && lastMonth.number === calendar.data.months.length - 1) return;
    appendMonth();
    destroy(trackedMonths.shift());
    resetAppend();
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0.25
  });

  const resetAppend = () => {
    const el = yearContainer.children[yearContainer.children.length - 2];
    if (!el) return;
    appendObserver.observe(el);
  };

  const appendHeaderObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== appendHeaderObserver) return;
    /**
    * This observer looks at the prepended header (current year). Once this header is fully in view, the year variable should be decremented.
    */

    if (!entries && !entries.length) return;
    if (entries[0].isIntersecting) return;
    const yearRect = yearContainer.getBoundingClientRect();

    if (entries[0].boundingClientRect.top < yearRect.top) {
      $$invalidate(6, year += 1);
      prependHeaderObserver.observe(entries[0].target);
      appendHeaderObserver.disconnect();
    }
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0
  });
  /** This function will append a new month svelte instance to the year container. */

  const appendMonth = (reset = true) => {
    var _a, _b;

    if (!calendar.canGoToNextYear(lastMonth.year) && lastMonth.number === calendar.data.months.length - 1) return;
    lastMonth = calendar.getMonth(lastMonth.number + 1, lastMonth.year);

    if (lastMonth.number === 0 && !(yearContainer.lastElementChild instanceof HTMLHeadingElement)) {
      const header = yearContainer.createEl("h2", {
        text: calendar.getNameForYear(lastMonth.year),
        cls: "fantasy-title"
      });
      trackedMonths.push(header);
      appendHeaderObserver.disconnect();
      appendHeaderObserver.observe(header);
    }

    trackedMonths.push(createMonth(lastMonth, false));

    if (reset) {
      firstMonth = calendar.getMonth(((_a = firstMonth === null || firstMonth === void 0 ? void 0 : firstMonth.number) !== null && _a !== void 0 ? _a : 0) + 1, (_b = firstMonth === null || firstMonth === void 0 ? void 0 : firstMonth.year) !== null && _b !== void 0 ? _b : 1);
    }

    resetPrepend();
  };

  const prependObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== prependObserver) return;
    if (!entries.length) return;
    if (!entries[0].isIntersecting) return;
    prependObserver.disconnect();
    if (!firstMonth) return;
    prependMonth();
    destroy(trackedMonths.pop());
    resetPrepend();
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0.25
  });

  const resetPrepend = () => {
    const el = yearContainer.children[1];
    if (!el) return;
    prependObserver.observe(el);
  };

  const prependHeaderObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== prependHeaderObserver) return;
    /**
    * This observer looks at the prepended header (current year). Once this header is fully in view, the year variable should be decremented.
    */

    if (!entries && !entries.length) return;

    if (entries[0].isIntersecting) {
      $$invalidate(6, year -= 1);
      appendHeaderObserver.observe(entries[0].target);
      prependHeaderObserver.disconnect();
    }
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0
  });
  /** This function will prepend a new month svelte instance to the year container. */

  const prependMonth = (reset = true) => {
    firstMonth = calendar.getMonth(firstMonth.number - 1, firstMonth.year);
    if (!firstMonth) return;
    trackedMonths.unshift(createMonth(firstMonth, true));

    if (firstMonth.number === 0 && !(yearContainer.firstElementChild instanceof HTMLHeadingElement)) {
      const header = createEl("h2", {
        text: calendar.getNameForYear(firstMonth.year),
        cls: "fantasy-title"
      });
      yearContainer.prepend(header);
      trackedMonths.unshift(header);
      prependHeaderObserver.disconnect();
      prependHeaderObserver.observe(header);
    }
    /** Update the last month to the previous last month */


    if (reset) {
      lastMonth = calendar.getMonth(lastMonth.number - 1, lastMonth.year);
    }

    resetAppend();
  };

  const createMonth = (month, anchor) => {
    const svelteInstance = new _Month_svelte__WEBPACK_IMPORTED_MODULE_2__["default"]({
      target: yearContainer,
      anchor: anchor ? yearContainer.children[0] : null,
      props: {
        month,
        fullView: false,
        yearView: true,
        columns,
        weeks: calendar.weekdays.length,
        showPad: false
      },
      context: new Map([["dayView", dayViewStore], ["displayMoons", moonStore]])
    });
    svelteInstance.$on("day-click", e => dispatch("day-click", e.detail));
    svelteInstance.$on("day-doubleclick", e => dispatch("day-doubleclick", e.detail));
    svelteInstance.$on("day-context-menu", e => dispatch("day-context-menu", e.detail));
    svelteInstance.$on("event-mouseover", e => dispatch("event-mouseover", e.detail));
    svelteInstance.$on("event-mouseover", e => dispatch("event-mouseover", e.detail));
    return svelteInstance;
  };

  const destroy = item => {
    if (item instanceof HTMLHeadingElement) {
      item.detach();
    } else {
      item.$destroy();
    }
  };

  const reset = (full = false) => (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function* () {
    for (let item of trackedMonths) {
      destroy(item);
    }

    trackedMonths.splice(0, trackedMonths.length);
    yearContainer.empty();
    yield (0,svelte__WEBPACK_IMPORTED_MODULE_1__.tick)();
    $$invalidate(6, year = calendar.current.year);
    firstMonth = calendar.getMonth(calendar.displayed.month - 1, calendar.displayed.year);
    /* firstMonth = months[0];*/

    lastMonth = firstMonth;
    /* trackedMonths.push(createMonth(firstMonth, false)); */

    for (let i = 0; i < calendar.data.months.length; i++) {
      appendMonth(false);
    }
    /* trackedMonths.push(createMonth(month, false)); */


    prependMonth(false);
    yield (0,svelte__WEBPACK_IMPORTED_MODULE_1__.tick)();
    /** All months are created when year view is reset, so current month exists. */

    const currentEl = yearContainer.querySelector(`#MONTH-${calendar.currentMonth.id}-${year}`);
    currentEl.scrollIntoView(true);

    if (full) {
      scroll();
    }
  });

  (0,svelte__WEBPACK_IMPORTED_MODULE_1__.onDestroy)(() => {
    prependObserver.disconnect();
    appendObserver.disconnect();
    prependHeaderObserver.disconnect();
    appendHeaderObserver.disconnect();
  });
  (0,svelte__WEBPACK_IMPORTED_MODULE_1__.onMount)(reset);

  const scroll = () => (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0, void 0, void 0, function* () {
    yield (0,svelte__WEBPACK_IMPORTED_MODULE_1__.tick)();
    prependObserver.observe(yearContainer.children[1]);
    appendObserver.observe(yearContainer.children[yearContainer.children.length - 2]);
  });

  function next_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function previous_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  const reset_handler = () => reset(true);

  function settings_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function div0_binding($$value) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      yearContainer = $$value;
      $$invalidate(2, yearContainer);
    });
  }

  $$self.$$set = $$props => {
    if ('current' in $$props) $$invalidate(0, current = $$props.current);
    if ('year' in $$props) $$invalidate(6, year = $$props.year);
    if ('columns' in $$props) $$invalidate(7, columns = $$props.columns);
    if ('fullView' in $$props) $$invalidate(1, fullView = $$props.fullView);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*calendar, year*/
    320) {
      $: $$invalidate(3, yearDisplay = calendar.getNameForYear(year));
    }
  };

  return [current, fullView, yearContainer, yearDisplay, reset, scroll, year, columns, calendar, next_handler, previous_handler, reset_handler, settings_handler, div0_binding];
}

class YearView extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      current: 0,
      year: 6,
      columns: 7,
      fullView: 1
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YearView);

/***/ }),

/***/ "./src/view/ui/YearViewBig.svelte":
/*!****************************************!*\
  !*** ./src/view/ui/YearViewBig.svelte ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var svelte__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svelte */ "./node_modules/svelte/index.mjs");
/* harmony import */ var _YearNav_svelte__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./YearNav.svelte */ "./src/view/ui/YearNav.svelte");
/* harmony import */ var _YearViewContainer_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./YearViewContainer.svelte */ "./src/view/ui/YearViewContainer.svelte");
/* src\view\ui\YearViewBig.svelte generated by Svelte v3.44.3 */







function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-1xpvbi", ".year-view.svelte-1xpvbi{height:100%;position:relative;display:flex;flex-direction:column}.year-container.svelte-1xpvbi{flex:1;overflow:auto}");
}

function create_fragment(ctx) {
  let div1;
  let yearnav;
  let t;
  let div0;
  let current;
  yearnav = new _YearNav_svelte__WEBPACK_IMPORTED_MODULE_3__["default"]({
    props: {
      year:
      /*yearDisplay*/
      ctx[2],
      current:
      /*current*/
      ctx[0],
      arrows: true
    }
  });
  yearnav.$on("next",
  /*next_handler*/
  ctx[9]);
  yearnav.$on("previous",
  /*previous_handler*/
  ctx[10]);
  yearnav.$on("reset",
  /*reset_handler*/
  ctx[11]);
  yearnav.$on("settings",
  /*settings_handler*/
  ctx[12]);
  return {
    c() {
      div1 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(yearnav.$$.fragment);
      t = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.space)();
      div0 = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div0, "class", "year-container svelte-1xpvbi");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div1, "class", "year-view svelte-1xpvbi");
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div1, anchor);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(yearnav, div1, null);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, t);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append)(div1, div0);
      /*div0_binding*/

      ctx[13](div0);
      current = true;
    },

    p(ctx, [dirty]) {
      const yearnav_changes = {};
      if (dirty &
      /*yearDisplay*/
      4) yearnav_changes.year =
      /*yearDisplay*/
      ctx[2];
      if (dirty &
      /*current*/
      1) yearnav_changes.current =
      /*current*/
      ctx[0];
      yearnav.$set(yearnav_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(yearnav.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(yearnav.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div1);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(yearnav);
      /*div0_binding*/

      ctx[13](null);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let yearDisplay;
  const dispatch = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.createEventDispatcher)();
  const calendarStore = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.getContext)("calendar");
  const dayViewStore = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.getContext)("dayView");
  const moonStore = (0,svelte__WEBPACK_IMPORTED_MODULE_2__.getContext)("displayMoons");
  let calendar;
  calendarStore.subscribe(c => {
    $$invalidate(8, calendar = c);
  });
  let {
    year
  } = $$props;
  let {
    current
  } = $$props;
  let {
    columns
  } = $$props;
  let yearContainer;
  /** Setup for eventual infinite scroll of big year view. */

  const createYear = (year, anchor = false) => {
    const months = calendar.getMonthsForYear(year);
    const svelteInstance = new _YearViewContainer_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
      target: yearContainer,
      anchor: anchor ? yearContainer.children[0] : null,
      props: {
        months,
        fullView: true,
        columns
      },
      context: new Map([["dayView", dayViewStore], ["displayMoons", moonStore]])
    });
    svelteInstance.$on("day-click", e => dispatch("day-click", e.detail));
    svelteInstance.$on("day-doubleclick", e => dispatch("day-doubleclick", e.detail));
    svelteInstance.$on("day-context-menu", e => dispatch("day-context-menu", e.detail));
    svelteInstance.$on("event-mouseover", e => dispatch("event-mouseover", e.detail));
    svelteInstance.$on("event-mouseover", e => dispatch("event-mouseover", e.detail));
    return svelteInstance;
  };

  const destroy = item => {
    if (item instanceof HTMLHeadingElement) {
      item.detach();
    } else {
      item.$destroy();
    }
  };

  const years = [];

  const next = () => {
    if (!calendar.canGoToNextYear(year)) {
      new obsidian__WEBPACK_IMPORTED_MODULE_1__.Notice("This is the last year. Additional years can be created in settings.");
      return;
    }

    $$invalidate(6, year = year + 1);
    reset(year);
  };

  const previous = () => {
    if (year === 1) {
      new obsidian__WEBPACK_IMPORTED_MODULE_1__.Notice("This is the earliest year.");
      return;
    }

    $$invalidate(6, year = year - 1);
    reset(year);
  };

  const currentYear = () => {
    $$invalidate(6, year = calendar.current.year);
    reset(year);
  };

  const reset = year => (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(void 0, void 0, void 0, function* () {
    years.forEach(el => destroy(el));
    yearContainer.empty();
    yield (0,svelte__WEBPACK_IMPORTED_MODULE_2__.tick)();
    year = year;
    years.push(createYear(year));
  });

  (0,svelte__WEBPACK_IMPORTED_MODULE_2__.onMount)(() => years.push(createYear(year)));

  const next_handler = () => next();

  const previous_handler = () => previous();

  const reset_handler = () => currentYear();

  function settings_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function div0_binding($$value) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      yearContainer = $$value;
      $$invalidate(1, yearContainer);
    });
  }

  $$self.$$set = $$props => {
    if ('year' in $$props) $$invalidate(6, year = $$props.year);
    if ('current' in $$props) $$invalidate(0, current = $$props.current);
    if ('columns' in $$props) $$invalidate(7, columns = $$props.columns);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*calendar, year*/
    320) {
      $: $$invalidate(2, yearDisplay = calendar.getNameForYear(year));
    }
  };

  return [current, yearContainer, yearDisplay, next, previous, currentYear, year, columns, calendar, next_handler, previous_handler, reset_handler, settings_handler, div0_binding];
}

class YearViewBig extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      year: 6,
      current: 0,
      columns: 7
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YearViewBig);

/***/ }),

/***/ "./src/view/ui/YearViewContainer.svelte":
/*!**********************************************!*\
  !*** ./src/view/ui/YearViewContainer.svelte ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svelte_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/internal */ "./node_modules/svelte/internal/index.mjs");
/* harmony import */ var _Month_svelte__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Month.svelte */ "./src/view/ui/Month.svelte");
/* src\view\ui\YearViewContainer.svelte generated by Svelte v3.44.3 */



function add_css(target) {
  (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.append_styles)(target, "svelte-ztrrn8", ".year.svelte-ztrrn8{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;overflow:auto;flex:1}.year.svelte-ztrrn8:not(.full-view){grid-template-columns:1fr}");
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
} // (8:4) {#each months as month}


function create_each_block(ctx) {
  let month;
  let current;
  month = new _Month_svelte__WEBPACK_IMPORTED_MODULE_1__["default"]({
    props: {
      month:
      /*month*/
      ctx[8],
      fullView: false,
      yearView: true,
      columns:
      /*columns*/
      ctx[2],
      weeks:
      /*month*/
      ctx[8].calendar.weekdays.length,
      showPad: false
    }
  });
  month.$on("day-click",
  /*day_click_handler*/
  ctx[3]);
  month.$on("day-doubleclick",
  /*day_doubleclick_handler*/
  ctx[4]);
  month.$on("day-context-menu",
  /*day_context_menu_handler*/
  ctx[5]);
  month.$on("event-click",
  /*event_click_handler*/
  ctx[6]);
  month.$on("event-mouseover",
  /*event_mouseover_handler*/
  ctx[7]);
  return {
    c() {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.create_component)(month.$$.fragment);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.mount_component)(month, target, anchor);
      current = true;
    },

    p(ctx, dirty) {
      const month_changes = {};
      if (dirty &
      /*months*/
      2) month_changes.month =
      /*month*/
      ctx[8];
      if (dirty &
      /*columns*/
      4) month_changes.columns =
      /*columns*/
      ctx[2];
      if (dirty &
      /*months*/
      2) month_changes.weeks =
      /*month*/
      ctx[8].calendar.weekdays.length;
      month.$set(month_changes);
    },

    i(local) {
      if (current) return;
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(month.$$.fragment, local);
      current = true;
    },

    o(local) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(month.$$.fragment, local);
      current = false;
    },

    d(detaching) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_component)(month, detaching);
    }

  };
}

function create_fragment(ctx) {
  let div;
  let current;
  let each_value =
  /*months*/
  ctx[1];
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  return {
    c() {
      div = (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.element)("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.attr)(div, "class", "year svelte-ztrrn8");
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
      /*fullView*/
      ctx[0]);
    },

    m(target, anchor) {
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.insert)(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },

    p(ctx, [dirty]) {
      if (dirty &
      /*months, columns*/
      6) {
        each_value =
        /*months*/
        ctx[1];
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.group_outros)();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.check_outros)();
      }

      if (dirty &
      /*fullView*/
      1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.toggle_class)(div, "full-view",
        /*fullView*/
        ctx[0]);
      }
    },

    i(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_in)(each_blocks[i]);
      }

      current = true;
    },

    o(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.transition_out)(each_blocks[i]);
      }

      current = false;
    },

    d(detaching) {
      if (detaching) (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.detach)(div);
      (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.destroy_each)(each_blocks, detaching);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  let {
    fullView
  } = $$props;
  let {
    months
  } = $$props;
  let {
    columns
  } = $$props;

  function day_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_doubleclick_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function day_context_menu_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_click_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  function event_mouseover_handler(event) {
    svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bubble.call(this, $$self, event);
  }

  $$self.$$set = $$props => {
    if ('fullView' in $$props) $$invalidate(0, fullView = $$props.fullView);
    if ('months' in $$props) $$invalidate(1, months = $$props.months);
    if ('columns' in $$props) $$invalidate(2, columns = $$props.columns);
  };

  return [fullView, months, columns, day_click_handler, day_doubleclick_handler, day_context_menu_handler, event_click_handler, event_mouseover_handler];
}

class YearViewContainer extends svelte_internal__WEBPACK_IMPORTED_MODULE_0__.SvelteComponent {
  constructor(options) {
    super();
    (0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.init)(this, options, instance, create_fragment, svelte_internal__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal, {
      fullView: 0,
      months: 1,
      columns: 2
    }, add_css);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (YearViewContainer);

/***/ }),

/***/ "./node_modules/chroma-js/chroma.js":
/*!******************************************!*\
  !*** ./node_modules/chroma-js/chroma.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */

(function (global, factory) {
     true ? module.exports = factory() :
    0;
}(this, (function () { 'use strict';

    var limit = function (x, min, max) {
        if ( min === void 0 ) min=0;
        if ( max === void 0 ) max=1;

        return x < min ? min : x > max ? max : x;
    };

    var clip_rgb = function (rgb) {
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for (var i=0; i<=3; i++) {
            if (i < 3) {
                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }
                rgb[i] = limit(rgb[i], 0, 255);
            } else if (i === 3) {
                rgb[i] = limit(rgb[i], 0, 1);
            }
        }
        return rgb;
    };

    // ported from jQuery's $.type
    var classToType = {};
    for (var i = 0, list = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i < list.length; i += 1) {
        var name = list[i];

        classToType[("[object " + name + "]")] = name.toLowerCase();
    }
    var type = function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || "object";
    };

    var unpack = function (args, keyOrder) {
        if ( keyOrder === void 0 ) keyOrder=null;

    	// if called with more than 3 arguments, we return the arguments
        if (args.length >= 3) { return Array.prototype.slice.call(args); }
        // with less than 3 args we check if first arg is object
        // and use the keyOrder string to extract and sort properties
    	if (type(args[0]) == 'object' && keyOrder) {
    		return keyOrder.split('')
    			.filter(function (k) { return args[0][k] !== undefined; })
    			.map(function (k) { return args[0][k]; });
    	}
    	// otherwise we just return the first argument
    	// (which we suppose is an array of args)
        return args[0];
    };

    var last = function (args) {
        if (args.length < 2) { return null; }
        var l = args.length-1;
        if (type(args[l]) == 'string') { return args[l].toLowerCase(); }
        return null;
    };

    var PI = Math.PI;

    var utils = {
    	clip_rgb: clip_rgb,
    	limit: limit,
    	type: type,
    	unpack: unpack,
    	last: last,
    	PI: PI,
    	TWOPI: PI*2,
    	PITHIRD: PI/3,
    	DEG2RAD: PI / 180,
    	RAD2DEG: 180 / PI
    };

    var input = {
    	format: {},
    	autodetect: []
    };

    var last$1 = utils.last;
    var clip_rgb$1 = utils.clip_rgb;
    var type$1 = utils.type;


    var Color = function Color() {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var me = this;
        if (type$1(args[0]) === 'object' &&
            args[0].constructor &&
            args[0].constructor === this.constructor) {
            // the argument is already a Color instance
            return args[0];
        }

        // last argument could be the mode
        var mode = last$1(args);
        var autodetect = false;

        if (!mode) {
            autodetect = true;
            if (!input.sorted) {
                input.autodetect = input.autodetect.sort(function (a,b) { return b.p - a.p; });
                input.sorted = true;
            }
            // auto-detect format
            for (var i = 0, list = input.autodetect; i < list.length; i += 1) {
                var chk = list[i];

                mode = chk.test.apply(chk, args);
                if (mode) { break; }
            }
        }

        if (input.format[mode]) {
            var rgb = input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));
            me._rgb = clip_rgb$1(rgb);
        } else {
            throw new Error('unknown format: '+args);
        }

        // add alpha channel
        if (me._rgb.length === 3) { me._rgb.push(1); }
    };

    Color.prototype.toString = function toString () {
        if (type$1(this.hex) == 'function') { return this.hex(); }
        return ("[" + (this._rgb.join(',')) + "]");
    };

    var Color_1 = Color;

    var chroma = function () {
    	var args = [], len = arguments.length;
    	while ( len-- ) args[ len ] = arguments[ len ];

    	return new (Function.prototype.bind.apply( chroma.Color, [ null ].concat( args) ));
    };

    chroma.Color = Color_1;
    chroma.version = '2.1.2';

    var chroma_1 = chroma;

    var unpack$1 = utils.unpack;
    var max = Math.max;

    var rgb2cmyk = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$1(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r = r / 255;
        g = g / 255;
        b = b / 255;
        var k = 1 - max(r,max(g,b));
        var f = k < 1 ? 1 / (1-k) : 0;
        var c = (1-r-k) * f;
        var m = (1-g-k) * f;
        var y = (1-b-k) * f;
        return [c,m,y,k];
    };

    var rgb2cmyk_1 = rgb2cmyk;

    var unpack$2 = utils.unpack;

    var cmyk2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$2(args, 'cmyk');
        var c = args[0];
        var m = args[1];
        var y = args[2];
        var k = args[3];
        var alpha = args.length > 4 ? args[4] : 1;
        if (k === 1) { return [0,0,0,alpha]; }
        return [
            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r
            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g
            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b
            alpha
        ];
    };

    var cmyk2rgb_1 = cmyk2rgb;

    var unpack$3 = utils.unpack;
    var type$2 = utils.type;



    Color_1.prototype.cmyk = function() {
        return rgb2cmyk_1(this._rgb);
    };

    chroma_1.cmyk = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['cmyk']) ));
    };

    input.format.cmyk = cmyk2rgb_1;

    input.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$3(args, 'cmyk');
            if (type$2(args) === 'array' && args.length === 4) {
                return 'cmyk';
            }
        }
    });

    var unpack$4 = utils.unpack;
    var last$2 = utils.last;
    var rnd = function (a) { return Math.round(a*100)/100; };

    /*
     * supported arguments:
     * - hsl2css(h,s,l)
     * - hsl2css(h,s,l,a)
     * - hsl2css([h,s,l], mode)
     * - hsl2css([h,s,l,a], mode)
     * - hsl2css({h,s,l,a}, mode)
     */
    var hsl2css = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var hsla = unpack$4(args, 'hsla');
        var mode = last$2(args) || 'lsa';
        hsla[0] = rnd(hsla[0] || 0);
        hsla[1] = rnd(hsla[1]*100) + '%';
        hsla[2] = rnd(hsla[2]*100) + '%';
        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {
            hsla[3] = hsla.length > 3 ? hsla[3] : 1;
            mode = 'hsla';
        } else {
            hsla.length = 3;
        }
        return (mode + "(" + (hsla.join(',')) + ")");
    };

    var hsl2css_1 = hsl2css;

    var unpack$5 = utils.unpack;

    /*
     * supported arguments:
     * - rgb2hsl(r,g,b)
     * - rgb2hsl(r,g,b,a)
     * - rgb2hsl([r,g,b])
     * - rgb2hsl([r,g,b,a])
     * - rgb2hsl({r,g,b,a})
     */
    var rgb2hsl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$5(args, 'rgba');
        var r = args[0];
        var g = args[1];
        var b = args[2];

        r /= 255;
        g /= 255;
        b /= 255;

        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);

        var l = (max + min) / 2;
        var s, h;

        if (max === min){
            s = 0;
            h = Number.NaN;
        } else {
            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
        }

        if (r == max) { h = (g - b) / (max - min); }
        else if (g == max) { h = 2 + (b - r) / (max - min); }
        else if (b == max) { h = 4 + (r - g) / (max - min); }

        h *= 60;
        if (h < 0) { h += 360; }
        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }
        return [h,s,l];
    };

    var rgb2hsl_1 = rgb2hsl;

    var unpack$6 = utils.unpack;
    var last$3 = utils.last;


    var round = Math.round;

    /*
     * supported arguments:
     * - rgb2css(r,g,b)
     * - rgb2css(r,g,b,a)
     * - rgb2css([r,g,b], mode)
     * - rgb2css([r,g,b,a], mode)
     * - rgb2css({r,g,b,a}, mode)
     */
    var rgb2css = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgba = unpack$6(args, 'rgba');
        var mode = last$3(args) || 'rgb';
        if (mode.substr(0,3) == 'hsl') {
            return hsl2css_1(rgb2hsl_1(rgba), mode);
        }
        rgba[0] = round(rgba[0]);
        rgba[1] = round(rgba[1]);
        rgba[2] = round(rgba[2]);
        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {
            rgba[3] = rgba.length > 3 ? rgba[3] : 1;
            mode = 'rgba';
        }
        return (mode + "(" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + ")");
    };

    var rgb2css_1 = rgb2css;

    var unpack$7 = utils.unpack;
    var round$1 = Math.round;

    var hsl2rgb = function () {
        var assign;

        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        args = unpack$7(args, 'hsl');
        var h = args[0];
        var s = args[1];
        var l = args[2];
        var r,g,b;
        if (s === 0) {
            r = g = b = l*255;
        } else {
            var t3 = [0,0,0];
            var c = [0,0,0];
            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;
            var t1 = 2 * l - t2;
            var h_ = h / 360;
            t3[0] = h_ + 1/3;
            t3[1] = h_;
            t3[2] = h_ - 1/3;
            for (var i=0; i<3; i++) {
                if (t3[i] < 0) { t3[i] += 1; }
                if (t3[i] > 1) { t3[i] -= 1; }
                if (6 * t3[i] < 1)
                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }
                else if (2 * t3[i] < 1)
                    { c[i] = t2; }
                else if (3 * t3[i] < 2)
                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }
                else
                    { c[i] = t1; }
            }
            (assign = [round$1(c[0]*255),round$1(c[1]*255),round$1(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);
        }
        if (args.length > 3) {
            // keep alpha channel
            return [r,g,b,args[3]];
        }
        return [r,g,b,1];
    };

    var hsl2rgb_1 = hsl2rgb;

    var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
    var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
    var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
    var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
    var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
    var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;

    var round$2 = Math.round;

    var css2rgb = function (css) {
        css = css.toLowerCase().trim();
        var m;

        if (input.format.named) {
            try {
                return input.format.named(css);
            } catch (e) {
                // eslint-disable-next-line
            }
        }

        // rgb(250,20,0)
        if ((m = css.match(RE_RGB))) {
            var rgb = m.slice(1,4);
            for (var i=0; i<3; i++) {
                rgb[i] = +rgb[i];
            }
            rgb[3] = 1;  // default alpha
            return rgb;
        }

        // rgba(250,20,0,0.4)
        if ((m = css.match(RE_RGBA))) {
            var rgb$1 = m.slice(1,5);
            for (var i$1=0; i$1<4; i$1++) {
                rgb$1[i$1] = +rgb$1[i$1];
            }
            return rgb$1;
        }

        // rgb(100%,0%,0%)
        if ((m = css.match(RE_RGB_PCT))) {
            var rgb$2 = m.slice(1,4);
            for (var i$2=0; i$2<3; i$2++) {
                rgb$2[i$2] = round$2(rgb$2[i$2] * 2.55);
            }
            rgb$2[3] = 1;  // default alpha
            return rgb$2;
        }

        // rgba(100%,0%,0%,0.4)
        if ((m = css.match(RE_RGBA_PCT))) {
            var rgb$3 = m.slice(1,5);
            for (var i$3=0; i$3<3; i$3++) {
                rgb$3[i$3] = round$2(rgb$3[i$3] * 2.55);
            }
            rgb$3[3] = +rgb$3[3];
            return rgb$3;
        }

        // hsl(0,100%,50%)
        if ((m = css.match(RE_HSL))) {
            var hsl = m.slice(1,4);
            hsl[1] *= 0.01;
            hsl[2] *= 0.01;
            var rgb$4 = hsl2rgb_1(hsl);
            rgb$4[3] = 1;
            return rgb$4;
        }

        // hsla(0,100%,50%,0.5)
        if ((m = css.match(RE_HSLA))) {
            var hsl$1 = m.slice(1,4);
            hsl$1[1] *= 0.01;
            hsl$1[2] *= 0.01;
            var rgb$5 = hsl2rgb_1(hsl$1);
            rgb$5[3] = +m[4];  // default alpha = 1
            return rgb$5;
        }
    };

    css2rgb.test = function (s) {
        return RE_RGB.test(s) ||
            RE_RGBA.test(s) ||
            RE_RGB_PCT.test(s) ||
            RE_RGBA_PCT.test(s) ||
            RE_HSL.test(s) ||
            RE_HSLA.test(s);
    };

    var css2rgb_1 = css2rgb;

    var type$3 = utils.type;




    Color_1.prototype.css = function(mode) {
        return rgb2css_1(this._rgb, mode);
    };

    chroma_1.css = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['css']) ));
    };

    input.format.css = css2rgb_1;

    input.autodetect.push({
        p: 5,
        test: function (h) {
            var rest = [], len = arguments.length - 1;
            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

            if (!rest.length && type$3(h) === 'string' && css2rgb_1.test(h)) {
                return 'css';
            }
        }
    });

    var unpack$8 = utils.unpack;

    input.format.gl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgb = unpack$8(args, 'rgba');
        rgb[0] *= 255;
        rgb[1] *= 255;
        rgb[2] *= 255;
        return rgb;
    };

    chroma_1.gl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['gl']) ));
    };

    Color_1.prototype.gl = function() {
        var rgb = this._rgb;
        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];
    };

    var unpack$9 = utils.unpack;

    var rgb2hcg = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$9(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var c = delta * 100 / 255;
        var _g = min / (255 - delta) * 100;
        var h;
        if (delta === 0) {
            h = Number.NaN;
        } else {
            if (r === max) { h = (g - b) / delta; }
            if (g === max) { h = 2+(b - r) / delta; }
            if (b === max) { h = 4+(r - g) / delta; }
            h *= 60;
            if (h < 0) { h += 360; }
        }
        return [h, c, _g];
    };

    var rgb2hcg_1 = rgb2hcg;

    var unpack$a = utils.unpack;
    var floor = Math.floor;

    /*
     * this is basically just HSV with some minor tweaks
     *
     * hue.. [0..360]
     * chroma .. [0..1]
     * grayness .. [0..1]
     */

    var hcg2rgb = function () {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;

        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        args = unpack$a(args, 'hcg');
        var h = args[0];
        var c = args[1];
        var _g = args[2];
        var r,g,b;
        _g = _g * 255;
        var _c = c * 255;
        if (c === 0) {
            r = g = b = _g;
        } else {
            if (h === 360) { h = 0; }
            if (h > 360) { h -= 360; }
            if (h < 0) { h += 360; }
            h /= 60;
            var i = floor(h);
            var f = h - i;
            var p = _g * (1 - c);
            var q = p + _c * (1 - f);
            var t = p + _c * f;
            var v = p + _c;
            switch (i) {
                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break
                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break
                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break
                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break
                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break
                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break
            }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    var hcg2rgb_1 = hcg2rgb;

    var unpack$b = utils.unpack;
    var type$4 = utils.type;






    Color_1.prototype.hcg = function() {
        return rgb2hcg_1(this._rgb);
    };

    chroma_1.hcg = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcg']) ));
    };

    input.format.hcg = hcg2rgb_1;

    input.autodetect.push({
        p: 1,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$b(args, 'hcg');
            if (type$4(args) === 'array' && args.length === 3) {
                return 'hcg';
            }
        }
    });

    var unpack$c = utils.unpack;
    var last$4 = utils.last;
    var round$3 = Math.round;

    var rgb2hex = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$c(args, 'rgba');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var a = ref[3];
        var mode = last$4(args) || 'auto';
        if (a === undefined) { a = 1; }
        if (mode === 'auto') {
            mode = a < 1 ? 'rgba' : 'rgb';
        }
        r = round$3(r);
        g = round$3(g);
        b = round$3(b);
        var u = r << 16 | g << 8 | b;
        var str = "000000" + u.toString(16); //#.toUpperCase();
        str = str.substr(str.length - 6);
        var hxa = '0' + round$3(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        switch (mode.toLowerCase()) {
            case 'rgba': return ("#" + str + hxa);
            case 'argb': return ("#" + hxa + str);
            default: return ("#" + str);
        }
    };

    var rgb2hex_1 = rgb2hex;

    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;

    var hex2rgb = function (hex) {
        if (hex.match(RE_HEX)) {
            // remove optional leading #
            if (hex.length === 4 || hex.length === 7) {
                hex = hex.substr(1);
            }
            // expand short-notation to full six-digit
            if (hex.length === 3) {
                hex = hex.split('');
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            }
            var u = parseInt(hex, 16);
            var r = u >> 16;
            var g = u >> 8 & 0xFF;
            var b = u & 0xFF;
            return [r,g,b,1];
        }

        // match rgba hex format, eg #FF000077
        if (hex.match(RE_HEXA)) {
            if (hex.length === 5 || hex.length === 9) {
                // remove optional leading #
                hex = hex.substr(1);
            }
            // expand short-notation to full eight-digit
            if (hex.length === 4) {
                hex = hex.split('');
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];
            }
            var u$1 = parseInt(hex, 16);
            var r$1 = u$1 >> 24 & 0xFF;
            var g$1 = u$1 >> 16 & 0xFF;
            var b$1 = u$1 >> 8 & 0xFF;
            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;
            return [r$1,g$1,b$1,a];
        }

        // we used to check for css colors here
        // if _input.css? and rgb = _input.css hex
        //     return rgb

        throw new Error(("unknown hex color: " + hex));
    };

    var hex2rgb_1 = hex2rgb;

    var type$5 = utils.type;




    Color_1.prototype.hex = function(mode) {
        return rgb2hex_1(this._rgb, mode);
    };

    chroma_1.hex = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hex']) ));
    };

    input.format.hex = hex2rgb_1;
    input.autodetect.push({
        p: 4,
        test: function (h) {
            var rest = [], len = arguments.length - 1;
            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

            if (!rest.length && type$5(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {
                return 'hex';
            }
        }
    });

    var unpack$d = utils.unpack;
    var TWOPI = utils.TWOPI;
    var min = Math.min;
    var sqrt = Math.sqrt;
    var acos = Math.acos;

    var rgb2hsi = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
        */
        var ref = unpack$d(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var h;
        var min_ = min(r,g,b);
        var i = (r+g+b) / 3;
        var s = i > 0 ? 1 - min_/i : 0;
        if (s === 0) {
            h = NaN;
        } else {
            h = ((r-g)+(r-b)) / 2;
            h /= sqrt((r-g)*(r-g) + (r-b)*(g-b));
            h = acos(h);
            if (b > g) {
                h = TWOPI - h;
            }
            h /= TWOPI;
        }
        return [h*360,s,i];
    };

    var rgb2hsi_1 = rgb2hsi;

    var unpack$e = utils.unpack;
    var limit$1 = utils.limit;
    var TWOPI$1 = utils.TWOPI;
    var PITHIRD = utils.PITHIRD;
    var cos = Math.cos;

    /*
     * hue [0..360]
     * saturation [0..1]
     * intensity [0..1]
     */
    var hsi2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
        */
        args = unpack$e(args, 'hsi');
        var h = args[0];
        var s = args[1];
        var i = args[2];
        var r,g,b;

        if (isNaN(h)) { h = 0; }
        if (isNaN(s)) { s = 0; }
        // normalize hue
        if (h > 360) { h -= 360; }
        if (h < 0) { h += 360; }
        h /= 360;
        if (h < 1/3) {
            b = (1-s)/3;
            r = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;
            g = 1 - (b+r);
        } else if (h < 2/3) {
            h -= 1/3;
            r = (1-s)/3;
            g = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;
            b = 1 - (r+g);
        } else {
            h -= 2/3;
            g = (1-s)/3;
            b = (1+s*cos(TWOPI$1*h)/cos(PITHIRD-TWOPI$1*h))/3;
            r = 1 - (g+b);
        }
        r = limit$1(i*r*3);
        g = limit$1(i*g*3);
        b = limit$1(i*b*3);
        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];
    };

    var hsi2rgb_1 = hsi2rgb;

    var unpack$f = utils.unpack;
    var type$6 = utils.type;






    Color_1.prototype.hsi = function() {
        return rgb2hsi_1(this._rgb);
    };

    chroma_1.hsi = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsi']) ));
    };

    input.format.hsi = hsi2rgb_1;

    input.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$f(args, 'hsi');
            if (type$6(args) === 'array' && args.length === 3) {
                return 'hsi';
            }
        }
    });

    var unpack$g = utils.unpack;
    var type$7 = utils.type;






    Color_1.prototype.hsl = function() {
        return rgb2hsl_1(this._rgb);
    };

    chroma_1.hsl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsl']) ));
    };

    input.format.hsl = hsl2rgb_1;

    input.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$g(args, 'hsl');
            if (type$7(args) === 'array' && args.length === 3) {
                return 'hsl';
            }
        }
    });

    var unpack$h = utils.unpack;
    var min$1 = Math.min;
    var max$1 = Math.max;

    /*
     * supported arguments:
     * - rgb2hsv(r,g,b)
     * - rgb2hsv([r,g,b])
     * - rgb2hsv({r,g,b})
     */
    var rgb2hsl$1 = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$h(args, 'rgb');
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var min_ = min$1(r, g, b);
        var max_ = max$1(r, g, b);
        var delta = max_ - min_;
        var h,s,v;
        v = max_ / 255.0;
        if (max_ === 0) {
            h = Number.NaN;
            s = 0;
        } else {
            s = delta / max_;
            if (r === max_) { h = (g - b) / delta; }
            if (g === max_) { h = 2+(b - r) / delta; }
            if (b === max_) { h = 4+(r - g) / delta; }
            h *= 60;
            if (h < 0) { h += 360; }
        }
        return [h, s, v]
    };

    var rgb2hsv = rgb2hsl$1;

    var unpack$i = utils.unpack;
    var floor$1 = Math.floor;

    var hsv2rgb = function () {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;

        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        args = unpack$i(args, 'hsv');
        var h = args[0];
        var s = args[1];
        var v = args[2];
        var r,g,b;
        v *= 255;
        if (s === 0) {
            r = g = b = v;
        } else {
            if (h === 360) { h = 0; }
            if (h > 360) { h -= 360; }
            if (h < 0) { h += 360; }
            h /= 60;

            var i = floor$1(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));

            switch (i) {
                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break
                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break
                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break
                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break
                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break
                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break
            }
        }
        return [r,g,b,args.length > 3?args[3]:1];
    };

    var hsv2rgb_1 = hsv2rgb;

    var unpack$j = utils.unpack;
    var type$8 = utils.type;






    Color_1.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
    };

    chroma_1.hsv = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hsv']) ));
    };

    input.format.hsv = hsv2rgb_1;

    input.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$j(args, 'hsv');
            if (type$8(args) === 'array' && args.length === 3) {
                return 'hsv';
            }
        }
    });

    var labConstants = {
        // Corresponds roughly to RGB brighter/darker
        Kn: 18,

        // D65 standard referent
        Xn: 0.950470,
        Yn: 1,
        Zn: 1.088830,

        t0: 0.137931034,  // 4 / 29
        t1: 0.206896552,  // 6 / 29
        t2: 0.12841855,   // 3 * t1 * t1
        t3: 0.008856452,  // t1 * t1 * t1
    };

    var unpack$k = utils.unpack;
    var pow = Math.pow;

    var rgb2lab = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$k(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2xyz(r,g,b);
        var x = ref$1[0];
        var y = ref$1[1];
        var z = ref$1[2];
        var l = 116 * y - 16;
        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];
    };

    var rgb_xyz = function (r) {
        if ((r /= 255) <= 0.04045) { return r / 12.92; }
        return pow((r + 0.055) / 1.055, 2.4);
    };

    var xyz_lab = function (t) {
        if (t > labConstants.t3) { return pow(t, 1 / 3); }
        return t / labConstants.t2 + labConstants.t0;
    };

    var rgb2xyz = function (r,g,b) {
        r = rgb_xyz(r);
        g = rgb_xyz(g);
        b = rgb_xyz(b);
        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / labConstants.Xn);
        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / labConstants.Yn);
        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / labConstants.Zn);
        return [x,y,z];
    };

    var rgb2lab_1 = rgb2lab;

    var unpack$l = utils.unpack;
    var pow$1 = Math.pow;

    /*
     * L* [0..100]
     * a [-100..100]
     * b [-100..100]
     */
    var lab2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$l(args, 'lab');
        var l = args[0];
        var a = args[1];
        var b = args[2];
        var x,y,z, r,g,b_;

        y = (l + 16) / 116;
        x = isNaN(a) ? y : y + a / 500;
        z = isNaN(b) ? y : y - b / 200;

        y = labConstants.Yn * lab_xyz(y);
        x = labConstants.Xn * lab_xyz(x);
        z = labConstants.Zn * lab_xyz(z);

        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB
        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);

        return [r,g,b_,args.length > 3 ? args[3] : 1];
    };

    var xyz_rgb = function (r) {
        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$1(r, 1 / 2.4) - 0.055)
    };

    var lab_xyz = function (t) {
        return t > labConstants.t1 ? t * t * t : labConstants.t2 * (t - labConstants.t0)
    };

    var lab2rgb_1 = lab2rgb;

    var unpack$m = utils.unpack;
    var type$9 = utils.type;






    Color_1.prototype.lab = function() {
        return rgb2lab_1(this._rgb);
    };

    chroma_1.lab = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lab']) ));
    };

    input.format.lab = lab2rgb_1;

    input.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$m(args, 'lab');
            if (type$9(args) === 'array' && args.length === 3) {
                return 'lab';
            }
        }
    });

    var unpack$n = utils.unpack;
    var RAD2DEG = utils.RAD2DEG;
    var sqrt$1 = Math.sqrt;
    var atan2 = Math.atan2;
    var round$4 = Math.round;

    var lab2lch = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$n(args, 'lab');
        var l = ref[0];
        var a = ref[1];
        var b = ref[2];
        var c = sqrt$1(a * a + b * b);
        var h = (atan2(b, a) * RAD2DEG + 360) % 360;
        if (round$4(c*10000) === 0) { h = Number.NaN; }
        return [l, c, h];
    };

    var lab2lch_1 = lab2lch;

    var unpack$o = utils.unpack;



    var rgb2lch = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$o(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2lab_1(r,g,b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch_1(l,a,b_);
    };

    var rgb2lch_1 = rgb2lch;

    var unpack$p = utils.unpack;
    var DEG2RAD = utils.DEG2RAD;
    var sin = Math.sin;
    var cos$1 = Math.cos;

    var lch2lab = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        /*
        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
        These formulas were invented by David Dalrymple to obtain maximum contrast without going
        out of gamut if the parameters are in the range 0-1.

        A saturation multiplier was added by Gregor Aisch
        */
        var ref = unpack$p(args, 'lch');
        var l = ref[0];
        var c = ref[1];
        var h = ref[2];
        if (isNaN(h)) { h = 0; }
        h = h * DEG2RAD;
        return [l, cos$1(h) * c, sin(h) * c]
    };

    var lch2lab_1 = lch2lab;

    var unpack$q = utils.unpack;



    var lch2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        args = unpack$q(args, 'lch');
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab_1 (l,c,h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = lab2rgb_1 (L,a,b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    var lch2rgb_1 = lch2rgb;

    var unpack$r = utils.unpack;


    var hcl2rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var hcl = unpack$r(args, 'hcl').reverse();
        return lch2rgb_1.apply(void 0, hcl);
    };

    var hcl2rgb_1 = hcl2rgb;

    var unpack$s = utils.unpack;
    var type$a = utils.type;






    Color_1.prototype.lch = function() { return rgb2lch_1(this._rgb); };
    Color_1.prototype.hcl = function() { return rgb2lch_1(this._rgb).reverse(); };

    chroma_1.lch = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['lch']) ));
    };
    chroma_1.hcl = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['hcl']) ));
    };

    input.format.lch = lch2rgb_1;
    input.format.hcl = hcl2rgb_1;

    ['lch','hcl'].forEach(function (m) { return input.autodetect.push({
        p: 2,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$s(args, m);
            if (type$a(args) === 'array' && args.length === 3) {
                return m;
            }
        }
    }); });

    /**
    	X11 color names

    	http://www.w3.org/TR/css3-color/#svg-color
    */

    var w3cx11 = {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflower: '#6495ed',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        laserlemon: '#ffff54',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrod: '#fafad2',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        maroon2: '#7f0000',
        maroon3: '#b03060',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        purple2: '#7f007f',
        purple3: '#a020f0',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32'
    };

    var w3cx11_1 = w3cx11;

    var type$b = utils.type;





    Color_1.prototype.name = function() {
        var hex = rgb2hex_1(this._rgb, 'rgb');
        for (var i = 0, list = Object.keys(w3cx11_1); i < list.length; i += 1) {
            var n = list[i];

            if (w3cx11_1[n] === hex) { return n.toLowerCase(); }
        }
        return hex;
    };

    input.format.named = function (name) {
        name = name.toLowerCase();
        if (w3cx11_1[name]) { return hex2rgb_1(w3cx11_1[name]); }
        throw new Error('unknown color name: '+name);
    };

    input.autodetect.push({
        p: 5,
        test: function (h) {
            var rest = [], len = arguments.length - 1;
            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

            if (!rest.length && type$b(h) === 'string' && w3cx11_1[h.toLowerCase()]) {
                return 'named';
            }
        }
    });

    var unpack$t = utils.unpack;

    var rgb2num = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var ref = unpack$t(args, 'rgb');
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        return (r << 16) + (g << 8) + b;
    };

    var rgb2num_1 = rgb2num;

    var type$c = utils.type;

    var num2rgb = function (num) {
        if (type$c(num) == "number" && num >= 0 && num <= 0xFFFFFF) {
            var r = num >> 16;
            var g = (num >> 8) & 0xFF;
            var b = num & 0xFF;
            return [r,g,b,1];
        }
        throw new Error("unknown num color: "+num);
    };

    var num2rgb_1 = num2rgb;

    var type$d = utils.type;



    Color_1.prototype.num = function() {
        return rgb2num_1(this._rgb);
    };

    chroma_1.num = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['num']) ));
    };

    input.format.num = num2rgb_1;

    input.autodetect.push({
        p: 5,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            if (args.length === 1 && type$d(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {
                return 'num';
            }
        }
    });

    var unpack$u = utils.unpack;
    var type$e = utils.type;
    var round$5 = Math.round;

    Color_1.prototype.rgb = function(rnd) {
        if ( rnd === void 0 ) rnd=true;

        if (rnd === false) { return this._rgb.slice(0,3); }
        return this._rgb.slice(0,3).map(round$5);
    };

    Color_1.prototype.rgba = function(rnd) {
        if ( rnd === void 0 ) rnd=true;

        return this._rgb.slice(0,4).map(function (v,i) {
            return i<3 ? (rnd === false ? v : round$5(v)) : v;
        });
    };

    chroma_1.rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['rgb']) ));
    };

    input.format.rgb = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgba = unpack$u(args, 'rgba');
        if (rgba[3] === undefined) { rgba[3] = 1; }
        return rgba;
    };

    input.autodetect.push({
        p: 3,
        test: function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            args = unpack$u(args, 'rgba');
            if (type$e(args) === 'array' && (args.length === 3 ||
                args.length === 4 && type$e(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {
                return 'rgb';
            }
        }
    });

    /*
     * Based on implementation by Neil Bartlett
     * https://github.com/neilbartlett/color-temperature
     */

    var log = Math.log;

    var temperature2rgb = function (kelvin) {
        var temp = kelvin / 100;
        var r,g,b;
        if (temp < 66) {
            r = 255;
            g = -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log(g);
            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log(b);
        } else {
            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log(r);
            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log(g);
            b = 255;
        }
        return [r,g,b,1];
    };

    var temperature2rgb_1 = temperature2rgb;

    /*
     * Based on implementation by Neil Bartlett
     * https://github.com/neilbartlett/color-temperature
     **/


    var unpack$v = utils.unpack;
    var round$6 = Math.round;

    var rgb2temperature = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var rgb = unpack$v(args, 'rgb');
        var r = rgb[0], b = rgb[2];
        var minTemp = 1000;
        var maxTemp = 40000;
        var eps = 0.4;
        var temp;
        while (maxTemp - minTemp > eps) {
            temp = (maxTemp + minTemp) * 0.5;
            var rgb$1 = temperature2rgb_1(temp);
            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {
                maxTemp = temp;
            } else {
                minTemp = temp;
            }
        }
        return round$6(temp);
    };

    var rgb2temperature_1 = rgb2temperature;

    Color_1.prototype.temp =
    Color_1.prototype.kelvin =
    Color_1.prototype.temperature = function() {
        return rgb2temperature_1(this._rgb);
    };

    chroma_1.temp =
    chroma_1.kelvin =
    chroma_1.temperature = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        return new (Function.prototype.bind.apply( Color_1, [ null ].concat( args, ['temp']) ));
    };

    input.format.temp =
    input.format.kelvin =
    input.format.temperature = temperature2rgb_1;

    var type$f = utils.type;

    Color_1.prototype.alpha = function(a, mutate) {
        if ( mutate === void 0 ) mutate=false;

        if (a !== undefined && type$f(a) === 'number') {
            if (mutate) {
                this._rgb[3] = a;
                return this;
            }
            return new Color_1([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');
        }
        return this._rgb[3];
    };

    Color_1.prototype.clipped = function() {
        return this._rgb._clipped || false;
    };

    Color_1.prototype.darken = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	var me = this;
    	var lab = me.lab();
    	lab[0] -= labConstants.Kn * amount;
    	return new Color_1(lab, 'lab').alpha(me.alpha(), true);
    };

    Color_1.prototype.brighten = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	return this.darken(-amount);
    };

    Color_1.prototype.darker = Color_1.prototype.darken;
    Color_1.prototype.brighter = Color_1.prototype.brighten;

    Color_1.prototype.get = function(mc) {
        var ref = mc.split('.');
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
            var i = mode.indexOf(channel);
            if (i > -1) { return src[i]; }
            throw new Error(("unknown channel " + channel + " in mode " + mode));
        } else {
            return src;
        }
    };

    var type$g = utils.type;
    var pow$2 = Math.pow;

    var EPS = 1e-7;
    var MAX_ITER = 20;

    Color_1.prototype.luminance = function(lum) {
        if (lum !== undefined && type$g(lum) === 'number') {
            if (lum === 0) {
                // return pure black
                return new Color_1([0,0,0,this._rgb[3]], 'rgb');
            }
            if (lum === 1) {
                // return pure white
                return new Color_1([255,255,255,this._rgb[3]], 'rgb');
            }
            // compute new color using...
            var cur_lum = this.luminance();
            var mode = 'rgb';
            var max_iter = MAX_ITER;

            var test = function (low, high) {
                var mid = low.interpolate(high, 0.5, mode);
                var lm = mid.luminance();
                if (Math.abs(lum - lm) < EPS || !max_iter--) {
                    // close enough
                    return mid;
                }
                return lm > lum ? test(low, mid) : test(mid, high);
            };

            var rgb = (cur_lum > lum ? test(new Color_1([0,0,0]), this) : test(this, new Color_1([255,255,255]))).rgb();
            return new Color_1(rgb.concat( [this._rgb[3]]));
        }
        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));
    };


    var rgb2luminance = function (r,g,b) {
        // relative luminance
        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        r = luminance_x(r);
        g = luminance_x(g);
        b = luminance_x(b);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    };

    var luminance_x = function (x) {
        x /= 255;
        return x <= 0.03928 ? x/12.92 : pow$2((x+0.055)/1.055, 2.4);
    };

    var interpolator = {};

    var type$h = utils.type;


    var mix = function (col1, col2, f) {
        if ( f === void 0 ) f=0.5;
        var rest = [], len = arguments.length - 3;
        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];

        var mode = rest[0] || 'lrgb';
        if (!interpolator[mode] && !rest.length) {
            // fall back to the first supported mode
            mode = Object.keys(interpolator)[0];
        }
        if (!interpolator[mode]) {
            throw new Error(("interpolation mode " + mode + " is not defined"));
        }
        if (type$h(col1) !== 'object') { col1 = new Color_1(col1); }
        if (type$h(col2) !== 'object') { col2 = new Color_1(col2); }
        return interpolator[mode](col1, col2, f)
            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
    };

    Color_1.prototype.mix =
    Color_1.prototype.interpolate = function(col2, f) {
    	if ( f === void 0 ) f=0.5;
    	var rest = [], len = arguments.length - 2;
    	while ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];

    	return mix.apply(void 0, [ this, col2, f ].concat( rest ));
    };

    Color_1.prototype.premultiply = function(mutate) {
    	if ( mutate === void 0 ) mutate=false;

    	var rgb = this._rgb;
    	var a = rgb[3];
    	if (mutate) {
    		this._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];
    		return this;
    	} else {
    		return new Color_1([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');
    	}
    };

    Color_1.prototype.saturate = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	var me = this;
    	var lch = me.lch();
    	lch[1] += labConstants.Kn * amount;
    	if (lch[1] < 0) { lch[1] = 0; }
    	return new Color_1(lch, 'lch').alpha(me.alpha(), true);
    };

    Color_1.prototype.desaturate = function(amount) {
    	if ( amount === void 0 ) amount=1;

    	return this.saturate(-amount);
    };

    var type$i = utils.type;

    Color_1.prototype.set = function(mc, value, mutate) {
        if ( mutate === void 0 ) mutate=false;

        var ref = mc.split('.');
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
            var i = mode.indexOf(channel);
            if (i > -1) {
                if (type$i(value) == 'string') {
                    switch(value.charAt(0)) {
                        case '+': src[i] += +value; break;
                        case '-': src[i] += +value; break;
                        case '*': src[i] *= +(value.substr(1)); break;
                        case '/': src[i] /= +(value.substr(1)); break;
                        default: src[i] = +value;
                    }
                } else if (type$i(value) === 'number') {
                    src[i] = value;
                } else {
                    throw new Error("unsupported value for Color.set");
                }
                var out = new Color_1(src, mode);
                if (mutate) {
                    this._rgb = out._rgb;
                    return this;
                }
                return out;
            }
            throw new Error(("unknown channel " + channel + " in mode " + mode));
        } else {
            return src;
        }
    };

    var rgb$1 = function (col1, col2, f) {
        var xyz0 = col1._rgb;
        var xyz1 = col2._rgb;
        return new Color_1(
            xyz0[0] + f * (xyz1[0]-xyz0[0]),
            xyz0[1] + f * (xyz1[1]-xyz0[1]),
            xyz0[2] + f * (xyz1[2]-xyz0[2]),
            'rgb'
        )
    };

    // register interpolator
    interpolator.rgb = rgb$1;

    var sqrt$2 = Math.sqrt;
    var pow$3 = Math.pow;

    var lrgb = function (col1, col2, f) {
        var ref = col1._rgb;
        var x1 = ref[0];
        var y1 = ref[1];
        var z1 = ref[2];
        var ref$1 = col2._rgb;
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        return new Color_1(
            sqrt$2(pow$3(x1,2) * (1-f) + pow$3(x2,2) * f),
            sqrt$2(pow$3(y1,2) * (1-f) + pow$3(y2,2) * f),
            sqrt$2(pow$3(z1,2) * (1-f) + pow$3(z2,2) * f),
            'rgb'
        )
    };

    // register interpolator
    interpolator.lrgb = lrgb;

    var lab$1 = function (col1, col2, f) {
        var xyz0 = col1.lab();
        var xyz1 = col2.lab();
        return new Color_1(
            xyz0[0] + f * (xyz1[0]-xyz0[0]),
            xyz0[1] + f * (xyz1[1]-xyz0[1]),
            xyz0[2] + f * (xyz1[2]-xyz0[2]),
            'lab'
        )
    };

    // register interpolator
    interpolator.lab = lab$1;

    var _hsx = function (col1, col2, f, m) {
        var assign, assign$1;

        var xyz0, xyz1;
        if (m === 'hsl') {
            xyz0 = col1.hsl();
            xyz1 = col2.hsl();
        } else if (m === 'hsv') {
            xyz0 = col1.hsv();
            xyz1 = col2.hsv();
        } else if (m === 'hcg') {
            xyz0 = col1.hcg();
            xyz1 = col2.hcg();
        } else if (m === 'hsi') {
            xyz0 = col1.hsi();
            xyz1 = col2.hsi();
        } else if (m === 'lch' || m === 'hcl') {
            m = 'hcl';
            xyz0 = col1.hcl();
            xyz1 = col2.hcl();
        }

        var hue0, hue1, sat0, sat1, lbv0, lbv1;
        if (m.substr(0, 1) === 'h') {
            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);
            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);
        }

        var sat, hue, lbv, dh;

        if (!isNaN(hue0) && !isNaN(hue1)) {
            // both colors have hue
            if (hue1 > hue0 && hue1 - hue0 > 180) {
                dh = hue1-(hue0+360);
            } else if (hue1 < hue0 && hue0 - hue1 > 180) {
                dh = hue1+360-hue0;
            } else{
                dh = hue1 - hue0;
            }
            hue = hue0 + f * dh;
        } else if (!isNaN(hue0)) {
            hue = hue0;
            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }
        } else if (!isNaN(hue1)) {
            hue = hue1;
            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }
        } else {
            hue = Number.NaN;
        }

        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }
        lbv = lbv0 + f * (lbv1-lbv0);
        return new Color_1([hue, sat, lbv], m);
    };

    var lch$1 = function (col1, col2, f) {
    	return _hsx(col1, col2, f, 'lch');
    };

    // register interpolator
    interpolator.lch = lch$1;
    interpolator.hcl = lch$1;

    var num$1 = function (col1, col2, f) {
        var c1 = col1.num();
        var c2 = col2.num();
        return new Color_1(c1 + f * (c2-c1), 'num')
    };

    // register interpolator
    interpolator.num = num$1;

    var hcg$1 = function (col1, col2, f) {
    	return _hsx(col1, col2, f, 'hcg');
    };

    // register interpolator
    interpolator.hcg = hcg$1;

    var hsi$1 = function (col1, col2, f) {
    	return _hsx(col1, col2, f, 'hsi');
    };

    // register interpolator
    interpolator.hsi = hsi$1;

    var hsl$1 = function (col1, col2, f) {
    	return _hsx(col1, col2, f, 'hsl');
    };

    // register interpolator
    interpolator.hsl = hsl$1;

    var hsv$1 = function (col1, col2, f) {
    	return _hsx(col1, col2, f, 'hsv');
    };

    // register interpolator
    interpolator.hsv = hsv$1;

    var clip_rgb$2 = utils.clip_rgb;
    var pow$4 = Math.pow;
    var sqrt$3 = Math.sqrt;
    var PI$1 = Math.PI;
    var cos$2 = Math.cos;
    var sin$1 = Math.sin;
    var atan2$1 = Math.atan2;

    var average = function (colors, mode, weights) {
        if ( mode === void 0 ) mode='lrgb';
        if ( weights === void 0 ) weights=null;

        var l = colors.length;
        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }
        // normalize weights
        var k = l / weights.reduce(function(a, b) { return a + b; });
        weights.forEach(function (w,i) { weights[i] *= k; });
        // convert colors to Color objects
        colors = colors.map(function (c) { return new Color_1(c); });
        if (mode === 'lrgb') {
            return _average_lrgb(colors, weights)
        }
        var first = colors.shift();
        var xyz = first.get(mode);
        var cnt = [];
        var dx = 0;
        var dy = 0;
        // initial color
        for (var i=0; i<xyz.length; i++) {
            xyz[i] = (xyz[i] || 0) * weights[0];
            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);
            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
                var A = xyz[i] / 180 * PI$1;
                dx += cos$2(A) * weights[0];
                dy += sin$1(A) * weights[0];
            }
        }

        var alpha = first.alpha() * weights[0];
        colors.forEach(function (c,ci) {
            var xyz2 = c.get(mode);
            alpha += c.alpha() * weights[ci+1];
            for (var i=0; i<xyz.length; i++) {
                if (!isNaN(xyz2[i])) {
                    cnt[i] += weights[ci+1];
                    if (mode.charAt(i) === 'h') {
                        var A = xyz2[i] / 180 * PI$1;
                        dx += cos$2(A) * weights[ci+1];
                        dy += sin$1(A) * weights[ci+1];
                    } else {
                        xyz[i] += xyz2[i] * weights[ci+1];
                    }
                }
            }
        });

        for (var i$1=0; i$1<xyz.length; i$1++) {
            if (mode.charAt(i$1) === 'h') {
                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;
                while (A$1 < 0) { A$1 += 360; }
                while (A$1 >= 360) { A$1 -= 360; }
                xyz[i$1] = A$1;
            } else {
                xyz[i$1] = xyz[i$1]/cnt[i$1];
            }
        }
        alpha /= l;
        return (new Color_1(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);
    };


    var _average_lrgb = function (colors, weights) {
        var l = colors.length;
        var xyz = [0,0,0,0];
        for (var i=0; i < colors.length; i++) {
            var col = colors[i];
            var f = weights[i] / l;
            var rgb = col._rgb;
            xyz[0] += pow$4(rgb[0],2) * f;
            xyz[1] += pow$4(rgb[1],2) * f;
            xyz[2] += pow$4(rgb[2],2) * f;
            xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt$3(xyz[0]);
        xyz[1] = sqrt$3(xyz[1]);
        xyz[2] = sqrt$3(xyz[2]);
        if (xyz[3] > 0.9999999) { xyz[3] = 1; }
        return new Color_1(clip_rgb$2(xyz));
    };

    // minimal multi-purpose interface

    // @requires utils color analyze


    var type$j = utils.type;

    var pow$5 = Math.pow;

    var scale = function(colors) {

        // constructor
        var _mode = 'rgb';
        var _nacol = chroma_1('#ccc');
        var _spread = 0;
        // const _fixed = false;
        var _domain = [0, 1];
        var _pos = [];
        var _padding = [0,0];
        var _classes = false;
        var _colors = [];
        var _out = false;
        var _min = 0;
        var _max = 1;
        var _correctLightness = false;
        var _colorCache = {};
        var _useCache = true;
        var _gamma = 1;

        // private methods

        var setColors = function(colors) {
            colors = colors || ['#fff', '#000'];
            if (colors && type$j(colors) === 'string' && chroma_1.brewer &&
                chroma_1.brewer[colors.toLowerCase()]) {
                colors = chroma_1.brewer[colors.toLowerCase()];
            }
            if (type$j(colors) === 'array') {
                // handle single color
                if (colors.length === 1) {
                    colors = [colors[0], colors[0]];
                }
                // make a copy of the colors
                colors = colors.slice(0);
                // convert to chroma classes
                for (var c=0; c<colors.length; c++) {
                    colors[c] = chroma_1(colors[c]);
                }
                // auto-fill color position
                _pos.length = 0;
                for (var c$1=0; c$1<colors.length; c$1++) {
                    _pos.push(c$1/(colors.length-1));
                }
            }
            resetCache();
            return _colors = colors;
        };

        var getClass = function(value) {
            if (_classes != null) {
                var n = _classes.length-1;
                var i = 0;
                while (i < n && value >= _classes[i]) {
                    i++;
                }
                return i-1;
            }
            return 0;
        };

        var tMapLightness = function (t) { return t; };
        var tMapDomain = function (t) { return t; };

        // const classifyValue = function(value) {
        //     let val = value;
        //     if (_classes.length > 2) {
        //         const n = _classes.length-1;
        //         const i = getClass(value);
        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class
        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class
        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));
        //     }
        //     return val;
        // };

        var getColor = function(val, bypassMap) {
            var col, t;
            if (bypassMap == null) { bypassMap = false; }
            if (isNaN(val) || (val === null)) { return _nacol; }
            if (!bypassMap) {
                if (_classes && (_classes.length > 2)) {
                    // find the class
                    var c = getClass(val);
                    t = c / (_classes.length-2);
                } else if (_max !== _min) {
                    // just interpolate between min/max
                    t = (val - _min) / (_max - _min);
                } else {
                    t = 1;
                }
            } else {
                t = val;
            }

            // domain map
            t = tMapDomain(t);

            if (!bypassMap) {
                t = tMapLightness(t);  // lightness correction
            }

            if (_gamma !== 1) { t = pow$5(t, _gamma); }

            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));

            t = Math.min(1, Math.max(0, t));

            var k = Math.floor(t * 10000);

            if (_useCache && _colorCache[k]) {
                col = _colorCache[k];
            } else {
                if (type$j(_colors) === 'array') {
                    //for i in [0.._pos.length-1]
                    for (var i=0; i<_pos.length; i++) {
                        var p = _pos[i];
                        if (t <= p) {
                            col = _colors[i];
                            break;
                        }
                        if ((t >= p) && (i === (_pos.length-1))) {
                            col = _colors[i];
                            break;
                        }
                        if (t > p && t < _pos[i+1]) {
                            t = (t-p)/(_pos[i+1]-p);
                            col = chroma_1.interpolate(_colors[i], _colors[i+1], t, _mode);
                            break;
                        }
                    }
                } else if (type$j(_colors) === 'function') {
                    col = _colors(t);
                }
                if (_useCache) { _colorCache[k] = col; }
            }
            return col;
        };

        var resetCache = function () { return _colorCache = {}; };

        setColors(colors);

        // public interface

        var f = function(v) {
            var c = chroma_1(getColor(v));
            if (_out && c[_out]) { return c[_out](); } else { return c; }
        };

        f.classes = function(classes) {
            if (classes != null) {
                if (type$j(classes) === 'array') {
                    _classes = classes;
                    _domain = [classes[0], classes[classes.length-1]];
                } else {
                    var d = chroma_1.analyze(_domain);
                    if (classes === 0) {
                        _classes = [d.min, d.max];
                    } else {
                        _classes = chroma_1.limits(d, 'e', classes);
                    }
                }
                return f;
            }
            return _classes;
        };


        f.domain = function(domain) {
            if (!arguments.length) {
                return _domain;
            }
            _min = domain[0];
            _max = domain[domain.length-1];
            _pos = [];
            var k = _colors.length;
            if ((domain.length === k) && (_min !== _max)) {
                // update positions
                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {
                    var d = list[i];

                  _pos.push((d-_min) / (_max-_min));
                }
            } else {
                for (var c=0; c<k; c++) {
                    _pos.push(c/(k-1));
                }
                if (domain.length > 2) {
                    // set domain map
                    var tOut = domain.map(function (d,i) { return i/(domain.length-1); });
                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });
                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {
                        tMapDomain = function (t) {
                            if (t <= 0 || t >= 1) { return t; }
                            var i = 0;
                            while (t >= tBreaks[i+1]) { i++; }
                            var f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);
                            var out = tOut[i] + f * (tOut[i+1] - tOut[i]);
                            return out;
                        };
                    }

                }
            }
            _domain = [_min, _max];
            return f;
        };

        f.mode = function(_m) {
            if (!arguments.length) {
                return _mode;
            }
            _mode = _m;
            resetCache();
            return f;
        };

        f.range = function(colors, _pos) {
            setColors(colors, _pos);
            return f;
        };

        f.out = function(_o) {
            _out = _o;
            return f;
        };

        f.spread = function(val) {
            if (!arguments.length) {
                return _spread;
            }
            _spread = val;
            return f;
        };

        f.correctLightness = function(v) {
            if (v == null) { v = true; }
            _correctLightness = v;
            resetCache();
            if (_correctLightness) {
                tMapLightness = function(t) {
                    var L0 = getColor(0, true).lab()[0];
                    var L1 = getColor(1, true).lab()[0];
                    var pol = L0 > L1;
                    var L_actual = getColor(t, true).lab()[0];
                    var L_ideal = L0 + ((L1 - L0) * t);
                    var L_diff = L_actual - L_ideal;
                    var t0 = 0;
                    var t1 = 1;
                    var max_iter = 20;
                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {
                        (function() {
                            if (pol) { L_diff *= -1; }
                            if (L_diff < 0) {
                                t0 = t;
                                t += (t1 - t) * 0.5;
                            } else {
                                t1 = t;
                                t += (t0 - t) * 0.5;
                            }
                            L_actual = getColor(t, true).lab()[0];
                            return L_diff = L_actual - L_ideal;
                        })();
                    }
                    return t;
                };
            } else {
                tMapLightness = function (t) { return t; };
            }
            return f;
        };

        f.padding = function(p) {
            if (p != null) {
                if (type$j(p) === 'number') {
                    p = [p,p];
                }
                _padding = p;
                return f;
            } else {
                return _padding;
            }
        };

        f.colors = function(numColors, out) {
            // If no arguments are given, return the original colors that were provided
            if (arguments.length < 2) { out = 'hex'; }
            var result = [];

            if (arguments.length === 0) {
                result = _colors.slice(0);

            } else if (numColors === 1) {
                result = [f(0.5)];

            } else if (numColors > 1) {
                var dm = _domain[0];
                var dd = _domain[1] - dm;
                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });

            } else { // returns all colors based on the defined classes
                colors = [];
                var samples = [];
                if (_classes && (_classes.length > 2)) {
                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {
                        samples.push((_classes[i-1]+_classes[i])*0.5);
                    }
                } else {
                    samples = _domain;
                }
                result = samples.map(function (v) { return f(v); });
            }

            if (chroma_1[out]) {
                result = result.map(function (c) { return c[out](); });
            }
            return result;
        };

        f.cache = function(c) {
            if (c != null) {
                _useCache = c;
                return f;
            } else {
                return _useCache;
            }
        };

        f.gamma = function(g) {
            if (g != null) {
                _gamma = g;
                return f;
            } else {
                return _gamma;
            }
        };

        f.nodata = function(d) {
            if (d != null) {
                _nacol = chroma_1(d);
                return f;
            } else {
                return _nacol;
            }
        };

        return f;
    };

    function __range__(left, right, inclusive) {
      var range = [];
      var ascending = left < right;
      var end = !inclusive ? right : ascending ? right + 1 : right - 1;
      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {
        range.push(i);
      }
      return range;
    }

    //
    // interpolates between a set of colors uzing a bezier spline
    //

    // @requires utils lab




    var bezier = function(colors) {
        var assign, assign$1, assign$2;

        var I, lab0, lab1, lab2;
        colors = colors.map(function (c) { return new Color_1(c); });
        if (colors.length === 2) {
            // linear interpolation
            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);
            I = function(t) {
                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));
                return new Color_1(lab, 'lab');
            };
        } else if (colors.length === 3) {
            // quadratic bezier interpolation
            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);
            I = function(t) {
                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));
                return new Color_1(lab, 'lab');
            };
        } else if (colors.length === 4) {
            // cubic bezier interpolation
            var lab3;
            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);
            I = function(t) {
                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));
                return new Color_1(lab, 'lab');
            };
        } else if (colors.length === 5) {
            var I0 = bezier(colors.slice(0, 3));
            var I1 = bezier(colors.slice(2, 5));
            I = function(t) {
                if (t < 0.5) {
                    return I0(t*2);
                } else {
                    return I1((t-0.5)*2);
                }
            };
        }
        return I;
    };

    var bezier_1 = function (colors) {
        var f = bezier(colors);
        f.scale = function () { return scale(f); };
        return f;
    };

    /*
     * interpolates between a set of colors uzing a bezier spline
     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/
     */




    var blend = function (bottom, top, mode) {
        if (!blend[mode]) {
            throw new Error('unknown blend mode ' + mode);
        }
        return blend[mode](bottom, top);
    };

    var blend_f = function (f) { return function (bottom,top) {
            var c0 = chroma_1(top).rgb();
            var c1 = chroma_1(bottom).rgb();
            return chroma_1.rgb(f(c0, c1));
        }; };

    var each = function (f) { return function (c0, c1) {
            var out = [];
            out[0] = f(c0[0], c1[0]);
            out[1] = f(c0[1], c1[1]);
            out[2] = f(c0[2], c1[2]);
            return out;
        }; };

    var normal = function (a) { return a; };
    var multiply = function (a,b) { return a * b / 255; };
    var darken$1 = function (a,b) { return a > b ? b : a; };
    var lighten = function (a,b) { return a > b ? a : b; };
    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };
    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };
    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };
    var dodge = function (a,b) {
        if (a === 255) { return 255; }
        a = 255 * (b / 255) / (1 - a / 255);
        return a > 255 ? 255 : a
    };

    // # add = (a,b) ->
    // #     if (a + b > 255) then 255 else a + b

    blend.normal = blend_f(each(normal));
    blend.multiply = blend_f(each(multiply));
    blend.screen = blend_f(each(screen));
    blend.overlay = blend_f(each(overlay));
    blend.darken = blend_f(each(darken$1));
    blend.lighten = blend_f(each(lighten));
    blend.dodge = blend_f(each(dodge));
    blend.burn = blend_f(each(burn));
    // blend.add = blend_f(each(add));

    var blend_1 = blend;

    // cubehelix interpolation
    // based on D.A. Green "A colour scheme for the display of astronomical intensity images"
    // http://astron-soc.in/bulletin/11June/289392011.pdf

    var type$k = utils.type;
    var clip_rgb$3 = utils.clip_rgb;
    var TWOPI$2 = utils.TWOPI;
    var pow$6 = Math.pow;
    var sin$2 = Math.sin;
    var cos$3 = Math.cos;


    var cubehelix = function(start, rotations, hue, gamma, lightness) {
        if ( start === void 0 ) start=300;
        if ( rotations === void 0 ) rotations=-1.5;
        if ( hue === void 0 ) hue=1;
        if ( gamma === void 0 ) gamma=1;
        if ( lightness === void 0 ) lightness=[0,1];

        var dh = 0, dl;
        if (type$k(lightness) === 'array') {
            dl = lightness[1] - lightness[0];
        } else {
            dl = 0;
            lightness = [lightness, lightness];
        }

        var f = function(fract) {
            var a = TWOPI$2 * (((start+120)/360) + (rotations * fract));
            var l = pow$6(lightness[0] + (dl * fract), gamma);
            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;
            var amp = (h * l * (1-l)) / 2;
            var cos_a = cos$3(a);
            var sin_a = sin$2(a);
            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));
            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));
            var b = l + (amp * (+1.97294 * cos_a));
            return chroma_1(clip_rgb$3([r*255,g*255,b*255,1]));
        };

        f.start = function(s) {
            if ((s == null)) { return start; }
            start = s;
            return f;
        };

        f.rotations = function(r) {
            if ((r == null)) { return rotations; }
            rotations = r;
            return f;
        };

        f.gamma = function(g) {
            if ((g == null)) { return gamma; }
            gamma = g;
            return f;
        };

        f.hue = function(h) {
            if ((h == null)) { return hue; }
            hue = h;
            if (type$k(hue) === 'array') {
                dh = hue[1] - hue[0];
                if (dh === 0) { hue = hue[1]; }
            } else {
                dh = 0;
            }
            return f;
        };

        f.lightness = function(h) {
            if ((h == null)) { return lightness; }
            if (type$k(h) === 'array') {
                lightness = h;
                dl = h[1] - h[0];
            } else {
                lightness = [h,h];
                dl = 0;
            }
            return f;
        };

        f.scale = function () { return chroma_1.scale(f); };

        f.hue(hue);

        return f;
    };

    var digits = '0123456789abcdef';

    var floor$2 = Math.floor;
    var random = Math.random;

    var random_1 = function () {
        var code = '#';
        for (var i=0; i<6; i++) {
            code += digits.charAt(floor$2(random() * 16));
        }
        return new Color_1(code, 'hex');
    };

    var log$1 = Math.log;
    var pow$7 = Math.pow;
    var floor$3 = Math.floor;
    var abs = Math.abs;


    var analyze = function (data, key) {
        if ( key === void 0 ) key=null;

        var r = {
            min: Number.MAX_VALUE,
            max: Number.MAX_VALUE*-1,
            sum: 0,
            values: [],
            count: 0
        };
        if (type(data) === 'object') {
            data = Object.values(data);
        }
        data.forEach(function (val) {
            if (key && type(val) === 'object') { val = val[key]; }
            if (val !== undefined && val !== null && !isNaN(val)) {
                r.values.push(val);
                r.sum += val;
                if (val < r.min) { r.min = val; }
                if (val > r.max) { r.max = val; }
                r.count += 1;
            }
        });

        r.domain = [r.min, r.max];

        r.limits = function (mode, num) { return limits(r, mode, num); };

        return r;
    };


    var limits = function (data, mode, num) {
        if ( mode === void 0 ) mode='equal';
        if ( num === void 0 ) num=7;

        if (type(data) == 'array') {
            data = analyze(data);
        }
        var min = data.min;
        var max = data.max;
        var values = data.values.sort(function (a,b) { return a-b; });

        if (num === 1) { return [min,max]; }

        var limits = [];

        if (mode.substr(0,1) === 'c') { // continuous
            limits.push(min);
            limits.push(max);
        }

        if (mode.substr(0,1) === 'e') { // equal interval
            limits.push(min);
            for (var i=1; i<num; i++) {
                limits.push(min+((i/num)*(max-min)));
            }
            limits.push(max);
        }

        else if (mode.substr(0,1) === 'l') { // log scale
            if (min <= 0) {
                throw new Error('Logarithmic scales are only possible for values > 0');
            }
            var min_log = Math.LOG10E * log$1(min);
            var max_log = Math.LOG10E * log$1(max);
            limits.push(min);
            for (var i$1=1; i$1<num; i$1++) {
                limits.push(pow$7(10, min_log + ((i$1/num) * (max_log - min_log))));
            }
            limits.push(max);
        }

        else if (mode.substr(0,1) === 'q') { // quantile scale
            limits.push(min);
            for (var i$2=1; i$2<num; i$2++) {
                var p = ((values.length-1) * i$2)/num;
                var pb = floor$3(p);
                if (pb === p) {
                    limits.push(values[pb]);
                } else { // p > pb
                    var pr = p - pb;
                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));
                }
            }
            limits.push(max);

        }

        else if (mode.substr(0,1) === 'k') { // k-means clustering
            /*
            implementation based on
            http://code.google.com/p/figue/source/browse/trunk/figue.js#336
            simplified for 1-d input values
            */
            var cluster;
            var n = values.length;
            var assignments = new Array(n);
            var clusterSizes = new Array(num);
            var repeat = true;
            var nb_iters = 0;
            var centroids = null;

            // get seed values
            centroids = [];
            centroids.push(min);
            for (var i$3=1; i$3<num; i$3++) {
                centroids.push(min + ((i$3/num) * (max-min)));
            }
            centroids.push(max);

            while (repeat) {
                // assignment step
                for (var j=0; j<num; j++) {
                    clusterSizes[j] = 0;
                }
                for (var i$4=0; i$4<n; i$4++) {
                    var value = values[i$4];
                    var mindist = Number.MAX_VALUE;
                    var best = (void 0);
                    for (var j$1=0; j$1<num; j$1++) {
                        var dist = abs(centroids[j$1]-value);
                        if (dist < mindist) {
                            mindist = dist;
                            best = j$1;
                        }
                        clusterSizes[best]++;
                        assignments[i$4] = best;
                    }
                }

                // update centroids step
                var newCentroids = new Array(num);
                for (var j$2=0; j$2<num; j$2++) {
                    newCentroids[j$2] = null;
                }
                for (var i$5=0; i$5<n; i$5++) {
                    cluster = assignments[i$5];
                    if (newCentroids[cluster] === null) {
                        newCentroids[cluster] = values[i$5];
                    } else {
                        newCentroids[cluster] += values[i$5];
                    }
                }
                for (var j$3=0; j$3<num; j$3++) {
                    newCentroids[j$3] *= 1/clusterSizes[j$3];
                }

                // check convergence
                repeat = false;
                for (var j$4=0; j$4<num; j$4++) {
                    if (newCentroids[j$4] !== centroids[j$4]) {
                        repeat = true;
                        break;
                    }
                }

                centroids = newCentroids;
                nb_iters++;

                if (nb_iters > 200) {
                    repeat = false;
                }
            }

            // finished k-means clustering
            // the next part is borrowed from gabrielflor.it
            var kClusters = {};
            for (var j$5=0; j$5<num; j$5++) {
                kClusters[j$5] = [];
            }
            for (var i$6=0; i$6<n; i$6++) {
                cluster = assignments[i$6];
                kClusters[cluster].push(values[i$6]);
            }
            var tmpKMeansBreaks = [];
            for (var j$6=0; j$6<num; j$6++) {
                tmpKMeansBreaks.push(kClusters[j$6][0]);
                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);
            }
            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });
            limits.push(tmpKMeansBreaks[0]);
            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {
                var v = tmpKMeansBreaks[i$7];
                if (!isNaN(v) && (limits.indexOf(v) === -1)) {
                    limits.push(v);
                }
            }
        }
        return limits;
    };

    var analyze_1 = {analyze: analyze, limits: limits};

    var contrast = function (a, b) {
        // WCAG contrast ratio
        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
        a = new Color_1(a);
        b = new Color_1(b);
        var l1 = a.luminance();
        var l2 = b.luminance();
        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
    };

    var sqrt$4 = Math.sqrt;
    var atan2$2 = Math.atan2;
    var abs$1 = Math.abs;
    var cos$4 = Math.cos;
    var PI$2 = Math.PI;

    var deltaE = function(a, b, L, C) {
        if ( L === void 0 ) L=1;
        if ( C === void 0 ) C=1;

        // Delta E (CMC)
        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CMC.html
        a = new Color_1(a);
        b = new Color_1(b);
        var ref = Array.from(a.lab());
        var L1 = ref[0];
        var a1 = ref[1];
        var b1 = ref[2];
        var ref$1 = Array.from(b.lab());
        var L2 = ref$1[0];
        var a2 = ref$1[1];
        var b2 = ref$1[2];
        var c1 = sqrt$4((a1 * a1) + (b1 * b1));
        var c2 = sqrt$4((a2 * a2) + (b2 * b2));
        var sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + (0.01765 * L1));
        var sc = ((0.0638 * c1) / (1.0 + (0.0131 * c1))) + 0.638;
        var h1 = c1 < 0.000001 ? 0.0 : (atan2$2(b1, a1) * 180.0) / PI$2;
        while (h1 < 0) { h1 += 360; }
        while (h1 >= 360) { h1 -= 360; }
        var t = (h1 >= 164.0) && (h1 <= 345.0) ? (0.56 + abs$1(0.2 * cos$4((PI$2 * (h1 + 168.0)) / 180.0))) : (0.36 + abs$1(0.4 * cos$4((PI$2 * (h1 + 35.0)) / 180.0)));
        var c4 = c1 * c1 * c1 * c1;
        var f = sqrt$4(c4 / (c4 + 1900.0));
        var sh = sc * (((f * t) + 1.0) - f);
        var delL = L1 - L2;
        var delC = c1 - c2;
        var delA = a1 - a2;
        var delB = b1 - b2;
        var dH2 = ((delA * delA) + (delB * delB)) - (delC * delC);
        var v1 = delL / (L * sl);
        var v2 = delC / (C * sc);
        var v3 = sh;
        return sqrt$4((v1 * v1) + (v2 * v2) + (dH2 / (v3 * v3)));
    };

    // simple Euclidean distance
    var distance = function(a, b, mode) {
        if ( mode === void 0 ) mode='lab';

        // Delta E (CIE 1976)
        // see http://www.brucelindbloom.com/index.html?Equations.html
        a = new Color_1(a);
        b = new Color_1(b);
        var l1 = a.get(mode);
        var l2 = b.get(mode);
        var sum_sq = 0;
        for (var i in l1) {
            var d = (l1[i] || 0) - (l2[i] || 0);
            sum_sq += d*d;
        }
        return Math.sqrt(sum_sq);
    };

    var valid = function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        try {
            new (Function.prototype.bind.apply( Color_1, [ null ].concat( args) ));
            return true;
        } catch (e) {
            return false;
        }
    };

    // some pre-defined color scales:




    var scales = {
    	cool: function cool() { return scale([chroma_1.hsl(180,1,.9), chroma_1.hsl(250,.7,.4)]) },
    	hot: function hot() { return scale(['#000','#f00','#ff0','#fff'], [0,.25,.75,1]).mode('rgb') }
    };

    /**
        ColorBrewer colors for chroma.js

        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
        Pennsylvania State University.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software distributed
        under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
        CONDITIONS OF ANY KIND, either express or implied. See the License for the
        specific language governing permissions and limitations under the License.
    */

    var colorbrewer = {
        // sequential
        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],

        // diverging

        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],

        // qualitative

        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],
    };

    // add lowercase aliases for case-insensitive matches
    for (var i$1 = 0, list$1 = Object.keys(colorbrewer); i$1 < list$1.length; i$1 += 1) {
        var key = list$1[i$1];

        colorbrewer[key.toLowerCase()] = colorbrewer[key];
    }

    var colorbrewer_1 = colorbrewer;

    // feel free to comment out anything to rollup
    // a smaller chroma.js built

    // io --> convert colors















    // operators --> modify existing Colors










    // interpolators










    // generators -- > create new colors
    chroma_1.average = average;
    chroma_1.bezier = bezier_1;
    chroma_1.blend = blend_1;
    chroma_1.cubehelix = cubehelix;
    chroma_1.mix = chroma_1.interpolate = mix;
    chroma_1.random = random_1;
    chroma_1.scale = scale;

    // other utility methods
    chroma_1.analyze = analyze_1.analyze;
    chroma_1.contrast = contrast;
    chroma_1.deltaE = deltaE;
    chroma_1.distance = distance;
    chroma_1.limits = analyze_1.limits;
    chroma_1.valid = valid;

    // scale
    chroma_1.scales = scales;

    // colors
    chroma_1.colors = w3cx11_1;
    chroma_1.brewer = colorbrewer_1;

    var chroma_js = chroma_1;

    return chroma_js;

})));


/***/ }),

/***/ "./node_modules/distinct-colors/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/distinct-colors/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _utils = _interopRequireDefault(__webpack_require__(/*! ./utils */ "./node_modules/distinct-colors/lib/utils.js"));

var _deepClone = _interopRequireDefault(__webpack_require__(/*! mout/lang/deepClone */ "./node_modules/mout/lang/deepClone.js"));

var _deepEquals = _interopRequireDefault(__webpack_require__(/*! mout/lang/deepEquals */ "./node_modules/mout/lang/deepEquals.js"));

var _chromaJs = _interopRequireDefault(__webpack_require__(/*! chroma-js */ "./node_modules/chroma-js/chroma.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaults = {
  count: 5,
  hueMin: 0,
  hueMax: 360,
  chromaMin: 0,
  chromaMax: 100,
  lightMin: 0,
  lightMax: 100,
  quality: 50,
  samples: 800
};

var getClosestIndex = function getClosestIndex(colors, color) {
  var minDist = Number.MAX_SAFE_INTEGER;
  var nearest = 0;

  for (var idx = 0; idx < colors.length; idx += 1) {
    var sample = colors[idx];
    var dist = Math.sqrt(Math.pow(Math.abs(sample[0] - color[0]), 2) + Math.pow(Math.abs(sample[1] - color[1]), 2) + Math.pow(Math.abs(sample[2] - color[2]), 2));

    if (dist < minDist) {
      minDist = dist;
      nearest = idx;
    }
  }

  return nearest;
};

var checkColor = function checkColor(lab, options) {
  var color = _chromaJs["default"].lab(lab);

  var hcl = color.hcl();
  var rgb = color.rgb();

  var compLab = _chromaJs["default"].rgb(rgb).lab();

  var labTolerance = 2;
  return hcl[0] >= options.hueMin && hcl[0] <= options.hueMax && hcl[1] >= options.chromaMin && hcl[1] <= options.chromaMax && hcl[2] >= options.lightMin && hcl[2] <= options.lightMax && compLab[0] >= lab[0] - labTolerance && compLab[0] <= lab[0] + labTolerance && compLab[1] >= lab[1] - labTolerance && compLab[1] <= lab[1] + labTolerance && compLab[2] >= lab[2] - labTolerance && compLab[2] <= lab[2] + labTolerance;
};

var sortByContrast = function sortByContrast(colorList) {
  var unsortedColors = colorList.slice(0);
  var sortedColors = [unsortedColors.shift()];

  while (unsortedColors.length > 0) {
    var lastColor = sortedColors[sortedColors.length - 1];
    var nearest = 0;
    var maxDist = Number.MIN_SAFE_INTEGER;

    for (var i = 0; i < unsortedColors.length; i += 1) {
      var dist = Math.sqrt(Math.pow(Math.abs(lastColor[0] - unsortedColors[i][0]), 2) + Math.pow(Math.abs(lastColor[1] - unsortedColors[i][1]), 2) + Math.pow(Math.abs(lastColor[2] - unsortedColors[i][2]), 2));

      if (dist > maxDist) {
        maxDist = dist;
        nearest = i;
      }
    }

    sortedColors.push(unsortedColors.splice(nearest, 1)[0]);
  }

  return sortedColors;
};

var distinctColors = function distinctColors() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var options = _objectSpread({}, defaults, {}, opts);

  if (options.count <= 0) {
    return [];
  }

  if (options.samples < options.count * 3) {
    options.samples = Math.ceil(options.count * 3);
  }

  var colors = [];
  var zonesProto = [];
  var samples = new Set();
  var rangeDivider = Math.ceil(Math.cbrt(options.samples));
  var hStep = (options.hueMax - options.hueMin) / rangeDivider;
  var cStep = (options.chromaMax - options.chromaMin) / rangeDivider;
  var lStep = (options.lightMax - options.lightMin) / rangeDivider;

  if (hStep <= 0) {
    throw new Error('hueMax must be greater than hueMin!');
  }

  if (cStep <= 0) {
    throw new Error('chromaMax must be greater than chromaMin!');
  }

  if (lStep <= 0) {
    throw new Error('lightMax must be greater than lightMin!');
  }

  for (var h = options.hueMin + hStep / 2; h <= options.hueMax; h += hStep) {
    for (var c = options.chromaMin + cStep / 2; c <= options.chromaMax; c += cStep) {
      for (var l = options.lightMin + lStep / 2; l <= options.lightMax; l += lStep) {
        var color = _chromaJs["default"].hcl(h, c, l).lab();

        if (checkColor(color, options)) {
          samples.add(color.toString());
        }
      }
    }
  }

  samples = Array.from(samples);
  samples = samples.map(function (i) {
    return i.split(',').map(function (j) {
      return parseFloat(j);
    });
  });

  if (samples.length < options.count) {
    throw new Error('Not enough samples to generate palette, increase sample count.');
  }

  var sliceSize = Math.floor(samples.length / options.count);

  for (var i = 0; i < samples.length; i += sliceSize) {
    colors.push(samples[i]);
    zonesProto.push([]);

    if (colors.length >= options.count) {
      break;
    }
  }

  for (var step = 1; step <= options.quality; step += 1) {
    var zones = (0, _deepClone["default"])(zonesProto);
    var sampleList = (0, _deepClone["default"])(samples); // Immediately add the closest sample for each color

    for (var _i = 0; _i < colors.length; _i += 1) {
      var idx = getClosestIndex(sampleList, colors[_i]);

      zones[_i].push(sampleList[idx]);

      sampleList.splice(idx, 1);
    } // Find closest color for each remaining sample


    for (var _i2 = 0; _i2 < sampleList.length; _i2 += 1) {
      var sample = samples[_i2];
      var nearest = getClosestIndex(colors, sample);
      zones[nearest].push(samples[_i2]);
    }

    var lastColors = (0, _deepClone["default"])(colors);

    for (var _i3 = 0; _i3 < zones.length; _i3 += 1) {
      var zone = zones[_i3];
      var size = zone.length;
      var Ls = [];
      var As = [];
      var Bs = [];

      var _iterator = _createForOfIteratorHelper(zone),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _sample = _step.value;
          Ls.push(_sample[0]);
          As.push(_sample[1]);
          Bs.push(_sample[2]);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var lAvg = _utils["default"].sum(Ls) / size;
      var aAvg = _utils["default"].sum(As) / size;
      var bAvg = _utils["default"].sum(Bs) / size;
      colors[_i3] = [lAvg, aAvg, bAvg];
    }

    if ((0, _deepEquals["default"])(lastColors, colors)) {
      break;
    }
  }

  colors = sortByContrast(colors);
  return colors.map(function (lab) {
    return _chromaJs["default"].lab(lab);
  });
};

var _default = distinctColors;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/distinct-colors/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/distinct-colors/lib/utils.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var utils = {
  sum: function sum(array) {
    return array.reduce(function (a, b) {
      return a + b;
    });
  }
};
var _default = utils;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/fast-copy/dist/fast-copy.js":
/*!**************************************************!*\
  !*** ./node_modules/fast-copy/dist/fast-copy.js ***!
  \**************************************************/
/***/ (function(module) {

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, (function () { 'use strict';

  var toStringFunction = Function.prototype.toString;
  var create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf = Object.getPrototypeOf;
  var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
  /**
   * @enum
   *
   * @const {Object} SUPPORTS
   *
   * @property {boolean} SYMBOL_PROPERTIES are symbol properties supported
   * @property {boolean} WEAKMAP is WeakMap supported
   */
  var SUPPORTS = {
      SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === 'function',
      WEAKMAP: typeof WeakMap === 'function',
  };
  /**
   * @function createCache
   *
   * @description
   * get a new cache object to prevent circular references
   *
   * @returns the new cache object
   */
  var createCache = function () {
      if (SUPPORTS.WEAKMAP) {
          return new WeakMap();
      }
      // tiny implementation of WeakMap
      var object = create({
          has: function (key) { return !!~object._keys.indexOf(key); },
          set: function (key, value) {
              object._keys.push(key);
              object._values.push(value);
          },
          get: function (key) { return object._values[object._keys.indexOf(key)]; },
      });
      object._keys = [];
      object._values = [];
      return object;
  };
  /**
   * @function getCleanClone
   *
   * @description
   * get an empty version of the object with the same prototype it has
   *
   * @param object the object to build a clean clone from
   * @param realm the realm the object resides in
   * @returns the empty cloned object
   */
  var getCleanClone = function (object, realm) {
      if (!object.constructor) {
          return create(null);
      }
      var Constructor = object.constructor;
      var prototype = object.__proto__ || getPrototypeOf(object);
      if (Constructor === realm.Object) {
          return prototype === realm.Object.prototype ? {} : create(prototype);
      }
      if (~toStringFunction.call(Constructor).indexOf('[native code]')) {
          try {
              return new Constructor();
          }
          catch (_a) { }
      }
      return create(prototype);
  };
  /**
   * @function getObjectCloneLoose
   *
   * @description
   * get a copy of the object based on loose rules, meaning all enumerable keys
   * and symbols are copied, but property descriptors are not considered
   *
   * @param object the object to clone
   * @param realm the realm the object resides in
   * @param handleCopy the function that handles copying the object
   * @returns the copied object
   */
  var getObjectCloneLoose = function (object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm);
      // set in the cache immediately to be able to reuse the object recursively
      cache.set(object, clone);
      for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
              clone[key] = handleCopy(object[key], cache);
          }
      }
      if (SUPPORTS.SYMBOL_PROPERTIES) {
          var symbols = getOwnPropertySymbols(object);
          var length_1 = symbols.length;
          if (length_1) {
              for (var index = 0, symbol = void 0; index < length_1; index++) {
                  symbol = symbols[index];
                  if (propertyIsEnumerable.call(object, symbol)) {
                      clone[symbol] = handleCopy(object[symbol], cache);
                  }
              }
          }
      }
      return clone;
  };
  /**
   * @function getObjectCloneStrict
   *
   * @description
   * get a copy of the object based on strict rules, meaning all keys and symbols
   * are copied based on the original property descriptors
   *
   * @param object the object to clone
   * @param realm the realm the object resides in
   * @param handleCopy the function that handles copying the object
   * @returns the copied object
   */
  var getObjectCloneStrict = function (object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm);
      // set in the cache immediately to be able to reuse the object recursively
      cache.set(object, clone);
      var properties = SUPPORTS.SYMBOL_PROPERTIES
          ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object))
          : getOwnPropertyNames(object);
      var length = properties.length;
      if (length) {
          for (var index = 0, property = void 0, descriptor = void 0; index < length; index++) {
              property = properties[index];
              if (property !== 'callee' && property !== 'caller') {
                  descriptor = getOwnPropertyDescriptor(object, property);
                  if (descriptor) {
                      // Only clone the value if actually a value, not a getter / setter.
                      if (!descriptor.get && !descriptor.set) {
                          descriptor.value = handleCopy(object[property], cache);
                      }
                      try {
                          defineProperty(clone, property, descriptor);
                      }
                      catch (error) {
                          // Tee above can fail on node in edge cases, so fall back to the loose assignment.
                          clone[property] = descriptor.value;
                      }
                  }
                  else {
                      // In extra edge cases where the property descriptor cannot be retrived, fall back to
                      // the loose assignment.
                      clone[property] = handleCopy(object[property], cache);
                  }
              }
          }
      }
      return clone;
  };
  /**
   * @function getRegExpFlags
   *
   * @description
   * get the flags to apply to the copied regexp
   *
   * @param regExp the regexp to get the flags of
   * @returns the flags for the regexp
   */
  var getRegExpFlags = function (regExp) {
      var flags = '';
      if (regExp.global) {
          flags += 'g';
      }
      if (regExp.ignoreCase) {
          flags += 'i';
      }
      if (regExp.multiline) {
          flags += 'm';
      }
      if (regExp.unicode) {
          flags += 'u';
      }
      if (regExp.sticky) {
          flags += 'y';
      }
      return flags;
  };

  // utils
  var isArray = Array.isArray;
  var GLOBAL_THIS = (function () {
      if (typeof self !== 'undefined') {
          return self;
      }
      if (typeof window !== 'undefined') {
          return window;
      }
      if (typeof global !== 'undefined') {
          return global;
      }
      if (console && console.error) {
          console.error('Unable to locate global object, returning "this".');
      }
  })();
  /**
   * @function copy
   *
   * @description
   * copy an object deeply as much as possible
   *
   * If `strict` is applied, then all properties (including non-enumerable ones)
   * are copied with their original property descriptors on both objects and arrays.
   *
   * The object is compared to the global constructors in the `realm` provided,
   * and the native constructor is always used to ensure that extensions of native
   * objects (allows in ES2015+) are maintained.
   *
   * @param object the object to copy
   * @param [options] the options for copying with
   * @param [options.isStrict] should the copy be strict
   * @param [options.realm] the realm (this) object the object is copied from
   * @returns the copied object
   */
  function copy(object, options) {
      // manually coalesced instead of default parameters for performance
      var isStrict = !!(options && options.isStrict);
      var realm = (options && options.realm) || GLOBAL_THIS;
      var getObjectClone = isStrict
          ? getObjectCloneStrict
          : getObjectCloneLoose;
      /**
       * @function handleCopy
       *
       * @description
       * copy the object recursively based on its type
       *
       * @param object the object to copy
       * @returns the copied object
       */
      var handleCopy = function (object, cache) {
          if (!object || typeof object !== 'object') {
              return object;
          }
          if (cache.has(object)) {
              return cache.get(object);
          }
          var Constructor = object.constructor;
          // plain objects
          if (Constructor === realm.Object) {
              return getObjectClone(object, realm, handleCopy, cache);
          }
          var clone;
          // arrays
          if (isArray(object)) {
              // if strict, include non-standard properties
              if (isStrict) {
                  return getObjectCloneStrict(object, realm, handleCopy, cache);
              }
              var length_1 = object.length;
              clone = new Constructor();
              cache.set(object, clone);
              for (var index = 0; index < length_1; index++) {
                  clone[index] = handleCopy(object[index], cache);
              }
              return clone;
          }
          // dates
          if (object instanceof realm.Date) {
              return new Constructor(object.getTime());
          }
          // regexps
          if (object instanceof realm.RegExp) {
              clone = new Constructor(object.source, object.flags || getRegExpFlags(object));
              clone.lastIndex = object.lastIndex;
              return clone;
          }
          // maps
          if (realm.Map && object instanceof realm.Map) {
              clone = new Constructor();
              cache.set(object, clone);
              object.forEach(function (value, key) {
                  clone.set(key, handleCopy(value, cache));
              });
              return clone;
          }
          // sets
          if (realm.Set && object instanceof realm.Set) {
              clone = new Constructor();
              cache.set(object, clone);
              object.forEach(function (value) {
                  clone.add(handleCopy(value, cache));
              });
              return clone;
          }
          // blobs
          if (realm.Blob && object instanceof realm.Blob) {
              return object.slice(0, object.size, object.type);
          }
          // buffers (node-only)
          if (realm.Buffer && realm.Buffer.isBuffer(object)) {
              clone = realm.Buffer.allocUnsafe
                  ? realm.Buffer.allocUnsafe(object.length)
                  : new Constructor(object.length);
              cache.set(object, clone);
              object.copy(clone);
              return clone;
          }
          // arraybuffers / dataviews
          if (realm.ArrayBuffer) {
              // dataviews
              if (realm.ArrayBuffer.isView(object)) {
                  clone = new Constructor(object.buffer.slice(0));
                  cache.set(object, clone);
                  return clone;
              }
              // arraybuffers
              if (object instanceof realm.ArrayBuffer) {
                  clone = object.slice(0);
                  cache.set(object, clone);
                  return clone;
              }
          }
          // if the object cannot / should not be cloned, don't
          if (
          // promise-like
          typeof object.then === 'function' ||
              // errors
              object instanceof Error ||
              // weakmaps
              (realm.WeakMap && object instanceof realm.WeakMap) ||
              // weaksets
              (realm.WeakSet && object instanceof realm.WeakSet)) {
              return object;
          }
          // assume anything left is a custom constructor
          return getObjectClone(object, realm, handleCopy, cache);
      };
      return handleCopy(object, createCache());
  }
  // Adding reference to allow usage in CommonJS libraries compiled using TSC, which
  // expects there to be a default property on the exported object. See
  // [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.
  copy.default = copy;
  /**
   * @function strictCopy
   *
   * @description
   * copy the object with `strict` option pre-applied
   *
   * @param object the object to copy
   * @param [options] the options for copying with
   * @param [options.realm] the realm (this) object the object is copied from
   * @returns the copied object
   */
  copy.strict = function strictCopy(object, options) {
      return copy(object, {
          isStrict: true,
          realm: options ? options.realm : void 0,
      });
  };

  return copy;

})));
//# sourceMappingURL=fast-copy.js.map


/***/ }),

/***/ "./node_modules/he/he.js":
/*!*******************************!*\
  !*** ./node_modules/he/he.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
;(function(root) {

	// Detect free variables `exports`.
	var freeExports =  true && exports;

	// Detect free variable `module`.
	var freeModule =  true && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`.
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	// All astral symbols.
	var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	// All ASCII symbols (not just printable ASCII) except those listed in the
	// first column of the overrides table.
	// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides
	var regexAsciiWhitelist = /[\x01-\x7F]/g;
	// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
	// code points listed in the first column of the overrides table on
	// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.
	var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;

	var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
	var encodeMap = {'\xAD':'shy','\u200C':'zwnj','\u200D':'zwj','\u200E':'lrm','\u2063':'ic','\u2062':'it','\u2061':'af','\u200F':'rlm','\u200B':'ZeroWidthSpace','\u2060':'NoBreak','\u0311':'DownBreve','\u20DB':'tdot','\u20DC':'DotDot','\t':'Tab','\n':'NewLine','\u2008':'puncsp','\u205F':'MediumSpace','\u2009':'thinsp','\u200A':'hairsp','\u2004':'emsp13','\u2002':'ensp','\u2005':'emsp14','\u2003':'emsp','\u2007':'numsp','\xA0':'nbsp','\u205F\u200A':'ThickSpace','\u203E':'oline','_':'lowbar','\u2010':'dash','\u2013':'ndash','\u2014':'mdash','\u2015':'horbar',',':'comma',';':'semi','\u204F':'bsemi',':':'colon','\u2A74':'Colone','!':'excl','\xA1':'iexcl','?':'quest','\xBF':'iquest','.':'period','\u2025':'nldr','\u2026':'mldr','\xB7':'middot','\'':'apos','\u2018':'lsquo','\u2019':'rsquo','\u201A':'sbquo','\u2039':'lsaquo','\u203A':'rsaquo','"':'quot','\u201C':'ldquo','\u201D':'rdquo','\u201E':'bdquo','\xAB':'laquo','\xBB':'raquo','(':'lpar',')':'rpar','[':'lsqb',']':'rsqb','{':'lcub','}':'rcub','\u2308':'lceil','\u2309':'rceil','\u230A':'lfloor','\u230B':'rfloor','\u2985':'lopar','\u2986':'ropar','\u298B':'lbrke','\u298C':'rbrke','\u298D':'lbrkslu','\u298E':'rbrksld','\u298F':'lbrksld','\u2990':'rbrkslu','\u2991':'langd','\u2992':'rangd','\u2993':'lparlt','\u2994':'rpargt','\u2995':'gtlPar','\u2996':'ltrPar','\u27E6':'lobrk','\u27E7':'robrk','\u27E8':'lang','\u27E9':'rang','\u27EA':'Lang','\u27EB':'Rang','\u27EC':'loang','\u27ED':'roang','\u2772':'lbbrk','\u2773':'rbbrk','\u2016':'Vert','\xA7':'sect','\xB6':'para','@':'commat','*':'ast','/':'sol','undefined':null,'&':'amp','#':'num','%':'percnt','\u2030':'permil','\u2031':'pertenk','\u2020':'dagger','\u2021':'Dagger','\u2022':'bull','\u2043':'hybull','\u2032':'prime','\u2033':'Prime','\u2034':'tprime','\u2057':'qprime','\u2035':'bprime','\u2041':'caret','`':'grave','\xB4':'acute','\u02DC':'tilde','^':'Hat','\xAF':'macr','\u02D8':'breve','\u02D9':'dot','\xA8':'die','\u02DA':'ring','\u02DD':'dblac','\xB8':'cedil','\u02DB':'ogon','\u02C6':'circ','\u02C7':'caron','\xB0':'deg','\xA9':'copy','\xAE':'reg','\u2117':'copysr','\u2118':'wp','\u211E':'rx','\u2127':'mho','\u2129':'iiota','\u2190':'larr','\u219A':'nlarr','\u2192':'rarr','\u219B':'nrarr','\u2191':'uarr','\u2193':'darr','\u2194':'harr','\u21AE':'nharr','\u2195':'varr','\u2196':'nwarr','\u2197':'nearr','\u2198':'searr','\u2199':'swarr','\u219D':'rarrw','\u219D\u0338':'nrarrw','\u219E':'Larr','\u219F':'Uarr','\u21A0':'Rarr','\u21A1':'Darr','\u21A2':'larrtl','\u21A3':'rarrtl','\u21A4':'mapstoleft','\u21A5':'mapstoup','\u21A6':'map','\u21A7':'mapstodown','\u21A9':'larrhk','\u21AA':'rarrhk','\u21AB':'larrlp','\u21AC':'rarrlp','\u21AD':'harrw','\u21B0':'lsh','\u21B1':'rsh','\u21B2':'ldsh','\u21B3':'rdsh','\u21B5':'crarr','\u21B6':'cularr','\u21B7':'curarr','\u21BA':'olarr','\u21BB':'orarr','\u21BC':'lharu','\u21BD':'lhard','\u21BE':'uharr','\u21BF':'uharl','\u21C0':'rharu','\u21C1':'rhard','\u21C2':'dharr','\u21C3':'dharl','\u21C4':'rlarr','\u21C5':'udarr','\u21C6':'lrarr','\u21C7':'llarr','\u21C8':'uuarr','\u21C9':'rrarr','\u21CA':'ddarr','\u21CB':'lrhar','\u21CC':'rlhar','\u21D0':'lArr','\u21CD':'nlArr','\u21D1':'uArr','\u21D2':'rArr','\u21CF':'nrArr','\u21D3':'dArr','\u21D4':'iff','\u21CE':'nhArr','\u21D5':'vArr','\u21D6':'nwArr','\u21D7':'neArr','\u21D8':'seArr','\u21D9':'swArr','\u21DA':'lAarr','\u21DB':'rAarr','\u21DD':'zigrarr','\u21E4':'larrb','\u21E5':'rarrb','\u21F5':'duarr','\u21FD':'loarr','\u21FE':'roarr','\u21FF':'hoarr','\u2200':'forall','\u2201':'comp','\u2202':'part','\u2202\u0338':'npart','\u2203':'exist','\u2204':'nexist','\u2205':'empty','\u2207':'Del','\u2208':'in','\u2209':'notin','\u220B':'ni','\u220C':'notni','\u03F6':'bepsi','\u220F':'prod','\u2210':'coprod','\u2211':'sum','+':'plus','\xB1':'pm','\xF7':'div','\xD7':'times','<':'lt','\u226E':'nlt','<\u20D2':'nvlt','=':'equals','\u2260':'ne','=\u20E5':'bne','\u2A75':'Equal','>':'gt','\u226F':'ngt','>\u20D2':'nvgt','\xAC':'not','|':'vert','\xA6':'brvbar','\u2212':'minus','\u2213':'mp','\u2214':'plusdo','\u2044':'frasl','\u2216':'setmn','\u2217':'lowast','\u2218':'compfn','\u221A':'Sqrt','\u221D':'prop','\u221E':'infin','\u221F':'angrt','\u2220':'ang','\u2220\u20D2':'nang','\u2221':'angmsd','\u2222':'angsph','\u2223':'mid','\u2224':'nmid','\u2225':'par','\u2226':'npar','\u2227':'and','\u2228':'or','\u2229':'cap','\u2229\uFE00':'caps','\u222A':'cup','\u222A\uFE00':'cups','\u222B':'int','\u222C':'Int','\u222D':'tint','\u2A0C':'qint','\u222E':'oint','\u222F':'Conint','\u2230':'Cconint','\u2231':'cwint','\u2232':'cwconint','\u2233':'awconint','\u2234':'there4','\u2235':'becaus','\u2236':'ratio','\u2237':'Colon','\u2238':'minusd','\u223A':'mDDot','\u223B':'homtht','\u223C':'sim','\u2241':'nsim','\u223C\u20D2':'nvsim','\u223D':'bsim','\u223D\u0331':'race','\u223E':'ac','\u223E\u0333':'acE','\u223F':'acd','\u2240':'wr','\u2242':'esim','\u2242\u0338':'nesim','\u2243':'sime','\u2244':'nsime','\u2245':'cong','\u2247':'ncong','\u2246':'simne','\u2248':'ap','\u2249':'nap','\u224A':'ape','\u224B':'apid','\u224B\u0338':'napid','\u224C':'bcong','\u224D':'CupCap','\u226D':'NotCupCap','\u224D\u20D2':'nvap','\u224E':'bump','\u224E\u0338':'nbump','\u224F':'bumpe','\u224F\u0338':'nbumpe','\u2250':'doteq','\u2250\u0338':'nedot','\u2251':'eDot','\u2252':'efDot','\u2253':'erDot','\u2254':'colone','\u2255':'ecolon','\u2256':'ecir','\u2257':'cire','\u2259':'wedgeq','\u225A':'veeeq','\u225C':'trie','\u225F':'equest','\u2261':'equiv','\u2262':'nequiv','\u2261\u20E5':'bnequiv','\u2264':'le','\u2270':'nle','\u2264\u20D2':'nvle','\u2265':'ge','\u2271':'nge','\u2265\u20D2':'nvge','\u2266':'lE','\u2266\u0338':'nlE','\u2267':'gE','\u2267\u0338':'ngE','\u2268\uFE00':'lvnE','\u2268':'lnE','\u2269':'gnE','\u2269\uFE00':'gvnE','\u226A':'ll','\u226A\u0338':'nLtv','\u226A\u20D2':'nLt','\u226B':'gg','\u226B\u0338':'nGtv','\u226B\u20D2':'nGt','\u226C':'twixt','\u2272':'lsim','\u2274':'nlsim','\u2273':'gsim','\u2275':'ngsim','\u2276':'lg','\u2278':'ntlg','\u2277':'gl','\u2279':'ntgl','\u227A':'pr','\u2280':'npr','\u227B':'sc','\u2281':'nsc','\u227C':'prcue','\u22E0':'nprcue','\u227D':'sccue','\u22E1':'nsccue','\u227E':'prsim','\u227F':'scsim','\u227F\u0338':'NotSucceedsTilde','\u2282':'sub','\u2284':'nsub','\u2282\u20D2':'vnsub','\u2283':'sup','\u2285':'nsup','\u2283\u20D2':'vnsup','\u2286':'sube','\u2288':'nsube','\u2287':'supe','\u2289':'nsupe','\u228A\uFE00':'vsubne','\u228A':'subne','\u228B\uFE00':'vsupne','\u228B':'supne','\u228D':'cupdot','\u228E':'uplus','\u228F':'sqsub','\u228F\u0338':'NotSquareSubset','\u2290':'sqsup','\u2290\u0338':'NotSquareSuperset','\u2291':'sqsube','\u22E2':'nsqsube','\u2292':'sqsupe','\u22E3':'nsqsupe','\u2293':'sqcap','\u2293\uFE00':'sqcaps','\u2294':'sqcup','\u2294\uFE00':'sqcups','\u2295':'oplus','\u2296':'ominus','\u2297':'otimes','\u2298':'osol','\u2299':'odot','\u229A':'ocir','\u229B':'oast','\u229D':'odash','\u229E':'plusb','\u229F':'minusb','\u22A0':'timesb','\u22A1':'sdotb','\u22A2':'vdash','\u22AC':'nvdash','\u22A3':'dashv','\u22A4':'top','\u22A5':'bot','\u22A7':'models','\u22A8':'vDash','\u22AD':'nvDash','\u22A9':'Vdash','\u22AE':'nVdash','\u22AA':'Vvdash','\u22AB':'VDash','\u22AF':'nVDash','\u22B0':'prurel','\u22B2':'vltri','\u22EA':'nltri','\u22B3':'vrtri','\u22EB':'nrtri','\u22B4':'ltrie','\u22EC':'nltrie','\u22B4\u20D2':'nvltrie','\u22B5':'rtrie','\u22ED':'nrtrie','\u22B5\u20D2':'nvrtrie','\u22B6':'origof','\u22B7':'imof','\u22B8':'mumap','\u22B9':'hercon','\u22BA':'intcal','\u22BB':'veebar','\u22BD':'barvee','\u22BE':'angrtvb','\u22BF':'lrtri','\u22C0':'Wedge','\u22C1':'Vee','\u22C2':'xcap','\u22C3':'xcup','\u22C4':'diam','\u22C5':'sdot','\u22C6':'Star','\u22C7':'divonx','\u22C8':'bowtie','\u22C9':'ltimes','\u22CA':'rtimes','\u22CB':'lthree','\u22CC':'rthree','\u22CD':'bsime','\u22CE':'cuvee','\u22CF':'cuwed','\u22D0':'Sub','\u22D1':'Sup','\u22D2':'Cap','\u22D3':'Cup','\u22D4':'fork','\u22D5':'epar','\u22D6':'ltdot','\u22D7':'gtdot','\u22D8':'Ll','\u22D8\u0338':'nLl','\u22D9':'Gg','\u22D9\u0338':'nGg','\u22DA\uFE00':'lesg','\u22DA':'leg','\u22DB':'gel','\u22DB\uFE00':'gesl','\u22DE':'cuepr','\u22DF':'cuesc','\u22E6':'lnsim','\u22E7':'gnsim','\u22E8':'prnsim','\u22E9':'scnsim','\u22EE':'vellip','\u22EF':'ctdot','\u22F0':'utdot','\u22F1':'dtdot','\u22F2':'disin','\u22F3':'isinsv','\u22F4':'isins','\u22F5':'isindot','\u22F5\u0338':'notindot','\u22F6':'notinvc','\u22F7':'notinvb','\u22F9':'isinE','\u22F9\u0338':'notinE','\u22FA':'nisd','\u22FB':'xnis','\u22FC':'nis','\u22FD':'notnivc','\u22FE':'notnivb','\u2305':'barwed','\u2306':'Barwed','\u230C':'drcrop','\u230D':'dlcrop','\u230E':'urcrop','\u230F':'ulcrop','\u2310':'bnot','\u2312':'profline','\u2313':'profsurf','\u2315':'telrec','\u2316':'target','\u231C':'ulcorn','\u231D':'urcorn','\u231E':'dlcorn','\u231F':'drcorn','\u2322':'frown','\u2323':'smile','\u232D':'cylcty','\u232E':'profalar','\u2336':'topbot','\u233D':'ovbar','\u233F':'solbar','\u237C':'angzarr','\u23B0':'lmoust','\u23B1':'rmoust','\u23B4':'tbrk','\u23B5':'bbrk','\u23B6':'bbrktbrk','\u23DC':'OverParenthesis','\u23DD':'UnderParenthesis','\u23DE':'OverBrace','\u23DF':'UnderBrace','\u23E2':'trpezium','\u23E7':'elinters','\u2423':'blank','\u2500':'boxh','\u2502':'boxv','\u250C':'boxdr','\u2510':'boxdl','\u2514':'boxur','\u2518':'boxul','\u251C':'boxvr','\u2524':'boxvl','\u252C':'boxhd','\u2534':'boxhu','\u253C':'boxvh','\u2550':'boxH','\u2551':'boxV','\u2552':'boxdR','\u2553':'boxDr','\u2554':'boxDR','\u2555':'boxdL','\u2556':'boxDl','\u2557':'boxDL','\u2558':'boxuR','\u2559':'boxUr','\u255A':'boxUR','\u255B':'boxuL','\u255C':'boxUl','\u255D':'boxUL','\u255E':'boxvR','\u255F':'boxVr','\u2560':'boxVR','\u2561':'boxvL','\u2562':'boxVl','\u2563':'boxVL','\u2564':'boxHd','\u2565':'boxhD','\u2566':'boxHD','\u2567':'boxHu','\u2568':'boxhU','\u2569':'boxHU','\u256A':'boxvH','\u256B':'boxVh','\u256C':'boxVH','\u2580':'uhblk','\u2584':'lhblk','\u2588':'block','\u2591':'blk14','\u2592':'blk12','\u2593':'blk34','\u25A1':'squ','\u25AA':'squf','\u25AB':'EmptyVerySmallSquare','\u25AD':'rect','\u25AE':'marker','\u25B1':'fltns','\u25B3':'xutri','\u25B4':'utrif','\u25B5':'utri','\u25B8':'rtrif','\u25B9':'rtri','\u25BD':'xdtri','\u25BE':'dtrif','\u25BF':'dtri','\u25C2':'ltrif','\u25C3':'ltri','\u25CA':'loz','\u25CB':'cir','\u25EC':'tridot','\u25EF':'xcirc','\u25F8':'ultri','\u25F9':'urtri','\u25FA':'lltri','\u25FB':'EmptySmallSquare','\u25FC':'FilledSmallSquare','\u2605':'starf','\u2606':'star','\u260E':'phone','\u2640':'female','\u2642':'male','\u2660':'spades','\u2663':'clubs','\u2665':'hearts','\u2666':'diams','\u266A':'sung','\u2713':'check','\u2717':'cross','\u2720':'malt','\u2736':'sext','\u2758':'VerticalSeparator','\u27C8':'bsolhsub','\u27C9':'suphsol','\u27F5':'xlarr','\u27F6':'xrarr','\u27F7':'xharr','\u27F8':'xlArr','\u27F9':'xrArr','\u27FA':'xhArr','\u27FC':'xmap','\u27FF':'dzigrarr','\u2902':'nvlArr','\u2903':'nvrArr','\u2904':'nvHarr','\u2905':'Map','\u290C':'lbarr','\u290D':'rbarr','\u290E':'lBarr','\u290F':'rBarr','\u2910':'RBarr','\u2911':'DDotrahd','\u2912':'UpArrowBar','\u2913':'DownArrowBar','\u2916':'Rarrtl','\u2919':'latail','\u291A':'ratail','\u291B':'lAtail','\u291C':'rAtail','\u291D':'larrfs','\u291E':'rarrfs','\u291F':'larrbfs','\u2920':'rarrbfs','\u2923':'nwarhk','\u2924':'nearhk','\u2925':'searhk','\u2926':'swarhk','\u2927':'nwnear','\u2928':'toea','\u2929':'tosa','\u292A':'swnwar','\u2933':'rarrc','\u2933\u0338':'nrarrc','\u2935':'cudarrr','\u2936':'ldca','\u2937':'rdca','\u2938':'cudarrl','\u2939':'larrpl','\u293C':'curarrm','\u293D':'cularrp','\u2945':'rarrpl','\u2948':'harrcir','\u2949':'Uarrocir','\u294A':'lurdshar','\u294B':'ldrushar','\u294E':'LeftRightVector','\u294F':'RightUpDownVector','\u2950':'DownLeftRightVector','\u2951':'LeftUpDownVector','\u2952':'LeftVectorBar','\u2953':'RightVectorBar','\u2954':'RightUpVectorBar','\u2955':'RightDownVectorBar','\u2956':'DownLeftVectorBar','\u2957':'DownRightVectorBar','\u2958':'LeftUpVectorBar','\u2959':'LeftDownVectorBar','\u295A':'LeftTeeVector','\u295B':'RightTeeVector','\u295C':'RightUpTeeVector','\u295D':'RightDownTeeVector','\u295E':'DownLeftTeeVector','\u295F':'DownRightTeeVector','\u2960':'LeftUpTeeVector','\u2961':'LeftDownTeeVector','\u2962':'lHar','\u2963':'uHar','\u2964':'rHar','\u2965':'dHar','\u2966':'luruhar','\u2967':'ldrdhar','\u2968':'ruluhar','\u2969':'rdldhar','\u296A':'lharul','\u296B':'llhard','\u296C':'rharul','\u296D':'lrhard','\u296E':'udhar','\u296F':'duhar','\u2970':'RoundImplies','\u2971':'erarr','\u2972':'simrarr','\u2973':'larrsim','\u2974':'rarrsim','\u2975':'rarrap','\u2976':'ltlarr','\u2978':'gtrarr','\u2979':'subrarr','\u297B':'suplarr','\u297C':'lfisht','\u297D':'rfisht','\u297E':'ufisht','\u297F':'dfisht','\u299A':'vzigzag','\u299C':'vangrt','\u299D':'angrtvbd','\u29A4':'ange','\u29A5':'range','\u29A6':'dwangle','\u29A7':'uwangle','\u29A8':'angmsdaa','\u29A9':'angmsdab','\u29AA':'angmsdac','\u29AB':'angmsdad','\u29AC':'angmsdae','\u29AD':'angmsdaf','\u29AE':'angmsdag','\u29AF':'angmsdah','\u29B0':'bemptyv','\u29B1':'demptyv','\u29B2':'cemptyv','\u29B3':'raemptyv','\u29B4':'laemptyv','\u29B5':'ohbar','\u29B6':'omid','\u29B7':'opar','\u29B9':'operp','\u29BB':'olcross','\u29BC':'odsold','\u29BE':'olcir','\u29BF':'ofcir','\u29C0':'olt','\u29C1':'ogt','\u29C2':'cirscir','\u29C3':'cirE','\u29C4':'solb','\u29C5':'bsolb','\u29C9':'boxbox','\u29CD':'trisb','\u29CE':'rtriltri','\u29CF':'LeftTriangleBar','\u29CF\u0338':'NotLeftTriangleBar','\u29D0':'RightTriangleBar','\u29D0\u0338':'NotRightTriangleBar','\u29DC':'iinfin','\u29DD':'infintie','\u29DE':'nvinfin','\u29E3':'eparsl','\u29E4':'smeparsl','\u29E5':'eqvparsl','\u29EB':'lozf','\u29F4':'RuleDelayed','\u29F6':'dsol','\u2A00':'xodot','\u2A01':'xoplus','\u2A02':'xotime','\u2A04':'xuplus','\u2A06':'xsqcup','\u2A0D':'fpartint','\u2A10':'cirfnint','\u2A11':'awint','\u2A12':'rppolint','\u2A13':'scpolint','\u2A14':'npolint','\u2A15':'pointint','\u2A16':'quatint','\u2A17':'intlarhk','\u2A22':'pluscir','\u2A23':'plusacir','\u2A24':'simplus','\u2A25':'plusdu','\u2A26':'plussim','\u2A27':'plustwo','\u2A29':'mcomma','\u2A2A':'minusdu','\u2A2D':'loplus','\u2A2E':'roplus','\u2A2F':'Cross','\u2A30':'timesd','\u2A31':'timesbar','\u2A33':'smashp','\u2A34':'lotimes','\u2A35':'rotimes','\u2A36':'otimesas','\u2A37':'Otimes','\u2A38':'odiv','\u2A39':'triplus','\u2A3A':'triminus','\u2A3B':'tritime','\u2A3C':'iprod','\u2A3F':'amalg','\u2A40':'capdot','\u2A42':'ncup','\u2A43':'ncap','\u2A44':'capand','\u2A45':'cupor','\u2A46':'cupcap','\u2A47':'capcup','\u2A48':'cupbrcap','\u2A49':'capbrcup','\u2A4A':'cupcup','\u2A4B':'capcap','\u2A4C':'ccups','\u2A4D':'ccaps','\u2A50':'ccupssm','\u2A53':'And','\u2A54':'Or','\u2A55':'andand','\u2A56':'oror','\u2A57':'orslope','\u2A58':'andslope','\u2A5A':'andv','\u2A5B':'orv','\u2A5C':'andd','\u2A5D':'ord','\u2A5F':'wedbar','\u2A66':'sdote','\u2A6A':'simdot','\u2A6D':'congdot','\u2A6D\u0338':'ncongdot','\u2A6E':'easter','\u2A6F':'apacir','\u2A70':'apE','\u2A70\u0338':'napE','\u2A71':'eplus','\u2A72':'pluse','\u2A73':'Esim','\u2A77':'eDDot','\u2A78':'equivDD','\u2A79':'ltcir','\u2A7A':'gtcir','\u2A7B':'ltquest','\u2A7C':'gtquest','\u2A7D':'les','\u2A7D\u0338':'nles','\u2A7E':'ges','\u2A7E\u0338':'nges','\u2A7F':'lesdot','\u2A80':'gesdot','\u2A81':'lesdoto','\u2A82':'gesdoto','\u2A83':'lesdotor','\u2A84':'gesdotol','\u2A85':'lap','\u2A86':'gap','\u2A87':'lne','\u2A88':'gne','\u2A89':'lnap','\u2A8A':'gnap','\u2A8B':'lEg','\u2A8C':'gEl','\u2A8D':'lsime','\u2A8E':'gsime','\u2A8F':'lsimg','\u2A90':'gsiml','\u2A91':'lgE','\u2A92':'glE','\u2A93':'lesges','\u2A94':'gesles','\u2A95':'els','\u2A96':'egs','\u2A97':'elsdot','\u2A98':'egsdot','\u2A99':'el','\u2A9A':'eg','\u2A9D':'siml','\u2A9E':'simg','\u2A9F':'simlE','\u2AA0':'simgE','\u2AA1':'LessLess','\u2AA1\u0338':'NotNestedLessLess','\u2AA2':'GreaterGreater','\u2AA2\u0338':'NotNestedGreaterGreater','\u2AA4':'glj','\u2AA5':'gla','\u2AA6':'ltcc','\u2AA7':'gtcc','\u2AA8':'lescc','\u2AA9':'gescc','\u2AAA':'smt','\u2AAB':'lat','\u2AAC':'smte','\u2AAC\uFE00':'smtes','\u2AAD':'late','\u2AAD\uFE00':'lates','\u2AAE':'bumpE','\u2AAF':'pre','\u2AAF\u0338':'npre','\u2AB0':'sce','\u2AB0\u0338':'nsce','\u2AB3':'prE','\u2AB4':'scE','\u2AB5':'prnE','\u2AB6':'scnE','\u2AB7':'prap','\u2AB8':'scap','\u2AB9':'prnap','\u2ABA':'scnap','\u2ABB':'Pr','\u2ABC':'Sc','\u2ABD':'subdot','\u2ABE':'supdot','\u2ABF':'subplus','\u2AC0':'supplus','\u2AC1':'submult','\u2AC2':'supmult','\u2AC3':'subedot','\u2AC4':'supedot','\u2AC5':'subE','\u2AC5\u0338':'nsubE','\u2AC6':'supE','\u2AC6\u0338':'nsupE','\u2AC7':'subsim','\u2AC8':'supsim','\u2ACB\uFE00':'vsubnE','\u2ACB':'subnE','\u2ACC\uFE00':'vsupnE','\u2ACC':'supnE','\u2ACF':'csub','\u2AD0':'csup','\u2AD1':'csube','\u2AD2':'csupe','\u2AD3':'subsup','\u2AD4':'supsub','\u2AD5':'subsub','\u2AD6':'supsup','\u2AD7':'suphsub','\u2AD8':'supdsub','\u2AD9':'forkv','\u2ADA':'topfork','\u2ADB':'mlcp','\u2AE4':'Dashv','\u2AE6':'Vdashl','\u2AE7':'Barv','\u2AE8':'vBar','\u2AE9':'vBarv','\u2AEB':'Vbar','\u2AEC':'Not','\u2AED':'bNot','\u2AEE':'rnmid','\u2AEF':'cirmid','\u2AF0':'midcir','\u2AF1':'topcir','\u2AF2':'nhpar','\u2AF3':'parsim','\u2AFD':'parsl','\u2AFD\u20E5':'nparsl','\u266D':'flat','\u266E':'natur','\u266F':'sharp','\xA4':'curren','\xA2':'cent','$':'dollar','\xA3':'pound','\xA5':'yen','\u20AC':'euro','\xB9':'sup1','\xBD':'half','\u2153':'frac13','\xBC':'frac14','\u2155':'frac15','\u2159':'frac16','\u215B':'frac18','\xB2':'sup2','\u2154':'frac23','\u2156':'frac25','\xB3':'sup3','\xBE':'frac34','\u2157':'frac35','\u215C':'frac38','\u2158':'frac45','\u215A':'frac56','\u215D':'frac58','\u215E':'frac78','\uD835\uDCB6':'ascr','\uD835\uDD52':'aopf','\uD835\uDD1E':'afr','\uD835\uDD38':'Aopf','\uD835\uDD04':'Afr','\uD835\uDC9C':'Ascr','\xAA':'ordf','\xE1':'aacute','\xC1':'Aacute','\xE0':'agrave','\xC0':'Agrave','\u0103':'abreve','\u0102':'Abreve','\xE2':'acirc','\xC2':'Acirc','\xE5':'aring','\xC5':'angst','\xE4':'auml','\xC4':'Auml','\xE3':'atilde','\xC3':'Atilde','\u0105':'aogon','\u0104':'Aogon','\u0101':'amacr','\u0100':'Amacr','\xE6':'aelig','\xC6':'AElig','\uD835\uDCB7':'bscr','\uD835\uDD53':'bopf','\uD835\uDD1F':'bfr','\uD835\uDD39':'Bopf','\u212C':'Bscr','\uD835\uDD05':'Bfr','\uD835\uDD20':'cfr','\uD835\uDCB8':'cscr','\uD835\uDD54':'copf','\u212D':'Cfr','\uD835\uDC9E':'Cscr','\u2102':'Copf','\u0107':'cacute','\u0106':'Cacute','\u0109':'ccirc','\u0108':'Ccirc','\u010D':'ccaron','\u010C':'Ccaron','\u010B':'cdot','\u010A':'Cdot','\xE7':'ccedil','\xC7':'Ccedil','\u2105':'incare','\uD835\uDD21':'dfr','\u2146':'dd','\uD835\uDD55':'dopf','\uD835\uDCB9':'dscr','\uD835\uDC9F':'Dscr','\uD835\uDD07':'Dfr','\u2145':'DD','\uD835\uDD3B':'Dopf','\u010F':'dcaron','\u010E':'Dcaron','\u0111':'dstrok','\u0110':'Dstrok','\xF0':'eth','\xD0':'ETH','\u2147':'ee','\u212F':'escr','\uD835\uDD22':'efr','\uD835\uDD56':'eopf','\u2130':'Escr','\uD835\uDD08':'Efr','\uD835\uDD3C':'Eopf','\xE9':'eacute','\xC9':'Eacute','\xE8':'egrave','\xC8':'Egrave','\xEA':'ecirc','\xCA':'Ecirc','\u011B':'ecaron','\u011A':'Ecaron','\xEB':'euml','\xCB':'Euml','\u0117':'edot','\u0116':'Edot','\u0119':'eogon','\u0118':'Eogon','\u0113':'emacr','\u0112':'Emacr','\uD835\uDD23':'ffr','\uD835\uDD57':'fopf','\uD835\uDCBB':'fscr','\uD835\uDD09':'Ffr','\uD835\uDD3D':'Fopf','\u2131':'Fscr','\uFB00':'fflig','\uFB03':'ffilig','\uFB04':'ffllig','\uFB01':'filig','fj':'fjlig','\uFB02':'fllig','\u0192':'fnof','\u210A':'gscr','\uD835\uDD58':'gopf','\uD835\uDD24':'gfr','\uD835\uDCA2':'Gscr','\uD835\uDD3E':'Gopf','\uD835\uDD0A':'Gfr','\u01F5':'gacute','\u011F':'gbreve','\u011E':'Gbreve','\u011D':'gcirc','\u011C':'Gcirc','\u0121':'gdot','\u0120':'Gdot','\u0122':'Gcedil','\uD835\uDD25':'hfr','\u210E':'planckh','\uD835\uDCBD':'hscr','\uD835\uDD59':'hopf','\u210B':'Hscr','\u210C':'Hfr','\u210D':'Hopf','\u0125':'hcirc','\u0124':'Hcirc','\u210F':'hbar','\u0127':'hstrok','\u0126':'Hstrok','\uD835\uDD5A':'iopf','\uD835\uDD26':'ifr','\uD835\uDCBE':'iscr','\u2148':'ii','\uD835\uDD40':'Iopf','\u2110':'Iscr','\u2111':'Im','\xED':'iacute','\xCD':'Iacute','\xEC':'igrave','\xCC':'Igrave','\xEE':'icirc','\xCE':'Icirc','\xEF':'iuml','\xCF':'Iuml','\u0129':'itilde','\u0128':'Itilde','\u0130':'Idot','\u012F':'iogon','\u012E':'Iogon','\u012B':'imacr','\u012A':'Imacr','\u0133':'ijlig','\u0132':'IJlig','\u0131':'imath','\uD835\uDCBF':'jscr','\uD835\uDD5B':'jopf','\uD835\uDD27':'jfr','\uD835\uDCA5':'Jscr','\uD835\uDD0D':'Jfr','\uD835\uDD41':'Jopf','\u0135':'jcirc','\u0134':'Jcirc','\u0237':'jmath','\uD835\uDD5C':'kopf','\uD835\uDCC0':'kscr','\uD835\uDD28':'kfr','\uD835\uDCA6':'Kscr','\uD835\uDD42':'Kopf','\uD835\uDD0E':'Kfr','\u0137':'kcedil','\u0136':'Kcedil','\uD835\uDD29':'lfr','\uD835\uDCC1':'lscr','\u2113':'ell','\uD835\uDD5D':'lopf','\u2112':'Lscr','\uD835\uDD0F':'Lfr','\uD835\uDD43':'Lopf','\u013A':'lacute','\u0139':'Lacute','\u013E':'lcaron','\u013D':'Lcaron','\u013C':'lcedil','\u013B':'Lcedil','\u0142':'lstrok','\u0141':'Lstrok','\u0140':'lmidot','\u013F':'Lmidot','\uD835\uDD2A':'mfr','\uD835\uDD5E':'mopf','\uD835\uDCC2':'mscr','\uD835\uDD10':'Mfr','\uD835\uDD44':'Mopf','\u2133':'Mscr','\uD835\uDD2B':'nfr','\uD835\uDD5F':'nopf','\uD835\uDCC3':'nscr','\u2115':'Nopf','\uD835\uDCA9':'Nscr','\uD835\uDD11':'Nfr','\u0144':'nacute','\u0143':'Nacute','\u0148':'ncaron','\u0147':'Ncaron','\xF1':'ntilde','\xD1':'Ntilde','\u0146':'ncedil','\u0145':'Ncedil','\u2116':'numero','\u014B':'eng','\u014A':'ENG','\uD835\uDD60':'oopf','\uD835\uDD2C':'ofr','\u2134':'oscr','\uD835\uDCAA':'Oscr','\uD835\uDD12':'Ofr','\uD835\uDD46':'Oopf','\xBA':'ordm','\xF3':'oacute','\xD3':'Oacute','\xF2':'ograve','\xD2':'Ograve','\xF4':'ocirc','\xD4':'Ocirc','\xF6':'ouml','\xD6':'Ouml','\u0151':'odblac','\u0150':'Odblac','\xF5':'otilde','\xD5':'Otilde','\xF8':'oslash','\xD8':'Oslash','\u014D':'omacr','\u014C':'Omacr','\u0153':'oelig','\u0152':'OElig','\uD835\uDD2D':'pfr','\uD835\uDCC5':'pscr','\uD835\uDD61':'popf','\u2119':'Popf','\uD835\uDD13':'Pfr','\uD835\uDCAB':'Pscr','\uD835\uDD62':'qopf','\uD835\uDD2E':'qfr','\uD835\uDCC6':'qscr','\uD835\uDCAC':'Qscr','\uD835\uDD14':'Qfr','\u211A':'Qopf','\u0138':'kgreen','\uD835\uDD2F':'rfr','\uD835\uDD63':'ropf','\uD835\uDCC7':'rscr','\u211B':'Rscr','\u211C':'Re','\u211D':'Ropf','\u0155':'racute','\u0154':'Racute','\u0159':'rcaron','\u0158':'Rcaron','\u0157':'rcedil','\u0156':'Rcedil','\uD835\uDD64':'sopf','\uD835\uDCC8':'sscr','\uD835\uDD30':'sfr','\uD835\uDD4A':'Sopf','\uD835\uDD16':'Sfr','\uD835\uDCAE':'Sscr','\u24C8':'oS','\u015B':'sacute','\u015A':'Sacute','\u015D':'scirc','\u015C':'Scirc','\u0161':'scaron','\u0160':'Scaron','\u015F':'scedil','\u015E':'Scedil','\xDF':'szlig','\uD835\uDD31':'tfr','\uD835\uDCC9':'tscr','\uD835\uDD65':'topf','\uD835\uDCAF':'Tscr','\uD835\uDD17':'Tfr','\uD835\uDD4B':'Topf','\u0165':'tcaron','\u0164':'Tcaron','\u0163':'tcedil','\u0162':'Tcedil','\u2122':'trade','\u0167':'tstrok','\u0166':'Tstrok','\uD835\uDCCA':'uscr','\uD835\uDD66':'uopf','\uD835\uDD32':'ufr','\uD835\uDD4C':'Uopf','\uD835\uDD18':'Ufr','\uD835\uDCB0':'Uscr','\xFA':'uacute','\xDA':'Uacute','\xF9':'ugrave','\xD9':'Ugrave','\u016D':'ubreve','\u016C':'Ubreve','\xFB':'ucirc','\xDB':'Ucirc','\u016F':'uring','\u016E':'Uring','\xFC':'uuml','\xDC':'Uuml','\u0171':'udblac','\u0170':'Udblac','\u0169':'utilde','\u0168':'Utilde','\u0173':'uogon','\u0172':'Uogon','\u016B':'umacr','\u016A':'Umacr','\uD835\uDD33':'vfr','\uD835\uDD67':'vopf','\uD835\uDCCB':'vscr','\uD835\uDD19':'Vfr','\uD835\uDD4D':'Vopf','\uD835\uDCB1':'Vscr','\uD835\uDD68':'wopf','\uD835\uDCCC':'wscr','\uD835\uDD34':'wfr','\uD835\uDCB2':'Wscr','\uD835\uDD4E':'Wopf','\uD835\uDD1A':'Wfr','\u0175':'wcirc','\u0174':'Wcirc','\uD835\uDD35':'xfr','\uD835\uDCCD':'xscr','\uD835\uDD69':'xopf','\uD835\uDD4F':'Xopf','\uD835\uDD1B':'Xfr','\uD835\uDCB3':'Xscr','\uD835\uDD36':'yfr','\uD835\uDCCE':'yscr','\uD835\uDD6A':'yopf','\uD835\uDCB4':'Yscr','\uD835\uDD1C':'Yfr','\uD835\uDD50':'Yopf','\xFD':'yacute','\xDD':'Yacute','\u0177':'ycirc','\u0176':'Ycirc','\xFF':'yuml','\u0178':'Yuml','\uD835\uDCCF':'zscr','\uD835\uDD37':'zfr','\uD835\uDD6B':'zopf','\u2128':'Zfr','\u2124':'Zopf','\uD835\uDCB5':'Zscr','\u017A':'zacute','\u0179':'Zacute','\u017E':'zcaron','\u017D':'Zcaron','\u017C':'zdot','\u017B':'Zdot','\u01B5':'imped','\xFE':'thorn','\xDE':'THORN','\u0149':'napos','\u03B1':'alpha','\u0391':'Alpha','\u03B2':'beta','\u0392':'Beta','\u03B3':'gamma','\u0393':'Gamma','\u03B4':'delta','\u0394':'Delta','\u03B5':'epsi','\u03F5':'epsiv','\u0395':'Epsilon','\u03DD':'gammad','\u03DC':'Gammad','\u03B6':'zeta','\u0396':'Zeta','\u03B7':'eta','\u0397':'Eta','\u03B8':'theta','\u03D1':'thetav','\u0398':'Theta','\u03B9':'iota','\u0399':'Iota','\u03BA':'kappa','\u03F0':'kappav','\u039A':'Kappa','\u03BB':'lambda','\u039B':'Lambda','\u03BC':'mu','\xB5':'micro','\u039C':'Mu','\u03BD':'nu','\u039D':'Nu','\u03BE':'xi','\u039E':'Xi','\u03BF':'omicron','\u039F':'Omicron','\u03C0':'pi','\u03D6':'piv','\u03A0':'Pi','\u03C1':'rho','\u03F1':'rhov','\u03A1':'Rho','\u03C3':'sigma','\u03A3':'Sigma','\u03C2':'sigmaf','\u03C4':'tau','\u03A4':'Tau','\u03C5':'upsi','\u03A5':'Upsilon','\u03D2':'Upsi','\u03C6':'phi','\u03D5':'phiv','\u03A6':'Phi','\u03C7':'chi','\u03A7':'Chi','\u03C8':'psi','\u03A8':'Psi','\u03C9':'omega','\u03A9':'ohm','\u0430':'acy','\u0410':'Acy','\u0431':'bcy','\u0411':'Bcy','\u0432':'vcy','\u0412':'Vcy','\u0433':'gcy','\u0413':'Gcy','\u0453':'gjcy','\u0403':'GJcy','\u0434':'dcy','\u0414':'Dcy','\u0452':'djcy','\u0402':'DJcy','\u0435':'iecy','\u0415':'IEcy','\u0451':'iocy','\u0401':'IOcy','\u0454':'jukcy','\u0404':'Jukcy','\u0436':'zhcy','\u0416':'ZHcy','\u0437':'zcy','\u0417':'Zcy','\u0455':'dscy','\u0405':'DScy','\u0438':'icy','\u0418':'Icy','\u0456':'iukcy','\u0406':'Iukcy','\u0457':'yicy','\u0407':'YIcy','\u0439':'jcy','\u0419':'Jcy','\u0458':'jsercy','\u0408':'Jsercy','\u043A':'kcy','\u041A':'Kcy','\u045C':'kjcy','\u040C':'KJcy','\u043B':'lcy','\u041B':'Lcy','\u0459':'ljcy','\u0409':'LJcy','\u043C':'mcy','\u041C':'Mcy','\u043D':'ncy','\u041D':'Ncy','\u045A':'njcy','\u040A':'NJcy','\u043E':'ocy','\u041E':'Ocy','\u043F':'pcy','\u041F':'Pcy','\u0440':'rcy','\u0420':'Rcy','\u0441':'scy','\u0421':'Scy','\u0442':'tcy','\u0422':'Tcy','\u045B':'tshcy','\u040B':'TSHcy','\u0443':'ucy','\u0423':'Ucy','\u045E':'ubrcy','\u040E':'Ubrcy','\u0444':'fcy','\u0424':'Fcy','\u0445':'khcy','\u0425':'KHcy','\u0446':'tscy','\u0426':'TScy','\u0447':'chcy','\u0427':'CHcy','\u045F':'dzcy','\u040F':'DZcy','\u0448':'shcy','\u0428':'SHcy','\u0449':'shchcy','\u0429':'SHCHcy','\u044A':'hardcy','\u042A':'HARDcy','\u044B':'ycy','\u042B':'Ycy','\u044C':'softcy','\u042C':'SOFTcy','\u044D':'ecy','\u042D':'Ecy','\u044E':'yucy','\u042E':'YUcy','\u044F':'yacy','\u042F':'YAcy','\u2135':'aleph','\u2136':'beth','\u2137':'gimel','\u2138':'daleth'};

	var regexEscape = /["&'<>`]/g;
	var escapeMap = {
		'"': '&quot;',
		'&': '&amp;',
		'\'': '&#x27;',
		'<': '&lt;',
		// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
		// following is not strictly necessary unless it’s part of a tag or an
		// unquoted attribute value. We’re only escaping it to support those
		// situations, and for XML support.
		'>': '&gt;',
		// In Internet Explorer ≤ 8, the backtick character can be used
		// to break out of (un)quoted attribute values or HTML comments.
		// See http://html5sec.org/#102, http://html5sec.org/#108, and
		// http://html5sec.org/#133.
		'`': '&#x60;'
	};

	var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
	var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
	var decodeMap = {'aacute':'\xE1','Aacute':'\xC1','abreve':'\u0103','Abreve':'\u0102','ac':'\u223E','acd':'\u223F','acE':'\u223E\u0333','acirc':'\xE2','Acirc':'\xC2','acute':'\xB4','acy':'\u0430','Acy':'\u0410','aelig':'\xE6','AElig':'\xC6','af':'\u2061','afr':'\uD835\uDD1E','Afr':'\uD835\uDD04','agrave':'\xE0','Agrave':'\xC0','alefsym':'\u2135','aleph':'\u2135','alpha':'\u03B1','Alpha':'\u0391','amacr':'\u0101','Amacr':'\u0100','amalg':'\u2A3F','amp':'&','AMP':'&','and':'\u2227','And':'\u2A53','andand':'\u2A55','andd':'\u2A5C','andslope':'\u2A58','andv':'\u2A5A','ang':'\u2220','ange':'\u29A4','angle':'\u2220','angmsd':'\u2221','angmsdaa':'\u29A8','angmsdab':'\u29A9','angmsdac':'\u29AA','angmsdad':'\u29AB','angmsdae':'\u29AC','angmsdaf':'\u29AD','angmsdag':'\u29AE','angmsdah':'\u29AF','angrt':'\u221F','angrtvb':'\u22BE','angrtvbd':'\u299D','angsph':'\u2222','angst':'\xC5','angzarr':'\u237C','aogon':'\u0105','Aogon':'\u0104','aopf':'\uD835\uDD52','Aopf':'\uD835\uDD38','ap':'\u2248','apacir':'\u2A6F','ape':'\u224A','apE':'\u2A70','apid':'\u224B','apos':'\'','ApplyFunction':'\u2061','approx':'\u2248','approxeq':'\u224A','aring':'\xE5','Aring':'\xC5','ascr':'\uD835\uDCB6','Ascr':'\uD835\uDC9C','Assign':'\u2254','ast':'*','asymp':'\u2248','asympeq':'\u224D','atilde':'\xE3','Atilde':'\xC3','auml':'\xE4','Auml':'\xC4','awconint':'\u2233','awint':'\u2A11','backcong':'\u224C','backepsilon':'\u03F6','backprime':'\u2035','backsim':'\u223D','backsimeq':'\u22CD','Backslash':'\u2216','Barv':'\u2AE7','barvee':'\u22BD','barwed':'\u2305','Barwed':'\u2306','barwedge':'\u2305','bbrk':'\u23B5','bbrktbrk':'\u23B6','bcong':'\u224C','bcy':'\u0431','Bcy':'\u0411','bdquo':'\u201E','becaus':'\u2235','because':'\u2235','Because':'\u2235','bemptyv':'\u29B0','bepsi':'\u03F6','bernou':'\u212C','Bernoullis':'\u212C','beta':'\u03B2','Beta':'\u0392','beth':'\u2136','between':'\u226C','bfr':'\uD835\uDD1F','Bfr':'\uD835\uDD05','bigcap':'\u22C2','bigcirc':'\u25EF','bigcup':'\u22C3','bigodot':'\u2A00','bigoplus':'\u2A01','bigotimes':'\u2A02','bigsqcup':'\u2A06','bigstar':'\u2605','bigtriangledown':'\u25BD','bigtriangleup':'\u25B3','biguplus':'\u2A04','bigvee':'\u22C1','bigwedge':'\u22C0','bkarow':'\u290D','blacklozenge':'\u29EB','blacksquare':'\u25AA','blacktriangle':'\u25B4','blacktriangledown':'\u25BE','blacktriangleleft':'\u25C2','blacktriangleright':'\u25B8','blank':'\u2423','blk12':'\u2592','blk14':'\u2591','blk34':'\u2593','block':'\u2588','bne':'=\u20E5','bnequiv':'\u2261\u20E5','bnot':'\u2310','bNot':'\u2AED','bopf':'\uD835\uDD53','Bopf':'\uD835\uDD39','bot':'\u22A5','bottom':'\u22A5','bowtie':'\u22C8','boxbox':'\u29C9','boxdl':'\u2510','boxdL':'\u2555','boxDl':'\u2556','boxDL':'\u2557','boxdr':'\u250C','boxdR':'\u2552','boxDr':'\u2553','boxDR':'\u2554','boxh':'\u2500','boxH':'\u2550','boxhd':'\u252C','boxhD':'\u2565','boxHd':'\u2564','boxHD':'\u2566','boxhu':'\u2534','boxhU':'\u2568','boxHu':'\u2567','boxHU':'\u2569','boxminus':'\u229F','boxplus':'\u229E','boxtimes':'\u22A0','boxul':'\u2518','boxuL':'\u255B','boxUl':'\u255C','boxUL':'\u255D','boxur':'\u2514','boxuR':'\u2558','boxUr':'\u2559','boxUR':'\u255A','boxv':'\u2502','boxV':'\u2551','boxvh':'\u253C','boxvH':'\u256A','boxVh':'\u256B','boxVH':'\u256C','boxvl':'\u2524','boxvL':'\u2561','boxVl':'\u2562','boxVL':'\u2563','boxvr':'\u251C','boxvR':'\u255E','boxVr':'\u255F','boxVR':'\u2560','bprime':'\u2035','breve':'\u02D8','Breve':'\u02D8','brvbar':'\xA6','bscr':'\uD835\uDCB7','Bscr':'\u212C','bsemi':'\u204F','bsim':'\u223D','bsime':'\u22CD','bsol':'\\','bsolb':'\u29C5','bsolhsub':'\u27C8','bull':'\u2022','bullet':'\u2022','bump':'\u224E','bumpe':'\u224F','bumpE':'\u2AAE','bumpeq':'\u224F','Bumpeq':'\u224E','cacute':'\u0107','Cacute':'\u0106','cap':'\u2229','Cap':'\u22D2','capand':'\u2A44','capbrcup':'\u2A49','capcap':'\u2A4B','capcup':'\u2A47','capdot':'\u2A40','CapitalDifferentialD':'\u2145','caps':'\u2229\uFE00','caret':'\u2041','caron':'\u02C7','Cayleys':'\u212D','ccaps':'\u2A4D','ccaron':'\u010D','Ccaron':'\u010C','ccedil':'\xE7','Ccedil':'\xC7','ccirc':'\u0109','Ccirc':'\u0108','Cconint':'\u2230','ccups':'\u2A4C','ccupssm':'\u2A50','cdot':'\u010B','Cdot':'\u010A','cedil':'\xB8','Cedilla':'\xB8','cemptyv':'\u29B2','cent':'\xA2','centerdot':'\xB7','CenterDot':'\xB7','cfr':'\uD835\uDD20','Cfr':'\u212D','chcy':'\u0447','CHcy':'\u0427','check':'\u2713','checkmark':'\u2713','chi':'\u03C7','Chi':'\u03A7','cir':'\u25CB','circ':'\u02C6','circeq':'\u2257','circlearrowleft':'\u21BA','circlearrowright':'\u21BB','circledast':'\u229B','circledcirc':'\u229A','circleddash':'\u229D','CircleDot':'\u2299','circledR':'\xAE','circledS':'\u24C8','CircleMinus':'\u2296','CirclePlus':'\u2295','CircleTimes':'\u2297','cire':'\u2257','cirE':'\u29C3','cirfnint':'\u2A10','cirmid':'\u2AEF','cirscir':'\u29C2','ClockwiseContourIntegral':'\u2232','CloseCurlyDoubleQuote':'\u201D','CloseCurlyQuote':'\u2019','clubs':'\u2663','clubsuit':'\u2663','colon':':','Colon':'\u2237','colone':'\u2254','Colone':'\u2A74','coloneq':'\u2254','comma':',','commat':'@','comp':'\u2201','compfn':'\u2218','complement':'\u2201','complexes':'\u2102','cong':'\u2245','congdot':'\u2A6D','Congruent':'\u2261','conint':'\u222E','Conint':'\u222F','ContourIntegral':'\u222E','copf':'\uD835\uDD54','Copf':'\u2102','coprod':'\u2210','Coproduct':'\u2210','copy':'\xA9','COPY':'\xA9','copysr':'\u2117','CounterClockwiseContourIntegral':'\u2233','crarr':'\u21B5','cross':'\u2717','Cross':'\u2A2F','cscr':'\uD835\uDCB8','Cscr':'\uD835\uDC9E','csub':'\u2ACF','csube':'\u2AD1','csup':'\u2AD0','csupe':'\u2AD2','ctdot':'\u22EF','cudarrl':'\u2938','cudarrr':'\u2935','cuepr':'\u22DE','cuesc':'\u22DF','cularr':'\u21B6','cularrp':'\u293D','cup':'\u222A','Cup':'\u22D3','cupbrcap':'\u2A48','cupcap':'\u2A46','CupCap':'\u224D','cupcup':'\u2A4A','cupdot':'\u228D','cupor':'\u2A45','cups':'\u222A\uFE00','curarr':'\u21B7','curarrm':'\u293C','curlyeqprec':'\u22DE','curlyeqsucc':'\u22DF','curlyvee':'\u22CE','curlywedge':'\u22CF','curren':'\xA4','curvearrowleft':'\u21B6','curvearrowright':'\u21B7','cuvee':'\u22CE','cuwed':'\u22CF','cwconint':'\u2232','cwint':'\u2231','cylcty':'\u232D','dagger':'\u2020','Dagger':'\u2021','daleth':'\u2138','darr':'\u2193','dArr':'\u21D3','Darr':'\u21A1','dash':'\u2010','dashv':'\u22A3','Dashv':'\u2AE4','dbkarow':'\u290F','dblac':'\u02DD','dcaron':'\u010F','Dcaron':'\u010E','dcy':'\u0434','Dcy':'\u0414','dd':'\u2146','DD':'\u2145','ddagger':'\u2021','ddarr':'\u21CA','DDotrahd':'\u2911','ddotseq':'\u2A77','deg':'\xB0','Del':'\u2207','delta':'\u03B4','Delta':'\u0394','demptyv':'\u29B1','dfisht':'\u297F','dfr':'\uD835\uDD21','Dfr':'\uD835\uDD07','dHar':'\u2965','dharl':'\u21C3','dharr':'\u21C2','DiacriticalAcute':'\xB4','DiacriticalDot':'\u02D9','DiacriticalDoubleAcute':'\u02DD','DiacriticalGrave':'`','DiacriticalTilde':'\u02DC','diam':'\u22C4','diamond':'\u22C4','Diamond':'\u22C4','diamondsuit':'\u2666','diams':'\u2666','die':'\xA8','DifferentialD':'\u2146','digamma':'\u03DD','disin':'\u22F2','div':'\xF7','divide':'\xF7','divideontimes':'\u22C7','divonx':'\u22C7','djcy':'\u0452','DJcy':'\u0402','dlcorn':'\u231E','dlcrop':'\u230D','dollar':'$','dopf':'\uD835\uDD55','Dopf':'\uD835\uDD3B','dot':'\u02D9','Dot':'\xA8','DotDot':'\u20DC','doteq':'\u2250','doteqdot':'\u2251','DotEqual':'\u2250','dotminus':'\u2238','dotplus':'\u2214','dotsquare':'\u22A1','doublebarwedge':'\u2306','DoubleContourIntegral':'\u222F','DoubleDot':'\xA8','DoubleDownArrow':'\u21D3','DoubleLeftArrow':'\u21D0','DoubleLeftRightArrow':'\u21D4','DoubleLeftTee':'\u2AE4','DoubleLongLeftArrow':'\u27F8','DoubleLongLeftRightArrow':'\u27FA','DoubleLongRightArrow':'\u27F9','DoubleRightArrow':'\u21D2','DoubleRightTee':'\u22A8','DoubleUpArrow':'\u21D1','DoubleUpDownArrow':'\u21D5','DoubleVerticalBar':'\u2225','downarrow':'\u2193','Downarrow':'\u21D3','DownArrow':'\u2193','DownArrowBar':'\u2913','DownArrowUpArrow':'\u21F5','DownBreve':'\u0311','downdownarrows':'\u21CA','downharpoonleft':'\u21C3','downharpoonright':'\u21C2','DownLeftRightVector':'\u2950','DownLeftTeeVector':'\u295E','DownLeftVector':'\u21BD','DownLeftVectorBar':'\u2956','DownRightTeeVector':'\u295F','DownRightVector':'\u21C1','DownRightVectorBar':'\u2957','DownTee':'\u22A4','DownTeeArrow':'\u21A7','drbkarow':'\u2910','drcorn':'\u231F','drcrop':'\u230C','dscr':'\uD835\uDCB9','Dscr':'\uD835\uDC9F','dscy':'\u0455','DScy':'\u0405','dsol':'\u29F6','dstrok':'\u0111','Dstrok':'\u0110','dtdot':'\u22F1','dtri':'\u25BF','dtrif':'\u25BE','duarr':'\u21F5','duhar':'\u296F','dwangle':'\u29A6','dzcy':'\u045F','DZcy':'\u040F','dzigrarr':'\u27FF','eacute':'\xE9','Eacute':'\xC9','easter':'\u2A6E','ecaron':'\u011B','Ecaron':'\u011A','ecir':'\u2256','ecirc':'\xEA','Ecirc':'\xCA','ecolon':'\u2255','ecy':'\u044D','Ecy':'\u042D','eDDot':'\u2A77','edot':'\u0117','eDot':'\u2251','Edot':'\u0116','ee':'\u2147','efDot':'\u2252','efr':'\uD835\uDD22','Efr':'\uD835\uDD08','eg':'\u2A9A','egrave':'\xE8','Egrave':'\xC8','egs':'\u2A96','egsdot':'\u2A98','el':'\u2A99','Element':'\u2208','elinters':'\u23E7','ell':'\u2113','els':'\u2A95','elsdot':'\u2A97','emacr':'\u0113','Emacr':'\u0112','empty':'\u2205','emptyset':'\u2205','EmptySmallSquare':'\u25FB','emptyv':'\u2205','EmptyVerySmallSquare':'\u25AB','emsp':'\u2003','emsp13':'\u2004','emsp14':'\u2005','eng':'\u014B','ENG':'\u014A','ensp':'\u2002','eogon':'\u0119','Eogon':'\u0118','eopf':'\uD835\uDD56','Eopf':'\uD835\uDD3C','epar':'\u22D5','eparsl':'\u29E3','eplus':'\u2A71','epsi':'\u03B5','epsilon':'\u03B5','Epsilon':'\u0395','epsiv':'\u03F5','eqcirc':'\u2256','eqcolon':'\u2255','eqsim':'\u2242','eqslantgtr':'\u2A96','eqslantless':'\u2A95','Equal':'\u2A75','equals':'=','EqualTilde':'\u2242','equest':'\u225F','Equilibrium':'\u21CC','equiv':'\u2261','equivDD':'\u2A78','eqvparsl':'\u29E5','erarr':'\u2971','erDot':'\u2253','escr':'\u212F','Escr':'\u2130','esdot':'\u2250','esim':'\u2242','Esim':'\u2A73','eta':'\u03B7','Eta':'\u0397','eth':'\xF0','ETH':'\xD0','euml':'\xEB','Euml':'\xCB','euro':'\u20AC','excl':'!','exist':'\u2203','Exists':'\u2203','expectation':'\u2130','exponentiale':'\u2147','ExponentialE':'\u2147','fallingdotseq':'\u2252','fcy':'\u0444','Fcy':'\u0424','female':'\u2640','ffilig':'\uFB03','fflig':'\uFB00','ffllig':'\uFB04','ffr':'\uD835\uDD23','Ffr':'\uD835\uDD09','filig':'\uFB01','FilledSmallSquare':'\u25FC','FilledVerySmallSquare':'\u25AA','fjlig':'fj','flat':'\u266D','fllig':'\uFB02','fltns':'\u25B1','fnof':'\u0192','fopf':'\uD835\uDD57','Fopf':'\uD835\uDD3D','forall':'\u2200','ForAll':'\u2200','fork':'\u22D4','forkv':'\u2AD9','Fouriertrf':'\u2131','fpartint':'\u2A0D','frac12':'\xBD','frac13':'\u2153','frac14':'\xBC','frac15':'\u2155','frac16':'\u2159','frac18':'\u215B','frac23':'\u2154','frac25':'\u2156','frac34':'\xBE','frac35':'\u2157','frac38':'\u215C','frac45':'\u2158','frac56':'\u215A','frac58':'\u215D','frac78':'\u215E','frasl':'\u2044','frown':'\u2322','fscr':'\uD835\uDCBB','Fscr':'\u2131','gacute':'\u01F5','gamma':'\u03B3','Gamma':'\u0393','gammad':'\u03DD','Gammad':'\u03DC','gap':'\u2A86','gbreve':'\u011F','Gbreve':'\u011E','Gcedil':'\u0122','gcirc':'\u011D','Gcirc':'\u011C','gcy':'\u0433','Gcy':'\u0413','gdot':'\u0121','Gdot':'\u0120','ge':'\u2265','gE':'\u2267','gel':'\u22DB','gEl':'\u2A8C','geq':'\u2265','geqq':'\u2267','geqslant':'\u2A7E','ges':'\u2A7E','gescc':'\u2AA9','gesdot':'\u2A80','gesdoto':'\u2A82','gesdotol':'\u2A84','gesl':'\u22DB\uFE00','gesles':'\u2A94','gfr':'\uD835\uDD24','Gfr':'\uD835\uDD0A','gg':'\u226B','Gg':'\u22D9','ggg':'\u22D9','gimel':'\u2137','gjcy':'\u0453','GJcy':'\u0403','gl':'\u2277','gla':'\u2AA5','glE':'\u2A92','glj':'\u2AA4','gnap':'\u2A8A','gnapprox':'\u2A8A','gne':'\u2A88','gnE':'\u2269','gneq':'\u2A88','gneqq':'\u2269','gnsim':'\u22E7','gopf':'\uD835\uDD58','Gopf':'\uD835\uDD3E','grave':'`','GreaterEqual':'\u2265','GreaterEqualLess':'\u22DB','GreaterFullEqual':'\u2267','GreaterGreater':'\u2AA2','GreaterLess':'\u2277','GreaterSlantEqual':'\u2A7E','GreaterTilde':'\u2273','gscr':'\u210A','Gscr':'\uD835\uDCA2','gsim':'\u2273','gsime':'\u2A8E','gsiml':'\u2A90','gt':'>','Gt':'\u226B','GT':'>','gtcc':'\u2AA7','gtcir':'\u2A7A','gtdot':'\u22D7','gtlPar':'\u2995','gtquest':'\u2A7C','gtrapprox':'\u2A86','gtrarr':'\u2978','gtrdot':'\u22D7','gtreqless':'\u22DB','gtreqqless':'\u2A8C','gtrless':'\u2277','gtrsim':'\u2273','gvertneqq':'\u2269\uFE00','gvnE':'\u2269\uFE00','Hacek':'\u02C7','hairsp':'\u200A','half':'\xBD','hamilt':'\u210B','hardcy':'\u044A','HARDcy':'\u042A','harr':'\u2194','hArr':'\u21D4','harrcir':'\u2948','harrw':'\u21AD','Hat':'^','hbar':'\u210F','hcirc':'\u0125','Hcirc':'\u0124','hearts':'\u2665','heartsuit':'\u2665','hellip':'\u2026','hercon':'\u22B9','hfr':'\uD835\uDD25','Hfr':'\u210C','HilbertSpace':'\u210B','hksearow':'\u2925','hkswarow':'\u2926','hoarr':'\u21FF','homtht':'\u223B','hookleftarrow':'\u21A9','hookrightarrow':'\u21AA','hopf':'\uD835\uDD59','Hopf':'\u210D','horbar':'\u2015','HorizontalLine':'\u2500','hscr':'\uD835\uDCBD','Hscr':'\u210B','hslash':'\u210F','hstrok':'\u0127','Hstrok':'\u0126','HumpDownHump':'\u224E','HumpEqual':'\u224F','hybull':'\u2043','hyphen':'\u2010','iacute':'\xED','Iacute':'\xCD','ic':'\u2063','icirc':'\xEE','Icirc':'\xCE','icy':'\u0438','Icy':'\u0418','Idot':'\u0130','iecy':'\u0435','IEcy':'\u0415','iexcl':'\xA1','iff':'\u21D4','ifr':'\uD835\uDD26','Ifr':'\u2111','igrave':'\xEC','Igrave':'\xCC','ii':'\u2148','iiiint':'\u2A0C','iiint':'\u222D','iinfin':'\u29DC','iiota':'\u2129','ijlig':'\u0133','IJlig':'\u0132','Im':'\u2111','imacr':'\u012B','Imacr':'\u012A','image':'\u2111','ImaginaryI':'\u2148','imagline':'\u2110','imagpart':'\u2111','imath':'\u0131','imof':'\u22B7','imped':'\u01B5','Implies':'\u21D2','in':'\u2208','incare':'\u2105','infin':'\u221E','infintie':'\u29DD','inodot':'\u0131','int':'\u222B','Int':'\u222C','intcal':'\u22BA','integers':'\u2124','Integral':'\u222B','intercal':'\u22BA','Intersection':'\u22C2','intlarhk':'\u2A17','intprod':'\u2A3C','InvisibleComma':'\u2063','InvisibleTimes':'\u2062','iocy':'\u0451','IOcy':'\u0401','iogon':'\u012F','Iogon':'\u012E','iopf':'\uD835\uDD5A','Iopf':'\uD835\uDD40','iota':'\u03B9','Iota':'\u0399','iprod':'\u2A3C','iquest':'\xBF','iscr':'\uD835\uDCBE','Iscr':'\u2110','isin':'\u2208','isindot':'\u22F5','isinE':'\u22F9','isins':'\u22F4','isinsv':'\u22F3','isinv':'\u2208','it':'\u2062','itilde':'\u0129','Itilde':'\u0128','iukcy':'\u0456','Iukcy':'\u0406','iuml':'\xEF','Iuml':'\xCF','jcirc':'\u0135','Jcirc':'\u0134','jcy':'\u0439','Jcy':'\u0419','jfr':'\uD835\uDD27','Jfr':'\uD835\uDD0D','jmath':'\u0237','jopf':'\uD835\uDD5B','Jopf':'\uD835\uDD41','jscr':'\uD835\uDCBF','Jscr':'\uD835\uDCA5','jsercy':'\u0458','Jsercy':'\u0408','jukcy':'\u0454','Jukcy':'\u0404','kappa':'\u03BA','Kappa':'\u039A','kappav':'\u03F0','kcedil':'\u0137','Kcedil':'\u0136','kcy':'\u043A','Kcy':'\u041A','kfr':'\uD835\uDD28','Kfr':'\uD835\uDD0E','kgreen':'\u0138','khcy':'\u0445','KHcy':'\u0425','kjcy':'\u045C','KJcy':'\u040C','kopf':'\uD835\uDD5C','Kopf':'\uD835\uDD42','kscr':'\uD835\uDCC0','Kscr':'\uD835\uDCA6','lAarr':'\u21DA','lacute':'\u013A','Lacute':'\u0139','laemptyv':'\u29B4','lagran':'\u2112','lambda':'\u03BB','Lambda':'\u039B','lang':'\u27E8','Lang':'\u27EA','langd':'\u2991','langle':'\u27E8','lap':'\u2A85','Laplacetrf':'\u2112','laquo':'\xAB','larr':'\u2190','lArr':'\u21D0','Larr':'\u219E','larrb':'\u21E4','larrbfs':'\u291F','larrfs':'\u291D','larrhk':'\u21A9','larrlp':'\u21AB','larrpl':'\u2939','larrsim':'\u2973','larrtl':'\u21A2','lat':'\u2AAB','latail':'\u2919','lAtail':'\u291B','late':'\u2AAD','lates':'\u2AAD\uFE00','lbarr':'\u290C','lBarr':'\u290E','lbbrk':'\u2772','lbrace':'{','lbrack':'[','lbrke':'\u298B','lbrksld':'\u298F','lbrkslu':'\u298D','lcaron':'\u013E','Lcaron':'\u013D','lcedil':'\u013C','Lcedil':'\u013B','lceil':'\u2308','lcub':'{','lcy':'\u043B','Lcy':'\u041B','ldca':'\u2936','ldquo':'\u201C','ldquor':'\u201E','ldrdhar':'\u2967','ldrushar':'\u294B','ldsh':'\u21B2','le':'\u2264','lE':'\u2266','LeftAngleBracket':'\u27E8','leftarrow':'\u2190','Leftarrow':'\u21D0','LeftArrow':'\u2190','LeftArrowBar':'\u21E4','LeftArrowRightArrow':'\u21C6','leftarrowtail':'\u21A2','LeftCeiling':'\u2308','LeftDoubleBracket':'\u27E6','LeftDownTeeVector':'\u2961','LeftDownVector':'\u21C3','LeftDownVectorBar':'\u2959','LeftFloor':'\u230A','leftharpoondown':'\u21BD','leftharpoonup':'\u21BC','leftleftarrows':'\u21C7','leftrightarrow':'\u2194','Leftrightarrow':'\u21D4','LeftRightArrow':'\u2194','leftrightarrows':'\u21C6','leftrightharpoons':'\u21CB','leftrightsquigarrow':'\u21AD','LeftRightVector':'\u294E','LeftTee':'\u22A3','LeftTeeArrow':'\u21A4','LeftTeeVector':'\u295A','leftthreetimes':'\u22CB','LeftTriangle':'\u22B2','LeftTriangleBar':'\u29CF','LeftTriangleEqual':'\u22B4','LeftUpDownVector':'\u2951','LeftUpTeeVector':'\u2960','LeftUpVector':'\u21BF','LeftUpVectorBar':'\u2958','LeftVector':'\u21BC','LeftVectorBar':'\u2952','leg':'\u22DA','lEg':'\u2A8B','leq':'\u2264','leqq':'\u2266','leqslant':'\u2A7D','les':'\u2A7D','lescc':'\u2AA8','lesdot':'\u2A7F','lesdoto':'\u2A81','lesdotor':'\u2A83','lesg':'\u22DA\uFE00','lesges':'\u2A93','lessapprox':'\u2A85','lessdot':'\u22D6','lesseqgtr':'\u22DA','lesseqqgtr':'\u2A8B','LessEqualGreater':'\u22DA','LessFullEqual':'\u2266','LessGreater':'\u2276','lessgtr':'\u2276','LessLess':'\u2AA1','lesssim':'\u2272','LessSlantEqual':'\u2A7D','LessTilde':'\u2272','lfisht':'\u297C','lfloor':'\u230A','lfr':'\uD835\uDD29','Lfr':'\uD835\uDD0F','lg':'\u2276','lgE':'\u2A91','lHar':'\u2962','lhard':'\u21BD','lharu':'\u21BC','lharul':'\u296A','lhblk':'\u2584','ljcy':'\u0459','LJcy':'\u0409','ll':'\u226A','Ll':'\u22D8','llarr':'\u21C7','llcorner':'\u231E','Lleftarrow':'\u21DA','llhard':'\u296B','lltri':'\u25FA','lmidot':'\u0140','Lmidot':'\u013F','lmoust':'\u23B0','lmoustache':'\u23B0','lnap':'\u2A89','lnapprox':'\u2A89','lne':'\u2A87','lnE':'\u2268','lneq':'\u2A87','lneqq':'\u2268','lnsim':'\u22E6','loang':'\u27EC','loarr':'\u21FD','lobrk':'\u27E6','longleftarrow':'\u27F5','Longleftarrow':'\u27F8','LongLeftArrow':'\u27F5','longleftrightarrow':'\u27F7','Longleftrightarrow':'\u27FA','LongLeftRightArrow':'\u27F7','longmapsto':'\u27FC','longrightarrow':'\u27F6','Longrightarrow':'\u27F9','LongRightArrow':'\u27F6','looparrowleft':'\u21AB','looparrowright':'\u21AC','lopar':'\u2985','lopf':'\uD835\uDD5D','Lopf':'\uD835\uDD43','loplus':'\u2A2D','lotimes':'\u2A34','lowast':'\u2217','lowbar':'_','LowerLeftArrow':'\u2199','LowerRightArrow':'\u2198','loz':'\u25CA','lozenge':'\u25CA','lozf':'\u29EB','lpar':'(','lparlt':'\u2993','lrarr':'\u21C6','lrcorner':'\u231F','lrhar':'\u21CB','lrhard':'\u296D','lrm':'\u200E','lrtri':'\u22BF','lsaquo':'\u2039','lscr':'\uD835\uDCC1','Lscr':'\u2112','lsh':'\u21B0','Lsh':'\u21B0','lsim':'\u2272','lsime':'\u2A8D','lsimg':'\u2A8F','lsqb':'[','lsquo':'\u2018','lsquor':'\u201A','lstrok':'\u0142','Lstrok':'\u0141','lt':'<','Lt':'\u226A','LT':'<','ltcc':'\u2AA6','ltcir':'\u2A79','ltdot':'\u22D6','lthree':'\u22CB','ltimes':'\u22C9','ltlarr':'\u2976','ltquest':'\u2A7B','ltri':'\u25C3','ltrie':'\u22B4','ltrif':'\u25C2','ltrPar':'\u2996','lurdshar':'\u294A','luruhar':'\u2966','lvertneqq':'\u2268\uFE00','lvnE':'\u2268\uFE00','macr':'\xAF','male':'\u2642','malt':'\u2720','maltese':'\u2720','map':'\u21A6','Map':'\u2905','mapsto':'\u21A6','mapstodown':'\u21A7','mapstoleft':'\u21A4','mapstoup':'\u21A5','marker':'\u25AE','mcomma':'\u2A29','mcy':'\u043C','Mcy':'\u041C','mdash':'\u2014','mDDot':'\u223A','measuredangle':'\u2221','MediumSpace':'\u205F','Mellintrf':'\u2133','mfr':'\uD835\uDD2A','Mfr':'\uD835\uDD10','mho':'\u2127','micro':'\xB5','mid':'\u2223','midast':'*','midcir':'\u2AF0','middot':'\xB7','minus':'\u2212','minusb':'\u229F','minusd':'\u2238','minusdu':'\u2A2A','MinusPlus':'\u2213','mlcp':'\u2ADB','mldr':'\u2026','mnplus':'\u2213','models':'\u22A7','mopf':'\uD835\uDD5E','Mopf':'\uD835\uDD44','mp':'\u2213','mscr':'\uD835\uDCC2','Mscr':'\u2133','mstpos':'\u223E','mu':'\u03BC','Mu':'\u039C','multimap':'\u22B8','mumap':'\u22B8','nabla':'\u2207','nacute':'\u0144','Nacute':'\u0143','nang':'\u2220\u20D2','nap':'\u2249','napE':'\u2A70\u0338','napid':'\u224B\u0338','napos':'\u0149','napprox':'\u2249','natur':'\u266E','natural':'\u266E','naturals':'\u2115','nbsp':'\xA0','nbump':'\u224E\u0338','nbumpe':'\u224F\u0338','ncap':'\u2A43','ncaron':'\u0148','Ncaron':'\u0147','ncedil':'\u0146','Ncedil':'\u0145','ncong':'\u2247','ncongdot':'\u2A6D\u0338','ncup':'\u2A42','ncy':'\u043D','Ncy':'\u041D','ndash':'\u2013','ne':'\u2260','nearhk':'\u2924','nearr':'\u2197','neArr':'\u21D7','nearrow':'\u2197','nedot':'\u2250\u0338','NegativeMediumSpace':'\u200B','NegativeThickSpace':'\u200B','NegativeThinSpace':'\u200B','NegativeVeryThinSpace':'\u200B','nequiv':'\u2262','nesear':'\u2928','nesim':'\u2242\u0338','NestedGreaterGreater':'\u226B','NestedLessLess':'\u226A','NewLine':'\n','nexist':'\u2204','nexists':'\u2204','nfr':'\uD835\uDD2B','Nfr':'\uD835\uDD11','nge':'\u2271','ngE':'\u2267\u0338','ngeq':'\u2271','ngeqq':'\u2267\u0338','ngeqslant':'\u2A7E\u0338','nges':'\u2A7E\u0338','nGg':'\u22D9\u0338','ngsim':'\u2275','ngt':'\u226F','nGt':'\u226B\u20D2','ngtr':'\u226F','nGtv':'\u226B\u0338','nharr':'\u21AE','nhArr':'\u21CE','nhpar':'\u2AF2','ni':'\u220B','nis':'\u22FC','nisd':'\u22FA','niv':'\u220B','njcy':'\u045A','NJcy':'\u040A','nlarr':'\u219A','nlArr':'\u21CD','nldr':'\u2025','nle':'\u2270','nlE':'\u2266\u0338','nleftarrow':'\u219A','nLeftarrow':'\u21CD','nleftrightarrow':'\u21AE','nLeftrightarrow':'\u21CE','nleq':'\u2270','nleqq':'\u2266\u0338','nleqslant':'\u2A7D\u0338','nles':'\u2A7D\u0338','nless':'\u226E','nLl':'\u22D8\u0338','nlsim':'\u2274','nlt':'\u226E','nLt':'\u226A\u20D2','nltri':'\u22EA','nltrie':'\u22EC','nLtv':'\u226A\u0338','nmid':'\u2224','NoBreak':'\u2060','NonBreakingSpace':'\xA0','nopf':'\uD835\uDD5F','Nopf':'\u2115','not':'\xAC','Not':'\u2AEC','NotCongruent':'\u2262','NotCupCap':'\u226D','NotDoubleVerticalBar':'\u2226','NotElement':'\u2209','NotEqual':'\u2260','NotEqualTilde':'\u2242\u0338','NotExists':'\u2204','NotGreater':'\u226F','NotGreaterEqual':'\u2271','NotGreaterFullEqual':'\u2267\u0338','NotGreaterGreater':'\u226B\u0338','NotGreaterLess':'\u2279','NotGreaterSlantEqual':'\u2A7E\u0338','NotGreaterTilde':'\u2275','NotHumpDownHump':'\u224E\u0338','NotHumpEqual':'\u224F\u0338','notin':'\u2209','notindot':'\u22F5\u0338','notinE':'\u22F9\u0338','notinva':'\u2209','notinvb':'\u22F7','notinvc':'\u22F6','NotLeftTriangle':'\u22EA','NotLeftTriangleBar':'\u29CF\u0338','NotLeftTriangleEqual':'\u22EC','NotLess':'\u226E','NotLessEqual':'\u2270','NotLessGreater':'\u2278','NotLessLess':'\u226A\u0338','NotLessSlantEqual':'\u2A7D\u0338','NotLessTilde':'\u2274','NotNestedGreaterGreater':'\u2AA2\u0338','NotNestedLessLess':'\u2AA1\u0338','notni':'\u220C','notniva':'\u220C','notnivb':'\u22FE','notnivc':'\u22FD','NotPrecedes':'\u2280','NotPrecedesEqual':'\u2AAF\u0338','NotPrecedesSlantEqual':'\u22E0','NotReverseElement':'\u220C','NotRightTriangle':'\u22EB','NotRightTriangleBar':'\u29D0\u0338','NotRightTriangleEqual':'\u22ED','NotSquareSubset':'\u228F\u0338','NotSquareSubsetEqual':'\u22E2','NotSquareSuperset':'\u2290\u0338','NotSquareSupersetEqual':'\u22E3','NotSubset':'\u2282\u20D2','NotSubsetEqual':'\u2288','NotSucceeds':'\u2281','NotSucceedsEqual':'\u2AB0\u0338','NotSucceedsSlantEqual':'\u22E1','NotSucceedsTilde':'\u227F\u0338','NotSuperset':'\u2283\u20D2','NotSupersetEqual':'\u2289','NotTilde':'\u2241','NotTildeEqual':'\u2244','NotTildeFullEqual':'\u2247','NotTildeTilde':'\u2249','NotVerticalBar':'\u2224','npar':'\u2226','nparallel':'\u2226','nparsl':'\u2AFD\u20E5','npart':'\u2202\u0338','npolint':'\u2A14','npr':'\u2280','nprcue':'\u22E0','npre':'\u2AAF\u0338','nprec':'\u2280','npreceq':'\u2AAF\u0338','nrarr':'\u219B','nrArr':'\u21CF','nrarrc':'\u2933\u0338','nrarrw':'\u219D\u0338','nrightarrow':'\u219B','nRightarrow':'\u21CF','nrtri':'\u22EB','nrtrie':'\u22ED','nsc':'\u2281','nsccue':'\u22E1','nsce':'\u2AB0\u0338','nscr':'\uD835\uDCC3','Nscr':'\uD835\uDCA9','nshortmid':'\u2224','nshortparallel':'\u2226','nsim':'\u2241','nsime':'\u2244','nsimeq':'\u2244','nsmid':'\u2224','nspar':'\u2226','nsqsube':'\u22E2','nsqsupe':'\u22E3','nsub':'\u2284','nsube':'\u2288','nsubE':'\u2AC5\u0338','nsubset':'\u2282\u20D2','nsubseteq':'\u2288','nsubseteqq':'\u2AC5\u0338','nsucc':'\u2281','nsucceq':'\u2AB0\u0338','nsup':'\u2285','nsupe':'\u2289','nsupE':'\u2AC6\u0338','nsupset':'\u2283\u20D2','nsupseteq':'\u2289','nsupseteqq':'\u2AC6\u0338','ntgl':'\u2279','ntilde':'\xF1','Ntilde':'\xD1','ntlg':'\u2278','ntriangleleft':'\u22EA','ntrianglelefteq':'\u22EC','ntriangleright':'\u22EB','ntrianglerighteq':'\u22ED','nu':'\u03BD','Nu':'\u039D','num':'#','numero':'\u2116','numsp':'\u2007','nvap':'\u224D\u20D2','nvdash':'\u22AC','nvDash':'\u22AD','nVdash':'\u22AE','nVDash':'\u22AF','nvge':'\u2265\u20D2','nvgt':'>\u20D2','nvHarr':'\u2904','nvinfin':'\u29DE','nvlArr':'\u2902','nvle':'\u2264\u20D2','nvlt':'<\u20D2','nvltrie':'\u22B4\u20D2','nvrArr':'\u2903','nvrtrie':'\u22B5\u20D2','nvsim':'\u223C\u20D2','nwarhk':'\u2923','nwarr':'\u2196','nwArr':'\u21D6','nwarrow':'\u2196','nwnear':'\u2927','oacute':'\xF3','Oacute':'\xD3','oast':'\u229B','ocir':'\u229A','ocirc':'\xF4','Ocirc':'\xD4','ocy':'\u043E','Ocy':'\u041E','odash':'\u229D','odblac':'\u0151','Odblac':'\u0150','odiv':'\u2A38','odot':'\u2299','odsold':'\u29BC','oelig':'\u0153','OElig':'\u0152','ofcir':'\u29BF','ofr':'\uD835\uDD2C','Ofr':'\uD835\uDD12','ogon':'\u02DB','ograve':'\xF2','Ograve':'\xD2','ogt':'\u29C1','ohbar':'\u29B5','ohm':'\u03A9','oint':'\u222E','olarr':'\u21BA','olcir':'\u29BE','olcross':'\u29BB','oline':'\u203E','olt':'\u29C0','omacr':'\u014D','Omacr':'\u014C','omega':'\u03C9','Omega':'\u03A9','omicron':'\u03BF','Omicron':'\u039F','omid':'\u29B6','ominus':'\u2296','oopf':'\uD835\uDD60','Oopf':'\uD835\uDD46','opar':'\u29B7','OpenCurlyDoubleQuote':'\u201C','OpenCurlyQuote':'\u2018','operp':'\u29B9','oplus':'\u2295','or':'\u2228','Or':'\u2A54','orarr':'\u21BB','ord':'\u2A5D','order':'\u2134','orderof':'\u2134','ordf':'\xAA','ordm':'\xBA','origof':'\u22B6','oror':'\u2A56','orslope':'\u2A57','orv':'\u2A5B','oS':'\u24C8','oscr':'\u2134','Oscr':'\uD835\uDCAA','oslash':'\xF8','Oslash':'\xD8','osol':'\u2298','otilde':'\xF5','Otilde':'\xD5','otimes':'\u2297','Otimes':'\u2A37','otimesas':'\u2A36','ouml':'\xF6','Ouml':'\xD6','ovbar':'\u233D','OverBar':'\u203E','OverBrace':'\u23DE','OverBracket':'\u23B4','OverParenthesis':'\u23DC','par':'\u2225','para':'\xB6','parallel':'\u2225','parsim':'\u2AF3','parsl':'\u2AFD','part':'\u2202','PartialD':'\u2202','pcy':'\u043F','Pcy':'\u041F','percnt':'%','period':'.','permil':'\u2030','perp':'\u22A5','pertenk':'\u2031','pfr':'\uD835\uDD2D','Pfr':'\uD835\uDD13','phi':'\u03C6','Phi':'\u03A6','phiv':'\u03D5','phmmat':'\u2133','phone':'\u260E','pi':'\u03C0','Pi':'\u03A0','pitchfork':'\u22D4','piv':'\u03D6','planck':'\u210F','planckh':'\u210E','plankv':'\u210F','plus':'+','plusacir':'\u2A23','plusb':'\u229E','pluscir':'\u2A22','plusdo':'\u2214','plusdu':'\u2A25','pluse':'\u2A72','PlusMinus':'\xB1','plusmn':'\xB1','plussim':'\u2A26','plustwo':'\u2A27','pm':'\xB1','Poincareplane':'\u210C','pointint':'\u2A15','popf':'\uD835\uDD61','Popf':'\u2119','pound':'\xA3','pr':'\u227A','Pr':'\u2ABB','prap':'\u2AB7','prcue':'\u227C','pre':'\u2AAF','prE':'\u2AB3','prec':'\u227A','precapprox':'\u2AB7','preccurlyeq':'\u227C','Precedes':'\u227A','PrecedesEqual':'\u2AAF','PrecedesSlantEqual':'\u227C','PrecedesTilde':'\u227E','preceq':'\u2AAF','precnapprox':'\u2AB9','precneqq':'\u2AB5','precnsim':'\u22E8','precsim':'\u227E','prime':'\u2032','Prime':'\u2033','primes':'\u2119','prnap':'\u2AB9','prnE':'\u2AB5','prnsim':'\u22E8','prod':'\u220F','Product':'\u220F','profalar':'\u232E','profline':'\u2312','profsurf':'\u2313','prop':'\u221D','Proportion':'\u2237','Proportional':'\u221D','propto':'\u221D','prsim':'\u227E','prurel':'\u22B0','pscr':'\uD835\uDCC5','Pscr':'\uD835\uDCAB','psi':'\u03C8','Psi':'\u03A8','puncsp':'\u2008','qfr':'\uD835\uDD2E','Qfr':'\uD835\uDD14','qint':'\u2A0C','qopf':'\uD835\uDD62','Qopf':'\u211A','qprime':'\u2057','qscr':'\uD835\uDCC6','Qscr':'\uD835\uDCAC','quaternions':'\u210D','quatint':'\u2A16','quest':'?','questeq':'\u225F','quot':'"','QUOT':'"','rAarr':'\u21DB','race':'\u223D\u0331','racute':'\u0155','Racute':'\u0154','radic':'\u221A','raemptyv':'\u29B3','rang':'\u27E9','Rang':'\u27EB','rangd':'\u2992','range':'\u29A5','rangle':'\u27E9','raquo':'\xBB','rarr':'\u2192','rArr':'\u21D2','Rarr':'\u21A0','rarrap':'\u2975','rarrb':'\u21E5','rarrbfs':'\u2920','rarrc':'\u2933','rarrfs':'\u291E','rarrhk':'\u21AA','rarrlp':'\u21AC','rarrpl':'\u2945','rarrsim':'\u2974','rarrtl':'\u21A3','Rarrtl':'\u2916','rarrw':'\u219D','ratail':'\u291A','rAtail':'\u291C','ratio':'\u2236','rationals':'\u211A','rbarr':'\u290D','rBarr':'\u290F','RBarr':'\u2910','rbbrk':'\u2773','rbrace':'}','rbrack':']','rbrke':'\u298C','rbrksld':'\u298E','rbrkslu':'\u2990','rcaron':'\u0159','Rcaron':'\u0158','rcedil':'\u0157','Rcedil':'\u0156','rceil':'\u2309','rcub':'}','rcy':'\u0440','Rcy':'\u0420','rdca':'\u2937','rdldhar':'\u2969','rdquo':'\u201D','rdquor':'\u201D','rdsh':'\u21B3','Re':'\u211C','real':'\u211C','realine':'\u211B','realpart':'\u211C','reals':'\u211D','rect':'\u25AD','reg':'\xAE','REG':'\xAE','ReverseElement':'\u220B','ReverseEquilibrium':'\u21CB','ReverseUpEquilibrium':'\u296F','rfisht':'\u297D','rfloor':'\u230B','rfr':'\uD835\uDD2F','Rfr':'\u211C','rHar':'\u2964','rhard':'\u21C1','rharu':'\u21C0','rharul':'\u296C','rho':'\u03C1','Rho':'\u03A1','rhov':'\u03F1','RightAngleBracket':'\u27E9','rightarrow':'\u2192','Rightarrow':'\u21D2','RightArrow':'\u2192','RightArrowBar':'\u21E5','RightArrowLeftArrow':'\u21C4','rightarrowtail':'\u21A3','RightCeiling':'\u2309','RightDoubleBracket':'\u27E7','RightDownTeeVector':'\u295D','RightDownVector':'\u21C2','RightDownVectorBar':'\u2955','RightFloor':'\u230B','rightharpoondown':'\u21C1','rightharpoonup':'\u21C0','rightleftarrows':'\u21C4','rightleftharpoons':'\u21CC','rightrightarrows':'\u21C9','rightsquigarrow':'\u219D','RightTee':'\u22A2','RightTeeArrow':'\u21A6','RightTeeVector':'\u295B','rightthreetimes':'\u22CC','RightTriangle':'\u22B3','RightTriangleBar':'\u29D0','RightTriangleEqual':'\u22B5','RightUpDownVector':'\u294F','RightUpTeeVector':'\u295C','RightUpVector':'\u21BE','RightUpVectorBar':'\u2954','RightVector':'\u21C0','RightVectorBar':'\u2953','ring':'\u02DA','risingdotseq':'\u2253','rlarr':'\u21C4','rlhar':'\u21CC','rlm':'\u200F','rmoust':'\u23B1','rmoustache':'\u23B1','rnmid':'\u2AEE','roang':'\u27ED','roarr':'\u21FE','robrk':'\u27E7','ropar':'\u2986','ropf':'\uD835\uDD63','Ropf':'\u211D','roplus':'\u2A2E','rotimes':'\u2A35','RoundImplies':'\u2970','rpar':')','rpargt':'\u2994','rppolint':'\u2A12','rrarr':'\u21C9','Rrightarrow':'\u21DB','rsaquo':'\u203A','rscr':'\uD835\uDCC7','Rscr':'\u211B','rsh':'\u21B1','Rsh':'\u21B1','rsqb':']','rsquo':'\u2019','rsquor':'\u2019','rthree':'\u22CC','rtimes':'\u22CA','rtri':'\u25B9','rtrie':'\u22B5','rtrif':'\u25B8','rtriltri':'\u29CE','RuleDelayed':'\u29F4','ruluhar':'\u2968','rx':'\u211E','sacute':'\u015B','Sacute':'\u015A','sbquo':'\u201A','sc':'\u227B','Sc':'\u2ABC','scap':'\u2AB8','scaron':'\u0161','Scaron':'\u0160','sccue':'\u227D','sce':'\u2AB0','scE':'\u2AB4','scedil':'\u015F','Scedil':'\u015E','scirc':'\u015D','Scirc':'\u015C','scnap':'\u2ABA','scnE':'\u2AB6','scnsim':'\u22E9','scpolint':'\u2A13','scsim':'\u227F','scy':'\u0441','Scy':'\u0421','sdot':'\u22C5','sdotb':'\u22A1','sdote':'\u2A66','searhk':'\u2925','searr':'\u2198','seArr':'\u21D8','searrow':'\u2198','sect':'\xA7','semi':';','seswar':'\u2929','setminus':'\u2216','setmn':'\u2216','sext':'\u2736','sfr':'\uD835\uDD30','Sfr':'\uD835\uDD16','sfrown':'\u2322','sharp':'\u266F','shchcy':'\u0449','SHCHcy':'\u0429','shcy':'\u0448','SHcy':'\u0428','ShortDownArrow':'\u2193','ShortLeftArrow':'\u2190','shortmid':'\u2223','shortparallel':'\u2225','ShortRightArrow':'\u2192','ShortUpArrow':'\u2191','shy':'\xAD','sigma':'\u03C3','Sigma':'\u03A3','sigmaf':'\u03C2','sigmav':'\u03C2','sim':'\u223C','simdot':'\u2A6A','sime':'\u2243','simeq':'\u2243','simg':'\u2A9E','simgE':'\u2AA0','siml':'\u2A9D','simlE':'\u2A9F','simne':'\u2246','simplus':'\u2A24','simrarr':'\u2972','slarr':'\u2190','SmallCircle':'\u2218','smallsetminus':'\u2216','smashp':'\u2A33','smeparsl':'\u29E4','smid':'\u2223','smile':'\u2323','smt':'\u2AAA','smte':'\u2AAC','smtes':'\u2AAC\uFE00','softcy':'\u044C','SOFTcy':'\u042C','sol':'/','solb':'\u29C4','solbar':'\u233F','sopf':'\uD835\uDD64','Sopf':'\uD835\uDD4A','spades':'\u2660','spadesuit':'\u2660','spar':'\u2225','sqcap':'\u2293','sqcaps':'\u2293\uFE00','sqcup':'\u2294','sqcups':'\u2294\uFE00','Sqrt':'\u221A','sqsub':'\u228F','sqsube':'\u2291','sqsubset':'\u228F','sqsubseteq':'\u2291','sqsup':'\u2290','sqsupe':'\u2292','sqsupset':'\u2290','sqsupseteq':'\u2292','squ':'\u25A1','square':'\u25A1','Square':'\u25A1','SquareIntersection':'\u2293','SquareSubset':'\u228F','SquareSubsetEqual':'\u2291','SquareSuperset':'\u2290','SquareSupersetEqual':'\u2292','SquareUnion':'\u2294','squarf':'\u25AA','squf':'\u25AA','srarr':'\u2192','sscr':'\uD835\uDCC8','Sscr':'\uD835\uDCAE','ssetmn':'\u2216','ssmile':'\u2323','sstarf':'\u22C6','star':'\u2606','Star':'\u22C6','starf':'\u2605','straightepsilon':'\u03F5','straightphi':'\u03D5','strns':'\xAF','sub':'\u2282','Sub':'\u22D0','subdot':'\u2ABD','sube':'\u2286','subE':'\u2AC5','subedot':'\u2AC3','submult':'\u2AC1','subne':'\u228A','subnE':'\u2ACB','subplus':'\u2ABF','subrarr':'\u2979','subset':'\u2282','Subset':'\u22D0','subseteq':'\u2286','subseteqq':'\u2AC5','SubsetEqual':'\u2286','subsetneq':'\u228A','subsetneqq':'\u2ACB','subsim':'\u2AC7','subsub':'\u2AD5','subsup':'\u2AD3','succ':'\u227B','succapprox':'\u2AB8','succcurlyeq':'\u227D','Succeeds':'\u227B','SucceedsEqual':'\u2AB0','SucceedsSlantEqual':'\u227D','SucceedsTilde':'\u227F','succeq':'\u2AB0','succnapprox':'\u2ABA','succneqq':'\u2AB6','succnsim':'\u22E9','succsim':'\u227F','SuchThat':'\u220B','sum':'\u2211','Sum':'\u2211','sung':'\u266A','sup':'\u2283','Sup':'\u22D1','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','supdot':'\u2ABE','supdsub':'\u2AD8','supe':'\u2287','supE':'\u2AC6','supedot':'\u2AC4','Superset':'\u2283','SupersetEqual':'\u2287','suphsol':'\u27C9','suphsub':'\u2AD7','suplarr':'\u297B','supmult':'\u2AC2','supne':'\u228B','supnE':'\u2ACC','supplus':'\u2AC0','supset':'\u2283','Supset':'\u22D1','supseteq':'\u2287','supseteqq':'\u2AC6','supsetneq':'\u228B','supsetneqq':'\u2ACC','supsim':'\u2AC8','supsub':'\u2AD4','supsup':'\u2AD6','swarhk':'\u2926','swarr':'\u2199','swArr':'\u21D9','swarrow':'\u2199','swnwar':'\u292A','szlig':'\xDF','Tab':'\t','target':'\u2316','tau':'\u03C4','Tau':'\u03A4','tbrk':'\u23B4','tcaron':'\u0165','Tcaron':'\u0164','tcedil':'\u0163','Tcedil':'\u0162','tcy':'\u0442','Tcy':'\u0422','tdot':'\u20DB','telrec':'\u2315','tfr':'\uD835\uDD31','Tfr':'\uD835\uDD17','there4':'\u2234','therefore':'\u2234','Therefore':'\u2234','theta':'\u03B8','Theta':'\u0398','thetasym':'\u03D1','thetav':'\u03D1','thickapprox':'\u2248','thicksim':'\u223C','ThickSpace':'\u205F\u200A','thinsp':'\u2009','ThinSpace':'\u2009','thkap':'\u2248','thksim':'\u223C','thorn':'\xFE','THORN':'\xDE','tilde':'\u02DC','Tilde':'\u223C','TildeEqual':'\u2243','TildeFullEqual':'\u2245','TildeTilde':'\u2248','times':'\xD7','timesb':'\u22A0','timesbar':'\u2A31','timesd':'\u2A30','tint':'\u222D','toea':'\u2928','top':'\u22A4','topbot':'\u2336','topcir':'\u2AF1','topf':'\uD835\uDD65','Topf':'\uD835\uDD4B','topfork':'\u2ADA','tosa':'\u2929','tprime':'\u2034','trade':'\u2122','TRADE':'\u2122','triangle':'\u25B5','triangledown':'\u25BF','triangleleft':'\u25C3','trianglelefteq':'\u22B4','triangleq':'\u225C','triangleright':'\u25B9','trianglerighteq':'\u22B5','tridot':'\u25EC','trie':'\u225C','triminus':'\u2A3A','TripleDot':'\u20DB','triplus':'\u2A39','trisb':'\u29CD','tritime':'\u2A3B','trpezium':'\u23E2','tscr':'\uD835\uDCC9','Tscr':'\uD835\uDCAF','tscy':'\u0446','TScy':'\u0426','tshcy':'\u045B','TSHcy':'\u040B','tstrok':'\u0167','Tstrok':'\u0166','twixt':'\u226C','twoheadleftarrow':'\u219E','twoheadrightarrow':'\u21A0','uacute':'\xFA','Uacute':'\xDA','uarr':'\u2191','uArr':'\u21D1','Uarr':'\u219F','Uarrocir':'\u2949','ubrcy':'\u045E','Ubrcy':'\u040E','ubreve':'\u016D','Ubreve':'\u016C','ucirc':'\xFB','Ucirc':'\xDB','ucy':'\u0443','Ucy':'\u0423','udarr':'\u21C5','udblac':'\u0171','Udblac':'\u0170','udhar':'\u296E','ufisht':'\u297E','ufr':'\uD835\uDD32','Ufr':'\uD835\uDD18','ugrave':'\xF9','Ugrave':'\xD9','uHar':'\u2963','uharl':'\u21BF','uharr':'\u21BE','uhblk':'\u2580','ulcorn':'\u231C','ulcorner':'\u231C','ulcrop':'\u230F','ultri':'\u25F8','umacr':'\u016B','Umacr':'\u016A','uml':'\xA8','UnderBar':'_','UnderBrace':'\u23DF','UnderBracket':'\u23B5','UnderParenthesis':'\u23DD','Union':'\u22C3','UnionPlus':'\u228E','uogon':'\u0173','Uogon':'\u0172','uopf':'\uD835\uDD66','Uopf':'\uD835\uDD4C','uparrow':'\u2191','Uparrow':'\u21D1','UpArrow':'\u2191','UpArrowBar':'\u2912','UpArrowDownArrow':'\u21C5','updownarrow':'\u2195','Updownarrow':'\u21D5','UpDownArrow':'\u2195','UpEquilibrium':'\u296E','upharpoonleft':'\u21BF','upharpoonright':'\u21BE','uplus':'\u228E','UpperLeftArrow':'\u2196','UpperRightArrow':'\u2197','upsi':'\u03C5','Upsi':'\u03D2','upsih':'\u03D2','upsilon':'\u03C5','Upsilon':'\u03A5','UpTee':'\u22A5','UpTeeArrow':'\u21A5','upuparrows':'\u21C8','urcorn':'\u231D','urcorner':'\u231D','urcrop':'\u230E','uring':'\u016F','Uring':'\u016E','urtri':'\u25F9','uscr':'\uD835\uDCCA','Uscr':'\uD835\uDCB0','utdot':'\u22F0','utilde':'\u0169','Utilde':'\u0168','utri':'\u25B5','utrif':'\u25B4','uuarr':'\u21C8','uuml':'\xFC','Uuml':'\xDC','uwangle':'\u29A7','vangrt':'\u299C','varepsilon':'\u03F5','varkappa':'\u03F0','varnothing':'\u2205','varphi':'\u03D5','varpi':'\u03D6','varpropto':'\u221D','varr':'\u2195','vArr':'\u21D5','varrho':'\u03F1','varsigma':'\u03C2','varsubsetneq':'\u228A\uFE00','varsubsetneqq':'\u2ACB\uFE00','varsupsetneq':'\u228B\uFE00','varsupsetneqq':'\u2ACC\uFE00','vartheta':'\u03D1','vartriangleleft':'\u22B2','vartriangleright':'\u22B3','vBar':'\u2AE8','Vbar':'\u2AEB','vBarv':'\u2AE9','vcy':'\u0432','Vcy':'\u0412','vdash':'\u22A2','vDash':'\u22A8','Vdash':'\u22A9','VDash':'\u22AB','Vdashl':'\u2AE6','vee':'\u2228','Vee':'\u22C1','veebar':'\u22BB','veeeq':'\u225A','vellip':'\u22EE','verbar':'|','Verbar':'\u2016','vert':'|','Vert':'\u2016','VerticalBar':'\u2223','VerticalLine':'|','VerticalSeparator':'\u2758','VerticalTilde':'\u2240','VeryThinSpace':'\u200A','vfr':'\uD835\uDD33','Vfr':'\uD835\uDD19','vltri':'\u22B2','vnsub':'\u2282\u20D2','vnsup':'\u2283\u20D2','vopf':'\uD835\uDD67','Vopf':'\uD835\uDD4D','vprop':'\u221D','vrtri':'\u22B3','vscr':'\uD835\uDCCB','Vscr':'\uD835\uDCB1','vsubne':'\u228A\uFE00','vsubnE':'\u2ACB\uFE00','vsupne':'\u228B\uFE00','vsupnE':'\u2ACC\uFE00','Vvdash':'\u22AA','vzigzag':'\u299A','wcirc':'\u0175','Wcirc':'\u0174','wedbar':'\u2A5F','wedge':'\u2227','Wedge':'\u22C0','wedgeq':'\u2259','weierp':'\u2118','wfr':'\uD835\uDD34','Wfr':'\uD835\uDD1A','wopf':'\uD835\uDD68','Wopf':'\uD835\uDD4E','wp':'\u2118','wr':'\u2240','wreath':'\u2240','wscr':'\uD835\uDCCC','Wscr':'\uD835\uDCB2','xcap':'\u22C2','xcirc':'\u25EF','xcup':'\u22C3','xdtri':'\u25BD','xfr':'\uD835\uDD35','Xfr':'\uD835\uDD1B','xharr':'\u27F7','xhArr':'\u27FA','xi':'\u03BE','Xi':'\u039E','xlarr':'\u27F5','xlArr':'\u27F8','xmap':'\u27FC','xnis':'\u22FB','xodot':'\u2A00','xopf':'\uD835\uDD69','Xopf':'\uD835\uDD4F','xoplus':'\u2A01','xotime':'\u2A02','xrarr':'\u27F6','xrArr':'\u27F9','xscr':'\uD835\uDCCD','Xscr':'\uD835\uDCB3','xsqcup':'\u2A06','xuplus':'\u2A04','xutri':'\u25B3','xvee':'\u22C1','xwedge':'\u22C0','yacute':'\xFD','Yacute':'\xDD','yacy':'\u044F','YAcy':'\u042F','ycirc':'\u0177','Ycirc':'\u0176','ycy':'\u044B','Ycy':'\u042B','yen':'\xA5','yfr':'\uD835\uDD36','Yfr':'\uD835\uDD1C','yicy':'\u0457','YIcy':'\u0407','yopf':'\uD835\uDD6A','Yopf':'\uD835\uDD50','yscr':'\uD835\uDCCE','Yscr':'\uD835\uDCB4','yucy':'\u044E','YUcy':'\u042E','yuml':'\xFF','Yuml':'\u0178','zacute':'\u017A','Zacute':'\u0179','zcaron':'\u017E','Zcaron':'\u017D','zcy':'\u0437','Zcy':'\u0417','zdot':'\u017C','Zdot':'\u017B','zeetrf':'\u2128','ZeroWidthSpace':'\u200B','zeta':'\u03B6','Zeta':'\u0396','zfr':'\uD835\uDD37','Zfr':'\u2128','zhcy':'\u0436','ZHcy':'\u0416','zigrarr':'\u21DD','zopf':'\uD835\uDD6B','Zopf':'\u2124','zscr':'\uD835\uDCCF','Zscr':'\uD835\uDCB5','zwj':'\u200D','zwnj':'\u200C'};
	var decodeMapLegacy = {'aacute':'\xE1','Aacute':'\xC1','acirc':'\xE2','Acirc':'\xC2','acute':'\xB4','aelig':'\xE6','AElig':'\xC6','agrave':'\xE0','Agrave':'\xC0','amp':'&','AMP':'&','aring':'\xE5','Aring':'\xC5','atilde':'\xE3','Atilde':'\xC3','auml':'\xE4','Auml':'\xC4','brvbar':'\xA6','ccedil':'\xE7','Ccedil':'\xC7','cedil':'\xB8','cent':'\xA2','copy':'\xA9','COPY':'\xA9','curren':'\xA4','deg':'\xB0','divide':'\xF7','eacute':'\xE9','Eacute':'\xC9','ecirc':'\xEA','Ecirc':'\xCA','egrave':'\xE8','Egrave':'\xC8','eth':'\xF0','ETH':'\xD0','euml':'\xEB','Euml':'\xCB','frac12':'\xBD','frac14':'\xBC','frac34':'\xBE','gt':'>','GT':'>','iacute':'\xED','Iacute':'\xCD','icirc':'\xEE','Icirc':'\xCE','iexcl':'\xA1','igrave':'\xEC','Igrave':'\xCC','iquest':'\xBF','iuml':'\xEF','Iuml':'\xCF','laquo':'\xAB','lt':'<','LT':'<','macr':'\xAF','micro':'\xB5','middot':'\xB7','nbsp':'\xA0','not':'\xAC','ntilde':'\xF1','Ntilde':'\xD1','oacute':'\xF3','Oacute':'\xD3','ocirc':'\xF4','Ocirc':'\xD4','ograve':'\xF2','Ograve':'\xD2','ordf':'\xAA','ordm':'\xBA','oslash':'\xF8','Oslash':'\xD8','otilde':'\xF5','Otilde':'\xD5','ouml':'\xF6','Ouml':'\xD6','para':'\xB6','plusmn':'\xB1','pound':'\xA3','quot':'"','QUOT':'"','raquo':'\xBB','reg':'\xAE','REG':'\xAE','sect':'\xA7','shy':'\xAD','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','szlig':'\xDF','thorn':'\xFE','THORN':'\xDE','times':'\xD7','uacute':'\xFA','Uacute':'\xDA','ucirc':'\xFB','Ucirc':'\xDB','ugrave':'\xF9','Ugrave':'\xD9','uml':'\xA8','uuml':'\xFC','Uuml':'\xDC','yacute':'\xFD','Yacute':'\xDD','yen':'\xA5','yuml':'\xFF'};
	var decodeMapNumeric = {'0':'\uFFFD','128':'\u20AC','130':'\u201A','131':'\u0192','132':'\u201E','133':'\u2026','134':'\u2020','135':'\u2021','136':'\u02C6','137':'\u2030','138':'\u0160','139':'\u2039','140':'\u0152','142':'\u017D','145':'\u2018','146':'\u2019','147':'\u201C','148':'\u201D','149':'\u2022','150':'\u2013','151':'\u2014','152':'\u02DC','153':'\u2122','154':'\u0161','155':'\u203A','156':'\u0153','158':'\u017E','159':'\u0178'};
	var invalidReferenceCodePoints = [1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65000,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	var has = function(object, propertyName) {
		return hasOwnProperty.call(object, propertyName);
	};

	var contains = function(array, value) {
		var index = -1;
		var length = array.length;
		while (++index < length) {
			if (array[index] == value) {
				return true;
			}
		}
		return false;
	};

	var merge = function(options, defaults) {
		if (!options) {
			return defaults;
		}
		var result = {};
		var key;
		for (key in defaults) {
			// A `hasOwnProperty` check is not needed here, since only recognized
			// option names are used anyway. Any others are ignored.
			result[key] = has(options, key) ? options[key] : defaults[key];
		}
		return result;
	};

	// Modified version of `ucs2encode`; see https://mths.be/punycode.
	var codePointToSymbol = function(codePoint, strict) {
		var output = '';
		if ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {
			// See issue #4:
			// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is
			// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD
			// REPLACEMENT CHARACTER.”
			if (strict) {
				parseError('character reference outside the permissible Unicode range');
			}
			return '\uFFFD';
		}
		if (has(decodeMapNumeric, codePoint)) {
			if (strict) {
				parseError('disallowed character reference');
			}
			return decodeMapNumeric[codePoint];
		}
		if (strict && contains(invalidReferenceCodePoints, codePoint)) {
			parseError('disallowed character reference');
		}
		if (codePoint > 0xFFFF) {
			codePoint -= 0x10000;
			output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
			codePoint = 0xDC00 | codePoint & 0x3FF;
		}
		output += stringFromCharCode(codePoint);
		return output;
	};

	var hexEscape = function(codePoint) {
		return '&#x' + codePoint.toString(16).toUpperCase() + ';';
	};

	var decEscape = function(codePoint) {
		return '&#' + codePoint + ';';
	};

	var parseError = function(message) {
		throw Error('Parse error: ' + message);
	};

	/*--------------------------------------------------------------------------*/

	var encode = function(string, options) {
		options = merge(options, encode.options);
		var strict = options.strict;
		if (strict && regexInvalidRawCodePoint.test(string)) {
			parseError('forbidden code point');
		}
		var encodeEverything = options.encodeEverything;
		var useNamedReferences = options.useNamedReferences;
		var allowUnsafeSymbols = options.allowUnsafeSymbols;
		var escapeCodePoint = options.decimal ? decEscape : hexEscape;

		var escapeBmpSymbol = function(symbol) {
			return escapeCodePoint(symbol.charCodeAt(0));
		};

		if (encodeEverything) {
			// Encode ASCII symbols.
			string = string.replace(regexAsciiWhitelist, function(symbol) {
				// Use named references if requested & possible.
				if (useNamedReferences && has(encodeMap, symbol)) {
					return '&' + encodeMap[symbol] + ';';
				}
				return escapeBmpSymbol(symbol);
			});
			// Shorten a few escapes that represent two symbols, of which at least one
			// is within the ASCII range.
			if (useNamedReferences) {
				string = string
					.replace(/&gt;\u20D2/g, '&nvgt;')
					.replace(/&lt;\u20D2/g, '&nvlt;')
					.replace(/&#x66;&#x6A;/g, '&fjlig;');
			}
			// Encode non-ASCII symbols.
			if (useNamedReferences) {
				// Encode non-ASCII symbols that can be replaced with a named reference.
				string = string.replace(regexEncodeNonAscii, function(string) {
					// Note: there is no need to check `has(encodeMap, string)` here.
					return '&' + encodeMap[string] + ';';
				});
			}
			// Note: any remaining non-ASCII symbols are handled outside of the `if`.
		} else if (useNamedReferences) {
			// Apply named character references.
			// Encode `<>"'&` using named character references.
			if (!allowUnsafeSymbols) {
				string = string.replace(regexEscape, function(string) {
					return '&' + encodeMap[string] + ';'; // no need to check `has()` here
				});
			}
			// Shorten escapes that represent two symbols, of which at least one is
			// `<>"'&`.
			string = string
				.replace(/&gt;\u20D2/g, '&nvgt;')
				.replace(/&lt;\u20D2/g, '&nvlt;');
			// Encode non-ASCII symbols that can be replaced with a named reference.
			string = string.replace(regexEncodeNonAscii, function(string) {
				// Note: there is no need to check `has(encodeMap, string)` here.
				return '&' + encodeMap[string] + ';';
			});
		} else if (!allowUnsafeSymbols) {
			// Encode `<>"'&` using hexadecimal escapes, now that they’re not handled
			// using named character references.
			string = string.replace(regexEscape, escapeBmpSymbol);
		}
		return string
			// Encode astral symbols.
			.replace(regexAstralSymbols, function($0) {
				// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
				var high = $0.charCodeAt(0);
				var low = $0.charCodeAt(1);
				var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
				return escapeCodePoint(codePoint);
			})
			// Encode any remaining BMP symbols that are not printable ASCII symbols
			// using a hexadecimal escape.
			.replace(regexBmpWhitelist, escapeBmpSymbol);
	};
	// Expose default options (so they can be overridden globally).
	encode.options = {
		'allowUnsafeSymbols': false,
		'encodeEverything': false,
		'strict': false,
		'useNamedReferences': false,
		'decimal' : false
	};

	var decode = function(html, options) {
		options = merge(options, decode.options);
		var strict = options.strict;
		if (strict && regexInvalidEntity.test(html)) {
			parseError('malformed character reference');
		}
		return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
			var codePoint;
			var semicolon;
			var decDigits;
			var hexDigits;
			var reference;
			var next;

			if ($1) {
				reference = $1;
				// Note: there is no need to check `has(decodeMap, reference)`.
				return decodeMap[reference];
			}

			if ($2) {
				// Decode named character references without trailing `;`, e.g. `&amp`.
				// This is only a parse error if it gets converted to `&`, or if it is
				// followed by `=` in an attribute context.
				reference = $2;
				next = $3;
				if (next && options.isAttributeValue) {
					if (strict && next == '=') {
						parseError('`&` did not start a character reference');
					}
					return $0;
				} else {
					if (strict) {
						parseError(
							'named character reference was not terminated by a semicolon'
						);
					}
					// Note: there is no need to check `has(decodeMapLegacy, reference)`.
					return decodeMapLegacy[reference] + (next || '');
				}
			}

			if ($4) {
				// Decode decimal escapes, e.g. `&#119558;`.
				decDigits = $4;
				semicolon = $5;
				if (strict && !semicolon) {
					parseError('character reference was not terminated by a semicolon');
				}
				codePoint = parseInt(decDigits, 10);
				return codePointToSymbol(codePoint, strict);
			}

			if ($6) {
				// Decode hexadecimal escapes, e.g. `&#x1D306;`.
				hexDigits = $6;
				semicolon = $7;
				if (strict && !semicolon) {
					parseError('character reference was not terminated by a semicolon');
				}
				codePoint = parseInt(hexDigits, 16);
				return codePointToSymbol(codePoint, strict);
			}

			// If we’re still here, `if ($7)` is implied; it’s an ambiguous
			// ampersand for sure. https://mths.be/notes/ambiguous-ampersands
			if (strict) {
				parseError(
					'named character reference was not terminated by a semicolon'
				);
			}
			return $0;
		});
	};
	// Expose default options (so they can be overridden globally).
	decode.options = {
		'isAttributeValue': false,
		'strict': false
	};

	var escape = function(string) {
		return string.replace(regexEscape, function($0) {
			// Note: there is no need to check `has(escapeMap, $0)` here.
			return escapeMap[$0];
		});
	};

	/*--------------------------------------------------------------------------*/

	var he = {
		'version': '1.2.0',
		'encode': encode,
		'decode': decode,
		'escape': escape,
		'unescape': decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return he;
		}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else { var key; }

}(this));


/***/ }),

/***/ "./src/main.css":
/*!**********************!*\
  !*** ./src/main.css ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/settings/settings.css":
/*!***********************************!*\
  !*** ./src/settings/settings.css ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/view/view.css":
/*!***************************!*\
  !*** ./src/view/view.css ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/mout/array/equals.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/array/equals.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var is = __webpack_require__(/*! ../lang/is */ "./node_modules/mout/lang/is.js");
var isArray = __webpack_require__(/*! ../lang/isArray */ "./node_modules/mout/lang/isArray.js");
var every = __webpack_require__(/*! ./every */ "./node_modules/mout/array/every.js");

    /**
     * Compares if both arrays have the same elements
     */
    function equals(a, b, callback){
        callback = callback || is;

        if (!isArray(a) || !isArray(b)) {
            return callback(a, b);
        }

        if (a.length !== b.length) {
            return false;
        }

        return every(a, makeCompare(callback), b);
    }

    function makeCompare(callback) {
        return function(value, i) {
            return i in this && callback(value, this[i]);
        };
    }

    module.exports = equals;




/***/ }),

/***/ "./node_modules/mout/array/every.js":
/*!******************************************!*\
  !*** ./node_modules/mout/array/every.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var makeIterator = __webpack_require__(/*! ../function/makeIterator_ */ "./node_modules/mout/function/makeIterator_.js");

    /**
     * Array every
     */
    function every(arr, callback, thisObj) {
        callback = makeIterator(callback, thisObj);
        var result = true;
        if (arr == null) {
            return result;
        }

        var i = -1, len = arr.length;
        while (++i < len) {
            // we iterate over sparse items since there is no way to make it
            // work properly on IE 7-8. see #64
            if (!callback(arr[i], i, arr) ) {
                result = false;
                break;
            }
        }

        return result;
    }

    module.exports = every;



/***/ }),

/***/ "./node_modules/mout/function/identity.js":
/*!************************************************!*\
  !*** ./node_modules/mout/function/identity.js ***!
  \************************************************/
/***/ ((module) => {



    /**
     * Returns the first argument provided to it.
     */
    function identity(val){
        return val;
    }

    module.exports = identity;




/***/ }),

/***/ "./node_modules/mout/function/makeIterator_.js":
/*!*****************************************************!*\
  !*** ./node_modules/mout/function/makeIterator_.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/mout/function/identity.js");
var prop = __webpack_require__(/*! ./prop */ "./node_modules/mout/function/prop.js");
var deepMatches = __webpack_require__(/*! ../object/deepMatches */ "./node_modules/mout/object/deepMatches.js");

    /**
     * Converts argument into a valid iterator.
     * Used internally on most array/object/collection methods that receives a
     * callback/iterator providing a shortcut syntax.
     */
    function makeIterator(src, thisObj){
        if (src == null) {
            return identity;
        }
        switch(typeof src) {
            case 'function':
                // function is the first to improve perf (most common case)
                // also avoid using `Function#call` if not needed, which boosts
                // perf a lot in some cases
                return (typeof thisObj !== 'undefined')? function(val, i, arr){
                    return src.call(thisObj, val, i, arr);
                } : src;
            case 'object':
                return function(val){
                    return deepMatches(val, src);
                };
            case 'string':
            case 'number':
                return prop(src);
        }
    }

    module.exports = makeIterator;




/***/ }),

/***/ "./node_modules/mout/function/prop.js":
/*!********************************************!*\
  !*** ./node_modules/mout/function/prop.js ***!
  \********************************************/
/***/ ((module) => {



    /**
     * Returns a function that gets a property of the passed object
     */
    function prop(name){
        return function(obj){
            return obj[name];
        };
    }

    module.exports = prop;




/***/ }),

/***/ "./node_modules/mout/lang/clone.js":
/*!*****************************************!*\
  !*** ./node_modules/mout/lang/clone.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var kindOf = __webpack_require__(/*! ./kindOf */ "./node_modules/mout/lang/kindOf.js");
var isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/mout/lang/isPlainObject.js");
var mixIn = __webpack_require__(/*! ../object/mixIn */ "./node_modules/mout/object/mixIn.js");

    /**
     * Clone native types.
     */
    function clone(val){
        switch (kindOf(val)) {
            case 'Object':
                return cloneObject(val);
            case 'Array':
                return cloneArray(val);
            case 'RegExp':
                return cloneRegExp(val);
            case 'Date':
                return cloneDate(val);
            default:
                return val;
        }
    }

    function cloneObject(source) {
        if (isPlainObject(source)) {
            return mixIn({}, source);
        } else {
            return source;
        }
    }

    function cloneRegExp(r) {
        var flags = '';
        flags += r.multiline ? 'm' : '';
        flags += r.global ? 'g' : '';
        flags += r.ignoreCase ? 'i' : '';
        return new RegExp(r.source, flags);
    }

    function cloneDate(date) {
        return new Date(+date);
    }

    function cloneArray(arr) {
        return arr.slice();
    }

    module.exports = clone;




/***/ }),

/***/ "./node_modules/mout/lang/deepClone.js":
/*!*********************************************!*\
  !*** ./node_modules/mout/lang/deepClone.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var clone = __webpack_require__(/*! ./clone */ "./node_modules/mout/lang/clone.js");
var forOwn = __webpack_require__(/*! ../object/forOwn */ "./node_modules/mout/object/forOwn.js");
var kindOf = __webpack_require__(/*! ./kindOf */ "./node_modules/mout/lang/kindOf.js");
var isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/mout/lang/isPlainObject.js");

    /**
     * Recursively clone native types.
     */
    function deepClone(val, instanceClone) {
        switch ( kindOf(val) ) {
            case 'Object':
                return cloneObject(val, instanceClone);
            case 'Array':
                return cloneArray(val, instanceClone);
            default:
                return clone(val);
        }
    }

    function cloneObject(source, instanceClone) {
        if (isPlainObject(source)) {
            var out = {};
            forOwn(source, function(val, key) {
                this[key] = deepClone(val, instanceClone);
            }, out);
            return out;
        } else if (instanceClone) {
            return instanceClone(source);
        } else {
            return source;
        }
    }

    function cloneArray(arr, instanceClone) {
        var out = [],
            i = -1,
            n = arr.length,
            val;
        while (++i < n) {
            out[i] = deepClone(arr[i], instanceClone);
        }
        return out;
    }

    module.exports = deepClone;





/***/ }),

/***/ "./node_modules/mout/lang/deepEquals.js":
/*!**********************************************!*\
  !*** ./node_modules/mout/lang/deepEquals.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var is = __webpack_require__(/*! ./is */ "./node_modules/mout/lang/is.js");
var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/mout/lang/isObject.js");
var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/mout/lang/isArray.js");
var objEquals = __webpack_require__(/*! ../object/equals */ "./node_modules/mout/object/equals.js");
var arrEquals = __webpack_require__(/*! ../array/equals */ "./node_modules/mout/array/equals.js");

    /**
     * Recursively checks for same properties and values.
     */
    function deepEquals(a, b, callback){
        callback = callback || is;

        var bothObjects = isObject(a) && isObject(b);
        var bothArrays = !bothObjects && isArray(a) && isArray(b);

        if (!bothObjects && !bothArrays) {
            return callback(a, b);
        }

        function compare(a, b){
            return deepEquals(a, b, callback);
        }

        var method = bothObjects ? objEquals : arrEquals;
        return method(a, b, compare);
    }

    module.exports = deepEquals;




/***/ }),

/***/ "./node_modules/mout/lang/is.js":
/*!**************************************!*\
  !*** ./node_modules/mout/lang/is.js ***!
  \**************************************/
/***/ ((module) => {



    /**
     * Check if both arguments are egal.
     */
    function is(x, y){
        // implementation borrowed from harmony:egal spec
        if (x === y) {
          // 0 === -0, but they are not identical
          return x !== 0 || 1 / x === 1 / y;
        }

        // NaN !== NaN, but they are identical.
        // NaNs are the only non-reflexive value, i.e., if x !== x,
        // then x is a NaN.
        // isNaN is broken: it converts its argument to number, so
        // isNaN("foo") => true
        return x !== x && y !== y;
    }

    module.exports = is;




/***/ }),

/***/ "./node_modules/mout/lang/isArray.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/lang/isArray.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKind = __webpack_require__(/*! ./isKind */ "./node_modules/mout/lang/isKind.js");
    /**
     */
    var isArray = Array.isArray || function (val) {
        return isKind(val, 'Array');
    };
    module.exports = isArray;



/***/ }),

/***/ "./node_modules/mout/lang/isKind.js":
/*!******************************************!*\
  !*** ./node_modules/mout/lang/isKind.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var kindOf = __webpack_require__(/*! ./kindOf */ "./node_modules/mout/lang/kindOf.js");
    /**
     * Check if value is from a specific "kind".
     */
    function isKind(val, kind){
        return kindOf(val) === kind;
    }
    module.exports = isKind;



/***/ }),

/***/ "./node_modules/mout/lang/isObject.js":
/*!********************************************!*\
  !*** ./node_modules/mout/lang/isObject.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKind = __webpack_require__(/*! ./isKind */ "./node_modules/mout/lang/isKind.js");
    /**
     */
    function isObject(val) {
        return isKind(val, 'Object');
    }
    module.exports = isObject;



/***/ }),

/***/ "./node_modules/mout/lang/isPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/mout/lang/isPlainObject.js ***!
  \*************************************************/
/***/ ((module) => {



    /**
     * Checks if the value is created by the `Object` constructor.
     */
    function isPlainObject(value) {
        return (!!value && typeof value === 'object' &&
            value.constructor === Object);
    }

    module.exports = isPlainObject;




/***/ }),

/***/ "./node_modules/mout/lang/kindOf.js":
/*!******************************************!*\
  !*** ./node_modules/mout/lang/kindOf.js ***!
  \******************************************/
/***/ ((module) => {


    /**
     * Gets the "kind" of value. (e.g. "String", "Number", etc)
     */
    function kindOf(val) {
        return Object.prototype.toString.call(val).slice(8, -1);
    }
    module.exports = kindOf;



/***/ }),

/***/ "./node_modules/mout/object/deepMatches.js":
/*!*************************************************!*\
  !*** ./node_modules/mout/object/deepMatches.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var forOwn = __webpack_require__(/*! ./forOwn */ "./node_modules/mout/object/forOwn.js");
var isArray = __webpack_require__(/*! ../lang/isArray */ "./node_modules/mout/lang/isArray.js");

    function containsMatch(array, pattern) {
        var i = -1, length = array.length;
        while (++i < length) {
            if (deepMatches(array[i], pattern)) {
                return true;
            }
        }

        return false;
    }

    function matchArray(target, pattern) {
        var i = -1, patternLength = pattern.length;
        while (++i < patternLength) {
            if (!containsMatch(target, pattern[i])) {
                return false;
            }
        }

        return true;
    }

    function matchObject(target, pattern) {
        var result = true;
        forOwn(pattern, function(val, key) {
            if (!deepMatches(target[key], val)) {
                // Return false to break out of forOwn early
                return (result = false);
            }
        });

        return result;
    }

    /**
     * Recursively check if the objects match.
     */
    function deepMatches(target, pattern){
        if (target && typeof target === 'object' &&
            pattern && typeof pattern === 'object') {
            if (isArray(target) && isArray(pattern)) {
                return matchArray(target, pattern);
            } else {
                return matchObject(target, pattern);
            }
        } else {
            return target === pattern;
        }
    }

    module.exports = deepMatches;




/***/ }),

/***/ "./node_modules/mout/object/equals.js":
/*!********************************************!*\
  !*** ./node_modules/mout/object/equals.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ./hasOwn */ "./node_modules/mout/object/hasOwn.js");
var every = __webpack_require__(/*! ./every */ "./node_modules/mout/object/every.js");
var isObject = __webpack_require__(/*! ../lang/isObject */ "./node_modules/mout/lang/isObject.js");
var is = __webpack_require__(/*! ../lang/is */ "./node_modules/mout/lang/is.js");

    // Makes a function to compare the object values from the specified compare
    // operation callback.
    function makeCompare(callback) {
        return function(value, key) {
            return hasOwn(this, key) && callback(value, this[key]);
        };
    }

    function checkProperties(value, key) {
        return hasOwn(this, key);
    }

    /**
     * Checks if two objects have the same keys and values.
     */
    function equals(a, b, callback) {
        callback = callback || is;

        if (!isObject(a) || !isObject(b)) {
            return callback(a, b);
        }

        return (every(a, makeCompare(callback), b) &&
                every(b, checkProperties, a));
    }

    module.exports = equals;



/***/ }),

/***/ "./node_modules/mout/object/every.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/object/every.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var forOwn = __webpack_require__(/*! ./forOwn */ "./node_modules/mout/object/forOwn.js");
var makeIterator = __webpack_require__(/*! ../function/makeIterator_ */ "./node_modules/mout/function/makeIterator_.js");

    /**
     * Object every
     */
    function every(obj, callback, thisObj) {
        callback = makeIterator(callback, thisObj);
        var result = true;
        forOwn(obj, function(val, key) {
            // we consider any falsy values as "false" on purpose so shorthand
            // syntax can be used to check property existence
            if (!callback(val, key, obj)) {
                result = false;
                return false; // break
            }
        });
        return result;
    }

    module.exports = every;




/***/ }),

/***/ "./node_modules/mout/object/forIn.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/object/forIn.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ./hasOwn */ "./node_modules/mout/object/hasOwn.js");

    var _hasDontEnumBug,
        _dontEnums;

    function checkDontEnum(){
        _dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ];

        _hasDontEnumBug = true;

        for (var key in {'toString': null}) {
            _hasDontEnumBug = false;
        }
    }

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forIn(obj, fn, thisObj){
        var key, i = 0;
        // no need to check if argument is a real object that way we can use
        // it for arrays, functions, date, etc.

        //post-pone check till needed
        if (_hasDontEnumBug == null) checkDontEnum();

        for (key in obj) {
            if (exec(fn, obj, key, thisObj) === false) {
                break;
            }
        }


        if (_hasDontEnumBug) {
            var ctor = obj.constructor,
                isProto = !!ctor && obj === ctor.prototype;

            while (key = _dontEnums[i++]) {
                // For constructor, if it is a prototype object the constructor
                // is always non-enumerable unless defined otherwise (and
                // enumerated above).  For non-prototype objects, it will have
                // to be defined on this object, since it cannot be defined on
                // any prototype objects.
                //
                // For other [[DontEnum]] properties, check if the value is
                // different than Object prototype value.
                if (
                    (key !== 'constructor' ||
                        (!isProto && hasOwn(obj, key))) &&
                    obj[key] !== Object.prototype[key]
                ) {
                    if (exec(fn, obj, key, thisObj) === false) {
                        break;
                    }
                }
            }
        }
    }

    function exec(fn, obj, key, thisObj){
        return fn.call(thisObj, obj[key], key, obj);
    }

    module.exports = forIn;




/***/ }),

/***/ "./node_modules/mout/object/forOwn.js":
/*!********************************************!*\
  !*** ./node_modules/mout/object/forOwn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ./hasOwn */ "./node_modules/mout/object/hasOwn.js");
var forIn = __webpack_require__(/*! ./forIn */ "./node_modules/mout/object/forIn.js");

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forOwn(obj, fn, thisObj){
        forIn(obj, function(val, key){
            if (hasOwn(obj, key)) {
                return fn.call(thisObj, obj[key], key, obj);
            }
        });
    }

    module.exports = forOwn;




/***/ }),

/***/ "./node_modules/mout/object/hasOwn.js":
/*!********************************************!*\
  !*** ./node_modules/mout/object/hasOwn.js ***!
  \********************************************/
/***/ ((module) => {



    /**
     * Safer Object.hasOwnProperty
     */
     function hasOwn(obj, prop){
         return Object.prototype.hasOwnProperty.call(obj, prop);
     }

     module.exports = hasOwn;




/***/ }),

/***/ "./node_modules/mout/object/mixIn.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/object/mixIn.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var forOwn = __webpack_require__(/*! ./forOwn */ "./node_modules/mout/object/forOwn.js");

    /**
    * Combine properties from all the objects into first one.
    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
    * @param {object} target    Target Object
    * @param {...object} objects    Objects to be combined (0...n objects).
    * @return {object} Target Object.
    */
    function mixIn(target, objects){
        var i = 0,
            n = arguments.length,
            obj;
        while(++i < n){
            obj = arguments[i];
            if (obj != null) {
                forOwn(obj, copyProp, target);
            }
        }
        return target;
    }

    function copyProp(val, key){
        this[key] = val;
    }

    module.exports = mixIn;



/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/action.js":
/*!******************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/action.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dndzone": () => (/* binding */ dndzone)
/* harmony export */ });
/* harmony import */ var _pointerAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointerAction */ "./node_modules/svelte-dnd-action/src/pointerAction.js");
/* harmony import */ var _keyboardAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboardAction */ "./node_modules/svelte-dnd-action/src/keyboardAction.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/svelte-dnd-action/src/constants.js");
/* harmony import */ var _helpers_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/util */ "./node_modules/svelte-dnd-action/src/helpers/util.js");





/**
 * A custom action to turn any container to a dnd zone and all of its direct children to draggables
 * Supports mouse, touch and keyboard interactions.
 * Dispatches two events that the container is expected to react to by modifying its list of items,
 * which will then feed back in to this action via the update function
 *
 * @typedef {object} Options
 * @property {array} items - the list of items that was used to generate the children of the given node (the list used in the #each block
 * @property {string} [type] - the type of the dnd zone. children dragged from here can only be dropped in other zones of the same type, default to a base type
 * @property {number} [flipDurationMs] - if the list animated using flip (recommended), specifies the flip duration such that everything syncs with it without conflict, defaults to zero
 * @property {boolean} [dragDisabled]
 * @property {boolean} [morphDisabled] - whether dragged element should morph to zone dimensions
 * @property {boolean} [dropFromOthersDisabled]
 * @property {number} [zoneTabIndex] - set the tabindex of the list container when not dragging
 * @property {object} [dropTargetStyle]
 * @property {string[]} [dropTargetClasses]
 * @property {function} [transformDraggedElement]
 * @param {HTMLElement} node - the element to enhance
 * @param {Options} options
 * @return {{update: function, destroy: function}}
 */
function dndzone(node, options) {
    validateOptions(options);
    const pointerZone = (0,_pointerAction__WEBPACK_IMPORTED_MODULE_0__.dndzone)(node, options);
    const keyboardZone = (0,_keyboardAction__WEBPACK_IMPORTED_MODULE_1__.dndzone)(node, options);
    return {
        update: newOptions => {
            validateOptions(newOptions);
            pointerZone.update(newOptions);
            keyboardZone.update(newOptions);
        },
        destroy: () => {
            pointerZone.destroy();
            keyboardZone.destroy();
        }
    };
}

function validateOptions(options) {
    /*eslint-disable*/
    const {
        items,
        flipDurationMs,
        type,
        dragDisabled,
        morphDisabled,
        dropFromOthersDisabled,
        zoneTabIndex,
        dropTargetStyle,
        dropTargetClasses,
        transformDraggedElement,
        autoAriaDisabled,
        centreDraggedOnCursor,
        ...rest
    } = options;
    /*eslint-enable*/
    if (Object.keys(rest).length > 0) {
        console.warn(`dndzone will ignore unknown options`, rest);
    }
    if (!items) {
        throw new Error("no 'items' key provided to dndzone");
    }
    const itemWithMissingId = items.find(item => !{}.hasOwnProperty.call(item, _constants__WEBPACK_IMPORTED_MODULE_2__.ITEM_ID_KEY));
    if (itemWithMissingId) {
        throw new Error(`missing '${_constants__WEBPACK_IMPORTED_MODULE_2__.ITEM_ID_KEY}' property for item ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_3__.toString)(itemWithMissingId)}`);
    }
    if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
        throw new Error(`dropTargetClasses should be an array but instead it is a ${typeof dropTargetClasses}, ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_3__.toString)(dropTargetClasses)}`);
    }
    if (zoneTabIndex && !isInt(zoneTabIndex)) {
        throw new Error(`zoneTabIndex should be a number but instead it is a ${typeof zoneTabIndex}, ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_3__.toString)(zoneTabIndex)}`);
    }
}

function isInt(value) {
    return !isNaN(value) && (function(x) { return (x | 0) === x; })(parseFloat(value));
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TRIGGERS": () => (/* binding */ TRIGGERS),
/* harmony export */   "SOURCES": () => (/* binding */ SOURCES),
/* harmony export */   "SHADOW_ITEM_MARKER_PROPERTY_NAME": () => (/* binding */ SHADOW_ITEM_MARKER_PROPERTY_NAME),
/* harmony export */   "SHADOW_ELEMENT_ATTRIBUTE_NAME": () => (/* binding */ SHADOW_ELEMENT_ATTRIBUTE_NAME),
/* harmony export */   "SHADOW_PLACEHOLDER_ITEM_ID": () => (/* binding */ SHADOW_PLACEHOLDER_ITEM_ID),
/* harmony export */   "DRAGGED_ELEMENT_ID": () => (/* binding */ DRAGGED_ELEMENT_ID),
/* harmony export */   "ITEM_ID_KEY": () => (/* binding */ ITEM_ID_KEY),
/* harmony export */   "incrementActiveDropZoneCount": () => (/* binding */ incrementActiveDropZoneCount),
/* harmony export */   "decrementActiveDropZoneCount": () => (/* binding */ decrementActiveDropZoneCount),
/* harmony export */   "overrideItemIdKeyNameBeforeInitialisingDndZones": () => (/* binding */ overrideItemIdKeyNameBeforeInitialisingDndZones),
/* harmony export */   "isOnServer": () => (/* binding */ isOnServer),
/* harmony export */   "printDebug": () => (/* binding */ printDebug),
/* harmony export */   "setDebugMode": () => (/* binding */ setDebugMode)
/* harmony export */ });
/* harmony import */ var _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/dispatcher */ "./node_modules/svelte-dnd-action/src/helpers/dispatcher.js");


const TRIGGERS = {
    DRAG_STARTED: "dragStarted",
    DRAGGED_ENTERED: _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_0__.DRAGGED_ENTERED_EVENT_NAME,
    DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
    DRAGGED_OVER_INDEX: _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_0__.DRAGGED_OVER_INDEX_EVENT_NAME,
    DRAGGED_LEFT: _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_0__.DRAGGED_LEFT_EVENT_NAME,
    DRAGGED_LEFT_ALL: "draggedLeftAll",
    DROPPED_INTO_ZONE: "droppedIntoZone",
    DROPPED_INTO_ANOTHER: "droppedIntoAnother",
    DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
    DRAG_STOPPED: "dragStopped"
};

const SOURCES = {
    POINTER: "pointer",
    KEYBOARD: "keyboard"
};

const SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
const SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
const SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
const DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";

let ITEM_ID_KEY = "id";
let activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
    activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
    if (activeDndZoneCount === 0) {
        throw new Error("Bug! trying to decrement when there are no dropzones");
    }
    activeDndZoneCount--;
}

/**
 * Allows using another key instead of "id" in the items data. This is global and applies to all dndzones.
 * Has to be called when there are no rendered dndzones whatsoever.
 * @param {String} newKeyName
 * @throws {Error} if it was called when there are rendered dndzones or if it is given the wrong type (not a string)
 */
function overrideItemIdKeyNameBeforeInitialisingDndZones(newKeyName) {
    if (activeDndZoneCount > 0) {
        throw new Error("can only override the id key before initialising any dndzone");
    }
    if (typeof newKeyName !== "string") {
        throw new Error("item id key has to be a string");
    }
    printDebug(() => ["overriding item id key name", newKeyName]);
    ITEM_ID_KEY = newKeyName;
}

const isOnServer = typeof window === "undefined";

let printDebug = () => {};

/**
 * Allows the user to show/hide console debug output
 * * @param {Boolean} isDebug
 */
function setDebugMode(isDebug) {
    if (isDebug) {
        printDebug = (generateMessage, logFunction = console.debug) => {
            const message = generateMessage();
            if (Array.isArray(message)) {
                logFunction(...message);
            } else {
                logFunction(message);
            }
        };
    } else {
        printDebug = () => {};
    }
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/aria.js":
/*!************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/aria.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initAria": () => (/* binding */ initAria),
/* harmony export */   "alertToScreenReader": () => (/* binding */ alertToScreenReader)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/svelte-dnd-action/src/constants.js");


const INSTRUCTION_IDs = {
    DND_ZONE_ACTIVE: "dnd-zone-active",
    DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
const ID_TO_INSTRUCTION = {
    [INSTRUCTION_IDs.DND_ZONE_ACTIVE]: "Tab to one the items and press space-bar or enter to start dragging it",
    [INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED]: "This is a disabled drag and drop list"
};

const ALERT_DIV_ID = "dnd-action-aria-alert";
let alertsDiv;

function initAriaOnBrowser() {
    // setting the dynamic alerts
    alertsDiv = document.createElement("div");
    (function initAlertsDiv() {
        alertsDiv.id = ALERT_DIV_ID;
        // tab index -1 makes the alert be read twice on chrome for some reason
        //alertsDiv.tabIndex = -1;
        alertsDiv.style.position = "fixed";
        alertsDiv.style.bottom = "0";
        alertsDiv.style.left = "0";
        alertsDiv.style.zIndex = "-5";
        alertsDiv.style.opacity = "0";
        alertsDiv.style.height = "0";
        alertsDiv.style.width = "0";
        alertsDiv.setAttribute("role", "alert");
    })();
    document.body.prepend(alertsDiv);

    // setting the instructions
    Object.entries(ID_TO_INSTRUCTION).forEach(([id, txt]) => document.body.prepend(instructionToHiddenDiv(id, txt)));
}

/**
 * Initializes the static aria instructions so they can be attached to zones
 * @return {{DND_ZONE_ACTIVE: string, DND_ZONE_DRAG_DISABLED: string} | null} - the IDs for static aria instruction (to be used via aria-describedby) or null on the server
 */
function initAria() {
    if (_constants__WEBPACK_IMPORTED_MODULE_0__.isOnServer) return null;
    if (document.readyState === "complete") {
        initAriaOnBrowser();
    } else {
        window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
    }
    return {...INSTRUCTION_IDs};
}
function instructionToHiddenDiv(id, txt) {
    const div = document.createElement("div");
    div.id = id;
    div.innerHTML = `<p>${txt}</p>`;
    div.style.display = "none";
    div.style.position = "fixed";
    div.style.zIndex = "-5";
    return div;
}

/**
 * Will make the screen reader alert the provided text to the user
 * @param {string} txt
 */
function alertToScreenReader(txt) {
    alertsDiv.innerHTML = "";
    const alertText = document.createTextNode(txt);
    alertsDiv.appendChild(alertText);
    // this is needed for Safari
    alertsDiv.style.display = "none";
    alertsDiv.style.display = "inline";
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/dispatcher.js":
/*!******************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/dispatcher.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dispatchFinalizeEvent": () => (/* binding */ dispatchFinalizeEvent),
/* harmony export */   "dispatchConsiderEvent": () => (/* binding */ dispatchConsiderEvent),
/* harmony export */   "DRAGGED_ENTERED_EVENT_NAME": () => (/* binding */ DRAGGED_ENTERED_EVENT_NAME),
/* harmony export */   "DRAGGED_LEFT_EVENT_NAME": () => (/* binding */ DRAGGED_LEFT_EVENT_NAME),
/* harmony export */   "DRAGGED_OVER_INDEX_EVENT_NAME": () => (/* binding */ DRAGGED_OVER_INDEX_EVENT_NAME),
/* harmony export */   "DRAGGED_LEFT_DOCUMENT_EVENT_NAME": () => (/* binding */ DRAGGED_LEFT_DOCUMENT_EVENT_NAME),
/* harmony export */   "DRAGGED_LEFT_TYPES": () => (/* binding */ DRAGGED_LEFT_TYPES),
/* harmony export */   "dispatchDraggedElementEnteredContainer": () => (/* binding */ dispatchDraggedElementEnteredContainer),
/* harmony export */   "dispatchDraggedElementLeftContainerForAnother": () => (/* binding */ dispatchDraggedElementLeftContainerForAnother),
/* harmony export */   "dispatchDraggedElementLeftContainerForNone": () => (/* binding */ dispatchDraggedElementLeftContainerForNone),
/* harmony export */   "dispatchDraggedElementIsOverIndex": () => (/* binding */ dispatchDraggedElementIsOverIndex),
/* harmony export */   "dispatchDraggedLeftDocument": () => (/* binding */ dispatchDraggedLeftDocument)
/* harmony export */ });
// external events
const FINALIZE_EVENT_NAME = "finalize";
const CONSIDER_EVENT_NAME = "consider";

/**
 * @typedef {Object} Info
 * @property {string} trigger
 * @property {string} id
 * @property {string} source
 * @param {Node} el
 * @param {Array} items
 * @param {Info} info
 */
function dispatchFinalizeEvent(el, items, info) {
    el.dispatchEvent(
        new CustomEvent(FINALIZE_EVENT_NAME, {
            detail: {items, info}
        })
    );
}

/**
 * Dispatches a consider event
 * @param {Node} el
 * @param {Array} items
 * @param {Info} info
 */
function dispatchConsiderEvent(el, items, info) {
    el.dispatchEvent(
        new CustomEvent(CONSIDER_EVENT_NAME, {
            detail: {items, info}
        })
    );
}

// internal events
const DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
const DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
const DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
const DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";

const DRAGGED_LEFT_TYPES = {
    LEFT_FOR_ANOTHER: "leftForAnother",
    OUTSIDE_OF_ANY: "outsideOfAny"
};

function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl) {
    containerEl.dispatchEvent(
        new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
            detail: {indexObj, draggedEl}
        })
    );
}

/**
 * @param containerEl - the dropzone the element left
 * @param draggedEl - the dragged element
 * @param theOtherDz - the new dropzone the element entered
 */
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl, theOtherDz) {
    containerEl.dispatchEvent(
        new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
            detail: {draggedEl, type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER, theOtherDz}
        })
    );
}

function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl) {
    containerEl.dispatchEvent(
        new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
            detail: {draggedEl, type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY}
        })
    );
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl) {
    containerEl.dispatchEvent(
        new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
            detail: {indexObj, draggedEl}
        })
    );
}
function dispatchDraggedLeftDocument(draggedEl) {
    window.dispatchEvent(
        new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
            detail: {draggedEl}
        })
    );
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/intersection.js":
/*!********************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/intersection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBoundingRectNoTransforms": () => (/* binding */ getBoundingRectNoTransforms),
/* harmony export */   "getAbsoluteRectNoTransforms": () => (/* binding */ getAbsoluteRectNoTransforms),
/* harmony export */   "getAbsoluteRect": () => (/* binding */ getAbsoluteRect),
/* harmony export */   "findCenter": () => (/* binding */ findCenter),
/* harmony export */   "isPointInsideRect": () => (/* binding */ isPointInsideRect),
/* harmony export */   "findCenterOfElement": () => (/* binding */ findCenterOfElement),
/* harmony export */   "isCenterOfAInsideB": () => (/* binding */ isCenterOfAInsideB),
/* harmony export */   "calcDistanceBetweenCenters": () => (/* binding */ calcDistanceBetweenCenters),
/* harmony export */   "isElementOffDocument": () => (/* binding */ isElementOffDocument),
/* harmony export */   "calcInnerDistancesBetweenPointAndSidesOfElement": () => (/* binding */ calcInnerDistancesBetweenPointAndSidesOfElement)
/* harmony export */ });
// This is based off https://stackoverflow.com/questions/27745438/how-to-compute-getboundingclientrect-without-considering-transforms/57876601#57876601
// It removes the transforms that are potentially applied by the flip animations
/**
 * Gets the bounding rect but removes transforms (ex: flip animation)
 * @param {HTMLElement} el
 * @return {{top: number, left: number, bottom: number, right: number}}
 */
function getBoundingRectNoTransforms(el) {
    let ta;
    const rect = el.getBoundingClientRect();
    const style = getComputedStyle(el);
    const tx = style.transform;

    if (tx) {
        let sx, sy, dx, dy;
        if (tx.startsWith("matrix3d(")) {
            ta = tx.slice(9, -1).split(/, /);
            sx = +ta[0];
            sy = +ta[5];
            dx = +ta[12];
            dy = +ta[13];
        } else if (tx.startsWith("matrix(")) {
            ta = tx.slice(7, -1).split(/, /);
            sx = +ta[0];
            sy = +ta[3];
            dx = +ta[4];
            dy = +ta[5];
        } else {
            return rect;
        }

        const to = style.transformOrigin;
        const x = rect.x - dx - (1 - sx) * parseFloat(to);
        const y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
        const w = sx ? rect.width / sx : el.offsetWidth;
        const h = sy ? rect.height / sy : el.offsetHeight;
        return {
            x: x,
            y: y,
            width: w,
            height: h,
            top: y,
            right: x + w,
            bottom: y + h,
            left: x
        };
    } else {
        return rect;
    }
}

/**
 * Gets the absolute bounding rect (accounts for the window's scroll position and removes transforms)
 * @param {HTMLElement} el
 * @return {{top: number, left: number, bottom: number, right: number}}
 */
function getAbsoluteRectNoTransforms(el) {
    const rect = getBoundingRectNoTransforms(el);
    return {
        top: rect.top + window.scrollY,
        bottom: rect.bottom + window.scrollY,
        left: rect.left + window.scrollX,
        right: rect.right + window.scrollX
    };
}

/**
 * Gets the absolute bounding rect (accounts for the window's scroll position)
 * @param {HTMLElement} el
 * @return {{top: number, left: number, bottom: number, right: number}}
 */
function getAbsoluteRect(el) {
    const rect = el.getBoundingClientRect();
    return {
        top: rect.top + window.scrollY,
        bottom: rect.bottom + window.scrollY,
        left: rect.left + window.scrollX,
        right: rect.right + window.scrollX
    };
}

/**
 * finds the center :)
 * @typedef {Object} Rect
 * @property {number} top
 * @property {number} bottom
 * @property {number} left
 * @property {number} right
 * @param {Rect} rect
 * @return {{x: number, y: number}}
 */
function findCenter(rect) {
    return {
        x: (rect.left + rect.right) / 2,
        y: (rect.top + rect.bottom) / 2
    };
}

/**
 * @typedef {Object} Point
 * @property {number} x
 * @property {number} y
 * @param {Point} pointA
 * @param {Point} pointB
 * @return {number}
 */
function calcDistance(pointA, pointB) {
    return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}

/**
 * @param {Point} point
 * @param {Rect} rect
 * @return {boolean|boolean}
 */
function isPointInsideRect(point, rect) {
    return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}

/**
 * find the absolute coordinates of the center of a dom element
 * @param el {HTMLElement}
 * @returns {{x: number, y: number}}
 */
function findCenterOfElement(el) {
    return findCenter(getAbsoluteRect(el));
}

/**
 * @param {HTMLElement} elA
 * @param {HTMLElement} elB
 * @return {boolean}
 */
function isCenterOfAInsideB(elA, elB) {
    const centerOfA = findCenterOfElement(elA);
    const rectOfB = getAbsoluteRectNoTransforms(elB);
    return isPointInsideRect(centerOfA, rectOfB);
}

/**
 * @param {HTMLElement|ChildNode} elA
 * @param {HTMLElement|ChildNode} elB
 * @return {number}
 */
function calcDistanceBetweenCenters(elA, elB) {
    const centerOfA = findCenterOfElement(elA);
    const centerOfB = findCenterOfElement(elB);
    return calcDistance(centerOfA, centerOfB);
}

/**
 * @param {HTMLElement} el - the element to check
 * @returns {boolean} - true if the element in its entirety is off screen including the scrollable area (the normal dom events look at the mouse rather than the element)
 */
function isElementOffDocument(el) {
    const rect = getAbsoluteRect(el);
    return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}

/**
 * If the point is inside the element returns its distances from the sides, otherwise returns null
 * @param {Point} point
 * @param {HTMLElement} el
 * @return {null|{top: number, left: number, bottom: number, right: number}}
 */
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
    const rect = getAbsoluteRect(el);
    if (!isPointInsideRect(point, rect)) {
        return null;
    }
    return {
        top: point.y - rect.top,
        bottom: rect.bottom - point.y,
        left: point.x - rect.left,
        // TODO - figure out what is so special about right (why the rect is too big)
        right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
    };
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/listUtil.js":
/*!****************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/listUtil.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resetIndexesCache": () => (/* binding */ resetIndexesCache),
/* harmony export */   "findWouldBeIndex": () => (/* binding */ findWouldBeIndex)
/* harmony export */ });
/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intersection */ "./node_modules/svelte-dnd-action/src/helpers/intersection.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/svelte-dnd-action/src/constants.js");



let dzToShadowIndexToRect;

/**
 * Resets the cache that allows for smarter "would be index" resolution. Should be called after every drag operation
 */
function resetIndexesCache() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_1__.printDebug)(() => "resetting indexes cache");
    dzToShadowIndexToRect = new Map();
}
resetIndexesCache();

/**
 * Caches the coordinates of the shadow element when it's in a certain index in a certain dropzone.
 * Helpful in order to determine "would be index" more effectively
 * @param {HTMLElement} dz
 * @return {number} - the shadow element index
 */
function cacheShadowRect(dz) {
    const shadowElIndex = Array.from(dz.children).findIndex(child => child.getAttribute(_constants__WEBPACK_IMPORTED_MODULE_1__.SHADOW_ELEMENT_ATTRIBUTE_NAME));
    if (shadowElIndex >= 0) {
        if (!dzToShadowIndexToRect.has(dz)) {
            dzToShadowIndexToRect.set(dz, new Map());
        }
        dzToShadowIndexToRect.get(dz).set(shadowElIndex, (0,_intersection__WEBPACK_IMPORTED_MODULE_0__.getAbsoluteRectNoTransforms)(dz.children[shadowElIndex]));
        return shadowElIndex;
    }
    return undefined;
}

/**
 * @typedef {Object} Index
 * @property {number} index - the would be index
 * @property {boolean} isProximityBased - false if the element is actually over the index, true if it is not over it but this index is the closest
 */
/**
 * Find the index for the dragged element in the list it is dragged over
 * @param {HTMLElement} floatingAboveEl
 * @param {HTMLElement} collectionBelowEl
 * @returns {Index|null} -  if the element is over the container the Index object otherwise null
 */
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
    if (!(0,_intersection__WEBPACK_IMPORTED_MODULE_0__.isCenterOfAInsideB)(floatingAboveEl, collectionBelowEl)) {
        return null;
    }
    const children = collectionBelowEl.children;
    // the container is empty, floating element should be the first
    if (children.length === 0) {
        return {index: 0, isProximityBased: true};
    }
    const shadowElIndex = cacheShadowRect(collectionBelowEl);

    // the search could be more efficient but keeping it simple for now
    // a possible improvement: pass in the lastIndex it was found in and check there first, then expand from there
    for (let i = 0; i < children.length; i++) {
        if ((0,_intersection__WEBPACK_IMPORTED_MODULE_0__.isCenterOfAInsideB)(floatingAboveEl, children[i])) {
            const cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
            if (cachedShadowRect) {
                if (!(0,_intersection__WEBPACK_IMPORTED_MODULE_0__.isPointInsideRect)((0,_intersection__WEBPACK_IMPORTED_MODULE_0__.findCenterOfElement)(floatingAboveEl), cachedShadowRect)) {
                    return {index: shadowElIndex, isProximityBased: false};
                }
            }
            return {index: i, isProximityBased: false};
        }
    }
    // this can happen if there is space around the children so the floating element has
    //entered the container but not any of the children, in this case we will find the nearest child
    let minDistanceSoFar = Number.MAX_VALUE;
    let indexOfMin = undefined;
    // we are checking all of them because we don't know whether we are dealing with a horizontal or vertical container and where the floating element entered from
    for (let i = 0; i < children.length; i++) {
        const distance = (0,_intersection__WEBPACK_IMPORTED_MODULE_0__.calcDistanceBetweenCenters)(floatingAboveEl, children[i]);
        if (distance < minDistanceSoFar) {
            minDistanceSoFar = distance;
            indexOfMin = i;
        }
    }
    return {index: indexOfMin, isProximityBased: true};
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/observer.js":
/*!****************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/observer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observe": () => (/* binding */ observe),
/* harmony export */   "unobserve": () => (/* binding */ unobserve)
/* harmony export */ });
/* harmony import */ var _listUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listUtil */ "./node_modules/svelte-dnd-action/src/helpers/listUtil.js");
/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersection */ "./node_modules/svelte-dnd-action/src/helpers/intersection.js");
/* harmony import */ var _dispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dispatcher */ "./node_modules/svelte-dnd-action/src/helpers/dispatcher.js");
/* harmony import */ var _scroller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scroller */ "./node_modules/svelte-dnd-action/src/helpers/scroller.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./node_modules/svelte-dnd-action/src/helpers/util.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants */ "./node_modules/svelte-dnd-action/src/constants.js");







const INTERVAL_MS = 200;
const TOLERANCE_PX = 10;
const {scrollIfNeeded, resetScrolling} = (0,_scroller__WEBPACK_IMPORTED_MODULE_3__.makeScroller)();
let next;

/**
 * Tracks the dragged elements and performs the side effects when it is dragged over a drop zone (basically dispatching custom-events scrolling)
 * @param {Set<HTMLElement>} dropZones
 * @param {HTMLElement} draggedEl
 * @param {number} [intervalMs = INTERVAL_MS]
 */
function observe(draggedEl, dropZones, intervalMs = INTERVAL_MS) {
    // initialization
    let lastDropZoneFound;
    let lastIndexFound;
    let lastIsDraggedInADropZone = false;
    let lastCentrePositionOfDragged;
    // We are sorting to make sure that in case of nested zones of the same type the one "on top" is considered first
    const dropZonesFromDeepToShallow = Array.from(dropZones).sort((dz1, dz2) => (0,_util__WEBPACK_IMPORTED_MODULE_4__.getDepth)(dz2) - (0,_util__WEBPACK_IMPORTED_MODULE_4__.getDepth)(dz1));

    /**
     * The main function in this module. Tracks where everything is/ should be a take the actions
     */
    function andNow() {
        const currentCenterOfDragged = (0,_intersection__WEBPACK_IMPORTED_MODULE_1__.findCenterOfElement)(draggedEl);
        const scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
        // we only want to make a new decision after the element was moved a bit to prevent flickering
        if (
            !scrolled &&
            lastCentrePositionOfDragged &&
            Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX &&
            Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX
        ) {
            next = window.setTimeout(andNow, intervalMs);
            return;
        }
        if ((0,_intersection__WEBPACK_IMPORTED_MODULE_1__.isElementOffDocument)(draggedEl)) {
            (0,_constants__WEBPACK_IMPORTED_MODULE_5__.printDebug)(() => "off document");
            (0,_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchDraggedLeftDocument)(draggedEl);
            return;
        }

        lastCentrePositionOfDragged = currentCenterOfDragged;
        // this is a simple algorithm, potential improvement: first look at lastDropZoneFound
        let isDraggedInADropZone = false;
        for (const dz of dropZonesFromDeepToShallow) {
            const indexObj = (0,_listUtil__WEBPACK_IMPORTED_MODULE_0__.findWouldBeIndex)(draggedEl, dz);
            if (indexObj === null) {
                // it is not inside
                continue;
            }
            const {index} = indexObj;
            isDraggedInADropZone = true;
            // the element is over a container
            if (dz !== lastDropZoneFound) {
                lastDropZoneFound && (0,_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchDraggedElementLeftContainerForAnother)(lastDropZoneFound, draggedEl, dz);
                (0,_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchDraggedElementEnteredContainer)(dz, indexObj, draggedEl);
                lastDropZoneFound = dz;
            } else if (index !== lastIndexFound) {
                (0,_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchDraggedElementIsOverIndex)(dz, indexObj, draggedEl);
                lastIndexFound = index;
            }
            // we handle looping with the 'continue' statement above
            break;
        }
        // the first time the dragged element is not in any dropzone we need to notify the last dropzone it was in
        if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
            (0,_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchDraggedElementLeftContainerForNone)(lastDropZoneFound, draggedEl);
            lastDropZoneFound = undefined;
            lastIndexFound = undefined;
            lastIsDraggedInADropZone = false;
        } else {
            lastIsDraggedInADropZone = true;
        }
        next = window.setTimeout(andNow, intervalMs);
    }
    andNow();
}

// assumption - we can only observe one dragged element at a time, this could be changed in the future
function unobserve() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_5__.printDebug)(() => "unobserving");
    clearTimeout(next);
    resetScrolling();
    (0,_listUtil__WEBPACK_IMPORTED_MODULE_0__.resetIndexesCache)();
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/scroller.js":
/*!****************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/scroller.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeScroller": () => (/* binding */ makeScroller)
/* harmony export */ });
/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intersection */ "./node_modules/svelte-dnd-action/src/helpers/intersection.js");

const SCROLL_ZONE_PX = 25;

function makeScroller() {
    let scrollingInfo;
    function resetScrolling() {
        scrollingInfo = {directionObj: undefined, stepPx: 0};
    }
    resetScrolling();
    // directionObj {x: 0|1|-1, y:0|1|-1} - 1 means down in y and right in x
    function scrollContainer(containerEl) {
        const {directionObj, stepPx} = scrollingInfo;
        if (directionObj) {
            containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
            window.requestAnimationFrame(() => scrollContainer(containerEl));
        }
    }
    function calcScrollStepPx(distancePx) {
        return SCROLL_ZONE_PX - distancePx;
    }

    /**
     * If the pointer is next to the sides of the element to scroll, will trigger scrolling
     * Can be called repeatedly with updated pointer and elementToScroll values without issues
     * @return {boolean} - true if scrolling was needed
     */
    function scrollIfNeeded(pointer, elementToScroll) {
        if (!elementToScroll) {
            return false;
        }
        const distances = (0,_intersection__WEBPACK_IMPORTED_MODULE_0__.calcInnerDistancesBetweenPointAndSidesOfElement)(pointer, elementToScroll);
        if (distances === null) {
            resetScrolling();
            return false;
        }
        const isAlreadyScrolling = !!scrollingInfo.directionObj;
        let [scrollingVertically, scrollingHorizontally] = [false, false];
        // vertical
        if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
            if (distances.bottom < SCROLL_ZONE_PX) {
                scrollingVertically = true;
                scrollingInfo.directionObj = {x: 0, y: 1};
                scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
            } else if (distances.top < SCROLL_ZONE_PX) {
                scrollingVertically = true;
                scrollingInfo.directionObj = {x: 0, y: -1};
                scrollingInfo.stepPx = calcScrollStepPx(distances.top);
            }
            if (!isAlreadyScrolling && scrollingVertically) {
                scrollContainer(elementToScroll);
                return true;
            }
        }
        // horizontal
        if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
            if (distances.right < SCROLL_ZONE_PX) {
                scrollingHorizontally = true;
                scrollingInfo.directionObj = {x: 1, y: 0};
                scrollingInfo.stepPx = calcScrollStepPx(distances.right);
            } else if (distances.left < SCROLL_ZONE_PX) {
                scrollingHorizontally = true;
                scrollingInfo.directionObj = {x: -1, y: 0};
                scrollingInfo.stepPx = calcScrollStepPx(distances.left);
            }
            if (!isAlreadyScrolling && scrollingHorizontally) {
                scrollContainer(elementToScroll);
                return true;
            }
        }
        resetScrolling();
        return false;
    }

    return {
        scrollIfNeeded,
        resetScrolling
    };
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/styler.js":
/*!**************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/styler.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDraggedElementFrom": () => (/* binding */ createDraggedElementFrom),
/* harmony export */   "moveDraggedElementToWasDroppedState": () => (/* binding */ moveDraggedElementToWasDroppedState),
/* harmony export */   "morphDraggedElementToBeLike": () => (/* binding */ morphDraggedElementToBeLike),
/* harmony export */   "styleDraggable": () => (/* binding */ styleDraggable),
/* harmony export */   "hideOriginalDragTarget": () => (/* binding */ hideOriginalDragTarget),
/* harmony export */   "decorateShadowEl": () => (/* binding */ decorateShadowEl),
/* harmony export */   "unDecorateShadowElement": () => (/* binding */ unDecorateShadowElement),
/* harmony export */   "styleActiveDropZones": () => (/* binding */ styleActiveDropZones),
/* harmony export */   "styleInactiveDropZones": () => (/* binding */ styleInactiveDropZones),
/* harmony export */   "preventShrinking": () => (/* binding */ preventShrinking)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./node_modules/svelte-dnd-action/src/constants.js");
/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersection */ "./node_modules/svelte-dnd-action/src/helpers/intersection.js");



const TRANSITION_DURATION_SECONDS = 0.2;

/**
 * private helper function - creates a transition string for a property
 * @param {string} property
 * @return {string} - the transition string
 */
function trs(property) {
    return `${property} ${TRANSITION_DURATION_SECONDS}s ease`;
}
/**
 * clones the given element and applies proper styles and transitions to the dragged element
 * @param {HTMLElement} originalElement
 * @param {Point} [positionCenterOnXY]
 * @return {Node} - the cloned, styled element
 */
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
    const rect = originalElement.getBoundingClientRect();
    const draggedEl = originalElement.cloneNode(true);
    copyStylesFromTo(originalElement, draggedEl);
    draggedEl.id = _constants__WEBPACK_IMPORTED_MODULE_0__.DRAGGED_ELEMENT_ID;
    draggedEl.style.position = "fixed";
    let elTopPx = rect.top;
    let elLeftPx = rect.left;
    draggedEl.style.top = `${elTopPx}px`;
    draggedEl.style.left = `${elLeftPx}px`;
    if (positionCenterOnXY) {
        const center = (0,_intersection__WEBPACK_IMPORTED_MODULE_1__.findCenter)(rect);
        elTopPx -= center.y - positionCenterOnXY.y;
        elLeftPx -= center.x - positionCenterOnXY.x;
        window.setTimeout(() => {
            draggedEl.style.top = `${elTopPx}px`;
            draggedEl.style.left = `${elLeftPx}px`;
        }, 0);
    }
    draggedEl.style.margin = "0";
    // we can't have relative or automatic height and width or it will break the illusion
    draggedEl.style.boxSizing = "border-box";
    draggedEl.style.height = `${rect.height}px`;
    draggedEl.style.width = `${rect.width}px`;
    draggedEl.style.transition = `${trs("top")}, ${trs("left")}, ${trs("background-color")}, ${trs("opacity")}, ${trs("color")} `;
    // this is a workaround for a strange browser bug that causes the right border to disappear when all the transitions are added at the same time
    window.setTimeout(() => (draggedEl.style.transition += `, ${trs("width")}, ${trs("height")}`), 0);
    draggedEl.style.zIndex = "9999";
    draggedEl.style.cursor = "grabbing";

    return draggedEl;
}

/**
 * styles the dragged element to a 'dropped' state
 * @param {HTMLElement} draggedEl
 */
function moveDraggedElementToWasDroppedState(draggedEl) {
    draggedEl.style.cursor = "grab";
}

/**
 * Morphs the dragged element style, maintains the mouse pointer within the element
 * @param {HTMLElement} draggedEl
 * @param {HTMLElement} copyFromEl - the element the dragged element should look like, typically the shadow element
 * @param {number} currentMouseX
 * @param {number} currentMouseY
 * @param {function} transformDraggedElement - function to transform the dragged element, does nothing by default.
 */
function morphDraggedElementToBeLike(draggedEl, copyFromEl, currentMouseX, currentMouseY, transformDraggedElement) {
    const newRect = copyFromEl.getBoundingClientRect();
    const draggedElRect = draggedEl.getBoundingClientRect();
    const widthChange = newRect.width - draggedElRect.width;
    const heightChange = newRect.height - draggedElRect.height;
    if (widthChange || heightChange) {
        const relativeDistanceOfMousePointerFromDraggedSides = {
            left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
            top: (currentMouseY - draggedElRect.top) / draggedElRect.height
        };
        draggedEl.style.height = `${newRect.height}px`;
        draggedEl.style.width = `${newRect.width}px`;
        draggedEl.style.left = `${parseFloat(draggedEl.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange}px`;
        draggedEl.style.top = `${parseFloat(draggedEl.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange}px`;
    }

    /// other properties
    copyStylesFromTo(copyFromEl, draggedEl);
    transformDraggedElement();
}

/**
 * @param {HTMLElement} copyFromEl
 * @param {HTMLElement} copyToEl
 */
function copyStylesFromTo(copyFromEl, copyToEl) {
    const computedStyle = window.getComputedStyle(copyFromEl);
    Array.from(computedStyle)
        .filter(
            s =>
                s.startsWith("background") ||
                s.startsWith("padding") ||
                s.startsWith("font") ||
                s.startsWith("text") ||
                s.startsWith("align") ||
                s.startsWith("justify") ||
                s.startsWith("display") ||
                s.startsWith("flex") ||
                s.startsWith("border") ||
                s === "opacity" ||
                s === "color" ||
                s === "list-style-type"
        )
        .forEach(s => copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s)));
}

/**
 * makes the element compatible with being draggable
 * @param {HTMLElement} draggableEl
 * @param {boolean} dragDisabled
 */
function styleDraggable(draggableEl, dragDisabled) {
    draggableEl.draggable = false;
    draggableEl.ondragstart = () => false;
    if (!dragDisabled) {
        draggableEl.style.userSelect = "none";
        draggableEl.style.WebkitUserSelect = "none";
        draggableEl.style.cursor = "grab";
    } else {
        draggableEl.style.userSelect = "";
        draggableEl.style.WebkitUserSelect = "";
        draggableEl.style.cursor = "";
    }
}

/**
 * Hides the provided element so that it can stay in the dom without interrupting
 * @param {HTMLElement} dragTarget
 */
function hideOriginalDragTarget(dragTarget) {
    dragTarget.style.display = "none";
    dragTarget.style.position = "fixed";
    dragTarget.style.zIndex = "-5";
}

/**
 * styles the shadow element
 * @param {HTMLElement} shadowEl
 */
function decorateShadowEl(shadowEl) {
    shadowEl.style.visibility = "hidden";
    shadowEl.setAttribute(_constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}

/**
 * undo the styles the shadow element
 * @param {HTMLElement} shadowEl
 */
function unDecorateShadowElement(shadowEl) {
    shadowEl.style.visibility = "";
    shadowEl.removeAttribute(_constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_ELEMENT_ATTRIBUTE_NAME);
}

/**
 * will mark the given dropzones as visually active
 * @param {Array<HTMLElement>} dropZones
 * @param {Function} getStyles - maps a dropzone to a styles object (so the styles can be removed)
 * @param {Function} getClasses - maps a dropzone to a classList
 */
function styleActiveDropZones(dropZones, getStyles = () => {}, getClasses = () => []) {
    dropZones.forEach(dz => {
        const styles = getStyles(dz);
        Object.keys(styles).forEach(style => {
            dz.style[style] = styles[style];
        });
        getClasses(dz).forEach(c => dz.classList.add(c));
    });
}

/**
 * will remove the 'active' styling from given dropzones
 * @param {Array<HTMLElement>} dropZones
 * @param {Function} getStyles - maps a dropzone to a styles object
 * @param {Function} getClasses - maps a dropzone to a classList
 */
function styleInactiveDropZones(dropZones, getStyles = () => {}, getClasses = () => []) {
    dropZones.forEach(dz => {
        const styles = getStyles(dz);
        Object.keys(styles).forEach(style => {
            dz.style[style] = "";
        });
        getClasses(dz).forEach(c => dz.classList.contains(c) && dz.classList.remove(c));
    });
}

/**
 * will prevent the provided element from shrinking by setting its minWidth and minHeight to the current width and height values
 * @param {HTMLElement} el
 * @return {function(): void} - run this function to undo the operation and restore the original values
 */
function preventShrinking(el) {
    const originalMinHeight = el.style.minHeight;
    el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
    const originalMinWidth = el.style.minWidth;
    el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
    return function undo() {
        el.style.minHeight = originalMinHeight;
        el.style.minWidth = originalMinWidth;
    };
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/util.js":
/*!************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/util.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toString": () => (/* binding */ toString),
/* harmony export */   "getDepth": () => (/* binding */ getDepth),
/* harmony export */   "areObjectsShallowEqual": () => (/* binding */ areObjectsShallowEqual),
/* harmony export */   "areArraysShallowEqualSameOrder": () => (/* binding */ areArraysShallowEqualSameOrder)
/* harmony export */ });
/**
 * @param {Object} object
 * @return {string}
 */
function toString(object) {
    return JSON.stringify(object, null, 2);
}

/**
 * Finds the depth of the given node in the DOM tree
 * @param {HTMLElement} node
 * @return {number} - the depth of the node
 */
function getDepth(node) {
    if (!node) {
        throw new Error("cannot get depth of a falsy node");
    }
    return _getDepth(node, 0);
}
function _getDepth(node, countSoFar = 0) {
    if (!node.parentElement) {
        return countSoFar - 1;
    }
    return _getDepth(node.parentElement, countSoFar + 1);
}

/**
 * A simple util to shallow compare objects quickly, it doesn't validate the arguments so pass objects in
 * @param {Object} objA
 * @param {Object} objB
 * @return {boolean} - true if objA and objB are shallow equal
 */
function areObjectsShallowEqual(objA, objB) {
    if (Object.keys(objA).length !== Object.keys(objB).length) {
        return false;
    }
    for (const keyA in objA) {
        if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
            return false;
        }
    }
    return true;
}

/**
 * Shallow compares two arrays
 * @param arrA
 * @param arrB
 * @return {boolean} - whether the arrays are shallow equal
 */
function areArraysShallowEqualSameOrder(arrA, arrB) {
    if (arrA.length !== arrB.length) {
        return false;
    }
    for (let i = 0; i < arrA.length; i++) {
        if (arrA[i] !== arrB[i]) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/helpers/windowScroller.js":
/*!**********************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/helpers/windowScroller.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateMousePosition": () => (/* binding */ updateMousePosition),
/* harmony export */   "armWindowScroller": () => (/* binding */ armWindowScroller),
/* harmony export */   "disarmWindowScroller": () => (/* binding */ disarmWindowScroller)
/* harmony export */ });
/* harmony import */ var _scroller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scroller */ "./node_modules/svelte-dnd-action/src/helpers/scroller.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/svelte-dnd-action/src/constants.js");



const INTERVAL_MS = 300;
let mousePosition;

/**
 * Do not use this! it is visible for testing only until we get over the issue Cypress not triggering the mousemove listeners
 * // TODO - make private (remove export)
 * @param {{clientX: number, clientY: number}} e
 */
function updateMousePosition(e) {
    const c = e.touches ? e.touches[0] : e;
    mousePosition = {x: c.clientX, y: c.clientY};
}
const {scrollIfNeeded, resetScrolling} = (0,_scroller__WEBPACK_IMPORTED_MODULE_0__.makeScroller)();
let next;

function loop() {
    if (mousePosition) {
        scrollIfNeeded(mousePosition, document.documentElement);
    }
    next = window.setTimeout(loop, INTERVAL_MS);
}

/**
 * will start watching the mouse pointer and scroll the window if it goes next to the edges
 */
function armWindowScroller() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_1__.printDebug)(() => "arming window scroller");
    window.addEventListener("mousemove", updateMousePosition);
    window.addEventListener("touchmove", updateMousePosition);
    loop();
}

/**
 * will stop watching the mouse pointer and won't scroll the window anymore
 */
function disarmWindowScroller() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_1__.printDebug)(() => "disarming window scroller");
    window.removeEventListener("mousemove", updateMousePosition);
    window.removeEventListener("touchmove", updateMousePosition);
    mousePosition = undefined;
    window.clearTimeout(next);
    resetScrolling();
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dndzone": () => (/* reexport safe */ _action_js__WEBPACK_IMPORTED_MODULE_0__.dndzone),
/* harmony export */   "alertToScreenReader": () => (/* reexport safe */ _helpers_aria__WEBPACK_IMPORTED_MODULE_1__.alertToScreenReader),
/* harmony export */   "TRIGGERS": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.TRIGGERS),
/* harmony export */   "SOURCES": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.SOURCES),
/* harmony export */   "SHADOW_ITEM_MARKER_PROPERTY_NAME": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.SHADOW_ITEM_MARKER_PROPERTY_NAME),
/* harmony export */   "SHADOW_PLACEHOLDER_ITEM_ID": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.SHADOW_PLACEHOLDER_ITEM_ID),
/* harmony export */   "DRAGGED_ELEMENT_ID": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.DRAGGED_ELEMENT_ID),
/* harmony export */   "overrideItemIdKeyNameBeforeInitialisingDndZones": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.overrideItemIdKeyNameBeforeInitialisingDndZones),
/* harmony export */   "setDebugMode": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.setDebugMode)
/* harmony export */ });
/* harmony import */ var _action_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action.js */ "./node_modules/svelte-dnd-action/src/action.js");
/* harmony import */ var _helpers_aria__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/aria */ "./node_modules/svelte-dnd-action/src/helpers/aria.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/svelte-dnd-action/src/constants.js");





/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/keyboardAction.js":
/*!**************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/keyboardAction.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dndzone": () => (/* binding */ dndzone)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/svelte-dnd-action/src/constants.js");
/* harmony import */ var _helpers_styler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/styler */ "./node_modules/svelte-dnd-action/src/helpers/styler.js");
/* harmony import */ var _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/dispatcher */ "./node_modules/svelte-dnd-action/src/helpers/dispatcher.js");
/* harmony import */ var _helpers_aria__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/aria */ "./node_modules/svelte-dnd-action/src/helpers/aria.js");
/* harmony import */ var _helpers_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/util */ "./node_modules/svelte-dnd-action/src/helpers/util.js");







const DEFAULT_DROP_ZONE_TYPE = "--any--";
const DEFAULT_DROP_TARGET_STYLE = {
    outline: "rgba(255, 255, 102, 0.7) solid 2px"
};

let isDragging = false;
let draggedItemType;
let focusedDz;
let focusedDzLabel = "";
let focusedItem;
let focusedItemId;
let focusedItemLabel = "";
const allDragTargets = new WeakSet();
const elToKeyDownListeners = new WeakMap();
const elToFocusListeners = new WeakMap();
const dzToHandles = new Map();
const dzToConfig = new Map();
const typeToDropZones = new Map();

/* TODO (potentially)
 * what's the deal with the black border of voice-reader not following focus?
 * maybe keep focus on the last dragged item upon drop?
 */

const INSTRUCTION_IDs = (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.initAria)();

/* drop-zones registration management */
function registerDropZone(dropZoneEl, type) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "registering drop-zone if absent");
    if (typeToDropZones.size === 0) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "adding global keydown and click handlers");
        window.addEventListener("keydown", globalKeyDownHandler);
        window.addEventListener("click", globalClickHandler);
    }
    if (!typeToDropZones.has(type)) {
        typeToDropZones.set(type, new Set());
    }
    if (!typeToDropZones.get(type).has(dropZoneEl)) {
        typeToDropZones.get(type).add(dropZoneEl);
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.incrementActiveDropZoneCount)();
    }
}
function unregisterDropZone(dropZoneEl, type) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "unregistering drop-zone");
    if (focusedDz === dropZoneEl) {
        handleDrop();
    }
    typeToDropZones.get(type).delete(dropZoneEl);
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.decrementActiveDropZoneCount)();
    if (typeToDropZones.get(type).size === 0) {
        typeToDropZones.delete(type);
    }
    if (typeToDropZones.size === 0) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "removing global keydown and click handlers");
        window.removeEventListener("keydown", globalKeyDownHandler);
        window.removeEventListener("click", globalClickHandler);
    }
}

function globalKeyDownHandler(e) {
    if (!isDragging) return;
    switch (e.key) {
        case "Escape": {
            handleDrop();
            break;
        }
    }
}

function globalClickHandler() {
    if (!isDragging) return;
    if (!allDragTargets.has(document.activeElement)) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "clicked outside of any draggable");
        handleDrop();
    }
}

function handleZoneFocus(e) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "zone focus");
    if (!isDragging) return;
    const newlyFocusedDz = e.currentTarget;
    if (newlyFocusedDz === focusedDz) return;

    focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
    const {items: originItems} = dzToConfig.get(focusedDz);
    const originItem = originItems.find(item => item[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY] === focusedItemId);
    const originIdx = originItems.indexOf(originItem);
    const itemToMove = originItems.splice(originIdx, 1)[0];
    const {items: targetItems, autoAriaDisabled} = dzToConfig.get(newlyFocusedDz);
    if (
        newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top ||
        newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left
    ) {
        targetItems.push(itemToMove);
        if (!autoAriaDisabled) {
            (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.alertToScreenReader)(`Moved item ${focusedItemLabel} to the end of the list ${focusedDzLabel}`);
        }
    } else {
        targetItems.unshift(itemToMove);
        if (!autoAriaDisabled) {
            (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.alertToScreenReader)(`Moved item ${focusedItemLabel} to the beginning of the list ${focusedDzLabel}`);
        }
    }
    const dzFrom = focusedDz;
    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchFinalizeEvent)(dzFrom, originItems, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_INTO_ANOTHER, id: focusedItemId, source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.KEYBOARD});
    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchFinalizeEvent)(newlyFocusedDz, targetItems, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.KEYBOARD});
    focusedDz = newlyFocusedDz;
}

function triggerAllDzsUpdate() {
    dzToHandles.forEach(({update}, dz) => update(dzToConfig.get(dz)));
}

function handleDrop(dispatchConsider = true) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "drop");
    if (!dzToConfig.get(focusedDz).autoAriaDisabled) {
        (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.alertToScreenReader)(`Stopped dragging item ${focusedItemLabel}`);
    }
    if (allDragTargets.has(document.activeElement)) {
        document.activeElement.blur();
    }
    if (dispatchConsider) {
        (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchConsiderEvent)(focusedDz, dzToConfig.get(focusedDz).items, {
            trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAG_STOPPED,
            id: focusedItemId,
            source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.KEYBOARD
        });
    }
    (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_1__.styleInactiveDropZones)(
        typeToDropZones.get(draggedItemType),
        dz => dzToConfig.get(dz).dropTargetStyle,
        dz => dzToConfig.get(dz).dropTargetClasses
    );
    focusedItem = null;
    focusedItemId = null;
    focusedItemLabel = "";
    draggedItemType = null;
    focusedDz = null;
    focusedDzLabel = "";
    isDragging = false;
    triggerAllDzsUpdate();
}
//////
function dndzone(node, options) {
    const config = {
        items: undefined,
        type: undefined,
        dragDisabled: false,
        zoneTabIndex: 0,
        dropFromOthersDisabled: false,
        dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
        dropTargetClasses: [],
        autoAriaDisabled: false
    };

    function swap(arr, i, j) {
        if (arr.length <= 1) return;
        arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
    }

    function handleKeyDown(e) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["handling key down", e.key]);
        switch (e.key) {
            case "Enter":
            case " ": {
                // we don't want to affect nested input elements or clickable elements
                if ((e.target.disabled !== undefined || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
                    return;
                }
                e.preventDefault(); // preventing scrolling on spacebar
                e.stopPropagation();
                if (isDragging) {
                    // TODO - should this trigger a drop? only here or in general (as in when hitting space or enter outside of any zone)?
                    handleDrop();
                } else {
                    // drag start
                    handleDragStart(e);
                }
                break;
            }
            case "ArrowDown":
            case "ArrowRight": {
                if (!isDragging) return;
                e.preventDefault(); // prevent scrolling
                e.stopPropagation();
                const {items} = dzToConfig.get(node);
                const children = Array.from(node.children);
                const idx = children.indexOf(e.currentTarget);
                (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["arrow down", idx]);
                if (idx < children.length - 1) {
                    if (!config.autoAriaDisabled) {
                        (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.alertToScreenReader)(`Moved item ${focusedItemLabel} to position ${idx + 2} in the list ${focusedDzLabel}`);
                    }
                    swap(items, idx, idx + 1);
                    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchFinalizeEvent)(node, items, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.KEYBOARD});
                }
                break;
            }
            case "ArrowUp":
            case "ArrowLeft": {
                if (!isDragging) return;
                e.preventDefault(); // prevent scrolling
                e.stopPropagation();
                const {items} = dzToConfig.get(node);
                const children = Array.from(node.children);
                const idx = children.indexOf(e.currentTarget);
                (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["arrow up", idx]);
                if (idx > 0) {
                    if (!config.autoAriaDisabled) {
                        (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.alertToScreenReader)(`Moved item ${focusedItemLabel} to position ${idx} in the list ${focusedDzLabel}`);
                    }
                    swap(items, idx, idx - 1);
                    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchFinalizeEvent)(node, items, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_INTO_ZONE, id: focusedItemId, source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.KEYBOARD});
                }
                break;
            }
        }
    }
    function handleDragStart(e) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "drag start");
        setCurrentFocusedItem(e.currentTarget);
        focusedDz = node;
        draggedItemType = config.type;
        isDragging = true;
        const dropTargets = Array.from(typeToDropZones.get(config.type)).filter(dz => dz === focusedDz || !dzToConfig.get(dz).dropFromOthersDisabled);
        (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_1__.styleActiveDropZones)(
            dropTargets,
            dz => dzToConfig.get(dz).dropTargetStyle,
            dz => dzToConfig.get(dz).dropTargetClasses
        );
        if (!config.autoAriaDisabled) {
            let msg = `Started dragging item ${focusedItemLabel}. Use the arrow keys to move it within its list ${focusedDzLabel}`;
            if (dropTargets.length > 1) {
                msg += `, or tab to another list in order to move the item into it`;
            }
            (0,_helpers_aria__WEBPACK_IMPORTED_MODULE_3__.alertToScreenReader)(msg);
        }
        (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_2__.dispatchConsiderEvent)(node, dzToConfig.get(node).items, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAG_STARTED, id: focusedItemId, source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.KEYBOARD});
        triggerAllDzsUpdate();
    }

    function handleClick(e) {
        if (!isDragging) return;
        if (e.currentTarget === focusedItem) return;
        e.stopPropagation();
        handleDrop(false);
        handleDragStart(e);
    }
    function setCurrentFocusedItem(draggableEl) {
        const {items} = dzToConfig.get(node);
        const children = Array.from(node.children);
        const focusedItemIdx = children.indexOf(draggableEl);
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        focusedItemId = items[focusedItemIdx][_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY];
        focusedItemLabel = children[focusedItemIdx].getAttribute("aria-label") || "";
    }

    function configure({
        items = [],
        type: newType = DEFAULT_DROP_ZONE_TYPE,
        dragDisabled = false,
        zoneTabIndex = 0,
        dropFromOthersDisabled = false,
        dropTargetStyle = DEFAULT_DROP_TARGET_STYLE,
        dropTargetClasses = [],
        autoAriaDisabled = false
    }) {
        config.items = [...items];
        config.dragDisabled = dragDisabled;
        config.dropFromOthersDisabled = dropFromOthersDisabled;
        config.zoneTabIndex = zoneTabIndex;
        config.dropTargetStyle = dropTargetStyle;
        config.dropTargetClasses = dropTargetClasses;
        config.autoAriaDisabled = autoAriaDisabled;
        if (!autoAriaDisabled) {
            node.setAttribute("aria-disabled", dragDisabled);
            node.setAttribute("role", "list");
            node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs.DND_ZONE_ACTIVE);
        }
        if (config.type && newType !== config.type) {
            unregisterDropZone(node, config.type);
        }
        config.type = newType;
        registerDropZone(node, newType);
        dzToConfig.set(node, config);

        if (isDragging) {
            node.tabIndex =
                node === focusedDz ||
                focusedItem.contains(node) ||
                config.dropFromOthersDisabled ||
                (focusedDz && config.type !== dzToConfig.get(focusedDz).type)
                ? -1
                : 0;
        } else {
            node.tabIndex = config.zoneTabIndex;
        }

        node.addEventListener("focus", handleZoneFocus);

        for (let i = 0; i < node.children.length; i++) {
            const draggableEl = node.children[i];
            allDragTargets.add(draggableEl);
            draggableEl.tabIndex = isDragging ? -1 : 0;
            if (!autoAriaDisabled) {
                draggableEl.setAttribute("role", "listitem");
            }
            draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
            draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
            if (!dragDisabled) {
                draggableEl.addEventListener("keydown", handleKeyDown);
                elToKeyDownListeners.set(draggableEl, handleKeyDown);
                draggableEl.addEventListener("click", handleClick);
                elToFocusListeners.set(draggableEl, handleClick);
            }
            if (isDragging && config.items[i][_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY] === focusedItemId) {
                (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["focusing on", {i, focusedItemId}]);
                // if it is a nested dropzone, it was re-rendered and we need to refresh our pointer
                focusedItem = draggableEl;
                focusedItem.tabIndex = 0;
                // without this the element loses focus if it moves backwards in the list
                draggableEl.focus();
            }
        }
    }
    configure(options);

    const handles = {
        update: newOptions => {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => `keyboard dndzone will update newOptions: ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_4__.toString)(newOptions)}`);
            configure(newOptions);
        },
        destroy: () => {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "keyboard dndzone will destroy");
            unregisterDropZone(node, config.type);
            dzToConfig.delete(node);
            dzToHandles.delete(node);
        }
    };
    dzToHandles.set(node, handles);
    return handles;
}


/***/ }),

/***/ "./node_modules/svelte-dnd-action/src/pointerAction.js":
/*!*************************************************************!*\
  !*** ./node_modules/svelte-dnd-action/src/pointerAction.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dndzone": () => (/* binding */ dndzone)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/svelte-dnd-action/src/constants.js");
/* harmony import */ var _helpers_observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/observer */ "./node_modules/svelte-dnd-action/src/helpers/observer.js");
/* harmony import */ var _helpers_windowScroller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/windowScroller */ "./node_modules/svelte-dnd-action/src/helpers/windowScroller.js");
/* harmony import */ var _helpers_styler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/styler */ "./node_modules/svelte-dnd-action/src/helpers/styler.js");
/* harmony import */ var _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/dispatcher */ "./node_modules/svelte-dnd-action/src/helpers/dispatcher.js");
/* harmony import */ var _helpers_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/util */ "./node_modules/svelte-dnd-action/src/helpers/util.js");
/* harmony import */ var _helpers_intersection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/intersection */ "./node_modules/svelte-dnd-action/src/helpers/intersection.js");








const DEFAULT_DROP_ZONE_TYPE = "--any--";
const MIN_OBSERVATION_INTERVAL_MS = 100;
const MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
const DEFAULT_DROP_TARGET_STYLE = {
    outline: "rgba(255, 255, 102, 0.7) solid 2px"
};

let originalDragTarget;
let draggedEl;
let draggedElData;
let draggedElType;
let originDropZone;
let originIndex;
let shadowElData;
let shadowElDropZone;
let dragStartMousePosition;
let currentMousePosition;
let isWorkingOnPreviousDrag = false;
let finalizingPreviousDrag = false;
let unlockOriginDzMinDimensions;
let isDraggedOutsideOfAnyDz = false;

// a map from type to a set of drop-zones
const typeToDropZones = new Map();
// important - this is needed because otherwise the config that would be used for everyone is the config of the element that created the event listeners
const dzToConfig = new Map();
// this is needed in order to be able to cleanup old listeners and avoid stale closures issues (as the listener is defined within each zone)
const elToMouseDownListener = new WeakMap();

/* drop-zones registration management */
function registerDropZone(dropZoneEl, type) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "registering drop-zone if absent");
    if (!typeToDropZones.has(type)) {
        typeToDropZones.set(type, new Set());
    }
    if (!typeToDropZones.get(type).has(dropZoneEl)) {
        typeToDropZones.get(type).add(dropZoneEl);
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.incrementActiveDropZoneCount)();
    }
}
function unregisterDropZone(dropZoneEl, type) {
    typeToDropZones.get(type).delete(dropZoneEl);
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.decrementActiveDropZoneCount)();
    if (typeToDropZones.get(type).size === 0) {
        typeToDropZones.delete(type);
    }
}

/* functions to manage observing the dragged element and trigger custom drag-events */
function watchDraggedElement() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "watching dragged element");
    (0,_helpers_windowScroller__WEBPACK_IMPORTED_MODULE_2__.armWindowScroller)();
    const dropZones = typeToDropZones.get(draggedElType);
    for (const dz of dropZones) {
        dz.addEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
        dz.addEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
        dz.addEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
    window.addEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
    // it is important that we don't have an interval that is faster than the flip duration because it can cause elements to jump bach and forth
    const observationIntervalMs = Math.max(
        MIN_OBSERVATION_INTERVAL_MS,
        ...Array.from(dropZones.keys()).map(dz => dzToConfig.get(dz).dropAnimationDurationMs)
    );
    (0,_helpers_observer__WEBPACK_IMPORTED_MODULE_1__.observe)(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "unwatching dragged element");
    (0,_helpers_windowScroller__WEBPACK_IMPORTED_MODULE_2__.disarmWindowScroller)();
    const dropZones = typeToDropZones.get(draggedElType);
    for (const dz of dropZones) {
        dz.removeEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
        dz.removeEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
        dz.removeEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
    window.removeEventListener(_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
    (0,_helpers_observer__WEBPACK_IMPORTED_MODULE_1__.unobserve)();
}

// finds the initial placeholder that is placed there on drag start
function findShadowPlaceHolderIdx(items) {
    return items.findIndex(item => item[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY] === _constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_PLACEHOLDER_ITEM_ID);
}
function findShadowElementIdx(items) {
    // checking that the id is not the placeholder's for Dragula like usecases
    return items.findIndex(item => !!item[_constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY] !== _constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_PLACEHOLDER_ITEM_ID);
}

/* custom drag-events handlers */
function handleDraggedEntered(e) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["dragged entered", e.currentTarget, e.detail]);
    let {items, dropFromOthersDisabled} = dzToConfig.get(e.currentTarget);
    if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "ignoring dragged entered because drop is currently disabled");
        return;
    }
    isDraggedOutsideOfAnyDz = false;
    // this deals with another race condition. in rare occasions (super rapid operations) the list hasn't updated yet
    items = items.filter(item => item[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY] !== shadowElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY]);
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => `dragged entered items ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.toString)(items)}`);

    if (originDropZone !== e.currentTarget) {
        const originZoneItems = dzToConfig.get(originDropZone).items;
        const newOriginZoneItems = originZoneItems.filter(item => !item[_constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_ITEM_MARKER_PROPERTY_NAME]);
        (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchConsiderEvent)(originDropZone, newOriginZoneItems, {
            trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAGGED_ENTERED_ANOTHER,
            id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY],
            source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER
        });
    } else {
        const shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
        if (shadowPlaceHolderIdx !== -1) {
            // only happens right after drag start, on the first drag entered event
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "removing placeholder item from origin dz");
            items.splice(shadowPlaceHolderIdx, 1);
        }
    }

    const {index, isProximityBased} = e.detail.indexObj;
    const shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
    shadowElDropZone = e.currentTarget;
    items.splice(shadowElIdx, 0, shadowElData);
    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchConsiderEvent)(e.currentTarget, items, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAGGED_ENTERED, id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY], source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER});
}

function handleDraggedLeft(e) {
    // dealing with a rare race condition on extremely rapid clicking and dropping
    if (!isWorkingOnPreviousDrag) return;
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["dragged left", e.currentTarget, e.detail]);
    const {items, dropFromOthersDisabled} = dzToConfig.get(e.currentTarget);
    if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "drop is currently disabled");
        return;
    }
    const shadowElIdx = findShadowElementIdx(items);
    const shadowItem = items.splice(shadowElIdx, 1)[0];
    shadowElDropZone = undefined;
    const {type, theOtherDz} = e.detail;
    if (
        type === _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY ||
        (type === _helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled)
    ) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "dragged left all, putting shadow element back in the origin dz");
        isDraggedOutsideOfAnyDz = true;
        shadowElDropZone = originDropZone;
        const originZoneItems = dzToConfig.get(originDropZone).items;
        originZoneItems.splice(originIndex, 0, shadowItem);
        (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchConsiderEvent)(originDropZone, originZoneItems, {
            trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAGGED_LEFT_ALL,
            id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY],
            source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER
        });
    }
    // for the origin dz, when the dragged is outside of any, this will be fired in addition to the previous. this is for simplicity
    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchConsiderEvent)(e.currentTarget, items, {
        trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAGGED_LEFT,
        id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY],
        source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER
    });
}
function handleDraggedIsOverIndex(e) {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["dragged is over index", e.currentTarget, e.detail]);
    const {items, dropFromOthersDisabled} = dzToConfig.get(e.currentTarget);
    if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "drop is currently disabled");
        return;
    }
    isDraggedOutsideOfAnyDz = false;
    const {index} = e.detail.indexObj;
    const shadowElIdx = findShadowElementIdx(items);
    items.splice(shadowElIdx, 1);
    items.splice(index, 0, shadowElData);
    (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchConsiderEvent)(e.currentTarget, items, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAGGED_OVER_INDEX, id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY], source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER});
}

// Global mouse/touch-events handlers
function handleMouseMove(e) {
    e.preventDefault();
    const c = e.touches ? e.touches[0] : e;
    currentMousePosition = {x: c.clientX, y: c.clientY};
    draggedEl.style.transform = `translate3d(${currentMousePosition.x - dragStartMousePosition.x}px, ${
        currentMousePosition.y - dragStartMousePosition.y
    }px, 0)`;
}

function handleDrop() {
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "dropped");
    finalizingPreviousDrag = true;
    // cleanup
    window.removeEventListener("mousemove", handleMouseMove);
    window.removeEventListener("touchmove", handleMouseMove);
    window.removeEventListener("mouseup", handleDrop);
    window.removeEventListener("touchend", handleDrop);
    unWatchDraggedElement();
    (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.moveDraggedElementToWasDroppedState)(draggedEl);

    if (!shadowElDropZone) {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "element was dropped right after it left origin but before entering somewhere else");
        shadowElDropZone = originDropZone;
    }
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => ["dropped in dz", shadowElDropZone]);
    let {items, type} = dzToConfig.get(shadowElDropZone);
    (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleInactiveDropZones)(
        typeToDropZones.get(type),
        dz => dzToConfig.get(dz).dropTargetStyle,
        dz => dzToConfig.get(dz).dropTargetClasses
    );
    let shadowElIdx = findShadowElementIdx(items);
    // the handler might remove the shadow element, ex: dragula like copy on drag
    if (shadowElIdx === -1) shadowElIdx = originIndex;
    items = items.map(item => (item[_constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item));
    function finalizeWithinZone() {
        unlockOriginDzMinDimensions();
        (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchFinalizeEvent)(shadowElDropZone, items, {
            trigger: isDraggedOutsideOfAnyDz ? _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_OUTSIDE_OF_ANY : _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_INTO_ZONE,
            id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY],
            source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER
        });
        if (shadowElDropZone !== originDropZone) {
            // letting the origin drop zone know the element was permanently taken away
            (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchFinalizeEvent)(originDropZone, dzToConfig.get(originDropZone).items, {
                trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DROPPED_INTO_ANOTHER,
                id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY],
                source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER
            });
        }
        (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.unDecorateShadowElement)(shadowElDropZone.children[shadowElIdx]);
        cleanupPostDrop();
    }
    animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}

// helper function for handleDrop
function animateDraggedToFinalPosition(shadowElIdx, callback) {
    const shadowElRect = (0,_helpers_intersection__WEBPACK_IMPORTED_MODULE_6__.getBoundingRectNoTransforms)(shadowElDropZone.children[shadowElIdx]);
    const newTransform = {
        x: shadowElRect.left - parseFloat(draggedEl.style.left),
        y: shadowElRect.top - parseFloat(draggedEl.style.top)
    };
    const {dropAnimationDurationMs} = dzToConfig.get(shadowElDropZone);
    const transition = `transform ${dropAnimationDurationMs}ms ease`;
    draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
    draggedEl.style.transform = `translate3d(${newTransform.x}px, ${newTransform.y}px, 0)`;
    window.setTimeout(callback, dropAnimationDurationMs);
}

/* cleanup */
function cleanupPostDrop() {
    draggedEl.remove();
    originalDragTarget.remove();
    draggedEl = undefined;
    originalDragTarget = undefined;
    draggedElData = undefined;
    draggedElType = undefined;
    originDropZone = undefined;
    originIndex = undefined;
    shadowElData = undefined;
    shadowElDropZone = undefined;
    dragStartMousePosition = undefined;
    currentMousePosition = undefined;
    isWorkingOnPreviousDrag = false;
    finalizingPreviousDrag = false;
    unlockOriginDzMinDimensions = undefined;
    isDraggedOutsideOfAnyDz = false;
}

function dndzone(node, options) {
    const config = {
        items: undefined,
        type: undefined,
        flipDurationMs: 0,
        dragDisabled: false,
        morphDisabled: false,
        dropFromOthersDisabled: false,
        dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
        dropTargetClasses: [],
        transformDraggedElement: () => {},
        centreDraggedOnCursor: false
    };
    (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => [`dndzone good to go options: ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.toString)(options)}, config: ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.toString)(config)}`, {node}]);
    let elToIdx = new Map();

    function addMaybeListeners() {
        window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {passive: false});
        window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {passive: false, capture: false});
        window.addEventListener("mouseup", handleFalseAlarm, {passive: false});
        window.addEventListener("touchend", handleFalseAlarm, {passive: false});
    }
    function removeMaybeListeners() {
        window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
        window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
        window.removeEventListener("mouseup", handleFalseAlarm);
        window.removeEventListener("touchend", handleFalseAlarm);
    }
    function handleFalseAlarm() {
        removeMaybeListeners();
        originalDragTarget = undefined;
        dragStartMousePosition = undefined;
        currentMousePosition = undefined;
    }

    function handleMouseMoveMaybeDragStart(e) {
        e.preventDefault();
        const c = e.touches ? e.touches[0] : e;
        currentMousePosition = {x: c.clientX, y: c.clientY};
        if (
            Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX ||
            Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX
        ) {
            removeMaybeListeners();
            handleDragStart();
        }
    }
    function handleMouseDown(e) {
        // on safari clicking on a select element doesn't fire mouseup at the end of the click and in general this makes more sense
        if (e.target !== e.currentTarget && (e.target.value !== undefined || e.target.isContentEditable)) {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "won't initiate drag on a nested input element");
            return;
        }
        // prevents responding to any button but left click which equals 0 (which is falsy)
        if (e.button) {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => `ignoring none left click button: ${e.button}`);
            return;
        }
        if (isWorkingOnPreviousDrag) {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "cannot start a new drag before finalizing previous one");
            return;
        }
        e.stopPropagation();
        const c = e.touches ? e.touches[0] : e;
        dragStartMousePosition = {x: c.clientX, y: c.clientY};
        currentMousePosition = {...dragStartMousePosition};
        originalDragTarget = e.currentTarget;
        addMaybeListeners();
    }

    function handleDragStart() {
        (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => [`drag start config: ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.toString)(config)}`, originalDragTarget]);
        isWorkingOnPreviousDrag = true;

        // initialising globals
        const currentIdx = elToIdx.get(originalDragTarget);
        originIndex = currentIdx;
        originDropZone = originalDragTarget.parentElement;
        /** @type {ShadowRoot | HTMLDocument} */
        const rootNode = originDropZone.getRootNode();
        const originDropZoneRoot = rootNode.body || rootNode;
        const {items, type, centreDraggedOnCursor} = config;
        draggedElData = {...items[currentIdx]};
        draggedElType = type;
        shadowElData = {...draggedElData, [_constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_ITEM_MARKER_PROPERTY_NAME]: true};
        // The initial shadow element. We need a different id at first in order to avoid conflicts and timing issues
        const placeHolderElData = {...shadowElData, [_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY]: _constants__WEBPACK_IMPORTED_MODULE_0__.SHADOW_PLACEHOLDER_ITEM_ID};

        // creating the draggable element
        draggedEl = (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.createDraggedElementFrom)(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
        // We will keep the original dom node in the dom because touch events keep firing on it, we want to re-add it after the framework removes it
        function keepOriginalElementInDom() {
            if (!draggedEl.parentElement) {
                originDropZoneRoot.appendChild(draggedEl);
                // to prevent the outline from disappearing
                draggedEl.focus();
                watchDraggedElement();
                (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.hideOriginalDragTarget)(originalDragTarget);
                originDropZoneRoot.appendChild(originalDragTarget);
            } else {
                window.requestAnimationFrame(keepOriginalElementInDom);
            }
        }
        window.requestAnimationFrame(keepOriginalElementInDom);

        (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleActiveDropZones)(
            Array.from(typeToDropZones.get(config.type)).filter(dz => dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled),
            dz => dzToConfig.get(dz).dropTargetStyle,
            dz => dzToConfig.get(dz).dropTargetClasses
        );

        // removing the original element by removing its data entry
        items.splice(currentIdx, 1, placeHolderElData);
        unlockOriginDzMinDimensions = (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.preventShrinking)(originDropZone);

        (0,_helpers_dispatcher__WEBPACK_IMPORTED_MODULE_4__.dispatchConsiderEvent)(originDropZone, items, {trigger: _constants__WEBPACK_IMPORTED_MODULE_0__.TRIGGERS.DRAG_STARTED, id: draggedElData[_constants__WEBPACK_IMPORTED_MODULE_0__.ITEM_ID_KEY], source: _constants__WEBPACK_IMPORTED_MODULE_0__.SOURCES.POINTER});

        // handing over to global handlers - starting to watch the element
        window.addEventListener("mousemove", handleMouseMove, {passive: false});
        window.addEventListener("touchmove", handleMouseMove, {passive: false, capture: false});
        window.addEventListener("mouseup", handleDrop, {passive: false});
        window.addEventListener("touchend", handleDrop, {passive: false});
    }

    function configure({
        items = undefined,
        flipDurationMs: dropAnimationDurationMs = 0,
        type: newType = DEFAULT_DROP_ZONE_TYPE,
        dragDisabled = false,
        morphDisabled = false,
        dropFromOthersDisabled = false,
        dropTargetStyle = DEFAULT_DROP_TARGET_STYLE,
        dropTargetClasses = [],
        transformDraggedElement = () => {},
        centreDraggedOnCursor = false
    }) {
        config.dropAnimationDurationMs = dropAnimationDurationMs;
        if (config.type && newType !== config.type) {
            unregisterDropZone(node, config.type);
        }
        config.type = newType;
        registerDropZone(node, newType);

        config.items = [...items];
        config.dragDisabled = dragDisabled;
        config.morphDisabled = morphDisabled;
        config.transformDraggedElement = transformDraggedElement;
        config.centreDraggedOnCursor = centreDraggedOnCursor;

        // realtime update for dropTargetStyle
        if (
            isWorkingOnPreviousDrag &&
            !finalizingPreviousDrag &&
            (!(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.areObjectsShallowEqual)(dropTargetStyle, config.dropTargetStyle) ||
                !(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.areArraysShallowEqualSameOrder)(dropTargetClasses, config.dropTargetClasses))
        ) {
            (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleInactiveDropZones)(
                [node],
                () => config.dropTargetStyle,
                () => dropTargetClasses
            );
            (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleActiveDropZones)(
                [node],
                () => dropTargetStyle,
                () => dropTargetClasses
            );
        }
        config.dropTargetStyle = dropTargetStyle;
        config.dropTargetClasses = [...dropTargetClasses];

        // realtime update for dropFromOthersDisabled
        function getConfigProp(dz, propName) {
            return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
        }
        if (isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
            if (dropFromOthersDisabled) {
                (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleInactiveDropZones)(
                    [node],
                    dz => getConfigProp(dz, "dropTargetStyle"),
                    dz => getConfigProp(dz, "dropTargetClasses")
                );
            } else {
                (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleActiveDropZones)(
                    [node],
                    dz => getConfigProp(dz, "dropTargetStyle"),
                    dz => getConfigProp(dz, "dropTargetClasses")
                );
            }
        }
        config.dropFromOthersDisabled = dropFromOthersDisabled;

        dzToConfig.set(node, config);
        const shadowElIdx = findShadowElementIdx(config.items);
        for (let idx = 0; idx < node.children.length; idx++) {
            const draggableEl = node.children[idx];
            (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.styleDraggable)(draggableEl, dragDisabled);
            if (idx === shadowElIdx) {
                if (!morphDisabled) {
                    (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.morphDraggedElementToBeLike)(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y, () =>
                        config.transformDraggedElement(draggedEl, draggedElData, idx)
                    );
                }
                (0,_helpers_styler__WEBPACK_IMPORTED_MODULE_3__.decorateShadowEl)(draggableEl);
                continue;
            }
            draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
            draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
            if (!dragDisabled) {
                draggableEl.addEventListener("mousedown", handleMouseDown);
                draggableEl.addEventListener("touchstart", handleMouseDown);
                elToMouseDownListener.set(draggableEl, handleMouseDown);
            }
            // updating the idx
            elToIdx.set(draggableEl, idx);
        }
    }
    configure(options);

    return {
        update: newOptions => {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => `pointer dndzone will update newOptions: ${(0,_helpers_util__WEBPACK_IMPORTED_MODULE_5__.toString)(newOptions)}`);
            configure(newOptions);
        },
        destroy: () => {
            (0,_constants__WEBPACK_IMPORTED_MODULE_0__.printDebug)(() => "pointer dndzone will destroy");
            unregisterDropZone(node, config.type);
            dzToConfig.delete(node);
        }
    };
}


/***/ }),

/***/ "./src/helper/index.ts":
/*!*****************************!*\
  !*** ./src/helper/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MonthHelper": () => (/* binding */ MonthHelper),
/* harmony export */   "DayHelper": () => (/* binding */ DayHelper),
/* harmony export */   "default": () => (/* binding */ CalendarHelper)
/* harmony export */ });
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/utils/constants */ "./src/utils/constants.ts");
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");



class MonthHelper {
    constructor(data, number, year, calendar) {
        this.data = data;
        this.number = number;
        this.year = year;
        this.calendar = calendar;
        this.days = [];
        this.leapDays = [];
        this.leapDays = this.calendar.leapDaysForMonth(this, year);
        this.days = [
            ...new Array(data.length + this.leapDays.length).keys()
        ].map((k) => new DayHelper(this, k + 1));
    }
    get id() {
        return this.data.id;
    }
    get index() {
        return this.calendar.data.months.indexOf(this.data);
    }
    get name() {
        return this.data.name;
    }
    get length() {
        return this.days.length;
    }
    /** Days before this month in the year.  */
    get daysBefore() {
        return this.calendar.daysBeforeMonth(this);
    }
    get firstWeekday() {
        if (!this.calendar.data.overflow)
            return 0;
        return this.days[0].weekday;
    }
    get lastWeekday() {
        return this.days[this.days.length - 1].weekday;
    }
    get type() {
        return this.data.type;
    }
}
class DayHelper {
    constructor(month, number) {
        this.month = month;
        this.number = number;
    }
    get calendar() {
        return this.month.calendar;
    }
    get date() {
        return {
            day: this.number,
            month: this.month.number,
            year: this.year
        };
    }
    get events() {
        return this.calendar.getEventsOnDate(this.date);
    }
    get longDate() {
        return {
            day: this.number,
            month: this.month.name,
            year: this.year
        };
    }
    /** Days before this day in the year. */
    get daysBefore() {
        return this.month.daysBefore + this.number - 1;
    }
    get year() {
        return this.month.year;
    }
    get weekday() {
        const firstOfYear = this.calendar.firstDayOfYear(this.year);
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.wrap)((this.daysBefore % this.calendar.weekdays.length) + firstOfYear, this.calendar.weekdays.length);
    }
    get isCurrentDay() {
        return (this.number == this.calendar.current.day &&
            this.month.number == this.calendar.current.month &&
            this.month.year == this.calendar.current.year);
    }
    get isDisplaying() {
        return (this.number == this.calendar.viewing.day &&
            this.calendar.displayed.year == this.calendar.viewing.year &&
            this.calendar.displayed.month == this.calendar.viewing.month);
    }
    get moons() {
        return this.calendar.getMoonsForDate(this.date);
    }
}
class CalendarHelper extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Events {
    constructor(object, plugin) {
        super();
        this.object = object;
        this.plugin = plugin;
        this.map = {};
        this.displayed = {
            year: null,
            month: null,
            day: null
        };
        this.viewing = {
            year: null,
            month: null,
            day: null
        };
        this.displayed = Object.assign({}, this.current);
        this.update(this.object);
        window.calendar = this;
    }
    getNameForYear(year) {
        var _a;
        if (!this.data.useCustomYears)
            return `${year}`;
        if (this.data.useCustomYears &&
            year - 1 >= 0 &&
            year <= ((_a = this.data.years) === null || _a === void 0 ? void 0 : _a.length)) {
            return this.data.years[year - 1].name;
        }
    }
    get displayWeeks() {
        return this.object.displayWeeks;
    }
    getMonthsForYear(year) {
        return this.data.months.map((m, i) => new MonthHelper(m, i, year, this));
    }
    hash(date) {
        if (!date.year || !date.month || !date.day)
            return null;
        return `${date.year}${date.month}${date.day}`;
    }
    update(calendar) {
        this.object = calendar !== null && calendar !== void 0 ? calendar : this.object;
        this.maxDays = Math.max(...this.data.months.map((m) => m.length));
        this.trigger("month-update");
        this.trigger("day-update");
        this.map = {};
        for (const event of this.object.events) {
            const hash = this.hash(event.date);
            if (!hash)
                continue;
            if (!(hash in this.map))
                this.map[hash] = new Set();
            this.map[hash].add(event);
        }
    }
    get data() {
        return this.object.static;
    }
    get current() {
        return this.object.current;
    }
    get leapdays() {
        return this.data.leapDays;
    }
    getEventsOnDate(date) {
        const events = this.object.events.filter((e) => {
            if (!e.date.day)
                return false;
            if (!e.end) {
                e.end = Object.assign({}, e.date);
            }
            const start = Object.assign({}, e.date);
            if (start.year > date.year)
                return false;
            const end = Object.assign({}, e.end);
            if (start.month == undefined)
                end.month = start.month = date.month;
            if (start.year == undefined)
                end.year = start.year = date.year;
            const daysBeforeStart = this.daysBeforeDate(start);
            const daysBeforeDate = this.daysBeforeDate(date);
            if (end.year > date.year) {
                return daysBeforeDate >= daysBeforeStart;
            }
            const daysBeforeEnd = this.daysBeforeDate(end);
            return (daysBeforeDate >= daysBeforeStart &&
                daysBeforeEnd >= daysBeforeDate);
        });
        events.sort((a, b) => {
            if (!a.end)
                return 0;
            if (!b.end)
                return -1;
            if (this.areDatesEqual(a.date, b.date)) {
                return this.daysBeforeDate(b.end) - this.daysBeforeDate(a.end);
            }
            return this.daysBeforeDate(a.date) - this.daysBeforeDate(b.date);
        });
        return events;
    }
    get currentDate() {
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.dateString)(this.current, this.data.months);
    }
    get displayedDate() {
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.dateString)(this.displayed, this.data.months);
    }
    get viewedDate() {
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.dateString)(this.viewing, this.data.months);
    }
    reset() {
        this.displayed = Object.assign({}, this.current);
        this.viewing = Object.assign({}, this.current);
        this.trigger("month-update");
        this.trigger("day-update");
    }
    setCurrentMonth(n) {
        this.displayed.month = n;
        this.trigger("month-update");
    }
    goToNextDay() {
        this.viewing.day += 1;
        const currentMonth = this.getMonth(this.displayed.month, this.displayed.year);
        if (this.viewing.day > currentMonth.days.length) {
            this.goToNext();
            this.viewing.month = this.displayed.month;
            this.viewing.year = this.displayed.year;
            this.viewing.day = 1;
        }
        this.trigger("day-update");
    }
    goToNextCurrentDay() {
        this.current.day += 1;
        const currentMonth = this.getMonth(this.current.month, this.current.year);
        if (this.current.day >= currentMonth.days.length) {
            this.current.day = 1;
            this.current.month += 1;
            if (this.current.month >= this.data.months.length) {
                this.current.month = 0;
                this.current.year += 1;
            }
        }
        this.trigger("day-update");
    }
    get nextMonthIndex() {
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.wrap)(this.displayed.month + 1, this.data.months.length);
    }
    get nextMonth() {
        return this.getMonth(this.displayed.month + 1, this.displayed.year);
    }
    canGoToNextYear(year = this.displayed.year) {
        return !this.data.useCustomYears || year < this.data.years.length;
    }
    goToNext() {
        if (this.nextMonthIndex < this.displayed.month) {
            if (!this.canGoToNextYear()) {
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("This is the last year. Additional years can be created in settings.");
                return;
            }
            this.goToNextYear();
        }
        this.setCurrentMonth(this.nextMonthIndex);
    }
    goToNextYear() {
        this.displayed.year += 1;
        this.trigger("year-update");
    }
    get prevMonthIndex() {
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.wrap)(this.displayed.month - 1, this.data.months.length);
    }
    get previousMonth() {
        return this.getMonth(this.displayed.month - 1, this.displayed.year);
    }
    goToPrevious() {
        if (this.prevMonthIndex > this.displayed.month) {
            if (this.displayed.year == 1) {
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("This is the earliest year.");
                return;
            }
            this.goToPreviousYear();
        }
        this.setCurrentMonth(this.prevMonthIndex);
    }
    goToPreviousDay() {
        this.viewing.day -= 1;
        if (this.viewing.day < 1) {
            this.goToPrevious();
            this.viewing.month = this.displayed.month;
            this.viewing.year = this.displayed.year;
            this.viewing.day = this.currentMonth.days.length;
        }
        this.trigger("day-update");
    }
    goToPreviousYear() {
        this.displayed.year -= 1;
        this.trigger("year-update");
    }
    get weekdays() {
        return this.data.weekdays;
    }
    get currentMonth() {
        return this.getMonth(this.displayed.month, this.displayed.year);
    }
    leapDaysForYear(year) {
        return this.leapdays.filter((l) => {
            return l.interval
                .sort((a, b) => a.interval - b.interval)
                .some(({ interval, exclusive }, index, array) => {
                var _a, _b, _c, _d;
                if (exclusive && index == 0) {
                    return ((_a = year - l.offset) !== null && _a !== void 0 ? _a : 0) % interval != 0;
                }
                if (exclusive)
                    return;
                if (array[index + 1] && array[index + 1].exclusive) {
                    return (((_b = year - l.offset) !== null && _b !== void 0 ? _b : 0) % interval == 0 &&
                        ((_c = year - l.offset) !== null && _c !== void 0 ? _c : 0) %
                            array[index + 1].interval !=
                            0);
                }
                return ((_d = year - l.offset) !== null && _d !== void 0 ? _d : 0) % interval == 0;
            });
        });
    }
    leapDaysForMonth(month, year = this.displayed.year) {
        return this.leapdays
            .filter((l) => l.timespan == month.number)
            .filter((l) => {
            return l.interval
                .sort((a, b) => a.interval - b.interval)
                .some(({ interval, exclusive }, index, array) => {
                var _a, _b, _c, _d;
                if (exclusive && index == 0) {
                    return ((_a = year - l.offset) !== null && _a !== void 0 ? _a : 0) % interval != 0;
                }
                if (exclusive)
                    return;
                if (array[index + 1] && array[index + 1].exclusive) {
                    return (((_b = year - l.offset) !== null && _b !== void 0 ? _b : 0) % interval == 0 &&
                        ((_c = year - l.offset) !== null && _c !== void 0 ? _c : 0) %
                            array[index + 1].interval !=
                            0);
                }
                return ((_d = year - l.offset) !== null && _d !== void 0 ? _d : 0) % interval == 0;
            });
        });
    }
    getMonth(number, year, direction = 0) {
        const months = this.data.months;
        let index = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.wrap)(number, months.length);
        if (number < 0)
            year -= 1;
        if (year == 0)
            return null;
        if (number >= months.length)
            year += 1;
        if (months[index].type == "intercalary" && direction != 0) {
            return this.getMonth(number + direction, year, direction);
        }
        return new MonthHelper(months[index], index, year, this);
    }
    getPaddedDaysForMonth(month) {
        let current = month.days;
        /** Get Days of Previous Month */
        let previous = [];
        const previousMonth = this.getMonth(month.index - 1, this.displayed.year, -1);
        if (month.firstWeekday > 0 && month.type == "month") {
            previous =
                previousMonth != null
                    ? previousMonth.days.slice(-month.firstWeekday)
                    : Array(month.firstWeekday).fill(null);
        }
        /** Get Days of Next Month */
        let next = [];
        const nextMonth = this.getMonth(month.index + 1, this.displayed.year, 1);
        if (month.lastWeekday < this.weekdays.length - 1 &&
            month.type == "month") {
            next = nextMonth.days.slice(0, this.weekdays.length - month.lastWeekday - 1);
        }
        return {
            previous,
            current,
            next
        };
    }
    get paddedDays() {
        return this.getPaddedDaysForMonth(this.currentMonth);
    }
    /**
     *
     * Returns the rounded up number of weeks of the current month. Use to build calendar rows.
     * @readonly
     * @memberof Calendar
     */
    get weeksPerCurrentMonth() {
        return Math.ceil(this.getMonth(this.displayed.month, this.displayed.year).length /
            this.data.weekdays.length);
    }
    weeksOfMonth(month) {
        return Math.ceil((month.length + month.firstWeekday) / this.data.weekdays.length);
    }
    weekNumbersOfMonth(month) {
        const daysBefore = month.daysBefore + this.firstDayOfYear(month.year);
        return Math.floor(daysBefore / this.data.weekdays.length);
    }
    /**
     * Total number of days in a year.
     *
     * @readonly
     * @memberof Calendar
     */
    get daysPerYear() {
        return this.data.months
            .filter((m) => m.type === "month")
            .reduce((a, b) => a + b.length, 0);
    }
    daysBeforeMonth(month, all = false) {
        if (!month)
            return 0;
        if (month.number == 0) {
            return 0;
        }
        const months = this.getMonthsForYear(month.year);
        const filtered = all ? months : months.filter((m) => m.type == "month");
        const index = filtered.find((m) => m.data.id == month.data.id);
        return filtered
            .slice(0, filtered.indexOf(index))
            .reduce((a, b) => a + b.length, 0);
    }
    areDatesEqual(date, date2) {
        if (date.day != date2.day)
            return false;
        if (date.month != date2.month &&
            date.month != undefined &&
            date2.month != undefined)
            return false;
        if (date.year != date2.year &&
            date.year != undefined &&
            date2.year != undefined)
            return false;
        return true;
    }
    daysBeforeDate(date) {
        const daysBeforeYear = this.daysBeforeYear(date.year);
        const daysBeforeMonth = this.daysBeforeMonth(this.getMonth(date.month, date.year), true);
        return daysBeforeYear + daysBeforeMonth + date.day;
    }
    dayNumberForDate(date) {
        return (this.daysBeforeMonth(this.getMonth(date.month, date.year), true) +
            date.day);
    }
    get firstWeekday() {
        return this.data.firstWeekDay;
    }
    /**
     *
     * Total number of leap days that have occured before this year.
     * @readonly
     * @memberof CalendarHelper
     */
    get leapDaysBefore() {
        if (this.displayed.year == 1)
            return 0;
        return [...Array(this.displayed.year - 1).keys()]
            .map((k) => this.leapDaysForYear(k + 1))
            .reduce((a, b) => a + b.length, 0);
    }
    leapDaysBeforeYear(year) {
        if (year == 1)
            return 0;
        return [...Array(year - 1).keys()]
            .map((k) => this.leapDaysForYear(k + 1))
            .reduce((a, b) => a + b.length, 0);
    }
    get daysBefore() {
        return this.daysBeforeYear(this.displayed.year);
    }
    get totalDaysBefore() {
        return this.daysBefore + this.leapDaysBefore;
    }
    daysBeforeYear(year) {
        if (year < 1)
            return 0;
        return Math.abs(year - 1) * this.daysPerYear;
    }
    totalDaysBeforeYear(year, all = false) {
        if (year < 1)
            return 0;
        return (Math.abs(year - 1) *
            this.data.months
                .filter((m) => all || m.type == "month")
                .reduce((a, b) => a + b.length, 0) +
            this.leapDaysBeforeYear(year));
    }
    firstDayOfYear(year = this.displayed.year) {
        var _a;
        if (!this.data.overflow)
            return 0;
        if (year == 1)
            return this.firstWeekday;
        //note: added 1 here to fix gregorian offset??
        return (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.wrap)((this.totalDaysBeforeYear(year) % this.data.weekdays.length) +
            this.firstWeekday +
            ((_a = this.data.offset) !== null && _a !== void 0 ? _a : 0), this.data.weekdays.length);
    }
    /** Moons */
    get moons() {
        return this.data.moons;
    }
    getMoonsForDate(date) {
        const phases = [];
        const month = this.getMonth(date.month, date.year);
        const day = month.days[date.day - 1];
        const daysBefore = this.totalDaysBeforeYear(date.year, true) +
            this.daysBeforeMonth(month, true) +
            day.number -
            1;
        for (let moon of this.moons) {
            const { offset, cycle } = moon;
            const granularity = 24;
            let data = (daysBefore - offset) / cycle;
            let position = data - Math.floor(data);
            const phase = (position * granularity) % granularity;
            const options = src_utils_constants__WEBPACK_IMPORTED_MODULE_1__.MOON_PHASES[granularity];
            phases.push([
                moon,
                options[(0,src_utils_functions__WEBPACK_IMPORTED_MODULE_2__.wrap)(Math.round(phase), options.length)]
            ]);
        }
        return phases;
    }
}


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MODIFIER_KEY": () => (/* binding */ MODIFIER_KEY),
/* harmony export */   "DEFAULT_CALENDAR": () => (/* binding */ DEFAULT_CALENDAR),
/* harmony export */   "DEFAULT_DATA": () => (/* binding */ DEFAULT_DATA),
/* harmony export */   "default": () => (/* binding */ FantasyCalendar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _settings_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings/settings */ "./src/settings/settings.ts");
/* harmony import */ var _view_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view/view */ "./src/view/view.ts");
/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./main.css */ "./src/main.css");
/* harmony import */ var _watcher_watcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./watcher/watcher */ "./src/watcher/watcher.ts");






const MODIFIER_KEY = obsidian__WEBPACK_IMPORTED_MODULE_0__.Platform.isMacOS ? "Meta" : "Control";
const DEFAULT_CALENDAR = {
    name: null,
    description: null,
    id: null,
    static: {
        incrementDay: false,
        firstWeekDay: null,
        overflow: true,
        weekdays: [],
        months: [],
        moons: [],
        displayMoons: true,
        displayDayNumber: false,
        leapDays: [],
        eras: []
    },
    current: {
        year: 1,
        month: null,
        day: null
    },
    events: [],
    categories: []
};
const DEFAULT_DATA = {
    calendars: [],
    currentCalendar: null,
    defaultCalendar: null,
    eventPreview: false,
    configDirectory: null,
    path: "/",
    parseDates: false,
    dateFormat: "YYYY-MM-DD",
    dailyNotes: false,
    version: {
        major: null,
        minor: null,
        patch: null
    }
};
class FantasyCalendar extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Plugin {
    constructor() {
        super(...arguments);
        this.watcher = new _watcher_watcher__WEBPACK_IMPORTED_MODULE_4__.Watcher(this);
    }
    addNewCalendar(calendar) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.data.calendars.push(Object.assign({}, calendar));
            if (!this.data.defaultCalendar) {
                this.data.defaultCalendar = calendar.id;
            }
            yield this.saveCalendar();
            this.watcher.registerCalendar(calendar);
        });
    }
    get currentCalendar() {
        return this.data.calendars.find((c) => c.id == this.data.currentCalendar);
    }
    get canUseDailyNotes() {
        return this.dailyNotes._loaded;
    }
    get dailyNotes() {
        return this.app.internalPlugins.getPluginById("daily-notes");
    }
    get format() {
        var _a;
        return ((_a = (this.data.dailyNotes && this.canUseDailyNotes
            ? this.dailyNotes.instance.options.format
            : this.data.dateFormat)) !== null && _a !== void 0 ? _a : "YYYY-MM-DD");
    }
    get defaultCalendar() {
        var _a;
        return ((_a = this.data.calendars.find((c) => c.id == this.data.defaultCalendar)) !== null && _a !== void 0 ? _a : this.data.calendars[0]);
    }
    get view() {
        const leaves = this.app.workspace.getLeavesOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__.VIEW_TYPE);
        const leaf = leaves.length ? leaves[0] : null;
        if (leaf && leaf.view && leaf.view instanceof _view_view__WEBPACK_IMPORTED_MODULE_2__["default"])
            return leaf.view;
    }
    get full() {
        const leaves = this.app.workspace.getLeavesOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__.FULL_VIEW);
        const leaf = leaves.length ? leaves[0] : null;
        if (leaf && leaf.view && leaf.view instanceof _view_view__WEBPACK_IMPORTED_MODULE_2__["default"])
            return leaf.view;
    }
    onload() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            console.log("Loading Fantasy Calendars v" + this.manifest.version);
            yield this.loadSettings();
            this.watcher.load();
            this.addSettingTab(new _settings_settings__WEBPACK_IMPORTED_MODULE_1__["default"](this));
            this.registerView(_view_view__WEBPACK_IMPORTED_MODULE_2__.VIEW_TYPE, (leaf) => new _view_view__WEBPACK_IMPORTED_MODULE_2__["default"](this, leaf));
            this.app.workspace.onLayoutReady(() => this.addCalendarView(true));
            this.addRibbonIcon(_view_view__WEBPACK_IMPORTED_MODULE_2__.VIEW_TYPE, "Open Large Fantasy Calendar", (evt) => {
                this.app.workspace
                    .getLeaf(evt.getModifierState(MODIFIER_KEY))
                    .setViewState({ type: _view_view__WEBPACK_IMPORTED_MODULE_2__.FULL_VIEW });
            });
            this.registerView(_view_view__WEBPACK_IMPORTED_MODULE_2__.FULL_VIEW, (leaf) => {
                return new _view_view__WEBPACK_IMPORTED_MODULE_2__["default"](this, leaf, { full: true });
            });
            this.addCommand({
                id: "open-fantasy-calendar",
                name: "Open Fantasy Calendar",
                callback: () => {
                    this.addCalendarView();
                }
            });
            this.addCommand({
                id: "open-big-fantasy-calendar",
                name: "Open Large Fantasy Calendar",
                callback: () => {
                    this.addFullCalendarView();
                }
            });
            this.addCommand({
                id: "toggle-moons",
                name: "Toggle Moons",
                checkCallback: (checking) => {
                    const view = this.app.workspace.getActiveViewOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__["default"]);
                    if (view) {
                        if (!checking) {
                            view.toggleMoons();
                        }
                        return true;
                    }
                }
            });
        });
    }
    onunload() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            console.log("Unloading Fantasy Calendars v" + this.manifest.version);
            this.app.workspace
                .getLeavesOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__.VIEW_TYPE)
                .forEach((leaf) => leaf.detach());
            this.app.workspace
                .getLeavesOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__.FULL_VIEW)
                .forEach((leaf) => leaf.detach());
            this.watcher.unload();
        });
    }
    addCalendarView(startup = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (startup && this.app.workspace.getLeavesOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__.VIEW_TYPE).length)
                return;
            yield this.app.workspace.getRightLeaf(false).setViewState({
                type: _view_view__WEBPACK_IMPORTED_MODULE_2__.VIEW_TYPE
            });
            if (this.view)
                this.app.workspace.revealLeaf(this.view.leaf);
        });
    }
    addFullCalendarView(startup = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (startup && this.app.workspace.getLeavesOfType(_view_view__WEBPACK_IMPORTED_MODULE_2__.FULL_VIEW).length)
                return;
            this.app.workspace.getLeaf(false).setViewState({ type: _view_view__WEBPACK_IMPORTED_MODULE_2__.FULL_VIEW });
            if (this.full)
                this.app.workspace.revealLeaf(this.full.leaf);
        });
    }
    loadSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.data = Object.assign(Object.assign({}, DEFAULT_DATA), (yield this.loadData()));
            if (this.configDirectory &&
                (yield this.app.vault.adapter.exists(this.configFilePath))) {
                this.data = Object.assign({}, this.data, JSON.parse(yield this.app.vault.adapter.read(this.configFilePath)));
            }
            if (!this.data.defaultCalendar && this.data.calendars.length) {
                this.data.defaultCalendar = this.data.calendars[0].id;
            }
            /* if ((this.data.version?.major ?? 0) < 2 && this.data.calendars.length) {
                new Notice(
                    "Fantasy Calendar can now parse note titles for events. See the ReadMe for more info!"
                );
            }
            const version = this.manifest.version.split(".").map((v) => Number(v));
            this.data.version = {
                major: version[0],
                minor: version[1],
                patch: version[2]
            }; */
        });
    }
    saveCalendar() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            yield this.saveSettings();
            this.app.workspace.trigger("fantasy-calendars-updated");
        });
    }
    get configDirectory() {
        if (!this.data || !this.data.configDirectory)
            return;
        return `${this.data.configDirectory}/plugins/fantasy-calendar`;
    }
    get configFilePath() {
        if (!this.data.configDirectory)
            return;
        return `${this.configDirectory}/data.json`;
    }
    saveSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.saveData(this.data);
        });
    }
    saveData(data) {
        const _super = Object.create(null, {
            saveData: { get: () => super.saveData }
        });
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.configDirectory) {
                try {
                    if (!(yield this.app.vault.adapter.exists(this.configDirectory))) {
                        yield this.app.vault.adapter.mkdir(this.configDirectory);
                    }
                    yield this.app.vault.adapter.write(this.configFilePath, JSON.stringify(data));
                }
                catch (e) {
                    console.error(e);
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("There was an error saving into the configured directory.");
                }
            }
            yield _super.saveData.call(this, data);
        });
    }
}


/***/ }),

/***/ "./src/settings/import/importer.ts":
/*!*****************************************!*\
  !*** ./src/settings/import/importer.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Import)
/* harmony export */ });
/* harmony import */ var distinct_colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! distinct-colors */ "./node_modules/distinct-colors/lib/index.js");
/* harmony import */ var _utils_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var he__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! he */ "./node_modules/he/he.js");
/* harmony import */ var he__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(he__WEBPACK_IMPORTED_MODULE_2__);



class Import {
    static import(objects) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
        const calendars = [];
        for (let data of objects) {
            const name = (_a = data.name) !== null && _a !== void 0 ? _a : "Imported Calendar";
            const static_data = data.static_data;
            if (!static_data)
                continue;
            const year_data = static_data.year_data;
            if (!year_data)
                continue;
            const firstWeekDay = (_b = year_data.first_day - 1) !== null && _b !== void 0 ? _b : 0;
            const overflow = (_c = year_data.overflow) !== null && _c !== void 0 ? _c : true;
            const global_week = year_data.global_week;
            if (!global_week)
                continue;
            const weekdays = global_week.map((n) => {
                return {
                    type: "day",
                    name: n,
                    id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6)
                };
            });
            const timespans = year_data.timespans;
            if (!timespans)
                continue;
            /*             const month_spans = timespans.filter((t: any) => t.type == "month");

            if (!month_spans || !month_spans.length) continue; */
            const months = timespans.map((m) => {
                return {
                    name: (0,he__WEBPACK_IMPORTED_MODULE_2__.decode)(m.name),
                    type: m.type,
                    length: m.length,
                    id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6)
                };
            });
            const avgLength = months.reduce((a, b) => {
                if (b.type == "month") {
                    return a + b.length;
                }
                return a;
            }, 0);
            const leapDays = [];
            if ("leap_days" in year_data) {
                for (let leap of year_data["leap_days"]) {
                    //build interval
                    const interval = (_d = leap.interval.split(",")) !== null && _d !== void 0 ? _d : [
                        "1"
                    ];
                    const intervals = interval.map((i) => {
                        const ignore = /\+/.test(i);
                        const exclusive = /\!/.test(i);
                        const interval = i.match(/(\d+)/).first();
                        return {
                            ignore,
                            exclusive,
                            interval: Number(interval)
                        };
                    });
                    leapDays.push({
                        name: (_e = leap.name) !== null && _e !== void 0 ? _e : `Leap Day ${leapDays.length + 1}`,
                        type: "leapday",
                        interval: intervals,
                        timespan: (_f = leap.timespan) !== null && _f !== void 0 ? _f : 0,
                        intercalary: (_g = leap.intercalary) !== null && _g !== void 0 ? _g : false,
                        offset: (_h = leap.offset) !== null && _h !== void 0 ? _h : 0,
                        id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6)
                    });
                }
            }
            const moons = [];
            if ("moons" in static_data) {
                for (let moon of static_data["moons"]) {
                    moons.push({
                        name: (_j = moon.name) !== null && _j !== void 0 ? _j : `Moon ${moons.length + 1}`,
                        cycle: (_k = Number(moon.cycle)) !== null && _k !== void 0 ? _k : avgLength,
                        offset: (_l = moon.shift) !== null && _l !== void 0 ? _l : 0,
                        faceColor: (_m = moon.color) !== null && _m !== void 0 ? _m : "#ffffff",
                        shadowColor: (_o = moon.shadow_color) !== null && _o !== void 0 ? _o : "#000000",
                        id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6)
                    });
                }
            }
            const eras = [];
            if ("eras" in static_data) {
                for (let era of static_data["eras"]) {
                    eras.push({
                        name: (_p = era.name) !== null && _p !== void 0 ? _p : `Era ${eras.length + 1}`,
                        description: era.description,
                        format: (_q = era.formatting) !== null && _q !== void 0 ? _q : "Year {{year}} - {{era_name}}",
                        start: {
                            year: (_s = (_r = era.date) === null || _r === void 0 ? void 0 : _r.year) !== null && _s !== void 0 ? _s : 1,
                            month: (_u = (_t = era.date) === null || _t === void 0 ? void 0 : _t.timespan) !== null && _u !== void 0 ? _u : 0,
                            day: (_w = (_v = era.date) === null || _v === void 0 ? void 0 : _v.day) !== null && _w !== void 0 ? _w : 0
                        }
                    });
                }
            }
            const staticData = {
                firstWeekDay,
                overflow,
                weekdays,
                months,
                moons,
                leapDays,
                eras,
                displayMoons: true,
                incrementDay: false,
                displayDayNumber: false
            };
            const dynamicData = {
                year: 1,
                day: 1,
                month: 0
            };
            if (data.dynamic_data) {
                dynamicData.year = (_x = data.dynamic_data.year) !== null && _x !== void 0 ? _x : dynamicData.year;
                dynamicData.day = (_y = data.dynamic_data.day) !== null && _y !== void 0 ? _y : dynamicData.day;
                dynamicData.month =
                    (_z = data.dynamic_data.month) !== null && _z !== void 0 ? _z : dynamicData.month;
            }
            const events = [];
            const existingCategories = new Map();
            if ("categories" in data) {
                for (let category of data.categories) {
                    const name = category.name;
                    const id = (_0 = name === null || name === void 0 ? void 0 : name.split(" ").join("-").toLowerCase()) !== null && _0 !== void 0 ? _0 : (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6);
                    let color = category.event_settings.color;
                    if (!(color in FantasyCalendarColorMap)) {
                        color = color.split("-").join("");
                        const canvas = createEl("canvas");
                        const ctx = canvas.getContext("2d");
                        ctx.fillStyle = color;
                        color = ctx.fillStyle;
                        canvas.detach();
                    }
                    else {
                        color = FantasyCalendarColorMap[color];
                    }
                    existingCategories.set(id, { name, id, color });
                }
            }
            if (data.events &&
                Array.isArray(data.events) &&
                data.events.length) {
                for (let event of data.events) {
                    const date = {
                        day: null,
                        year: null,
                        month: null
                    };
                    if (event.data &&
                        event.data.date &&
                        Array.isArray((_1 = event.data) === null || _1 === void 0 ? void 0 : _1.date) &&
                        event.data.date.length) {
                        date.day = event.data.date[2];
                        date.month = event.data.date[1];
                        date.year = event.data.date[0];
                    }
                    else if (event.data &&
                        event.data.conditions &&
                        Array.isArray(event.data.conditions)) {
                        const conditions = event.data.conditions;
                        try {
                            const year = conditions.find((c) => c[0] === "Year");
                            const month = conditions.find((c) => c[0] === "Month");
                            const day = conditions.find((c) => c[0] === "Day");
                            if (year) {
                                date.year = Number(year[2][0]);
                            }
                            if (month) {
                                date.month = Number(month[2][0]);
                            }
                            if (day) {
                                date.day = Number(day[2][0]);
                            }
                        }
                        catch (e) { }
                    }
                    let description;
                    if (event.description) {
                        const descriptionEl = createDiv();
                        descriptionEl.innerHTML = event.description;
                        description = descriptionEl.textContent;
                    }
                    events.push({
                        name: event.name,
                        description: description,
                        id: event.id,
                        note: null,
                        date,
                        category: (_3 = (_2 = existingCategories.get(event.event_category_id)) === null || _2 === void 0 ? void 0 : _2.id) !== null && _3 !== void 0 ? _3 : null
                    });
                }
            }
            const colors = (0,distinct_colors__WEBPACK_IMPORTED_MODULE_0__["default"])({
                count: existingCategories.size
            });
            for (let id of existingCategories.keys()) {
                const category = existingCategories.get(id);
                if (category.color)
                    continue;
                category.color = colors.shift().hex();
                existingCategories.set(id, category);
            }
            const calendarData = {
                name,
                description: null,
                static: staticData,
                current: dynamicData,
                events,
                id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6),
                categories: Array.from(existingCategories.values())
            };
            calendars.push(calendarData);
        }
        return calendars;
    }
}
const FantasyCalendarColorMap = {
    "Dark-Solid": "#000000",
    Red: "#9b2c2c",
    Pink: "#880E4F",
    Purple: "#4A148C",
    "Deep-Purple": "#311B92",
    Blue: "#0D47A1",
    "Light-Blue": "#0288D1",
    Cyan: "#006064",
    Teal: "#004D40",
    Green: "#2E7D32",
    "Light-Green": "#7CB342",
    Lime: "#9e9d24",
    Yellow: "#FFEB3B",
    Orange: "#FF9100",
    "Blue-Grey": "#455A64"
};


/***/ }),

/***/ "./src/settings/modals/confirm.ts":
/*!****************************************!*\
  !*** ./src/settings/modals/confirm.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "confirmWithModal": () => (/* binding */ confirmWithModal),
/* harmony export */   "ConfirmModal": () => (/* binding */ ConfirmModal)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);


function confirmWithModal(app, text, buttons = {
    cta: "Yes",
    secondary: "No"
}) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const modal = new ConfirmModal(app, text, buttons);
            modal.onClose = () => {
                resolve(modal.confirmed);
            };
            modal.open();
        });
    });
}
class ConfirmModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(app, text, buttons) {
        super(app);
        this.text = text;
        this.buttons = buttons;
        this.confirmed = false;
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            new Promise((resolve) => {
                this.contentEl.empty();
                this.contentEl.addClass("confirm-modal");
                this.contentEl.createEl("p", {
                    text: this.text
                });
                const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl)
                    .setButtonText(this.buttons.cta)
                    .setCta()
                    .onClick(() => {
                    this.confirmed = true;
                    this.close();
                });
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl)
                    .setButtonText(this.buttons.secondary)
                    .onClick(() => {
                    this.close();
                });
            });
        });
    }
    onOpen() {
        this.display();
    }
}


/***/ }),

/***/ "./src/settings/modals/event.ts":
/*!**************************************!*\
  !*** ./src/settings/modals/event.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateEventModal": () => (/* binding */ CreateEventModal)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var _suggester_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../suggester/path */ "./src/suggester/path.ts");




class CreateEventModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(app, calendar, event, date) {
        super(app);
        this.calendar = calendar;
        this.saved = false;
        this.event = {
            name: null,
            description: null,
            date: {
                month: null,
                day: null,
                year: null
            },
            id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6),
            note: null,
            category: null
        };
        if (event) {
            this.event = Object.assign({}, event);
            this.editing = true;
        }
        if (date) {
            this.event.date = Object.assign({}, date);
        }
        this.containerEl.addClass("fantasy-calendar-create-event");
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h3", {
                text: this.editing ? "Edit Event" : "New Event"
            });
            this.infoEl = this.contentEl.createDiv("event-info");
            this.buildInfo();
            this.dateEl = this.contentEl.createDiv("event-date");
            this.buildDate();
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
                .addButton((b) => {
                b.setButtonText("Save")
                    .setCta()
                    .onClick(() => {
                    var _a, _b, _c, _d, _e, _f;
                    if (!((_a = this.event.name) === null || _a === void 0 ? void 0 : _a.length)) {
                        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The event must have a name.");
                        return;
                    }
                    if (this.event.end) {
                        this.event.end = {
                            year: (_b = this.event.end.year) !== null && _b !== void 0 ? _b : this.event.date.year,
                            month: (_c = this.event.end.month) !== null && _c !== void 0 ? _c : this.event.date.month,
                            day: (_d = this.event.end.day) !== null && _d !== void 0 ? _d : this.event.date.day
                        };
                        const date = this.event.date;
                        const end = this.event.end;
                        const maxDays = Math.max(...this.calendar.static.months.map((m) => m.length));
                        // total days per year (does not need to be accurate)
                        const totalDays = maxDays * this.calendar.static.months.length;
                        const dateNumber = (date.year - 1) * totalDays +
                            ((_e = date.month) !== null && _e !== void 0 ? _e : -1) * maxDays +
                            date.day;
                        const endNumber = (end.year - 1) * totalDays +
                            ((_f = end.month) !== null && _f !== void 0 ? _f : -1) * maxDays +
                            end.day;
                        if (dateNumber > endNumber) {
                            const temp = Object.assign({}, this.event.end);
                            this.event.end = Object.assign({}, this.event.date);
                            this.event.date = Object.assign({}, temp);
                        }
                    }
                    this.saved = true;
                    this.close();
                });
            })
                .addExtraButton((b) => {
                b.setIcon("cross")
                    .setTooltip("Cancel")
                    .onClick(() => this.close());
            });
        });
    }
    buildDate() {
        this.dateEl.empty();
        this.buildStartDate();
        this.endEl = this.dateEl.createDiv();
        if (!this.event.end) {
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.endEl).setName("Add End Date").addToggle((t) => {
                t.setValue(false).onChange((v) => this.buildEndDate());
            });
        }
        else {
            this.buildEndDate();
        }
        /* this.buildDateFields(this.endDateEl); */
        this.stringEl = this.dateEl.createDiv("event-date-string setting-item-description");
        this.buildDateString();
    }
    buildStartDate() {
        this.startEl = this.dateEl.createDiv("fantasy-calendar-event-date");
        this.startEl.createSpan({ text: "Start:" });
        this.startDateEl = this.startEl.createDiv("fantasy-calendar-date-fields");
        this.buildDateFields(this.startDateEl, this.event.date);
    }
    buildEndDate() {
        var _a;
        this.event.end = (_a = this.event.end) !== null && _a !== void 0 ? _a : Object.assign({}, this.event.date);
        this.endEl.empty();
        this.endEl.addClass("fantasy-calendar-event-date");
        this.endEl.createSpan({ text: "End:" });
        this.endDateEl = this.endEl.createDiv("fantasy-calendar-date-fields");
        this.buildDateFields(this.endDateEl, this.event.end);
    }
    buildDateString() {
        this.stringEl.empty();
        this.stringEl.createSpan({
            text: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.dateString)(this.event.date, this.calendar.static.months, this.event.end)
        });
    }
    buildDateFields(el, field = this.event.date) {
        el.empty();
        const dayEl = el.createDiv("fantasy-calendar-date-field");
        dayEl.createEl("label", { text: "Day" });
        const day = new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextComponent(dayEl)
            .setPlaceholder("Day")
            .setValue(`${field.day}`)
            .onChange((v) => {
            field.day = Number(v);
            this.buildDateString();
        });
        day.inputEl.setAttr("type", "number");
        const monthEl = el.createDiv("fantasy-calendar-date-field");
        monthEl.createEl("label", { text: "Month" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.DropdownComponent(monthEl)
            .addOptions(Object.fromEntries([
            ["select", "Select Month"],
            ...this.calendar.static.months.map((month) => [
                month.name,
                month.name
            ])
        ]))
            .setValue(field.month != undefined
            ? this.calendar.static.months[field.month].name
            : "select")
            .onChange((v) => {
            if (v === "select")
                field.month = null;
            const index = this.calendar.static.months.find((m) => m.name == v);
            field.month = this.calendar.static.months.indexOf(index);
            this.buildDateString();
        });
        const yearEl = el.createDiv("fantasy-calendar-date-field");
        yearEl.createEl("label", { text: "Year" });
        const year = new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextComponent(yearEl)
            .setPlaceholder("Year")
            .setValue(`${field.year}`)
            .onChange((v) => {
            if (!v || v == undefined) {
                field.year = undefined;
            }
            else {
                field.year = Number(v);
            }
            this.buildDateString();
        });
        year.inputEl.setAttr("type", "number");
    }
    buildInfo() {
        this.infoEl.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Note")
            .setDesc("Link the event to a note.")
            .addText((text) => {
            let files = this.app.vault.getFiles();
            text.setPlaceholder("Path");
            if (this.event.note) {
                const note = this.app.vault.getAbstractFileByPath(this.event.note);
                if (note && note instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFile) {
                    text.setValue(note.basename);
                }
            }
            const modal = new _suggester_path__WEBPACK_IMPORTED_MODULE_2__["default"](this.app, text, [
                ...files
            ]);
            modal.onClose = () => (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
                text.inputEl.blur();
                this.event.note = modal.file.path;
                this.tryParse(modal.file);
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl).setName("Event Name").addText((t) => t
            .setPlaceholder("Event Name")
            .setValue(this.event.name)
            .onChange((v) => {
            this.event.name = v;
        }));
        const descriptionEl = this.infoEl.createDiv("event-description");
        descriptionEl.createEl("label", { text: "Event Description" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextAreaComponent(descriptionEl)
            .setPlaceholder("Event Description")
            .setValue(this.event.description)
            .onChange((v) => {
            this.event.description = v;
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl).setName("Event Category").addDropdown((d) => {
            const options = Object.fromEntries(this.calendar.categories.map((category) => {
                return [category.id, category.name];
            }));
            d.addOptions(options)
                .setValue(this.event.category)
                .onChange((v) => (this.event.category = v));
        });
    }
    tryParse(/* note: string,  */ file) {
        var _a, _b, _c, _d, _e;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            this.event.name = file.basename;
            const cache = this.app.metadataCache.getFileCache(file);
            const { frontmatter } = cache;
            if (frontmatter) {
                if ("fc-date" in frontmatter) {
                    const { day, month, year } = frontmatter["fc-date"];
                    if (day)
                        this.event.date.day = day;
                    if (month) {
                        if (typeof month === "string") {
                            const indexer = (_b = (_a = this.calendar.static.months) === null || _a === void 0 ? void 0 : _a.find((m) => m.name == month)) !== null && _b !== void 0 ? _b : (_c = this.calendar.static.months) === null || _c === void 0 ? void 0 : _c[0];
                            this.event.date.month =
                                (_d = this.calendar.static.months) === null || _d === void 0 ? void 0 : _d.indexOf(indexer);
                        }
                        if (typeof month == "number") {
                            this.event.date.month = month - 1;
                        }
                    }
                    if (year)
                        this.event.date.year = year;
                }
                if ("fc-category" in frontmatter) {
                    if (!this.calendar.categories.find((c) => c.name === frontmatter["fc-category"])) {
                        this.calendar.categories.push({
                            name: frontmatter["fantasy-category"],
                            color: "#808080",
                            id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6)
                        });
                    }
                    this.event.category = (_e = this.calendar.categories.find((c) => c.name === frontmatter["fc-category"])) === null || _e === void 0 ? void 0 : _e.id;
                }
            }
            yield this.display();
        });
    }
    onOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            yield this.display();
        });
    }
}


/***/ }),

/***/ "./src/settings/modals/leapday.ts":
/*!****************************************!*\
  !*** ./src/settings/modals/leapday.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateLeapDayModal": () => (/* binding */ CreateLeapDayModal)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/functions */ "./src/utils/functions.ts");



class CreateLeapDayModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(app, calendar, leapday) {
        super(app);
        this.calendar = calendar;
        this.saved = false;
        this.leapday = {
            id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6),
            name: "Leap Day",
            interval: [],
            intercalary: false,
            timespan: null,
            offset: 0,
            type: "leapday"
        };
        if (leapday) {
            this.leapday = Object.assign({}, leapday);
            this.editing = true;
        }
        this.containerEl.addClass("fantasy-calendar-create-leapday");
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h3", {
                text: this.editing ? "Edit Leap Day" : "New Leap Day"
            });
            this.infoEl = this.contentEl.createDiv("leapday-info");
            this.buildInfo();
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
                .addButton((b) => {
                b.setButtonText("Save")
                    .setCta()
                    .onClick(() => {
                    if (!this.leapday.interval.length) {
                        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The leap day must have an interval.");
                        return;
                    }
                    if (this.leapday.timespan == undefined) {
                        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The leap day must be attached to a Month.");
                        return;
                    }
                    this.saved = true;
                    this.close();
                });
            })
                .addExtraButton((b) => {
                b.setIcon("cross")
                    .setTooltip("Cancel")
                    .onClick(() => this.close());
            });
        });
    }
    buildInfo() {
        this.infoEl.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl).setName("Name").addText((t) => {
            t.setValue(this.leapday.name).onChange((v) => {
                this.leapday.name = v;
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Month")
            .setDesc("The leap day will be added to this month.")
            .addDropdown((d) => {
            for (let month of this.calendar.static.months) {
                const index = this.calendar.static.months.indexOf(month);
                d.addOption(`${index}`, month.name);
            }
            d.setValue(`${this.leapday.timespan}`).onChange((v) => (this.leapday.timespan = Number(v)));
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Offset")
            .setDesc("Shift the years the leap day is applied to.")
            .addText((t) => {
            t.inputEl.setAttr("type", "number");
            t.setValue(`${this.leapday.offset}`).onChange((v) => {
                if (isNaN(Number(v)))
                    return;
                this.leapday.offset = Number(v);
            });
        });
        this.conditionsEl = this.infoEl.createDiv();
        this.buildConditions();
    }
    buildConditions() {
        this.conditionsEl.empty();
        const b = new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(this.conditionsEl)
            .setTooltip("Add New")
            .setButtonText("+")
            .onClick(() => (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modal = new IntervalModal(this.app, this.intervals.length > 0);
            modal.onClose = () => {
                if (!modal.saved)
                    return;
                this.leapday.interval.push(modal.condition);
                this.buildConditions();
            };
            modal.open();
        }));
        b.buttonEl.style.width = "100%";
        this.conditionsEl.createSpan({
            text: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.getIntervalDescription)(this.leapday),
            cls: "fantasy-leap-day-interval-description setting-item"
        });
        for (let interval of this.intervals) {
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.conditionsEl)
                .setName(this.getIntervalName(interval))
                .addExtraButton((b) => {
                b.setIcon("pencil")
                    .setTooltip("Edit")
                    .onClick(() => {
                    const modal = new IntervalModal(this.app, this.intervals.indexOf(interval) != 0, interval);
                    modal.onClose = () => {
                        if (!modal.saved)
                            return;
                        this.leapday.interval.splice(this.leapday.interval.indexOf(interval), 1, modal.condition);
                        this.buildConditions();
                    };
                    modal.open();
                });
            })
                .addExtraButton((b) => {
                b.setIcon("trash")
                    .setTooltip("Delete")
                    .onClick(() => {
                    this.leapday.interval.splice(this.leapday.interval.indexOf(interval), 1);
                    if (this.intervals.length &&
                        this.intervals[0].exclusive) {
                        this.intervals[0].exclusive = false;
                    }
                    this.buildConditions();
                });
            });
        }
    }
    get intervals() {
        return this.leapday.interval.sort((a, b) => a.interval - b.interval);
    }
    getIntervalName(interval) {
        const name = [`${interval.interval}`];
        if (interval.exclusive) {
            name.push("(Exclusive)");
        }
        if (interval.ignore) {
            name.push(" - Ignoring Offset");
        }
        return name.join(" ");
    }
    onOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            yield this.display();
        });
    }
}
class IntervalModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(app, canBeExclusive, condition) {
        super(app);
        this.app = app;
        this.canBeExclusive = canBeExclusive;
        this.saved = false;
        this.editing = false;
        this.condition = {
            interval: null,
            exclusive: false,
            ignore: false
        };
        if (condition) {
            this.condition = Object.assign({}, condition);
            this.editing = true;
        }
    }
    onOpen() {
        this.contentEl.empty();
        this.contentEl.createEl("h3", { text: "Leap Day Condition" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
            .setName("Interval")
            .setDesc("How often the condition applies.")
            .addText((t) => {
            t.inputEl.setAttr("type", "number");
            t.setValue(`${this.condition.interval}`).onChange((v) => {
                if (isNaN(Number(v)))
                    return;
                this.condition.interval = Number(v);
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
            .setName("Exclusive")
            .setDesc("If true, the leap day will not apply when the year meets the condition.\n\nRequires the leap day to have at least one non-exclusive condition.")
            .addToggle((t) => t
            .setDisabled(!this.canBeExclusive)
            .setValue(this.condition.exclusive)
            .onChange((v) => (this.condition.exclusive = v)));
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
            .setName("Ignore Offset")
            .setDesc("The condition will ignore the leap day's offset when checking to apply.")
            .addToggle((t) => t
            .setValue(this.condition.ignore)
            .onChange((v) => (this.condition.ignore = v)));
        this.buttonsEl = this.contentEl.createDiv("fantasy-context-buttons");
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(this.buttonsEl)
            .setCta()
            .setButtonText(this.editing ? "Save" : "Create")
            .onClick(() => {
            if (!this.condition.interval) {
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The condition requires an interval.");
                return;
            }
            this.saved = true;
            this.close();
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.ExtraButtonComponent(this.buttonsEl)
            .setTooltip("Cancel")
            .setIcon("cross")
            .onClick(() => this.close());
    }
}


/***/ }),

/***/ "./src/settings/modals/moons.ts":
/*!**************************************!*\
  !*** ./src/settings/modals/moons.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateMoonModal": () => (/* binding */ CreateMoonModal)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/functions */ "./src/utils/functions.ts");



class CreateMoonModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(app, calendar, moon) {
        super(app);
        this.calendar = calendar;
        this.saved = false;
        this.moon = {
            name: null,
            cycle: null,
            offset: null,
            faceColor: "#fff",
            shadowColor: "#000",
            id: (0,_utils_functions__WEBPACK_IMPORTED_MODULE_1__.nanoid)(6)
        };
        if (moon) {
            this.moon = Object.assign({}, moon);
            this.editing = true;
        }
        this.containerEl.addClass("fantasy-calendar-create-moon");
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h3", {
                text: this.editing ? "Edit Moon" : "New Moon"
            });
            this.infoEl = this.contentEl.createDiv("moon-info");
            this.buildInfo();
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
                .addButton((b) => {
                b.setButtonText("Save")
                    .setCta()
                    .onClick(() => {
                    var _a;
                    if (!((_a = this.moon.name) === null || _a === void 0 ? void 0 : _a.length)) {
                        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The moon must have a name.");
                        return;
                    }
                    if (!this.moon.cycle) {
                        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The moon must have a positive cycle.");
                        return;
                    }
                    this.saved = true;
                    this.close();
                });
            })
                .addExtraButton((b) => {
                b.setIcon("cross")
                    .setTooltip("Cancel")
                    .onClick(() => this.close());
            });
        });
    }
    buildInfo() {
        this.infoEl.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl).setName("Name").addText((t) => {
            t.setValue(this.moon.name).onChange((v) => {
                this.moon.name = v;
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Cycle")
            .setDesc("How many days it takes for the moon to complete a full cycle.")
            .addText((t) => {
            t.inputEl.setAttr("type", "number");
            t.setValue(`${this.moon.cycle}`).onChange((v) => {
                if (isNaN(Number(v)))
                    return;
                this.moon.cycle = Number(v);
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Offset")
            .setDesc("Shift the starting moon phase by a number of days.")
            .addText((t) => {
            t.inputEl.setAttr("type", "number");
            t.setValue(`${this.moon.offset}`).onChange((v) => {
                if (isNaN(Number(v)))
                    return;
                this.moon.offset = Number(v);
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl).setName("Face Color").addText((t) => {
            t.inputEl.setAttr("type", "color");
            t.setValue(this.moon.faceColor).onChange((v) => {
                this.moon.faceColor = v;
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl).setName("Shadow Color").addText((t) => {
            t.inputEl.setAttr("type", "color");
            t.setValue(this.moon.shadowColor).onChange((v) => {
                this.moon.shadowColor = v;
            });
        });
    }
    onOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            yield this.display();
        });
    }
}


/***/ }),

/***/ "./src/settings/settings.ts":
/*!**********************************!*\
  !*** ./src/settings/settings.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Recurring": () => (/* binding */ Recurring),
/* harmony export */   "default": () => (/* binding */ FantasyCalendarSettings),
/* harmony export */   "CalendarPresetModal": () => (/* binding */ CalendarPresetModal)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fast_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-copy */ "./node_modules/fast-copy/dist/fast-copy.js");
/* harmony import */ var fast_copy__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_copy__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./src/main.ts");
/* harmony import */ var _import_importer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./import/importer */ "./src/settings/import/importer.ts");
/* harmony import */ var _utils_presets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/presets */ "./src/utils/presets.ts");
/* harmony import */ var _ui_Weekdays_svelte__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/Weekdays.svelte */ "./src/settings/ui/Weekdays.svelte");
/* harmony import */ var _ui_Months_svelte__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/Months.svelte */ "./src/settings/ui/Months.svelte");
/* harmony import */ var _ui_Events_svelte__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/Events.svelte */ "./src/settings/ui/Events.svelte");
/* harmony import */ var _ui_Categories_svelte__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/Categories.svelte */ "./src/settings/ui/Categories.svelte");
/* harmony import */ var _ui_Year_svelte__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui/Year.svelte */ "./src/settings/ui/Year.svelte");
/* harmony import */ var _settings_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./settings.css */ "./src/settings/settings.css");
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");
/* harmony import */ var _modals_event__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modals/event */ "./src/settings/modals/event.ts");
/* harmony import */ var _modals_confirm__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modals/confirm */ "./src/settings/modals/confirm.ts");
/* harmony import */ var _ui_Moons_svelte__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui/Moons.svelte */ "./src/settings/ui/Moons.svelte");
/* harmony import */ var _ui_LeapDays_svelte__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui/LeapDays.svelte */ "./src/settings/ui/LeapDays.svelte");
/* harmony import */ var src_settings_modals_moons__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/settings/modals/moons */ "./src/settings/modals/moons.ts");
/* harmony import */ var _modals_leapday__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modals/leapday */ "./src/settings/modals/leapday.ts");
/* harmony import */ var src_suggester_folder__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/suggester/folder */ "./src/suggester/folder.ts");




















var Recurring;
(function (Recurring) {
    Recurring["none"] = "None";
    Recurring["monthly"] = "Monthly";
    Recurring["yearly"] = "Yearly";
})(Recurring || (Recurring = {}));
(0,obsidian__WEBPACK_IMPORTED_MODULE_0__.addIcon)("fantasy-calendar-grip", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-lines" class="svg-inline--fa fa-grip-lines fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M496 288H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-128H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"/></svg>`);
(0,obsidian__WEBPACK_IMPORTED_MODULE_0__.addIcon)("fantasy-calendar-warning", `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="exclamation-triangle" class="svg-inline--fa fa-exclamation-triangle fa-w-18" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor" d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"></path></svg>`);
class FantasyCalendarSettings extends obsidian__WEBPACK_IMPORTED_MODULE_0__.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    get data() {
        return this.plugin.data;
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.containerEl.empty();
            this.containerEl.createEl("h2", { text: "Fantasy Calendars" });
            this.containerEl.addClass("fantasy-calendar-settings");
            this.infoEl = this.containerEl.createDiv();
            this.buildInfo();
            const importSetting = new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.containerEl)
                .setName("Import Calendar")
                .setDesc("Import calendar from ");
            importSetting.descEl.createEl("a", {
                href: "https://app.fantasy-calendar.com",
                text: "Fantasy Calendar",
                cls: "external-link"
            });
            const input = createEl("input", {
                attr: {
                    type: "file",
                    name: "merge",
                    accept: ".json",
                    multiple: true,
                    style: "display: none;"
                }
            });
            input.onchange = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                const { files } = input;
                if (!files.length)
                    return;
                try {
                    const data = [];
                    for (let file of Array.from(files)) {
                        data.push(JSON.parse(yield file.text()));
                    }
                    const calendars = _import_importer__WEBPACK_IMPORTED_MODULE_3__["default"]["import"](data);
                    this.plugin.data.calendars.push(...calendars);
                    yield this.plugin.saveCalendar();
                    this.buildCalendarUI();
                }
                catch (e) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice(`There was an error while importing the calendar${files.length == 1 ? "" : "s"}.`);
                    console.error(e);
                }
                input.value = null;
            });
            importSetting.addButton((b) => {
                b.setButtonText("Choose Files");
                b.buttonEl.addClass("calendar-file-upload");
                b.buttonEl.appendChild(input);
                b.onClick(() => input.click());
            });
            this.calendarUI = this.containerEl.createDiv("fantasy-calendars");
            this.buildCalendarUI();
        });
    }
    buildInfo() {
        this.infoEl.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Default Calendar to Open")
            .setDesc("Views will open to this calendar by default.")
            .addDropdown((d) => {
            d.addOption("none", "None");
            for (let calendar of this.data.calendars) {
                d.addOption(calendar.id, calendar.name);
            }
            d.setValue(this.plugin.data.defaultCalendar);
            d.onChange((v) => {
                if (v === "none") {
                    this.plugin.data.defaultCalendar = null;
                    this.plugin.saveSettings();
                    return;
                }
                this.plugin.data.defaultCalendar = v;
                this.plugin.saveSettings();
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Display Event Previews")
            .setDesc("Use the core Note Preview plugin to display event notes when hovered.")
            .addToggle((t) => {
            t.setValue(this.data.eventPreview).onChange((v) => {
                this.data.eventPreview = v;
                this.plugin.saveSettings();
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Parse Note Titles for Dates")
            .setDesc("The plugin will parse note titles for event dates.")
            .addToggle((t) => {
            t.setValue(this.data.parseDates).onChange((v) => {
                this.data.parseDates = v;
                this.plugin.saveSettings();
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Date format")
            .setClass(this.data.dailyNotes ? "daily-notes" : "no-daily-notes")
            .setDesc(createFragment((e) => {
            e.createSpan({
                text: "Dates will be parsed per this format."
            });
            e.createEl("br");
            e.createSpan({ text: "Dates must include the " });
            e.createEl("strong", { text: "full " });
            e.createSpan({ text: "year." });
        }))
            .addText((t) => {
            t.setDisabled(this.data.dailyNotes)
                .setValue(this.plugin.format)
                .onChange((v) => {
                this.data.dateFormat = v;
                this.plugin.saveSettings();
            });
        })
            .addExtraButton((b) => {
            if (this.data.dailyNotes) {
                b.setIcon("checkmark")
                    .setTooltip("Unlink from Daily Notes")
                    .onClick(() => {
                    this.data.dailyNotes = false;
                    this.buildInfo();
                });
            }
            else {
                b.setIcon("paper-plane-glyph")
                    .setTooltip("Link with Daily Notes")
                    .onClick(() => {
                    this.data.dailyNotes = true;
                    this.buildInfo();
                });
            }
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setName("Folder to Watch")
            .setDesc("The plugin will only watch for changes in this folder.")
            .addText((text) => {
            var _a;
            let folders = this.app.vault
                .getAllLoadedFiles()
                .filter((f) => f instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFolder);
            text.setPlaceholder((_a = this.plugin.data.path) !== null && _a !== void 0 ? _a : "/");
            const modal = new src_suggester_folder__WEBPACK_IMPORTED_MODULE_18__.FolderSuggestionModal(this.app, text, [
                ...folders
            ]);
            modal.onClose = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                var _b;
                const v = ((_b = text.inputEl.value) === null || _b === void 0 ? void 0 : _b.trim())
                    ? text.inputEl.value.trim()
                    : "/";
                this.plugin.data.path = (0,obsidian__WEBPACK_IMPORTED_MODULE_0__.normalizePath)(v);
            });
            text.inputEl.onblur = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                var _c;
                const v = ((_c = text.inputEl.value) === null || _c === void 0 ? void 0 : _c.trim())
                    ? text.inputEl.value.trim()
                    : "/";
                this.plugin.data.path = (0,obsidian__WEBPACK_IMPORTED_MODULE_0__.normalizePath)(v);
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoEl)
            .setClass("fantasy-calendar-config")
            .setName(createFragment((e) => {
            (0,obsidian__WEBPACK_IMPORTED_MODULE_0__.setIcon)(e.createSpan(), "fantasy-calendar-warning");
            e.createSpan({ text: "Default Config Directory" });
        }))
            .setDesc(createFragment((e) => {
            var _a;
            e.createSpan({
                text: "Please back up your data before changing this setting. Hidden directories must be manually entered."
            });
            e.createEl("br");
            e.createSpan({
                text: `Current directory: `
            });
            const configDirectory = (_a = this.data.configDirectory) !== null && _a !== void 0 ? _a : this.app.vault.configDir;
            e.createEl("code", {
                text: configDirectory
            });
        }))
            .addText((text) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            var _a;
            let folders = this.app.vault
                .getAllLoadedFiles()
                .filter((f) => f instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFolder);
            text.setPlaceholder((_a = this.data.configDirectory) !== null && _a !== void 0 ? _a : this.app.vault.configDir);
            const modal = new src_suggester_folder__WEBPACK_IMPORTED_MODULE_18__.FolderSuggestionModal(this.app, text, [
                ...folders
            ]);
            modal.onClose = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                if (!text.inputEl.value) {
                    this.data.configDirectory = null;
                }
                else {
                    const exists = yield this.app.vault.adapter.exists(text.inputEl.value);
                    if (!exists) {
                        this.data.configDirectory = text.inputEl.value;
                        yield this.plugin.saveSettings();
                    }
                }
            });
            text.inputEl.onblur = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                if (!text.inputEl.value) {
                    return;
                }
                const exists = yield this.app.vault.adapter.exists(text.inputEl.value);
                this.data.configDirectory = text.inputEl.value;
                yield this.plugin.saveSettings();
                this.display();
            });
        }))
            .addExtraButton((b) => {
            b.setTooltip("Reset to Default")
                .setIcon("undo-glyph")
                .onClick(() => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                this.data.configDirectory = null;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
    }
    buildCalendarUI() {
        this.calendarUI.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.calendarUI)
            .setHeading()
            .setName("Add New Calendar")
            .addButton((button) => button
            .setTooltip("Add Calendar")
            .setButtonText("+")
            .onClick(() => {
            const modal = new CreateCalendarModal(this.plugin);
            modal.onClose = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                if (!modal.saved)
                    return;
                const calendar = fast_copy__WEBPACK_IMPORTED_MODULE_1___default()(modal.calendar);
                if (!calendar.current.year) {
                    calendar.current.year = 1;
                }
                yield this.plugin.addNewCalendar(calendar);
                this.showCalendars(existing);
            });
            modal.open();
        }));
        const existing = this.calendarUI.createDiv("existing-calendars");
        this.showCalendars(existing);
    }
    showCalendars(element) {
        var _a;
        element.empty();
        if (!this.data.calendars.length) {
            element.createSpan({
                text: "No calendars created! Create a calendar to see it here."
            });
            return;
        }
        for (let calendar of this.data.calendars) {
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(element)
                .setName(calendar.name)
                .setDesc((_a = calendar.description) !== null && _a !== void 0 ? _a : "")
                .addExtraButton((b) => {
                b.setIcon("pencil").onClick(() => {
                    const modal = new CreateCalendarModal(this.plugin, calendar);
                    modal.onClose = () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                        if (!modal.saved) {
                            this.showCalendars(element);
                            return;
                        }
                        this.data.calendars.splice(this.data.calendars.indexOf(calendar), 1, fast_copy__WEBPACK_IMPORTED_MODULE_1___default()(modal.calendar));
                        yield this.plugin.saveCalendar();
                        this.showCalendars(element);
                    });
                    modal.open();
                });
            })
                .addExtraButton((b) => {
                b.setIcon("trash").onClick(() => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                    if (!(yield (0,_modals_confirm__WEBPACK_IMPORTED_MODULE_13__.confirmWithModal)(this.app, "Are you sure you want to delete this calendar?", {
                        cta: "Delete",
                        secondary: "Cancel"
                    })))
                        return;
                    this.plugin.data.calendars =
                        this.plugin.data.calendars.filter((c) => c.id != calendar.id);
                    yield this.plugin.saveCalendar();
                    this.buildInfo();
                    this.showCalendars(element);
                }));
            });
        }
    }
}
class CreateCalendarModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(plugin, existing) {
        super(plugin.app);
        this.plugin = plugin;
        this.calendar = Object.assign({}, _main__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_CALENDAR);
        this.saved = false;
        this.editing = false;
        this.canSave = false;
        this.tempCurrentDays = this.calendar.current.day;
        this.calendar.id = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_11__.nanoid)(6);
        if (existing) {
            this.editing = true;
            this.calendar = fast_copy__WEBPACK_IMPORTED_MODULE_1___default()(existing);
        }
        this.containerEl.addClass("fantasy-calendar-create-calendar");
    }
    get static() {
        return this.calendar.static;
    }
    get week() {
        return this.static.weekdays;
    }
    get months() {
        return this.static.months;
    }
    get events() {
        return this.calendar.events;
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h3", {
                text: this.editing ? "Edit Calendar" : "New Calendar"
            });
            const presetEl = this.contentEl.createDiv("fantasy-calendar-apply-preset");
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(presetEl)
                .setName("Apply Preset")
                .setDesc("Apply a common fantasy calendar as a preset.")
                .addButton((b) => {
                b.setCta()
                    .setButtonText("Choose Preset")
                    .onClick(() => {
                    const modal = new CalendarPresetModal(this.app);
                    modal.onClose = () => {
                        var _a;
                        if (!modal.saved)
                            return;
                        if (((_a = modal.preset) === null || _a === void 0 ? void 0 : _a.name) == "Gregorian Calendar") {
                            const today = new Date();
                            modal.preset.current = {
                                year: today.getFullYear(),
                                month: today.getMonth(),
                                day: today.getDate()
                            };
                        }
                        this.calendar = Object.assign(Object.assign({}, modal.preset), { id: this.calendar.id });
                        this.display();
                    };
                    modal.open();
                });
            });
            this.uiEl = this.contentEl.createDiv("fantasy-calendar-ui");
            this.buttonsEl = this.contentEl.createDiv("fantasy-context-buttons");
            this.buildButtons();
            this.infoEl = this.uiEl.createDiv("calendar-info");
            this.buildInfo();
            this.weekdayEl = this.uiEl.createDiv();
            this.buildWeekdays();
            this.monthEl = this.uiEl.createDiv("fantasy-calendar-element");
            this.buildMonths();
            this.yearEl = this.uiEl.createDiv("fantasy-calendar-element");
            this.buildYear();
            this.leapdayEl = this.uiEl.createDiv("fantasy-calendar-element");
            this.buildLeapDays();
            this.eventEl = this.uiEl.createDiv("fantasy-calendar-element");
            this.buildEvents();
            this.categoryEl = this.uiEl.createDiv("fantasy-calendar-element");
            this.buildCategories();
            this.moonEl = this.uiEl.createDiv("fantasy-calendar-element");
            this.buildMoons();
        });
    }
    buildInfo() {
        this.infoEl.empty();
        this.infoDetailEl = this.infoEl.createEl("details", {
            attr: { open: true }
        });
        this.infoDetailEl
            .createEl("summary")
            .createEl("h4", { text: "Basic Info" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoDetailEl).setName("Calendar Name").addText((t) => {
            t.setValue(this.calendar.name).onChange((v) => (this.calendar.name = v));
        });
        const descriptionEl = this.infoDetailEl.createDiv("calendar-description");
        descriptionEl.createEl("label", { text: "Calendar Description" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextAreaComponent(descriptionEl)
            .setPlaceholder("Calendar Description")
            .setValue(this.calendar.description)
            .onChange((v) => {
            this.calendar.description = v;
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoDetailEl)
            .setName("Display Day Number")
            .setDesc("Display the day of the year.")
            .addToggle((t) => {
            t.setValue(this.static.displayDayNumber).onChange((v) => {
                this.static.displayDayNumber = v;
                this.buildInfo();
            });
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.infoDetailEl)
            .setName("Auto Increment Day")
            .setDesc("Automatically increment the calendar day every real day.")
            .addToggle((t) => {
            t.setValue(this.static.incrementDay).onChange((v) => {
                this.static.incrementDay = v;
            });
        });
        this.dateFieldEl = this.infoDetailEl.createDiv();
        this.buildDateFields();
    }
    buildDateFields() {
        var _a, _b, _c, _d, _e, _f;
        this.dateFieldEl.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.dateFieldEl)
            .setClass("fantasy-calendar-date-fields-heading")
            .setHeading()
            .setName("Current Date");
        const dateFieldEl = this.dateFieldEl.createDiv("fantasy-calendar-date-fields");
        if (this.tempCurrentDays == null && this.calendar.current.day) {
            this.tempCurrentDays = this.calendar.current.day;
        }
        if (this.tempCurrentDays != undefined &&
            this.calendar.current.month != undefined &&
            this.tempCurrentDays >
                ((_a = this.calendar.static.months[this.calendar.current.month]) === null || _a === void 0 ? void 0 : _a.length)) {
            this.tempCurrentDays =
                (_b = this.calendar.static.months[this.calendar.current.month]) === null || _b === void 0 ? void 0 : _b.length;
        }
        const dayEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
        dayEl.createEl("label", { text: "Day" });
        const day = new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextComponent(dayEl)
            .setPlaceholder("Day")
            .setValue(`${this.tempCurrentDays}`)
            .setDisabled(this.calendar.current.month == undefined)
            .onChange((v) => {
            var _a, _b;
            if (Number(v) < 1 ||
                ((_b = Number(v) >
                    ((_a = this.calendar.static.months[this.calendar.current.month]) === null || _a === void 0 ? void 0 : _a.length)) !== null && _b !== void 0 ? _b : Infinity)) {
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice(`The current day must be between 1 and ${this.calendar.static.months[this.calendar.current.month].length}`);
                this.tempCurrentDays = this.calendar.current.day;
                this.buildDateFields();
                return;
            }
            this.tempCurrentDays = Number(v);
        });
        day.inputEl.setAttr("type", "number");
        const monthEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
        monthEl.createEl("label", { text: "Month" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.DropdownComponent(monthEl)
            .addOptions(Object.fromEntries([
            ["select", "Select Month"],
            ...this.calendar.static.months.map((month) => [
                month.name,
                month.name
            ])
        ]))
            .setValue(this.calendar.current.month != undefined
            ? this.calendar.static.months[this.calendar.current.month]
                .name
            : "select")
            .onChange((v) => {
            if (v === "select")
                this.calendar.current.month = null;
            const index = this.calendar.static.months.find((m) => m.name == v);
            this.calendar.current.month =
                this.calendar.static.months.indexOf(index);
            this.buildDateFields();
        });
        const yearEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
        yearEl.createEl("label", { text: "Year" });
        if (this.calendar.static.useCustomYears) {
            const yearDrop = new obsidian__WEBPACK_IMPORTED_MODULE_0__.DropdownComponent(yearEl);
            ((_c = this.calendar.static.years) !== null && _c !== void 0 ? _c : []).forEach((year) => {
                yearDrop.addOption(year.id, year.name);
            });
            if (this.calendar.current.year > ((_d = this.calendar.static.years) === null || _d === void 0 ? void 0 : _d.length)) {
                this.calendar.current.year = this.calendar.static.years
                    ? this.calendar.static.years.length
                    : null;
            }
            yearDrop
                .setValue((_f = (_e = this.calendar.static.years) === null || _e === void 0 ? void 0 : _e[this.calendar.current.year - 1]) === null || _f === void 0 ? void 0 : _f.id)
                .onChange((v) => {
                this.calendar.current.year =
                    this.calendar.static.years.findIndex((y) => y.id == v) +
                        1;
            });
        }
        else {
            const year = new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextComponent(yearEl)
                .setPlaceholder("Year")
                .setValue(`${this.calendar.current.year}`)
                .onChange((v) => {
                this.calendar.current.year = Number(v);
            });
            year.inputEl.setAttr("type", "number");
        }
    }
    buildWeekdays() {
        this.weekdayEl.empty();
        const weekday = new _ui_Weekdays_svelte__WEBPACK_IMPORTED_MODULE_5__["default"]({
            target: this.weekdayEl,
            props: {
                weekdays: this.week,
                firstWeekday: this.calendar.static.firstWeekDay,
                overflow: this.calendar.static.overflow
            }
        });
        weekday.$on("weekday-update", (e) => {
            this.calendar.static.weekdays = e.detail;
            if (!this.calendar.static.firstWeekDay &&
                this.calendar.static.weekdays.length) {
                this.calendar.static.firstWeekDay = 0;
                weekday.$set({
                    firstWeekday: this.calendar.static.firstWeekDay
                });
            }
            this.checkCanSave();
        });
        weekday.$on("first-weekday-update", (e) => {
            this.calendar.static.firstWeekDay = e.detail;
        });
        weekday.$on("overflow-update", (e) => {
            this.calendar.static.overflow = e.detail;
            if (!this.calendar.static.overflow)
                this.calendar.static.firstWeekDay = 0;
            weekday.$set({
                firstWeekday: this.calendar.static.firstWeekDay
            });
        });
    }
    buildMonths() {
        this.monthEl.empty();
        const months = new _ui_Months_svelte__WEBPACK_IMPORTED_MODULE_6__["default"]({
            target: this.monthEl,
            props: {
                months: this.months
            }
        });
        months.$on("month-update", (e) => {
            this.calendar.static.months = e.detail;
            this.buildDateFields();
            this.checkCanSave();
        });
    }
    buildYear() {
        this.yearEl.empty();
        const years = new _ui_Year_svelte__WEBPACK_IMPORTED_MODULE_9__["default"]({
            target: this.yearEl,
            props: {
                useCustomYears: this.static.useCustomYears,
                years: this.static.years,
                app: this.app
            }
        });
        years.$on("years-update", (e) => {
            this.calendar.static.years = e.detail;
            this.buildDateFields();
            this.buildEvents();
        });
        years.$on("use-custom-update", (e) => {
            this.calendar.static.useCustomYears = e.detail;
            this.buildDateFields();
            this.buildEvents();
        });
    }
    buildLeapDays() {
        this.leapdayEl.empty();
        const leapdayUI = new _ui_LeapDays_svelte__WEBPACK_IMPORTED_MODULE_15__["default"]({
            target: this.leapdayEl,
            props: {
                leapdays: this.static.leapDays
            }
        });
        leapdayUI.$on("new-item", (e) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            const modal = new _modals_leapday__WEBPACK_IMPORTED_MODULE_17__.CreateLeapDayModal(this.app, this.calendar, e.detail);
            modal.onClose = () => {
                if (!modal.saved)
                    return;
                if (modal.editing) {
                    const index = this.calendar.static.moons.indexOf(this.calendar.static.moons.find((e) => e.id === modal.leapday.id));
                    this.calendar.static.leapDays.splice(index, 1, Object.assign({}, modal.leapday));
                }
                else {
                    this.calendar.static.leapDays.push(Object.assign({}, modal.leapday));
                }
                leapdayUI.$set({ leapdays: this.calendar.static.leapDays });
                this.plugin.saveCalendar();
            };
            modal.open();
        }));
        leapdayUI.$on("edit-leapdays", (e) => {
            this.calendar.static.leapDays = e.detail;
        });
    }
    buildEvents() {
        this.eventEl.empty();
        this.eventsUI = new _ui_Events_svelte__WEBPACK_IMPORTED_MODULE_7__["default"]({
            target: this.eventEl,
            props: {
                events: this.events,
                months: this.calendar.static.months,
                categories: this.calendar.categories
            }
        });
        this.eventsUI.$on("new-item", (e) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            const modal = new _modals_event__WEBPACK_IMPORTED_MODULE_12__.CreateEventModal(this.app, this.calendar, e.detail);
            modal.onClose = () => {
                if (!modal.saved)
                    return;
                if (modal.editing) {
                    const index = this.calendar.events.indexOf(this.calendar.events.find((e) => e.id === modal.event.id));
                    this.calendar.events.splice(index, 1, Object.assign({}, modal.event));
                }
                else {
                    this.calendar.events.push(Object.assign({}, modal.event));
                }
                this.eventsUI.$set({ events: this.events });
                this.plugin.saveCalendar();
            };
            modal.open();
        }));
        this.eventsUI.$on("edit-events", (e) => {
            this.calendar.events = e.detail;
        });
        this.eventEl.setAttr(`style`, `--event-max-width: ${this.eventEl.getBoundingClientRect().width}px;`);
    }
    buildCategories() {
        this.categoryEl.empty();
        const category = new _ui_Categories_svelte__WEBPACK_IMPORTED_MODULE_8__["default"]({
            target: this.categoryEl,
            props: {
                categories: this.calendar.categories
            }
        });
        category.$on("new", (event) => {
            this.calendar.categories.push(event.detail);
            this.eventsUI.$set({
                categories: this.calendar.categories
            });
        });
        category.$on("update", (event) => {
            const existing = this.calendar.categories.find((c) => c.id == event.detail.id);
            this.calendar.categories.splice(this.calendar.categories.indexOf(existing), 1, event.detail);
            this.eventsUI.$set({
                categories: this.calendar.categories,
                events: this.events
            });
        });
        category.$on("delete", (event) => {
            this.calendar.categories.splice(this.calendar.categories.indexOf(event.detail), 1);
            this.eventsUI.$set({
                categories: this.calendar.categories,
                events: this.events
            });
        });
    }
    buildMoons() {
        var _a;
        this.moonEl.empty();
        this.static.displayMoons = (_a = this.static.displayMoons) !== null && _a !== void 0 ? _a : true;
        const moonsUI = new _ui_Moons_svelte__WEBPACK_IMPORTED_MODULE_14__["default"]({
            target: this.moonEl,
            props: {
                moons: this.static.moons,
                displayMoons: this.static.displayMoons
            }
        });
        moonsUI.$on("display-toggle", (e) => {
            this.static.displayMoons = e.detail;
            moonsUI.$set({ displayMoons: this.static.displayMoons });
        });
        moonsUI.$on("new-item", (e) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            const modal = new src_settings_modals_moons__WEBPACK_IMPORTED_MODULE_16__.CreateMoonModal(this.app, this.calendar, e.detail);
            modal.onClose = () => {
                if (!modal.saved)
                    return;
                if (modal.editing) {
                    const index = this.calendar.static.moons.indexOf(this.calendar.static.moons.find((e) => e.id === modal.moon.id));
                    this.calendar.static.moons.splice(index, 1, Object.assign({}, modal.moon));
                }
                else {
                    this.calendar.static.moons.push(Object.assign({}, modal.moon));
                }
                moonsUI.$set({ moons: this.calendar.static.moons });
                this.plugin.saveCalendar();
            };
            modal.open();
        }));
        moonsUI.$on("edit-moons", (e) => {
            this.calendar.static.moons = e.detail;
        });
    }
    checkCanSave() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (((_a = this.months) === null || _a === void 0 ? void 0 : _a.length) &&
            ((_b = this.months) === null || _b === void 0 ? void 0 : _b.every((m) => { var _a; return (_a = m.name) === null || _a === void 0 ? void 0 : _a.length; })) &&
            ((_c = this.months) === null || _c === void 0 ? void 0 : _c.every((m) => m.length > 0)) &&
            ((_d = this.week) === null || _d === void 0 ? void 0 : _d.length) &&
            ((_e = this.week) === null || _e === void 0 ? void 0 : _e.every((d) => { var _a; return (_a = d.name) === null || _a === void 0 ? void 0 : _a.length; })) &&
            ((_f = this.calendar.name) === null || _f === void 0 ? void 0 : _f.length) &&
            this.calendar.static.firstWeekDay <
                ((_h = (_g = this.week) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : Infinity) &&
            (!this.calendar.static.useCustomYears ||
                (this.calendar.static.useCustomYears &&
                    ((_j = this.calendar.static.years) === null || _j === void 0 ? void 0 : _j.length) &&
                    this.calendar.static.years.every((y) => { var _a; return (_a = y.name) === null || _a === void 0 ? void 0 : _a.length; })))) {
            this.canSave = true;
        }
    }
    buildButtons() {
        this.buttonsEl.empty();
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(this.buttonsEl)
            .setCta()
            .setButtonText(this.editing ? "Save" : "Create")
            .onClick(() => {
            var _a, _b;
            if (!this.canSave) {
                this.checkCanSave();
            }
            if (!this.canSave) {
                if (!((_a = this.calendar.name) === null || _a === void 0 ? void 0 : _a.length)) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The calendar name is required!");
                }
                else if (!this.week.length) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("At least one weekday is required.");
                }
                else if (!this.week.every((w) => { var _a; return (_a = w.name) === null || _a === void 0 ? void 0 : _a.length; })) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("Every weekday must have a name.");
                }
                else if (!this.months.length) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("At least one month is required.");
                }
                else if (!this.months.every((m) => { var _a; return (_a = m.name) === null || _a === void 0 ? void 0 : _a.length; })) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("Every month must have a name.");
                }
                else if (!this.months.every((m) => m.length)) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("Every month must have a length.");
                }
                else if (this.calendar.static.useCustomYears &&
                    !((_b = this.calendar.static.years) === null || _b === void 0 ? void 0 : _b.length)) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("Custom years must be defined.");
                }
                else if (this.calendar.static.useCustomYears &&
                    !this.calendar.static.years.every((y) => { var _a; return (_a = y.name) === null || _a === void 0 ? void 0 : _a.length; })) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("Each custom year must be named.");
                }
                else if (this.calendar.static.firstWeekDay >= this.week.length) {
                    new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice("The first day of the week must be a valid weekday.");
                }
                return;
            }
            this.calendar.current.day = this.tempCurrentDays;
            this.saved = true;
            this.close();
        });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.ExtraButtonComponent(this.buttonsEl)
            .setTooltip("Cancel")
            .setIcon("cross")
            .onClick(() => this.close());
    }
    onOpen() {
        this.display();
    }
}
class CalendarPresetModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    onOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            yield this.display();
        });
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.containerEl.addClass("fantasy-calendar-choose-preset");
            this.contentEl.empty();
            this.contentEl.createEl("h3", {
                text: "Choose a Preset Calendar"
            });
            const presetEl = this.contentEl.createDiv("fantasy-calendar-preset-container");
            for (const preset of _utils_presets__WEBPACK_IMPORTED_MODULE_4__.PRESET_CALENDARS) {
                const button = new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(presetEl).onClick(() => {
                    this.preset = preset;
                    this.display();
                });
                if (this.preset == preset)
                    button.setCta();
                button.buttonEl.createDiv({
                    cls: "setting-item-name",
                    text: preset.name
                });
                button.buttonEl.createDiv({
                    cls: "setting-item-description",
                    text: preset.description
                });
            }
            const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl)
                .setButtonText("Apply")
                .onClick(() => {
                this.saved = true;
                this.close();
            })
                .setCta();
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.ExtraButtonComponent(buttonEl).setIcon("cross").onClick(() => {
                this.close();
            });
        });
    }
}


/***/ }),

/***/ "./src/suggester/folder.ts":
/*!*********************************!*\
  !*** ./src/suggester/folder.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FolderSuggestionModal": () => (/* binding */ FolderSuggestionModal)
/* harmony export */ });
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _suggester__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suggester */ "./src/suggester/suggester.ts");


class FolderSuggestionModal extends _suggester__WEBPACK_IMPORTED_MODULE_1__.SuggestionModal {
    constructor(app, input, items) {
        super(app, input.inputEl, items);
        this.folders = [...items];
        this.text = input;
        this.inputEl.addEventListener("input", () => this.getFolder());
    }
    getFolder() {
        const v = this.inputEl.value, folder = this.app.vault.getAbstractFileByPath(v);
        if (folder == this.folder)
            return;
        if (!(folder instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFolder))
            return;
        this.folder = folder;
        this.onInputChanged();
    }
    getItemText(item) {
        return item.path;
    }
    onChooseItem(item) {
        this.text.setValue(item.path);
        this.folder = item;
    }
    selectSuggestion({ item }) {
        let link = item.path;
        this.text.setValue(link);
        this.onClose();
        this.close();
    }
    renderSuggestion(result, el) {
        let { item, match: matches } = result || {};
        let content = el.createDiv({
            cls: "suggestion-content"
        });
        if (!item) {
            content.setText(this.emptyStateText);
            content.parentElement.addClass("is-selected");
            return;
        }
        let pathLength = item.path.length - item.name.length;
        const matchElements = matches.matches.map((m) => {
            return createSpan("suggestion-highlight");
        });
        for (let i = pathLength; i < item.path.length; i++) {
            let match = matches.matches.find((m) => m[0] === i);
            if (match) {
                let element = matchElements[matches.matches.indexOf(match)];
                content.appendChild(element);
                element.appendText(item.path.substring(match[0], match[1]));
                i += match[1] - match[0] - 1;
                continue;
            }
            content.appendText(item.path[i]);
        }
        el.createDiv({
            cls: "suggestion-note",
            text: item.path
        });
    }
    getItems() {
        return this.folders;
    }
}


/***/ }),

/***/ "./src/suggester/path.ts":
/*!*******************************!*\
  !*** ./src/suggester/path.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PathSuggestionModal)
/* harmony export */ });
/* harmony import */ var _suggester__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./suggester */ "./src/suggester/suggester.ts");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_1__);


class PathSuggestionModal extends _suggester__WEBPACK_IMPORTED_MODULE_0__.SuggestionModal {
    constructor(app, input, items) {
        super(app, input.inputEl, items);
        this.files = [...items];
        this.text = input;
        this.createPrompts();
        this.inputEl.addEventListener("input", this.getFile.bind(this));
    }
    createPrompts() {
        this.createPrompt([
            createSpan({
                cls: "prompt-instruction-command",
                text: "Type #"
            }),
            createSpan({ text: "to link heading" })
        ]);
        this.createPrompt([
            createSpan({
                cls: "prompt-instruction-command",
                text: "Type ^"
            }),
            createSpan({ text: "to link blocks" })
        ]);
        this.createPrompt([
            createSpan({
                cls: "prompt-instruction-command",
                text: "Note: "
            }),
            createSpan({
                text: "Blocks must have been created already"
            })
        ]);
    }
    getFile() {
        const v = this.inputEl.value, file = this.app.metadataCache.getFirstLinkpathDest(v.split(/[\^#]/).shift() || "", "");
        if (file == this.file)
            return;
        this.file = file;
        if (this.file)
            this.cache = this.app.metadataCache.getFileCache(this.file);
        this.onInputChanged();
    }
    getItemText(item) {
        if (item instanceof obsidian__WEBPACK_IMPORTED_MODULE_1__.TFile)
            return item.path;
        if (Object.prototype.hasOwnProperty.call(item, "heading")) {
            return item.heading;
        }
        if (Object.prototype.hasOwnProperty.call(item, "id")) {
            return item.id;
        }
    }
    onChooseItem(item) {
        if (item instanceof obsidian__WEBPACK_IMPORTED_MODULE_1__.TFile) {
            this.text.setValue(item.basename);
            this.file = item;
            this.cache = this.app.metadataCache.getFileCache(this.file);
        }
        else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
            this.text.setValue(this.file.basename + "#" + item.heading);
        }
        else if (Object.prototype.hasOwnProperty.call(item, "id")) {
            this.text.setValue(this.file.basename + "^" + item.id);
        }
    }
    selectSuggestion({ item }) {
        let link;
        if (item instanceof obsidian__WEBPACK_IMPORTED_MODULE_1__.TFile) {
            this.file = item;
            link = item.basename;
        }
        else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
            link = this.file.basename + "#" + item.heading;
        }
        else if (Object.prototype.hasOwnProperty.call(item, "id")) {
            link = this.file.basename + "^" + item.id;
        }
        this.text.setValue(link);
        this.close();
        this.onClose();
    }
    renderSuggestion(result, el) {
        let { item, match: matches } = result || {};
        let content = el.createDiv({
            cls: "suggestion-content"
        });
        if (!item) {
            content.setText(this.emptyStateText);
            content.parentElement.addClass("is-selected");
            return;
        }
        if (item instanceof obsidian__WEBPACK_IMPORTED_MODULE_1__.TFile) {
            let pathLength = item.path.length - item.name.length;
            const matchElements = matches.matches.map((m) => {
                return createSpan("suggestion-highlight");
            });
            for (let i = pathLength; i < item.path.length - item.extension.length - 1; i++) {
                let match = matches.matches.find((m) => m[0] === i);
                if (match) {
                    let element = matchElements[matches.matches.indexOf(match)];
                    content.appendChild(element);
                    element.appendText(item.path.substring(match[0], match[1]));
                    i += match[1] - match[0] - 1;
                    continue;
                }
                content.appendText(item.path[i]);
            }
            el.createDiv({
                cls: "suggestion-note",
                text: item.path
            });
        }
        else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
            content.setText(item.heading);
            content.prepend(createSpan({
                cls: "suggestion-flair",
                text: `H${item.level}`
            }));
        }
        else if (Object.prototype.hasOwnProperty.call(item, "id")) {
            content.setText(item.id);
        }
    }
    get headings() {
        if (!this.file)
            return [];
        if (!this.cache) {
            this.cache = this.app.metadataCache.getFileCache(this.file);
        }
        return this.cache.headings || [];
    }
    get blocks() {
        if (!this.file)
            return [];
        if (!this.cache) {
            this.cache = this.app.metadataCache.getFileCache(this.file);
        }
        return Object.values(this.cache.blocks || {}) || [];
    }
    getItems() {
        const v = this.inputEl.value;
        if (/#/.test(v)) {
            this.modifyInput = (i) => i.split(/#/).pop();
            return this.headings;
        }
        else if (/\^/.test(v)) {
            this.modifyInput = (i) => i.split(/\^/).pop();
            return this.blocks;
        }
        return this.files;
    }
}


/***/ }),

/***/ "./src/suggester/suggester.ts":
/*!************************************!*\
  !*** ./src/suggester/suggester.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SuggestionModal": () => (/* binding */ SuggestionModal)
/* harmony export */ });
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/popper.js");


class Suggester {
    constructor(owner, containerEl, scope) {
        this.containerEl = containerEl;
        this.owner = owner;
        containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
        containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
        scope.register([], "ArrowUp", () => {
            this.setSelectedItem(this.selectedItem - 1, true);
            return false;
        });
        scope.register([], "ArrowDown", () => {
            this.setSelectedItem(this.selectedItem + 1, true);
            return false;
        });
        scope.register([], "Enter", (evt) => {
            this.useSelectedItem(evt);
            return false;
        });
        scope.register([], "Tab", (evt) => {
            this.chooseSuggestion(evt);
            return false;
        });
    }
    chooseSuggestion(evt) {
        if (!this.items || !this.items.length)
            return;
        const currentValue = this.items[this.selectedItem];
        if (currentValue) {
            this.owner.onChooseSuggestion(currentValue, evt);
        }
    }
    onSuggestionClick(event, el) {
        event.preventDefault();
        if (!this.suggestions || !this.suggestions.length)
            return;
        const item = this.suggestions.indexOf(el);
        this.setSelectedItem(item, false);
        this.useSelectedItem(event);
    }
    onSuggestionMouseover(event, el) {
        if (!this.suggestions || !this.suggestions.length)
            return;
        const item = this.suggestions.indexOf(el);
        this.setSelectedItem(item, false);
    }
    empty() {
        this.containerEl.empty();
    }
    setSuggestions(items) {
        this.containerEl.empty();
        const els = [];
        items.forEach((item) => {
            const suggestionEl = this.containerEl.createDiv("suggestion-item");
            this.owner.renderSuggestion(item, suggestionEl);
            els.push(suggestionEl);
        });
        this.items = items;
        this.suggestions = els;
        this.setSelectedItem(0, false);
    }
    useSelectedItem(event) {
        if (!this.items || !this.items.length)
            return;
        const currentValue = this.items[this.selectedItem];
        if (currentValue) {
            this.owner.selectSuggestion(currentValue, event);
        }
    }
    wrap(value, size) {
        return ((value % size) + size) % size;
    }
    setSelectedItem(index, scroll) {
        const nIndex = this.wrap(index, this.suggestions.length);
        const prev = this.suggestions[this.selectedItem];
        const next = this.suggestions[nIndex];
        if (prev)
            prev.removeClass("is-selected");
        if (next)
            next.addClass("is-selected");
        this.selectedItem = nIndex;
        if (scroll) {
            next.scrollIntoView(false);
        }
    }
}
class SuggestionModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.FuzzySuggestModal {
    constructor(app, inputEl, items) {
        super(app);
        this.items = [];
        this.scope = new obsidian__WEBPACK_IMPORTED_MODULE_0__.Scope();
        this.emptyStateText = "No match found";
        this.limit = 100;
        this.inputEl = inputEl;
        this.items = items;
        this.suggestEl = createDiv("suggestion-container");
        this.contentEl = this.suggestEl.createDiv("suggestion");
        this.suggester = new Suggester(this, this.contentEl, this.scope);
        this.scope.register([], "Escape", this.onEscape.bind(this));
        this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
        this.inputEl.addEventListener("focus", this.onFocus.bind(this));
        this.inputEl.addEventListener("blur", this.close.bind(this));
        this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
            event.preventDefault();
        });
    }
    empty() {
        this.suggester.empty();
    }
    onInputChanged() {
        if (this.shouldNotOpen)
            return;
        const inputStr = this.modifyInput(this.inputEl.value);
        const suggestions = this.getSuggestions(inputStr);
        if (suggestions.length > 0) {
            this.suggester.setSuggestions(suggestions.slice(0, this.limit));
        }
        else {
            this.onNoSuggestion();
        }
        this.open();
    }
    onFocus() {
        this.shouldNotOpen = false;
        this.onInputChanged();
    }
    modifyInput(input) {
        return input;
    }
    onNoSuggestion() {
        this.empty();
        this.renderSuggestion(null, this.contentEl.createDiv("suggestion-item"));
    }
    open() {
        // TODO: Figure out a better way to do this. Idea from Periodic Notes plugin
        this.app.keymap.pushScope(this.scope);
        document.body.appendChild(this.suggestEl);
        this.popper = (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_1__.createPopper)(this.inputEl, this.suggestEl, {
            placement: "bottom-start",
            modifiers: [
                {
                    name: "offset",
                    options: {
                        offset: [0, 10]
                    }
                },
                {
                    name: "flip",
                    options: {
                        fallbackPlacements: ["top"]
                    }
                }
            ]
        });
    }
    onEscape() {
        this.close();
        this.shouldNotOpen = true;
    }
    close() {
        // TODO: Figure out a better way to do this. Idea from Periodic Notes plugin
        this.app.keymap.popScope(this.scope);
        this.suggester.setSuggestions([]);
        if (this.popper) {
            this.popper.destroy();
        }
        this.suggestEl.detach();
    }
    createPrompt(prompts) {
        if (!this.promptEl)
            this.promptEl = this.suggestEl.createDiv("prompt-instructions");
        let prompt = this.promptEl.createDiv("prompt-instruction");
        for (let p of prompts) {
            prompt.appendChild(p);
        }
    }
}


/***/ }),

/***/ "./src/utils/constants.ts":
/*!********************************!*\
  !*** ./src/utils/constants.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_CATEGORY_COLOR": () => (/* binding */ DEFAULT_CATEGORY_COLOR),
/* harmony export */   "MOON_SHADOWS": () => (/* binding */ MOON_SHADOWS),
/* harmony export */   "SHADOW_MAP": () => (/* binding */ SHADOW_MAP),
/* harmony export */   "MOON_PHASES": () => (/* binding */ MOON_PHASES)
/* harmony export */ });
const DEFAULT_CATEGORY_COLOR = "#808080";
const MOON_SHADOWS = [
    "M6.5,16a9.5,9.5 0 1,0 19,0a9.5,9.5 0 1,0 -19,0",
    "M19.79,6C22.25,7.2,25,9.92,25,16s-2.75,8.8-5.21,10a10.59,10.59,0,0,1-3.79.71A10.72,10.72,0,0,1,16,5.28,10.59,10.59,0,0,1,19.79,6Z",
    "M19.43,5.86C21.79,7,24.5,9.7,24.5,16s-2.71,9-5.07,10.14a10.55,10.55,0,0,1-3.43.58A10.72,10.72,0,0,1,16,5.28,10.55,10.55,0,0,1,19.43,5.86Z",
    "M17.87,5.46C20.23,6.34,24,8.88,24,16.17c0,6.85-3.33,9.36-5.69,10.29a11,11,0,0,1-2.31.26A10.72,10.72,0,0,1,16,5.28,10.49,10.49,0,0,1,17.87,5.46Z",
    "M17.79,5.45C20,6.3,23.5,8.77,23.5,15.88c0,7.37-3.75,9.87-5.95,10.71a9.92,9.92,0,0,1-1.55.13A10.72,10.72,0,0,1,16,5.28,10.54,10.54,0,0,1,17.79,5.45Z",
    "M17.35,5.38c1.9.79,5.15,3.25,5.15,10.72,0,7.25-3.06,9.68-5,10.5a10.87,10.87,0,0,1-1.52.12A10.72,10.72,0,0,1,16,5.28,10.1,10.1,0,0,1,17.35,5.38Z",
    "M17.05,5.34c1.6.75,4.45,3.17,4.45,10.79,0,7.39-2.68,9.76-4.3,10.52a11.9,11.9,0,0,1-1.2.07A10.72,10.72,0,0,1,16,5.28,9,9,0,0,1,17.05,5.34Z",
    "M16.85,5.33c1.3.74,3.65,3.12,3.65,10.67s-2.35,9.93-3.65,10.67c-.28,0-.56,0-.85,0A10.72,10.72,0,0,1,16,5.28,7.92,7.92,0,0,1,16.85,5.33Z",
    "M16.46,5.31c.95.78,3,3.34,3,10.69s-2.09,9.91-3,10.69l-.46,0A10.72,10.72,0,0,1,16,5.28Z",
    "M16.29,5.3c.65.8,2.21,3.48,2.21,10.78S17,25.91,16.3,26.7l-.3,0A10.72,10.72,0,0,1,16,5.28Z",
    "M16.13,5.29c.37.89,1.37,3.92,1.37,10.79s-1,9.76-1.36,10.63H16A10.72,10.72,0,0,1,16,5.28Z",
    "M16,5.29A85.5,85.5,0,0,1,16.5,16,85.5,85.5,0,0,1,16,26.71h0A10.72,10.72,0,0,1,16,5.28Z",
    "M16,26.72A10.72,10.72,0,0,1,16,5.28Z",
    "M15.5,16A85.59,85.59,0,0,0,16,26.72,10.72,10.72,0,0,1,16,5.28,85.59,85.59,0,0,0,15.5,16Z",
    "M14.5,16.08c0,6.84,1,9.77,1.36,10.63a10.71,10.71,0,0,1,0-21.42C15.5,6.17,14.5,9.2,14.5,16.08Z",
    "M15.7,26.7a10.7,10.7,0,0,1,0-21.4c-.65.8-2.21,3.47-2.21,10.78S15,25.92,15.7,26.7Z",
    "M15.55,26.7a10.71,10.71,0,0,1,0-21.4c-1,.78-3.05,3.34-3.05,10.7S14.6,25.92,15.55,26.7Z",
    "M15.16,26.68a10.71,10.71,0,0,1,0-21.36C13.85,6.06,11.5,8.43,11.5,16S13.85,25.94,15.16,26.68Z",
    "M14.81,26.65A10.72,10.72,0,0,1,15,5.33c-1.59.76-4.45,3.17-4.45,10.8C10.5,23.53,13.19,25.9,14.81,26.65Z",
    "M14.49,26.6a10.71,10.71,0,0,1,.17-21.23c-1.9.8-5.16,3.24-5.16,10.73C9.5,23.37,12.57,25.79,14.49,26.6Z",
    "M14.46,26.6a10.71,10.71,0,0,1-.24-21.16C12,6.29,8.5,8.76,8.5,15.88,8.5,23.26,12.27,25.76,14.46,26.6Z",
    "M13.72,26.47a10.71,10.71,0,0,1,.43-21C11.78,6.33,8,8.87,8,16.17,8,23,11.35,25.55,13.72,26.47Z",
    "M12.6,26.19a10.73,10.73,0,0,1,0-20.35C10.23,7,7.5,9.67,7.5,16s2.73,9,5.1,10.16Z",
    "M12.23,26a10.7,10.7,0,0,1,0-20C9.77,7.19,7,9.9,7,16S9.77,24.81,12.23,26Z",
    null,
    "M19.77,26C22.23,24.81,25,22.1,25,16S22.23,7.19,19.77,6a10.7,10.7,0,0,1,0,20Z",
    "M19.4,26.16C21.77,25,24.5,22.33,24.5,16S21.77,7,19.4,5.84a10.71,10.71,0,0,1,0,20.32Z",
    "M18.28,26.47C20.65,25.55,24,23,24,16.17c0-7.3-3.78-9.84-6.15-10.72a10.71,10.71,0,0,1,.43,21Z",
    "M17.54,26.6c2.19-.84,6-3.34,6-10.72,0-7.12-3.5-9.59-5.72-10.44a10.71,10.71,0,0,1-.24,21.16Z",
    "M17.51,26.6c1.92-.81,5-3.23,5-10.5,0-7.49-3.26-9.93-5.16-10.73a10.71,10.71,0,0,1,.17,21.23Z",
    "M17.19,26.65c1.62-.75,4.31-3.12,4.31-10.52,0-7.63-2.86-10-4.45-10.8a10.72,10.72,0,0,1,.14,21.32Z",
    "M16.84,26.68c1.31-.74,3.66-3.11,3.66-10.68S18.15,6.06,16.84,5.32a10.71,10.71,0,0,1,0,21.36Z",
    "M16.45,26.7c.95-.78,3.05-3.34,3.05-10.7S17.4,6.08,16.45,5.3a10.71,10.71,0,0,1,0,21.4Z",
    "M16.3,26.7c.67-.78,2.2-3.37,2.2-10.62S16.94,6.1,16.29,5.3a10.7,10.7,0,0,1,0,21.4Z",
    "M16.14,26.71c.37-.86,1.36-3.79,1.36-10.63s-1-9.91-1.37-10.79a10.71,10.71,0,0,1,0,21.42Z",
    "M16,26.72A85.59,85.59,0,0,0,16.5,16,85.59,85.59,0,0,0,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72V5.28a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72h0A85.59,85.59,0,0,1,15.5,16,85.59,85.59,0,0,1,16,5.28h0a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72h-.14c-.37-.86-1.36-3.79-1.36-10.63s1-9.91,1.37-10.79H16a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72l-.3,0c-.67-.78-2.2-3.37-2.2-10.62s1.56-10,2.21-10.78l.29,0a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72l-.45,0c-1-.78-3.05-3.34-3.05-10.7s2.1-9.92,3.05-10.7l.45,0a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72c-.28,0-.56,0-.84,0C13.85,25.94,11.5,23.57,11.5,16s2.35-9.94,3.66-10.68c.28,0,.56,0,.84,0a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72a11.7,11.7,0,0,1-1.19-.07c-1.62-.75-4.31-3.12-4.31-10.52,0-7.63,2.86-10,4.45-10.8.35,0,.7,0,1.05,0a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72a10.85,10.85,0,0,1-1.51-.12c-1.92-.81-5-3.23-5-10.5,0-7.49,3.26-9.93,5.16-10.73A11.9,11.9,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72a11.16,11.16,0,0,1-1.54-.12c-2.19-.84-6-3.34-6-10.72,0-7.12,3.5-9.59,5.72-10.44A10.43,10.43,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72a10.69,10.69,0,0,1-2.28-.25C11.35,25.55,8,23,8,16.17c0-7.3,3.78-9.84,6.15-10.72A11.26,11.26,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
    "M16,26.72a10.63,10.63,0,0,1-3.4-.56C10.23,25,7.5,22.33,7.5,16s2.73-9,5.1-10.16A10.72,10.72,0,1,1,16,26.72Z",
    "M16,26.72a10.52,10.52,0,0,1-3.77-.7C9.77,24.81,7,22.1,7,16S9.77,7.19,12.23,6A10.52,10.52,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z"
];
const SHADOW_MAP = {
    "New Moon": MOON_SHADOWS[0],
    "New Moon Fading": MOON_SHADOWS[1],
    "New Moon Faded": MOON_SHADOWS[2],
    "Waxing Crescent Rising": MOON_SHADOWS[3],
    "Waxing Crescent Risen": MOON_SHADOWS[4],
    "Waxing Crescent": MOON_SHADOWS[6],
    "Waxing Crescent Fading": MOON_SHADOWS[7],
    "Waxing Crescent Faded": MOON_SHADOWS[8],
    "First Quarter Rising": MOON_SHADOWS[9],
    "First Quarter Risen": MOON_SHADOWS[10],
    "First Quarter": MOON_SHADOWS[12],
    "First Quarter Fading": MOON_SHADOWS[13],
    "First Quarter Faded": MOON_SHADOWS[14],
    "Waxing Gibbous Rising": MOON_SHADOWS[15],
    "Waxing Gibbous Risen": MOON_SHADOWS[16],
    "Waxing Gibbous": MOON_SHADOWS[18],
    "Waxing Gibbous Fading": MOON_SHADOWS[19],
    "Waxing Gibbous Faded": MOON_SHADOWS[20],
    "Full Moon Rising": MOON_SHADOWS[21],
    "Full Moon Risen": MOON_SHADOWS[22],
    "Full Moon": MOON_SHADOWS[24],
    "Full Moon Fading": MOON_SHADOWS[25],
    "Full Moon Faded": MOON_SHADOWS[26],
    "Waning Gibbous Rising": MOON_SHADOWS[27],
    "Waning Gibbous Risen": MOON_SHADOWS[28],
    "Waning Gibbous": MOON_SHADOWS[30],
    "Waning Gibbous Fading": MOON_SHADOWS[31],
    "Waning Gibbous Faded": MOON_SHADOWS[32],
    "Last Quarter Rising": MOON_SHADOWS[33],
    "Last Quarter Risen": MOON_SHADOWS[34],
    "Last Quarter": MOON_SHADOWS[36],
    "Last Quarter Fading": MOON_SHADOWS[37],
    "Last Quarter Faded": MOON_SHADOWS[38],
    "Waning Crescent Rising": MOON_SHADOWS[39],
    "Waning Crescent Risen": MOON_SHADOWS[40],
    "Waning Crescent": MOON_SHADOWS[42],
    "Waning Crescent Fading": MOON_SHADOWS[43],
    "Waning Crescent Faded": MOON_SHADOWS[44],
    "New Moon Rising": MOON_SHADOWS[45],
    "New Moon Risen": MOON_SHADOWS[46]
};
const MOON_PHASES = {
    4: ["New Moon", "First Quarter", "Full Moon", "Last Quarter"],
    8: [
        "New Moon",
        "Waxing Crescent",
        "First Quarter",
        "Waxing Gibbous",
        "Full Moon",
        "Waning Gibbous",
        "Last Quarter",
        "Waning Crescent"
    ],
    16: [
        "New Moon",
        "New Moon Fading",
        "Waxing Crescent",
        "Waxing Crescent Fading",
        "First Quarter",
        "First Quarter Fading",
        "Waxing Gibbous",
        "Waxing Gibbous Fading",
        "Full Moon",
        "Full Moon Fading",
        "Waning Gibbous",
        "Waning Gibbous Fading",
        "Last Quarter",
        "Last Quarter Fading",
        "Waning Crescent",
        "Waning Crescent Fading"
    ],
    24: [
        "New Moon",
        "New Moon Fading",
        "Waxing Crescent Rising",
        "Waxing Crescent",
        "Waxing Crescent Fading",
        "First Quarter Rising",
        "First Quarter",
        "First Quarter Fading",
        "Waxing Gibbous Rising",
        "Waxing Gibbous",
        "Waxing Gibbous Fading",
        "Full Moon Rising",
        "Full Moon",
        "Full Moon Fading",
        "Waning Gibbous Rising",
        "Waning Gibbous",
        "Waning Gibbous Fading",
        "Last Quarter Rising",
        "Last Quarter",
        "Last Quarter Fading",
        "Waning Crescent Rising",
        "Waning Crescent",
        "Waning Crescent Fading",
        "New Moon Rising"
    ],
    40: [
        "New Moon",
        "New Moon Fading",
        "New Moon Faded",
        "Waxing Crescent Rising",
        "Waxing Crescent Risen",
        "Waxing Crescent",
        "Waxing Crescent Fading",
        "Waxing Crescent Faded",
        "First Quarter Rising",
        "First Quarter Risen",
        "First Quarter",
        "First Quarter Fading",
        "First Quarter Faded",
        "Waxing Gibbous Rising",
        "Waxing Gibbous Risen",
        "Waxing Gibbous",
        "Waxing Gibbous Fading",
        "Waxing Gibbous Faded",
        "Full Moon Rising",
        "Full Moon Risen",
        "Full Moon",
        "Full Moon Fading",
        "Full Moon Faded",
        "Waning Gibbous Rising",
        "Waning Gibbous Risen",
        "Waning Gibbous",
        "Waning Gibbous Fading",
        "Waning Gibbous Faded",
        "Last Quarter Rising",
        "Last Quarter Risen",
        "Last Quarter",
        "Last Quarter Fading",
        "Last Quarter Faded",
        "Waning Crescent Rising",
        "Waning Crescent Risen",
        "Waning Crescent",
        "Waning Crescent Fading",
        "Waning Crescent Faded",
        "New Moon Rising",
        "New Moon Risen"
    ]
};


/***/ }),

/***/ "./src/utils/functions.ts":
/*!********************************!*\
  !*** ./src/utils/functions.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "daysBetween": () => (/* binding */ daysBetween),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "nanoid": () => (/* binding */ nanoid),
/* harmony export */   "getIntervalDescription": () => (/* binding */ getIntervalDescription),
/* harmony export */   "ordinal": () => (/* binding */ ordinal),
/* harmony export */   "dateString": () => (/* binding */ dateString)
/* harmony export */ });
function daysBetween(date1, date2) {
    const d1 = window.moment(date1);
    const d2 = window.moment(date2);
    let days = d2.diff(d1, "days");
    if ((d1.year() < d2.year() || d1.dayOfYear() < d2.dayOfYear()) &&
        (d1.hour() > d2.hour() ||
            d1.minute() > d2.minute() ||
            d1.second() > d2.second() ||
            d1.millisecond() > d2.millisecond())) {
        days += 1;
    }
    return days;
}
function wrap(value, size) {
    return ((value % size) + size) % size;
}
function nanoid(len) {
    return "ID_xyxyxyxyxyxy".replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0, v = c == "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
function getIntervalDescription(leapday) {
    var _a;
    if (!((_a = leapday.interval) === null || _a === void 0 ? void 0 : _a.length))
        return "";
    const intervals = leapday.interval.sort((a, b) => a.interval - b.interval);
    let description = [];
    for (let interval of intervals) {
        const length = interval.interval + (interval.ignore ? 0 : leapday.offset);
        if (interval.exclusive) {
            description.push(`not every ${ordinal(length)} year`);
        }
        else {
            const index = intervals.indexOf(interval);
            const also = index > 0 && intervals[index - 1].exclusive;
            description.push(`${also ? "also " : ""}every ${ordinal(length)} year`);
        }
    }
    const join = description.join(", but ");
    return join[0].toUpperCase() + join.slice(1).toLowerCase();
}
function ordinal(i) {
    const j = i % 10, k = i % 100;
    if (j == 1 && k != 11) {
        return i + "st";
    }
    if (j == 2 && k != 12) {
        return i + "nd";
    }
    if (j == 3 && k != 13) {
        return i + "rd";
    }
    return i + "th";
}
function dateString(date, months, end) {
    if (!date || date.day == undefined) {
        return "";
    }
    const { day, month, year } = date;
    if (month != undefined && !months[month])
        return "Invalid Date";
    if (end && end.day) {
        const endDay = end.day;
        const endMonth = end.month;
        const endYear = end.year;
        if (endMonth != undefined &&
            endYear != undefined &&
            month != undefined &&
            year != undefined) {
            if (year != endYear) {
                return `${months[month].name} ${ordinal(day)}, ${year} - ${months[endMonth].name} ${ordinal(endDay)}, ${endYear}`;
            }
            if (endMonth == month) {
                return `${months[month].name} ${ordinal(day)}-${ordinal(endDay)}, ${year}`;
            }
            if (month != undefined && year != undefined) {
                return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)}, ${year}`;
            }
            if (month != undefined) {
                return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)} of every year`;
            }
            return `${ordinal(day)}-${ordinal(endDay)} of every month`;
        }
    }
    if (month != undefined && year != undefined) {
        return `${months[month].name} ${ordinal(day)}, ${year}`;
    }
    if (month != undefined) {
        return `${months[month].name} ${ordinal(day)} of every year`;
    }
    return `${ordinal(day)} of every month`;
}
function LeapDay(leapday, LeapDay) {
    throw new Error("Function not implemented.");
}


/***/ }),

/***/ "./src/utils/presets.ts":
/*!******************************!*\
  !*** ./src/utils/presets.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PRESET_CALENDARS": () => (/* binding */ PRESET_CALENDARS)
/* harmony export */ });
const PRESET_CALENDARS = [
    {
        name: "Gregorian Calendar",
        description: "A calendar for the real world. Note: May not be 100% accurate.",
        static: {
            displayDayNumber: false,
            incrementDay: true,
            displayMoons: true,
            firstWeekDay: 6,
            overflow: true,
            weekdays: [
                {
                    type: "day",
                    name: "Sunday",
                    id: "ID_19ea684b4a08"
                },
                {
                    type: "day",
                    name: "Monday",
                    id: "ID_2928b90ab949"
                },
                {
                    type: "day",
                    name: "Tuesday",
                    id: "ID_0ad9a8f9e95b"
                },
                {
                    type: "day",
                    name: "Wednesday",
                    id: "ID_195a4b290bc9"
                },
                {
                    type: "day",
                    name: "Thursday",
                    id: "ID_abe8c89b0999"
                },
                {
                    type: "day",
                    name: "Friday",
                    id: "ID_2b5b8a79fa4a"
                },
                {
                    type: "day",
                    name: "Saturday",
                    id: "ID_1a78cb79c8cb"
                }
            ],
            months: [
                {
                    name: "January",
                    type: "month",
                    length: 31,
                    id: "ID_e9997a780b3a"
                },
                {
                    name: "February",
                    type: "month",
                    length: 28,
                    id: "ID_b8c9ebeb0b89"
                },
                {
                    name: "March",
                    type: "month",
                    length: 31,
                    id: "ID_b83bda2b9be8"
                },
                {
                    name: "April",
                    type: "month",
                    length: 30,
                    id: "ID_29baea7b28ab"
                },
                {
                    name: "May",
                    type: "month",
                    length: 31,
                    id: "ID_6a3899fad909"
                },
                {
                    name: "June",
                    type: "month",
                    length: 30,
                    id: "ID_384aeb1afa8a"
                },
                {
                    name: "July",
                    type: "month",
                    length: 31,
                    id: "ID_48b8cba87b8a"
                },
                {
                    name: "August",
                    type: "month",
                    length: 31,
                    id: "ID_fa0b1a6bab8a"
                },
                {
                    name: "September",
                    type: "month",
                    length: 30,
                    id: "ID_da880b8af849"
                },
                {
                    name: "October",
                    type: "month",
                    length: 31,
                    id: "ID_babba8186968"
                },
                {
                    name: "November",
                    type: "month",
                    length: 30,
                    id: "ID_da582bfaf9b9"
                },
                {
                    name: "December",
                    type: "month",
                    length: 31,
                    id: "ID_ba1bab4a3a28"
                }
            ],
            moons: [
                {
                    name: "Moon",
                    cycle: 29.530588853,
                    offset: 9.24953,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_a9ab186b1819"
                }
            ],
            leapDays: [
                {
                    name: "Leap Day",
                    type: "leapday",
                    interval: [
                        {
                            ignore: false,
                            exclusive: false,
                            interval: 400
                        },
                        {
                            ignore: false,
                            exclusive: true,
                            interval: 100
                        },
                        {
                            ignore: false,
                            exclusive: false,
                            interval: 4
                        }
                    ],
                    offset: 0,
                    timespan: 1,
                    intercalary: false,
                    id: "ID_b91ad86a887a"
                }
            ],
            eras: [
                {
                    name: "Before Christ",
                    description: "",
                    format: "Year {{abs_year}} - {{era_name}}",
                    start: {
                        year: -1,
                        month: 0,
                        day: 31
                    }
                },
                {
                    name: "Anno Domini",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: 1,
                        month: 0,
                        day: 1
                    }
                }
            ],
            offset: 2
        },
        current: {
            year: null,
            day: null,
            month: null
        },
        events: [
            {
                name: "Summer Solstice",
                description: "At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
                id: "824599",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Winter Solstice",
                description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
                id: "824600",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Spring Equinox",
                description: "The equinox marks the day and the night is equally as long.",
                id: "824601",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Autumn Equinox",
                description: "The equinox marks the day and the night is equally as long.",
                id: "824602",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Christmas",
                description: "Christmas is a Christian holiday celebrating the birth of Christ. Due to a combination of marketability and long lasting traditions it is popular even among many non-Christians, especially in countries that have a strong Christian tradition.",
                id: "824603",
                note: null,
                date: {
                    day: 25,
                    year: null,
                    month: 11
                },
                category: "christian-holidays"
            },
            {
                name: "Paschal Full Moon",
                description: "The first full moon after march 21st, which is considered the fixed date for the spring equinox.",
                id: "824604",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "christian-holidays"
            },
            {
                name: "Easter",
                description: "Easter is considered the most important feast for Christians, celebrating the resurrection of Christ. It is classed as a moveable feast occurring on the first full moon after the spring equinox, which is considered to be fixed at March 21st for the sake of computing the date.",
                id: "824605",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "christian-holidays"
            },
            {
                name: "Easter Monday",
                description: "The Monday following the Easter Sunday is often considered part of the Easter Celebration and is a day off in many countries with a strong Christian tradition.",
                id: "824606",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "christian-holidays"
            },
            {
                name: "Good Friday",
                description: "Good Friday is the Friday preceding Easter. It comemmorates the crucifixion of Christ according to the Bible.",
                id: "824607",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "christian-holidays"
            },
            {
                name: "Pentecost",
                description: "Celebrated exactly 50 days after Easter, Pentecost is the celebration of the Holy Spirit appearing before the Apostles as described in the Bible.",
                id: "824608",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "christian-holidays"
            },
            {
                name: "New Year's Day",
                description: "New Year's Day marks the start of a new year on the Gregorian Calendar. It starts when the clock strikes midnight and is often celebrated with fireworks, champagne and kissing.",
                id: "824609",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 0
                },
                category: "secular-holidays"
            },
            {
                name: "Valentine's Day",
                description: "Valentine's day is a celebration of love and romance that is popular across the world. Many more cynically minded people mostly consider it an attempt to monetize the expectation of romantic gestures on the holiday through gift cards, flowers, chocolate and dates.",
                id: "824610",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 1
                },
                category: "secular-holidays"
            },
            {
                name: "Halloween",
                description: 'Halloween is holiday popular in the US, Canada and Ireland that has gradually been adopted by more and more countries. It is often celebrated by people dressing up, usually as something scary. Children will often go from door to door shouting "trick or treat" in the hopes of receiving candy, while adults tend to go to parties.',
                id: "824611",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 9
                },
                category: "secular-holidays"
            },
            {
                name: "Work on the first version of this calendar started.",
                description: "Aecius started work on the first version Gregorian Calendar for Fantasy Calendar on this day.",
                id: "824612",
                note: null,
                date: {
                    day: 23,
                    year: 2019,
                    month: 5
                },
                category: "miscellaneous-events"
            },
            {
                name: "Work on this version of the Gregorian Calendar started.",
                description: "On this day, Aecius started to rework the Gregorian Calendar from scratch to make it work with the updates Wasp and Alex implemented since the summer of 2019.",
                id: "824613",
                note: null,
                date: {
                    day: 21,
                    year: 2020,
                    month: 0
                },
                category: "miscellaneous-events"
            },
            {
                name: "Introduction of the Gregorian Calendar",
                description: "On this day in 1582 the Gregorian calendar was officially introduced, following Thursday October 4th on the Julian Calendar",
                id: "824614",
                note: null,
                date: {
                    day: 15,
                    year: 1582,
                    month: 9
                },
                category: "historical-events"
            }
        ],
        id: null,
        categories: [
            {
                name: "Natural Events",
                id: "natural-events",
                color: "#2E7D32"
            },
            {
                name: "Christian Holidays",
                id: "christian-holidays",
                color: "#9b2c2c"
            },
            {
                name: "Secular Holidays",
                id: "secular-holidays",
                color: "#0D47A1"
            },
            {
                name: "Historical Events",
                id: "historical-events",
                color: "#455A64"
            },
            {
                name: "Miscellaneous Events",
                id: "miscellaneous-events",
                color: "#0288D1"
            }
        ]
    },
    {
        name: "Calendar of Greyhawk",
        description: "Calendar of the world of Greyhawk.",
        static: {
            displayDayNumber: false,
            incrementDay: false,
            displayMoons: true,
            firstWeekDay: 0,
            overflow: false,
            weekdays: [
                {
                    type: "day",
                    name: "Starday",
                    id: "ID_a8e979984938"
                },
                {
                    type: "day",
                    name: "Sunday",
                    id: "ID_1b68bb78ca1b"
                },
                {
                    type: "day",
                    name: "Moonday",
                    id: "ID_c8b86aea0998"
                },
                {
                    type: "day",
                    name: "Godsday",
                    id: "ID_b8097a18e95b"
                },
                {
                    type: "day",
                    name: "Waterday",
                    id: "ID_1918c99949ca"
                },
                {
                    type: "day",
                    name: "Earthday",
                    id: "ID_fa295a1bab89"
                },
                {
                    type: "day",
                    name: "Freeday",
                    id: "ID_6a485ada3ae8"
                }
            ],
            months: [
                {
                    name: "Needfest",
                    type: "month",
                    length: 7,
                    id: "ID_b8a9e9da8a48"
                },
                {
                    name: "Fireseek",
                    type: "month",
                    length: 28,
                    id: "ID_39b90bd8189a"
                },
                {
                    name: "Readying",
                    type: "month",
                    length: 28,
                    id: "ID_48a9081ad839"
                },
                {
                    name: "Coldeven",
                    type: "month",
                    length: 28,
                    id: "ID_5a7b6beadb68"
                },
                {
                    name: "Growfest",
                    type: "month",
                    length: 7,
                    id: "ID_48c8d82b1908"
                },
                {
                    name: "Planting",
                    type: "month",
                    length: 28,
                    id: "ID_081a793a49da"
                },
                {
                    name: "Flocktime",
                    type: "month",
                    length: 28,
                    id: "ID_eb68a89a0a2a"
                },
                {
                    name: "Wealsun",
                    type: "month",
                    length: 28,
                    id: "ID_9b3a098ae908"
                },
                {
                    name: "Richfest",
                    type: "month",
                    length: 7,
                    id: "ID_f99b4b3a08b8"
                },
                {
                    name: "Reaping",
                    type: "month",
                    length: 28,
                    id: "ID_ebe9eb68ea39"
                },
                {
                    name: "Goodmonth",
                    type: "month",
                    length: 28,
                    id: "ID_fb3b6af9895b"
                },
                {
                    name: "Harvester",
                    type: "month",
                    length: 28,
                    id: "ID_395bcb399b8a"
                },
                {
                    name: "Brewfest",
                    type: "month",
                    length: 7,
                    id: "ID_e8b908181afa"
                },
                {
                    name: "Patchwall",
                    type: "month",
                    length: 28,
                    id: "ID_cbda3b399969"
                },
                {
                    name: "Ready'reat",
                    type: "month",
                    length: 28,
                    id: "ID_592a2a690bf8"
                },
                {
                    name: "Sunsebb",
                    type: "month",
                    length: 28,
                    id: "ID_39e8faf8e9b8"
                }
            ],
            moons: [
                {
                    name: "Luna",
                    cycle: 28,
                    offset: 3,
                    faceColor: "#ffffff",
                    shadowColor: "#292b4a",
                    id: "ID_f8997b39b8b8"
                },
                {
                    name: "Celene",
                    cycle: 91,
                    offset: 46,
                    faceColor: "#ffffff",
                    shadowColor: "#292b4a",
                    id: "ID_7afbb9b88be8"
                }
            ],
            leapDays: [],
            eras: [
                {
                    name: "Common Year",
                    description: "",
                    format: "Year {{year}} CY",
                    start: {
                        year: 1,
                        month: 0,
                        day: 1
                    }
                }
            ]
        },
        current: {
            year: 591,
            day: 1,
            month: 0
        },
        events: [
            {
                name: "Winter Solstice",
                description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
                id: "824573",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Spring Equinox",
                description: "The 4th of Growfest is the first day of Low Summer in Oerth's Calendar. This is the point where the sun crosses Oerth's equator. Holidays celebrated on this date include Saint Cuthbert's Day, the Feast of Edoira, the Spring Feast, and Raxivort's Orgy. This is also the day on which the priests of Tlaloc ritually sacrifice and eat the flesh of human children or babies in their patron's honor. Worshippers of Rillifane Rallathil celebrate the Budding on this day, a joyful celebration of new life celebrated through dance and song in oak groves in the heart of the forest. A ritual hunt of a noble heart is held on this day, after which the venison is eaten in celebration of Rillifane's bounty.\n\nAlso celebrated on this date is the Sanctification of Renewal, a sacred holiday to the followers of Garyx.",
                id: "824574",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Summer Solstice",
                description: "\tAt the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
                id: "824575",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Autumn Equinox",
                description: "The 4th of Brewfest is the Autumnal Equinox, when the sun crosses the equator from north to south. This date is the official end of high summer and the beginning of autumn on the Greyhawk Calendar. This date is holy to Wenta and is sometimes regarded as an unofficial holy day of Velnius. Among the xvarts, it also marks the celebration of Raxivort's Orgy. The worshippers of Rillifane Rallathil celebrate the Transformation on this day, a time of dancing and spiritual rebirth marking the beginning of autumn and the promise that spring will come again.",
                id: "824576",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Great Moons Glory",
                description: "The night of Great Moon's Glory on Readying 11th, when Luna is full but Celene is new. It is holy to Celestian, and a time when offerings are left to Atroa to beg her to come early and to Telchur to request that he peacefully leave. Druids of the Old Faith are known to also hold this night as auspicious, but few outside their circles know the details.",
                id: "824577",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Dark Night",
                description: "Dark Night, also called Black Night, Star Night, and the Night of Hopeful Dawn, is observed on Goodmonth 11. It is a holy night for the church of Celestian because the stars are so easy to observe without the light of one of the moons getting in the way.\n\nIt is also a holy night for the church of Rao, who refer to it as the Night of Hopeful Judgment. They believe that Rao chooses this time to separate the sinful from the righteous in the afterworld. There is also a prophecy in the Raoan holy text, the Book of Incarum, that claims that Rao will cleanse the world of evil on this night, sometime in the future.\n\nThe priesthood of Kurell consider it holy, too, calling it Kurell's Night, requiring the faithful to undertake special missions on this night to prove their cleverness and skill. Kurell smiles particularly on acts of theft or vengeance performed on his holy night, blessing those who do so successfully. Donations to Kurell's church are encouraged afterwards, for Kurell may take vengeance against those who do not properly thank him for his aid.\n\nMost other people regard Dark Night as a time of ill omen, fearing it as much as the night of the Blood Moon Festival. Bonfires are burned from dusk till dawn, particularly in small villages and in Elmshire and Narwell. Orc and goblin religions view it as an excellent night for raiding settlements. Certain evil cults perform kidnappings, murders, and vile rites during this period. On the other hand, lycanthropic activity is at its lowest.\n\nIggwilv and Tuerny attempted to summon a demonic army to Luna on this night in 585 CY.",
                id: "824578",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Agelong",
                description: "Agelong, observed on the 4th of Richfest (the Summer Solstice), is the celebration of the legendary creation of the elves. According to myth, after Corellon Larethian spilled his blood during the battle with Gruumsh, the rest of the Seldarine gathered this sacred blood and mingled it with the tears shed during the same battle by Sehanine Moonbow. The Seldarine then infused these divine fluids into vessels they had created to be the bodies of the elven race.\n\nThis day is, among the elves, mostly an excuse to go orc-hunting. Elven warriors cut themselves with daggers carved from volcanic glass to remind themselves of Corellon's own wound from Gruumsh's spear, then strive to slaughter as many orcs as possible during the night.",
                id: "824579",
                note: null,
                date: {
                    day: 4,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Blood Moon Festival",
                description: "The Blood Moon Festival is celebrated on Coldeven 11, the night when Luna is full just before the Spring Equinox. On this night, curses are said to be twice as powerful and the forces of evil are at their strongest. Fiends roam the lands, and human sacrifice is common. This night is held especially sacred by cultists of Nerull, but worshipers of Kurell also mark this night as especially auspicious for acts of vengeance. Goodly folk superstitiously guard their homes with horseshoes, holy water, bottles of milk, and iron filings.\n\nDemonic forces sent by Iuz destroyed the leadership of the Horned Society during the Blood Moon Festival of 583 CY.\n\nIt's possible that this is also the night the elves celebrate as Faerieluck.",
                id: "824580",
                note: null,
                date: {
                    day: 11,
                    year: null,
                    month: 3
                },
                category: null
            },
            {
                name: "Breadgiving Day",
                description: "Celebrated on on the Winter Solstice (Needfest 4), Breadgiving Day, is a day of charity observed in the Free City of Greyhawk by the faiths of Pelor, Rao, and Saint Cuthbert.\n\nThis was not originally a religious holiday as such. It is a new practice that began after the Greyhawk Wars to feed the refugees that flooded the city during that time. Since of Old City who line up by the hundreds along the Processional from the Black Gate. The booths are worked by low-ranking priests from all three religions, with armed priests of St. Cuthbert providing security. A smaller event is held simultaneously below Wharfgate in Greyhawk City's Shacktown.\n\nThe clergies of Heironeous, Pholtus, and Trithereon do not participate, but they compete with one another to perform good deeds the whole week of Needfest. The rivalries between Trithereon and Pholtus, Trithereon and Heironeous, and Pholtus and St. Cuthbert are such that the faiths sometimes fall into arguments and even blows if their \"good deeds\" conflict with each other. Greyhawk's rowdy citizens often cheer and place bets on the outcomes of these quarrels.\n\nThe priests of Pelor hold a morning ceremony on this day with a sermon, singing, and music.",
                id: "824581",
                note: null,
                date: {
                    day: 4,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Brewfest",
                description: "Also called Drunken Days or the Feast of Brewers, Brewfest, the fourth festival week of Oerth's calendar, is a rowdy period unsurprisingly claimed as a holy time by the churches of Olidammara and Wenta. The Free City of Greyhawk does not celebrate the entire week, but Brewfest 1 and Brewfest 7 are both set aside as public holidays. In Elmshire, the week is spent in restful, carefree music, drinking, and dancing. In Hardby it is spent with fistfights, riots, and ensuing hangovers. In Narwell it is celebrated with ale-brewing contests, horse races, beatings, and robbery. In Safeton it is celebrated with nervous violence and nightly orc hunts. The week is also sacred to the Old Faith.\n\nThe elves call this week Fallrite, and use it to contemplate the spirits of their ancestors, the passage to the afterworld, and the fragility of life. They believe other races make merry during Brewfest because they are \"hiding\" to avoid facing death's reality. In contrast, the olvenfolk strive to fulfill the most important of their duties and reach the most crucial of their decisions during this time of year. The elven kings and queens traditionally judge capital cases during Fallrite.",
                id: "824582",
                note: null,
                date: {
                    day: 4,
                    year: null,
                    month: 12
                },
                category: null
            },
            {
                name: "Faerieluck",
                description: "Faerieluck is a holiday celebrated by the elves in early spring, when the power of Faerie runs high and they celebrate with their fey cousins: the sprites, buckawns, pixies, nymphs and so forth. The point of the festival is to remind the elves of their ancient kinship with these creatures. The day is spent playing practical jokes, engaging in battles of wit, and general merriment.",
                id: "824583",
                note: null,
                date: {
                    day: 11,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Feast of Edoira",
                description: "The Feast of Edoira is a holiday celebrated in the Domain of Greyhawk on Growfest 4, during the Spring Equinox. It is named after Edoira, a priest of Rao who centuries ago established the Edoiran Compact, a pact by which many of the lawful good-aligned faiths and people of the Domain could agree to cooperate. The Compact was later extended to non-lawful good and neutral faiths.\n\nEdoira was never deified but was revered by many good faiths in the Domain. The holiday was marked by religious services on Godsday of Growfest led by the clerics of the good faiths who partook of the Compact, and secular festivals by the ordinary citizenry. Observance of the holiday has declined over the years, though the clergies of Rao and Pelor still hold their traditional interfaith services, with occasional participation by the priesthoods of Heironeous and Mayaheine. Since the end of the Greyhawk Wars most of the Domain's outlying communities no longer observe the holiday. Only one church in Safeton still does so.",
                id: "824584",
                note: null,
                date: {
                    day: 4,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Desportium of Magic",
                description: "The highlight of Growfest is the Desportium of Magic. During this day torchlight only, no magic illumination is supposed to be used. Wizards and Sorcerers then perform feats of illusion and magic trying to outdo one another with their displays. Usually there is a panel of judges to decide, in the larger cities there is usually a limit of 5-person teams competing. Each performance during the Desportium of Magic uses a long established theme, that of an attack on the town by various monsters and Dark Elves, repelled by brave warriors and spellcasters. The displays, made up of any number of spells cast without the use of magic devices, cannot actually cause any harm to property or people, but must be as wonderful, striking, detailed, and lifelike as possible.\n\nThis motif is based on actual attacks through the years from the Uttermost War to the most recent Great Slave Raids. The idea is to make the attackers as dreadful as possible and the defenders as heroic as possible, secondary is to make sure that people will always remember the terror of the Uttermost War. In large cities like the CSIO and CSWE and Tarantis, these performances last all night and are amazing to watch. In smaller villages without spellcasters, puppet plays are often done in its stead.",
                id: "824585",
                note: null,
                date: {
                    day: 7,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Holy Day of Pelor",
                description: "The Holy Day of Pelor, also known as Giving Day and Midsummer's Day, is celebrated on the Summer Solstice.\n\nBecause Pelor is widely loved by the commoners, this day is set aside as a day of rest in the Free City of Greyhawk. Only essential work is done on this day. Many merchants close their shops on Giving Day as well out of respect for the Sun Father and his teachings. Gambling houses are closed, but not hostelries, for Giving Day is a day of feasting and goodwill, a time for enjoying the fruits of the Oerth.\n\nPublic services are held from dawn until noon by Pelor's priests, outdoors if the weather permits (which if almost always does, as the clerics use weather-controlling magic for maximum sunlight). Even Greyhawk City's large temple of Pelor is not big enough to hold the throngs who come to celebrate on this day, so throngs of the faithful fill the temple grounds in the Garden Quarter, spilling out from the Millstream to the Nobles' Wall, and to the road leading toward Greyhawk's Grand Theater. Many come, of course, for the free meal the priests provide after the service. The Pelorian priests are well aware of this, but believe that for the needy, a full stomach must come before wisdom and learning. Members of Greyhawk's Guild of Thieves and Beggar's Union, many of whom remember Midsummer's Day fondly from their orphaned childhoods, both protect priests of Pelor on this day, and woe onto those who attempt to test them on this matter.\n\nPriests of Pelor, bedecked in yellow and gold, parade about the streets, demanding donations for their charitable works, freely using guilt to squeeze more from stingy purses. Free healings are given out, particularly to children. Most Greyhawkers wear at least one item of yellow cloth on this day out of respect.\n\nSome crusading Pelorians crusade against evil lycanthropes on this night, since both Celene and Luna are full.",
                id: "824586",
                note: null,
                date: {
                    day: 4,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Holy Day of Serenity",
                description: "The Holy Day of Serenity, on Reaping 10, is celebrated in Veluna as a holy day of Rao, though it's actually the anniversary of Veluna's secession from Furyondy in 476 CY. It is celebrated with religious singing and worship.",
                id: "824587",
                note: null,
                date: {
                    day: 10,
                    year: null,
                    month: 9
                },
                category: null
            }
        ],
        id: null,
        categories: [
            {
                name: "Natural Events",
                id: "natural-events",
                color: "#2E7D32"
            },
            {
                name: "Religious Holidays",
                id: "religious-holidays",
                color: "#FFEB3B"
            },
            {
                name: "Secular Holidays",
                id: "secular-holidays",
                color: "#0D47A1"
            },
            {
                name: "Magical Events",
                id: "magical-events",
                color: "#311B92"
            },
            {
                name: "Miscellaneous Events",
                id: "miscellaneous-events",
                color: "#0288D1"
            }
        ]
    },
    {
        name: "Calendar of Golarion",
        description: "Calendar for the world of Pathfinder.",
        static: {
            displayDayNumber: false,
            firstWeekDay: 0,
            incrementDay: false,
            displayMoons: true,
            overflow: true,
            weekdays: [
                {
                    type: "day",
                    name: "Moonday",
                    id: "ID_db8af8f85b8a"
                },
                {
                    type: "day",
                    name: "Toilday",
                    id: "ID_f87a094b2849"
                },
                {
                    type: "day",
                    name: "Wealday",
                    id: "ID_2a5bb88b3ae8"
                },
                {
                    type: "day",
                    name: "Oathday",
                    id: "ID_c93a0be8981b"
                },
                {
                    type: "day",
                    name: "Fireday",
                    id: "ID_2b7b59794a0b"
                },
                {
                    type: "day",
                    name: "Starday",
                    id: "ID_baaa6a89ca1b"
                },
                {
                    type: "day",
                    name: "Sunday",
                    id: "ID_f9baca088b28"
                }
            ],
            months: [
                {
                    name: "Abadius",
                    type: "month",
                    length: 31,
                    id: "ID_dad9da89f818"
                },
                {
                    name: "Calistril",
                    type: "month",
                    length: 28,
                    id: "ID_980a88cb9b68"
                },
                {
                    name: "Pharast",
                    type: "month",
                    length: 31,
                    id: "ID_a9c96ac80908"
                },
                {
                    name: "Gozran",
                    type: "month",
                    length: 30,
                    id: "ID_a99a697b9abb"
                },
                {
                    name: "Desnus",
                    type: "month",
                    length: 31,
                    id: "ID_8bcad9a8f84a"
                },
                {
                    name: "Sarenith",
                    type: "month",
                    length: 30,
                    id: "ID_484a49a998db"
                },
                {
                    name: "Erastus",
                    type: "month",
                    length: 31,
                    id: "ID_9a48e9b96938"
                },
                {
                    name: "Arodus",
                    type: "month",
                    length: 31,
                    id: "ID_bbe99b2afaea"
                },
                {
                    name: "Rova",
                    type: "month",
                    length: 30,
                    id: "ID_ba39fbe8c8b8"
                },
                {
                    name: "Lamashan",
                    type: "month",
                    length: 31,
                    id: "ID_69d93ba9dba8"
                },
                {
                    name: "Neth",
                    type: "month",
                    length: 30,
                    id: "ID_4ad8fb79eb6a"
                },
                {
                    name: "Kuthona",
                    type: "month",
                    length: 31,
                    id: "ID_9a3a8b388939"
                }
            ],
            moons: [
                {
                    name: "Somal",
                    cycle: 29.5,
                    offset: 9.5,
                    faceColor: "#ffffff",
                    shadowColor: "#292b4a",
                    id: "ID_b87ab959cac9"
                }
            ],
            leapDays: [
                {
                    name: "Leap Day",
                    type: "leapday",
                    interval: [
                        {
                            ignore: false,
                            exclusive: false,
                            interval: 8
                        }
                    ],
                    offset: 0,
                    timespan: 1,
                    intercalary: false,
                    id: "ID_88c8da3b8b2b"
                }
            ],
            eras: [
                {
                    name: "Age of Serpents",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: 4720,
                        month: 8,
                        day: 15
                    }
                },
                {
                    name: "Age of Darkness",
                    description: "",
                    format: "Year {{abs_year}} - {{era_name}}",
                    start: {
                        year: -5300,
                        month: 0,
                        day: 1
                    }
                },
                {
                    name: "Age of Anguish",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: -4500,
                        month: 8,
                        day: 1
                    }
                },
                {
                    name: "Age of Destiny",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: -3500,
                        month: 8,
                        day: 1
                    }
                },
                {
                    name: "Age of Enthronement",
                    description: "",
                    format: "Year {{year}} AR - {{era_name}}",
                    start: {
                        year: 1,
                        month: 8,
                        day: 1
                    }
                },
                {
                    name: "Age of Lost Omens",
                    description: "",
                    format: "Year {{year}} AR - {{era_name}}",
                    start: {
                        year: 4606,
                        month: 8,
                        day: 1
                    }
                }
            ]
        },
        current: {
            year: 4720,
            day: 15,
            month: 0
        },
        events: [
            {
                name: "Summer Solstice",
                description: "At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
                id: "824492",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Winter Solstice",
                description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
                id: "824493",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Spring Equinox",
                description: "The equinox marks the day and the night is equally as long.",
                id: "824494",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Autumn Equinox",
                description: "The equinox marks the day and the night is equally as long.",
                id: "824495",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Eternal Kiss",
                description: "Zon-Kuthon\n\nCulminating on the first new moon of the new year, the Eternal Kiss is an 11 day ceremony honoring Zon-Kuthon. On the final day, a living sacrifice is made to the Dark Prince, after the victim is pampered and pleasured for the ten days prior. The sacrifice can either be an enemy or a great devotee of the church, and is kept alive for as long as possible during the torture using magic. This holiday often involves fortune-telling as a part of the torture, using the victim's entrails or their cries of pain to determine the Midnight Lord's will. Occasionally it is believed that the sacrifice will prophesy with the voice of Zon-Kuthon himself.",
                id: "824496",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Longnight",
                description: "Longnight is a holiday celebrated on the full moon in the winter month of Abadius. During the festival, revelers stay up all night to greet the dawn to defy the long winter months. It is even celebrated in Irrisen, where there are no natural seasons.",
                id: "824497",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Foundation Day",
                description: "Absalom, Milani\n\nFoundation Day is a civil holiday celebrated on the New Year (1 Abadius) in Absalom to commemorate the city's founding by the god Aroden in 1 AR.",
                id: "824498",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Pjallarane Day",
                description: "Irrisen\n\nPjallarane Day is an ancient holiday in Irrisen celebrated on 1 Abadius (New Year's Day). Every 100 years, Baba Yaga returns to Golarion to remove her daughter from the throne of Irrisen, and put another daughter on the throne instead. In 3713 AR the third Queen of Irrisen, Pjallarane, and her children chose to resist. Baba Yaga ruthlessly crushed the rebellion in a single day, which is now celebrated as a holiday. The festival includes feasting and the burning of effigies of tar and straw. This is a reminder of the fate of Pjallarane's followers, who were burned alive as a warning to all those who would oppose Baba Yaga.",
                id: "824499",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Vault Day",
                description: "Abadar\n\nVault Day is a holiday held on 6 Abadius in honor of Abadar, Master of the First Vault.",
                id: "824500",
                note: null,
                date: {
                    day: 6,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Ruby Prince's Birthday",
                description: "Osirion\n\nThe Ruby Prince's Birthday is a national holiday in Osirion in honor of the birthday of Khemet III, the Ruby Prince. It is celebrated annually on the 20 Abadius.",
                id: "824501",
                note: null,
                date: {
                    day: 20,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Merrymead",
                description: "Druma, Cayden Cailean\n\nA holiday occurring on 2 Calistril, Merrymead was started in Druma and is supposed to be a time to share of the last of the previous year's mead with the rest of the community.\n\nIn current times, most people just use it as an excuse to drink excessively. The poor travel from bar to bar drinking whatever alcohol they can afford, while the wealthy will set aside specific vintages for this day. A known consequence of this day are 'mead riots' that happen when there are more celebrants than there is alcohol to serve them. This leads to a violent, destructive group of people in a crowded bar. If this is a common occurrence for particular cities, they may reinforce their guard force for the inevitably eventful night.",
                id: "824502",
                note: null,
                date: {
                    day: 2,
                    year: null,
                    month: 1
                },
                category: null
            },
            {
                name: "King Eodred II's Birthday",
                description: "Korvosa\n\nKing Eodred II's Birthday was a local holiday in the Varisian city-state of Korvosa and was celebrated on 16 Calistril. It commemorated the birthday of its former ruler, King Eodred Arabasti II, who decreed that on the day, scantily clad women would dance and serve free wine to celebrants.",
                id: "824503",
                note: null,
                date: {
                    day: 16,
                    year: null,
                    month: 1
                },
                category: null
            },
            {
                name: "Loyalty Day",
                description: "Cheliax, Asmodeus\n\nLoyalty Day is a holiday in the nation of Cheliax commemorating the date on Calistril 19, 4640 AR when House Thrune signed the Treaty of Egorian, declaring it the victor in the Chelish Civil War and ruler of the empire. Because of House Thrune's well-known ties to the infernal, this holiday is also observed by the Church of Asmodeus who consider it a feast day. The church along with local governments provide a free meal to all citizens to remind them of the benefits House Thrune provides them with.",
                id: "824504",
                note: null,
                date: {
                    day: 19,
                    year: null,
                    month: 1
                },
                category: null
            },
            {
                name: "Fateless Day",
                description: "Mahathallah\n\nFollowers of Mahathallah mark each leap day as Fateless Day, when the River of Souls temporarily stops and souls can escape Pharasma's judgment. They perform many sacrificial and suicidal rituals on Fateless Day.",
                id: "824505",
                note: null,
                date: {
                    day: 29,
                    year: null,
                    month: 1
                },
                category: null
            },
            {
                name: "Golemwalk Parade",
                description: "Magnimar, Varisia\n\nThe Golemwalk Parade is a parade of golems created by amateurs hoping to win a monetary grant, or even a job, from the Golemworks in Magnimar. At the end of the parade along the Avenue of Honors, the constructs are judged.",
                id: "824506",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Day of Bones",
                description: "Pharasma\n\nPriests and worshipers of the Lady of Graves parade the bodies of the recently dead on this holiday, holding free burials afterwards.",
                id: "824507",
                note: null,
                date: {
                    day: 5,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Sable Company Founding Day",
                description: "Korvosa\n\nSable Company Founding Day is a holiday marking the founding of the Sable Company of the Varisian city-state of Korvosa. Celebrated on 6 Pharast, the day is marked by somber military parades that generally preclude the consumption of alcohol, a staple on most other holidays.",
                id: "824508",
                note: null,
                date: {
                    day: 6,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Night of Tears",
                description: "Solku\n\nThe Night of Tears held annually on 7 Pharast in the Katapeshi town of Solku. It is a solemn vigil commemorating those lost in the Battle of Red Hail in 4701 AR.",
                id: "824509",
                note: null,
                date: {
                    day: 7,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Kaliashahrim",
                description: "Qadira\n\nKaliashahrim is a national holiday celebrated on Pharast 13 in Qadira that celebrates the Padishah Emperor of distant Katheer, and Qadira's loyalty to him.",
                id: "824510",
                note: null,
                date: {
                    day: 13,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Conquest Day",
                description: "Nex\n\nEvery year, on the 26th of Pharast, Elder Architect Oblosk — oldest member of Nex's Council of Three and Nine — ascends to the highest balconies of the Bandeshar in Quantium. In a voice made thunderous by the platform's magic, the wizened pech councilman spends the hours from dusk to just past noon enumerating the atrocities committed by the necromancers of Geb upon the people of Nex, culminating with the disappearance of the archwizard Nex himself. At the conclusion of this record of national wounds, the country's eleven other council members join Oblosk in renewing their yearly vow to neither forget nor forgive the Gebbites' atrocities and to again swear in their lost ruler's name to endlessly wage war against their ancient enemies.\n\nOn this day, known as Conquest Day, all the people of Nex are expected to share in their leaders' oaths, to celebrate the shared patriotism of their wondrous nation, and to remember the sacrifices of heroes past. This also makes it a day for many Nexian wizards to reveal deadly new spells, gigantic constructs, and audacious arcane masterworks—which many creators promise to be the doom of their foes. Even throughout the rest of the Inner Sea region, many crusaders, rebels, and zealots observe Conquest Day as a day to renew blood oaths, launch long-planned battles, and finally take revenge. It is a day for words of honor, a day for battle cries, and a day where glory most favors the bold.",
                id: "824511",
                note: null,
                date: {
                    day: 26,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Days of Wrath",
                description: "Asmodeus, Cheliax\n\nThe Days of Wrath, or Dies Irae, are a holiday celebrated on both solstices and equinoxes in the nation of Cheliax and wherever Asmodeus is worshiped. They are primarily a national holiday and not truly a religious one, but the two are often confused due to Cheliax's current political climate. Various contests and blood sports are held on these days, promoting those elites who can clearly demonstrate their superiority over others. Some believe that these competitions are watched and judged by devils themselves. In the parts of the world where the Prince of Darkness is not openly venerated, these holidays take on a different tone: they are used to settle old grievances and also to end contracts.\n\nIn these days, bloodsports are organized into cities' stadiums. Slaves and servants of any master may choose to enter the arena for one-on-one bloody battles to the death. Free men and women of all classes are free to enter the arena as well. The entrants fight in rounds until at last one stands alone. The winner is granted freedom from slavery or servitude, erasure of all debts, and a purse of gold.\n\nThe winter solstice sees the culmination of the Dies Irae, with all the winners of the three previous bouts summoned to Egorian to fight to the death for the amusement of the nobles. The winner is given a title of baronet and a plot of land.",
                id: "824512",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Firstbloom",
                description: "Gozreh\n\nFirstbloom is a holiday celebrating the first planting of the agricultural season, and generally associated with the weather god Gozreh. It falls on the vernal equinox. Many farming communities see it as the beginning of the year, even though conventional calendars begin two months earlier. Despite weariness after a full day planting, many farming communities hold celebrations come the night: feasting, dancing and courtship feature showing the cycle of nature.",
                id: "824513",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "First Cut",
                description: "Falcon's Hollow\n\nThe First Cut celebration in Falcon's Hollow used to mark the start of the work in the woods each spring. Now, however, it is a meaningless ramshackle ceremony as Thuldrin Kreed forces the lumber crews to work through even during the coldest months in the winter. Still, First Cut brings people out to celebrate the start of the spring.",
                id: "824514",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Currentseve",
                description: "Gozreh\n\nOn this religious holiday, all who travel on the water make offerings to Gozreh in the hopes of safe passage for the coming year.",
                id: "824515",
                note: null,
                date: {
                    day: 7,
                    year: null,
                    month: 3
                },
                category: null
            },
            {
                name: "Taxfest",
                description: "Abadar\n\nNo one enjoys paying taxes but the collection of fair taxes is considered an integral part of the maintenance of society, and is therefore holy to the god Abadar. Every year on the 15th of Gozran, priests of the church of Abadar spend the day walking city streets, doing what they can to make the bitter pill of annual taxes a bit easier to swallow.\n\nThe Business of the Day\n\nFrom dawn to dusk, clerics of Abadar attend the tax collectors of sizeable communities as the tax wagons roll from door to door. The church officials monitor these activities to make sure that the process is conducted respectfully and justly, and that citizens know that the process is monitored. More than just aiding in the yearly errand, the faithful personally thank every citizen for contributing to the improvement of their city, extol the public works funded by their contributions, and foretell the grandeur of civic projects to come. The disenfranchised and destitute they attempt to comfort as best they can, quoting from their god's dogma on work and worthiness, but this is not a day for discounts or deferrals. The citizens are able to voice their concerns and ideas as to where the monies levied should best be applied. Citizens are free to speak their mind on any issue here without fear of repercussion.\n\nThe Celebrations of the Day\n\nAt dusk, the Abadarans host several celebrations in parks, plazas, and other communal areas about the city, organizing donations and contributions from local vendors to feed and entertain all-comers. Having already preached to most of the city over the course of the day, the clerics perform only a brief opening ceremony, dedicating the feast to Abadar, the city, and its great people. These celebrations are often quite distinct from neighbourhood to neighbourhood and are almost always divided along economic boundaries.\n\nThe festivities involving the wealthiest citizens usually happen on the steps of city hall or other grand civic buildings and feature the best music and food, but often little more than polite card and guessing games. These galas usually wrap up by midnight.\n\nFor the common folk, the parks and marketplaces take on a carnival atmosphere, with simple but good food, local ales, performances by talented citizens, and games of chance going on well into the night. A prevailing superstition through these festivals is that, during the celebration, it is lucky to kiss—or in some regions, pinch—a cleric of Abadar, leading to many a rosy-cheeked cleric.\n\nEven the city's poor are given reason to celebrate, as the local temple of Abadar hosts a cheery but unabashedly religious gathering on its steps, feeding all comers, doling out a hearty ration of wine, singing hymns of the faith, and providing tokens for a second wine ration for any who return to attend a service within the month.\n\nFor a holiday that revolves around paying taxes, this Abadaran festival is not as reviled as one might expect.",
                id: "824516",
                note: null,
                date: {
                    day: 15,
                    year: null,
                    month: 3
                },
                category: null
            },
            {
                name: "Wrights of Augustana",
                description: "Andoran, Brigh\n\nThis local festival in the Andoran port city of Augustana is held to honor and celebrate the local shipbuilding industry as well as the navy. The mathematics and engineering required for the building of the ships is praised by Brigh's faithful.",
                id: "824517",
                note: null,
                date: {
                    day: 16,
                    year: null,
                    month: 3
                },
                category: null
            },
            {
                name: "Gala of Sails",
                description: "Absalom\n\nOne of two local festivals where kite-battlers compete.",
                id: "824518",
                note: null,
                date: {
                    day: 27,
                    year: null,
                    month: 3
                },
                category: null
            },
            {
                name: "Remembrance Moon",
                description: "Iomedae, Lastwall, Ustalav\n\nA national holiday to commemorate those who died in the Shining Crusade against the Whispering Tyrant. Although not strictly a religious holiday, Iomedae's name is heavily invoked, due to her many military accomplishments during the war.",
                id: "824519",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Angel Day",
                description: "Magnimar, Varisia\n\nAngel Day is a local Magnimarian holiday celebrated on 31 Desnus. The annual celebration marks the founding of the city, and its founders' flight from Korvosa. It also honors the presence and popular worship of the empyreal lords, which predates the city by centuries. During the festival, nearly all local businesses shut their doors and the citizens take part in countless feasts, masquerade balls dressed as angels, and the burning of devil effigies meant to symbolize infernally-influenced Korvosa.",
                id: "824520",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Old-Mage Day",
                description: "Holiday celebrating Old-Mage Jatembe, the father of Garundi magic.",
                id: "824521",
                note: null,
                date: {
                    day: 13,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Multiple Events",
                description: "Festival of the Ruling Sun\n\nShizuru\n\nCelebrates the longest day.\n\nFounder's FollyUlar Kel\n\nAdventurers and children follow a hallucinatory red stripe along zigzagging paths, amusing residents.\n\nHarvest Bounty Festival\n\nSegada\n\nMarking the beginning of the harvest season, this festival involves sporting tournaments, dancing, storytelling, and feasts. Celebrants give thanks and eliminate grudges.\n\nLongwalk\n\nGrandmother Spider, Nurvatchta; southern hemisphere winter solstice\n\nCelebrates the escape of Nurvatchta's anadi people from bondage, in part thanks to Grandmother Spider lengthening their cover of darkness in their escape.\n\nRitual of Stardust\n\nDesna\n\nFestival held in the evening and through the night, where Desna's faithful sing songs and throw sand and powdered gems into bonfires.\n\nRunefeast\n\nMagrim\n\nDay marking the day dwarves learnt the first runes and the proper way to pray.\n\nSunwrought FestivalSarenrae, Brigh\n\nDay commemorating the defeat of Rovagug by Sarenrae, celebrated with the flying of kites, fireworks, and gift giving.",
                id: "824522",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Burning Blades",
                description: "Sarenrae\n\nThe holy, month-long festival ends on this day, featuring dances with flaming blades.",
                id: "824523",
                note: null,
                date: {
                    day: 10,
                    year: null,
                    month: 5
                },
                category: null
            },
            {
                name: "Liberty Day",
                description: "Andoran, Milani\n\nHoliday celebrating Andoran's independence. Milanites celebrate that very little violence occurred.",
                id: "824524",
                note: null,
                date: {
                    day: 3,
                    year: null,
                    month: 5
                },
                category: null
            },
            {
                name: "Talon Tag",
                description: "Andoran\n\nThe Eagle Knights perform aerial displays in Almas on this day.",
                id: "824525",
                note: null,
                date: {
                    day: 21,
                    year: null,
                    month: 5
                },
                category: null
            },
            {
                name: "Riverwind Festival",
                description: "Korvosa\n\nAn early summer holiday that honors a cooling shift in the winds, celebrated with much drinking.",
                id: "824526",
                note: null,
                date: {
                    day: 22,
                    year: null,
                    month: 5
                },
                category: null
            },
            {
                name: "Inheritor's Ascendance ",
                description: "Iomedae\n\nInheritor's Ascendance, originally called 'Herald's Day', honours the day that Iomedae was chosen by the god Aroden to become his herald (thus replacing Arazni), thus boosting her power beyond that of a fledgling goddess. This holiday was renamed after the demise of Aroden.",
                id: "824527",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "First Crusader Day",
                description: "Mendev\n\nHoliday in celebration of the continuing crusade against the demons of the Worldwound.",
                id: "824528",
                note: null,
                date: {
                    day: 6,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "Day of Silenced Whispers",
                description: "Ustalav\n\nThe Day of Silenced Whispers is an Ustalavic holiday celebrated every 9 Arodus marking the defeat of the Whispering Tyrant in 3827 AR by the coalition forces of the Shining Crusade and the liberation of the country after centuries of undead domination.",
                id: "824529",
                note: null,
                date: {
                    day: 9,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "Founding Day",
                description: "Ilsurian, Varisia\n\nFestival celebrating the founding by Ilsur of the town of Ilsurian in 4631 AR.",
                id: "824530",
                note: null,
                date: {
                    day: 10,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "Armasse",
                description: "Aroden, Iomedae, Milani\n\nThe raucous, week-long festival known as Armasse is held each year beginning on 16 Arodus. The celebration — once dedicated to the god Aroden — is still important to the faithful of Iomedae, who use it to train commoners in combat, ordain apprentice clergy, pick squires for knights, and teach military history, hoping to prevent the mistakes of the past from being repeated. Among those not dedicated to the Inheritor the holiday has lost most of its religious significance since Aroden's death, tending now only toward wild partying, a fact that has precluded the diabolist authorities of Cheliax from prohibiting Armasse outright. Nevertheless, in places where the church of Asmodeus is openly allowed, it hosts special activities for its parishioners during the same week in an effort to counter the influence of the holiday. The city of Corentyn is especially known for its extravagant Armasse festivities.",
                id: "824531",
                note: null,
                date: {
                    day: 16,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "Saint Alika's Birthday",
                description: "Korvosa\n\nQuiet holiday honoring the birth of Saint Alika the Martyr.",
                id: "824532",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "Archerfeast",
                description: "Erastil\n\nArcher's Day or Archerfeast is a holiday of the god Erastil held annually on the 3rd of Erastus. Despite the holiday's origins in the worship of Erastil, common country folk from the Lands of the Linnorm Kings to Taldor celebrate the height of summer with a day set aside for establishing new relationships, enjoying current camaraderie, and celebrating the gifts of the gods. Archery competitions are held frequently in which the men test their skill with the bow through progressively harder trials. The exact form of competition is different from place to place, and the winner is awarded a rack of elk horns and a quiver of blessed arrows. He is also given the title of \"Protector\", which he holds until the next year.\n\nWhile the festival's traditions emphasize contests of marksmanship, most have expanded to exhibit talents of all types, from baking and storytelling to racing and mock combat. Aside from encouraging a fair-like atmosphere, many of the displays and competitions serve one of two secondary purposes: either as a way for merchants to show off their superior livestock and wares, or (more popularly) as a way for eligible men and women to show off to each other.\n\nWhile the day's events at most Archerfeast fairs are filled with games, food, and crafts, the night brings dancing, drinking, pranks, and the crowning of the princes and princesses of spring and summer for the two single youths and two single adults who fared best in the day's events. The festivities continue late into the evening, but end promptly at midnight, so that in true Erastilian fashion the next day's responsibilities are not overly impeded. For those not of Erastil's flock, however, private parties, drinking, and trysting carry on long into the next morning.",
                id: "824533",
                note: null,
                date: {
                    day: 3,
                    year: null,
                    month: 6
                },
                category: null
            },
            {
                name: "Founding Festival",
                description: "Korvosa\n\nFounding Festival is a local Korvosan celebration marking the establishment of the city in 4407 AR. Held annually on 14 Erastus, the festival is a chance for the citizens to let off some steam, drink copiously, and watch magical light shows late into the night.",
                id: "824534",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 6
                },
                category: null
            },
            {
                name: "Burning Night",
                description: "Razmiran\n\nItems or people who have transgressed against the god-king of Razmiran are burned on this day.",
                id: "824535",
                note: null,
                date: {
                    day: 17,
                    year: null,
                    month: 6
                },
                category: null
            },
            {
                name: "Kianidi Festival",
                description: "Garundi\n\nThe Kianidi Festival is a week long event held annually between 15 and 21 Erastus by Garundi people everywhere. The Garundi have a powerful belief in belonging to a specific location in this world, with clans or tribes sometimes traveling for years in search of their true home. In these travels each individual will collect small mementos of the places she or he has visited in order to remember them and maintain a spiritual connection. During the Kianidi, a tribe will gather and display these mementos to the group. The best ones are chosen and made part of the clan or tribal history, something which Garundi feel is a great honor.",
                id: "824536",
                note: null,
                date: {
                    day: 15,
                    year: null,
                    month: 6
                },
                category: null
            },
            {
                name: "Harvest Moon",
                description: null,
                id: "824537",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Multiple Events",
                description: "Festival of Night's Return\n\nNidal\n\nCelebrated throughout Nidal, this holiday involves the burning of effigies and self-flagellation.\n\nSwallowtail Festival\n\nDesna\n\nHoliday celebrated with storytelling, feasting, and the release of butterflies.\n\nWaning Light Festival\n\nSegada\n\nAlso called Blessing of the Sun and Night of Spirits, participants bid farewell to the long days of sunshine with feasting, dancing, and music.",
                id: "824538",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Signing Day",
                description: "Andoran, Cheliax, Galt, Isger\n\nSigning Day is a Chelish holiday, dating back to the height of the empire. Observed on the second Oathday of Rova, this is the day on which new laws in the empire took effect. The significance of this day expanded over many years until imperial marriages, significant business arrangements and oaths of fealty were all conducted on this day.\n\nOriginally, the holiday began as a celebration of the mutual-defense pact between Cheliax, Isger, Galt and Andoran when the united nations threw off the shackles of Taldor, declaring themselves independent from the empire. Observances of the holiday vary, but often include firework displays, feats of strength, and public debates to showcase speaking and rhetorical skills.\n\nAs Cheliax degenerated to civil war and diabolism after 4606 AR, blood pacts and infernal contracts also began to be signed on this day. As a result of Cheliax's new affiliation, Andoran and Galt began to distance themselves from Cheliax and the original interpretation of the holiday. In Andoran it continues to be the day that most national laws take effect as well as being a traditional day of marriage, and the date on which new Steel Falcons are inducted.",
                id: "824539",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Crabfest",
                description: "Korvosa\n\nCrabfest is a Korvosan holiday held on the first Wealday of Rova. It celebrates the return of the crabs from the cooler waters of the Jeggare River to their winter habitat in Conqueror's Bay, and is marked by crab boil feasts held throughout the city and its surrounding communities.",
                id: "824540",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Feast of Szurpade",
                description: 'Irrisen\n\nThis "celebration of plenty" festival mocks the traditional harvest festivals celebrated in the region before Baba Yaga and her eternal winter descended upon the land.',
                id: "824541",
                note: null,
                date: {
                    day: 26,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Day of Sundering",
                description: "Ydersius\n\nOnce many holidays were celebrated by the faith of Ydersius, but today only this date has much significance.",
                id: "824542",
                note: null,
                date: {
                    day: 29,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "Admani Upastuti",
                description: "Jalmeri\n\nAdmani Upastuti is a Jalmeri holiday celebrated on the first full moon of Lamashan that marks the founding of Jalmeray as a Vudran colony.",
                id: "824543",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Ascendance Day",
                description: "Iomedae\n\nAscendance Day is an Iomedaean holiday, held on the 6th of Lamashan. The day marks the anniversary of the day Iomedae took the Test of the Starstone in the autumn of 3832 AR and ascended to godhood.\n\nCelebration\n\nThe day is a joyous celebration for the faithful, with singing, pledging of friendships, and forgiving of old grudges.\n\nTo many, the Test of the Starstone represents the greatest of all challenges, yet for Iomedae it was one of three storied promotions in her rise from Aroden's herald to a goddess in her own right. On the 6th of Lamashan, the Inheritor's faithful observe the heroism of Iomedae's life before her moment of ascension and celebrate the anniversary of the apotheosis itself.\n\nThe celebration takes place in several stages. Early in the day, troupes of performers—as often passionate amateurs as professionals—stage morality plays featuring the Eleven Acts of Iomedae, the heroic near-miracles and sacrifices she made leading up to her trials in the Starstone Cathedral. Scripts vary by region, city, and even neighborhood, but despite differences in setting, performance medium, and word choice, the themes and morals are all the same.\n\nAs the day continues, the priests organize jousts and mock battles, allowing anyone to participate so long as she can demonstrate enough skill to not be a risk to herself or others. The winners of these contests then face tests of mental acuity such as solving riddles, deciphering philosophical quandaries, and answering questions of honor and justice. Those who prove themselves in both contests are awarded a white cloak—representing the Inheritor at peace—styled after Iomedae's own red garment to wear for the rest of the celebration. Feasting and singing follow the competitions, mirroring the jubilation that followed Iomedae's ascension. This is occasion for making pledges of friendship and forgiving enemies, and priests circulate about the crowd offering the Inheritor's blessing to those who do and providing a moment's counsel or mediation for those who need an extra nudge.\n\nThe celebration typically ends before midnight, and the following day the priests and previous day's champions gather up the blunted swords from the mock battles, sharpen them, and distribute them among the church's armory and those of like-minded organizations so that all may remain vigilant against evil and prepared to strike it down.",
                id: "824544",
                note: null,
                date: {
                    day: 6,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Bastion Day",
                description: "Solku\n\nBastion Day is a two-day festival held annually on 19 and 20 Lamashan in the Katapeshi town of Solku honoring the founding of the town, when it is traditional to host a stranger from one noon until the next.",
                id: "824545",
                note: null,
                date: {
                    day: 19,
                    year: 4712,
                    month: 9
                },
                category: null
            },
            {
                name: "Jestercap",
                description: "Andoran, Druma, Taldor\n\nJestercap occurs at the end of the month of Lamashan, traditionally on the 27th (although a few regions have taken to moving the exact day around slightly so it always falls on the last Starday of the month, allowing people who wish to celebrate in excess to have the following day of rest to recover).\n\nHistory\n\nWhile Jestercap has been embraced with excited open arms by the gnome communities of the Inner Sea region, its original genesis is said to have been in one of Taldor's coastal cities not long after King Aspex the Even-Tongued broke from the nation, significantly weakening Taldor's power and beginning that nation's long decline. The holiday was originally intended to distract the distraught Taldan populace with a night of revelry and comedic entertainment, but the antics of jesters were simply not enough.\n\nOver the course of the first few years, Jestercap evolved from a holiday of observation to a holiday of participation. Today, the holiday is a time where anyone can pull pranks or jokes or japes on companions, on neighbors, and (most typically) on rivals, with the understanding that provided no lasting harm is done, any humiliations inflicted before midnight are to be taken in stride. Of course, come morning the day after, there are inevitably jokes that went too far, and grudges and feuds borne from Jestercap antics have a way of lingering for months to follow.\n\nIn Religion\n\nFollowers of Chaldira Zuzaristan, a halfling deity of mischief, treat Jestercap as a holy day and their pranks — often elaborate and extravagant in nature and plotted for months in advance — as displays of their faith.",
                id: "824546",
                note: null,
                date: {
                    day: 27,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Feast of the Survivors",
                description: "Zon-Kuthon, Nidal\n\nA harvest festival signifying the centuries of Nidalese ancestors protected by Zon-Kuthon. The ceremonial tables are made of human bones of community members from past generations.",
                id: "824547",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Kraken Carnival",
                description: "Absalom\n\nThe second of two local festivals where kite-battlers compete.",
                id: "824548",
                note: null,
                date: {
                    day: 15,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Independence Day",
                description: "Galt\n\nMarks the beginning of the Red Revolution.",
                id: "824549",
                note: null,
                date: {
                    day: 5,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Seven Veils",
                description: "Sivanah\n\nThe holiday known as Seven Veils, which takes place on the 23rd of Neth in most realms of the Inner Sea region, is a celebration of the region's diversity — a time when social boundaries break down even further in a day-long event filled with dancing, feasting, and courting. The evening traditionally closes out with the Seven Veil masquerade, a ball wherein the participants wear disguises that hide their race or gender (often using minor magical trinkets and spells) or disguise these features as entirely new characteristics. At the end of the ball, the participants remove their disguises to their partners, often with unpredictable and sometimes delightfully awkward results. Traditionalists and conservative minds often find the Seven Veils masquerades to be scandalous or off-putting, yet they remain particularly popular in most of the larger cities of the land.\n\nHistorians note that the original \"Dance of the Seven Veils\" has a much different genesis than one promoting diversity — the mysterious cult of Sivanah, goddess of illusions, mystery, and reflections, is generally cited as the source of this festival, and indeed, worshippers of the goddess (herself known as the Seventh Veil) count the 23rd of Neth as one of their most sacred of days. What rituals the church of Sivanah performs on this date, however, are unknown to outsiders, for the cult enjoys its secrets. This secrecy has, unsurprisingly, given rise to all manner of sinister rumour, yet when Seven Veils rolls around each year, its eager participants are quick to set aside rumour in preference for the night's fun and games.",
                id: "824550",
                note: null,
                date: {
                    day: 23,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Abjurant Day",
                description: "Nethys\n\nAbjurant Day occurs on 8 Neth and is known as a day of cooperation between neighbors to shore up mutual defenses and train allies in magic. Potential apprentices are often tested on the day.",
                id: "824551",
                note: null,
                date: {
                    day: 8,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Great Fire Remembrance",
                description: "Korvosa\n\nGreat Fire Remembrance is a holiday celebrated on each 13 Neth in the Varisian city of Korvosa. It commemorates the Great Fire of 4429 AR, which devastated the then still fledgling Chelish colony of Fort Korvosa. On this somber day, most of the city shuts down and people generally remain at home. It has become tradition not to light any fires (not even cooking fires) on Great Fire Remembrance.",
                id: "824552",
                note: null,
                date: {
                    day: 13,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Even-Tongued Day",
                description: "Cheliax, Asmodeus, Milani\n\nObserved on 14 of Neth, Even-Tongued Day was once a day of joy and celebration in Cheliax, but has become instead one of mourning.\n\nOriginally, the date marked the conquest of Aspex the Even-Tongued, who brought the nations of Galt, Andoran and Isger under Chelish control. Since the death of Aroden and the loss of these nations, the holiday instead marks the loss of territory and glory once held by Cheliax. Oaths are sometimes made, typically to Asmodeus, and rarely of a pleasant nature (such as the reclaiming of the lost empire and vengeance against treacherous former allies).\n\nCitizens wear black on this day, public speaking is forbidden, and old feuds and vendettas are rekindled.",
                id: "824553",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Evoking Day",
                description: "Nethys\n\nA holy day to followers of Nethys, Evoking Day is full of vibrant explosions, skillful wielding of spells, and much dancing. Evoking Day is observed on the 18th of Neth, and while this holiday is mostly celebrated in Garund, temples dedicated to Nethys host celebrations throughout the Inner Sea region. Traditional celebrations of Evoking Day have changed over the thousands of years since its first incarnation, but to this day every occurrence of Evoking Day still features a grand meal shared by celebrants during the afternoon and a wondrous exhibition of brilliant and explosive magic once the sun sets. These days, such colorful magical displays are augmented with fireworks of a dozen different colors and patterns.\n\nIn temples of Nethys dedicated to revering evocation magic, priests and prominent arcanists participate in spell duels where each contestant stands on a raised platform and takes turns trying to incapacitate her opponent. The magic wielded in theses duels favors the flashy over the dangerous, but clerics of Nethys are on hand to treat any injuries. These duels gather large crowds eager to lend their applause to their favorite contestant.\n\nIt is also during this festival when wizards who worship Nethys open their spellbooks to others who share their craft. Wizards normally guard their spellbooks with their lives and covet the eldritch information therein, but on Evoking Day these wizards meet with one another prior to the afternoon feast to share their spells just as they prepare to share a grand meal.\n\nThough Evoking Day is primarily a day of grand magic, those with no spellcasting talent still flock to local temples of Nethys to partake in the shared feast and flashy evening displays of magic and fireworks. Between the meal and into the night, celebrants wear black-and-white robes and perform joyous dances meant to give thanks to the wonders Nethys brought to humankind. These dances are grand affairs involving dozens of dancers all spinning and clapping to the accompanying music as their black-and-white robes fan out around them with each spin. As night descends and the fireworks and magical displays begin, the dancing rises to a climax erupting in shouts and calls to Nethys with each thunderous boom.",
                id: "824554",
                note: null,
                date: {
                    day: 18,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Baptism of Ice",
                description: "Irrisen\n\nIn the Irriseni Baptism of Ice, an annual fertility festival held from the 24th to the 30th of Neth, locals parade all children born during the year through the town in fine clothes. In most towns, the festival ends with a symbolic sacrifice of a child to the cold. However, in Whitethrone and Irrisen's provincial capitals, a peasant child is killed through exposure.",
                id: "824555",
                note: null,
                date: {
                    day: 24,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Transmutatum",
                description: "Nethys\n\nTransmutatum is one of the three major holidays of the church of Nethys, on 28th of Neth. It is a day of reflection and self-improvement. Many followers of Nethys begin research and crafting projects on this day.",
                id: "824556",
                note: null,
                date: {
                    day: 28,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Winter Week",
                description: "Traditional feast; time for courting and spending time with friends.",
                id: "824557",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "The Shadowchaining",
                description: "Zon-Kuthon, Nidal\n\nCommemorating the Midnight Lord's gift of shadow animals.",
                id: "824558",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Pseudodragon Festival",
                description: "Korvosa\n\nKorvosa's Pseudodragon Festival, a holiday celebrated annually on 7 Kuthona, marks the winter migration of wild pseudodragons from the Mindspin Mountains to Conqueror's Bay, which inspires the creatures already in the city—even those domesticated—to play with their wild kin in the skies over the city. Locals mark the day with a joyous inebriation.",
                id: "824559",
                note: null,
                date: {
                    day: 7,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Ascension Day",
                description: "Cayden Cailean\n\nMuch like the god to whom it is dedicated, the Caydenite holiday of Ascension Day is generally celebrated in a very informal style. Occurring annually on 11 Kuthona, it commemorates the day Cayden Cailean passed the Test of the Starstone and ascended to godhood in 2765 AR. In all likelihood, the 11th of Kuthona is not the exact date on which it actually happened, but since the god was dead drunk when it happened, it will probably be never known.",
                id: "824560",
                note: null,
                date: {
                    day: 11,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Winterbloom",
                description: "Naderi\n\nHoliday celebrating Naderi's ascension. Celebrations are typically understated but include readings of The Lay of Arden and Lysena.",
                id: "824561",
                note: null,
                date: {
                    day: 15,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Final Day",
                description: "Groetus\n\nCultists of Groetus perform an hour's silence at dusk on the last day of the year and seek guidance from their god about the End Time.",
                id: "824562",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Night of the Pale",
                description: "Not all of Golarion's holidays and festivals are times of rejoicing and delight. Holidays worshiped by dark and sinister cults and religions tend to be hidden affairs, their rituals and ceremonies involving cruelties and vile practices that send shivers of fear through gentler society. Scholars suspect that the Night of the Pale—a holiday that traditionally takes place on the last day of the year, the 31st of Kuthona—has links to several sinister religions, but today no one church has specific association with the event. Nonetheless, the Night of the Pale is an event that many look forward to all year, whether in fear or excitement.\n\nOn the Night of the Pale, it is said that the ghosts of those who died during the previous year manifest upon the world and come to visit the homes they lived in during life. Although some might think that the chance of seeing even the shade of a dearly departed one might be a blessing, the Night of the Pale is not a time for tearful reunions, for these ghosts, tradition says, do not return out of love for those they left behind but out of darker compulsions. Lingering jealousy, unfinished arguments, or the simmering need for revenge are said to be what compels the dead to return to torment the living on the Night of the Pale.\n\nThe evening of this night in many communities is celebrated by a morbid feast, the food prepared with themes revolving around graveyards, the dead, and other spooky traditions. This feast, on one level, helps the celebrants to make light of their fears while sharing good company with similarly nervous neighbors, but at another level is believed to placate vengeful spirits as toasts are raised to the memories of the recently departed. These feasts include retellings of favorite memories of the departed, in hopes of reminding the approaching ghosts of brighter and kinder memories than those that compel them to return. The feast always ends at least an hour before midnight in order to give participants time to return home, decorate doors and windows with salt and other trinkets taken from the feasting table (salted bread baked into crook-like shapes are a favorite, as these can be hung from doorknobs and eaves) to ward off evil spirits, and hide in their bedrooms until dawn. Brave youths and adventurers often deliberately stay out after midnight, either to dare the ghosts to challenge them or simply for the thrill of bucking tradition. Every Night of the Pale, it seems, there are disappearances among those who stay out after midnight, although whether these vanishings are the result of dissatisfied locals taking the opportunity to run away from home, murderers or wild animals or other mundane dangers, or the vengeful spirits carrying off their victims depends upon the circumstances.\n\nThe morning after a Night of the Pale is also the first day of the new year—a time that many celebrate more as a relief for surviving the night before than in anticipation of what the new year might bring, although regional preferences for how this day is celebrated vary enough that no single tradition holds over the other. Save, of course, the lingering fears of what dread spirits might come knocking upon warded doors one year away...",
                id: "824563",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Turning Day",
                description: "Alseta\n\nThe changing of the year is celebrated with the forgiveness of old debts and grudges, and embracing new opportunities.",
                id: "824564",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Ritual of Stardust",
                description: "Desna\n\nThe Ritual of Stardust is one of the few formal religious holidays in honor of the goddess Desna. It is held on both the summer and winter solstices.\n\nFollowers of the Song of Spheres gather at dusk and light enormous bonfires and hold feasts, watching the sparks and embers float out into the darkening sky. After it is fully dark, the celebrants chant and sing songs as they watch the fires burn low. When only embers remain, sand mixed with ground star gems (either star rubies, star sapphires, or rose quartz) is thrown on them or into the air downwind. At this point it is common to make proclamations of love and friendship and of promised journeys to come. The twinkling of the sand is thought to mirror the night sky and demonstrate Desna's witnessing of these pronouncements.",
                id: "824565",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Planting Week",
                description: "Erastil\n\nThis holy week to the god Erastil is a time of heavy work in the fields for farmers.",
                id: "824566",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Ascendance Night",
                description: "Norgorber\n\nDay marking the apotheosis of the Reaper of Reputation.",
                id: "824567",
                note: null,
                date: {
                    day: 2,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Azvadeva Dejal",
                description: "Gruhastha\n\nCelebration of the revelation of the Azvadeva Pujila, with gifts of books, celebrations of knowledge, blessing of animals, and a vegetarian feast.",
                id: "824568",
                note: null,
                date: {
                    day: 3,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Goblin Flea Market",
                description: "Andoran\n\nA market day that focuses on unusual crafts and offers games to children who dress up for the occasion.",
                id: "824569",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Breaching Festival",
                description: "Korvosa\n\nYearly festival in which contestants try to break through the magical wards protecting the Academae.",
                id: "824570",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Silverglazer Sunday",
                description: "Andoran\n\nSilverglazer Sunday is a two-part Andoren national festival that is held on the last Sunday of Arodus and the first Sunday of Rova every year. Celebrants spend the two Sundays fishing, holding swimming competitions, and making enormous puppets.",
                id: "824571",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Batul al-Alim",
                description: "Qadira\n\nBatul al-Alim is a holiday celebrated on the last Oathday of Calistril in Qadira. It commemorates the birthday of the popular romantic poet of the same name.",
                id: "824572",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: 1
                },
                category: null
            }
        ],
        id: null,
        categories: [
            {
                name: "Natural Events",
                id: "natural-events",
                color: "#2E7D32"
            },
            {
                name: "Religious Holidays",
                id: "religious-holidays",
                color: "#9b2c2c"
            },
            {
                name: "Secular Holidays",
                id: "secular-holidays",
                color: "#0D47A1"
            },
            {
                name: "Historical Events",
                id: "historical-events",
                color: "#455A64"
            },
            {
                name: "Miscellaneous Events",
                id: "miscellaneous-events",
                color: "#0288D1"
            }
        ]
    },
    {
        name: "Calendar of Galifar",
        description: "Calendar of the world of Eberron.",
        static: {
            displayDayNumber: false,
            firstWeekDay: 0,
            incrementDay: false,
            displayMoons: true,
            overflow: false,
            weekdays: [
                {
                    type: "day",
                    name: "Sul",
                    id: "ID_598a7bd9b8b9"
                },
                {
                    type: "day",
                    name: "Mol",
                    id: "ID_69088ac8f818"
                },
                {
                    type: "day",
                    name: "Zol",
                    id: "ID_a8c85a98f8fa"
                },
                {
                    type: "day",
                    name: "Wir",
                    id: "ID_fa4b687aaba9"
                },
                {
                    type: "day",
                    name: "Zor",
                    id: "ID_58e9a82a6bc8"
                },
                {
                    type: "day",
                    name: "Far",
                    id: "ID_9a18cb889ada"
                },
                {
                    type: "day",
                    name: "Sar",
                    id: "ID_3b9bfa38c979"
                }
            ],
            months: [
                {
                    name: "Zarantyr",
                    type: "month",
                    length: 28,
                    id: "ID_7a8afb09aa6a"
                },
                {
                    name: "Olarune",
                    type: "month",
                    length: 28,
                    id: "ID_386b188b2a89"
                },
                {
                    name: "Therendor",
                    type: "month",
                    length: 28,
                    id: "ID_599a0ad859c8"
                },
                {
                    name: "Eyre",
                    type: "month",
                    length: 28,
                    id: "ID_98a95869e90b"
                },
                {
                    name: "Dravago",
                    type: "month",
                    length: 28,
                    id: "ID_eb5a194bcbf8"
                },
                {
                    name: "Nymm",
                    type: "month",
                    length: 28,
                    id: "ID_bb596aa9ca5b"
                },
                {
                    name: "Lharvion",
                    type: "month",
                    length: 28,
                    id: "ID_fb1bb9dabb88"
                },
                {
                    name: "Barrakas",
                    type: "month",
                    length: 28,
                    id: "ID_8bcb19c8f90a"
                },
                {
                    name: "Rhaan",
                    type: "month",
                    length: 28,
                    id: "ID_0a09eb5b7b9b"
                },
                {
                    name: "Sypheros",
                    type: "month",
                    length: 28,
                    id: "ID_3b98ab1a29e8"
                },
                {
                    name: "Aryth",
                    type: "month",
                    length: 28,
                    id: "ID_899b59faaba9"
                },
                {
                    name: "Vult",
                    type: "month",
                    length: 28,
                    id: "ID_8a286b78aac9"
                }
            ],
            moons: [
                {
                    name: "Nymm",
                    cycle: 28,
                    offset: -14,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_a8b88988a94a"
                },
                {
                    name: "Sypheros",
                    cycle: 35,
                    offset: -11,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_5ba80b4b096a"
                },
                {
                    name: "Therendor",
                    cycle: 42,
                    offset: 21,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_c999085a499b"
                },
                {
                    name: "Rhaan",
                    cycle: 49,
                    offset: 9,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_39f91ab8a85a"
                },
                {
                    name: "Olarune",
                    cycle: 56,
                    offset: 27,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_2ada8b99788b"
                },
                {
                    name: "Eyre",
                    cycle: 63,
                    offset: 10,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_49285b79d988"
                },
                {
                    name: "Vult",
                    cycle: 70,
                    offset: 6,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_eaebb94a9acb"
                },
                {
                    name: "Zarantyr",
                    cycle: 77,
                    offset: 31,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_98d86aabcbb9"
                },
                {
                    name: "Aryth",
                    cycle: 84,
                    offset: 41,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_d989b809d97b"
                },
                {
                    name: "Dravago",
                    cycle: 91,
                    offset: 31,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_1a293959eaab"
                },
                {
                    name: "Lharvion",
                    cycle: 98,
                    offset: 34,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_cbf919491a5b"
                },
                {
                    name: "Barrakas",
                    cycle: 105,
                    offset: -11,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_4a1a2a6b589b"
                }
            ],
            leapDays: [],
            eras: []
        },
        current: {
            year: 998,
            day: 1,
            month: 0
        },
        events: [
            {
                name: "The Tain Gala - Sharn",
                description: "The Tain Gala is a notable event held on the first Far of each month in Sharn.",
                id: "824461",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Revelation Day - Blood of Vol",
                description: "Meditation ceremony for Seekers (also called Ascension Day).",
                id: "824462",
                note: null,
                date: {
                    day: 13,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Winter Solstice",
                description: "The longest night of the year.",
                id: "824463",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Rebirth Eve - The Silver Flame",
                description: "The Purified new year; a night for spiritual vigil and guarding against evil. ",
                id: "824464",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 0
                },
                category: null
            },
            {
                name: "Crystalfall - Sharn",
                description: "A day of remembrance; Ice sculptures are created (and destroyed) to commemorate the destruction of the Glass Tower on 9 Olarune in 918 by abjurers. ",
                id: "824465",
                note: null,
                date: {
                    day: 9,
                    year: 998,
                    month: 1
                },
                category: null
            },
            {
                name: "Bright Souls' Day - The Silver Flame",
                description: "On this day each year, the Purified celebrate the lives and sacrifice of all followers of the Flame who died while fighting evil and protecting the faithful. ",
                id: "824466",
                note: null,
                date: {
                    day: 18,
                    year: null,
                    month: 1
                },
                category: null
            },
            {
                name: "The Day of Mourning - Sharn",
                description: "In commemoration of the destruction of the nation of Cyre, those who survived gather to remember the loss of their kingdom on this date in the year 994. ",
                id: "824467",
                note: null,
                date: {
                    day: 20,
                    year: 995,
                    month: 1
                },
                category: null
            },
            {
                name: "Tirasday - The Silver Flame",
                description: "On this day, the Silver Flame work, give gifts, and partake in joyous celebration out of thankfulness for the new planting season and the birth of Tira Miron - the Voice of the Silver Flame.",
                id: "824468",
                note: null,
                date: {
                    day: 5,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Sun's Blessing - The Sovereign Host",
                description: "The Sovereign Host enjoys this festival of peace, and of setting aside differences, in the name of Dol Arrah.",
                id: "824469",
                note: null,
                date: {
                    day: 15,
                    year: null,
                    month: 2
                },
                category: null
            },
            {
                name: "Initiation Day - The Silver Flame",
                description: "Seminary graduations and breaking grounds for new churches are common on this day as the Silver Flame recalls their declarations of independent faith and the construction of their first cathedral on this special day each year. ",
                id: "824470",
                note: null,
                date: {
                    day: 11,
                    year: null,
                    month: 3
                },
                category: null
            },
            {
                name: "Baker's Night - The Silver Flame",
                description: "An old and misunderstood, yet immensely popular, holiday wherein followers of the Silver Flame gather to share pastries and treats created by bakers within their fold. ",
                id: "824471",
                note: null,
                date: {
                    day: 6,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Aureon's Crown - Sharn and The Sovereign Host",
                description: "The Sovereign Host celebrate knowledge on this day with lectures and sermons.Secular institutions hold graduation and commencement ceremonies on this date, as do the monastic schools of the Silver Flame.In Sharn this has become a common secular holiday, wherein even non-devout members of the Five Nations attend lectures and sermons held by the priests of Aureon on philosophical, historical, and a range of other topics - including discussions on the nature of the gods.\n\n",
                id: "824472",
                note: null,
                date: {
                    day: 26,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Promisetide - The Silver Flame",
                description: "A controversial holiday outside of the Silver Flame faith, on this day the Purified honor the Silver Flame for the promise of paradise. They also honor (without worship) the Sovereign Host for having created the world, before stepping aside to allow the Flame its rightful place as the last god of Eberron.  ",
                id: "824473",
                note: null,
                date: {
                    day: 28,
                    year: null,
                    month: 4
                },
                category: null
            },
            {
                name: "Brightblade - Sharn and The Sovereign Host",
                description: "This Sovereign Host festival, dedicated to Dol Dorn, is marked by gladiatorial and athletic contests. \n\nIn Sharn, festival celebrations occur throughout the temple districts with events culminating in a combined contest of champions at the Cornerstone Arena. ",
                id: "824474",
                note: null,
                date: {
                    day: 12,
                    year: null,
                    month: 5
                },
                category: null
            },
            {
                name: "First Dawn - The Silver Flame",
                description: "On this day in 914, the Church of the Silver Flame officially assumed control of the government of Thrane. On each anniversary, the Purified give thanks for their just rule, while also honoring the memory of King Thalin, whose death paved the way for their governance.",
                id: "824475",
                note: null,
                date: {
                    day: 21,
                    year: 915,
                    month: 5
                },
                category: null
            },
            {
                name: "Silvertide - The Silver Flame",
                description: "Commemoration of both the couatl sacrifice and the entry, thousands of years ago, of the Silver Flame into Eberron mark this highest of holy days. The vast majority of Purified spend this day in prayer and observance.  ",
                id: "824476",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 6
                },
                category: null
            },
            {
                name: "The Race of Eight Winds - Sharn",
                description: "Legend tells of King Galifar II's fascination with aerial scouts and cavalry. The evolution of this annual contest took centuries, but has given Sharn an exotic and well anticipated event involving beasts and their riders in a symbiotic quest for glory* over a course that finds them weaving through the spires of the city. \n\n\n\n*the winner also receives 500gp and a land grant located elsewhere in Breland.",
                id: "824477",
                note: null,
                date: {
                    day: 21,
                    year: 201,
                    month: 6
                },
                category: null
            },
            {
                name: "The Hunt - Sharn and The Sovereign Host",
                description: "The Sovereign Host celebrate Balinor with communal hunts of dangerous creatures. \n\nIn Sharn, a dangerous beast*, whose transport to the city was arranged by the priests of Balinor, is released into the Depths of the Lower-City. Open to any who would participate (and pay an entry fee in the form of a 5gp donation), the victor must return with the beast's head to receive a 500gp purse, local fame, and the blessing of Balinor. \n\n\n\n*often a singular beast, it can be several - which then requires the victor to return with the most skins. ",
                id: "824478",
                note: null,
                date: {
                    day: 4,
                    year: null,
                    month: 7
                },
                category: null
            },
            {
                name: "Victory Day - The Silver Flame",
                description: "Commemorating the conclusion of the lycanthropic purge (832 YK - 880 YK), on Victory Day the adult faithful of the Silver Flame attend sermons on triumph, defeat, and the somewhat questionable methods utilized by the templars during the purge - while the children of the faithful act out great battles with toy swords. ",
                id: "824479",
                note: null,
                date: {
                    day: 9,
                    year: 881,
                    month: 7
                },
                category: null
            },
            {
                name: "Fathen's Fall - Sharn",
                description: "Honoring the memory of Fathen, a great hero of the Silver Crusade (832 YK - 880 YK), who, in the last days of the purge, was torn apart by wererats on the streets of North Market. Faithful gather on this day at the Shrine of Fathen the Martyr to listen to a sermon from the priest of High Hope. This holiday is often uncomfortable and tense for shifter communities in Sharn. ",
                id: "824480",
                note: null,
                date: {
                    day: 25,
                    year: 881,
                    month: 7
                },
                category: null
            },
            {
                name: "Boldrei's Feast - Sharn and The Sovereign Host",
                description: "A feast of community in the name of Boldrei, extravagant parties are often held on this holiday and it has also become the traditional day for elections. \n\nIn Sharn, a great feast is held at the Pavilion of the Host with goods and services donated  from local merchants, as well as House Ghallanda. Many grand parties, some quite astonishing in their opulence, are hosted by the wealthiest members of varying districts - often in competition with one another for social standing. ",
                id: "824481",
                note: null,
                date: {
                    day: 9,
                    year: null,
                    month: 8
                },
                category: null
            },
            {
                name: "The Ascension - Sharn",
                description: "Each year on The Ascension, followers reaffirm their faith and give thanks as well as attend blessing ceremonies at temples throughout the city - the grandest of which occurs at the Cathedral of the Cleansing Flame. All of this is to honor the sacrifice of Tira Miron, the Voice of the Flame, without which there would be no Church of the Silver Flame. Contributions to their community on this day are a high priority for the faithful.",
                id: "824482",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Wildnight - Sharn",
                description: "With the The Fury (the Sovereign of Passion and Madness) reaching the height of her power on this night, people find it difficult to control or restrain their impulses - once the sun sets, public revelry in the streets climbs to joyous or, all too often, dangerous levels, calming only as the sun rises on the following morning. ",
                id: "824483",
                note: null,
                date: {
                    day: 18,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Saint Voltros's Day - The Silver Flame",
                description: "Though one of the least high holy days, it is marked by brief prayers and church services in the honor of the birth of Saint Voltros - the first paladin called to only serve the Silver Flame.",
                id: "824484",
                note: null,
                date: {
                    day: 25,
                    year: null,
                    month: 9
                },
                category: null
            },
            {
                name: "Thronehold - Sharn",
                description: "On this day in 996, the Treaty of Thronehold was signed, formally ending the Last War. Annual celebratory feasts are held throughout the Five Nations to mark this auspicious and long-awaited event. ",
                id: "824485",
                note: null,
                date: {
                    day: 11,
                    year: 997,
                    month: 10
                },
                category: null
            },
            {
                name: "Rampartide - The Silver Flame",
                description: "In accordance with scripture, on this day the Purified steel themselves against wickedness, both without and within, through repentance and fasting. Children, elderly, and the sick are required only to give up their favorite foods for the day. ",
                id: "824486",
                note: null,
                date: {
                    day: 24,
                    year: null,
                    month: 10
                },
                category: null
            },
            {
                name: "Long Shadows - Sharn",
                description: "As dark magic dominates over these three days of the Long Shadows, the myth of Sovereign Lord Aureon's stolen shadow is forefront in the minds of the people. Most will spend these days indoors huddled around the warmth of a fire, but those few who worship the dark deity use this time to prey upon the weak and the foolish. ",
                id: "824487",
                note: null,
                date: {
                    day: 26,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Khybersef - The Silver Flame",
                description: 'Originally called Khyber\'s Eve, the Purified spend the night in intense prayer and spiritual vigilance against the, according to scripture, "thinning of the bonds that hold the demon lords in Khyber" between now (the beginning of winter) and the solstice. Quests and crusades often begin on Khybersef. ',
                id: "824488",
                note: null,
                date: {
                    day: 27,
                    year: null,
                    month: 11
                },
                category: null
            },
            {
                name: "Spring Equinox",
                description: "The spring equinox is when the day and the night are equally as long, and are getting longer.",
                id: "824489",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Summer Solstice",
                description: "\tAt the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
                id: "824490",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Autumn Equinox",
                description: "The autumn equinox is when the day and the night are equally as long, and are getting shorter.",
                id: "824491",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            }
        ],
        id: null,
        categories: []
    },
    {
        name: "Barovian Calendar",
        description: "Calendar of the realm of Barovia, home of Strahd.",
        static: {
            displayDayNumber: false,
            firstWeekDay: 0,
            incrementDay: false,
            displayMoons: true,
            overflow: true,
            weekdays: [
                {
                    type: "day",
                    name: "Monday",
                    id: "ID_6a183b08c8eb"
                },
                {
                    type: "day",
                    name: "Tuesday",
                    id: "ID_892b7b7a5ae9"
                },
                {
                    type: "day",
                    name: "Wednesday",
                    id: "ID_6bb98899ba68"
                },
                {
                    type: "day",
                    name: "Thursday",
                    id: "ID_4a7b683aea19"
                },
                {
                    type: "day",
                    name: "Friday",
                    id: "ID_78690a099b89"
                },
                {
                    type: "day",
                    name: "Saturday",
                    id: "ID_ba5b09ba5a89"
                },
                {
                    type: "day",
                    name: "Sunday",
                    id: "ID_29b90acaead9"
                }
            ],
            months: [
                {
                    name: "1st Moon",
                    type: "month",
                    length: 31,
                    id: "ID_7b4978ab581a"
                },
                {
                    name: "2nd Moon",
                    type: "month",
                    length: 28,
                    id: "ID_cb99fbb9395b"
                },
                {
                    name: "3rd Moon",
                    type: "month",
                    length: 31,
                    id: "ID_79881a89cb18"
                },
                {
                    name: "4th Moon",
                    type: "month",
                    length: 30,
                    id: "ID_5b9a8a397908"
                },
                {
                    name: "5th Moon",
                    type: "month",
                    length: 31,
                    id: "ID_f8399ab80818"
                },
                {
                    name: "6th Moon",
                    type: "month",
                    length: 30,
                    id: "ID_3ac84a7bc869"
                },
                {
                    name: "7th Moon",
                    type: "month",
                    length: 31,
                    id: "ID_e98bc86bc809"
                },
                {
                    name: "8th Moon",
                    type: "month",
                    length: 31,
                    id: "ID_89ea78ca5988"
                },
                {
                    name: "9th Moon",
                    type: "month",
                    length: 30,
                    id: "ID_798a3b990a4b"
                },
                {
                    name: "10th Moon",
                    type: "month",
                    length: 31,
                    id: "ID_3a9999e8eb59"
                },
                {
                    name: "11th Moon",
                    type: "month",
                    length: 30,
                    id: "ID_db39383b990a"
                },
                {
                    name: "12th Moon",
                    type: "month",
                    length: 31,
                    id: "ID_1bfa3b180a48"
                }
            ],
            moons: [
                {
                    name: "Moon",
                    cycle: 29.530588853,
                    offset: 10.24953,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_e98b3a8ab8da"
                }
            ],
            leapDays: [
                {
                    name: "Leap Day",
                    type: "leapday",
                    interval: [
                        {
                            ignore: false,
                            exclusive: false,
                            interval: 400
                        },
                        {
                            ignore: false,
                            exclusive: true,
                            interval: 100
                        },
                        {
                            ignore: false,
                            exclusive: false,
                            interval: 4
                        }
                    ],
                    offset: 0,
                    timespan: 1,
                    intercalary: false,
                    id: "ID_6a28dbb81a48"
                }
            ],
            eras: [
                {
                    name: "Before Christ",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: -9000,
                        month: 0,
                        day: 0
                    }
                },
                {
                    name: "Anno Domini",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: 1,
                        month: 0,
                        day: 1
                    }
                }
            ]
        },
        current: {
            year: 735,
            day: 1,
            month: 0
        },
        events: [
            {
                name: "Winter Solstice",
                description: "The Winter Solstice is the day of the year with the least time between sunrise and sunset. Many western cultures consider it the official start of winter.",
                id: "824455",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-event"
            },
            {
                name: "Summer Solstice",
                description: "The Summer Solstice is the day of the year with the most time between \nsunrise and sunset. Many western cultures consider it the official start\n of summer.",
                id: "824456",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-event"
            },
            {
                name: "Spring Equinox",
                description: "The Spring Equinox,\nalso called the Vernal Equinox, is the day between the winter and\nsummer solstices where the day is the exact same length as the night.\nMany western cultures consider it the official start of Spring.\n",
                id: "824457",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-event"
            },
            {
                name: "Autumnal Equinox",
                description: "The Autumnal Equinox,\nalso called the Fall Equinox, is the midpoint between the summer and\nwinter solstices, where the day is the exact same length as the night.\nMany western cultures consider it the official start of Autumn.\n",
                id: "824458",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "New Year's Day",
                description: "New Year's day marks the start of a new year.",
                id: "824459",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Paschal Full Moon",
                description: "The first full moon after march 21st, which is considered the fixed date for the spring equinox.",
                id: "824460",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-event"
            }
        ],
        id: null,
        categories: [
            {
                name: "Natural Event",
                id: "natural-event",
                color: "#9e9d24"
            }
        ]
    },
    {
        name: "Exandrian Calendar",
        description: "Calendar of the world of Wildemount.",
        static: {
            displayDayNumber: false,
            firstWeekDay: 2,
            incrementDay: false,
            displayMoons: true,
            overflow: true,
            weekdays: [
                {
                    type: "day",
                    name: "Miresen",
                    id: "ID_3b38aaa81bca"
                },
                {
                    type: "day",
                    name: "Grissen",
                    id: "ID_da6b19882baa"
                },
                {
                    type: "day",
                    name: "Whelsen",
                    id: "ID_a9cae8f88b98"
                },
                {
                    type: "day",
                    name: "Conthsen",
                    id: "ID_e87859eb5aaa"
                },
                {
                    type: "day",
                    name: "Folsen",
                    id: "ID_59180abbea8a"
                },
                {
                    type: "day",
                    name: "Yulisen",
                    id: "ID_98082bd8d8ca"
                },
                {
                    type: "day",
                    name: "Da'leysen",
                    id: "ID_da4ba92b299a"
                }
            ],
            months: [
                {
                    name: "Horisal",
                    type: "month",
                    length: 29,
                    id: "ID_e89a4ab9995b"
                },
                {
                    name: "Misuthar",
                    type: "month",
                    length: 30,
                    id: "ID_18b8894bab7b"
                },
                {
                    name: "Dualahei",
                    type: "month",
                    length: 30,
                    id: "ID_0a9b29f8f8db"
                },
                {
                    name: "Thunsheer",
                    type: "month",
                    length: 31,
                    id: "ID_6a8a8a5bea5b"
                },
                {
                    name: "Unndilar",
                    type: "month",
                    length: 28,
                    id: "ID_b8295bdbcafa"
                },
                {
                    name: "Brussendar",
                    type: "month",
                    length: 31,
                    id: "ID_c92a489bb909"
                },
                {
                    name: "Sydenstar",
                    type: "month",
                    length: 32,
                    id: "ID_7b48bb1b0a4a"
                },
                {
                    name: "Fessuran",
                    type: "month",
                    length: 29,
                    id: "ID_289858c97849"
                },
                {
                    name: "Quen'pillar",
                    type: "month",
                    length: 27,
                    id: "ID_f8abd9a86aa9"
                },
                {
                    name: "Cuersaar",
                    type: "month",
                    length: 29,
                    id: "ID_7aba59fa2b69"
                },
                {
                    name: "Duscar",
                    type: "month",
                    length: 32,
                    id: "ID_5819f86b99cb"
                }
            ],
            moons: [
                {
                    name: "Catha",
                    cycle: 33,
                    offset: 7,
                    faceColor: "#ffffff",
                    shadowColor: "#292b4a",
                    id: "ID_0ab929092b5b"
                },
                {
                    name: "Ruidus",
                    cycle: 328,
                    offset: 80,
                    faceColor: "#ff6161",
                    shadowColor: "#1f1f1f",
                    id: "ID_b9783ac818e9"
                }
            ],
            leapDays: [],
            eras: [
                {
                    name: "The Founding",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: 1,
                        month: 0,
                        day: 1
                    }
                },
                {
                    name: "Age of Arcanum",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: -1500,
                        month: 0,
                        day: 1
                    }
                },
                {
                    name: "The Calamity",
                    description: "",
                    format: "Year {{year}} - {{era_name}}",
                    start: {
                        year: -665,
                        month: 0,
                        day: 1
                    }
                },
                {
                    name: "Post-Divergence",
                    description: "",
                    format: "Year {{year}} P.D.",
                    start: {
                        year: 1,
                        month: 0,
                        day: 1
                    }
                }
            ]
        },
        current: {
            day: 1,
            month: 0,
            year: 836
        },
        events: [
            {
                name: "Spring Equinox",
                description: "The spring equinox is when the day and the night are equally as long, and are getting longer.",
                id: "824430",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Summer Solstice",
                description: "\tAt the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
                id: "824431",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Autumn Equinox",
                description: "The autumn equinox is when the day and the night are equally as long, and are getting shorter.",
                id: "824432",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "Winter Solstice",
                description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
                id: "824433",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: null
            },
            {
                name: "New Dawn",
                description: "The first day of the new year is also the holy day of the Changebringer, as the old year gives way to a new path.\n\nIn Tal'Dorei, Emon celebrates New Dawn with a grand midnight feast, which commonly features a short play celebrating the changes witnessed in the past year.\n\nOn the Menagerie Coast, people celebrate by having a feast on the shore at dusk to watch the sunset. They feast and discuss their hopes for the new year until the sun rises.",
                id: "824434",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 0
                },
                category: "religious-holidays"
            },
            {
                name: "Hillsgold",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824435",
                note: null,
                date: {
                    day: 27,
                    year: null,
                    month: 0
                },
                category: "secular-holidays"
            },
            {
                name: "Day of Challenging",
                description: "The holy day of the Stormlord is one of the most raucous holidays in Emon. Thousands of spectators attend the annual Godsbrawl, which is held in the fighting ring within the Temple of the Stormlord. The people root for their deity's favored champion, and there is a fierce (yet friendly) rivalry between the Champion of the Stormlord and the Champion of the Platinum Dragon. The winner earns the title of \"Supreme Champion\" for an entire year.\n\nThe Day of Challenging is one of the most raucous holidays in Port Damali, and thousands of spectators attend the annual Godsbrawl held in the Temple of Kord to root for their favored deity's champion, particularly the chosen champions of the Storm Lord and the All-Hammer. ",
                id: "824436",
                note: null,
                date: {
                    day: 7,
                    year: null,
                    month: 1
                },
                category: "religious-holidays"
            },
            {
                name: "Renewal Festival",
                description: "Spring begins early in the month of Dualahei, officially starting on the 13th with the Renewal Festival.",
                id: "824437",
                note: null,
                date: {
                    day: 13,
                    year: null,
                    month: 2
                },
                category: "secular-holidays"
            },
            {
                name: "Wild's Grandeur",
                description: "Though the Archeart is the god of spring, the peak of the spring season is the holy day of the Wildmother.\n\nThe people in the southern wilds of Tal'Dorei celebrate the Wildmother's strength by journeying to a place of great natural beauty. This could be the top of a mountainous waterfall, the center of a desert, or even an old and peaceful city park (such as Azalea Street Park in Emon). Though Emon rarely celebrates Wild's Grandeur, the few who do will plant trees in observance of the holiday.\n\nThe people of the Menagerie Coast set aside this day to sail for no reason other than the pleasure of observing the natural beauty of their surroundings. Those who still partake in elements of Ki'Nau culture take this day to appreciate the fruits and foods granted by the sea, leaving offerings of delicacies and small handmade crafts at temporary altars of twisted roots and grasses.",
                id: "824438",
                note: null,
                date: {
                    day: 20,
                    year: null,
                    month: 2
                },
                category: "religious-holidays"
            },
            {
                name: "Harvest's Rise",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824439",
                note: null,
                date: {
                    day: 11,
                    year: null,
                    month: 3
                },
                category: "secular-holidays"
            },
            {
                name: "Merryfrond's Day",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824440",
                note: null,
                date: {
                    day: 31,
                    year: null,
                    month: 3
                },
                category: "secular-holidays"
            },
            {
                name: "Deep Solace",
                description: "Moradin's holy day is Deep Solace, which is celebrated on the eighteenth day of the fifth month. Especially devout followers of the All-Hammer spend the day in isolation, meditating on the meaning of family and how they may be better mothers, fathers, siblings, and children.\n\nThe dwarven communities across Exandria, such as the ones in Grimgolir and Kraghammer, celebrate with a full day of feasting and drinking. ",
                id: "824441",
                note: null,
                date: {
                    day: 18,
                    year: null,
                    month: 4
                },
                category: "religious-holidays"
            },
            {
                name: "Zenith",
                description: "Summer begins in the middle of Unndilar, officially starting at noon on the 26th day known as the Zenith.",
                id: "824442",
                note: null,
                date: {
                    day: 26,
                    year: null,
                    month: 4
                },
                category: "secular-holidays"
            },
            {
                name: "Artisan's Faire",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824443",
                note: null,
                date: {
                    day: 15,
                    year: null,
                    month: 5
                },
                category: "secular-holidays"
            },
            {
                name: "Elvendawn",
                description: "Corellon's holy day is called Elvendawn,\nor Midsummer. It is celebrated on the twentieth day\nof the sixth month, and commemorates the elves' first\nemergence from the Feywild.\n\nIn Syngorn, the Elves open small doorways into the Feywild and celebrate alongside the wild fey with uncharacteristic vigor.\n\nThough the Dwendalian\nEmpire doesn't promote the worship of the Arch Heart,\nthe elves of Bysaes Tyl quietly celebrate in private by\nopening small doors to the Feywild and having a little\nmore wine than usual. ",
                id: "824444",
                note: null,
                date: {
                    day: 20,
                    year: null,
                    month: 5
                },
                category: "religious-holidays"
            },
            {
                name: "Highsummer",
                description: "The holy day of the Dawnfather is the peak of the summer season.\n\nEmon celebrates with an entire week of gift-giving and feasting, ending at midnight on the 21st of Sydenstar (the anniversary of the Battle of the Umbra Hills, where Zan Tal'Dorei dethroned Trist Drassig).\n\nWhitestone (where the Dawnfather is the city's patron god) celebrates with gift-giving and a festival of lights around the Sun Tree. Due to the Briarwood occupation, money is thin, so most Whitestone folk choose to recount the small things they are thankful for, rather than buy gifts.\n\nWhile other parts of Exandria feast, the Dwendalian\nEmpire uses this day as an opportunity to enlist more\nsoldiers in its army. The military holds great feasts and\nhands out toy soldiers and other propaganda, encouraging people to enlist and help fight against the evil that\nthreatens the king. ",
                id: "824445",
                note: null,
                date: {
                    day: 7,
                    year: null,
                    month: 6
                },
                category: "religious-holidays"
            },
            {
                name: "Morn of Largesse",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824446",
                note: null,
                date: {
                    day: 14,
                    year: null,
                    month: 6
                },
                category: "secular-holidays"
            },
            {
                name: "Harvest's Close",
                description: "Autumn begins on the 3rd of Fessuran and is typically celebrated with feasting in rural regions and with carnivals in the cities. ",
                id: "824447",
                note: null,
                date: {
                    day: 3,
                    year: null,
                    month: 7
                },
                category: "secular-holidays"
            },
            {
                name: "The Hazel Festival",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824448",
                note: null,
                date: {
                    day: 12,
                    year: null,
                    month: 8
                },
                category: "secular-holidays"
            },
            {
                name: "Civilization's Dawn",
                description: "The Law Bearer's holy day is Civilization's\nDawn, which is celebrated on the autumnal equinox,\nusually the twenty-second day of the ninth month.\n\nEmon celebrates with a great bonfire in the square of each neighborhood, around which each community dances and gives gifts.\n\nIn the\nDwendalian Empire, people celebrate by having feasts \nin honor of the laws of the Dwendal bloodline. One seat\nat every table is left open for the king, who eats in spirit\nwith the people he rules. ",
                id: "824449",
                note: null,
                date: {
                    day: 22,
                    year: null,
                    month: 8
                },
                category: "religious-holidays"
            },
            {
                name: "Night of Ascension",
                description: "The Raven Queen's holy day is called the Night of Ascension, celebrating her apotheosis. The actual date of the her rise to divinity is unclear, but the Night of Ascension is celebrated on the thirteenth day of the tenth month.\n\nThough most in Emon see this celebration of the dead as unnerving and macabre, the followers of the Matron of Ravens believe that the honored dead would prefer to be venerated with cheer, not misery.\n\nWhat was once a night of cheery celebration of the dead in the Dwendalian Empire has recently become an occasion to burn effigies and decry the Kryn Dynasty for their unnatural relationship with death.",
                id: "824450",
                note: null,
                date: {
                    day: 13,
                    year: null,
                    month: 9
                },
                category: "religious-holidays"
            },
            {
                name: "Zan's Cup",
                description: "This holiday is up to the calendar owner to decide what it is for! :)",
                id: "824451",
                note: null,
                date: {
                    day: 21,
                    year: null,
                    month: 9
                },
                category: "secular-holidays"
            },
            {
                name: "Barren Eve",
                description: "Winter begins on the 2nd day of Duscar, the Barren Eve, which is a nighttime celebration and remembrance of those who fell in battle.",
                id: "824452",
                note: null,
                date: {
                    day: 2,
                    year: null,
                    month: 10
                },
                category: "secular-holidays"
            },
            {
                name: "Embertide",
                description: "Bahamut's holy day is called Embertide, and is celebrated on the fifth day of Duscar. This is a day of remembrance, solemnity, and respect for those who have fallen in the defense of others.",
                id: "824453",
                note: null,
                date: {
                    day: 5,
                    year: null,
                    month: 10
                },
                category: "religious-holidays"
            },
            {
                name: "Winter's Crest",
                description: "This day celebrates the freedom of Tal'Dorei from Errevon the Rimelord. It is the peak of the winter season, so devout followers of the Matron of Ravens (as the goddess of winter) consider it to be one of her holy days.\n\nHowever, in most of the land, people see Winter's Crest as a secular holiday, often celebrated with omnipresent music in public areas, lavish gift-giving to relatives and loved ones, and the cutting and decorating of trees placed indoors. The Sun Tree in Whitestone is often decorated with lights and other baubles for Winter's Crest.",
                id: "824454",
                note: null,
                date: {
                    day: 20,
                    year: null,
                    month: 10
                },
                category: "secular-holidays"
            }
        ],
        id: null,
        categories: [
            {
                name: "Religious Holidays",
                id: "religious-holidays",
                color: "#0D47A1"
            },
            {
                name: "Secular Holidays",
                id: "secular-holidays",
                color: "#4A148C"
            }
        ]
    },
    {
        name: "Calendar of Harptos",
        description: "Calendar of Faerûn of the Forgotten Realms.",
        static: {
            displayDayNumber: false,
            firstWeekDay: 0,
            incrementDay: false,
            displayMoons: true,
            overflow: false,
            weekdays: [
                {
                    type: "day",
                    name: "I",
                    id: "ID_9999882bb94a"
                },
                {
                    type: "day",
                    name: "II",
                    id: "ID_8a0b4b79d888"
                },
                {
                    type: "day",
                    name: "III",
                    id: "ID_da483aca8bf9"
                },
                {
                    type: "day",
                    name: "IV",
                    id: "ID_a8fbea39cac8"
                },
                {
                    type: "day",
                    name: "V",
                    id: "ID_9b19d9787b0b"
                },
                {
                    type: "day",
                    name: "VI",
                    id: "ID_382a590a8a28"
                },
                {
                    type: "day",
                    name: "VII",
                    id: "ID_fbca0ab80afb"
                },
                {
                    type: "day",
                    name: "VIII",
                    id: "ID_ca093bca5ad9"
                },
                {
                    type: "day",
                    name: "IX",
                    id: "ID_d95b39098bf8"
                },
                {
                    type: "day",
                    name: "X",
                    id: "ID_389bfb5858db"
                }
            ],
            months: [
                {
                    name: "Hammer (Deepwinter)",
                    type: "month",
                    length: 30,
                    id: "ID_cbeb4b190b6a"
                },
                {
                    name: "Midwinter",
                    type: "intercalary",
                    length: 1,
                    id: "ID_89bad9089b7b"
                },
                {
                    name: "Alturiak (The Claw of Winter)",
                    type: "month",
                    length: 30,
                    id: "ID_6a08a8aacb7b"
                },
                {
                    name: "Ches (The Claw of the Sunsets)",
                    type: "month",
                    length: 30,
                    id: "ID_db2a7bf97afa"
                },
                {
                    name: "Tarsakh (The Claw of Storms)",
                    type: "month",
                    length: 30,
                    id: "ID_6b48982b0bda"
                },
                {
                    name: "Greengrass",
                    type: "intercalary",
                    length: 1,
                    id: "ID_08790af92809"
                },
                {
                    name: "Mirtul (The Melting)",
                    type: "month",
                    length: 30,
                    id: "ID_b91b39f95a28"
                },
                {
                    name: "Kythorn (The Time of Flowers)",
                    type: "month",
                    length: 30,
                    id: "ID_f8e9585a2bf8"
                },
                {
                    name: "Flamerule (Summertide)",
                    type: "month",
                    length: 30,
                    id: "ID_fa895bdb38e9"
                },
                {
                    name: "Midsummer",
                    type: "intercalary",
                    length: 1,
                    id: "ID_a9181b5a683a"
                },
                {
                    name: "Eleasis (Highsun)",
                    type: "month",
                    length: 30,
                    id: "ID_1b1b1b287b0a"
                },
                {
                    name: "Eleint (The Fading)",
                    type: "month",
                    length: 30,
                    id: "ID_1aca5918993a"
                },
                {
                    name: "Highharvestide",
                    type: "intercalary",
                    length: 1,
                    id: "ID_a94a183b4b88"
                },
                {
                    name: "Marpenoth (Leaffall)",
                    type: "month",
                    length: 30,
                    id: "ID_58d97969eb79"
                },
                {
                    name: "Uktar (The Rotting)",
                    type: "month",
                    length: 30,
                    id: "ID_4b090b787b18"
                },
                {
                    name: "The Feast of the Moon",
                    type: "intercalary",
                    length: 1,
                    id: "ID_1b0ae8dbdb4a"
                },
                {
                    name: "Nightal (The Drawing Down)",
                    type: "month",
                    length: 30,
                    id: "ID_abb82afab80a"
                }
            ],
            moons: [
                {
                    name: "Selúne",
                    cycle: 30.4375,
                    offset: 13.9,
                    faceColor: "#ffffff",
                    shadowColor: "#000000",
                    id: "ID_48ea2a69a888"
                }
            ],
            leapDays: [
                {
                    name: "Shieldsmeet",
                    type: "leapday",
                    interval: [
                        {
                            ignore: false,
                            exclusive: false,
                            interval: 4
                        }
                    ],
                    offset: 0,
                    timespan: 9,
                    intercalary: false,
                    id: "ID_5b08faa88ada"
                }
            ],
            eras: []
        },
        current: {
            year: 1491,
            day: 1,
            month: 0
        },
        events: [
            {
                name: "Winter Solstice",
                description: null,
                id: "824588",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-events"
            },
            {
                name: "Vernal Equinox",
                description: null,
                id: "824589",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-events"
            },
            {
                name: "Summer Solstice",
                description: null,
                id: "824590",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-events"
            },
            {
                name: "Autumnal Equinox",
                description: null,
                id: "824591",
                note: null,
                date: {
                    day: null,
                    year: null,
                    month: null
                },
                category: "natural-events"
            },
            {
                name: "Shieldmeet",
                description: "Shieldmeet was the equivalent of a leap year day in the Calendar of Harptos, occurring once every four years, adding a day after the festival of Midsummer and before Eleasis 1. Traditionally the day was used for fairs, bazaars, musical and theatrical performances, and tournaments of skill and magical ability. Nobles usually held court to hear the petitions of their people and to make or renew trade pacts, alliances, and agreements. Shieldmeet was known as Cinnaelos'Cor (also seen as Cinnaeloscor), \"the Day of Corellon's Peace\" in elvish and marked the end of an aeloulaev and the beginning of a new one in the elven Aryselmalyn calendar.",
                id: "824592",
                note: null,
                date: {
                    day: 2,
                    year: null,
                    month: 9
                },
                category: "festivals"
            },
            {
                name: "Feast of the Moon",
                description: "The Feast of the Moon, or Moonfest, was an annual festival in the Calendar of Harptos, occurring between the final night of Uktar and the first day of Nightal. It was the last great festival of the calendar year.\n\nThe day traditionally marked the onset of winter. It was also a time to celebrate and honor the ancestors and the respected dead. On this day, folk blessed their ancestors' graves and performed the Ritual of Remembrance. People also gathered to tell stories of the deeds of their ancestors and of the gods until deep into the night, until they merged and became legend. This was a time to hear of past heroes, great treasures, and lost cities.\n\nIn FaerÃƒÂ»n, battles were typically fought between harvest-time and the coming of winter. This meant that most of the fighting usually occurred in the month of Uktar. The timing of the Feast of the MoonÃ¢â‚¬â€after recently slain soldiers had joined the ranks of the deadÃ¢â‚¬â€was thus practical, if sadly ironic.\n\nThe Heralds of FaerÃƒÂ»n had a number of special duties on the Feast of the Moon. Prime among these was to perform the Bloodsong ceremony, at which a Herald publicly recited the genealogies of each noble family in the area. In this way, the Heralds reaffirmed a noble family's traditional authority and status, as well as the respect accorded to them.\n\nPriests of a number of deities of various pantheons held rites, ceremonies, and festivals on the Feast of the Moon. Many, though not all, focused on remembering the dead in one way or another.",
                id: "824593",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 15
                },
                category: "festivals"
            },
            {
                name: "Highharvesttide",
                description: 'Highharvestide was an annual festival in the Calendar of Harptos, taking place between 30 Eleint and 1 Marpenoth. It was traditionally a feast to celebrate the harvest and the abundance of food, but also the time when those wishing to travel left on their journeys before winter set in.\n\nPreparations for the feast started as early as a tenday before, while preparing, cooking, and preserving the harvest for the cold winter months. Traditions varied from community to community, but examples of festive activity included food-related contests; races and challenges of skill and strength; receiving homemade sweets from the local clergy; and priests blessing larders, wine cellars, grain bins, and food preserves.\n\nThis day was often an important anniversary to various governments. Often, taxes and tithes came due, rulers held "open courts" to hear the concerns of their citizens, oaths were publicly renewed, troops received marching orders to new duty stations, and guilds met to confer on prices and rate changes for goods and services.\n\nAccording to tradition, dwarves only drank water and elves drank only dew on this day. However, these traditions began to fade in the 14th and 15th century DR.\n\nIt was said that children born on this day were favored by Tymora to have lifelong good luck but be smitten with wanderlust. Another legend was that human females born on this day had control over their reproductive system (i.e., got pregnant only when they wanted to) by force of will alone, and that they could instantly sense when they had been poisoned, either by ingestion or being bitten by a venomous creature for example.',
                id: "824594",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 12
                },
                category: "festivals"
            },
            {
                name: "Greengrass",
                description: "Greengrass was a festival to welcome in the first day of spring in the Calendar of Harptos. It occured annually on a special day between Tarsakh 30 and Mirtul 1. Traditionally, the wealthier people brought out flowers to give to the less wealthy, who either wore them or spread them on the ground to encourage the deities to usher in the summer.",
                id: "824595",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 5
                },
                category: "festivals"
            },
            {
                name: "Midwinter",
                description: "Midwinter (also known as Deadwinter Day) was a festival to mark the midpoint of winter in the Calendar of Harptos. It occured on a special day between Hammer 30 and Alturiak 1. Amongst nobles and monarchs it was known as Midwinter and was traditionally used to make or renew alliances, although the common people called it Deadwinter Day, a reference to the cold and hard times that remained before the spring.\n\nOn Midwinter Day the Red Fellowship of the Deity known as the Red Knight observes the Retreat. This solemn ceremony consists of an assembly wherein the clergy discuss the previous year's campaigns. Strategies are discussed, battles analyzed, and the accumulated lore integrated into the church's teachings.\n\nThe holiest day of the year for the Church of Shevarash is Midwinter Night, during which the Dark Court Slaughter is remembered. Inductions into the ranks of the clergy occur at this time. Each new cleric screams vows of vengeance into the night air and swears neither to laugh nor smile until the Spider Queen and her followers are no more.",
                id: "824596",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 1
                },
                category: "festivals"
            },
            {
                name: "Midsummer",
                description: "Midsummer was a festival that celebrated love and music through feast. It occurred between Flamerule 30 and Eleasis 1 on the Calendar of Harptos. It was a time when love advanced, and it was said the deities themselves took a hand to ensure good weather. If bad weather was experienced on this night it was considered an extremely bad omen. Shieldmeet occurred the day after Midsummer on leap years.",
                id: "824597",
                note: null,
                date: {
                    day: 1,
                    year: null,
                    month: 9
                },
                category: "festivals"
            }
        ],
        id: null,
        categories: [
            {
                name: "Natural Events",
                id: "natural-events",
                color: "#2E7D32"
            },
            {
                name: "Festivals",
                id: "festivals",
                color: "#9b2c2c"
            }
        ]
    }
];


/***/ }),

/***/ "./src/view/view.ts":
/*!**************************!*\
  !*** ./src/view/view.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VIEW_TYPE": () => (/* binding */ VIEW_TYPE),
/* harmony export */   "FULL_VIEW": () => (/* binding */ FULL_VIEW),
/* harmony export */   "default": () => (/* binding */ FantasyCalendarView)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/helper */ "./src/helper/index.ts");
/* harmony import */ var src_settings_modals_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/settings/modals/event */ "./src/settings/modals/event.ts");
/* harmony import */ var _view_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view.css */ "./src/view/view.css");
/* harmony import */ var _ui_Calendar_svelte__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/Calendar.svelte */ "./src/view/ui/Calendar.svelte");
/* harmony import */ var src_settings_modals_confirm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/settings/modals/confirm */ "./src/settings/modals/confirm.ts");
/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/utils/functions */ "./src/utils/functions.ts");





const VIEW_TYPE = "FANTASY_CALENDAR";
const FULL_VIEW = "FANTASY_CALENDAR_FULL_VIEW";



(0,obsidian__WEBPACK_IMPORTED_MODULE_0__.addIcon)(VIEW_TYPE, `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="calendar" class="svg-inline--fa fa-calendar fa-w-14" role="img" viewBox="0 0 448 512"><path xmlns="http://www.w3.org/2000/svg" fill="currentColor" d="M400 64h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V160h352v298c0 3.3-2.7 6-6 6z"/><path fill="currentColor" d="M18.32 255.78L192 223.96l-91.28 68.69c-10.08 10.08-2.94 27.31 11.31 27.31h222.7c-9.44-26.4-14.73-54.47-14.73-83.38v-42.27l-119.73-87.6c-23.82-15.88-55.29-14.01-77.06 4.59L5.81 227.64c-12.38 10.33-3.45 30.42 12.51 28.14zm556.87 34.1l-100.66-50.31A47.992 47.992 0 0 1 448 196.65v-36.69h64l28.09 22.63c6 6 14.14 9.37 22.63 9.37h30.97a32 32 0 0 0 28.62-17.69l14.31-28.62a32.005 32.005 0 0 0-3.02-33.51l-74.53-99.38C553.02 4.7 543.54 0 533.47 0H296.02c-7.13 0-10.7 8.57-5.66 13.61L352 63.96 292.42 88.8c-5.9 2.95-5.9 11.36 0 14.31L352 127.96v108.62c0 72.08 36.03 139.39 96 179.38-195.59 6.81-344.56 41.01-434.1 60.91C5.78 478.67 0 485.88 0 494.2 0 504 7.95 512 17.76 512h499.08c63.29.01 119.61-47.56 122.99-110.76 2.52-47.28-22.73-90.4-64.64-111.36zM489.18 66.25l45.65 11.41c-2.75 10.91-12.47 18.89-24.13 18.26-12.96-.71-25.85-12.53-21.52-29.67z" style="&#10;    transform: scale(0.4125) translate(50%, 95%);&#10;"/></svg>`);
(0,obsidian__WEBPACK_IMPORTED_MODULE_0__.addIcon)("fantasy-calendar-reveal", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="calendar-day" class="svg-inline--fa fa-calendar-day fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm64-192c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-96zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"/></svg>`);
class FantasyCalendarView extends obsidian__WEBPACK_IMPORTED_MODULE_0__.ItemView {
    constructor(plugin, leaf, options = {}) {
        super(leaf);
        this.plugin = plugin;
        this.leaf = leaf;
        this.options = options;
        this.updateMe = true;
        this.yearView = false;
        this.moons = true;
        this.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-updated", () => {
            this.updateCalendars();
        }));
        this.registerEvent(this.plugin.app.workspace.on("layout-change", () => {
            if (!this._app)
                return;
            this._app.$set(Object.assign({ fullView: this.full }, (this.full ? { dayView: false } : {})));
        }));
        /* window.view = this; */
    }
    /* full =  false; */
    get root() {
        return this.leaf.getRoot();
    }
    get full() {
        return !("collapse" in this.root);
    }
    updateCalendars() {
        var _a, _b, _c;
        if (!this.updateMe) {
            this.updateMe = true;
            return;
        }
        if (!this.plugin.data.calendars.length) {
            (_a = this._app) === null || _a === void 0 ? void 0 : _a.$destroy();
            this.contentEl.empty();
            this.noCalendarEl = this.contentEl.createDiv("fantasy-no-calendar");
            this.noCalendarEl.createSpan({
                text: "No calendars created! Create a calendar to see it here."
            });
            return;
        }
        const calendar = (_c = (_b = this.plugin.data.calendars.find((c) => { var _a; return c.id == ((_a = this.calendar) === null || _a === void 0 ? void 0 : _a.id); })) !== null && _b !== void 0 ? _b : this.plugin.defaultCalendar) !== null && _c !== void 0 ? _c : this.plugin.data.calendars[0];
        if (this.helper && this.helper.object.id == calendar.id) {
            this.update(calendar);
        }
        else {
            this.setCurrentCalendar(calendar);
        }
    }
    update(calendar) {
        this.calendar = calendar;
        this.helper.update(this.calendar);
        this.registerCalendarInterval();
        if (!this._app) {
            this.build();
        }
        else {
            this._app.$set({ calendar: this.helper });
        }
    }
    registerCalendarInterval() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
        if (this.calendar.static.incrementDay) {
            let current = new Date();
            if (!this.calendar.date) {
                this.calendar.date = current.valueOf();
            }
            const dif = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_6__.daysBetween)(new Date(this.calendar.date), current);
            if (dif >= 1) {
                for (let i = 0; i < dif; i++) {
                    this.helper.goToNextCurrentDay();
                }
                this.calendar.date = current.valueOf();
                this.plugin.saveSettings();
            }
            this.interval = window.setInterval(() => {
                if ((0,src_utils_functions__WEBPACK_IMPORTED_MODULE_6__.daysBetween)(new Date(), current) >= 1) {
                    this.helper.goToNextCurrentDay();
                    this.helper.current;
                    current = new Date();
                    this.calendar.date = current.valueOf();
                    this.plugin.saveSettings();
                }
            }, 60 * 1000);
            this.registerInterval(this.interval);
        }
    }
    setCurrentCalendar(calendar) {
        var _a;
        (_a = this.noCalendarEl) === null || _a === void 0 ? void 0 : _a.detach();
        this.calendar = calendar;
        this.moons = this.calendar.static.displayMoons;
        this.dayNumber = this.calendar.static.displayDayNumber;
        this.helper = new src_helper__WEBPACK_IMPORTED_MODULE_1__["default"](this.calendar, this.plugin);
        this.registerCalendarInterval();
        this.build();
    }
    createEventForDay(date) {
        const modal = new src_settings_modals_event__WEBPACK_IMPORTED_MODULE_2__.CreateEventModal(this.app, this.calendar, null, date);
        modal.onClose = () => {
            if (!modal.saved)
                return;
            this.calendar.events.push(modal.event);
            this.plugin.saveSettings();
            this._app.$set({
                calendar: this.helper
            });
            this.triggerHelperEvent("day-update");
        };
        modal.open();
    }
    onOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.updateCalendars();
        });
    }
    build() {
        this.contentEl.empty();
        this._app = new _ui_Calendar_svelte__WEBPACK_IMPORTED_MODULE_4__["default"]({
            target: this.contentEl,
            props: {
                calendar: this.helper,
                fullView: this.full,
                yearView: this.yearView,
                moons: this.moons,
                displayWeeks: this.helper.displayWeeks,
                displayDayNumber: this.dayNumber
            }
        });
        this._app.$on("day-click", (event) => {
            const day = event.detail;
            if (day.events.length)
                return;
            this.createEventForDay(day.date);
        });
        this._app.$on("day-doubleclick", (event) => {
            const day = event.detail;
            if (!day.events.length)
                return;
            this.helper.viewing.day = day.number;
            this.helper.viewing.month = this.helper.displayed.month;
            this.helper.viewing.year = this.helper.displayed.year;
            this.yearView = false;
            this._app.$set({ yearView: false });
            this._app.$set({ dayView: true });
            this.triggerHelperEvent("day-update", false);
        });
        this._app.$on("day-context-menu", (event) => {
            const { day, evt } = event.detail;
            const menu = new obsidian__WEBPACK_IMPORTED_MODULE_0__.Menu(this.app);
            menu.setNoIcon();
            if (!this.full) {
                menu.addItem((item) => {
                    item.setTitle("Open Day").onClick(() => {
                        this.helper.viewing.day = day.number;
                        this.helper.viewing.month =
                            this.helper.displayed.month;
                        this.helper.viewing.year =
                            this.helper.displayed.year;
                        this.yearView = false;
                        this._app.$set({ yearView: false });
                        this._app.$set({ dayView: true });
                        this.triggerHelperEvent("day-update", false);
                    });
                });
            }
            menu.addItem((item) => {
                item.setTitle("Set as Today").onClick(() => {
                    this.calendar.current = day.date;
                    this.helper.current.day = day.number;
                    this.triggerHelperEvent("day-update");
                    this.plugin.saveSettings();
                });
            });
            menu.addItem((item) => item.setTitle("New Event").onClick(() => {
                this.createEventForDay(day.date);
            }));
            menu.showAtMouseEvent(evt);
        });
        this._app.$on("settings", (event) => {
            const evt = event.detail;
            const menu = new obsidian__WEBPACK_IMPORTED_MODULE_0__.Menu(this.app);
            menu.setNoIcon();
            menu.addItem((item) => {
                item.setTitle(`${this.calendar.displayWeeks ? "Hide" : "Show"} Weeks`).onClick(() => {
                    this.calendar.displayWeeks = !this.calendar.displayWeeks;
                    this.helper.update(this.calendar);
                    this._app.$set({
                        displayWeeks: this.calendar.displayWeeks
                    });
                    this.plugin.saveSettings();
                });
            });
            menu.addItem((item) => {
                item.setTitle(`Open ${this.yearView ? "Month" : "Year"}`).onClick(() => {
                    this.yearView = !this.yearView;
                    this._app.$set({ yearView: this.yearView });
                });
            });
            menu.addItem((item) => {
                item.setTitle(this.moons ? "Hide Moons" : "Display Moons").onClick(() => {
                    this.toggleMoons();
                });
            });
            menu.addItem((item) => {
                item.setTitle(this.dayNumber ? "Hide Day Number" : "Display Day Number").onClick(() => {
                    this.dayNumber = !this.dayNumber;
                    this.calendar.static.displayDayNumber = this.dayNumber;
                    this._app.$set({ displayDayNumber: this.dayNumber });
                    this.plugin.saveSettings();
                });
            });
            menu.addItem((item) => {
                item.setTitle("View Day");
                item.onClick(() => {
                    const modal = new ChangeDateModal(this.plugin, this.calendar);
                    modal.onClose = () => {
                        if (!modal.confirmed)
                            return;
                        if (modal.setCurrent) {
                            this.calendar.current = Object.assign({}, modal.date);
                            this.setCurrentCalendar(this.calendar);
                        }
                        else {
                            this.helper.displayed = Object.assign({}, modal.date);
                            this.helper.update();
                            this._app.$set({ calendar: this.helper });
                        }
                        this.plugin.saveSettings();
                    };
                    modal.open();
                });
            });
            menu.addItem((item) => {
                item.setTitle("Switch Calendars");
                item.setDisabled(this.plugin.data.calendars.length <= 1);
                item.onClick(() => {
                    const modal = new SwitchModal(this.plugin, this.calendar);
                    modal.onClose = () => {
                        if (!modal.confirmed)
                            return;
                        this.setCurrentCalendar(modal.calendar);
                    };
                    modal.open();
                });
            });
            menu.showAtMouseEvent(evt);
        });
        this._app.$on("event-click", (evt) => {
            const { event, modifier } = evt.detail;
            if (event.note) {
                let leaves = [];
                this.app.workspace.iterateAllLeaves((leaf) => {
                    if (!(leaf.view instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.MarkdownView))
                        return;
                    if (leaf.view.file.basename === event.note) {
                        leaves.push(leaf);
                    }
                });
                if (leaves.length) {
                    this.app.workspace.setActiveLeaf(leaves[0]);
                }
                else {
                    this.app.workspace.openLinkText(event.note, "", this.full || modifier);
                }
            }
            else {
                const modal = new ViewEventModal(event, this.plugin);
                modal.open();
            }
        });
        this._app.$on("event-mouseover", (evt) => {
            if (!this.plugin.data.eventPreview)
                return;
            const { target, event } = evt.detail;
            if (event.note) {
                this.app.workspace.trigger("link-hover", this, //hover popover, but don't need
                target, //targetEl
                event.note, //linkText
                "" //source
                );
            }
        });
        this._app.$on("event-context", (custom) => {
            const { evt, event } = custom.detail;
            const menu = new obsidian__WEBPACK_IMPORTED_MODULE_0__.Menu(this.app);
            menu.setNoIcon();
            if (!event.note) {
                menu.addItem((item) => {
                    item.setTitle("Create Note").onClick(() => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                        var _a, _b, _c, _d;
                        const path = (_a = this.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
                        const newFilePath = path
                            ? (_c = (_b = this.app.fileManager.getNewFileParent(path)) === null || _b === void 0 ? void 0 : _b.parent) !== null && _c !== void 0 ? _c : "/"
                            : "/";
                        const date = `${event.date.year}-${event.date.month + 1}-${event.date.day}`;
                        let end;
                        if (event.end) {
                            end = `${event.end.year}-${event.end.month + 1}-${event.end.day}`;
                        }
                        const content = Object.assign(Object.assign({ "fc-calendar": this.calendar.name, "fc-date": date }, (event.end ? { "fc-end": end } : {})), (event.category
                            ? {
                                "fc-category": (_d = this.calendar.categories.find((cat) => cat.id == event.category)) === null || _d === void 0 ? void 0 : _d.name
                            }
                            : {}));
                        event.note = (0,obsidian__WEBPACK_IMPORTED_MODULE_0__.normalizePath)(`${newFilePath}/${event.name}.md`);
                        let file = this.app.vault.getAbstractFileByPath(event.note);
                        if (!file) {
                            file = yield this.app.vault.create(event.note, `---\n${(0,obsidian__WEBPACK_IMPORTED_MODULE_0__.stringifyYaml)(content)}\n---`);
                        }
                        this.plugin.saveCalendar();
                        if (file instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFile) {
                            const fileViews = this.app.workspace.getLeavesOfType("markdown");
                            const existing = fileViews.find((l) => {
                                l.view instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.FileView &&
                                    l.view.file.path == event.note;
                            });
                            if (existing) {
                                this.app.workspace.setActiveLeaf(existing);
                            }
                            else {
                                yield this.app.workspace
                                    .getUnpinnedLeaf()
                                    .openFile(file, {
                                    active: true
                                });
                            }
                        }
                    }));
                });
            }
            menu.addItem((item) => {
                item.setTitle("Edit Event").onClick(() => {
                    const modal = new src_settings_modals_event__WEBPACK_IMPORTED_MODULE_2__.CreateEventModal(this.app, this.calendar, event);
                    modal.onClose = () => {
                        if (!modal.saved)
                            return;
                        const existing = this.calendar.events.find((e) => e.id == event.id);
                        this.calendar.events.splice(this.calendar.events.indexOf(existing), 1, modal.event);
                        this.plugin.saveSettings();
                        this._app.$set({
                            calendar: this.helper
                        });
                        this.triggerHelperEvent("day-update");
                    };
                    modal.open();
                });
            });
            menu.addItem((item) => {
                item.setTitle("Delete Event").onClick(() => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                    if (yield (0,src_settings_modals_confirm__WEBPACK_IMPORTED_MODULE_5__.confirmWithModal)(this.app, "Are you sure you wish to delete this event?", {
                        cta: "Delete",
                        secondary: "Cancel"
                    })) {
                        const existing = this.calendar.events.find((e) => e.id == event.id);
                        this.calendar.events.splice(this.calendar.events.indexOf(existing), 1);
                        this.plugin.saveSettings();
                        this._app.$set({
                            calendar: this.helper
                        });
                        this.triggerHelperEvent("day-update");
                    }
                }));
            });
            menu.showAtMouseEvent(evt);
        });
        this._app.$on("event", (e) => {
            const date = e.detail;
            this.createEventForDay(date);
        });
        this._app.$on("reset", () => {
            this.helper.reset();
            this.yearView = false;
            this._app.$set({ yearView: false });
            this._app.$set({ dayView: true });
            this.triggerHelperEvent("day-update", false);
        });
    }
    toggleMoons() {
        this.moons = !this.moons;
        this._app.$set({ moons: this.moons });
    }
    onClose() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () { });
    }
    onResize() {
        this.triggerHelperEvent("view-resized", false);
    }
    getViewType() {
        return VIEW_TYPE;
    }
    getDisplayText() {
        return "Fantasy Calendar";
    }
    getIcon() {
        return VIEW_TYPE;
    }
    triggerHelperEvent(event, full = true) {
        if (!this.helper)
            return;
        this.helper.trigger(event);
        if (full) {
            this.updateMe = false;
            this.plugin.app.workspace.trigger("fantasy-calendars-updated");
        }
    }
    onunload() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () { });
    }
}
/* export class FullCalendarView extends FantasyCalendarView {
    full = true;
}
 */
class SwitchModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(plugin, calendar) {
        super(plugin.app);
        this.plugin = plugin;
        this.calendar = calendar;
        this.confirmed = false;
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h4", { text: "Switch Calendars" });
            const dropdownEl = this.contentEl.createDiv("fantasy-calendar-dropdown");
            dropdownEl.createEl("label", {
                text: "Choose a Calendar"
            });
            const dropdown = new obsidian__WEBPACK_IMPORTED_MODULE_0__.DropdownComponent(dropdownEl).onChange((v) => {
                this.calendar = this.plugin.data.calendars.find((c) => c.id == v);
            });
            dropdown
                .addOptions(Object.fromEntries(this.plugin.data.calendars.map((c) => [c.id, c.name])))
                .setValue(this.calendar ? this.calendar.id : null);
            const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl)
                .setButtonText("Switch")
                .setCta()
                .onClick(() => {
                this.confirmed = true;
                this.close();
            });
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl).setButtonText("Cancel").onClick(() => {
                this.close();
            });
        });
    }
    onOpen() {
        this.display();
    }
}
class ChangeDateModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(plugin, calendar) {
        super(plugin.app);
        this.plugin = plugin;
        this.calendar = calendar;
        this.confirmed = false;
        this.setCurrent = false;
        this.date = Object.assign({}, this.calendar.current);
        this.tempCurrentDays = this.date.day;
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h4", { text: "View Day" });
            this.dateFieldEl = this.contentEl.createDiv("fantasy-calendar-date-fields");
            this.buildDateFields();
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.Setting(this.contentEl)
                .setName("Set as Current Date")
                .setDesc("Also set this date to today's date.")
                .addToggle((t) => t.setValue(this.setCurrent).onChange((v) => {
                this.setCurrent = v;
            }));
            const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl)
                .setButtonText("Switch")
                .setCta()
                .onClick(() => {
                this.confirmed = true;
                this.date.day = this.tempCurrentDays;
                this.close();
            });
            new obsidian__WEBPACK_IMPORTED_MODULE_0__.ButtonComponent(buttonEl).setButtonText("Cancel").onClick(() => {
                this.close();
            });
        });
    }
    buildDateFields() {
        var _a, _b, _c, _d, _e, _f;
        this.dateFieldEl.empty();
        if (this.tempCurrentDays != undefined &&
            this.date.month != undefined &&
            this.tempCurrentDays >
                ((_a = this.calendar.static.months[this.date.month]) === null || _a === void 0 ? void 0 : _a.length)) {
            this.tempCurrentDays =
                (_b = this.calendar.static.months[this.date.month]) === null || _b === void 0 ? void 0 : _b.length;
        }
        const dayEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
        dayEl.createEl("label", { text: "Day" });
        const day = new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextComponent(dayEl)
            .setPlaceholder("Day")
            .setValue(`${this.tempCurrentDays}`)
            .setDisabled(this.date.month == undefined)
            .onChange((v) => {
            var _a, _b;
            if (Number(v) < 1 ||
                ((_b = Number(v) >
                    ((_a = this.calendar.static.months[this.date.month]) === null || _a === void 0 ? void 0 : _a.length)) !== null && _b !== void 0 ? _b : Infinity)) {
                new obsidian__WEBPACK_IMPORTED_MODULE_0__.Notice(`The current day must be between 1 and ${this.calendar.static.months[this.date.month].length}`);
                this.tempCurrentDays = this.date.day;
                this.buildDateFields();
                return;
            }
            this.tempCurrentDays = Number(v);
        });
        day.inputEl.setAttr("type", "number");
        const monthEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
        monthEl.createEl("label", { text: "Month" });
        new obsidian__WEBPACK_IMPORTED_MODULE_0__.DropdownComponent(monthEl)
            .addOptions(Object.fromEntries([
            ["select", "Select Month"],
            ...this.calendar.static.months.map((month) => [
                month.name,
                month.name
            ])
        ]))
            .setValue(this.date.month != undefined
            ? this.calendar.static.months[this.date.month].name
            : "select")
            .onChange((v) => {
            if (v === "select")
                this.date.month = null;
            const index = this.calendar.static.months.find((m) => m.name == v);
            this.date.month = this.calendar.static.months.indexOf(index);
            this.buildDateFields();
        });
        const yearEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
        yearEl.createEl("label", { text: "Year" });
        if (this.calendar.static.useCustomYears) {
            const yearDrop = new obsidian__WEBPACK_IMPORTED_MODULE_0__.DropdownComponent(yearEl);
            ((_c = this.calendar.static.years) !== null && _c !== void 0 ? _c : []).forEach((year) => {
                yearDrop.addOption(year.id, year.name);
            });
            if (this.date.year > ((_d = this.calendar.static.years) === null || _d === void 0 ? void 0 : _d.length)) {
                this.date.year = this.calendar.static.years
                    ? this.calendar.static.years.length
                    : null;
            }
            yearDrop
                .setValue((_f = (_e = this.calendar.static.years) === null || _e === void 0 ? void 0 : _e[this.date.year - 1]) === null || _f === void 0 ? void 0 : _f.id)
                .onChange((v) => {
                this.date.year =
                    this.calendar.static.years.findIndex((y) => y.id == v) +
                        1;
            });
        }
        else {
            const year = new obsidian__WEBPACK_IMPORTED_MODULE_0__.TextComponent(yearEl)
                .setPlaceholder("Year")
                .setValue(`${this.date.year}`)
                .onChange((v) => {
                this.date.year = Number(v);
            });
            year.inputEl.setAttr("type", "number");
        }
    }
    onOpen() {
        this.display();
    }
}
class ViewEventModal extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Modal {
    constructor(event, plugin) {
        super(plugin.app);
        this.event = event;
        this.plugin = plugin;
        this.containerEl.addClass("fantasy-calendar-view-event");
    }
    display() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.contentEl.empty();
            this.contentEl.createEl("h4", { text: this.event.name });
            yield obsidian__WEBPACK_IMPORTED_MODULE_0__.MarkdownRenderer.renderMarkdown(this.event.description, this.contentEl, this.event.note, null);
        });
    }
    onOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.display();
        });
    }
}


/***/ }),

/***/ "./src/watcher/watcher.ts":
/*!********************************!*\
  !*** ./src/watcher/watcher.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Watcher": () => (/* binding */ Watcher)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! obsidian */ "obsidian");
/* harmony import */ var obsidian__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(obsidian__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _watcher_worker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./watcher.worker */ "./src/watcher/watcher.worker.ts");



class Watcher extends obsidian__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(plugin) {
        super();
        this.plugin = plugin;
        this.worker = new _watcher_worker__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.files = new Map();
    }
    get calendars() {
        return this.plugin.data.calendars;
    }
    get vault() {
        return this.plugin.app.vault;
    }
    get metadataCache() {
        return this.plugin.app.metadataCache;
    }
    onload() {
        this.recurseFiles();
        this.registerEvent(this.metadataCache.on("changed", (file) => {
            this.parseFileForEvents(file);
        }));
        this.registerEvent(this.vault.on("rename", (abstractFile, oldPath) => {
            if (!this.calendars.length)
                return;
            if (!(abstractFile instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFile))
                return;
            this.worker.postMessage({
                type: "rename",
                file: {
                    path: abstractFile.path,
                    basename: abstractFile.basename,
                    oldPath
                },
                sourceCalendars: this.calendars
            });
        }));
        this.registerEvent(this.vault.on("delete", (abstractFile) => {
            if (!(abstractFile instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFile))
                return;
            for (let calendar of this.calendars) {
                for (let event of calendar.events) {
                    if (!event.note)
                        continue;
                    if (event.note === abstractFile.path) {
                        event.note = null;
                    }
                }
            }
            this.plugin.saveCalendar();
        }));
        this.worker.onmessage = (evt) => (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            if (evt.data.type === "save") {
                this.plugin.saveCalendar();
                return;
            }
            const { id, index, event } = evt.data;
            const calendar = this.calendars.find((c) => c.id == id);
            calendar.events.splice(index, index >= 0 ? 1 : 0, event);
        });
    }
    recurseFiles() {
        if (!this.calendars.length)
            return;
        const folder = this.vault.getAbstractFileByPath(this.plugin.data.path);
        if (!folder || !(folder instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFolder))
            return;
        this.recurseFolder(folder);
        this.plugin.saveCalendar();
    }
    registerCalendar(calendar) {
        console.log("[Fantasy Calendar] Parsing files for events.");
        const folder = this.vault.getAbstractFileByPath(this.plugin.data.path);
        if (!folder || !(folder instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFolder))
            return;
        this.recurseFolder(folder, calendar);
        console.log("[Fantasy Calendar] Parsing complete.");
    }
    recurseFolder(folder, calendar) {
        obsidian__WEBPACK_IMPORTED_MODULE_0__.Vault.recurseChildren(folder, (abstractFile) => {
            if (!abstractFile)
                return;
            if (abstractFile instanceof obsidian__WEBPACK_IMPORTED_MODULE_0__.TFile) {
                this.parseFileForEvents(abstractFile, calendar);
            }
        });
    }
    testPath(filePath) {
        return (`/${filePath}`.match(new RegExp(`^${this.plugin.data.path}`)) !=
            null);
    }
    parseFileForEvents(file, calendar) {
        if (!this.calendars.length)
            return;
        //if the file is not in a calendar watch path, return;
        if (!this.testPath(file.path))
            return;
        const cache = this.metadataCache.getFileCache(file);
        this.worker.postMessage({
            type: "parse",
            file: { path: file.path, basename: file.basename },
            cache,
            sourceCalendars: calendar ? [calendar] : this.calendars,
            defaultCalendar: this.plugin.defaultCalendar.name,
            format: this.plugin.format,
            parseTitle: this.plugin.data.parseDates
        });
    }
    onunload() {
        this.worker.terminate();
        this.worker = null;
    }
}


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ "./src/watcher/watcher.worker.ts":
/*!***************************************!*\
  !*** ./src/watcher/watcher.worker.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Worker_fn)
/* harmony export */ });
/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !!../../node_modules/worker-loader/dist/runtime/inline.js */ "./node_modules/worker-loader/dist/runtime/inline.js");
/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);



function Worker_fn() {
  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()("/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/utils/functions.ts\":\n/*!********************************!*\\\n  !*** ./src/utils/functions.ts ***!\n  \\********************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"daysBetween\": () => (/* binding */ daysBetween),\n/* harmony export */   \"wrap\": () => (/* binding */ wrap),\n/* harmony export */   \"nanoid\": () => (/* binding */ nanoid),\n/* harmony export */   \"getIntervalDescription\": () => (/* binding */ getIntervalDescription),\n/* harmony export */   \"ordinal\": () => (/* binding */ ordinal),\n/* harmony export */   \"dateString\": () => (/* binding */ dateString)\n/* harmony export */ });\nfunction daysBetween(date1, date2) {\r\n    const d1 = window.moment(date1);\r\n    const d2 = window.moment(date2);\r\n    let days = d2.diff(d1, \"days\");\r\n    if ((d1.year() < d2.year() || d1.dayOfYear() < d2.dayOfYear()) &&\r\n        (d1.hour() > d2.hour() ||\r\n            d1.minute() > d2.minute() ||\r\n            d1.second() > d2.second() ||\r\n            d1.millisecond() > d2.millisecond())) {\r\n        days += 1;\r\n    }\r\n    return days;\r\n}\r\nfunction wrap(value, size) {\r\n    return ((value % size) + size) % size;\r\n}\r\nfunction nanoid(len) {\r\n    return \"ID_xyxyxyxyxyxy\".replace(/[xy]/g, function (c) {\r\n        var r = (Math.random() * 16) | 0, v = c == \"x\" ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\nfunction getIntervalDescription(leapday) {\r\n    var _a;\r\n    if (!((_a = leapday.interval) === null || _a === void 0 ? void 0 : _a.length))\r\n        return \"\";\r\n    const intervals = leapday.interval.sort((a, b) => a.interval - b.interval);\r\n    let description = [];\r\n    for (let interval of intervals) {\r\n        const length = interval.interval + (interval.ignore ? 0 : leapday.offset);\r\n        if (interval.exclusive) {\r\n            description.push(`not every ${ordinal(length)} year`);\r\n        }\r\n        else {\r\n            const index = intervals.indexOf(interval);\r\n            const also = index > 0 && intervals[index - 1].exclusive;\r\n            description.push(`${also ? \"also \" : \"\"}every ${ordinal(length)} year`);\r\n        }\r\n    }\r\n    const join = description.join(\", but \");\r\n    return join[0].toUpperCase() + join.slice(1).toLowerCase();\r\n}\r\nfunction ordinal(i) {\r\n    const j = i % 10, k = i % 100;\r\n    if (j == 1 && k != 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j == 2 && k != 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j == 3 && k != 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}\r\nfunction dateString(date, months, end) {\r\n    if (!date || date.day == undefined) {\r\n        return \"\";\r\n    }\r\n    const { day, month, year } = date;\r\n    if (month != undefined && !months[month])\r\n        return \"Invalid Date\";\r\n    if (end && end.day) {\r\n        const endDay = end.day;\r\n        const endMonth = end.month;\r\n        const endYear = end.year;\r\n        if (endMonth != undefined &&\r\n            endYear != undefined &&\r\n            month != undefined &&\r\n            year != undefined) {\r\n            if (year != endYear) {\r\n                return `${months[month].name} ${ordinal(day)}, ${year} - ${months[endMonth].name} ${ordinal(endDay)}, ${endYear}`;\r\n            }\r\n            if (endMonth == month) {\r\n                return `${months[month].name} ${ordinal(day)}-${ordinal(endDay)}, ${year}`;\r\n            }\r\n            if (month != undefined && year != undefined) {\r\n                return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)}, ${year}`;\r\n            }\r\n            if (month != undefined) {\r\n                return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)} of every year`;\r\n            }\r\n            return `${ordinal(day)}-${ordinal(endDay)} of every month`;\r\n        }\r\n    }\r\n    if (month != undefined && year != undefined) {\r\n        return `${months[month].name} ${ordinal(day)}, ${year}`;\r\n    }\r\n    if (month != undefined) {\r\n        return `${months[month].name} ${ordinal(day)} of every year`;\r\n    }\r\n    return `${ordinal(day)} of every month`;\r\n}\r\nfunction LeapDay(leapday, LeapDay) {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n\n\n/***/ }),\n\n/***/ \"./node_modules/tslib/tslib.es6.js\":\n/*!*****************************************!*\\\n  !*** ./node_modules/tslib/tslib.es6.js ***!\n  \\*****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__values\": () => (/* binding */ __values),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__spreadArray\": () => (/* binding */ __spreadArray),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n/*!**********************************************************************************************!*\\\n  !*** ./node_modules/ts-loader/index.js??ruleSet[1].rules[1]!./src/watcher/watcher.worker.ts ***!\n  \\**********************************************************************************************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var src_utils_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/utils/functions */ \"./src/utils/functions.ts\");\n\r\n\r\nconst ctx = self;\r\n// Respond to message from parent thread\r\nctx.addEventListener(\"message\", (event) => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function* () {\r\n    var _a, _b, _c, _d, _e, _f, _g;\r\n    if (event.data.type === \"parse\") {\r\n        const { file, cache, sourceCalendars, defaultCalendar, format, parseTitle } = event.data;\r\n        let { frontmatter } = cache !== null && cache !== void 0 ? cache : {};\r\n        let names, fcCategory;\r\n        if (frontmatter) {\r\n            names = frontmatter === null || frontmatter === void 0 ? void 0 : frontmatter[\"fc-calendar\"];\r\n            fcCategory = frontmatter === null || frontmatter === void 0 ? void 0 : frontmatter[\"fc-category\"];\r\n        }\r\n        if (!names) {\r\n            names = [defaultCalendar];\r\n        }\r\n        if (!Array.isArray(names))\r\n            names = [names];\r\n        names = names.map((n) => n.toLowerCase());\r\n        const calendars = sourceCalendars.filter((calendar) => names.includes(calendar.name.toLowerCase()));\r\n        const { start: startArray, end: endArray } = getDates(frontmatter, parseTitle ? file.basename : \"\", format);\r\n        if (!startArray.length)\r\n            return;\r\n        let save = false;\r\n        for (let calendar of calendars) {\r\n            let index = names.indexOf(calendar.name.toLowerCase());\r\n            /** Clamp index to length of dates provided. */\r\n            if (index >= startArray.length || index == -1) {\r\n                index = startArray.length - 1;\r\n            }\r\n            let date = (_a = startArray[index]) !== null && _a !== void 0 ? _a : {\r\n                day: null,\r\n                month: null,\r\n                year: null\r\n            };\r\n            let end = endArray.length\r\n                ? (_b = endArray[index]) !== null && _b !== void 0 ? _b : endArray[endArray.length - 1]\r\n                : null;\r\n            if ((date === null || date === void 0 ? void 0 : date.month) && typeof (date === null || date === void 0 ? void 0 : date.month) == \"string\") {\r\n                let month = calendar.static.months.find((m) => m.name == date.month);\r\n                if (!month) {\r\n                    date.month = null;\r\n                }\r\n                else {\r\n                    date.month = calendar.static.months.indexOf(month);\r\n                }\r\n            }\r\n            else if ((date === null || date === void 0 ? void 0 : date.month) && typeof (date === null || date === void 0 ? void 0 : date.month) == \"number\") {\r\n                date.month = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_0__.wrap)(date.month - 1, calendar.static.months.length);\r\n            }\r\n            if ((end === null || end === void 0 ? void 0 : end.month) && typeof (end === null || end === void 0 ? void 0 : end.month) == \"string\") {\r\n                let month = calendar.static.months.find((m) => m.name == end.month);\r\n                if (!month) {\r\n                    end.month = null;\r\n                }\r\n                else {\r\n                    end.month = calendar.static.months.indexOf(month);\r\n                }\r\n            }\r\n            else if ((end === null || end === void 0 ? void 0 : end.month) && typeof (end === null || end === void 0 ? void 0 : end.month) == \"number\") {\r\n                end.month = (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_0__.wrap)(end.month - 1, calendar.static.months.length);\r\n            }\r\n            const category = calendar.categories.find((cat) => (cat === null || cat === void 0 ? void 0 : cat.name) == fcCategory);\r\n            const existing = calendar.events.find((event) => event.note == file.path);\r\n            if ((existing === null || existing === void 0 ? void 0 : existing.date.day) == date.day &&\r\n                (existing === null || existing === void 0 ? void 0 : existing.date.month) == date.month &&\r\n                (existing === null || existing === void 0 ? void 0 : existing.date.year) == date.year &&\r\n                ((_c = existing === null || existing === void 0 ? void 0 : existing.end) === null || _c === void 0 ? void 0 : _c.day) == (end === null || end === void 0 ? void 0 : end.day) &&\r\n                ((_d = existing === null || existing === void 0 ? void 0 : existing.end) === null || _d === void 0 ? void 0 : _d.month) == (end === null || end === void 0 ? void 0 : end.month) &&\r\n                ((_e = existing === null || existing === void 0 ? void 0 : existing.end) === null || _e === void 0 ? void 0 : _e.year) == (end === null || end === void 0 ? void 0 : end.year) &&\r\n                (existing === null || existing === void 0 ? void 0 : existing.category) == (category === null || category === void 0 ? void 0 : category.id)) {\r\n                continue;\r\n            }\r\n            save = true;\r\n            ctx.postMessage({\r\n                type: \"update\",\r\n                id: calendar.id,\r\n                index: calendar.events.indexOf(existing),\r\n                event: Object.assign(Object.assign({ id: (_f = existing === null || existing === void 0 ? void 0 : existing.id) !== null && _f !== void 0 ? _f : (0,src_utils_functions__WEBPACK_IMPORTED_MODULE_0__.nanoid)(6), name: (_g = existing === null || existing === void 0 ? void 0 : existing.name) !== null && _g !== void 0 ? _g : file.basename, note: file.path, date }, (end ? { end } : {})), { category: category === null || category === void 0 ? void 0 : category.id, description: existing === null || existing === void 0 ? void 0 : existing.description })\r\n            });\r\n        }\r\n        if (save) {\r\n            ctx.postMessage({\r\n                type: \"save\",\r\n                id: null,\r\n                index: null,\r\n                event: null\r\n            });\r\n        }\r\n    }\r\n}));\r\nctx.addEventListener(\"message\", (event) => (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(void 0, void 0, void 0, function* () {\r\n    if (event.data.type === \"rename\") {\r\n        const { sourceCalendars, file } = event.data;\r\n        const oldFileName = file.oldPath\r\n            .split(\"/\")\r\n            .pop()\r\n            .split(\".\")\r\n            .shift();\r\n        for (let calendar of sourceCalendars) {\r\n            const events = calendar.events.filter((e) => e.note == file.oldPath || e.note === oldFileName);\r\n            for (let event of events) {\r\n                ctx.postMessage({\r\n                    type: \"update\",\r\n                    id: calendar.id,\r\n                    index: calendar.events.indexOf(event),\r\n                    event: Object.assign(Object.assign({}, event), { note: file.path, name: file.basename })\r\n                });\r\n            }\r\n        }\r\n        ctx.postMessage({\r\n            type: \"save\",\r\n            id: null,\r\n            index: null,\r\n            event: null\r\n        });\r\n    }\r\n}));\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\r\nconst getDates = (frontmatter = {}, basename, format) => {\r\n    const dateField = \"fc-date\" in frontmatter ? \"fc-date\" : \"fc-start\";\r\n    let dates;\r\n    if (frontmatter && dateField in frontmatter) {\r\n        dates = frontmatter[dateField];\r\n    }\r\n    if (!dates) {\r\n        dates = basename;\r\n    }\r\n    const dateArray = [dates]\r\n        .flat(2)\r\n        .map((date) => parseDate(date, format))\r\n        .filter((d) => d);\r\n    const ends = \"fc-end\" in frontmatter\r\n        ? frontmatter[\"fc-end\"]\r\n        : [];\r\n    const endArray = [ends]\r\n        .flat(2)\r\n        .map((date) => parseDate(date, format))\r\n        .filter((d) => d);\r\n    return { start: dateArray, end: endArray };\r\n};\r\nconst parseDate = (date, format) => {\r\n    var _a;\r\n    if (typeof date === \"string\") {\r\n        if (!/\\d+[./-]\\d+[./-]\\d+/.test(date))\r\n            return;\r\n        try {\r\n            const [match] = (_a = date.match(/\\d+[./-]\\d+[./-]\\d+/)) !== null && _a !== void 0 ? _a : [];\r\n            if (!match)\r\n                return;\r\n            const split = match.split(/[.\\-\\/]/).map((d) => Number(d));\r\n            const formatter = [\r\n                ...new Set(format.replace(/[^\\w]/g, \"\").toUpperCase().split(\"\"))\r\n            ];\r\n            return {\r\n                year: split[formatter.indexOf(\"Y\")],\r\n                month: split[formatter.indexOf(\"M\")],\r\n                day: split[formatter.indexOf(\"D\")]\r\n            };\r\n        }\r\n        catch (e) {\r\n            return;\r\n        }\r\n    }\r\n    else {\r\n        return date;\r\n    }\r\n};\r\n\n})();\n\n/******/ })()\n;\n", "Worker", {"name":"Fantasy Calendar Watcher","esModule":false}, undefined);
}


/***/ }),

/***/ "./node_modules/worker-loader/dist/runtime/inline.js":
/*!***********************************************************!*\
  !*** ./node_modules/worker-loader/dist/runtime/inline.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";


/* eslint-env browser */

/* eslint-disable no-undef, no-use-before-define, new-cap */
module.exports = function (content, workerConstructor, workerOptions, url) {
  var globalScope = self || window;

  try {
    try {
      var blob;

      try {
        // New API
        blob = new globalScope.Blob([content]);
      } catch (e) {
        // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;
        blob = new BlobBuilder();
        blob.append(content);
        blob = blob.getBlob();
      }

      var URL = globalScope.URL || globalScope.webkitURL;
      var objectURL = URL.createObjectURL(blob);
      var worker = new globalScope[workerConstructor](objectURL, workerOptions);
      URL.revokeObjectURL(objectURL);
      return worker;
    } catch (e) {
      return new globalScope[workerConstructor]("data:application/javascript,".concat(encodeURIComponent(content)), workerOptions);
    }
  } catch (e) {
    if (!url) {
      throw Error("Inline worker is not supported");
    }

    return new globalScope[workerConstructor](url, workerOptions);
  }
};

/***/ }),

/***/ "obsidian":
/*!***************************!*\
  !*** external "obsidian" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("obsidian");

/***/ }),

/***/ "./node_modules/svelte/animate/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/svelte/animate/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flip": () => (/* binding */ flip)
/* harmony export */ });
/* harmony import */ var _easing_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../easing/index.mjs */ "./node_modules/svelte/easing/index.mjs");
/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/index.mjs */ "./node_modules/svelte/internal/index.mjs");



function flip(node, { from, to }, params = {}) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    const [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
    const dx = (from.left + from.width * ox / to.width) - (to.left + ox);
    const dy = (from.top + from.height * oy / to.height) - (to.top + oy);
    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = _easing_index_mjs__WEBPACK_IMPORTED_MODULE_0__.cubicOut } = params;
    return {
        delay,
        duration: (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_1__.is_function)(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
        easing,
        css: (t, u) => {
            const x = u * dx;
            const y = u * dy;
            const sx = t + u * from.width / to.width;
            const sy = t + u * from.height / to.height;
            return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
        }
    };
}




/***/ }),

/***/ "./node_modules/svelte/easing/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/svelte/easing/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linear": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.identity),
/* harmony export */   "backIn": () => (/* binding */ backIn),
/* harmony export */   "backInOut": () => (/* binding */ backInOut),
/* harmony export */   "backOut": () => (/* binding */ backOut),
/* harmony export */   "bounceIn": () => (/* binding */ bounceIn),
/* harmony export */   "bounceInOut": () => (/* binding */ bounceInOut),
/* harmony export */   "bounceOut": () => (/* binding */ bounceOut),
/* harmony export */   "circIn": () => (/* binding */ circIn),
/* harmony export */   "circInOut": () => (/* binding */ circInOut),
/* harmony export */   "circOut": () => (/* binding */ circOut),
/* harmony export */   "cubicIn": () => (/* binding */ cubicIn),
/* harmony export */   "cubicInOut": () => (/* binding */ cubicInOut),
/* harmony export */   "cubicOut": () => (/* binding */ cubicOut),
/* harmony export */   "elasticIn": () => (/* binding */ elasticIn),
/* harmony export */   "elasticInOut": () => (/* binding */ elasticInOut),
/* harmony export */   "elasticOut": () => (/* binding */ elasticOut),
/* harmony export */   "expoIn": () => (/* binding */ expoIn),
/* harmony export */   "expoInOut": () => (/* binding */ expoInOut),
/* harmony export */   "expoOut": () => (/* binding */ expoOut),
/* harmony export */   "quadIn": () => (/* binding */ quadIn),
/* harmony export */   "quadInOut": () => (/* binding */ quadInOut),
/* harmony export */   "quadOut": () => (/* binding */ quadOut),
/* harmony export */   "quartIn": () => (/* binding */ quartIn),
/* harmony export */   "quartInOut": () => (/* binding */ quartInOut),
/* harmony export */   "quartOut": () => (/* binding */ quartOut),
/* harmony export */   "quintIn": () => (/* binding */ quintIn),
/* harmony export */   "quintInOut": () => (/* binding */ quintInOut),
/* harmony export */   "quintOut": () => (/* binding */ quintOut),
/* harmony export */   "sineIn": () => (/* binding */ sineIn),
/* harmony export */   "sineInOut": () => (/* binding */ sineInOut),
/* harmony export */   "sineOut": () => (/* binding */ sineOut)
/* harmony export */ });
/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/index.mjs */ "./node_modules/svelte/internal/index.mjs");


/*
Adapted from https://github.com/mattdesl
Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
*/
function backInOut(t) {
    const s = 1.70158 * 1.525;
    if ((t *= 2) < 1)
        return 0.5 * (t * t * ((s + 1) * t - s));
    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);
}
function backIn(t) {
    const s = 1.70158;
    return t * t * ((s + 1) * t - s);
}
function backOut(t) {
    const s = 1.70158;
    return --t * t * ((s + 1) * t + s) + 1;
}
function bounceOut(t) {
    const a = 4.0 / 11.0;
    const b = 8.0 / 11.0;
    const c = 9.0 / 10.0;
    const ca = 4356.0 / 361.0;
    const cb = 35442.0 / 1805.0;
    const cc = 16061.0 / 1805.0;
    const t2 = t * t;
    return t < a
        ? 7.5625 * t2
        : t < b
            ? 9.075 * t2 - 9.9 * t + 3.4
            : t < c
                ? ca * t2 - cb * t + cc
                : 10.8 * t * t - 20.52 * t + 10.72;
}
function bounceInOut(t) {
    return t < 0.5
        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
}
function bounceIn(t) {
    return 1.0 - bounceOut(1.0 - t);
}
function circInOut(t) {
    if ((t *= 2) < 1)
        return -0.5 * (Math.sqrt(1 - t * t) - 1);
    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
}
function circIn(t) {
    return 1.0 - Math.sqrt(1.0 - t * t);
}
function circOut(t) {
    return Math.sqrt(1 - --t * t);
}
function cubicInOut(t) {
    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
}
function cubicIn(t) {
    return t * t * t;
}
function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}
function elasticInOut(t) {
    return t < 0.5
        ? 0.5 *
            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *
            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))
        : 0.5 *
            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *
            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +
            1.0;
}
function elasticIn(t) {
    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));
}
function elasticOut(t) {
    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);
}
function expoInOut(t) {
    return t === 0.0 || t === 1.0
        ? t
        : t < 0.5
            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)
            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;
}
function expoIn(t) {
    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));
}
function expoOut(t) {
    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);
}
function quadInOut(t) {
    t /= 0.5;
    if (t < 1)
        return 0.5 * t * t;
    t--;
    return -0.5 * (t * (t - 2) - 1);
}
function quadIn(t) {
    return t * t;
}
function quadOut(t) {
    return -t * (t - 2.0);
}
function quartInOut(t) {
    return t < 0.5
        ? +8.0 * Math.pow(t, 4.0)
        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;
}
function quartIn(t) {
    return Math.pow(t, 4.0);
}
function quartOut(t) {
    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
}
function quintInOut(t) {
    if ((t *= 2) < 1)
        return 0.5 * t * t * t * t * t;
    return 0.5 * ((t -= 2) * t * t * t * t + 2);
}
function quintIn(t) {
    return t * t * t * t * t;
}
function quintOut(t) {
    return --t * t * t * t * t + 1;
}
function sineInOut(t) {
    return -0.5 * (Math.cos(Math.PI * t) - 1);
}
function sineIn(t) {
    const v = Math.cos(t * Math.PI * 0.5);
    if (Math.abs(v) < 1e-14)
        return 1;
    else
        return 1 - v;
}
function sineOut(t) {
    return Math.sin((t * Math.PI) / 2);
}




/***/ }),

/***/ "./node_modules/svelte/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/svelte/index.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SvelteComponent": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.SvelteComponentDev),
/* harmony export */   "SvelteComponentTyped": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.SvelteComponentTyped),
/* harmony export */   "afterUpdate": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.afterUpdate),
/* harmony export */   "beforeUpdate": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.beforeUpdate),
/* harmony export */   "createEventDispatcher": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createEventDispatcher),
/* harmony export */   "getAllContexts": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getAllContexts),
/* harmony export */   "getContext": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getContext),
/* harmony export */   "hasContext": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.hasContext),
/* harmony export */   "onDestroy": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.onDestroy),
/* harmony export */   "onMount": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.onMount),
/* harmony export */   "setContext": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.setContext),
/* harmony export */   "tick": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.tick)
/* harmony export */ });
/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/index.mjs */ "./node_modules/svelte/internal/index.mjs");



/***/ }),

/***/ "./node_modules/svelte/internal/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/svelte/internal/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HtmlTag": () => (/* binding */ HtmlTag),
/* harmony export */   "HtmlTagHydration": () => (/* binding */ HtmlTagHydration),
/* harmony export */   "SvelteComponent": () => (/* binding */ SvelteComponent),
/* harmony export */   "SvelteComponentDev": () => (/* binding */ SvelteComponentDev),
/* harmony export */   "SvelteComponentTyped": () => (/* binding */ SvelteComponentTyped),
/* harmony export */   "SvelteElement": () => (/* binding */ SvelteElement),
/* harmony export */   "action_destroyer": () => (/* binding */ action_destroyer),
/* harmony export */   "add_attribute": () => (/* binding */ add_attribute),
/* harmony export */   "add_classes": () => (/* binding */ add_classes),
/* harmony export */   "add_flush_callback": () => (/* binding */ add_flush_callback),
/* harmony export */   "add_location": () => (/* binding */ add_location),
/* harmony export */   "add_render_callback": () => (/* binding */ add_render_callback),
/* harmony export */   "add_resize_listener": () => (/* binding */ add_resize_listener),
/* harmony export */   "add_transform": () => (/* binding */ add_transform),
/* harmony export */   "afterUpdate": () => (/* binding */ afterUpdate),
/* harmony export */   "append": () => (/* binding */ append),
/* harmony export */   "append_dev": () => (/* binding */ append_dev),
/* harmony export */   "append_empty_stylesheet": () => (/* binding */ append_empty_stylesheet),
/* harmony export */   "append_hydration": () => (/* binding */ append_hydration),
/* harmony export */   "append_hydration_dev": () => (/* binding */ append_hydration_dev),
/* harmony export */   "append_styles": () => (/* binding */ append_styles),
/* harmony export */   "assign": () => (/* binding */ assign),
/* harmony export */   "attr": () => (/* binding */ attr),
/* harmony export */   "attr_dev": () => (/* binding */ attr_dev),
/* harmony export */   "attribute_to_object": () => (/* binding */ attribute_to_object),
/* harmony export */   "beforeUpdate": () => (/* binding */ beforeUpdate),
/* harmony export */   "bind": () => (/* binding */ bind),
/* harmony export */   "binding_callbacks": () => (/* binding */ binding_callbacks),
/* harmony export */   "blank_object": () => (/* binding */ blank_object),
/* harmony export */   "bubble": () => (/* binding */ bubble),
/* harmony export */   "check_outros": () => (/* binding */ check_outros),
/* harmony export */   "children": () => (/* binding */ children),
/* harmony export */   "claim_component": () => (/* binding */ claim_component),
/* harmony export */   "claim_element": () => (/* binding */ claim_element),
/* harmony export */   "claim_html_tag": () => (/* binding */ claim_html_tag),
/* harmony export */   "claim_space": () => (/* binding */ claim_space),
/* harmony export */   "claim_svg_element": () => (/* binding */ claim_svg_element),
/* harmony export */   "claim_text": () => (/* binding */ claim_text),
/* harmony export */   "clear_loops": () => (/* binding */ clear_loops),
/* harmony export */   "component_subscribe": () => (/* binding */ component_subscribe),
/* harmony export */   "compute_rest_props": () => (/* binding */ compute_rest_props),
/* harmony export */   "compute_slots": () => (/* binding */ compute_slots),
/* harmony export */   "createEventDispatcher": () => (/* binding */ createEventDispatcher),
/* harmony export */   "create_animation": () => (/* binding */ create_animation),
/* harmony export */   "create_bidirectional_transition": () => (/* binding */ create_bidirectional_transition),
/* harmony export */   "create_component": () => (/* binding */ create_component),
/* harmony export */   "create_in_transition": () => (/* binding */ create_in_transition),
/* harmony export */   "create_out_transition": () => (/* binding */ create_out_transition),
/* harmony export */   "create_slot": () => (/* binding */ create_slot),
/* harmony export */   "create_ssr_component": () => (/* binding */ create_ssr_component),
/* harmony export */   "current_component": () => (/* binding */ current_component),
/* harmony export */   "custom_event": () => (/* binding */ custom_event),
/* harmony export */   "dataset_dev": () => (/* binding */ dataset_dev),
/* harmony export */   "debug": () => (/* binding */ debug),
/* harmony export */   "destroy_block": () => (/* binding */ destroy_block),
/* harmony export */   "destroy_component": () => (/* binding */ destroy_component),
/* harmony export */   "destroy_each": () => (/* binding */ destroy_each),
/* harmony export */   "detach": () => (/* binding */ detach),
/* harmony export */   "detach_after_dev": () => (/* binding */ detach_after_dev),
/* harmony export */   "detach_before_dev": () => (/* binding */ detach_before_dev),
/* harmony export */   "detach_between_dev": () => (/* binding */ detach_between_dev),
/* harmony export */   "detach_dev": () => (/* binding */ detach_dev),
/* harmony export */   "dirty_components": () => (/* binding */ dirty_components),
/* harmony export */   "dispatch_dev": () => (/* binding */ dispatch_dev),
/* harmony export */   "each": () => (/* binding */ each),
/* harmony export */   "element": () => (/* binding */ element),
/* harmony export */   "element_is": () => (/* binding */ element_is),
/* harmony export */   "empty": () => (/* binding */ empty),
/* harmony export */   "end_hydrating": () => (/* binding */ end_hydrating),
/* harmony export */   "escape": () => (/* binding */ escape),
/* harmony export */   "escape_attribute_value": () => (/* binding */ escape_attribute_value),
/* harmony export */   "escape_object": () => (/* binding */ escape_object),
/* harmony export */   "escaped": () => (/* binding */ escaped),
/* harmony export */   "exclude_internal_props": () => (/* binding */ exclude_internal_props),
/* harmony export */   "fix_and_destroy_block": () => (/* binding */ fix_and_destroy_block),
/* harmony export */   "fix_and_outro_and_destroy_block": () => (/* binding */ fix_and_outro_and_destroy_block),
/* harmony export */   "fix_position": () => (/* binding */ fix_position),
/* harmony export */   "flush": () => (/* binding */ flush),
/* harmony export */   "getAllContexts": () => (/* binding */ getAllContexts),
/* harmony export */   "getContext": () => (/* binding */ getContext),
/* harmony export */   "get_all_dirty_from_scope": () => (/* binding */ get_all_dirty_from_scope),
/* harmony export */   "get_binding_group_value": () => (/* binding */ get_binding_group_value),
/* harmony export */   "get_current_component": () => (/* binding */ get_current_component),
/* harmony export */   "get_custom_elements_slots": () => (/* binding */ get_custom_elements_slots),
/* harmony export */   "get_root_for_style": () => (/* binding */ get_root_for_style),
/* harmony export */   "get_slot_changes": () => (/* binding */ get_slot_changes),
/* harmony export */   "get_spread_object": () => (/* binding */ get_spread_object),
/* harmony export */   "get_spread_update": () => (/* binding */ get_spread_update),
/* harmony export */   "get_store_value": () => (/* binding */ get_store_value),
/* harmony export */   "globals": () => (/* binding */ globals),
/* harmony export */   "group_outros": () => (/* binding */ group_outros),
/* harmony export */   "handle_promise": () => (/* binding */ handle_promise),
/* harmony export */   "hasContext": () => (/* binding */ hasContext),
/* harmony export */   "has_prop": () => (/* binding */ has_prop),
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "insert": () => (/* binding */ insert),
/* harmony export */   "insert_dev": () => (/* binding */ insert_dev),
/* harmony export */   "insert_hydration": () => (/* binding */ insert_hydration),
/* harmony export */   "insert_hydration_dev": () => (/* binding */ insert_hydration_dev),
/* harmony export */   "intros": () => (/* binding */ intros),
/* harmony export */   "invalid_attribute_name_character": () => (/* binding */ invalid_attribute_name_character),
/* harmony export */   "is_client": () => (/* binding */ is_client),
/* harmony export */   "is_crossorigin": () => (/* binding */ is_crossorigin),
/* harmony export */   "is_empty": () => (/* binding */ is_empty),
/* harmony export */   "is_function": () => (/* binding */ is_function),
/* harmony export */   "is_promise": () => (/* binding */ is_promise),
/* harmony export */   "listen": () => (/* binding */ listen),
/* harmony export */   "listen_dev": () => (/* binding */ listen_dev),
/* harmony export */   "loop": () => (/* binding */ loop),
/* harmony export */   "loop_guard": () => (/* binding */ loop_guard),
/* harmony export */   "missing_component": () => (/* binding */ missing_component),
/* harmony export */   "mount_component": () => (/* binding */ mount_component),
/* harmony export */   "noop": () => (/* binding */ noop),
/* harmony export */   "not_equal": () => (/* binding */ not_equal),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "null_to_empty": () => (/* binding */ null_to_empty),
/* harmony export */   "object_without_properties": () => (/* binding */ object_without_properties),
/* harmony export */   "onDestroy": () => (/* binding */ onDestroy),
/* harmony export */   "onMount": () => (/* binding */ onMount),
/* harmony export */   "once": () => (/* binding */ once),
/* harmony export */   "outro_and_destroy_block": () => (/* binding */ outro_and_destroy_block),
/* harmony export */   "prevent_default": () => (/* binding */ prevent_default),
/* harmony export */   "prop_dev": () => (/* binding */ prop_dev),
/* harmony export */   "query_selector_all": () => (/* binding */ query_selector_all),
/* harmony export */   "raf": () => (/* binding */ raf),
/* harmony export */   "run": () => (/* binding */ run),
/* harmony export */   "run_all": () => (/* binding */ run_all),
/* harmony export */   "safe_not_equal": () => (/* binding */ safe_not_equal),
/* harmony export */   "schedule_update": () => (/* binding */ schedule_update),
/* harmony export */   "select_multiple_value": () => (/* binding */ select_multiple_value),
/* harmony export */   "select_option": () => (/* binding */ select_option),
/* harmony export */   "select_options": () => (/* binding */ select_options),
/* harmony export */   "select_value": () => (/* binding */ select_value),
/* harmony export */   "self": () => (/* binding */ self),
/* harmony export */   "setContext": () => (/* binding */ setContext),
/* harmony export */   "set_attributes": () => (/* binding */ set_attributes),
/* harmony export */   "set_current_component": () => (/* binding */ set_current_component),
/* harmony export */   "set_custom_element_data": () => (/* binding */ set_custom_element_data),
/* harmony export */   "set_data": () => (/* binding */ set_data),
/* harmony export */   "set_data_dev": () => (/* binding */ set_data_dev),
/* harmony export */   "set_input_type": () => (/* binding */ set_input_type),
/* harmony export */   "set_input_value": () => (/* binding */ set_input_value),
/* harmony export */   "set_now": () => (/* binding */ set_now),
/* harmony export */   "set_raf": () => (/* binding */ set_raf),
/* harmony export */   "set_store_value": () => (/* binding */ set_store_value),
/* harmony export */   "set_style": () => (/* binding */ set_style),
/* harmony export */   "set_svg_attributes": () => (/* binding */ set_svg_attributes),
/* harmony export */   "space": () => (/* binding */ space),
/* harmony export */   "spread": () => (/* binding */ spread),
/* harmony export */   "src_url_equal": () => (/* binding */ src_url_equal),
/* harmony export */   "start_hydrating": () => (/* binding */ start_hydrating),
/* harmony export */   "stop_propagation": () => (/* binding */ stop_propagation),
/* harmony export */   "subscribe": () => (/* binding */ subscribe),
/* harmony export */   "svg_element": () => (/* binding */ svg_element),
/* harmony export */   "text": () => (/* binding */ text),
/* harmony export */   "tick": () => (/* binding */ tick),
/* harmony export */   "time_ranges_to_array": () => (/* binding */ time_ranges_to_array),
/* harmony export */   "to_number": () => (/* binding */ to_number),
/* harmony export */   "toggle_class": () => (/* binding */ toggle_class),
/* harmony export */   "transition_in": () => (/* binding */ transition_in),
/* harmony export */   "transition_out": () => (/* binding */ transition_out),
/* harmony export */   "trusted": () => (/* binding */ trusted),
/* harmony export */   "update_await_block_branch": () => (/* binding */ update_await_block_branch),
/* harmony export */   "update_keyed_each": () => (/* binding */ update_keyed_each),
/* harmony export */   "update_slot": () => (/* binding */ update_slot),
/* harmony export */   "update_slot_base": () => (/* binding */ update_slot_base),
/* harmony export */   "validate_component": () => (/* binding */ validate_component),
/* harmony export */   "validate_each_argument": () => (/* binding */ validate_each_argument),
/* harmony export */   "validate_each_keys": () => (/* binding */ validate_each_keys),
/* harmony export */   "validate_slots": () => (/* binding */ validate_slots),
/* harmony export */   "validate_store": () => (/* binding */ validate_store),
/* harmony export */   "xlink_attr": () => (/* binding */ xlink_attr)
/* harmony export */ });
function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function is_promise(value) {
    return value && typeof value === 'object' && typeof value.then === 'function';
}
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
        src_url_equal_anchor = document.createElement('a');
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function not_equal(a, b) {
    return a != a ? b == b : a !== b;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for (const k in props)
        if (!keys.has(k) && k[0] !== '$')
            rest[k] = props[k];
    return rest;
}
function compute_slots(slots) {
    const result = {};
    for (const key in slots) {
        result[key] = true;
    }
    return result;
}
function once(fn) {
    let ran = false;
    return function (...args) {
        if (ran)
            return;
        ran = true;
        fn.call(this, ...args);
    };
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
}
const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;
// used internally for testing
function set_now(fn) {
    now = fn;
}
function set_raf(fn) {
    raf = fn;
}

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * For testing purposes only!
 */
function clear_loops() {
    tasks.clear();
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
// at the end of hydration without touching the remaining nodes.
let is_hydrating = false;
function start_hydrating() {
    is_hydrating = true;
}
function end_hydrating() {
    is_hydrating = false;
}
function upper_bound(low, high, key, value) {
    // Return first index of value larger than input value in the range [low, high)
    while (low < high) {
        const mid = low + ((high - low) >> 1);
        if (key(mid) <= value) {
            low = mid + 1;
        }
        else {
            high = mid;
        }
    }
    return low;
}
function init_hydrate(target) {
    if (target.hydrate_init)
        return;
    target.hydrate_init = true;
    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>
    let children = target.childNodes;
    // If target is <head>, there may be children without claim_order
    if (target.nodeName === 'HEAD') {
        const myChildren = [];
        for (let i = 0; i < children.length; i++) {
            const node = children[i];
            if (node.claim_order !== undefined) {
                myChildren.push(node);
            }
        }
        children = myChildren;
    }
    /*
    * Reorder claimed children optimally.
    * We can reorder claimed children optimally by finding the longest subsequence of
    * nodes that are already claimed in order and only moving the rest. The longest
    * subsequence subsequence of nodes that are claimed in order can be found by
    * computing the longest increasing subsequence of .claim_order values.
    *
    * This algorithm is optimal in generating the least amount of reorder operations
    * possible.
    *
    * Proof:
    * We know that, given a set of reordering operations, the nodes that do not move
    * always form an increasing subsequence, since they do not move among each other
    * meaning that they must be already ordered among each other. Thus, the maximal
    * set of nodes that do not move form a longest increasing subsequence.
    */
    // Compute longest increasing subsequence
    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
    const m = new Int32Array(children.length + 1);
    // Predecessor indices + 1
    const p = new Int32Array(children.length);
    m[0] = -1;
    let longest = 0;
    for (let i = 0; i < children.length; i++) {
        const current = children[i].claim_order;
        // Find the largest subsequence length such that it ends in a value less than our current value
        // upper_bound returns first greater value, so we subtract one
        // with fast path for when we are on the current longest subsequence
        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;
        p[i] = m[seqLen] + 1;
        const newLen = seqLen + 1;
        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
        m[newLen] = i;
        longest = Math.max(newLen, longest);
    }
    // The longest increasing subsequence of nodes (initially reversed)
    const lis = [];
    // The rest of the nodes, nodes that will be moved
    const toMove = [];
    let last = children.length - 1;
    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
        lis.push(children[cur - 1]);
        for (; last >= cur; last--) {
            toMove.push(children[last]);
        }
        last--;
    }
    for (; last >= 0; last--) {
        toMove.push(children[last]);
    }
    lis.reverse();
    // We sort the nodes being moved to guarantee that their insertion order matches the claim order
    toMove.sort((a, b) => a.claim_order - b.claim_order);
    // Finally, we move the nodes
    for (let i = 0, j = 0; i < toMove.length; i++) {
        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
            j++;
        }
        const anchor = j < lis.length ? lis[j] : null;
        target.insertBefore(toMove[i], anchor);
    }
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_empty_stylesheet(node) {
    const style_element = element('style');
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function append_hydration(target, node) {
    if (is_hydrating) {
        init_hydrate(target);
        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {
            target.actual_end_child = target.firstChild;
        }
        // Skip nodes of undefined ordering
        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {
            target.actual_end_child = target.actual_end_child.nextSibling;
        }
        if (node !== target.actual_end_child) {
            // We only insert if the ordering of this node should be modified or the parent node is not target
            if (node.claim_order !== undefined || node.parentNode !== target) {
                target.insertBefore(node, target.actual_end_child);
            }
        }
        else {
            target.actual_end_child = node.nextSibling;
        }
    }
    else if (node.parentNode !== target || node.nextSibling !== null) {
        target.appendChild(node);
    }
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function insert_hydration(target, node, anchor) {
    if (is_hydrating && !anchor) {
        append_hydration(target, node);
    }
    else if (node.parentNode !== target || node.nextSibling != anchor) {
        target.insertBefore(node, anchor || null);
    }
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function element_is(name, is) {
    return document.createElement(name, { is });
}
function object_without_properties(obj, exclude) {
    const target = {};
    for (const k in obj) {
        if (has_prop(obj, k)
            // @ts-ignore
            && exclude.indexOf(k) === -1) {
            // @ts-ignore
            target[k] = obj[k];
        }
    }
    return target;
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_propagation(fn) {
    return function (event) {
        event.stopPropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function self(fn) {
    return function (event) {
        // @ts-ignore
        if (event.target === this)
            fn.call(this, event);
    };
}
function trusted(fn) {
    return function (event) {
        // @ts-ignore
        if (event.isTrusted)
            fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key in attributes) {
        if (attributes[key] == null) {
            node.removeAttribute(key);
        }
        else if (key === 'style') {
            node.style.cssText = attributes[key];
        }
        else if (key === '__value') {
            node.value = node[key] = attributes[key];
        }
        else if (descriptors[key] && descriptors[key].set) {
            node[key] = attributes[key];
        }
        else {
            attr(node, key, attributes[key]);
        }
    }
}
function set_svg_attributes(node, attributes) {
    for (const key in attributes) {
        attr(node, key, attributes[key]);
    }
}
function set_custom_element_data(node, prop, value) {
    if (prop in node) {
        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
    }
    else {
        attr(node, prop, value);
    }
}
function xlink_attr(node, attribute, value) {
    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
}
function get_binding_group_value(group, __value, checked) {
    const value = new Set();
    for (let i = 0; i < group.length; i += 1) {
        if (group[i].checked)
            value.add(group[i].__value);
    }
    if (!checked) {
        value.delete(__value);
    }
    return Array.from(value);
}
function to_number(value) {
    return value === '' ? null : +value;
}
function time_ranges_to_array(ranges) {
    const array = [];
    for (let i = 0; i < ranges.length; i += 1) {
        array.push({ start: ranges.start(i), end: ranges.end(i) });
    }
    return array;
}
function children(element) {
    return Array.from(element.childNodes);
}
function init_claim_info(nodes) {
    if (nodes.claim_info === undefined) {
        nodes.claim_info = { last_index: 0, total_claimed: 0 };
    }
}
function claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {
    // Try to find nodes in an order such that we lengthen the longest increasing subsequence
    init_claim_info(nodes);
    const resultNode = (() => {
        // We first try to find an element after the previous one
        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {
            const node = nodes[i];
            if (predicate(node)) {
                const replacement = processNode(node);
                if (replacement === undefined) {
                    nodes.splice(i, 1);
                }
                else {
                    nodes[i] = replacement;
                }
                if (!dontUpdateLastIndex) {
                    nodes.claim_info.last_index = i;
                }
                return node;
            }
        }
        // Otherwise, we try to find one before
        // We iterate in reverse so that we don't go too far back
        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {
            const node = nodes[i];
            if (predicate(node)) {
                const replacement = processNode(node);
                if (replacement === undefined) {
                    nodes.splice(i, 1);
                }
                else {
                    nodes[i] = replacement;
                }
                if (!dontUpdateLastIndex) {
                    nodes.claim_info.last_index = i;
                }
                else if (replacement === undefined) {
                    // Since we spliced before the last_index, we decrease it
                    nodes.claim_info.last_index--;
                }
                return node;
            }
        }
        // If we can't find any matching node, we create a new one
        return createNode();
    })();
    resultNode.claim_order = nodes.claim_info.total_claimed;
    nodes.claim_info.total_claimed += 1;
    return resultNode;
}
function claim_element_base(nodes, name, attributes, create_element) {
    return claim_node(nodes, (node) => node.nodeName === name, (node) => {
        const remove = [];
        for (let j = 0; j < node.attributes.length; j++) {
            const attribute = node.attributes[j];
            if (!attributes[attribute.name]) {
                remove.push(attribute.name);
            }
        }
        remove.forEach(v => node.removeAttribute(v));
        return undefined;
    }, () => create_element(name));
}
function claim_element(nodes, name, attributes) {
    return claim_element_base(nodes, name, attributes, element);
}
function claim_svg_element(nodes, name, attributes) {
    return claim_element_base(nodes, name, attributes, svg_element);
}
function claim_text(nodes, data) {
    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {
        const dataStr = '' + data;
        if (node.data.startsWith(dataStr)) {
            if (node.data.length !== dataStr.length) {
                return node.splitText(dataStr.length);
            }
        }
        else {
            node.data = dataStr;
        }
    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements
    );
}
function claim_space(nodes) {
    return claim_text(nodes, ' ');
}
function find_comment(nodes, text, start) {
    for (let i = start; i < nodes.length; i += 1) {
        const node = nodes[i];
        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {
            return i;
        }
    }
    return nodes.length;
}
function claim_html_tag(nodes) {
    // find html opening tag
    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);
    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);
    if (start_index === end_index) {
        return new HtmlTagHydration();
    }
    init_claim_info(nodes);
    const html_tag_nodes = nodes.splice(start_index, end_index + 1);
    detach(html_tag_nodes[0]);
    detach(html_tag_nodes[html_tag_nodes.length - 1]);
    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);
    for (const n of claimed_nodes) {
        n.claim_order = nodes.claim_info.total_claimed;
        nodes.claim_info.total_claimed += 1;
    }
    return new HtmlTagHydration(claimed_nodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_input_type(input, type) {
    try {
        input.type = type;
    }
    catch (e) {
        // do nothing
    }
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function select_option(select, value) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
    select.selectedIndex = -1; // no option should be selected
}
function select_options(select, value) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        option.selected = ~value.indexOf(option.__value);
    }
}
function select_value(select) {
    const selected_option = select.querySelector(':checked') || select.options[0];
    return selected_option && selected_option.__value;
}
function select_multiple_value(select) {
    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);
}
// unfortunately this can't be a constant as that wouldn't be tree-shakeable
// so we cache the result instead
let crossorigin;
function is_crossorigin() {
    if (crossorigin === undefined) {
        crossorigin = false;
        try {
            if (typeof window !== 'undefined' && window.parent) {
                void window.parent.document;
            }
        }
        catch (error) {
            crossorigin = true;
        }
    }
    return crossorigin;
}
function add_resize_listener(node, fn) {
    const computed_style = getComputedStyle(node);
    if (computed_style.position === 'static') {
        node.style.position = 'relative';
    }
    const iframe = element('iframe');
    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
    iframe.setAttribute('aria-hidden', 'true');
    iframe.tabIndex = -1;
    const crossorigin = is_crossorigin();
    let unsubscribe;
    if (crossorigin) {
        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
        unsubscribe = listen(window, 'message', (event) => {
            if (event.source === iframe.contentWindow)
                fn();
        });
    }
    else {
        iframe.src = 'about:blank';
        iframe.onload = () => {
            unsubscribe = listen(iframe.contentWindow, 'resize', fn);
        };
    }
    append(node, iframe);
    return () => {
        if (crossorigin) {
            unsubscribe();
        }
        else if (unsubscribe && iframe.contentWindow) {
            unsubscribe();
        }
        detach(iframe);
    };
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail, bubbles = false) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, false, detail);
    return e;
}
function query_selector_all(selector, parent = document.body) {
    return Array.from(parent.querySelectorAll(selector));
}
class HtmlTag {
    constructor() {
        this.e = this.n = null;
    }
    c(html) {
        this.h(html);
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.c(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}
class HtmlTagHydration extends HtmlTag {
    constructor(claimed_nodes) {
        super();
        this.e = this.n = null;
        this.l = claimed_nodes;
    }
    c(html) {
        if (this.l) {
            this.n = this.l;
        }
        else {
            super.c(html);
        }
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert_hydration(this.t, this.n[i], anchor);
        }
    }
}
function attribute_to_object(attributes) {
    const result = {};
    for (const attribute of attributes) {
        result[attribute.name] = attribute.value;
    }
    return result;
}
function get_custom_elements_slots(element) {
    const result = {};
    element.childNodes.forEach((node) => {
        result[node.slot || 'default'] = true;
    });
    return result;
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

function create_animation(node, from, fn, params) {
    if (!from)
        return noop;
    const to = node.getBoundingClientRect();
    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
        return noop;
    const { delay = 0, duration = 300, easing = identity, 
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay, 
    // @ts-ignore todo:
    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
    let running = true;
    let started = false;
    let name;
    function start() {
        if (css) {
            name = create_rule(node, 0, 1, duration, delay, easing, css);
        }
        if (!delay) {
            started = true;
        }
    }
    function stop() {
        if (css)
            delete_rule(node, name);
        running = false;
    }
    loop(now => {
        if (!started && now >= start_time) {
            started = true;
        }
        if (started && now >= end) {
            tick(1, 0);
            stop();
        }
        if (!running) {
            return false;
        }
        if (started) {
            const p = now - start_time;
            const t = 0 + 1 * easing(p / duration);
            tick(t, 1 - t);
        }
        return true;
    });
    start();
    tick(0, 1);
    return stop;
}
function fix_position(node) {
    const style = getComputedStyle(node);
    if (style.position !== 'absolute' && style.position !== 'fixed') {
        const { width, height } = style;
        const a = node.getBoundingClientRect();
        node.style.position = 'absolute';
        node.style.width = width;
        node.style.height = height;
        add_transform(node, a);
    }
}
function add_transform(node, a) {
    const b = node.getBoundingClientRect();
    if (a.left !== b.left || a.top !== b.top) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
function getAllContexts() {
    return get_current_component().$$.context;
}
function hasContext(key) {
    return get_current_component().$$.context.has(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        // @ts-ignore
        callbacks.slice().forEach(fn => fn.call(this, event));
    }
}

const dirty_components = [];
const intros = { enabled: false };
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
    let config = fn(node, params);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        if (task)
            task.abort();
        running = true;
        add_render_callback(() => dispatch(node, true, 'start'));
        task = loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, 'end');
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start() {
            if (started)
                return;
            started = true;
            delete_rule(node);
            if (is_function(config)) {
                config = config();
                wait().then(go);
            }
            else {
                go();
            }
        },
        invalidate() {
            started = false;
        },
        end() {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}
function create_out_transition(node, fn, params) {
    let config = fn(node, params);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        add_render_callback(() => dispatch(node, false, 'start'));
        loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(0, 1);
                    dispatch(node, false, 'end');
                    if (!--group.r) {
                        // this will result in `end()` being called,
                        // so we don't need to clean up here
                        run_all(group.c);
                    }
                    return false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(1 - t, t);
                }
            }
            return running;
        });
    }
    if (is_function(config)) {
        wait().then(() => {
            // @ts-ignore
            config = config();
            go();
        });
    }
    else {
        go();
    }
    return {
        end(reset) {
            if (reset && config.tick) {
                config.tick(1, 0);
            }
            if (running) {
                if (animation_name)
                    delete_rule(node, animation_name);
                running = false;
            }
        }
    };
}
function create_bidirectional_transition(node, fn, params, intro) {
    let config = fn(node, params);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = (program.b - t);
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        const program = {
            start: now() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program || pending_program) {
            pending_program = program;
        }
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b)
                tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(() => dispatch(node, b, 'start'));
            loop(now => {
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, 'start');
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, 'end');
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) {
                                // intro — we can tidy up immediately
                                clear_animation();
                            }
                            else {
                                // outro — needs to be coordinated
                                if (!--running_program.group.r)
                                    run_all(running_program.group.c);
                            }
                        }
                        running_program = null;
                    }
                    else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run(b) {
            if (is_function(config)) {
                wait().then(() => {
                    // @ts-ignore
                    config = config();
                    go(b);
                });
            }
            else {
                go(b);
            }
        },
        end() {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}

function handle_promise(promise, info) {
    const token = info.token = {};
    function update(type, index, key, value) {
        if (info.token !== token)
            return;
        info.resolved = value;
        let child_ctx = info.ctx;
        if (key !== undefined) {
            child_ctx = child_ctx.slice();
            child_ctx[key] = value;
        }
        const block = type && (info.current = type)(child_ctx);
        let needs_flush = false;
        if (info.block) {
            if (info.blocks) {
                info.blocks.forEach((block, i) => {
                    if (i !== index && block) {
                        group_outros();
                        transition_out(block, 1, 1, () => {
                            if (info.blocks[i] === block) {
                                info.blocks[i] = null;
                            }
                        });
                        check_outros();
                    }
                });
            }
            else {
                info.block.d(1);
            }
            block.c();
            transition_in(block, 1);
            block.m(info.mount(), info.anchor);
            needs_flush = true;
        }
        info.block = block;
        if (info.blocks)
            info.blocks[index] = block;
        if (needs_flush) {
            flush();
        }
    }
    if (is_promise(promise)) {
        const current_component = get_current_component();
        promise.then(value => {
            set_current_component(current_component);
            update(info.then, 1, info.value, value);
            set_current_component(null);
        }, error => {
            set_current_component(current_component);
            update(info.catch, 2, info.error, error);
            set_current_component(null);
            if (!info.hasCatch) {
                throw error;
            }
        });
        // if we previously had a then/catch block, destroy it
        if (info.current !== info.pending) {
            update(info.pending, 0);
            return true;
        }
    }
    else {
        if (info.current !== info.then) {
            update(info.then, 1, info.value, promise);
            return true;
        }
        info.resolved = promise;
    }
}
function update_await_block_branch(info, ctx, dirty) {
    const child_ctx = ctx.slice();
    const { resolved } = info;
    if (info.current === info.then) {
        child_ctx[info.value] = resolved;
    }
    if (info.current === info.catch) {
        child_ctx[info.error] = resolved;
    }
    info.block.p(child_ctx, dirty);
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);

function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function fix_and_destroy_block(block, lookup) {
    block.f();
    destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
    block.f();
    outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}
function validate_each_keys(ctx, list, get_context, get_key) {
    const keys = new Set();
    for (let i = 0; i < list.length; i++) {
        const key = get_key(get_context(ctx, list, i));
        if (keys.has(key)) {
            throw new Error('Cannot have duplicate keys in a keyed each');
        }
        keys.add(key);
    }
}

function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for (const key in o) {
                if (!(key in n))
                    to_null_out[key] = 1;
            }
            for (const key in n) {
                if (!accounted_for[key]) {
                    update[key] = n[key];
                    accounted_for[key] = 1;
                }
            }
            levels[i] = n;
        }
        else {
            for (const key in o) {
                accounted_for[key] = 1;
            }
        }
    }
    for (const key in to_null_out) {
        if (!(key in update))
            update[key] = undefined;
    }
    return update;
}
function get_spread_object(spread_props) {
    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
}

// source: https://html.spec.whatwg.org/multipage/indices.html
const boolean_attributes = new Set([
    'allowfullscreen',
    'allowpaymentrequest',
    'async',
    'autofocus',
    'autoplay',
    'checked',
    'controls',
    'default',
    'defer',
    'disabled',
    'formnovalidate',
    'hidden',
    'ismap',
    'loop',
    'multiple',
    'muted',
    'nomodule',
    'novalidate',
    'open',
    'playsinline',
    'readonly',
    'required',
    'reversed',
    'selected'
]);

const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
// https://infra.spec.whatwg.org/#noncharacter
function spread(args, classes_to_add) {
    const attributes = Object.assign({}, ...args);
    if (classes_to_add) {
        if (attributes.class == null) {
            attributes.class = classes_to_add;
        }
        else {
            attributes.class += ' ' + classes_to_add;
        }
    }
    let str = '';
    Object.keys(attributes).forEach(name => {
        if (invalid_attribute_name_character.test(name))
            return;
        const value = attributes[name];
        if (value === true)
            str += ' ' + name;
        else if (boolean_attributes.has(name.toLowerCase())) {
            if (value)
                str += ' ' + name;
        }
        else if (value != null) {
            str += ` ${name}="${value}"`;
        }
    });
    return str;
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function escape_attribute_value(value) {
    return typeof value === 'string' ? escape(value) : value;
}
function escape_object(obj) {
    const result = {};
    for (const key in obj) {
        result[key] = escape_attribute_value(obj[key]);
    }
    return result;
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
const missing_component = {
    $$render: () => ''
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
function debug(file, line, column, values) {
    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console
    console.log(values); // eslint-disable-line no-console
    return '';
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots, context) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(context || (parent_component ? parent_component.$$.context : [])),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, $$slots, context);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}
function add_classes(classes) {
    return classes ? ` class="${classes}"` : '';
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function claim_component(block, parent_nodes) {
    block && block.l(parent_nodes);
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            start_hydrating();
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        end_hydrating();
        flush();
    }
    set_current_component(parent_component);
}
let SvelteElement;
if (typeof HTMLElement === 'function') {
    SvelteElement = class extends HTMLElement {
        constructor() {
            super();
            this.attachShadow({ mode: 'open' });
        }
        connectedCallback() {
            const { on_mount } = this.$$;
            this.$$.on_disconnect = on_mount.map(run).filter(is_function);
            // @ts-ignore todo: improve typings
            for (const key in this.$$.slotted) {
                // @ts-ignore todo: improve typings
                this.appendChild(this.$$.slotted[key]);
            }
        }
        attributeChangedCallback(attr, _oldValue, newValue) {
            this[attr] = newValue;
        }
        disconnectedCallback() {
            run_all(this.$$.on_disconnect);
        }
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            // TODO should this delegate to addEventListener?
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    };
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function append_hydration_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append_hydration(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function insert_hydration_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert_hydration(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function detach_between_dev(before, after) {
    while (before.nextSibling && before.nextSibling !== after) {
        detach_dev(before.nextSibling);
    }
}
function detach_before_dev(after) {
    while (after.previousSibling) {
        detach_dev(after.previousSibling);
    }
}
function detach_after_dev(before) {
    while (before.nextSibling) {
        detach_dev(before.nextSibling);
    }
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function dataset_dev(node, property, value) {
    node.dataset[property] = value;
    dispatch_dev('SvelteDOMSetDataset', { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev('SvelteDOMSetData', { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}
/**
 * Base class to create strongly typed Svelte components.
 * This only exists for typing purposes and should be used in `.d.ts` files.
 *
 * ### Example:
 *
 * You have component library on npm called `component-library`, from which
 * you export a component called `MyComponent`. For Svelte+TypeScript users,
 * you want to provide typings. Therefore you create a `index.d.ts`:
 * ```ts
 * import { SvelteComponentTyped } from "svelte";
 * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}
 * ```
 * Typing this makes it possible for IDEs like VS Code with the Svelte extension
 * to provide intellisense and to use the component like this in a Svelte file
 * with TypeScript:
 * ```svelte
 * <script lang="ts">
 * 	import { MyComponent } from "component-library";
 * </script>
 * <MyComponent foo={'bar'} />
 * ```
 *
 * #### Why not make this part of `SvelteComponent(Dev)`?
 * Because
 * ```ts
 * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}
 * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;
 * ```
 * will throw a type error, so we need to separate the more strictly typed class.
 */
class SvelteComponentTyped extends SvelteComponentDev {
    constructor(options) {
        super(options);
    }
}
function loop_guard(timeout) {
    const start = Date.now();
    return () => {
        if (Date.now() - start > timeout) {
            throw new Error('Infinite loop detected');
        }
    };
}




/***/ }),

/***/ "./node_modules/svelte/store/index.mjs":
/*!*********************************************!*\
  !*** ./node_modules/svelte/store/index.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "get": () => (/* reexport safe */ _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get_store_value),
/* harmony export */   "derived": () => (/* binding */ derived),
/* harmony export */   "readable": () => (/* binding */ readable),
/* harmony export */   "writable": () => (/* binding */ writable)
/* harmony export */ });
/* harmony import */ var _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/index.mjs */ "./node_modules/svelte/internal/index.mjs");



const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.noop) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if ((0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.safe_not_equal)(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers) {
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.noop) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
            stop = start(set) || _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;
        }
        run(value);
        return () => {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.is_function)(result) ? result : _internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.subscribe)(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            (0,_internal_index_mjs__WEBPACK_IMPORTED_MODULE_0__.run_all)(unsubscribers);
            cleanup();
        };
    });
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,