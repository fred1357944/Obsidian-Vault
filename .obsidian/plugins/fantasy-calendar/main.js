/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/fast-copy/dist/fast-copy.js
var require_fast_copy = __commonJS({
  "node_modules/fast-copy/dist/fast-copy.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2["fast-copy"] = factory());
    })(exports, function() {
      "use strict";
      var toStringFunction = Function.prototype.toString;
      var create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf = Object.getPrototypeOf;
      var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
      var SUPPORTS = {
        SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === "function",
        WEAKMAP: typeof WeakMap === "function"
      };
      var createCache = function() {
        if (SUPPORTS.WEAKMAP) {
          return new WeakMap();
        }
        var object = create({
          has: function(key) {
            return !!~object._keys.indexOf(key);
          },
          set: function(key, value) {
            object._keys.push(key);
            object._values.push(value);
          },
          get: function(key) {
            return object._values[object._keys.indexOf(key)];
          }
        });
        object._keys = [];
        object._values = [];
        return object;
      };
      var getCleanClone = function(object, realm) {
        if (!object.constructor) {
          return create(null);
        }
        var Constructor = object.constructor;
        var prototype = object.__proto__ || getPrototypeOf(object);
        if (Constructor === realm.Object) {
          return prototype === realm.Object.prototype ? {} : create(prototype);
        }
        if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
          try {
            return new Constructor();
          } catch (_a2) {
          }
        }
        return create(prototype);
      };
      var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            clone[key] = handleCopy(object[key], cache);
          }
        }
        if (SUPPORTS.SYMBOL_PROPERTIES) {
          var symbols = getOwnPropertySymbols(object);
          var length_1 = symbols.length;
          if (length_1) {
            for (var index = 0, symbol = void 0; index < length_1; index++) {
              symbol = symbols[index];
              if (propertyIsEnumerable.call(object, symbol)) {
                clone[symbol] = handleCopy(object[symbol], cache);
              }
            }
          }
        }
        return clone;
      };
      var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        var properties = SUPPORTS.SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
        var length = properties.length;
        if (length) {
          for (var index = 0, property = void 0, descriptor = void 0; index < length; index++) {
            property = properties[index];
            if (property !== "callee" && property !== "caller") {
              descriptor = getOwnPropertyDescriptor(object, property);
              if (descriptor) {
                if (!descriptor.get && !descriptor.set) {
                  descriptor.value = handleCopy(object[property], cache);
                }
                try {
                  defineProperty(clone, property, descriptor);
                } catch (error) {
                  clone[property] = descriptor.value;
                }
              } else {
                clone[property] = handleCopy(object[property], cache);
              }
            }
          }
        }
        return clone;
      };
      var getRegExpFlags = function(regExp) {
        var flags = "";
        if (regExp.global) {
          flags += "g";
        }
        if (regExp.ignoreCase) {
          flags += "i";
        }
        if (regExp.multiline) {
          flags += "m";
        }
        if (regExp.unicode) {
          flags += "u";
        }
        if (regExp.sticky) {
          flags += "y";
        }
        return flags;
      };
      var isArray = Array.isArray;
      var GLOBAL_THIS = function() {
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        if (console && console.error) {
          console.error('Unable to locate global object, returning "this".');
        }
      }();
      function copy4(object, options) {
        var isStrict = !!(options && options.isStrict);
        var realm = options && options.realm || GLOBAL_THIS;
        var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
        var handleCopy = function(object2, cache) {
          if (!object2 || typeof object2 !== "object") {
            return object2;
          }
          if (cache.has(object2)) {
            return cache.get(object2);
          }
          var Constructor = object2.constructor;
          if (Constructor === realm.Object) {
            return getObjectClone(object2, realm, handleCopy, cache);
          }
          var clone;
          if (isArray(object2)) {
            if (isStrict) {
              return getObjectCloneStrict(object2, realm, handleCopy, cache);
            }
            var length_1 = object2.length;
            clone = new Constructor();
            cache.set(object2, clone);
            for (var index = 0; index < length_1; index++) {
              clone[index] = handleCopy(object2[index], cache);
            }
            return clone;
          }
          if (object2 instanceof realm.Date) {
            return new Constructor(object2.getTime());
          }
          if (object2 instanceof realm.RegExp) {
            clone = new Constructor(object2.source, object2.flags || getRegExpFlags(object2));
            clone.lastIndex = object2.lastIndex;
            return clone;
          }
          if (realm.Map && object2 instanceof realm.Map) {
            clone = new Constructor();
            cache.set(object2, clone);
            object2.forEach(function(value, key) {
              clone.set(key, handleCopy(value, cache));
            });
            return clone;
          }
          if (realm.Set && object2 instanceof realm.Set) {
            clone = new Constructor();
            cache.set(object2, clone);
            object2.forEach(function(value) {
              clone.add(handleCopy(value, cache));
            });
            return clone;
          }
          if (realm.Blob && object2 instanceof realm.Blob) {
            return object2.slice(0, object2.size, object2.type);
          }
          if (realm.Buffer && realm.Buffer.isBuffer(object2)) {
            clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(object2.length) : new Constructor(object2.length);
            cache.set(object2, clone);
            object2.copy(clone);
            return clone;
          }
          if (realm.ArrayBuffer) {
            if (realm.ArrayBuffer.isView(object2)) {
              clone = new Constructor(object2.buffer.slice(0));
              cache.set(object2, clone);
              return clone;
            }
            if (object2 instanceof realm.ArrayBuffer) {
              clone = object2.slice(0);
              cache.set(object2, clone);
              return clone;
            }
          }
          if (typeof object2.then === "function" || object2 instanceof Error || realm.WeakMap && object2 instanceof realm.WeakMap || realm.WeakSet && object2 instanceof realm.WeakSet) {
            return object2;
          }
          return getObjectClone(object2, realm, handleCopy, cache);
        };
        return handleCopy(object, createCache());
      }
      copy4.default = copy4;
      copy4.strict = function strictCopy(object, options) {
        return copy4(object, {
          isStrict: true,
          realm: options ? options.realm : void 0
        });
      };
      return copy4;
    });
  }
});

// node_modules/distinct-colors/lib/utils.js
var require_utils = __commonJS({
  "node_modules/distinct-colors/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var utils = {
      sum: function sum(array) {
        return array.reduce(function(a, b) {
          return a + b;
        });
      }
    };
    var _default = utils;
    exports["default"] = _default;
  }
});

// node_modules/mout/lang/kindOf.js
var require_kindOf = __commonJS({
  "node_modules/mout/lang/kindOf.js"(exports, module2) {
    function kindOf(val) {
      return Object.prototype.toString.call(val).slice(8, -1);
    }
    module2.exports = kindOf;
  }
});

// node_modules/mout/lang/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/mout/lang/isPlainObject.js"(exports, module2) {
    function isPlainObject(value) {
      return !!value && typeof value === "object" && value.constructor === Object;
    }
    module2.exports = isPlainObject;
  }
});

// node_modules/mout/object/hasOwn.js
var require_hasOwn = __commonJS({
  "node_modules/mout/object/hasOwn.js"(exports, module2) {
    function hasOwn(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module2.exports = hasOwn;
  }
});

// node_modules/mout/object/forIn.js
var require_forIn = __commonJS({
  "node_modules/mout/object/forIn.js"(exports, module2) {
    var hasOwn = require_hasOwn();
    var _hasDontEnumBug;
    var _dontEnums;
    function checkDontEnum() {
      _dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      _hasDontEnumBug = true;
      for (var key in { "toString": null }) {
        _hasDontEnumBug = false;
      }
    }
    function forIn(obj, fn2, thisObj) {
      var key, i = 0;
      if (_hasDontEnumBug == null)
        checkDontEnum();
      for (key in obj) {
        if (exec(fn2, obj, key, thisObj) === false) {
          break;
        }
      }
      if (_hasDontEnumBug) {
        var ctor = obj.constructor, isProto = !!ctor && obj === ctor.prototype;
        while (key = _dontEnums[i++]) {
          if ((key !== "constructor" || !isProto && hasOwn(obj, key)) && obj[key] !== Object.prototype[key]) {
            if (exec(fn2, obj, key, thisObj) === false) {
              break;
            }
          }
        }
      }
    }
    function exec(fn2, obj, key, thisObj) {
      return fn2.call(thisObj, obj[key], key, obj);
    }
    module2.exports = forIn;
  }
});

// node_modules/mout/object/forOwn.js
var require_forOwn = __commonJS({
  "node_modules/mout/object/forOwn.js"(exports, module2) {
    var hasOwn = require_hasOwn();
    var forIn = require_forIn();
    function forOwn(obj, fn2, thisObj) {
      forIn(obj, function(val, key) {
        if (hasOwn(obj, key)) {
          return fn2.call(thisObj, obj[key], key, obj);
        }
      });
    }
    module2.exports = forOwn;
  }
});

// node_modules/mout/object/mixIn.js
var require_mixIn = __commonJS({
  "node_modules/mout/object/mixIn.js"(exports, module2) {
    var forOwn = require_forOwn();
    function mixIn(target, objects) {
      var i = 0, n = arguments.length, obj;
      while (++i < n) {
        obj = arguments[i];
        if (obj != null) {
          forOwn(obj, copyProp, target);
        }
      }
      return target;
    }
    function copyProp(val, key) {
      this[key] = val;
    }
    module2.exports = mixIn;
  }
});

// node_modules/mout/lang/clone.js
var require_clone = __commonJS({
  "node_modules/mout/lang/clone.js"(exports, module2) {
    var kindOf = require_kindOf();
    var isPlainObject = require_isPlainObject();
    var mixIn = require_mixIn();
    function clone(val) {
      switch (kindOf(val)) {
        case "Object":
          return cloneObject(val);
        case "Array":
          return cloneArray(val);
        case "RegExp":
          return cloneRegExp(val);
        case "Date":
          return cloneDate(val);
        default:
          return val;
      }
    }
    function cloneObject(source) {
      if (isPlainObject(source)) {
        return mixIn({}, source);
      } else {
        return source;
      }
    }
    function cloneRegExp(r) {
      var flags = "";
      flags += r.multiline ? "m" : "";
      flags += r.global ? "g" : "";
      flags += r.ignoreCase ? "i" : "";
      return new RegExp(r.source, flags);
    }
    function cloneDate(date) {
      return new Date(+date);
    }
    function cloneArray(arr) {
      return arr.slice();
    }
    module2.exports = clone;
  }
});

// node_modules/mout/lang/deepClone.js
var require_deepClone = __commonJS({
  "node_modules/mout/lang/deepClone.js"(exports, module2) {
    var clone = require_clone();
    var forOwn = require_forOwn();
    var kindOf = require_kindOf();
    var isPlainObject = require_isPlainObject();
    function deepClone(val, instanceClone) {
      switch (kindOf(val)) {
        case "Object":
          return cloneObject(val, instanceClone);
        case "Array":
          return cloneArray(val, instanceClone);
        default:
          return clone(val);
      }
    }
    function cloneObject(source, instanceClone) {
      if (isPlainObject(source)) {
        var out = {};
        forOwn(source, function(val, key) {
          this[key] = deepClone(val, instanceClone);
        }, out);
        return out;
      } else if (instanceClone) {
        return instanceClone(source);
      } else {
        return source;
      }
    }
    function cloneArray(arr, instanceClone) {
      var out = [], i = -1, n = arr.length, val;
      while (++i < n) {
        out[i] = deepClone(arr[i], instanceClone);
      }
      return out;
    }
    module2.exports = deepClone;
  }
});

// node_modules/mout/lang/is.js
var require_is = __commonJS({
  "node_modules/mout/lang/is.js"(exports, module2) {
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      }
      return x !== x && y !== y;
    }
    module2.exports = is;
  }
});

// node_modules/mout/lang/isKind.js
var require_isKind = __commonJS({
  "node_modules/mout/lang/isKind.js"(exports, module2) {
    var kindOf = require_kindOf();
    function isKind(val, kind) {
      return kindOf(val) === kind;
    }
    module2.exports = isKind;
  }
});

// node_modules/mout/lang/isObject.js
var require_isObject = __commonJS({
  "node_modules/mout/lang/isObject.js"(exports, module2) {
    var isKind = require_isKind();
    function isObject(val) {
      return isKind(val, "Object");
    }
    module2.exports = isObject;
  }
});

// node_modules/mout/lang/isArray.js
var require_isArray = __commonJS({
  "node_modules/mout/lang/isArray.js"(exports, module2) {
    var isKind = require_isKind();
    var isArray = Array.isArray || function(val) {
      return isKind(val, "Array");
    };
    module2.exports = isArray;
  }
});

// node_modules/mout/function/identity.js
var require_identity = __commonJS({
  "node_modules/mout/function/identity.js"(exports, module2) {
    function identity2(val) {
      return val;
    }
    module2.exports = identity2;
  }
});

// node_modules/mout/function/prop.js
var require_prop = __commonJS({
  "node_modules/mout/function/prop.js"(exports, module2) {
    function prop(name) {
      return function(obj) {
        return obj[name];
      };
    }
    module2.exports = prop;
  }
});

// node_modules/mout/object/deepMatches.js
var require_deepMatches = __commonJS({
  "node_modules/mout/object/deepMatches.js"(exports, module2) {
    var forOwn = require_forOwn();
    var isArray = require_isArray();
    function containsMatch(array, pattern) {
      var i = -1, length = array.length;
      while (++i < length) {
        if (deepMatches(array[i], pattern)) {
          return true;
        }
      }
      return false;
    }
    function matchArray(target, pattern) {
      var i = -1, patternLength = pattern.length;
      while (++i < patternLength) {
        if (!containsMatch(target, pattern[i])) {
          return false;
        }
      }
      return true;
    }
    function matchObject(target, pattern) {
      var result = true;
      forOwn(pattern, function(val, key) {
        if (!deepMatches(target[key], val)) {
          return result = false;
        }
      });
      return result;
    }
    function deepMatches(target, pattern) {
      if (target && typeof target === "object" && pattern && typeof pattern === "object") {
        if (isArray(target) && isArray(pattern)) {
          return matchArray(target, pattern);
        } else {
          return matchObject(target, pattern);
        }
      } else {
        return target === pattern;
      }
    }
    module2.exports = deepMatches;
  }
});

// node_modules/mout/function/makeIterator_.js
var require_makeIterator = __commonJS({
  "node_modules/mout/function/makeIterator_.js"(exports, module2) {
    var identity2 = require_identity();
    var prop = require_prop();
    var deepMatches = require_deepMatches();
    function makeIterator(src, thisObj) {
      if (src == null) {
        return identity2;
      }
      switch (typeof src) {
        case "function":
          return typeof thisObj !== "undefined" ? function(val, i, arr) {
            return src.call(thisObj, val, i, arr);
          } : src;
        case "object":
          return function(val) {
            return deepMatches(val, src);
          };
        case "string":
        case "number":
          return prop(src);
      }
    }
    module2.exports = makeIterator;
  }
});

// node_modules/mout/object/every.js
var require_every = __commonJS({
  "node_modules/mout/object/every.js"(exports, module2) {
    var forOwn = require_forOwn();
    var makeIterator = require_makeIterator();
    function every(obj, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var result = true;
      forOwn(obj, function(val, key) {
        if (!callback(val, key, obj)) {
          result = false;
          return false;
        }
      });
      return result;
    }
    module2.exports = every;
  }
});

// node_modules/mout/object/equals.js
var require_equals = __commonJS({
  "node_modules/mout/object/equals.js"(exports, module2) {
    var hasOwn = require_hasOwn();
    var every = require_every();
    var isObject = require_isObject();
    var is = require_is();
    function makeCompare(callback) {
      return function(value, key) {
        return hasOwn(this, key) && callback(value, this[key]);
      };
    }
    function checkProperties(value, key) {
      return hasOwn(this, key);
    }
    function equals(a, b, callback) {
      callback = callback || is;
      if (!isObject(a) || !isObject(b)) {
        return callback(a, b);
      }
      return every(a, makeCompare(callback), b) && every(b, checkProperties, a);
    }
    module2.exports = equals;
  }
});

// node_modules/mout/array/every.js
var require_every2 = __commonJS({
  "node_modules/mout/array/every.js"(exports, module2) {
    var makeIterator = require_makeIterator();
    function every(arr, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var result = true;
      if (arr == null) {
        return result;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (!callback(arr[i], i, arr)) {
          result = false;
          break;
        }
      }
      return result;
    }
    module2.exports = every;
  }
});

// node_modules/mout/array/equals.js
var require_equals2 = __commonJS({
  "node_modules/mout/array/equals.js"(exports, module2) {
    var is = require_is();
    var isArray = require_isArray();
    var every = require_every2();
    function equals(a, b, callback) {
      callback = callback || is;
      if (!isArray(a) || !isArray(b)) {
        return callback(a, b);
      }
      if (a.length !== b.length) {
        return false;
      }
      return every(a, makeCompare(callback), b);
    }
    function makeCompare(callback) {
      return function(value, i) {
        return i in this && callback(value, this[i]);
      };
    }
    module2.exports = equals;
  }
});

// node_modules/mout/lang/deepEquals.js
var require_deepEquals = __commonJS({
  "node_modules/mout/lang/deepEquals.js"(exports, module2) {
    var is = require_is();
    var isObject = require_isObject();
    var isArray = require_isArray();
    var objEquals = require_equals();
    var arrEquals = require_equals2();
    function deepEquals(a, b, callback) {
      callback = callback || is;
      var bothObjects = isObject(a) && isObject(b);
      var bothArrays = !bothObjects && isArray(a) && isArray(b);
      if (!bothObjects && !bothArrays) {
        return callback(a, b);
      }
      function compare(a2, b2) {
        return deepEquals(a2, b2, callback);
      }
      var method = bothObjects ? objEquals : arrEquals;
      return method(a, b, compare);
    }
    module2.exports = deepEquals;
  }
});

// node_modules/chroma-js/chroma.js
var require_chroma = __commonJS({
  "node_modules/chroma-js/chroma.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.chroma = factory();
    })(exports, function() {
      "use strict";
      var limit = function(x, min3, max3) {
        if (min3 === void 0)
          min3 = 0;
        if (max3 === void 0)
          max3 = 1;
        return x < min3 ? min3 : x > max3 ? max3 : x;
      };
      var clip_rgb = function(rgb) {
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for (var i2 = 0; i2 <= 3; i2++) {
          if (i2 < 3) {
            if (rgb[i2] < 0 || rgb[i2] > 255) {
              rgb._clipped = true;
            }
            rgb[i2] = limit(rgb[i2], 0, 255);
          } else if (i2 === 3) {
            rgb[i2] = limit(rgb[i2], 0, 1);
          }
        }
        return rgb;
      };
      var classToType = {};
      for (var i = 0, list = ["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Undefined", "Null"]; i < list.length; i += 1) {
        var name = list[i];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      var type = function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || "object";
      };
      var unpack = function(args, keyOrder) {
        if (keyOrder === void 0)
          keyOrder = null;
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        }
        if (type(args[0]) == "object" && keyOrder) {
          return keyOrder.split("").filter(function(k) {
            return args[0][k] !== void 0;
          }).map(function(k) {
            return args[0][k];
          });
        }
        return args[0];
      };
      var last = function(args) {
        if (args.length < 2) {
          return null;
        }
        var l = args.length - 1;
        if (type(args[l]) == "string") {
          return args[l].toLowerCase();
        }
        return null;
      };
      var PI = Math.PI;
      var utils = {
        clip_rgb,
        limit,
        type,
        unpack,
        last,
        PI,
        TWOPI: PI * 2,
        PITHIRD: PI / 3,
        DEG2RAD: PI / 180,
        RAD2DEG: 180 / PI
      };
      var input = {
        format: {},
        autodetect: []
      };
      var last$1 = utils.last;
      var clip_rgb$1 = utils.clip_rgb;
      var type$1 = utils.type;
      var Color = function Color2() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var me = this;
        if (type$1(args[0]) === "object" && args[0].constructor && args[0].constructor === this.constructor) {
          return args[0];
        }
        var mode = last$1(args);
        var autodetect = false;
        if (!mode) {
          autodetect = true;
          if (!input.sorted) {
            input.autodetect = input.autodetect.sort(function(a, b) {
              return b.p - a.p;
            });
            input.sorted = true;
          }
          for (var i2 = 0, list2 = input.autodetect; i2 < list2.length; i2 += 1) {
            var chk = list2[i2];
            mode = chk.test.apply(chk, args);
            if (mode) {
              break;
            }
          }
        }
        if (input.format[mode]) {
          var rgb = input.format[mode].apply(null, autodetect ? args : args.slice(0, -1));
          me._rgb = clip_rgb$1(rgb);
        } else {
          throw new Error("unknown format: " + args);
        }
        if (me._rgb.length === 3) {
          me._rgb.push(1);
        }
      };
      Color.prototype.toString = function toString2() {
        if (type$1(this.hex) == "function") {
          return this.hex();
        }
        return "[" + this._rgb.join(",") + "]";
      };
      var Color_1 = Color;
      var chroma = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(chroma.Color, [null].concat(args)))();
      };
      chroma.Color = Color_1;
      chroma.version = "2.1.2";
      var chroma_1 = chroma;
      var unpack$1 = utils.unpack;
      var max2 = Math.max;
      var rgb2cmyk = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$1(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r = r / 255;
        g = g / 255;
        b = b / 255;
        var k = 1 - max2(r, max2(g, b));
        var f = k < 1 ? 1 / (1 - k) : 0;
        var c = (1 - r - k) * f;
        var m = (1 - g - k) * f;
        var y = (1 - b - k) * f;
        return [c, m, y, k];
      };
      var rgb2cmyk_1 = rgb2cmyk;
      var unpack$2 = utils.unpack;
      var cmyk2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$2(args, "cmyk");
        var c = args[0];
        var m = args[1];
        var y = args[2];
        var k = args[3];
        var alpha = args.length > 4 ? args[4] : 1;
        if (k === 1) {
          return [0, 0, 0, alpha];
        }
        return [
          c >= 1 ? 0 : 255 * (1 - c) * (1 - k),
          m >= 1 ? 0 : 255 * (1 - m) * (1 - k),
          y >= 1 ? 0 : 255 * (1 - y) * (1 - k),
          alpha
        ];
      };
      var cmyk2rgb_1 = cmyk2rgb;
      var unpack$3 = utils.unpack;
      var type$2 = utils.type;
      Color_1.prototype.cmyk = function() {
        return rgb2cmyk_1(this._rgb);
      };
      chroma_1.cmyk = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["cmyk"])))();
      };
      input.format.cmyk = cmyk2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$3(args, "cmyk");
          if (type$2(args) === "array" && args.length === 4) {
            return "cmyk";
          }
        }
      });
      var unpack$4 = utils.unpack;
      var last$2 = utils.last;
      var rnd = function(a) {
        return Math.round(a * 100) / 100;
      };
      var hsl2css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var hsla = unpack$4(args, "hsla");
        var mode = last$2(args) || "lsa";
        hsla[0] = rnd(hsla[0] || 0);
        hsla[1] = rnd(hsla[1] * 100) + "%";
        hsla[2] = rnd(hsla[2] * 100) + "%";
        if (mode === "hsla" || hsla.length > 3 && hsla[3] < 1) {
          hsla[3] = hsla.length > 3 ? hsla[3] : 1;
          mode = "hsla";
        } else {
          hsla.length = 3;
        }
        return mode + "(" + hsla.join(",") + ")";
      };
      var hsl2css_1 = hsl2css;
      var unpack$5 = utils.unpack;
      var rgb2hsl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$5(args, "rgba");
        var r = args[0];
        var g = args[1];
        var b = args[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var min3 = Math.min(r, g, b);
        var max3 = Math.max(r, g, b);
        var l = (max3 + min3) / 2;
        var s, h;
        if (max3 === min3) {
          s = 0;
          h = Number.NaN;
        } else {
          s = l < 0.5 ? (max3 - min3) / (max3 + min3) : (max3 - min3) / (2 - max3 - min3);
        }
        if (r == max3) {
          h = (g - b) / (max3 - min3);
        } else if (g == max3) {
          h = 2 + (b - r) / (max3 - min3);
        } else if (b == max3) {
          h = 4 + (r - g) / (max3 - min3);
        }
        h *= 60;
        if (h < 0) {
          h += 360;
        }
        if (args.length > 3 && args[3] !== void 0) {
          return [h, s, l, args[3]];
        }
        return [h, s, l];
      };
      var rgb2hsl_1 = rgb2hsl;
      var unpack$6 = utils.unpack;
      var last$3 = utils.last;
      var round2 = Math.round;
      var rgb2css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgba = unpack$6(args, "rgba");
        var mode = last$3(args) || "rgb";
        if (mode.substr(0, 3) == "hsl") {
          return hsl2css_1(rgb2hsl_1(rgba), mode);
        }
        rgba[0] = round2(rgba[0]);
        rgba[1] = round2(rgba[1]);
        rgba[2] = round2(rgba[2]);
        if (mode === "rgba" || rgba.length > 3 && rgba[3] < 1) {
          rgba[3] = rgba.length > 3 ? rgba[3] : 1;
          mode = "rgba";
        }
        return mode + "(" + rgba.slice(0, mode === "rgb" ? 3 : 4).join(",") + ")";
      };
      var rgb2css_1 = rgb2css;
      var unpack$7 = utils.unpack;
      var round$1 = Math.round;
      var hsl2rgb = function() {
        var assign2;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$7(args, "hsl");
        var h = args[0];
        var s = args[1];
        var l = args[2];
        var r, g, b;
        if (s === 0) {
          r = g = b = l * 255;
        } else {
          var t3 = [0, 0, 0];
          var c = [0, 0, 0];
          var t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var t1 = 2 * l - t2;
          var h_ = h / 360;
          t3[0] = h_ + 1 / 3;
          t3[1] = h_;
          t3[2] = h_ - 1 / 3;
          for (var i2 = 0; i2 < 3; i2++) {
            if (t3[i2] < 0) {
              t3[i2] += 1;
            }
            if (t3[i2] > 1) {
              t3[i2] -= 1;
            }
            if (6 * t3[i2] < 1) {
              c[i2] = t1 + (t2 - t1) * 6 * t3[i2];
            } else if (2 * t3[i2] < 1) {
              c[i2] = t2;
            } else if (3 * t3[i2] < 2) {
              c[i2] = t1 + (t2 - t1) * (2 / 3 - t3[i2]) * 6;
            } else {
              c[i2] = t1;
            }
          }
          assign2 = [round$1(c[0] * 255), round$1(c[1] * 255), round$1(c[2] * 255)], r = assign2[0], g = assign2[1], b = assign2[2];
        }
        if (args.length > 3) {
          return [r, g, b, args[3]];
        }
        return [r, g, b, 1];
      };
      var hsl2rgb_1 = hsl2rgb;
      var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
      var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
      var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
      var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
      var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
      var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
      var round$2 = Math.round;
      var css2rgb = function(css) {
        css = css.toLowerCase().trim();
        var m;
        if (input.format.named) {
          try {
            return input.format.named(css);
          } catch (e) {
          }
        }
        if (m = css.match(RE_RGB)) {
          var rgb = m.slice(1, 4);
          for (var i2 = 0; i2 < 3; i2++) {
            rgb[i2] = +rgb[i2];
          }
          rgb[3] = 1;
          return rgb;
        }
        if (m = css.match(RE_RGBA)) {
          var rgb$12 = m.slice(1, 5);
          for (var i$12 = 0; i$12 < 4; i$12++) {
            rgb$12[i$12] = +rgb$12[i$12];
          }
          return rgb$12;
        }
        if (m = css.match(RE_RGB_PCT)) {
          var rgb$2 = m.slice(1, 4);
          for (var i$2 = 0; i$2 < 3; i$2++) {
            rgb$2[i$2] = round$2(rgb$2[i$2] * 2.55);
          }
          rgb$2[3] = 1;
          return rgb$2;
        }
        if (m = css.match(RE_RGBA_PCT)) {
          var rgb$3 = m.slice(1, 5);
          for (var i$3 = 0; i$3 < 3; i$3++) {
            rgb$3[i$3] = round$2(rgb$3[i$3] * 2.55);
          }
          rgb$3[3] = +rgb$3[3];
          return rgb$3;
        }
        if (m = css.match(RE_HSL)) {
          var hsl = m.slice(1, 4);
          hsl[1] *= 0.01;
          hsl[2] *= 0.01;
          var rgb$4 = hsl2rgb_1(hsl);
          rgb$4[3] = 1;
          return rgb$4;
        }
        if (m = css.match(RE_HSLA)) {
          var hsl$12 = m.slice(1, 4);
          hsl$12[1] *= 0.01;
          hsl$12[2] *= 0.01;
          var rgb$5 = hsl2rgb_1(hsl$12);
          rgb$5[3] = +m[4];
          return rgb$5;
        }
      };
      css2rgb.test = function(s) {
        return RE_RGB.test(s) || RE_RGBA.test(s) || RE_RGB_PCT.test(s) || RE_RGBA_PCT.test(s) || RE_HSL.test(s) || RE_HSLA.test(s);
      };
      var css2rgb_1 = css2rgb;
      var type$3 = utils.type;
      Color_1.prototype.css = function(mode) {
        return rgb2css_1(this._rgb, mode);
      };
      chroma_1.css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["css"])))();
      };
      input.format.css = css2rgb_1;
      input.autodetect.push({
        p: 5,
        test: function(h) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$3(h) === "string" && css2rgb_1.test(h)) {
            return "css";
          }
        }
      });
      var unpack$8 = utils.unpack;
      input.format.gl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgb = unpack$8(args, "rgba");
        rgb[0] *= 255;
        rgb[1] *= 255;
        rgb[2] *= 255;
        return rgb;
      };
      chroma_1.gl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["gl"])))();
      };
      Color_1.prototype.gl = function() {
        var rgb = this._rgb;
        return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
      };
      var unpack$9 = utils.unpack;
      var rgb2hcg = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$9(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var min3 = Math.min(r, g, b);
        var max3 = Math.max(r, g, b);
        var delta = max3 - min3;
        var c = delta * 100 / 255;
        var _g = min3 / (255 - delta) * 100;
        var h;
        if (delta === 0) {
          h = Number.NaN;
        } else {
          if (r === max3) {
            h = (g - b) / delta;
          }
          if (g === max3) {
            h = 2 + (b - r) / delta;
          }
          if (b === max3) {
            h = 4 + (r - g) / delta;
          }
          h *= 60;
          if (h < 0) {
            h += 360;
          }
        }
        return [h, c, _g];
      };
      var rgb2hcg_1 = rgb2hcg;
      var unpack$a = utils.unpack;
      var floor = Math.floor;
      var hcg2rgb = function() {
        var assign2, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$a(args, "hcg");
        var h = args[0];
        var c = args[1];
        var _g = args[2];
        var r, g, b;
        _g = _g * 255;
        var _c = c * 255;
        if (c === 0) {
          r = g = b = _g;
        } else {
          if (h === 360) {
            h = 0;
          }
          if (h > 360) {
            h -= 360;
          }
          if (h < 0) {
            h += 360;
          }
          h /= 60;
          var i2 = floor(h);
          var f = h - i2;
          var p = _g * (1 - c);
          var q = p + _c * (1 - f);
          var t = p + _c * f;
          var v = p + _c;
          switch (i2) {
            case 0:
              assign2 = [v, t, p], r = assign2[0], g = assign2[1], b = assign2[2];
              break;
            case 1:
              assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2];
              break;
            case 2:
              assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2];
              break;
            case 3:
              assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2];
              break;
            case 4:
              assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2];
              break;
            case 5:
              assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2];
              break;
          }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };
      var hcg2rgb_1 = hcg2rgb;
      var unpack$b = utils.unpack;
      var type$4 = utils.type;
      Color_1.prototype.hcg = function() {
        return rgb2hcg_1(this._rgb);
      };
      chroma_1.hcg = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hcg"])))();
      };
      input.format.hcg = hcg2rgb_1;
      input.autodetect.push({
        p: 1,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$b(args, "hcg");
          if (type$4(args) === "array" && args.length === 3) {
            return "hcg";
          }
        }
      });
      var unpack$c = utils.unpack;
      var last$4 = utils.last;
      var round$3 = Math.round;
      var rgb2hex = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$c(args, "rgba");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var a = ref[3];
        var mode = last$4(args) || "auto";
        if (a === void 0) {
          a = 1;
        }
        if (mode === "auto") {
          mode = a < 1 ? "rgba" : "rgb";
        }
        r = round$3(r);
        g = round$3(g);
        b = round$3(b);
        var u = r << 16 | g << 8 | b;
        var str = "000000" + u.toString(16);
        str = str.substr(str.length - 6);
        var hxa = "0" + round$3(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        switch (mode.toLowerCase()) {
          case "rgba":
            return "#" + str + hxa;
          case "argb":
            return "#" + hxa + str;
          default:
            return "#" + str;
        }
      };
      var rgb2hex_1 = rgb2hex;
      var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
      var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;
      var hex2rgb = function(hex) {
        if (hex.match(RE_HEX)) {
          if (hex.length === 4 || hex.length === 7) {
            hex = hex.substr(1);
          }
          if (hex.length === 3) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
          }
          var u = parseInt(hex, 16);
          var r = u >> 16;
          var g = u >> 8 & 255;
          var b = u & 255;
          return [r, g, b, 1];
        }
        if (hex.match(RE_HEXA)) {
          if (hex.length === 5 || hex.length === 9) {
            hex = hex.substr(1);
          }
          if (hex.length === 4) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
          }
          var u$1 = parseInt(hex, 16);
          var r$1 = u$1 >> 24 & 255;
          var g$1 = u$1 >> 16 & 255;
          var b$1 = u$1 >> 8 & 255;
          var a = Math.round((u$1 & 255) / 255 * 100) / 100;
          return [r$1, g$1, b$1, a];
        }
        throw new Error("unknown hex color: " + hex);
      };
      var hex2rgb_1 = hex2rgb;
      var type$5 = utils.type;
      Color_1.prototype.hex = function(mode) {
        return rgb2hex_1(this._rgb, mode);
      };
      chroma_1.hex = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hex"])))();
      };
      input.format.hex = hex2rgb_1;
      input.autodetect.push({
        p: 4,
        test: function(h) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$5(h) === "string" && [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0) {
            return "hex";
          }
        }
      });
      var unpack$d = utils.unpack;
      var TWOPI = utils.TWOPI;
      var min2 = Math.min;
      var sqrt = Math.sqrt;
      var acos = Math.acos;
      var rgb2hsi = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$d(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var h;
        var min_ = min2(r, g, b);
        var i2 = (r + g + b) / 3;
        var s = i2 > 0 ? 1 - min_ / i2 : 0;
        if (s === 0) {
          h = NaN;
        } else {
          h = (r - g + (r - b)) / 2;
          h /= sqrt((r - g) * (r - g) + (r - b) * (g - b));
          h = acos(h);
          if (b > g) {
            h = TWOPI - h;
          }
          h /= TWOPI;
        }
        return [h * 360, s, i2];
      };
      var rgb2hsi_1 = rgb2hsi;
      var unpack$e = utils.unpack;
      var limit$1 = utils.limit;
      var TWOPI$1 = utils.TWOPI;
      var PITHIRD = utils.PITHIRD;
      var cos = Math.cos;
      var hsi2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$e(args, "hsi");
        var h = args[0];
        var s = args[1];
        var i2 = args[2];
        var r, g, b;
        if (isNaN(h)) {
          h = 0;
        }
        if (isNaN(s)) {
          s = 0;
        }
        if (h > 360) {
          h -= 360;
        }
        if (h < 0) {
          h += 360;
        }
        h /= 360;
        if (h < 1 / 3) {
          b = (1 - s) / 3;
          r = (1 + s * cos(TWOPI$1 * h) / cos(PITHIRD - TWOPI$1 * h)) / 3;
          g = 1 - (b + r);
        } else if (h < 2 / 3) {
          h -= 1 / 3;
          r = (1 - s) / 3;
          g = (1 + s * cos(TWOPI$1 * h) / cos(PITHIRD - TWOPI$1 * h)) / 3;
          b = 1 - (r + g);
        } else {
          h -= 2 / 3;
          g = (1 - s) / 3;
          b = (1 + s * cos(TWOPI$1 * h) / cos(PITHIRD - TWOPI$1 * h)) / 3;
          r = 1 - (g + b);
        }
        r = limit$1(i2 * r * 3);
        g = limit$1(i2 * g * 3);
        b = limit$1(i2 * b * 3);
        return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
      };
      var hsi2rgb_1 = hsi2rgb;
      var unpack$f = utils.unpack;
      var type$6 = utils.type;
      Color_1.prototype.hsi = function() {
        return rgb2hsi_1(this._rgb);
      };
      chroma_1.hsi = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hsi"])))();
      };
      input.format.hsi = hsi2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$f(args, "hsi");
          if (type$6(args) === "array" && args.length === 3) {
            return "hsi";
          }
        }
      });
      var unpack$g = utils.unpack;
      var type$7 = utils.type;
      Color_1.prototype.hsl = function() {
        return rgb2hsl_1(this._rgb);
      };
      chroma_1.hsl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hsl"])))();
      };
      input.format.hsl = hsl2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$g(args, "hsl");
          if (type$7(args) === "array" && args.length === 3) {
            return "hsl";
          }
        }
      });
      var unpack$h = utils.unpack;
      var min$1 = Math.min;
      var max$1 = Math.max;
      var rgb2hsl$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$h(args, "rgb");
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var min_ = min$1(r, g, b);
        var max_ = max$1(r, g, b);
        var delta = max_ - min_;
        var h, s, v;
        v = max_ / 255;
        if (max_ === 0) {
          h = Number.NaN;
          s = 0;
        } else {
          s = delta / max_;
          if (r === max_) {
            h = (g - b) / delta;
          }
          if (g === max_) {
            h = 2 + (b - r) / delta;
          }
          if (b === max_) {
            h = 4 + (r - g) / delta;
          }
          h *= 60;
          if (h < 0) {
            h += 360;
          }
        }
        return [h, s, v];
      };
      var rgb2hsv = rgb2hsl$1;
      var unpack$i = utils.unpack;
      var floor$1 = Math.floor;
      var hsv2rgb = function() {
        var assign2, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$i(args, "hsv");
        var h = args[0];
        var s = args[1];
        var v = args[2];
        var r, g, b;
        v *= 255;
        if (s === 0) {
          r = g = b = v;
        } else {
          if (h === 360) {
            h = 0;
          }
          if (h > 360) {
            h -= 360;
          }
          if (h < 0) {
            h += 360;
          }
          h /= 60;
          var i2 = floor$1(h);
          var f = h - i2;
          var p = v * (1 - s);
          var q = v * (1 - s * f);
          var t = v * (1 - s * (1 - f));
          switch (i2) {
            case 0:
              assign2 = [v, t, p], r = assign2[0], g = assign2[1], b = assign2[2];
              break;
            case 1:
              assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2];
              break;
            case 2:
              assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2];
              break;
            case 3:
              assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2];
              break;
            case 4:
              assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2];
              break;
            case 5:
              assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2];
              break;
          }
        }
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };
      var hsv2rgb_1 = hsv2rgb;
      var unpack$j = utils.unpack;
      var type$8 = utils.type;
      Color_1.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };
      chroma_1.hsv = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hsv"])))();
      };
      input.format.hsv = hsv2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$j(args, "hsv");
          if (type$8(args) === "array" && args.length === 3) {
            return "hsv";
          }
        }
      });
      var labConstants = {
        Kn: 18,
        Xn: 0.95047,
        Yn: 1,
        Zn: 1.08883,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 8856452e-9
      };
      var unpack$k = utils.unpack;
      var pow = Math.pow;
      var rgb2lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$k(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2xyz(r, g, b);
        var x = ref$1[0];
        var y = ref$1[1];
        var z = ref$1[2];
        var l = 116 * y - 16;
        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];
      };
      var rgb_xyz = function(r) {
        if ((r /= 255) <= 0.04045) {
          return r / 12.92;
        }
        return pow((r + 0.055) / 1.055, 2.4);
      };
      var xyz_lab = function(t) {
        if (t > labConstants.t3) {
          return pow(t, 1 / 3);
        }
        return t / labConstants.t2 + labConstants.t0;
      };
      var rgb2xyz = function(r, g, b) {
        r = rgb_xyz(r);
        g = rgb_xyz(g);
        b = rgb_xyz(b);
        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / labConstants.Xn);
        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / labConstants.Yn);
        var z = xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / labConstants.Zn);
        return [x, y, z];
      };
      var rgb2lab_1 = rgb2lab;
      var unpack$l = utils.unpack;
      var pow$1 = Math.pow;
      var lab2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$l(args, "lab");
        var l = args[0];
        var a = args[1];
        var b = args[2];
        var x, y, z, r, g, b_;
        y = (l + 16) / 116;
        x = isNaN(a) ? y : y + a / 500;
        z = isNaN(b) ? y : y - b / 200;
        y = labConstants.Yn * lab_xyz(y);
        x = labConstants.Xn * lab_xyz(x);
        z = labConstants.Zn * lab_xyz(z);
        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
        g = xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z);
        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
        return [r, g, b_, args.length > 3 ? args[3] : 1];
      };
      var xyz_rgb = function(r) {
        return 255 * (r <= 304e-5 ? 12.92 * r : 1.055 * pow$1(r, 1 / 2.4) - 0.055);
      };
      var lab_xyz = function(t) {
        return t > labConstants.t1 ? t * t * t : labConstants.t2 * (t - labConstants.t0);
      };
      var lab2rgb_1 = lab2rgb;
      var unpack$m = utils.unpack;
      var type$9 = utils.type;
      Color_1.prototype.lab = function() {
        return rgb2lab_1(this._rgb);
      };
      chroma_1.lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["lab"])))();
      };
      input.format.lab = lab2rgb_1;
      input.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$m(args, "lab");
          if (type$9(args) === "array" && args.length === 3) {
            return "lab";
          }
        }
      });
      var unpack$n = utils.unpack;
      var RAD2DEG = utils.RAD2DEG;
      var sqrt$1 = Math.sqrt;
      var atan2 = Math.atan2;
      var round$4 = Math.round;
      var lab2lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$n(args, "lab");
        var l = ref[0];
        var a = ref[1];
        var b = ref[2];
        var c = sqrt$1(a * a + b * b);
        var h = (atan2(b, a) * RAD2DEG + 360) % 360;
        if (round$4(c * 1e4) === 0) {
          h = Number.NaN;
        }
        return [l, c, h];
      };
      var lab2lch_1 = lab2lch;
      var unpack$o = utils.unpack;
      var rgb2lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$o(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2lab_1(r, g, b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch_1(l, a, b_);
      };
      var rgb2lch_1 = rgb2lch;
      var unpack$p = utils.unpack;
      var DEG2RAD = utils.DEG2RAD;
      var sin = Math.sin;
      var cos$1 = Math.cos;
      var lch2lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$p(args, "lch");
        var l = ref[0];
        var c = ref[1];
        var h = ref[2];
        if (isNaN(h)) {
          h = 0;
        }
        h = h * DEG2RAD;
        return [l, cos$1(h) * c, sin(h) * c];
      };
      var lch2lab_1 = lch2lab;
      var unpack$q = utils.unpack;
      var lch2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$q(args, "lch");
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab_1(l, c, h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = lab2rgb_1(L, a, b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [r, g, b, args.length > 3 ? args[3] : 1];
      };
      var lch2rgb_1 = lch2rgb;
      var unpack$r = utils.unpack;
      var hcl2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var hcl = unpack$r(args, "hcl").reverse();
        return lch2rgb_1.apply(void 0, hcl);
      };
      var hcl2rgb_1 = hcl2rgb;
      var unpack$s = utils.unpack;
      var type$a = utils.type;
      Color_1.prototype.lch = function() {
        return rgb2lch_1(this._rgb);
      };
      Color_1.prototype.hcl = function() {
        return rgb2lch_1(this._rgb).reverse();
      };
      chroma_1.lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["lch"])))();
      };
      chroma_1.hcl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["hcl"])))();
      };
      input.format.lch = lch2rgb_1;
      input.format.hcl = hcl2rgb_1;
      ["lch", "hcl"].forEach(function(m) {
        return input.autodetect.push({
          p: 2,
          test: function() {
            var args = [], len = arguments.length;
            while (len--)
              args[len] = arguments[len];
            args = unpack$s(args, m);
            if (type$a(args) === "array" && args.length === 3) {
              return m;
            }
          }
        });
      });
      var w3cx11 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      };
      var w3cx11_1 = w3cx11;
      var type$b = utils.type;
      Color_1.prototype.name = function() {
        var hex = rgb2hex_1(this._rgb, "rgb");
        for (var i2 = 0, list2 = Object.keys(w3cx11_1); i2 < list2.length; i2 += 1) {
          var n = list2[i2];
          if (w3cx11_1[n] === hex) {
            return n.toLowerCase();
          }
        }
        return hex;
      };
      input.format.named = function(name2) {
        name2 = name2.toLowerCase();
        if (w3cx11_1[name2]) {
          return hex2rgb_1(w3cx11_1[name2]);
        }
        throw new Error("unknown color name: " + name2);
      };
      input.autodetect.push({
        p: 5,
        test: function(h) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$b(h) === "string" && w3cx11_1[h.toLowerCase()]) {
            return "named";
          }
        }
      });
      var unpack$t = utils.unpack;
      var rgb2num = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$t(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        return (r << 16) + (g << 8) + b;
      };
      var rgb2num_1 = rgb2num;
      var type$c = utils.type;
      var num2rgb = function(num) {
        if (type$c(num) == "number" && num >= 0 && num <= 16777215) {
          var r = num >> 16;
          var g = num >> 8 & 255;
          var b = num & 255;
          return [r, g, b, 1];
        }
        throw new Error("unknown num color: " + num);
      };
      var num2rgb_1 = num2rgb;
      var type$d = utils.type;
      Color_1.prototype.num = function() {
        return rgb2num_1(this._rgb);
      };
      chroma_1.num = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["num"])))();
      };
      input.format.num = num2rgb_1;
      input.autodetect.push({
        p: 5,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          if (args.length === 1 && type$d(args[0]) === "number" && args[0] >= 0 && args[0] <= 16777215) {
            return "num";
          }
        }
      });
      var unpack$u = utils.unpack;
      var type$e = utils.type;
      var round$5 = Math.round;
      Color_1.prototype.rgb = function(rnd2) {
        if (rnd2 === void 0)
          rnd2 = true;
        if (rnd2 === false) {
          return this._rgb.slice(0, 3);
        }
        return this._rgb.slice(0, 3).map(round$5);
      };
      Color_1.prototype.rgba = function(rnd2) {
        if (rnd2 === void 0)
          rnd2 = true;
        return this._rgb.slice(0, 4).map(function(v, i2) {
          return i2 < 3 ? rnd2 === false ? v : round$5(v) : v;
        });
      };
      chroma_1.rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["rgb"])))();
      };
      input.format.rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgba = unpack$u(args, "rgba");
        if (rgba[3] === void 0) {
          rgba[3] = 1;
        }
        return rgba;
      };
      input.autodetect.push({
        p: 3,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$u(args, "rgba");
          if (type$e(args) === "array" && (args.length === 3 || args.length === 4 && type$e(args[3]) == "number" && args[3] >= 0 && args[3] <= 1)) {
            return "rgb";
          }
        }
      });
      var log = Math.log;
      var temperature2rgb = function(kelvin) {
        var temp = kelvin / 100;
        var r, g, b;
        if (temp < 66) {
          r = 255;
          g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
          b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
        } else {
          r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
          g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
          b = 255;
        }
        return [r, g, b, 1];
      };
      var temperature2rgb_1 = temperature2rgb;
      var unpack$v = utils.unpack;
      var round$6 = Math.round;
      var rgb2temperature = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgb = unpack$v(args, "rgb");
        var r = rgb[0], b = rgb[2];
        var minTemp = 1e3;
        var maxTemp = 4e4;
        var eps = 0.4;
        var temp;
        while (maxTemp - minTemp > eps) {
          temp = (maxTemp + minTemp) * 0.5;
          var rgb$12 = temperature2rgb_1(temp);
          if (rgb$12[2] / rgb$12[0] >= b / r) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round$6(temp);
      };
      var rgb2temperature_1 = rgb2temperature;
      Color_1.prototype.temp = Color_1.prototype.kelvin = Color_1.prototype.temperature = function() {
        return rgb2temperature_1(this._rgb);
      };
      chroma_1.temp = chroma_1.kelvin = chroma_1.temperature = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color_1, [null].concat(args, ["temp"])))();
      };
      input.format.temp = input.format.kelvin = input.format.temperature = temperature2rgb_1;
      var type$f = utils.type;
      Color_1.prototype.alpha = function(a, mutate) {
        if (mutate === void 0)
          mutate = false;
        if (a !== void 0 && type$f(a) === "number") {
          if (mutate) {
            this._rgb[3] = a;
            return this;
          }
          return new Color_1([this._rgb[0], this._rgb[1], this._rgb[2], a], "rgb");
        }
        return this._rgb[3];
      };
      Color_1.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };
      Color_1.prototype.darken = function(amount) {
        if (amount === void 0)
          amount = 1;
        var me = this;
        var lab = me.lab();
        lab[0] -= labConstants.Kn * amount;
        return new Color_1(lab, "lab").alpha(me.alpha(), true);
      };
      Color_1.prototype.brighten = function(amount) {
        if (amount === void 0)
          amount = 1;
        return this.darken(-amount);
      };
      Color_1.prototype.darker = Color_1.prototype.darken;
      Color_1.prototype.brighter = Color_1.prototype.brighten;
      Color_1.prototype.get = function(mc) {
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
          var i2 = mode.indexOf(channel);
          if (i2 > -1) {
            return src[i2];
          }
          throw new Error("unknown channel " + channel + " in mode " + mode);
        } else {
          return src;
        }
      };
      var type$g = utils.type;
      var pow$2 = Math.pow;
      var EPS = 1e-7;
      var MAX_ITER = 20;
      Color_1.prototype.luminance = function(lum) {
        if (lum !== void 0 && type$g(lum) === "number") {
          if (lum === 0) {
            return new Color_1([0, 0, 0, this._rgb[3]], "rgb");
          }
          if (lum === 1) {
            return new Color_1([255, 255, 255, this._rgb[3]], "rgb");
          }
          var cur_lum = this.luminance();
          var mode = "rgb";
          var max_iter = MAX_ITER;
          var test = function(low, high) {
            var mid = low.interpolate(high, 0.5, mode);
            var lm = mid.luminance();
            if (Math.abs(lum - lm) < EPS || !max_iter--) {
              return mid;
            }
            return lm > lum ? test(low, mid) : test(mid, high);
          };
          var rgb = (cur_lum > lum ? test(new Color_1([0, 0, 0]), this) : test(this, new Color_1([255, 255, 255]))).rgb();
          return new Color_1(rgb.concat([this._rgb[3]]));
        }
        return rgb2luminance.apply(void 0, this._rgb.slice(0, 3));
      };
      var rgb2luminance = function(r, g, b) {
        r = luminance_x(r);
        g = luminance_x(g);
        b = luminance_x(b);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
      };
      var luminance_x = function(x) {
        x /= 255;
        return x <= 0.03928 ? x / 12.92 : pow$2((x + 0.055) / 1.055, 2.4);
      };
      var interpolator = {};
      var type$h = utils.type;
      var mix = function(col1, col2, f) {
        if (f === void 0)
          f = 0.5;
        var rest = [], len = arguments.length - 3;
        while (len-- > 0)
          rest[len] = arguments[len + 3];
        var mode = rest[0] || "lrgb";
        if (!interpolator[mode] && !rest.length) {
          mode = Object.keys(interpolator)[0];
        }
        if (!interpolator[mode]) {
          throw new Error("interpolation mode " + mode + " is not defined");
        }
        if (type$h(col1) !== "object") {
          col1 = new Color_1(col1);
        }
        if (type$h(col2) !== "object") {
          col2 = new Color_1(col2);
        }
        return interpolator[mode](col1, col2, f).alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
      };
      Color_1.prototype.mix = Color_1.prototype.interpolate = function(col2, f) {
        if (f === void 0)
          f = 0.5;
        var rest = [], len = arguments.length - 2;
        while (len-- > 0)
          rest[len] = arguments[len + 2];
        return mix.apply(void 0, [this, col2, f].concat(rest));
      };
      Color_1.prototype.premultiply = function(mutate) {
        if (mutate === void 0)
          mutate = false;
        var rgb = this._rgb;
        var a = rgb[3];
        if (mutate) {
          this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];
          return this;
        } else {
          return new Color_1([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], "rgb");
        }
      };
      Color_1.prototype.saturate = function(amount) {
        if (amount === void 0)
          amount = 1;
        var me = this;
        var lch = me.lch();
        lch[1] += labConstants.Kn * amount;
        if (lch[1] < 0) {
          lch[1] = 0;
        }
        return new Color_1(lch, "lch").alpha(me.alpha(), true);
      };
      Color_1.prototype.desaturate = function(amount) {
        if (amount === void 0)
          amount = 1;
        return this.saturate(-amount);
      };
      var type$i = utils.type;
      Color_1.prototype.set = function(mc, value, mutate) {
        if (mutate === void 0)
          mutate = false;
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
          var i2 = mode.indexOf(channel);
          if (i2 > -1) {
            if (type$i(value) == "string") {
              switch (value.charAt(0)) {
                case "+":
                  src[i2] += +value;
                  break;
                case "-":
                  src[i2] += +value;
                  break;
                case "*":
                  src[i2] *= +value.substr(1);
                  break;
                case "/":
                  src[i2] /= +value.substr(1);
                  break;
                default:
                  src[i2] = +value;
              }
            } else if (type$i(value) === "number") {
              src[i2] = value;
            } else {
              throw new Error("unsupported value for Color.set");
            }
            var out = new Color_1(src, mode);
            if (mutate) {
              this._rgb = out._rgb;
              return this;
            }
            return out;
          }
          throw new Error("unknown channel " + channel + " in mode " + mode);
        } else {
          return src;
        }
      };
      var rgb$1 = function(col1, col2, f) {
        var xyz0 = col1._rgb;
        var xyz1 = col2._rgb;
        return new Color_1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "rgb");
      };
      interpolator.rgb = rgb$1;
      var sqrt$2 = Math.sqrt;
      var pow$3 = Math.pow;
      var lrgb = function(col1, col2, f) {
        var ref = col1._rgb;
        var x1 = ref[0];
        var y1 = ref[1];
        var z1 = ref[2];
        var ref$1 = col2._rgb;
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        return new Color_1(sqrt$2(pow$3(x1, 2) * (1 - f) + pow$3(x2, 2) * f), sqrt$2(pow$3(y1, 2) * (1 - f) + pow$3(y2, 2) * f), sqrt$2(pow$3(z1, 2) * (1 - f) + pow$3(z2, 2) * f), "rgb");
      };
      interpolator.lrgb = lrgb;
      var lab$1 = function(col1, col2, f) {
        var xyz0 = col1.lab();
        var xyz1 = col2.lab();
        return new Color_1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "lab");
      };
      interpolator.lab = lab$1;
      var _hsx = function(col1, col2, f, m) {
        var assign2, assign$1;
        var xyz0, xyz1;
        if (m === "hsl") {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m === "hsv") {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m === "hcg") {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m === "hsi") {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m === "lch" || m === "hcl") {
          m = "hcl";
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        }
        var hue0, hue1, sat0, sat1, lbv0, lbv1;
        if (m.substr(0, 1) === "h") {
          assign2 = xyz0, hue0 = assign2[0], sat0 = assign2[1], lbv0 = assign2[2];
          assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2];
        }
        var sat, hue, lbv, dh;
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh = hue1 + 360 - hue0;
          } else {
            dh = hue1 - hue0;
          }
          hue = hue0 + f * dh;
        } else if (!isNaN(hue0)) {
          hue = hue0;
          if ((lbv1 == 1 || lbv1 == 0) && m != "hsv") {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue = hue1;
          if ((lbv0 == 1 || lbv0 == 0) && m != "hsv") {
            sat = sat1;
          }
        } else {
          hue = Number.NaN;
        }
        if (sat === void 0) {
          sat = sat0 + f * (sat1 - sat0);
        }
        lbv = lbv0 + f * (lbv1 - lbv0);
        return new Color_1([hue, sat, lbv], m);
      };
      var lch$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "lch");
      };
      interpolator.lch = lch$1;
      interpolator.hcl = lch$1;
      var num$1 = function(col1, col2, f) {
        var c1 = col1.num();
        var c2 = col2.num();
        return new Color_1(c1 + f * (c2 - c1), "num");
      };
      interpolator.num = num$1;
      var hcg$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hcg");
      };
      interpolator.hcg = hcg$1;
      var hsi$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hsi");
      };
      interpolator.hsi = hsi$1;
      var hsl$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hsl");
      };
      interpolator.hsl = hsl$1;
      var hsv$1 = function(col1, col2, f) {
        return _hsx(col1, col2, f, "hsv");
      };
      interpolator.hsv = hsv$1;
      var clip_rgb$2 = utils.clip_rgb;
      var pow$4 = Math.pow;
      var sqrt$3 = Math.sqrt;
      var PI$1 = Math.PI;
      var cos$2 = Math.cos;
      var sin$1 = Math.sin;
      var atan2$1 = Math.atan2;
      var average = function(colors, mode, weights) {
        if (mode === void 0)
          mode = "lrgb";
        if (weights === void 0)
          weights = null;
        var l = colors.length;
        if (!weights) {
          weights = Array.from(new Array(l)).map(function() {
            return 1;
          });
        }
        var k = l / weights.reduce(function(a, b) {
          return a + b;
        });
        weights.forEach(function(w, i3) {
          weights[i3] *= k;
        });
        colors = colors.map(function(c) {
          return new Color_1(c);
        });
        if (mode === "lrgb") {
          return _average_lrgb(colors, weights);
        }
        var first = colors.shift();
        var xyz = first.get(mode);
        var cnt = [];
        var dx = 0;
        var dy = 0;
        for (var i2 = 0; i2 < xyz.length; i2++) {
          xyz[i2] = (xyz[i2] || 0) * weights[0];
          cnt.push(isNaN(xyz[i2]) ? 0 : weights[0]);
          if (mode.charAt(i2) === "h" && !isNaN(xyz[i2])) {
            var A = xyz[i2] / 180 * PI$1;
            dx += cos$2(A) * weights[0];
            dy += sin$1(A) * weights[0];
          }
        }
        var alpha = first.alpha() * weights[0];
        colors.forEach(function(c, ci) {
          var xyz2 = c.get(mode);
          alpha += c.alpha() * weights[ci + 1];
          for (var i3 = 0; i3 < xyz.length; i3++) {
            if (!isNaN(xyz2[i3])) {
              cnt[i3] += weights[ci + 1];
              if (mode.charAt(i3) === "h") {
                var A2 = xyz2[i3] / 180 * PI$1;
                dx += cos$2(A2) * weights[ci + 1];
                dy += sin$1(A2) * weights[ci + 1];
              } else {
                xyz[i3] += xyz2[i3] * weights[ci + 1];
              }
            }
          }
        });
        for (var i$12 = 0; i$12 < xyz.length; i$12++) {
          if (mode.charAt(i$12) === "h") {
            var A$1 = atan2$1(dy / cnt[i$12], dx / cnt[i$12]) / PI$1 * 180;
            while (A$1 < 0) {
              A$1 += 360;
            }
            while (A$1 >= 360) {
              A$1 -= 360;
            }
            xyz[i$12] = A$1;
          } else {
            xyz[i$12] = xyz[i$12] / cnt[i$12];
          }
        }
        alpha /= l;
        return new Color_1(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);
      };
      var _average_lrgb = function(colors, weights) {
        var l = colors.length;
        var xyz = [0, 0, 0, 0];
        for (var i2 = 0; i2 < colors.length; i2++) {
          var col = colors[i2];
          var f = weights[i2] / l;
          var rgb = col._rgb;
          xyz[0] += pow$4(rgb[0], 2) * f;
          xyz[1] += pow$4(rgb[1], 2) * f;
          xyz[2] += pow$4(rgb[2], 2) * f;
          xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt$3(xyz[0]);
        xyz[1] = sqrt$3(xyz[1]);
        xyz[2] = sqrt$3(xyz[2]);
        if (xyz[3] > 0.9999999) {
          xyz[3] = 1;
        }
        return new Color_1(clip_rgb$2(xyz));
      };
      var type$j = utils.type;
      var pow$5 = Math.pow;
      var scale = function(colors) {
        var _mode = "rgb";
        var _nacol = chroma_1("#ccc");
        var _spread = 0;
        var _domain = [0, 1];
        var _pos = [];
        var _padding = [0, 0];
        var _classes = false;
        var _colors = [];
        var _out = false;
        var _min = 0;
        var _max = 1;
        var _correctLightness = false;
        var _colorCache = {};
        var _useCache = true;
        var _gamma = 1;
        var setColors = function(colors2) {
          colors2 = colors2 || ["#fff", "#000"];
          if (colors2 && type$j(colors2) === "string" && chroma_1.brewer && chroma_1.brewer[colors2.toLowerCase()]) {
            colors2 = chroma_1.brewer[colors2.toLowerCase()];
          }
          if (type$j(colors2) === "array") {
            if (colors2.length === 1) {
              colors2 = [colors2[0], colors2[0]];
            }
            colors2 = colors2.slice(0);
            for (var c = 0; c < colors2.length; c++) {
              colors2[c] = chroma_1(colors2[c]);
            }
            _pos.length = 0;
            for (var c$1 = 0; c$1 < colors2.length; c$1++) {
              _pos.push(c$1 / (colors2.length - 1));
            }
          }
          resetCache();
          return _colors = colors2;
        };
        var getClass = function(value) {
          if (_classes != null) {
            var n = _classes.length - 1;
            var i2 = 0;
            while (i2 < n && value >= _classes[i2]) {
              i2++;
            }
            return i2 - 1;
          }
          return 0;
        };
        var tMapLightness = function(t) {
          return t;
        };
        var tMapDomain = function(t) {
          return t;
        };
        var getColor = function(val, bypassMap) {
          var col, t;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val) || val === null) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              var c = getClass(val);
              t = c / (_classes.length - 2);
            } else if (_max !== _min) {
              t = (val - _min) / (_max - _min);
            } else {
              t = 1;
            }
          } else {
            t = val;
          }
          t = tMapDomain(t);
          if (!bypassMap) {
            t = tMapLightness(t);
          }
          if (_gamma !== 1) {
            t = pow$5(t, _gamma);
          }
          t = _padding[0] + t * (1 - _padding[0] - _padding[1]);
          t = Math.min(1, Math.max(0, t));
          var k = Math.floor(t * 1e4);
          if (_useCache && _colorCache[k]) {
            col = _colorCache[k];
          } else {
            if (type$j(_colors) === "array") {
              for (var i2 = 0; i2 < _pos.length; i2++) {
                var p = _pos[i2];
                if (t <= p) {
                  col = _colors[i2];
                  break;
                }
                if (t >= p && i2 === _pos.length - 1) {
                  col = _colors[i2];
                  break;
                }
                if (t > p && t < _pos[i2 + 1]) {
                  t = (t - p) / (_pos[i2 + 1] - p);
                  col = chroma_1.interpolate(_colors[i2], _colors[i2 + 1], t, _mode);
                  break;
                }
              }
            } else if (type$j(_colors) === "function") {
              col = _colors(t);
            }
            if (_useCache) {
              _colorCache[k] = col;
            }
          }
          return col;
        };
        var resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors);
        var f = function(v) {
          var c = chroma_1(getColor(v));
          if (_out && c[_out]) {
            return c[_out]();
          } else {
            return c;
          }
        };
        f.classes = function(classes) {
          if (classes != null) {
            if (type$j(classes) === "array") {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              var d = chroma_1.analyze(_domain);
              if (classes === 0) {
                _classes = [d.min, d.max];
              } else {
                _classes = chroma_1.limits(d, "e", classes);
              }
            }
            return f;
          }
          return _classes;
        };
        f.domain = function(domain) {
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          var k = _colors.length;
          if (domain.length === k && _min !== _max) {
            for (var i2 = 0, list2 = Array.from(domain); i2 < list2.length; i2 += 1) {
              var d = list2[i2];
              _pos.push((d - _min) / (_max - _min));
            }
          } else {
            for (var c = 0; c < k; c++) {
              _pos.push(c / (k - 1));
            }
            if (domain.length > 2) {
              var tOut = domain.map(function(d2, i3) {
                return i3 / (domain.length - 1);
              });
              var tBreaks = domain.map(function(d2) {
                return (d2 - _min) / (_max - _min);
              });
              if (!tBreaks.every(function(val, i3) {
                return tOut[i3] === val;
              })) {
                tMapDomain = function(t) {
                  if (t <= 0 || t >= 1) {
                    return t;
                  }
                  var i3 = 0;
                  while (t >= tBreaks[i3 + 1]) {
                    i3++;
                  }
                  var f2 = (t - tBreaks[i3]) / (tBreaks[i3 + 1] - tBreaks[i3]);
                  var out = tOut[i3] + f2 * (tOut[i3 + 1] - tOut[i3]);
                  return out;
                };
              }
            }
          }
          _domain = [_min, _max];
          return f;
        };
        f.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f;
        };
        f.range = function(colors2, _pos2) {
          setColors(colors2, _pos2);
          return f;
        };
        f.out = function(_o) {
          _out = _o;
          return f;
        };
        f.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f;
        };
        f.correctLightness = function(v) {
          if (v == null) {
            v = true;
          }
          _correctLightness = v;
          resetCache();
          if (_correctLightness) {
            tMapLightness = function(t) {
              var L0 = getColor(0, true).lab()[0];
              var L1 = getColor(1, true).lab()[0];
              var pol = L0 > L1;
              var L_actual = getColor(t, true).lab()[0];
              var L_ideal = L0 + (L1 - L0) * t;
              var L_diff = L_actual - L_ideal;
              var t0 = 0;
              var t1 = 1;
              var max_iter = 20;
              while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t0 = t;
                    t += (t1 - t) * 0.5;
                  } else {
                    t1 = t;
                    t += (t0 - t) * 0.5;
                  }
                  L_actual = getColor(t, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t;
            };
          } else {
            tMapLightness = function(t) {
              return t;
            };
          }
          return f;
        };
        f.padding = function(p) {
          if (p != null) {
            if (type$j(p) === "number") {
              p = [p, p];
            }
            _padding = p;
            return f;
          } else {
            return _padding;
          }
        };
        f.colors = function(numColors, out) {
          if (arguments.length < 2) {
            out = "hex";
          }
          var result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f(0.5)];
          } else if (numColors > 1) {
            var dm = _domain[0];
            var dd = _domain[1] - dm;
            result = __range__(0, numColors, false).map(function(i3) {
              return f(dm + i3 / (numColors - 1) * dd);
            });
          } else {
            colors = [];
            var samples = [];
            if (_classes && _classes.length > 2) {
              for (var i2 = 1, end2 = _classes.length, asc = 1 <= end2; asc ? i2 < end2 : i2 > end2; asc ? i2++ : i2--) {
                samples.push((_classes[i2 - 1] + _classes[i2]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v) {
              return f(v);
            });
          }
          if (chroma_1[out]) {
            result = result.map(function(c) {
              return c[out]();
            });
          }
          return result;
        };
        f.cache = function(c) {
          if (c != null) {
            _useCache = c;
            return f;
          } else {
            return _useCache;
          }
        };
        f.gamma = function(g) {
          if (g != null) {
            _gamma = g;
            return f;
          } else {
            return _gamma;
          }
        };
        f.nodata = function(d) {
          if (d != null) {
            _nacol = chroma_1(d);
            return f;
          } else {
            return _nacol;
          }
        };
        return f;
      };
      function __range__(left2, right2, inclusive) {
        var range = [];
        var ascending = left2 < right2;
        var end2 = !inclusive ? right2 : ascending ? right2 + 1 : right2 - 1;
        for (var i2 = left2; ascending ? i2 < end2 : i2 > end2; ascending ? i2++ : i2--) {
          range.push(i2);
        }
        return range;
      }
      var bezier = function(colors) {
        var assign2, assign$1, assign$2;
        var I, lab0, lab1, lab2;
        colors = colors.map(function(c) {
          return new Color_1(c);
        });
        if (colors.length === 2) {
          assign2 = colors.map(function(c) {
            return c.lab();
          }), lab0 = assign2[0], lab1 = assign2[1];
          I = function(t) {
            var lab = [0, 1, 2].map(function(i2) {
              return lab0[i2] + t * (lab1[i2] - lab0[i2]);
            });
            return new Color_1(lab, "lab");
          };
        } else if (colors.length === 3) {
          assign$1 = colors.map(function(c) {
            return c.lab();
          }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2];
          I = function(t) {
            var lab = [0, 1, 2].map(function(i2) {
              return (1 - t) * (1 - t) * lab0[i2] + 2 * (1 - t) * t * lab1[i2] + t * t * lab2[i2];
            });
            return new Color_1(lab, "lab");
          };
        } else if (colors.length === 4) {
          var lab3;
          assign$2 = colors.map(function(c) {
            return c.lab();
          }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3];
          I = function(t) {
            var lab = [0, 1, 2].map(function(i2) {
              return (1 - t) * (1 - t) * (1 - t) * lab0[i2] + 3 * (1 - t) * (1 - t) * t * lab1[i2] + 3 * (1 - t) * t * t * lab2[i2] + t * t * t * lab3[i2];
            });
            return new Color_1(lab, "lab");
          };
        } else if (colors.length === 5) {
          var I0 = bezier(colors.slice(0, 3));
          var I1 = bezier(colors.slice(2, 5));
          I = function(t) {
            if (t < 0.5) {
              return I0(t * 2);
            } else {
              return I1((t - 0.5) * 2);
            }
          };
        }
        return I;
      };
      var bezier_1 = function(colors) {
        var f = bezier(colors);
        f.scale = function() {
          return scale(f);
        };
        return f;
      };
      var blend = function(bottom2, top2, mode) {
        if (!blend[mode]) {
          throw new Error("unknown blend mode " + mode);
        }
        return blend[mode](bottom2, top2);
      };
      var blend_f = function(f) {
        return function(bottom2, top2) {
          var c0 = chroma_1(top2).rgb();
          var c1 = chroma_1(bottom2).rgb();
          return chroma_1.rgb(f(c0, c1));
        };
      };
      var each = function(f) {
        return function(c0, c1) {
          var out = [];
          out[0] = f(c0[0], c1[0]);
          out[1] = f(c0[1], c1[1]);
          out[2] = f(c0[2], c1[2]);
          return out;
        };
      };
      var normal = function(a) {
        return a;
      };
      var multiply = function(a, b) {
        return a * b / 255;
      };
      var darken$1 = function(a, b) {
        return a > b ? b : a;
      };
      var lighten = function(a, b) {
        return a > b ? a : b;
      };
      var screen = function(a, b) {
        return 255 * (1 - (1 - a / 255) * (1 - b / 255));
      };
      var overlay = function(a, b) {
        return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
      };
      var burn = function(a, b) {
        return 255 * (1 - (1 - b / 255) / (a / 255));
      };
      var dodge = function(a, b) {
        if (a === 255) {
          return 255;
        }
        a = 255 * (b / 255) / (1 - a / 255);
        return a > 255 ? 255 : a;
      };
      blend.normal = blend_f(each(normal));
      blend.multiply = blend_f(each(multiply));
      blend.screen = blend_f(each(screen));
      blend.overlay = blend_f(each(overlay));
      blend.darken = blend_f(each(darken$1));
      blend.lighten = blend_f(each(lighten));
      blend.dodge = blend_f(each(dodge));
      blend.burn = blend_f(each(burn));
      var blend_1 = blend;
      var type$k = utils.type;
      var clip_rgb$3 = utils.clip_rgb;
      var TWOPI$2 = utils.TWOPI;
      var pow$6 = Math.pow;
      var sin$2 = Math.sin;
      var cos$3 = Math.cos;
      var cubehelix = function(start2, rotations, hue, gamma, lightness) {
        if (start2 === void 0)
          start2 = 300;
        if (rotations === void 0)
          rotations = -1.5;
        if (hue === void 0)
          hue = 1;
        if (gamma === void 0)
          gamma = 1;
        if (lightness === void 0)
          lightness = [0, 1];
        var dh = 0, dl;
        if (type$k(lightness) === "array") {
          dl = lightness[1] - lightness[0];
        } else {
          dl = 0;
          lightness = [lightness, lightness];
        }
        var f = function(fract) {
          var a = TWOPI$2 * ((start2 + 120) / 360 + rotations * fract);
          var l = pow$6(lightness[0] + dl * fract, gamma);
          var h = dh !== 0 ? hue[0] + fract * dh : hue;
          var amp = h * l * (1 - l) / 2;
          var cos_a = cos$3(a);
          var sin_a = sin$2(a);
          var r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          var g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          var b = l + amp * (1.97294 * cos_a);
          return chroma_1(clip_rgb$3([r * 255, g * 255, b * 255, 1]));
        };
        f.start = function(s) {
          if (s == null) {
            return start2;
          }
          start2 = s;
          return f;
        };
        f.rotations = function(r) {
          if (r == null) {
            return rotations;
          }
          rotations = r;
          return f;
        };
        f.gamma = function(g) {
          if (g == null) {
            return gamma;
          }
          gamma = g;
          return f;
        };
        f.hue = function(h) {
          if (h == null) {
            return hue;
          }
          hue = h;
          if (type$k(hue) === "array") {
            dh = hue[1] - hue[0];
            if (dh === 0) {
              hue = hue[1];
            }
          } else {
            dh = 0;
          }
          return f;
        };
        f.lightness = function(h) {
          if (h == null) {
            return lightness;
          }
          if (type$k(h) === "array") {
            lightness = h;
            dl = h[1] - h[0];
          } else {
            lightness = [h, h];
            dl = 0;
          }
          return f;
        };
        f.scale = function() {
          return chroma_1.scale(f);
        };
        f.hue(hue);
        return f;
      };
      var digits = "0123456789abcdef";
      var floor$2 = Math.floor;
      var random = Math.random;
      var random_1 = function() {
        var code = "#";
        for (var i2 = 0; i2 < 6; i2++) {
          code += digits.charAt(floor$2(random() * 16));
        }
        return new Color_1(code, "hex");
      };
      var log$1 = Math.log;
      var pow$7 = Math.pow;
      var floor$3 = Math.floor;
      var abs = Math.abs;
      var analyze = function(data, key2) {
        if (key2 === void 0)
          key2 = null;
        var r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (type(data) === "object") {
          data = Object.values(data);
        }
        data.forEach(function(val) {
          if (key2 && type(val) === "object") {
            val = val[key2];
          }
          if (val !== void 0 && val !== null && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) {
              r.min = val;
            }
            if (val > r.max) {
              r.max = val;
            }
            r.count += 1;
          }
        });
        r.domain = [r.min, r.max];
        r.limits = function(mode, num) {
          return limits(r, mode, num);
        };
        return r;
      };
      var limits = function(data, mode, num) {
        if (mode === void 0)
          mode = "equal";
        if (num === void 0)
          num = 7;
        if (type(data) == "array") {
          data = analyze(data);
        }
        var min3 = data.min;
        var max3 = data.max;
        var values = data.values.sort(function(a, b) {
          return a - b;
        });
        if (num === 1) {
          return [min3, max3];
        }
        var limits2 = [];
        if (mode.substr(0, 1) === "c") {
          limits2.push(min3);
          limits2.push(max3);
        }
        if (mode.substr(0, 1) === "e") {
          limits2.push(min3);
          for (var i2 = 1; i2 < num; i2++) {
            limits2.push(min3 + i2 / num * (max3 - min3));
          }
          limits2.push(max3);
        } else if (mode.substr(0, 1) === "l") {
          if (min3 <= 0) {
            throw new Error("Logarithmic scales are only possible for values > 0");
          }
          var min_log = Math.LOG10E * log$1(min3);
          var max_log = Math.LOG10E * log$1(max3);
          limits2.push(min3);
          for (var i$12 = 1; i$12 < num; i$12++) {
            limits2.push(pow$7(10, min_log + i$12 / num * (max_log - min_log)));
          }
          limits2.push(max3);
        } else if (mode.substr(0, 1) === "q") {
          limits2.push(min3);
          for (var i$2 = 1; i$2 < num; i$2++) {
            var p = (values.length - 1) * i$2 / num;
            var pb = floor$3(p);
            if (pb === p) {
              limits2.push(values[pb]);
            } else {
              var pr = p - pb;
              limits2.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
            }
          }
          limits2.push(max3);
        } else if (mode.substr(0, 1) === "k") {
          var cluster;
          var n = values.length;
          var assignments = new Array(n);
          var clusterSizes = new Array(num);
          var repeat = true;
          var nb_iters = 0;
          var centroids = null;
          centroids = [];
          centroids.push(min3);
          for (var i$3 = 1; i$3 < num; i$3++) {
            centroids.push(min3 + i$3 / num * (max3 - min3));
          }
          centroids.push(max3);
          while (repeat) {
            for (var j = 0; j < num; j++) {
              clusterSizes[j] = 0;
            }
            for (var i$4 = 0; i$4 < n; i$4++) {
              var value = values[i$4];
              var mindist = Number.MAX_VALUE;
              var best = void 0;
              for (var j$1 = 0; j$1 < num; j$1++) {
                var dist = abs(centroids[j$1] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j$1;
                }
                clusterSizes[best]++;
                assignments[i$4] = best;
              }
            }
            var newCentroids = new Array(num);
            for (var j$2 = 0; j$2 < num; j$2++) {
              newCentroids[j$2] = null;
            }
            for (var i$5 = 0; i$5 < n; i$5++) {
              cluster = assignments[i$5];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i$5];
              } else {
                newCentroids[cluster] += values[i$5];
              }
            }
            for (var j$3 = 0; j$3 < num; j$3++) {
              newCentroids[j$3] *= 1 / clusterSizes[j$3];
            }
            repeat = false;
            for (var j$4 = 0; j$4 < num; j$4++) {
              if (newCentroids[j$4] !== centroids[j$4]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          var kClusters = {};
          for (var j$5 = 0; j$5 < num; j$5++) {
            kClusters[j$5] = [];
          }
          for (var i$6 = 0; i$6 < n; i$6++) {
            cluster = assignments[i$6];
            kClusters[cluster].push(values[i$6]);
          }
          var tmpKMeansBreaks = [];
          for (var j$6 = 0; j$6 < num; j$6++) {
            tmpKMeansBreaks.push(kClusters[j$6][0]);
            tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
            return a - b;
          });
          limits2.push(tmpKMeansBreaks[0]);
          for (var i$7 = 1; i$7 < tmpKMeansBreaks.length; i$7 += 2) {
            var v = tmpKMeansBreaks[i$7];
            if (!isNaN(v) && limits2.indexOf(v) === -1) {
              limits2.push(v);
            }
          }
        }
        return limits2;
      };
      var analyze_1 = { analyze, limits };
      var contrast = function(a, b) {
        a = new Color_1(a);
        b = new Color_1(b);
        var l1 = a.luminance();
        var l2 = b.luminance();
        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
      };
      var sqrt$4 = Math.sqrt;
      var atan2$2 = Math.atan2;
      var abs$1 = Math.abs;
      var cos$4 = Math.cos;
      var PI$2 = Math.PI;
      var deltaE = function(a, b, L, C) {
        if (L === void 0)
          L = 1;
        if (C === void 0)
          C = 1;
        a = new Color_1(a);
        b = new Color_1(b);
        var ref = Array.from(a.lab());
        var L1 = ref[0];
        var a1 = ref[1];
        var b1 = ref[2];
        var ref$1 = Array.from(b.lab());
        var L2 = ref$1[0];
        var a2 = ref$1[1];
        var b2 = ref$1[2];
        var c1 = sqrt$4(a1 * a1 + b1 * b1);
        var c2 = sqrt$4(a2 * a2 + b2 * b2);
        var sl = L1 < 16 ? 0.511 : 0.040975 * L1 / (1 + 0.01765 * L1);
        var sc = 0.0638 * c1 / (1 + 0.0131 * c1) + 0.638;
        var h1 = c1 < 1e-6 ? 0 : atan2$2(b1, a1) * 180 / PI$2;
        while (h1 < 0) {
          h1 += 360;
        }
        while (h1 >= 360) {
          h1 -= 360;
        }
        var t = h1 >= 164 && h1 <= 345 ? 0.56 + abs$1(0.2 * cos$4(PI$2 * (h1 + 168) / 180)) : 0.36 + abs$1(0.4 * cos$4(PI$2 * (h1 + 35) / 180));
        var c4 = c1 * c1 * c1 * c1;
        var f = sqrt$4(c4 / (c4 + 1900));
        var sh = sc * (f * t + 1 - f);
        var delL = L1 - L2;
        var delC = c1 - c2;
        var delA = a1 - a2;
        var delB = b1 - b2;
        var dH2 = delA * delA + delB * delB - delC * delC;
        var v1 = delL / (L * sl);
        var v2 = delC / (C * sc);
        var v3 = sh;
        return sqrt$4(v1 * v1 + v2 * v2 + dH2 / (v3 * v3));
      };
      var distance = function(a, b, mode) {
        if (mode === void 0)
          mode = "lab";
        a = new Color_1(a);
        b = new Color_1(b);
        var l1 = a.get(mode);
        var l2 = b.get(mode);
        var sum_sq = 0;
        for (var i2 in l1) {
          var d = (l1[i2] || 0) - (l2[i2] || 0);
          sum_sq += d * d;
        }
        return Math.sqrt(sum_sq);
      };
      var valid = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        try {
          new (Function.prototype.bind.apply(Color_1, [null].concat(args)))();
          return true;
        } catch (e) {
          return false;
        }
      };
      var scales = {
        cool: function cool() {
          return scale([chroma_1.hsl(180, 1, 0.9), chroma_1.hsl(250, 0.7, 0.4)]);
        },
        hot: function hot() {
          return scale(["#000", "#f00", "#ff0", "#fff"], [0, 0.25, 0.75, 1]).mode("rgb");
        }
      };
      var colorbrewer = {
        OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
        PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
        BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
        Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
        BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
        YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
        YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
        Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
        RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
        Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
        YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
        Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
        GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
        Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
        YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
        PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
        Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
        PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
        Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
        Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
        RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
        RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
        PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
        PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
        RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
        BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
        RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
        PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
        Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
        Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
        Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
        Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
        Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
        Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
        Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
        Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
      };
      for (var i$1 = 0, list$1 = Object.keys(colorbrewer); i$1 < list$1.length; i$1 += 1) {
        var key = list$1[i$1];
        colorbrewer[key.toLowerCase()] = colorbrewer[key];
      }
      var colorbrewer_1 = colorbrewer;
      chroma_1.average = average;
      chroma_1.bezier = bezier_1;
      chroma_1.blend = blend_1;
      chroma_1.cubehelix = cubehelix;
      chroma_1.mix = chroma_1.interpolate = mix;
      chroma_1.random = random_1;
      chroma_1.scale = scale;
      chroma_1.analyze = analyze_1.analyze;
      chroma_1.contrast = contrast;
      chroma_1.deltaE = deltaE;
      chroma_1.distance = distance;
      chroma_1.limits = analyze_1.limits;
      chroma_1.valid = valid;
      chroma_1.scales = scales;
      chroma_1.colors = w3cx11_1;
      chroma_1.brewer = colorbrewer_1;
      var chroma_js = chroma_1;
      return chroma_js;
    });
  }
});

// node_modules/distinct-colors/lib/index.js
var require_lib = __commonJS({
  "node_modules/distinct-colors/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _utils = _interopRequireDefault(require_utils());
    var _deepClone = _interopRequireDefault(require_deepClone());
    var _deepEquals = _interopRequireDefault(require_deepEquals());
    var _chromaJs = _interopRequireDefault(require_chroma());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _createForOfIteratorHelper2(o) {
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (o = _unsupportedIterableToArray2(o))) {
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var it, normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = o[Symbol.iterator]();
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray2(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray2(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray2(o, minLen);
    }
    function _arrayLikeToArray2(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function ownKeys2(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys2(Object(source), true).forEach(function(key) {
            _defineProperty2(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var defaults = {
      count: 5,
      hueMin: 0,
      hueMax: 360,
      chromaMin: 0,
      chromaMax: 100,
      lightMin: 0,
      lightMax: 100,
      quality: 50,
      samples: 800
    };
    var getClosestIndex = function getClosestIndex2(colors, color) {
      var minDist = Number.MAX_SAFE_INTEGER;
      var nearest = 0;
      for (var idx = 0; idx < colors.length; idx += 1) {
        var sample = colors[idx];
        var dist = Math.sqrt(Math.pow(Math.abs(sample[0] - color[0]), 2) + Math.pow(Math.abs(sample[1] - color[1]), 2) + Math.pow(Math.abs(sample[2] - color[2]), 2));
        if (dist < minDist) {
          minDist = dist;
          nearest = idx;
        }
      }
      return nearest;
    };
    var checkColor = function checkColor2(lab, options) {
      var color = _chromaJs["default"].lab(lab);
      var hcl = color.hcl();
      var rgb = color.rgb();
      var compLab = _chromaJs["default"].rgb(rgb).lab();
      var labTolerance = 2;
      return hcl[0] >= options.hueMin && hcl[0] <= options.hueMax && hcl[1] >= options.chromaMin && hcl[1] <= options.chromaMax && hcl[2] >= options.lightMin && hcl[2] <= options.lightMax && compLab[0] >= lab[0] - labTolerance && compLab[0] <= lab[0] + labTolerance && compLab[1] >= lab[1] - labTolerance && compLab[1] <= lab[1] + labTolerance && compLab[2] >= lab[2] - labTolerance && compLab[2] <= lab[2] + labTolerance;
    };
    var sortByContrast = function sortByContrast2(colorList) {
      var unsortedColors = colorList.slice(0);
      var sortedColors = [unsortedColors.shift()];
      while (unsortedColors.length > 0) {
        var lastColor = sortedColors[sortedColors.length - 1];
        var nearest = 0;
        var maxDist = Number.MIN_SAFE_INTEGER;
        for (var i = 0; i < unsortedColors.length; i += 1) {
          var dist = Math.sqrt(Math.pow(Math.abs(lastColor[0] - unsortedColors[i][0]), 2) + Math.pow(Math.abs(lastColor[1] - unsortedColors[i][1]), 2) + Math.pow(Math.abs(lastColor[2] - unsortedColors[i][2]), 2));
          if (dist > maxDist) {
            maxDist = dist;
            nearest = i;
          }
        }
        sortedColors.push(unsortedColors.splice(nearest, 1)[0]);
      }
      return sortedColors;
    };
    var distinctColors = function distinctColors2() {
      var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var options = _objectSpread({}, defaults, {}, opts);
      if (options.count <= 0) {
        return [];
      }
      if (options.samples < options.count * 3) {
        options.samples = Math.ceil(options.count * 3);
      }
      var colors = [];
      var zonesProto = [];
      var samples = new Set();
      var rangeDivider = Math.ceil(Math.cbrt(options.samples));
      var hStep = (options.hueMax - options.hueMin) / rangeDivider;
      var cStep = (options.chromaMax - options.chromaMin) / rangeDivider;
      var lStep = (options.lightMax - options.lightMin) / rangeDivider;
      if (hStep <= 0) {
        throw new Error("hueMax must be greater than hueMin!");
      }
      if (cStep <= 0) {
        throw new Error("chromaMax must be greater than chromaMin!");
      }
      if (lStep <= 0) {
        throw new Error("lightMax must be greater than lightMin!");
      }
      for (var h = options.hueMin + hStep / 2; h <= options.hueMax; h += hStep) {
        for (var c = options.chromaMin + cStep / 2; c <= options.chromaMax; c += cStep) {
          for (var l = options.lightMin + lStep / 2; l <= options.lightMax; l += lStep) {
            var color = _chromaJs["default"].hcl(h, c, l).lab();
            if (checkColor(color, options)) {
              samples.add(color.toString());
            }
          }
        }
      }
      samples = Array.from(samples);
      samples = samples.map(function(i2) {
        return i2.split(",").map(function(j) {
          return parseFloat(j);
        });
      });
      if (samples.length < options.count) {
        throw new Error("Not enough samples to generate palette, increase sample count.");
      }
      var sliceSize = Math.floor(samples.length / options.count);
      for (var i = 0; i < samples.length; i += sliceSize) {
        colors.push(samples[i]);
        zonesProto.push([]);
        if (colors.length >= options.count) {
          break;
        }
      }
      for (var step = 1; step <= options.quality; step += 1) {
        var zones = (0, _deepClone["default"])(zonesProto);
        var sampleList = (0, _deepClone["default"])(samples);
        for (var _i = 0; _i < colors.length; _i += 1) {
          var idx = getClosestIndex(sampleList, colors[_i]);
          zones[_i].push(sampleList[idx]);
          sampleList.splice(idx, 1);
        }
        for (var _i2 = 0; _i2 < sampleList.length; _i2 += 1) {
          var sample = samples[_i2];
          var nearest = getClosestIndex(colors, sample);
          zones[nearest].push(samples[_i2]);
        }
        var lastColors = (0, _deepClone["default"])(colors);
        for (var _i3 = 0; _i3 < zones.length; _i3 += 1) {
          var zone = zones[_i3];
          var size = zone.length;
          var Ls = [];
          var As = [];
          var Bs = [];
          var _iterator = _createForOfIteratorHelper2(zone), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _sample = _step.value;
              Ls.push(_sample[0]);
              As.push(_sample[1]);
              Bs.push(_sample[2]);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          var lAvg = _utils["default"].sum(Ls) / size;
          var aAvg = _utils["default"].sum(As) / size;
          var bAvg = _utils["default"].sum(Bs) / size;
          colors[_i3] = [lAvg, aAvg, bAvg];
        }
        if ((0, _deepEquals["default"])(lastColors, colors)) {
          break;
        }
      }
      colors = sortByContrast(colors);
      return colors.map(function(lab) {
        return _chromaJs["default"].lab(lab);
      });
    };
    var _default = distinctColors;
    exports["default"] = _default;
  }
});

// node_modules/he/he.js
var require_he = __commonJS({
  "node_modules/he/he.js"(exports, module2) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports;
      var freeModule = typeof module2 == "object" && module2 && module2.exports == freeExports && module2;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root = freeGlobal;
      }
      var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      var regexAsciiWhitelist = /[\x01-\x7F]/g;
      var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
      var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
      var encodeMap = { "\xAD": "shy", "\u200C": "zwnj", "\u200D": "zwj", "\u200E": "lrm", "\u2063": "ic", "\u2062": "it", "\u2061": "af", "\u200F": "rlm", "\u200B": "ZeroWidthSpace", "\u2060": "NoBreak", "\u0311": "DownBreve", "\u20DB": "tdot", "\u20DC": "DotDot", "	": "Tab", "\n": "NewLine", "\u2008": "puncsp", "\u205F": "MediumSpace", "\u2009": "thinsp", "\u200A": "hairsp", "\u2004": "emsp13", "\u2002": "ensp", "\u2005": "emsp14", "\u2003": "emsp", "\u2007": "numsp", "\xA0": "nbsp", "\u205F\u200A": "ThickSpace", "\u203E": "oline", "_": "lowbar", "\u2010": "dash", "\u2013": "ndash", "\u2014": "mdash", "\u2015": "horbar", ",": "comma", ";": "semi", "\u204F": "bsemi", ":": "colon", "\u2A74": "Colone", "!": "excl", "\xA1": "iexcl", "?": "quest", "\xBF": "iquest", ".": "period", "\u2025": "nldr", "\u2026": "mldr", "\xB7": "middot", "'": "apos", "\u2018": "lsquo", "\u2019": "rsquo", "\u201A": "sbquo", "\u2039": "lsaquo", "\u203A": "rsaquo", '"': "quot", "\u201C": "ldquo", "\u201D": "rdquo", "\u201E": "bdquo", "\xAB": "laquo", "\xBB": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "\u2308": "lceil", "\u2309": "rceil", "\u230A": "lfloor", "\u230B": "rfloor", "\u2985": "lopar", "\u2986": "ropar", "\u298B": "lbrke", "\u298C": "rbrke", "\u298D": "lbrkslu", "\u298E": "rbrksld", "\u298F": "lbrksld", "\u2990": "rbrkslu", "\u2991": "langd", "\u2992": "rangd", "\u2993": "lparlt", "\u2994": "rpargt", "\u2995": "gtlPar", "\u2996": "ltrPar", "\u27E6": "lobrk", "\u27E7": "robrk", "\u27E8": "lang", "\u27E9": "rang", "\u27EA": "Lang", "\u27EB": "Rang", "\u27EC": "loang", "\u27ED": "roang", "\u2772": "lbbrk", "\u2773": "rbbrk", "\u2016": "Vert", "\xA7": "sect", "\xB6": "para", "@": "commat", "*": "ast", "/": "sol", "undefined": null, "&": "amp", "#": "num", "%": "percnt", "\u2030": "permil", "\u2031": "pertenk", "\u2020": "dagger", "\u2021": "Dagger", "\u2022": "bull", "\u2043": "hybull", "\u2032": "prime", "\u2033": "Prime", "\u2034": "tprime", "\u2057": "qprime", "\u2035": "bprime", "\u2041": "caret", "`": "grave", "\xB4": "acute", "\u02DC": "tilde", "^": "Hat", "\xAF": "macr", "\u02D8": "breve", "\u02D9": "dot", "\xA8": "die", "\u02DA": "ring", "\u02DD": "dblac", "\xB8": "cedil", "\u02DB": "ogon", "\u02C6": "circ", "\u02C7": "caron", "\xB0": "deg", "\xA9": "copy", "\xAE": "reg", "\u2117": "copysr", "\u2118": "wp", "\u211E": "rx", "\u2127": "mho", "\u2129": "iiota", "\u2190": "larr", "\u219A": "nlarr", "\u2192": "rarr", "\u219B": "nrarr", "\u2191": "uarr", "\u2193": "darr", "\u2194": "harr", "\u21AE": "nharr", "\u2195": "varr", "\u2196": "nwarr", "\u2197": "nearr", "\u2198": "searr", "\u2199": "swarr", "\u219D": "rarrw", "\u219D\u0338": "nrarrw", "\u219E": "Larr", "\u219F": "Uarr", "\u21A0": "Rarr", "\u21A1": "Darr", "\u21A2": "larrtl", "\u21A3": "rarrtl", "\u21A4": "mapstoleft", "\u21A5": "mapstoup", "\u21A6": "map", "\u21A7": "mapstodown", "\u21A9": "larrhk", "\u21AA": "rarrhk", "\u21AB": "larrlp", "\u21AC": "rarrlp", "\u21AD": "harrw", "\u21B0": "lsh", "\u21B1": "rsh", "\u21B2": "ldsh", "\u21B3": "rdsh", "\u21B5": "crarr", "\u21B6": "cularr", "\u21B7": "curarr", "\u21BA": "olarr", "\u21BB": "orarr", "\u21BC": "lharu", "\u21BD": "lhard", "\u21BE": "uharr", "\u21BF": "uharl", "\u21C0": "rharu", "\u21C1": "rhard", "\u21C2": "dharr", "\u21C3": "dharl", "\u21C4": "rlarr", "\u21C5": "udarr", "\u21C6": "lrarr", "\u21C7": "llarr", "\u21C8": "uuarr", "\u21C9": "rrarr", "\u21CA": "ddarr", "\u21CB": "lrhar", "\u21CC": "rlhar", "\u21D0": "lArr", "\u21CD": "nlArr", "\u21D1": "uArr", "\u21D2": "rArr", "\u21CF": "nrArr", "\u21D3": "dArr", "\u21D4": "iff", "\u21CE": "nhArr", "\u21D5": "vArr", "\u21D6": "nwArr", "\u21D7": "neArr", "\u21D8": "seArr", "\u21D9": "swArr", "\u21DA": "lAarr", "\u21DB": "rAarr", "\u21DD": "zigrarr", "\u21E4": "larrb", "\u21E5": "rarrb", "\u21F5": "duarr", "\u21FD": "loarr", "\u21FE": "roarr", "\u21FF": "hoarr", "\u2200": "forall", "\u2201": "comp", "\u2202": "part", "\u2202\u0338": "npart", "\u2203": "exist", "\u2204": "nexist", "\u2205": "empty", "\u2207": "Del", "\u2208": "in", "\u2209": "notin", "\u220B": "ni", "\u220C": "notni", "\u03F6": "bepsi", "\u220F": "prod", "\u2210": "coprod", "\u2211": "sum", "+": "plus", "\xB1": "pm", "\xF7": "div", "\xD7": "times", "<": "lt", "\u226E": "nlt", "<\u20D2": "nvlt", "=": "equals", "\u2260": "ne", "=\u20E5": "bne", "\u2A75": "Equal", ">": "gt", "\u226F": "ngt", ">\u20D2": "nvgt", "\xAC": "not", "|": "vert", "\xA6": "brvbar", "\u2212": "minus", "\u2213": "mp", "\u2214": "plusdo", "\u2044": "frasl", "\u2216": "setmn", "\u2217": "lowast", "\u2218": "compfn", "\u221A": "Sqrt", "\u221D": "prop", "\u221E": "infin", "\u221F": "angrt", "\u2220": "ang", "\u2220\u20D2": "nang", "\u2221": "angmsd", "\u2222": "angsph", "\u2223": "mid", "\u2224": "nmid", "\u2225": "par", "\u2226": "npar", "\u2227": "and", "\u2228": "or", "\u2229": "cap", "\u2229\uFE00": "caps", "\u222A": "cup", "\u222A\uFE00": "cups", "\u222B": "int", "\u222C": "Int", "\u222D": "tint", "\u2A0C": "qint", "\u222E": "oint", "\u222F": "Conint", "\u2230": "Cconint", "\u2231": "cwint", "\u2232": "cwconint", "\u2233": "awconint", "\u2234": "there4", "\u2235": "becaus", "\u2236": "ratio", "\u2237": "Colon", "\u2238": "minusd", "\u223A": "mDDot", "\u223B": "homtht", "\u223C": "sim", "\u2241": "nsim", "\u223C\u20D2": "nvsim", "\u223D": "bsim", "\u223D\u0331": "race", "\u223E": "ac", "\u223E\u0333": "acE", "\u223F": "acd", "\u2240": "wr", "\u2242": "esim", "\u2242\u0338": "nesim", "\u2243": "sime", "\u2244": "nsime", "\u2245": "cong", "\u2247": "ncong", "\u2246": "simne", "\u2248": "ap", "\u2249": "nap", "\u224A": "ape", "\u224B": "apid", "\u224B\u0338": "napid", "\u224C": "bcong", "\u224D": "CupCap", "\u226D": "NotCupCap", "\u224D\u20D2": "nvap", "\u224E": "bump", "\u224E\u0338": "nbump", "\u224F": "bumpe", "\u224F\u0338": "nbumpe", "\u2250": "doteq", "\u2250\u0338": "nedot", "\u2251": "eDot", "\u2252": "efDot", "\u2253": "erDot", "\u2254": "colone", "\u2255": "ecolon", "\u2256": "ecir", "\u2257": "cire", "\u2259": "wedgeq", "\u225A": "veeeq", "\u225C": "trie", "\u225F": "equest", "\u2261": "equiv", "\u2262": "nequiv", "\u2261\u20E5": "bnequiv", "\u2264": "le", "\u2270": "nle", "\u2264\u20D2": "nvle", "\u2265": "ge", "\u2271": "nge", "\u2265\u20D2": "nvge", "\u2266": "lE", "\u2266\u0338": "nlE", "\u2267": "gE", "\u2267\u0338": "ngE", "\u2268\uFE00": "lvnE", "\u2268": "lnE", "\u2269": "gnE", "\u2269\uFE00": "gvnE", "\u226A": "ll", "\u226A\u0338": "nLtv", "\u226A\u20D2": "nLt", "\u226B": "gg", "\u226B\u0338": "nGtv", "\u226B\u20D2": "nGt", "\u226C": "twixt", "\u2272": "lsim", "\u2274": "nlsim", "\u2273": "gsim", "\u2275": "ngsim", "\u2276": "lg", "\u2278": "ntlg", "\u2277": "gl", "\u2279": "ntgl", "\u227A": "pr", "\u2280": "npr", "\u227B": "sc", "\u2281": "nsc", "\u227C": "prcue", "\u22E0": "nprcue", "\u227D": "sccue", "\u22E1": "nsccue", "\u227E": "prsim", "\u227F": "scsim", "\u227F\u0338": "NotSucceedsTilde", "\u2282": "sub", "\u2284": "nsub", "\u2282\u20D2": "vnsub", "\u2283": "sup", "\u2285": "nsup", "\u2283\u20D2": "vnsup", "\u2286": "sube", "\u2288": "nsube", "\u2287": "supe", "\u2289": "nsupe", "\u228A\uFE00": "vsubne", "\u228A": "subne", "\u228B\uFE00": "vsupne", "\u228B": "supne", "\u228D": "cupdot", "\u228E": "uplus", "\u228F": "sqsub", "\u228F\u0338": "NotSquareSubset", "\u2290": "sqsup", "\u2290\u0338": "NotSquareSuperset", "\u2291": "sqsube", "\u22E2": "nsqsube", "\u2292": "sqsupe", "\u22E3": "nsqsupe", "\u2293": "sqcap", "\u2293\uFE00": "sqcaps", "\u2294": "sqcup", "\u2294\uFE00": "sqcups", "\u2295": "oplus", "\u2296": "ominus", "\u2297": "otimes", "\u2298": "osol", "\u2299": "odot", "\u229A": "ocir", "\u229B": "oast", "\u229D": "odash", "\u229E": "plusb", "\u229F": "minusb", "\u22A0": "timesb", "\u22A1": "sdotb", "\u22A2": "vdash", "\u22AC": "nvdash", "\u22A3": "dashv", "\u22A4": "top", "\u22A5": "bot", "\u22A7": "models", "\u22A8": "vDash", "\u22AD": "nvDash", "\u22A9": "Vdash", "\u22AE": "nVdash", "\u22AA": "Vvdash", "\u22AB": "VDash", "\u22AF": "nVDash", "\u22B0": "prurel", "\u22B2": "vltri", "\u22EA": "nltri", "\u22B3": "vrtri", "\u22EB": "nrtri", "\u22B4": "ltrie", "\u22EC": "nltrie", "\u22B4\u20D2": "nvltrie", "\u22B5": "rtrie", "\u22ED": "nrtrie", "\u22B5\u20D2": "nvrtrie", "\u22B6": "origof", "\u22B7": "imof", "\u22B8": "mumap", "\u22B9": "hercon", "\u22BA": "intcal", "\u22BB": "veebar", "\u22BD": "barvee", "\u22BE": "angrtvb", "\u22BF": "lrtri", "\u22C0": "Wedge", "\u22C1": "Vee", "\u22C2": "xcap", "\u22C3": "xcup", "\u22C4": "diam", "\u22C5": "sdot", "\u22C6": "Star", "\u22C7": "divonx", "\u22C8": "bowtie", "\u22C9": "ltimes", "\u22CA": "rtimes", "\u22CB": "lthree", "\u22CC": "rthree", "\u22CD": "bsime", "\u22CE": "cuvee", "\u22CF": "cuwed", "\u22D0": "Sub", "\u22D1": "Sup", "\u22D2": "Cap", "\u22D3": "Cup", "\u22D4": "fork", "\u22D5": "epar", "\u22D6": "ltdot", "\u22D7": "gtdot", "\u22D8": "Ll", "\u22D8\u0338": "nLl", "\u22D9": "Gg", "\u22D9\u0338": "nGg", "\u22DA\uFE00": "lesg", "\u22DA": "leg", "\u22DB": "gel", "\u22DB\uFE00": "gesl", "\u22DE": "cuepr", "\u22DF": "cuesc", "\u22E6": "lnsim", "\u22E7": "gnsim", "\u22E8": "prnsim", "\u22E9": "scnsim", "\u22EE": "vellip", "\u22EF": "ctdot", "\u22F0": "utdot", "\u22F1": "dtdot", "\u22F2": "disin", "\u22F3": "isinsv", "\u22F4": "isins", "\u22F5": "isindot", "\u22F5\u0338": "notindot", "\u22F6": "notinvc", "\u22F7": "notinvb", "\u22F9": "isinE", "\u22F9\u0338": "notinE", "\u22FA": "nisd", "\u22FB": "xnis", "\u22FC": "nis", "\u22FD": "notnivc", "\u22FE": "notnivb", "\u2305": "barwed", "\u2306": "Barwed", "\u230C": "drcrop", "\u230D": "dlcrop", "\u230E": "urcrop", "\u230F": "ulcrop", "\u2310": "bnot", "\u2312": "profline", "\u2313": "profsurf", "\u2315": "telrec", "\u2316": "target", "\u231C": "ulcorn", "\u231D": "urcorn", "\u231E": "dlcorn", "\u231F": "drcorn", "\u2322": "frown", "\u2323": "smile", "\u232D": "cylcty", "\u232E": "profalar", "\u2336": "topbot", "\u233D": "ovbar", "\u233F": "solbar", "\u237C": "angzarr", "\u23B0": "lmoust", "\u23B1": "rmoust", "\u23B4": "tbrk", "\u23B5": "bbrk", "\u23B6": "bbrktbrk", "\u23DC": "OverParenthesis", "\u23DD": "UnderParenthesis", "\u23DE": "OverBrace", "\u23DF": "UnderBrace", "\u23E2": "trpezium", "\u23E7": "elinters", "\u2423": "blank", "\u2500": "boxh", "\u2502": "boxv", "\u250C": "boxdr", "\u2510": "boxdl", "\u2514": "boxur", "\u2518": "boxul", "\u251C": "boxvr", "\u2524": "boxvl", "\u252C": "boxhd", "\u2534": "boxhu", "\u253C": "boxvh", "\u2550": "boxH", "\u2551": "boxV", "\u2552": "boxdR", "\u2553": "boxDr", "\u2554": "boxDR", "\u2555": "boxdL", "\u2556": "boxDl", "\u2557": "boxDL", "\u2558": "boxuR", "\u2559": "boxUr", "\u255A": "boxUR", "\u255B": "boxuL", "\u255C": "boxUl", "\u255D": "boxUL", "\u255E": "boxvR", "\u255F": "boxVr", "\u2560": "boxVR", "\u2561": "boxvL", "\u2562": "boxVl", "\u2563": "boxVL", "\u2564": "boxHd", "\u2565": "boxhD", "\u2566": "boxHD", "\u2567": "boxHu", "\u2568": "boxhU", "\u2569": "boxHU", "\u256A": "boxvH", "\u256B": "boxVh", "\u256C": "boxVH", "\u2580": "uhblk", "\u2584": "lhblk", "\u2588": "block", "\u2591": "blk14", "\u2592": "blk12", "\u2593": "blk34", "\u25A1": "squ", "\u25AA": "squf", "\u25AB": "EmptyVerySmallSquare", "\u25AD": "rect", "\u25AE": "marker", "\u25B1": "fltns", "\u25B3": "xutri", "\u25B4": "utrif", "\u25B5": "utri", "\u25B8": "rtrif", "\u25B9": "rtri", "\u25BD": "xdtri", "\u25BE": "dtrif", "\u25BF": "dtri", "\u25C2": "ltrif", "\u25C3": "ltri", "\u25CA": "loz", "\u25CB": "cir", "\u25EC": "tridot", "\u25EF": "xcirc", "\u25F8": "ultri", "\u25F9": "urtri", "\u25FA": "lltri", "\u25FB": "EmptySmallSquare", "\u25FC": "FilledSmallSquare", "\u2605": "starf", "\u2606": "star", "\u260E": "phone", "\u2640": "female", "\u2642": "male", "\u2660": "spades", "\u2663": "clubs", "\u2665": "hearts", "\u2666": "diams", "\u266A": "sung", "\u2713": "check", "\u2717": "cross", "\u2720": "malt", "\u2736": "sext", "\u2758": "VerticalSeparator", "\u27C8": "bsolhsub", "\u27C9": "suphsol", "\u27F5": "xlarr", "\u27F6": "xrarr", "\u27F7": "xharr", "\u27F8": "xlArr", "\u27F9": "xrArr", "\u27FA": "xhArr", "\u27FC": "xmap", "\u27FF": "dzigrarr", "\u2902": "nvlArr", "\u2903": "nvrArr", "\u2904": "nvHarr", "\u2905": "Map", "\u290C": "lbarr", "\u290D": "rbarr", "\u290E": "lBarr", "\u290F": "rBarr", "\u2910": "RBarr", "\u2911": "DDotrahd", "\u2912": "UpArrowBar", "\u2913": "DownArrowBar", "\u2916": "Rarrtl", "\u2919": "latail", "\u291A": "ratail", "\u291B": "lAtail", "\u291C": "rAtail", "\u291D": "larrfs", "\u291E": "rarrfs", "\u291F": "larrbfs", "\u2920": "rarrbfs", "\u2923": "nwarhk", "\u2924": "nearhk", "\u2925": "searhk", "\u2926": "swarhk", "\u2927": "nwnear", "\u2928": "toea", "\u2929": "tosa", "\u292A": "swnwar", "\u2933": "rarrc", "\u2933\u0338": "nrarrc", "\u2935": "cudarrr", "\u2936": "ldca", "\u2937": "rdca", "\u2938": "cudarrl", "\u2939": "larrpl", "\u293C": "curarrm", "\u293D": "cularrp", "\u2945": "rarrpl", "\u2948": "harrcir", "\u2949": "Uarrocir", "\u294A": "lurdshar", "\u294B": "ldrushar", "\u294E": "LeftRightVector", "\u294F": "RightUpDownVector", "\u2950": "DownLeftRightVector", "\u2951": "LeftUpDownVector", "\u2952": "LeftVectorBar", "\u2953": "RightVectorBar", "\u2954": "RightUpVectorBar", "\u2955": "RightDownVectorBar", "\u2956": "DownLeftVectorBar", "\u2957": "DownRightVectorBar", "\u2958": "LeftUpVectorBar", "\u2959": "LeftDownVectorBar", "\u295A": "LeftTeeVector", "\u295B": "RightTeeVector", "\u295C": "RightUpTeeVector", "\u295D": "RightDownTeeVector", "\u295E": "DownLeftTeeVector", "\u295F": "DownRightTeeVector", "\u2960": "LeftUpTeeVector", "\u2961": "LeftDownTeeVector", "\u2962": "lHar", "\u2963": "uHar", "\u2964": "rHar", "\u2965": "dHar", "\u2966": "luruhar", "\u2967": "ldrdhar", "\u2968": "ruluhar", "\u2969": "rdldhar", "\u296A": "lharul", "\u296B": "llhard", "\u296C": "rharul", "\u296D": "lrhard", "\u296E": "udhar", "\u296F": "duhar", "\u2970": "RoundImplies", "\u2971": "erarr", "\u2972": "simrarr", "\u2973": "larrsim", "\u2974": "rarrsim", "\u2975": "rarrap", "\u2976": "ltlarr", "\u2978": "gtrarr", "\u2979": "subrarr", "\u297B": "suplarr", "\u297C": "lfisht", "\u297D": "rfisht", "\u297E": "ufisht", "\u297F": "dfisht", "\u299A": "vzigzag", "\u299C": "vangrt", "\u299D": "angrtvbd", "\u29A4": "ange", "\u29A5": "range", "\u29A6": "dwangle", "\u29A7": "uwangle", "\u29A8": "angmsdaa", "\u29A9": "angmsdab", "\u29AA": "angmsdac", "\u29AB": "angmsdad", "\u29AC": "angmsdae", "\u29AD": "angmsdaf", "\u29AE": "angmsdag", "\u29AF": "angmsdah", "\u29B0": "bemptyv", "\u29B1": "demptyv", "\u29B2": "cemptyv", "\u29B3": "raemptyv", "\u29B4": "laemptyv", "\u29B5": "ohbar", "\u29B6": "omid", "\u29B7": "opar", "\u29B9": "operp", "\u29BB": "olcross", "\u29BC": "odsold", "\u29BE": "olcir", "\u29BF": "ofcir", "\u29C0": "olt", "\u29C1": "ogt", "\u29C2": "cirscir", "\u29C3": "cirE", "\u29C4": "solb", "\u29C5": "bsolb", "\u29C9": "boxbox", "\u29CD": "trisb", "\u29CE": "rtriltri", "\u29CF": "LeftTriangleBar", "\u29CF\u0338": "NotLeftTriangleBar", "\u29D0": "RightTriangleBar", "\u29D0\u0338": "NotRightTriangleBar", "\u29DC": "iinfin", "\u29DD": "infintie", "\u29DE": "nvinfin", "\u29E3": "eparsl", "\u29E4": "smeparsl", "\u29E5": "eqvparsl", "\u29EB": "lozf", "\u29F4": "RuleDelayed", "\u29F6": "dsol", "\u2A00": "xodot", "\u2A01": "xoplus", "\u2A02": "xotime", "\u2A04": "xuplus", "\u2A06": "xsqcup", "\u2A0D": "fpartint", "\u2A10": "cirfnint", "\u2A11": "awint", "\u2A12": "rppolint", "\u2A13": "scpolint", "\u2A14": "npolint", "\u2A15": "pointint", "\u2A16": "quatint", "\u2A17": "intlarhk", "\u2A22": "pluscir", "\u2A23": "plusacir", "\u2A24": "simplus", "\u2A25": "plusdu", "\u2A26": "plussim", "\u2A27": "plustwo", "\u2A29": "mcomma", "\u2A2A": "minusdu", "\u2A2D": "loplus", "\u2A2E": "roplus", "\u2A2F": "Cross", "\u2A30": "timesd", "\u2A31": "timesbar", "\u2A33": "smashp", "\u2A34": "lotimes", "\u2A35": "rotimes", "\u2A36": "otimesas", "\u2A37": "Otimes", "\u2A38": "odiv", "\u2A39": "triplus", "\u2A3A": "triminus", "\u2A3B": "tritime", "\u2A3C": "iprod", "\u2A3F": "amalg", "\u2A40": "capdot", "\u2A42": "ncup", "\u2A43": "ncap", "\u2A44": "capand", "\u2A45": "cupor", "\u2A46": "cupcap", "\u2A47": "capcup", "\u2A48": "cupbrcap", "\u2A49": "capbrcup", "\u2A4A": "cupcup", "\u2A4B": "capcap", "\u2A4C": "ccups", "\u2A4D": "ccaps", "\u2A50": "ccupssm", "\u2A53": "And", "\u2A54": "Or", "\u2A55": "andand", "\u2A56": "oror", "\u2A57": "orslope", "\u2A58": "andslope", "\u2A5A": "andv", "\u2A5B": "orv", "\u2A5C": "andd", "\u2A5D": "ord", "\u2A5F": "wedbar", "\u2A66": "sdote", "\u2A6A": "simdot", "\u2A6D": "congdot", "\u2A6D\u0338": "ncongdot", "\u2A6E": "easter", "\u2A6F": "apacir", "\u2A70": "apE", "\u2A70\u0338": "napE", "\u2A71": "eplus", "\u2A72": "pluse", "\u2A73": "Esim", "\u2A77": "eDDot", "\u2A78": "equivDD", "\u2A79": "ltcir", "\u2A7A": "gtcir", "\u2A7B": "ltquest", "\u2A7C": "gtquest", "\u2A7D": "les", "\u2A7D\u0338": "nles", "\u2A7E": "ges", "\u2A7E\u0338": "nges", "\u2A7F": "lesdot", "\u2A80": "gesdot", "\u2A81": "lesdoto", "\u2A82": "gesdoto", "\u2A83": "lesdotor", "\u2A84": "gesdotol", "\u2A85": "lap", "\u2A86": "gap", "\u2A87": "lne", "\u2A88": "gne", "\u2A89": "lnap", "\u2A8A": "gnap", "\u2A8B": "lEg", "\u2A8C": "gEl", "\u2A8D": "lsime", "\u2A8E": "gsime", "\u2A8F": "lsimg", "\u2A90": "gsiml", "\u2A91": "lgE", "\u2A92": "glE", "\u2A93": "lesges", "\u2A94": "gesles", "\u2A95": "els", "\u2A96": "egs", "\u2A97": "elsdot", "\u2A98": "egsdot", "\u2A99": "el", "\u2A9A": "eg", "\u2A9D": "siml", "\u2A9E": "simg", "\u2A9F": "simlE", "\u2AA0": "simgE", "\u2AA1": "LessLess", "\u2AA1\u0338": "NotNestedLessLess", "\u2AA2": "GreaterGreater", "\u2AA2\u0338": "NotNestedGreaterGreater", "\u2AA4": "glj", "\u2AA5": "gla", "\u2AA6": "ltcc", "\u2AA7": "gtcc", "\u2AA8": "lescc", "\u2AA9": "gescc", "\u2AAA": "smt", "\u2AAB": "lat", "\u2AAC": "smte", "\u2AAC\uFE00": "smtes", "\u2AAD": "late", "\u2AAD\uFE00": "lates", "\u2AAE": "bumpE", "\u2AAF": "pre", "\u2AAF\u0338": "npre", "\u2AB0": "sce", "\u2AB0\u0338": "nsce", "\u2AB3": "prE", "\u2AB4": "scE", "\u2AB5": "prnE", "\u2AB6": "scnE", "\u2AB7": "prap", "\u2AB8": "scap", "\u2AB9": "prnap", "\u2ABA": "scnap", "\u2ABB": "Pr", "\u2ABC": "Sc", "\u2ABD": "subdot", "\u2ABE": "supdot", "\u2ABF": "subplus", "\u2AC0": "supplus", "\u2AC1": "submult", "\u2AC2": "supmult", "\u2AC3": "subedot", "\u2AC4": "supedot", "\u2AC5": "subE", "\u2AC5\u0338": "nsubE", "\u2AC6": "supE", "\u2AC6\u0338": "nsupE", "\u2AC7": "subsim", "\u2AC8": "supsim", "\u2ACB\uFE00": "vsubnE", "\u2ACB": "subnE", "\u2ACC\uFE00": "vsupnE", "\u2ACC": "supnE", "\u2ACF": "csub", "\u2AD0": "csup", "\u2AD1": "csube", "\u2AD2": "csupe", "\u2AD3": "subsup", "\u2AD4": "supsub", "\u2AD5": "subsub", "\u2AD6": "supsup", "\u2AD7": "suphsub", "\u2AD8": "supdsub", "\u2AD9": "forkv", "\u2ADA": "topfork", "\u2ADB": "mlcp", "\u2AE4": "Dashv", "\u2AE6": "Vdashl", "\u2AE7": "Barv", "\u2AE8": "vBar", "\u2AE9": "vBarv", "\u2AEB": "Vbar", "\u2AEC": "Not", "\u2AED": "bNot", "\u2AEE": "rnmid", "\u2AEF": "cirmid", "\u2AF0": "midcir", "\u2AF1": "topcir", "\u2AF2": "nhpar", "\u2AF3": "parsim", "\u2AFD": "parsl", "\u2AFD\u20E5": "nparsl", "\u266D": "flat", "\u266E": "natur", "\u266F": "sharp", "\xA4": "curren", "\xA2": "cent", "$": "dollar", "\xA3": "pound", "\xA5": "yen", "\u20AC": "euro", "\xB9": "sup1", "\xBD": "half", "\u2153": "frac13", "\xBC": "frac14", "\u2155": "frac15", "\u2159": "frac16", "\u215B": "frac18", "\xB2": "sup2", "\u2154": "frac23", "\u2156": "frac25", "\xB3": "sup3", "\xBE": "frac34", "\u2157": "frac35", "\u215C": "frac38", "\u2158": "frac45", "\u215A": "frac56", "\u215D": "frac58", "\u215E": "frac78", "\u{1D4B6}": "ascr", "\u{1D552}": "aopf", "\u{1D51E}": "afr", "\u{1D538}": "Aopf", "\u{1D504}": "Afr", "\u{1D49C}": "Ascr", "\xAA": "ordf", "\xE1": "aacute", "\xC1": "Aacute", "\xE0": "agrave", "\xC0": "Agrave", "\u0103": "abreve", "\u0102": "Abreve", "\xE2": "acirc", "\xC2": "Acirc", "\xE5": "aring", "\xC5": "angst", "\xE4": "auml", "\xC4": "Auml", "\xE3": "atilde", "\xC3": "Atilde", "\u0105": "aogon", "\u0104": "Aogon", "\u0101": "amacr", "\u0100": "Amacr", "\xE6": "aelig", "\xC6": "AElig", "\u{1D4B7}": "bscr", "\u{1D553}": "bopf", "\u{1D51F}": "bfr", "\u{1D539}": "Bopf", "\u212C": "Bscr", "\u{1D505}": "Bfr", "\u{1D520}": "cfr", "\u{1D4B8}": "cscr", "\u{1D554}": "copf", "\u212D": "Cfr", "\u{1D49E}": "Cscr", "\u2102": "Copf", "\u0107": "cacute", "\u0106": "Cacute", "\u0109": "ccirc", "\u0108": "Ccirc", "\u010D": "ccaron", "\u010C": "Ccaron", "\u010B": "cdot", "\u010A": "Cdot", "\xE7": "ccedil", "\xC7": "Ccedil", "\u2105": "incare", "\u{1D521}": "dfr", "\u2146": "dd", "\u{1D555}": "dopf", "\u{1D4B9}": "dscr", "\u{1D49F}": "Dscr", "\u{1D507}": "Dfr", "\u2145": "DD", "\u{1D53B}": "Dopf", "\u010F": "dcaron", "\u010E": "Dcaron", "\u0111": "dstrok", "\u0110": "Dstrok", "\xF0": "eth", "\xD0": "ETH", "\u2147": "ee", "\u212F": "escr", "\u{1D522}": "efr", "\u{1D556}": "eopf", "\u2130": "Escr", "\u{1D508}": "Efr", "\u{1D53C}": "Eopf", "\xE9": "eacute", "\xC9": "Eacute", "\xE8": "egrave", "\xC8": "Egrave", "\xEA": "ecirc", "\xCA": "Ecirc", "\u011B": "ecaron", "\u011A": "Ecaron", "\xEB": "euml", "\xCB": "Euml", "\u0117": "edot", "\u0116": "Edot", "\u0119": "eogon", "\u0118": "Eogon", "\u0113": "emacr", "\u0112": "Emacr", "\u{1D523}": "ffr", "\u{1D557}": "fopf", "\u{1D4BB}": "fscr", "\u{1D509}": "Ffr", "\u{1D53D}": "Fopf", "\u2131": "Fscr", "\uFB00": "fflig", "\uFB03": "ffilig", "\uFB04": "ffllig", "\uFB01": "filig", "fj": "fjlig", "\uFB02": "fllig", "\u0192": "fnof", "\u210A": "gscr", "\u{1D558}": "gopf", "\u{1D524}": "gfr", "\u{1D4A2}": "Gscr", "\u{1D53E}": "Gopf", "\u{1D50A}": "Gfr", "\u01F5": "gacute", "\u011F": "gbreve", "\u011E": "Gbreve", "\u011D": "gcirc", "\u011C": "Gcirc", "\u0121": "gdot", "\u0120": "Gdot", "\u0122": "Gcedil", "\u{1D525}": "hfr", "\u210E": "planckh", "\u{1D4BD}": "hscr", "\u{1D559}": "hopf", "\u210B": "Hscr", "\u210C": "Hfr", "\u210D": "Hopf", "\u0125": "hcirc", "\u0124": "Hcirc", "\u210F": "hbar", "\u0127": "hstrok", "\u0126": "Hstrok", "\u{1D55A}": "iopf", "\u{1D526}": "ifr", "\u{1D4BE}": "iscr", "\u2148": "ii", "\u{1D540}": "Iopf", "\u2110": "Iscr", "\u2111": "Im", "\xED": "iacute", "\xCD": "Iacute", "\xEC": "igrave", "\xCC": "Igrave", "\xEE": "icirc", "\xCE": "Icirc", "\xEF": "iuml", "\xCF": "Iuml", "\u0129": "itilde", "\u0128": "Itilde", "\u0130": "Idot", "\u012F": "iogon", "\u012E": "Iogon", "\u012B": "imacr", "\u012A": "Imacr", "\u0133": "ijlig", "\u0132": "IJlig", "\u0131": "imath", "\u{1D4BF}": "jscr", "\u{1D55B}": "jopf", "\u{1D527}": "jfr", "\u{1D4A5}": "Jscr", "\u{1D50D}": "Jfr", "\u{1D541}": "Jopf", "\u0135": "jcirc", "\u0134": "Jcirc", "\u0237": "jmath", "\u{1D55C}": "kopf", "\u{1D4C0}": "kscr", "\u{1D528}": "kfr", "\u{1D4A6}": "Kscr", "\u{1D542}": "Kopf", "\u{1D50E}": "Kfr", "\u0137": "kcedil", "\u0136": "Kcedil", "\u{1D529}": "lfr", "\u{1D4C1}": "lscr", "\u2113": "ell", "\u{1D55D}": "lopf", "\u2112": "Lscr", "\u{1D50F}": "Lfr", "\u{1D543}": "Lopf", "\u013A": "lacute", "\u0139": "Lacute", "\u013E": "lcaron", "\u013D": "Lcaron", "\u013C": "lcedil", "\u013B": "Lcedil", "\u0142": "lstrok", "\u0141": "Lstrok", "\u0140": "lmidot", "\u013F": "Lmidot", "\u{1D52A}": "mfr", "\u{1D55E}": "mopf", "\u{1D4C2}": "mscr", "\u{1D510}": "Mfr", "\u{1D544}": "Mopf", "\u2133": "Mscr", "\u{1D52B}": "nfr", "\u{1D55F}": "nopf", "\u{1D4C3}": "nscr", "\u2115": "Nopf", "\u{1D4A9}": "Nscr", "\u{1D511}": "Nfr", "\u0144": "nacute", "\u0143": "Nacute", "\u0148": "ncaron", "\u0147": "Ncaron", "\xF1": "ntilde", "\xD1": "Ntilde", "\u0146": "ncedil", "\u0145": "Ncedil", "\u2116": "numero", "\u014B": "eng", "\u014A": "ENG", "\u{1D560}": "oopf", "\u{1D52C}": "ofr", "\u2134": "oscr", "\u{1D4AA}": "Oscr", "\u{1D512}": "Ofr", "\u{1D546}": "Oopf", "\xBA": "ordm", "\xF3": "oacute", "\xD3": "Oacute", "\xF2": "ograve", "\xD2": "Ograve", "\xF4": "ocirc", "\xD4": "Ocirc", "\xF6": "ouml", "\xD6": "Ouml", "\u0151": "odblac", "\u0150": "Odblac", "\xF5": "otilde", "\xD5": "Otilde", "\xF8": "oslash", "\xD8": "Oslash", "\u014D": "omacr", "\u014C": "Omacr", "\u0153": "oelig", "\u0152": "OElig", "\u{1D52D}": "pfr", "\u{1D4C5}": "pscr", "\u{1D561}": "popf", "\u2119": "Popf", "\u{1D513}": "Pfr", "\u{1D4AB}": "Pscr", "\u{1D562}": "qopf", "\u{1D52E}": "qfr", "\u{1D4C6}": "qscr", "\u{1D4AC}": "Qscr", "\u{1D514}": "Qfr", "\u211A": "Qopf", "\u0138": "kgreen", "\u{1D52F}": "rfr", "\u{1D563}": "ropf", "\u{1D4C7}": "rscr", "\u211B": "Rscr", "\u211C": "Re", "\u211D": "Ropf", "\u0155": "racute", "\u0154": "Racute", "\u0159": "rcaron", "\u0158": "Rcaron", "\u0157": "rcedil", "\u0156": "Rcedil", "\u{1D564}": "sopf", "\u{1D4C8}": "sscr", "\u{1D530}": "sfr", "\u{1D54A}": "Sopf", "\u{1D516}": "Sfr", "\u{1D4AE}": "Sscr", "\u24C8": "oS", "\u015B": "sacute", "\u015A": "Sacute", "\u015D": "scirc", "\u015C": "Scirc", "\u0161": "scaron", "\u0160": "Scaron", "\u015F": "scedil", "\u015E": "Scedil", "\xDF": "szlig", "\u{1D531}": "tfr", "\u{1D4C9}": "tscr", "\u{1D565}": "topf", "\u{1D4AF}": "Tscr", "\u{1D517}": "Tfr", "\u{1D54B}": "Topf", "\u0165": "tcaron", "\u0164": "Tcaron", "\u0163": "tcedil", "\u0162": "Tcedil", "\u2122": "trade", "\u0167": "tstrok", "\u0166": "Tstrok", "\u{1D4CA}": "uscr", "\u{1D566}": "uopf", "\u{1D532}": "ufr", "\u{1D54C}": "Uopf", "\u{1D518}": "Ufr", "\u{1D4B0}": "Uscr", "\xFA": "uacute", "\xDA": "Uacute", "\xF9": "ugrave", "\xD9": "Ugrave", "\u016D": "ubreve", "\u016C": "Ubreve", "\xFB": "ucirc", "\xDB": "Ucirc", "\u016F": "uring", "\u016E": "Uring", "\xFC": "uuml", "\xDC": "Uuml", "\u0171": "udblac", "\u0170": "Udblac", "\u0169": "utilde", "\u0168": "Utilde", "\u0173": "uogon", "\u0172": "Uogon", "\u016B": "umacr", "\u016A": "Umacr", "\u{1D533}": "vfr", "\u{1D567}": "vopf", "\u{1D4CB}": "vscr", "\u{1D519}": "Vfr", "\u{1D54D}": "Vopf", "\u{1D4B1}": "Vscr", "\u{1D568}": "wopf", "\u{1D4CC}": "wscr", "\u{1D534}": "wfr", "\u{1D4B2}": "Wscr", "\u{1D54E}": "Wopf", "\u{1D51A}": "Wfr", "\u0175": "wcirc", "\u0174": "Wcirc", "\u{1D535}": "xfr", "\u{1D4CD}": "xscr", "\u{1D569}": "xopf", "\u{1D54F}": "Xopf", "\u{1D51B}": "Xfr", "\u{1D4B3}": "Xscr", "\u{1D536}": "yfr", "\u{1D4CE}": "yscr", "\u{1D56A}": "yopf", "\u{1D4B4}": "Yscr", "\u{1D51C}": "Yfr", "\u{1D550}": "Yopf", "\xFD": "yacute", "\xDD": "Yacute", "\u0177": "ycirc", "\u0176": "Ycirc", "\xFF": "yuml", "\u0178": "Yuml", "\u{1D4CF}": "zscr", "\u{1D537}": "zfr", "\u{1D56B}": "zopf", "\u2128": "Zfr", "\u2124": "Zopf", "\u{1D4B5}": "Zscr", "\u017A": "zacute", "\u0179": "Zacute", "\u017E": "zcaron", "\u017D": "Zcaron", "\u017C": "zdot", "\u017B": "Zdot", "\u01B5": "imped", "\xFE": "thorn", "\xDE": "THORN", "\u0149": "napos", "\u03B1": "alpha", "\u0391": "Alpha", "\u03B2": "beta", "\u0392": "Beta", "\u03B3": "gamma", "\u0393": "Gamma", "\u03B4": "delta", "\u0394": "Delta", "\u03B5": "epsi", "\u03F5": "epsiv", "\u0395": "Epsilon", "\u03DD": "gammad", "\u03DC": "Gammad", "\u03B6": "zeta", "\u0396": "Zeta", "\u03B7": "eta", "\u0397": "Eta", "\u03B8": "theta", "\u03D1": "thetav", "\u0398": "Theta", "\u03B9": "iota", "\u0399": "Iota", "\u03BA": "kappa", "\u03F0": "kappav", "\u039A": "Kappa", "\u03BB": "lambda", "\u039B": "Lambda", "\u03BC": "mu", "\xB5": "micro", "\u039C": "Mu", "\u03BD": "nu", "\u039D": "Nu", "\u03BE": "xi", "\u039E": "Xi", "\u03BF": "omicron", "\u039F": "Omicron", "\u03C0": "pi", "\u03D6": "piv", "\u03A0": "Pi", "\u03C1": "rho", "\u03F1": "rhov", "\u03A1": "Rho", "\u03C3": "sigma", "\u03A3": "Sigma", "\u03C2": "sigmaf", "\u03C4": "tau", "\u03A4": "Tau", "\u03C5": "upsi", "\u03A5": "Upsilon", "\u03D2": "Upsi", "\u03C6": "phi", "\u03D5": "phiv", "\u03A6": "Phi", "\u03C7": "chi", "\u03A7": "Chi", "\u03C8": "psi", "\u03A8": "Psi", "\u03C9": "omega", "\u03A9": "ohm", "\u0430": "acy", "\u0410": "Acy", "\u0431": "bcy", "\u0411": "Bcy", "\u0432": "vcy", "\u0412": "Vcy", "\u0433": "gcy", "\u0413": "Gcy", "\u0453": "gjcy", "\u0403": "GJcy", "\u0434": "dcy", "\u0414": "Dcy", "\u0452": "djcy", "\u0402": "DJcy", "\u0435": "iecy", "\u0415": "IEcy", "\u0451": "iocy", "\u0401": "IOcy", "\u0454": "jukcy", "\u0404": "Jukcy", "\u0436": "zhcy", "\u0416": "ZHcy", "\u0437": "zcy", "\u0417": "Zcy", "\u0455": "dscy", "\u0405": "DScy", "\u0438": "icy", "\u0418": "Icy", "\u0456": "iukcy", "\u0406": "Iukcy", "\u0457": "yicy", "\u0407": "YIcy", "\u0439": "jcy", "\u0419": "Jcy", "\u0458": "jsercy", "\u0408": "Jsercy", "\u043A": "kcy", "\u041A": "Kcy", "\u045C": "kjcy", "\u040C": "KJcy", "\u043B": "lcy", "\u041B": "Lcy", "\u0459": "ljcy", "\u0409": "LJcy", "\u043C": "mcy", "\u041C": "Mcy", "\u043D": "ncy", "\u041D": "Ncy", "\u045A": "njcy", "\u040A": "NJcy", "\u043E": "ocy", "\u041E": "Ocy", "\u043F": "pcy", "\u041F": "Pcy", "\u0440": "rcy", "\u0420": "Rcy", "\u0441": "scy", "\u0421": "Scy", "\u0442": "tcy", "\u0422": "Tcy", "\u045B": "tshcy", "\u040B": "TSHcy", "\u0443": "ucy", "\u0423": "Ucy", "\u045E": "ubrcy", "\u040E": "Ubrcy", "\u0444": "fcy", "\u0424": "Fcy", "\u0445": "khcy", "\u0425": "KHcy", "\u0446": "tscy", "\u0426": "TScy", "\u0447": "chcy", "\u0427": "CHcy", "\u045F": "dzcy", "\u040F": "DZcy", "\u0448": "shcy", "\u0428": "SHcy", "\u0449": "shchcy", "\u0429": "SHCHcy", "\u044A": "hardcy", "\u042A": "HARDcy", "\u044B": "ycy", "\u042B": "Ycy", "\u044C": "softcy", "\u042C": "SOFTcy", "\u044D": "ecy", "\u042D": "Ecy", "\u044E": "yucy", "\u042E": "YUcy", "\u044F": "yacy", "\u042F": "YAcy", "\u2135": "aleph", "\u2136": "beth", "\u2137": "gimel", "\u2138": "daleth" };
      var regexEscape = /["&'<>`]/g;
      var escapeMap = {
        '"': "&quot;",
        "&": "&amp;",
        "'": "&#x27;",
        "<": "&lt;",
        ">": "&gt;",
        "`": "&#x60;"
      };
      var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
      var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
      var decodeMap = { "aacute": "\xE1", "Aacute": "\xC1", "abreve": "\u0103", "Abreve": "\u0102", "ac": "\u223E", "acd": "\u223F", "acE": "\u223E\u0333", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "acy": "\u0430", "Acy": "\u0410", "aelig": "\xE6", "AElig": "\xC6", "af": "\u2061", "afr": "\u{1D51E}", "Afr": "\u{1D504}", "agrave": "\xE0", "Agrave": "\xC0", "alefsym": "\u2135", "aleph": "\u2135", "alpha": "\u03B1", "Alpha": "\u0391", "amacr": "\u0101", "Amacr": "\u0100", "amalg": "\u2A3F", "amp": "&", "AMP": "&", "and": "\u2227", "And": "\u2A53", "andand": "\u2A55", "andd": "\u2A5C", "andslope": "\u2A58", "andv": "\u2A5A", "ang": "\u2220", "ange": "\u29A4", "angle": "\u2220", "angmsd": "\u2221", "angmsdaa": "\u29A8", "angmsdab": "\u29A9", "angmsdac": "\u29AA", "angmsdad": "\u29AB", "angmsdae": "\u29AC", "angmsdaf": "\u29AD", "angmsdag": "\u29AE", "angmsdah": "\u29AF", "angrt": "\u221F", "angrtvb": "\u22BE", "angrtvbd": "\u299D", "angsph": "\u2222", "angst": "\xC5", "angzarr": "\u237C", "aogon": "\u0105", "Aogon": "\u0104", "aopf": "\u{1D552}", "Aopf": "\u{1D538}", "ap": "\u2248", "apacir": "\u2A6F", "ape": "\u224A", "apE": "\u2A70", "apid": "\u224B", "apos": "'", "ApplyFunction": "\u2061", "approx": "\u2248", "approxeq": "\u224A", "aring": "\xE5", "Aring": "\xC5", "ascr": "\u{1D4B6}", "Ascr": "\u{1D49C}", "Assign": "\u2254", "ast": "*", "asymp": "\u2248", "asympeq": "\u224D", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "awconint": "\u2233", "awint": "\u2A11", "backcong": "\u224C", "backepsilon": "\u03F6", "backprime": "\u2035", "backsim": "\u223D", "backsimeq": "\u22CD", "Backslash": "\u2216", "Barv": "\u2AE7", "barvee": "\u22BD", "barwed": "\u2305", "Barwed": "\u2306", "barwedge": "\u2305", "bbrk": "\u23B5", "bbrktbrk": "\u23B6", "bcong": "\u224C", "bcy": "\u0431", "Bcy": "\u0411", "bdquo": "\u201E", "becaus": "\u2235", "because": "\u2235", "Because": "\u2235", "bemptyv": "\u29B0", "bepsi": "\u03F6", "bernou": "\u212C", "Bernoullis": "\u212C", "beta": "\u03B2", "Beta": "\u0392", "beth": "\u2136", "between": "\u226C", "bfr": "\u{1D51F}", "Bfr": "\u{1D505}", "bigcap": "\u22C2", "bigcirc": "\u25EF", "bigcup": "\u22C3", "bigodot": "\u2A00", "bigoplus": "\u2A01", "bigotimes": "\u2A02", "bigsqcup": "\u2A06", "bigstar": "\u2605", "bigtriangledown": "\u25BD", "bigtriangleup": "\u25B3", "biguplus": "\u2A04", "bigvee": "\u22C1", "bigwedge": "\u22C0", "bkarow": "\u290D", "blacklozenge": "\u29EB", "blacksquare": "\u25AA", "blacktriangle": "\u25B4", "blacktriangledown": "\u25BE", "blacktriangleleft": "\u25C2", "blacktriangleright": "\u25B8", "blank": "\u2423", "blk12": "\u2592", "blk14": "\u2591", "blk34": "\u2593", "block": "\u2588", "bne": "=\u20E5", "bnequiv": "\u2261\u20E5", "bnot": "\u2310", "bNot": "\u2AED", "bopf": "\u{1D553}", "Bopf": "\u{1D539}", "bot": "\u22A5", "bottom": "\u22A5", "bowtie": "\u22C8", "boxbox": "\u29C9", "boxdl": "\u2510", "boxdL": "\u2555", "boxDl": "\u2556", "boxDL": "\u2557", "boxdr": "\u250C", "boxdR": "\u2552", "boxDr": "\u2553", "boxDR": "\u2554", "boxh": "\u2500", "boxH": "\u2550", "boxhd": "\u252C", "boxhD": "\u2565", "boxHd": "\u2564", "boxHD": "\u2566", "boxhu": "\u2534", "boxhU": "\u2568", "boxHu": "\u2567", "boxHU": "\u2569", "boxminus": "\u229F", "boxplus": "\u229E", "boxtimes": "\u22A0", "boxul": "\u2518", "boxuL": "\u255B", "boxUl": "\u255C", "boxUL": "\u255D", "boxur": "\u2514", "boxuR": "\u2558", "boxUr": "\u2559", "boxUR": "\u255A", "boxv": "\u2502", "boxV": "\u2551", "boxvh": "\u253C", "boxvH": "\u256A", "boxVh": "\u256B", "boxVH": "\u256C", "boxvl": "\u2524", "boxvL": "\u2561", "boxVl": "\u2562", "boxVL": "\u2563", "boxvr": "\u251C", "boxvR": "\u255E", "boxVr": "\u255F", "boxVR": "\u2560", "bprime": "\u2035", "breve": "\u02D8", "Breve": "\u02D8", "brvbar": "\xA6", "bscr": "\u{1D4B7}", "Bscr": "\u212C", "bsemi": "\u204F", "bsim": "\u223D", "bsime": "\u22CD", "bsol": "\\", "bsolb": "\u29C5", "bsolhsub": "\u27C8", "bull": "\u2022", "bullet": "\u2022", "bump": "\u224E", "bumpe": "\u224F", "bumpE": "\u2AAE", "bumpeq": "\u224F", "Bumpeq": "\u224E", "cacute": "\u0107", "Cacute": "\u0106", "cap": "\u2229", "Cap": "\u22D2", "capand": "\u2A44", "capbrcup": "\u2A49", "capcap": "\u2A4B", "capcup": "\u2A47", "capdot": "\u2A40", "CapitalDifferentialD": "\u2145", "caps": "\u2229\uFE00", "caret": "\u2041", "caron": "\u02C7", "Cayleys": "\u212D", "ccaps": "\u2A4D", "ccaron": "\u010D", "Ccaron": "\u010C", "ccedil": "\xE7", "Ccedil": "\xC7", "ccirc": "\u0109", "Ccirc": "\u0108", "Cconint": "\u2230", "ccups": "\u2A4C", "ccupssm": "\u2A50", "cdot": "\u010B", "Cdot": "\u010A", "cedil": "\xB8", "Cedilla": "\xB8", "cemptyv": "\u29B2", "cent": "\xA2", "centerdot": "\xB7", "CenterDot": "\xB7", "cfr": "\u{1D520}", "Cfr": "\u212D", "chcy": "\u0447", "CHcy": "\u0427", "check": "\u2713", "checkmark": "\u2713", "chi": "\u03C7", "Chi": "\u03A7", "cir": "\u25CB", "circ": "\u02C6", "circeq": "\u2257", "circlearrowleft": "\u21BA", "circlearrowright": "\u21BB", "circledast": "\u229B", "circledcirc": "\u229A", "circleddash": "\u229D", "CircleDot": "\u2299", "circledR": "\xAE", "circledS": "\u24C8", "CircleMinus": "\u2296", "CirclePlus": "\u2295", "CircleTimes": "\u2297", "cire": "\u2257", "cirE": "\u29C3", "cirfnint": "\u2A10", "cirmid": "\u2AEF", "cirscir": "\u29C2", "ClockwiseContourIntegral": "\u2232", "CloseCurlyDoubleQuote": "\u201D", "CloseCurlyQuote": "\u2019", "clubs": "\u2663", "clubsuit": "\u2663", "colon": ":", "Colon": "\u2237", "colone": "\u2254", "Colone": "\u2A74", "coloneq": "\u2254", "comma": ",", "commat": "@", "comp": "\u2201", "compfn": "\u2218", "complement": "\u2201", "complexes": "\u2102", "cong": "\u2245", "congdot": "\u2A6D", "Congruent": "\u2261", "conint": "\u222E", "Conint": "\u222F", "ContourIntegral": "\u222E", "copf": "\u{1D554}", "Copf": "\u2102", "coprod": "\u2210", "Coproduct": "\u2210", "copy": "\xA9", "COPY": "\xA9", "copysr": "\u2117", "CounterClockwiseContourIntegral": "\u2233", "crarr": "\u21B5", "cross": "\u2717", "Cross": "\u2A2F", "cscr": "\u{1D4B8}", "Cscr": "\u{1D49E}", "csub": "\u2ACF", "csube": "\u2AD1", "csup": "\u2AD0", "csupe": "\u2AD2", "ctdot": "\u22EF", "cudarrl": "\u2938", "cudarrr": "\u2935", "cuepr": "\u22DE", "cuesc": "\u22DF", "cularr": "\u21B6", "cularrp": "\u293D", "cup": "\u222A", "Cup": "\u22D3", "cupbrcap": "\u2A48", "cupcap": "\u2A46", "CupCap": "\u224D", "cupcup": "\u2A4A", "cupdot": "\u228D", "cupor": "\u2A45", "cups": "\u222A\uFE00", "curarr": "\u21B7", "curarrm": "\u293C", "curlyeqprec": "\u22DE", "curlyeqsucc": "\u22DF", "curlyvee": "\u22CE", "curlywedge": "\u22CF", "curren": "\xA4", "curvearrowleft": "\u21B6", "curvearrowright": "\u21B7", "cuvee": "\u22CE", "cuwed": "\u22CF", "cwconint": "\u2232", "cwint": "\u2231", "cylcty": "\u232D", "dagger": "\u2020", "Dagger": "\u2021", "daleth": "\u2138", "darr": "\u2193", "dArr": "\u21D3", "Darr": "\u21A1", "dash": "\u2010", "dashv": "\u22A3", "Dashv": "\u2AE4", "dbkarow": "\u290F", "dblac": "\u02DD", "dcaron": "\u010F", "Dcaron": "\u010E", "dcy": "\u0434", "Dcy": "\u0414", "dd": "\u2146", "DD": "\u2145", "ddagger": "\u2021", "ddarr": "\u21CA", "DDotrahd": "\u2911", "ddotseq": "\u2A77", "deg": "\xB0", "Del": "\u2207", "delta": "\u03B4", "Delta": "\u0394", "demptyv": "\u29B1", "dfisht": "\u297F", "dfr": "\u{1D521}", "Dfr": "\u{1D507}", "dHar": "\u2965", "dharl": "\u21C3", "dharr": "\u21C2", "DiacriticalAcute": "\xB4", "DiacriticalDot": "\u02D9", "DiacriticalDoubleAcute": "\u02DD", "DiacriticalGrave": "`", "DiacriticalTilde": "\u02DC", "diam": "\u22C4", "diamond": "\u22C4", "Diamond": "\u22C4", "diamondsuit": "\u2666", "diams": "\u2666", "die": "\xA8", "DifferentialD": "\u2146", "digamma": "\u03DD", "disin": "\u22F2", "div": "\xF7", "divide": "\xF7", "divideontimes": "\u22C7", "divonx": "\u22C7", "djcy": "\u0452", "DJcy": "\u0402", "dlcorn": "\u231E", "dlcrop": "\u230D", "dollar": "$", "dopf": "\u{1D555}", "Dopf": "\u{1D53B}", "dot": "\u02D9", "Dot": "\xA8", "DotDot": "\u20DC", "doteq": "\u2250", "doteqdot": "\u2251", "DotEqual": "\u2250", "dotminus": "\u2238", "dotplus": "\u2214", "dotsquare": "\u22A1", "doublebarwedge": "\u2306", "DoubleContourIntegral": "\u222F", "DoubleDot": "\xA8", "DoubleDownArrow": "\u21D3", "DoubleLeftArrow": "\u21D0", "DoubleLeftRightArrow": "\u21D4", "DoubleLeftTee": "\u2AE4", "DoubleLongLeftArrow": "\u27F8", "DoubleLongLeftRightArrow": "\u27FA", "DoubleLongRightArrow": "\u27F9", "DoubleRightArrow": "\u21D2", "DoubleRightTee": "\u22A8", "DoubleUpArrow": "\u21D1", "DoubleUpDownArrow": "\u21D5", "DoubleVerticalBar": "\u2225", "downarrow": "\u2193", "Downarrow": "\u21D3", "DownArrow": "\u2193", "DownArrowBar": "\u2913", "DownArrowUpArrow": "\u21F5", "DownBreve": "\u0311", "downdownarrows": "\u21CA", "downharpoonleft": "\u21C3", "downharpoonright": "\u21C2", "DownLeftRightVector": "\u2950", "DownLeftTeeVector": "\u295E", "DownLeftVector": "\u21BD", "DownLeftVectorBar": "\u2956", "DownRightTeeVector": "\u295F", "DownRightVector": "\u21C1", "DownRightVectorBar": "\u2957", "DownTee": "\u22A4", "DownTeeArrow": "\u21A7", "drbkarow": "\u2910", "drcorn": "\u231F", "drcrop": "\u230C", "dscr": "\u{1D4B9}", "Dscr": "\u{1D49F}", "dscy": "\u0455", "DScy": "\u0405", "dsol": "\u29F6", "dstrok": "\u0111", "Dstrok": "\u0110", "dtdot": "\u22F1", "dtri": "\u25BF", "dtrif": "\u25BE", "duarr": "\u21F5", "duhar": "\u296F", "dwangle": "\u29A6", "dzcy": "\u045F", "DZcy": "\u040F", "dzigrarr": "\u27FF", "eacute": "\xE9", "Eacute": "\xC9", "easter": "\u2A6E", "ecaron": "\u011B", "Ecaron": "\u011A", "ecir": "\u2256", "ecirc": "\xEA", "Ecirc": "\xCA", "ecolon": "\u2255", "ecy": "\u044D", "Ecy": "\u042D", "eDDot": "\u2A77", "edot": "\u0117", "eDot": "\u2251", "Edot": "\u0116", "ee": "\u2147", "efDot": "\u2252", "efr": "\u{1D522}", "Efr": "\u{1D508}", "eg": "\u2A9A", "egrave": "\xE8", "Egrave": "\xC8", "egs": "\u2A96", "egsdot": "\u2A98", "el": "\u2A99", "Element": "\u2208", "elinters": "\u23E7", "ell": "\u2113", "els": "\u2A95", "elsdot": "\u2A97", "emacr": "\u0113", "Emacr": "\u0112", "empty": "\u2205", "emptyset": "\u2205", "EmptySmallSquare": "\u25FB", "emptyv": "\u2205", "EmptyVerySmallSquare": "\u25AB", "emsp": "\u2003", "emsp13": "\u2004", "emsp14": "\u2005", "eng": "\u014B", "ENG": "\u014A", "ensp": "\u2002", "eogon": "\u0119", "Eogon": "\u0118", "eopf": "\u{1D556}", "Eopf": "\u{1D53C}", "epar": "\u22D5", "eparsl": "\u29E3", "eplus": "\u2A71", "epsi": "\u03B5", "epsilon": "\u03B5", "Epsilon": "\u0395", "epsiv": "\u03F5", "eqcirc": "\u2256", "eqcolon": "\u2255", "eqsim": "\u2242", "eqslantgtr": "\u2A96", "eqslantless": "\u2A95", "Equal": "\u2A75", "equals": "=", "EqualTilde": "\u2242", "equest": "\u225F", "Equilibrium": "\u21CC", "equiv": "\u2261", "equivDD": "\u2A78", "eqvparsl": "\u29E5", "erarr": "\u2971", "erDot": "\u2253", "escr": "\u212F", "Escr": "\u2130", "esdot": "\u2250", "esim": "\u2242", "Esim": "\u2A73", "eta": "\u03B7", "Eta": "\u0397", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "euro": "\u20AC", "excl": "!", "exist": "\u2203", "Exists": "\u2203", "expectation": "\u2130", "exponentiale": "\u2147", "ExponentialE": "\u2147", "fallingdotseq": "\u2252", "fcy": "\u0444", "Fcy": "\u0424", "female": "\u2640", "ffilig": "\uFB03", "fflig": "\uFB00", "ffllig": "\uFB04", "ffr": "\u{1D523}", "Ffr": "\u{1D509}", "filig": "\uFB01", "FilledSmallSquare": "\u25FC", "FilledVerySmallSquare": "\u25AA", "fjlig": "fj", "flat": "\u266D", "fllig": "\uFB02", "fltns": "\u25B1", "fnof": "\u0192", "fopf": "\u{1D557}", "Fopf": "\u{1D53D}", "forall": "\u2200", "ForAll": "\u2200", "fork": "\u22D4", "forkv": "\u2AD9", "Fouriertrf": "\u2131", "fpartint": "\u2A0D", "frac12": "\xBD", "frac13": "\u2153", "frac14": "\xBC", "frac15": "\u2155", "frac16": "\u2159", "frac18": "\u215B", "frac23": "\u2154", "frac25": "\u2156", "frac34": "\xBE", "frac35": "\u2157", "frac38": "\u215C", "frac45": "\u2158", "frac56": "\u215A", "frac58": "\u215D", "frac78": "\u215E", "frasl": "\u2044", "frown": "\u2322", "fscr": "\u{1D4BB}", "Fscr": "\u2131", "gacute": "\u01F5", "gamma": "\u03B3", "Gamma": "\u0393", "gammad": "\u03DD", "Gammad": "\u03DC", "gap": "\u2A86", "gbreve": "\u011F", "Gbreve": "\u011E", "Gcedil": "\u0122", "gcirc": "\u011D", "Gcirc": "\u011C", "gcy": "\u0433", "Gcy": "\u0413", "gdot": "\u0121", "Gdot": "\u0120", "ge": "\u2265", "gE": "\u2267", "gel": "\u22DB", "gEl": "\u2A8C", "geq": "\u2265", "geqq": "\u2267", "geqslant": "\u2A7E", "ges": "\u2A7E", "gescc": "\u2AA9", "gesdot": "\u2A80", "gesdoto": "\u2A82", "gesdotol": "\u2A84", "gesl": "\u22DB\uFE00", "gesles": "\u2A94", "gfr": "\u{1D524}", "Gfr": "\u{1D50A}", "gg": "\u226B", "Gg": "\u22D9", "ggg": "\u22D9", "gimel": "\u2137", "gjcy": "\u0453", "GJcy": "\u0403", "gl": "\u2277", "gla": "\u2AA5", "glE": "\u2A92", "glj": "\u2AA4", "gnap": "\u2A8A", "gnapprox": "\u2A8A", "gne": "\u2A88", "gnE": "\u2269", "gneq": "\u2A88", "gneqq": "\u2269", "gnsim": "\u22E7", "gopf": "\u{1D558}", "Gopf": "\u{1D53E}", "grave": "`", "GreaterEqual": "\u2265", "GreaterEqualLess": "\u22DB", "GreaterFullEqual": "\u2267", "GreaterGreater": "\u2AA2", "GreaterLess": "\u2277", "GreaterSlantEqual": "\u2A7E", "GreaterTilde": "\u2273", "gscr": "\u210A", "Gscr": "\u{1D4A2}", "gsim": "\u2273", "gsime": "\u2A8E", "gsiml": "\u2A90", "gt": ">", "Gt": "\u226B", "GT": ">", "gtcc": "\u2AA7", "gtcir": "\u2A7A", "gtdot": "\u22D7", "gtlPar": "\u2995", "gtquest": "\u2A7C", "gtrapprox": "\u2A86", "gtrarr": "\u2978", "gtrdot": "\u22D7", "gtreqless": "\u22DB", "gtreqqless": "\u2A8C", "gtrless": "\u2277", "gtrsim": "\u2273", "gvertneqq": "\u2269\uFE00", "gvnE": "\u2269\uFE00", "Hacek": "\u02C7", "hairsp": "\u200A", "half": "\xBD", "hamilt": "\u210B", "hardcy": "\u044A", "HARDcy": "\u042A", "harr": "\u2194", "hArr": "\u21D4", "harrcir": "\u2948", "harrw": "\u21AD", "Hat": "^", "hbar": "\u210F", "hcirc": "\u0125", "Hcirc": "\u0124", "hearts": "\u2665", "heartsuit": "\u2665", "hellip": "\u2026", "hercon": "\u22B9", "hfr": "\u{1D525}", "Hfr": "\u210C", "HilbertSpace": "\u210B", "hksearow": "\u2925", "hkswarow": "\u2926", "hoarr": "\u21FF", "homtht": "\u223B", "hookleftarrow": "\u21A9", "hookrightarrow": "\u21AA", "hopf": "\u{1D559}", "Hopf": "\u210D", "horbar": "\u2015", "HorizontalLine": "\u2500", "hscr": "\u{1D4BD}", "Hscr": "\u210B", "hslash": "\u210F", "hstrok": "\u0127", "Hstrok": "\u0126", "HumpDownHump": "\u224E", "HumpEqual": "\u224F", "hybull": "\u2043", "hyphen": "\u2010", "iacute": "\xED", "Iacute": "\xCD", "ic": "\u2063", "icirc": "\xEE", "Icirc": "\xCE", "icy": "\u0438", "Icy": "\u0418", "Idot": "\u0130", "iecy": "\u0435", "IEcy": "\u0415", "iexcl": "\xA1", "iff": "\u21D4", "ifr": "\u{1D526}", "Ifr": "\u2111", "igrave": "\xEC", "Igrave": "\xCC", "ii": "\u2148", "iiiint": "\u2A0C", "iiint": "\u222D", "iinfin": "\u29DC", "iiota": "\u2129", "ijlig": "\u0133", "IJlig": "\u0132", "Im": "\u2111", "imacr": "\u012B", "Imacr": "\u012A", "image": "\u2111", "ImaginaryI": "\u2148", "imagline": "\u2110", "imagpart": "\u2111", "imath": "\u0131", "imof": "\u22B7", "imped": "\u01B5", "Implies": "\u21D2", "in": "\u2208", "incare": "\u2105", "infin": "\u221E", "infintie": "\u29DD", "inodot": "\u0131", "int": "\u222B", "Int": "\u222C", "intcal": "\u22BA", "integers": "\u2124", "Integral": "\u222B", "intercal": "\u22BA", "Intersection": "\u22C2", "intlarhk": "\u2A17", "intprod": "\u2A3C", "InvisibleComma": "\u2063", "InvisibleTimes": "\u2062", "iocy": "\u0451", "IOcy": "\u0401", "iogon": "\u012F", "Iogon": "\u012E", "iopf": "\u{1D55A}", "Iopf": "\u{1D540}", "iota": "\u03B9", "Iota": "\u0399", "iprod": "\u2A3C", "iquest": "\xBF", "iscr": "\u{1D4BE}", "Iscr": "\u2110", "isin": "\u2208", "isindot": "\u22F5", "isinE": "\u22F9", "isins": "\u22F4", "isinsv": "\u22F3", "isinv": "\u2208", "it": "\u2062", "itilde": "\u0129", "Itilde": "\u0128", "iukcy": "\u0456", "Iukcy": "\u0406", "iuml": "\xEF", "Iuml": "\xCF", "jcirc": "\u0135", "Jcirc": "\u0134", "jcy": "\u0439", "Jcy": "\u0419", "jfr": "\u{1D527}", "Jfr": "\u{1D50D}", "jmath": "\u0237", "jopf": "\u{1D55B}", "Jopf": "\u{1D541}", "jscr": "\u{1D4BF}", "Jscr": "\u{1D4A5}", "jsercy": "\u0458", "Jsercy": "\u0408", "jukcy": "\u0454", "Jukcy": "\u0404", "kappa": "\u03BA", "Kappa": "\u039A", "kappav": "\u03F0", "kcedil": "\u0137", "Kcedil": "\u0136", "kcy": "\u043A", "Kcy": "\u041A", "kfr": "\u{1D528}", "Kfr": "\u{1D50E}", "kgreen": "\u0138", "khcy": "\u0445", "KHcy": "\u0425", "kjcy": "\u045C", "KJcy": "\u040C", "kopf": "\u{1D55C}", "Kopf": "\u{1D542}", "kscr": "\u{1D4C0}", "Kscr": "\u{1D4A6}", "lAarr": "\u21DA", "lacute": "\u013A", "Lacute": "\u0139", "laemptyv": "\u29B4", "lagran": "\u2112", "lambda": "\u03BB", "Lambda": "\u039B", "lang": "\u27E8", "Lang": "\u27EA", "langd": "\u2991", "langle": "\u27E8", "lap": "\u2A85", "Laplacetrf": "\u2112", "laquo": "\xAB", "larr": "\u2190", "lArr": "\u21D0", "Larr": "\u219E", "larrb": "\u21E4", "larrbfs": "\u291F", "larrfs": "\u291D", "larrhk": "\u21A9", "larrlp": "\u21AB", "larrpl": "\u2939", "larrsim": "\u2973", "larrtl": "\u21A2", "lat": "\u2AAB", "latail": "\u2919", "lAtail": "\u291B", "late": "\u2AAD", "lates": "\u2AAD\uFE00", "lbarr": "\u290C", "lBarr": "\u290E", "lbbrk": "\u2772", "lbrace": "{", "lbrack": "[", "lbrke": "\u298B", "lbrksld": "\u298F", "lbrkslu": "\u298D", "lcaron": "\u013E", "Lcaron": "\u013D", "lcedil": "\u013C", "Lcedil": "\u013B", "lceil": "\u2308", "lcub": "{", "lcy": "\u043B", "Lcy": "\u041B", "ldca": "\u2936", "ldquo": "\u201C", "ldquor": "\u201E", "ldrdhar": "\u2967", "ldrushar": "\u294B", "ldsh": "\u21B2", "le": "\u2264", "lE": "\u2266", "LeftAngleBracket": "\u27E8", "leftarrow": "\u2190", "Leftarrow": "\u21D0", "LeftArrow": "\u2190", "LeftArrowBar": "\u21E4", "LeftArrowRightArrow": "\u21C6", "leftarrowtail": "\u21A2", "LeftCeiling": "\u2308", "LeftDoubleBracket": "\u27E6", "LeftDownTeeVector": "\u2961", "LeftDownVector": "\u21C3", "LeftDownVectorBar": "\u2959", "LeftFloor": "\u230A", "leftharpoondown": "\u21BD", "leftharpoonup": "\u21BC", "leftleftarrows": "\u21C7", "leftrightarrow": "\u2194", "Leftrightarrow": "\u21D4", "LeftRightArrow": "\u2194", "leftrightarrows": "\u21C6", "leftrightharpoons": "\u21CB", "leftrightsquigarrow": "\u21AD", "LeftRightVector": "\u294E", "LeftTee": "\u22A3", "LeftTeeArrow": "\u21A4", "LeftTeeVector": "\u295A", "leftthreetimes": "\u22CB", "LeftTriangle": "\u22B2", "LeftTriangleBar": "\u29CF", "LeftTriangleEqual": "\u22B4", "LeftUpDownVector": "\u2951", "LeftUpTeeVector": "\u2960", "LeftUpVector": "\u21BF", "LeftUpVectorBar": "\u2958", "LeftVector": "\u21BC", "LeftVectorBar": "\u2952", "leg": "\u22DA", "lEg": "\u2A8B", "leq": "\u2264", "leqq": "\u2266", "leqslant": "\u2A7D", "les": "\u2A7D", "lescc": "\u2AA8", "lesdot": "\u2A7F", "lesdoto": "\u2A81", "lesdotor": "\u2A83", "lesg": "\u22DA\uFE00", "lesges": "\u2A93", "lessapprox": "\u2A85", "lessdot": "\u22D6", "lesseqgtr": "\u22DA", "lesseqqgtr": "\u2A8B", "LessEqualGreater": "\u22DA", "LessFullEqual": "\u2266", "LessGreater": "\u2276", "lessgtr": "\u2276", "LessLess": "\u2AA1", "lesssim": "\u2272", "LessSlantEqual": "\u2A7D", "LessTilde": "\u2272", "lfisht": "\u297C", "lfloor": "\u230A", "lfr": "\u{1D529}", "Lfr": "\u{1D50F}", "lg": "\u2276", "lgE": "\u2A91", "lHar": "\u2962", "lhard": "\u21BD", "lharu": "\u21BC", "lharul": "\u296A", "lhblk": "\u2584", "ljcy": "\u0459", "LJcy": "\u0409", "ll": "\u226A", "Ll": "\u22D8", "llarr": "\u21C7", "llcorner": "\u231E", "Lleftarrow": "\u21DA", "llhard": "\u296B", "lltri": "\u25FA", "lmidot": "\u0140", "Lmidot": "\u013F", "lmoust": "\u23B0", "lmoustache": "\u23B0", "lnap": "\u2A89", "lnapprox": "\u2A89", "lne": "\u2A87", "lnE": "\u2268", "lneq": "\u2A87", "lneqq": "\u2268", "lnsim": "\u22E6", "loang": "\u27EC", "loarr": "\u21FD", "lobrk": "\u27E6", "longleftarrow": "\u27F5", "Longleftarrow": "\u27F8", "LongLeftArrow": "\u27F5", "longleftrightarrow": "\u27F7", "Longleftrightarrow": "\u27FA", "LongLeftRightArrow": "\u27F7", "longmapsto": "\u27FC", "longrightarrow": "\u27F6", "Longrightarrow": "\u27F9", "LongRightArrow": "\u27F6", "looparrowleft": "\u21AB", "looparrowright": "\u21AC", "lopar": "\u2985", "lopf": "\u{1D55D}", "Lopf": "\u{1D543}", "loplus": "\u2A2D", "lotimes": "\u2A34", "lowast": "\u2217", "lowbar": "_", "LowerLeftArrow": "\u2199", "LowerRightArrow": "\u2198", "loz": "\u25CA", "lozenge": "\u25CA", "lozf": "\u29EB", "lpar": "(", "lparlt": "\u2993", "lrarr": "\u21C6", "lrcorner": "\u231F", "lrhar": "\u21CB", "lrhard": "\u296D", "lrm": "\u200E", "lrtri": "\u22BF", "lsaquo": "\u2039", "lscr": "\u{1D4C1}", "Lscr": "\u2112", "lsh": "\u21B0", "Lsh": "\u21B0", "lsim": "\u2272", "lsime": "\u2A8D", "lsimg": "\u2A8F", "lsqb": "[", "lsquo": "\u2018", "lsquor": "\u201A", "lstrok": "\u0142", "Lstrok": "\u0141", "lt": "<", "Lt": "\u226A", "LT": "<", "ltcc": "\u2AA6", "ltcir": "\u2A79", "ltdot": "\u22D6", "lthree": "\u22CB", "ltimes": "\u22C9", "ltlarr": "\u2976", "ltquest": "\u2A7B", "ltri": "\u25C3", "ltrie": "\u22B4", "ltrif": "\u25C2", "ltrPar": "\u2996", "lurdshar": "\u294A", "luruhar": "\u2966", "lvertneqq": "\u2268\uFE00", "lvnE": "\u2268\uFE00", "macr": "\xAF", "male": "\u2642", "malt": "\u2720", "maltese": "\u2720", "map": "\u21A6", "Map": "\u2905", "mapsto": "\u21A6", "mapstodown": "\u21A7", "mapstoleft": "\u21A4", "mapstoup": "\u21A5", "marker": "\u25AE", "mcomma": "\u2A29", "mcy": "\u043C", "Mcy": "\u041C", "mdash": "\u2014", "mDDot": "\u223A", "measuredangle": "\u2221", "MediumSpace": "\u205F", "Mellintrf": "\u2133", "mfr": "\u{1D52A}", "Mfr": "\u{1D510}", "mho": "\u2127", "micro": "\xB5", "mid": "\u2223", "midast": "*", "midcir": "\u2AF0", "middot": "\xB7", "minus": "\u2212", "minusb": "\u229F", "minusd": "\u2238", "minusdu": "\u2A2A", "MinusPlus": "\u2213", "mlcp": "\u2ADB", "mldr": "\u2026", "mnplus": "\u2213", "models": "\u22A7", "mopf": "\u{1D55E}", "Mopf": "\u{1D544}", "mp": "\u2213", "mscr": "\u{1D4C2}", "Mscr": "\u2133", "mstpos": "\u223E", "mu": "\u03BC", "Mu": "\u039C", "multimap": "\u22B8", "mumap": "\u22B8", "nabla": "\u2207", "nacute": "\u0144", "Nacute": "\u0143", "nang": "\u2220\u20D2", "nap": "\u2249", "napE": "\u2A70\u0338", "napid": "\u224B\u0338", "napos": "\u0149", "napprox": "\u2249", "natur": "\u266E", "natural": "\u266E", "naturals": "\u2115", "nbsp": "\xA0", "nbump": "\u224E\u0338", "nbumpe": "\u224F\u0338", "ncap": "\u2A43", "ncaron": "\u0148", "Ncaron": "\u0147", "ncedil": "\u0146", "Ncedil": "\u0145", "ncong": "\u2247", "ncongdot": "\u2A6D\u0338", "ncup": "\u2A42", "ncy": "\u043D", "Ncy": "\u041D", "ndash": "\u2013", "ne": "\u2260", "nearhk": "\u2924", "nearr": "\u2197", "neArr": "\u21D7", "nearrow": "\u2197", "nedot": "\u2250\u0338", "NegativeMediumSpace": "\u200B", "NegativeThickSpace": "\u200B", "NegativeThinSpace": "\u200B", "NegativeVeryThinSpace": "\u200B", "nequiv": "\u2262", "nesear": "\u2928", "nesim": "\u2242\u0338", "NestedGreaterGreater": "\u226B", "NestedLessLess": "\u226A", "NewLine": "\n", "nexist": "\u2204", "nexists": "\u2204", "nfr": "\u{1D52B}", "Nfr": "\u{1D511}", "nge": "\u2271", "ngE": "\u2267\u0338", "ngeq": "\u2271", "ngeqq": "\u2267\u0338", "ngeqslant": "\u2A7E\u0338", "nges": "\u2A7E\u0338", "nGg": "\u22D9\u0338", "ngsim": "\u2275", "ngt": "\u226F", "nGt": "\u226B\u20D2", "ngtr": "\u226F", "nGtv": "\u226B\u0338", "nharr": "\u21AE", "nhArr": "\u21CE", "nhpar": "\u2AF2", "ni": "\u220B", "nis": "\u22FC", "nisd": "\u22FA", "niv": "\u220B", "njcy": "\u045A", "NJcy": "\u040A", "nlarr": "\u219A", "nlArr": "\u21CD", "nldr": "\u2025", "nle": "\u2270", "nlE": "\u2266\u0338", "nleftarrow": "\u219A", "nLeftarrow": "\u21CD", "nleftrightarrow": "\u21AE", "nLeftrightarrow": "\u21CE", "nleq": "\u2270", "nleqq": "\u2266\u0338", "nleqslant": "\u2A7D\u0338", "nles": "\u2A7D\u0338", "nless": "\u226E", "nLl": "\u22D8\u0338", "nlsim": "\u2274", "nlt": "\u226E", "nLt": "\u226A\u20D2", "nltri": "\u22EA", "nltrie": "\u22EC", "nLtv": "\u226A\u0338", "nmid": "\u2224", "NoBreak": "\u2060", "NonBreakingSpace": "\xA0", "nopf": "\u{1D55F}", "Nopf": "\u2115", "not": "\xAC", "Not": "\u2AEC", "NotCongruent": "\u2262", "NotCupCap": "\u226D", "NotDoubleVerticalBar": "\u2226", "NotElement": "\u2209", "NotEqual": "\u2260", "NotEqualTilde": "\u2242\u0338", "NotExists": "\u2204", "NotGreater": "\u226F", "NotGreaterEqual": "\u2271", "NotGreaterFullEqual": "\u2267\u0338", "NotGreaterGreater": "\u226B\u0338", "NotGreaterLess": "\u2279", "NotGreaterSlantEqual": "\u2A7E\u0338", "NotGreaterTilde": "\u2275", "NotHumpDownHump": "\u224E\u0338", "NotHumpEqual": "\u224F\u0338", "notin": "\u2209", "notindot": "\u22F5\u0338", "notinE": "\u22F9\u0338", "notinva": "\u2209", "notinvb": "\u22F7", "notinvc": "\u22F6", "NotLeftTriangle": "\u22EA", "NotLeftTriangleBar": "\u29CF\u0338", "NotLeftTriangleEqual": "\u22EC", "NotLess": "\u226E", "NotLessEqual": "\u2270", "NotLessGreater": "\u2278", "NotLessLess": "\u226A\u0338", "NotLessSlantEqual": "\u2A7D\u0338", "NotLessTilde": "\u2274", "NotNestedGreaterGreater": "\u2AA2\u0338", "NotNestedLessLess": "\u2AA1\u0338", "notni": "\u220C", "notniva": "\u220C", "notnivb": "\u22FE", "notnivc": "\u22FD", "NotPrecedes": "\u2280", "NotPrecedesEqual": "\u2AAF\u0338", "NotPrecedesSlantEqual": "\u22E0", "NotReverseElement": "\u220C", "NotRightTriangle": "\u22EB", "NotRightTriangleBar": "\u29D0\u0338", "NotRightTriangleEqual": "\u22ED", "NotSquareSubset": "\u228F\u0338", "NotSquareSubsetEqual": "\u22E2", "NotSquareSuperset": "\u2290\u0338", "NotSquareSupersetEqual": "\u22E3", "NotSubset": "\u2282\u20D2", "NotSubsetEqual": "\u2288", "NotSucceeds": "\u2281", "NotSucceedsEqual": "\u2AB0\u0338", "NotSucceedsSlantEqual": "\u22E1", "NotSucceedsTilde": "\u227F\u0338", "NotSuperset": "\u2283\u20D2", "NotSupersetEqual": "\u2289", "NotTilde": "\u2241", "NotTildeEqual": "\u2244", "NotTildeFullEqual": "\u2247", "NotTildeTilde": "\u2249", "NotVerticalBar": "\u2224", "npar": "\u2226", "nparallel": "\u2226", "nparsl": "\u2AFD\u20E5", "npart": "\u2202\u0338", "npolint": "\u2A14", "npr": "\u2280", "nprcue": "\u22E0", "npre": "\u2AAF\u0338", "nprec": "\u2280", "npreceq": "\u2AAF\u0338", "nrarr": "\u219B", "nrArr": "\u21CF", "nrarrc": "\u2933\u0338", "nrarrw": "\u219D\u0338", "nrightarrow": "\u219B", "nRightarrow": "\u21CF", "nrtri": "\u22EB", "nrtrie": "\u22ED", "nsc": "\u2281", "nsccue": "\u22E1", "nsce": "\u2AB0\u0338", "nscr": "\u{1D4C3}", "Nscr": "\u{1D4A9}", "nshortmid": "\u2224", "nshortparallel": "\u2226", "nsim": "\u2241", "nsime": "\u2244", "nsimeq": "\u2244", "nsmid": "\u2224", "nspar": "\u2226", "nsqsube": "\u22E2", "nsqsupe": "\u22E3", "nsub": "\u2284", "nsube": "\u2288", "nsubE": "\u2AC5\u0338", "nsubset": "\u2282\u20D2", "nsubseteq": "\u2288", "nsubseteqq": "\u2AC5\u0338", "nsucc": "\u2281", "nsucceq": "\u2AB0\u0338", "nsup": "\u2285", "nsupe": "\u2289", "nsupE": "\u2AC6\u0338", "nsupset": "\u2283\u20D2", "nsupseteq": "\u2289", "nsupseteqq": "\u2AC6\u0338", "ntgl": "\u2279", "ntilde": "\xF1", "Ntilde": "\xD1", "ntlg": "\u2278", "ntriangleleft": "\u22EA", "ntrianglelefteq": "\u22EC", "ntriangleright": "\u22EB", "ntrianglerighteq": "\u22ED", "nu": "\u03BD", "Nu": "\u039D", "num": "#", "numero": "\u2116", "numsp": "\u2007", "nvap": "\u224D\u20D2", "nvdash": "\u22AC", "nvDash": "\u22AD", "nVdash": "\u22AE", "nVDash": "\u22AF", "nvge": "\u2265\u20D2", "nvgt": ">\u20D2", "nvHarr": "\u2904", "nvinfin": "\u29DE", "nvlArr": "\u2902", "nvle": "\u2264\u20D2", "nvlt": "<\u20D2", "nvltrie": "\u22B4\u20D2", "nvrArr": "\u2903", "nvrtrie": "\u22B5\u20D2", "nvsim": "\u223C\u20D2", "nwarhk": "\u2923", "nwarr": "\u2196", "nwArr": "\u21D6", "nwarrow": "\u2196", "nwnear": "\u2927", "oacute": "\xF3", "Oacute": "\xD3", "oast": "\u229B", "ocir": "\u229A", "ocirc": "\xF4", "Ocirc": "\xD4", "ocy": "\u043E", "Ocy": "\u041E", "odash": "\u229D", "odblac": "\u0151", "Odblac": "\u0150", "odiv": "\u2A38", "odot": "\u2299", "odsold": "\u29BC", "oelig": "\u0153", "OElig": "\u0152", "ofcir": "\u29BF", "ofr": "\u{1D52C}", "Ofr": "\u{1D512}", "ogon": "\u02DB", "ograve": "\xF2", "Ograve": "\xD2", "ogt": "\u29C1", "ohbar": "\u29B5", "ohm": "\u03A9", "oint": "\u222E", "olarr": "\u21BA", "olcir": "\u29BE", "olcross": "\u29BB", "oline": "\u203E", "olt": "\u29C0", "omacr": "\u014D", "Omacr": "\u014C", "omega": "\u03C9", "Omega": "\u03A9", "omicron": "\u03BF", "Omicron": "\u039F", "omid": "\u29B6", "ominus": "\u2296", "oopf": "\u{1D560}", "Oopf": "\u{1D546}", "opar": "\u29B7", "OpenCurlyDoubleQuote": "\u201C", "OpenCurlyQuote": "\u2018", "operp": "\u29B9", "oplus": "\u2295", "or": "\u2228", "Or": "\u2A54", "orarr": "\u21BB", "ord": "\u2A5D", "order": "\u2134", "orderof": "\u2134", "ordf": "\xAA", "ordm": "\xBA", "origof": "\u22B6", "oror": "\u2A56", "orslope": "\u2A57", "orv": "\u2A5B", "oS": "\u24C8", "oscr": "\u2134", "Oscr": "\u{1D4AA}", "oslash": "\xF8", "Oslash": "\xD8", "osol": "\u2298", "otilde": "\xF5", "Otilde": "\xD5", "otimes": "\u2297", "Otimes": "\u2A37", "otimesas": "\u2A36", "ouml": "\xF6", "Ouml": "\xD6", "ovbar": "\u233D", "OverBar": "\u203E", "OverBrace": "\u23DE", "OverBracket": "\u23B4", "OverParenthesis": "\u23DC", "par": "\u2225", "para": "\xB6", "parallel": "\u2225", "parsim": "\u2AF3", "parsl": "\u2AFD", "part": "\u2202", "PartialD": "\u2202", "pcy": "\u043F", "Pcy": "\u041F", "percnt": "%", "period": ".", "permil": "\u2030", "perp": "\u22A5", "pertenk": "\u2031", "pfr": "\u{1D52D}", "Pfr": "\u{1D513}", "phi": "\u03C6", "Phi": "\u03A6", "phiv": "\u03D5", "phmmat": "\u2133", "phone": "\u260E", "pi": "\u03C0", "Pi": "\u03A0", "pitchfork": "\u22D4", "piv": "\u03D6", "planck": "\u210F", "planckh": "\u210E", "plankv": "\u210F", "plus": "+", "plusacir": "\u2A23", "plusb": "\u229E", "pluscir": "\u2A22", "plusdo": "\u2214", "plusdu": "\u2A25", "pluse": "\u2A72", "PlusMinus": "\xB1", "plusmn": "\xB1", "plussim": "\u2A26", "plustwo": "\u2A27", "pm": "\xB1", "Poincareplane": "\u210C", "pointint": "\u2A15", "popf": "\u{1D561}", "Popf": "\u2119", "pound": "\xA3", "pr": "\u227A", "Pr": "\u2ABB", "prap": "\u2AB7", "prcue": "\u227C", "pre": "\u2AAF", "prE": "\u2AB3", "prec": "\u227A", "precapprox": "\u2AB7", "preccurlyeq": "\u227C", "Precedes": "\u227A", "PrecedesEqual": "\u2AAF", "PrecedesSlantEqual": "\u227C", "PrecedesTilde": "\u227E", "preceq": "\u2AAF", "precnapprox": "\u2AB9", "precneqq": "\u2AB5", "precnsim": "\u22E8", "precsim": "\u227E", "prime": "\u2032", "Prime": "\u2033", "primes": "\u2119", "prnap": "\u2AB9", "prnE": "\u2AB5", "prnsim": "\u22E8", "prod": "\u220F", "Product": "\u220F", "profalar": "\u232E", "profline": "\u2312", "profsurf": "\u2313", "prop": "\u221D", "Proportion": "\u2237", "Proportional": "\u221D", "propto": "\u221D", "prsim": "\u227E", "prurel": "\u22B0", "pscr": "\u{1D4C5}", "Pscr": "\u{1D4AB}", "psi": "\u03C8", "Psi": "\u03A8", "puncsp": "\u2008", "qfr": "\u{1D52E}", "Qfr": "\u{1D514}", "qint": "\u2A0C", "qopf": "\u{1D562}", "Qopf": "\u211A", "qprime": "\u2057", "qscr": "\u{1D4C6}", "Qscr": "\u{1D4AC}", "quaternions": "\u210D", "quatint": "\u2A16", "quest": "?", "questeq": "\u225F", "quot": '"', "QUOT": '"', "rAarr": "\u21DB", "race": "\u223D\u0331", "racute": "\u0155", "Racute": "\u0154", "radic": "\u221A", "raemptyv": "\u29B3", "rang": "\u27E9", "Rang": "\u27EB", "rangd": "\u2992", "range": "\u29A5", "rangle": "\u27E9", "raquo": "\xBB", "rarr": "\u2192", "rArr": "\u21D2", "Rarr": "\u21A0", "rarrap": "\u2975", "rarrb": "\u21E5", "rarrbfs": "\u2920", "rarrc": "\u2933", "rarrfs": "\u291E", "rarrhk": "\u21AA", "rarrlp": "\u21AC", "rarrpl": "\u2945", "rarrsim": "\u2974", "rarrtl": "\u21A3", "Rarrtl": "\u2916", "rarrw": "\u219D", "ratail": "\u291A", "rAtail": "\u291C", "ratio": "\u2236", "rationals": "\u211A", "rbarr": "\u290D", "rBarr": "\u290F", "RBarr": "\u2910", "rbbrk": "\u2773", "rbrace": "}", "rbrack": "]", "rbrke": "\u298C", "rbrksld": "\u298E", "rbrkslu": "\u2990", "rcaron": "\u0159", "Rcaron": "\u0158", "rcedil": "\u0157", "Rcedil": "\u0156", "rceil": "\u2309", "rcub": "}", "rcy": "\u0440", "Rcy": "\u0420", "rdca": "\u2937", "rdldhar": "\u2969", "rdquo": "\u201D", "rdquor": "\u201D", "rdsh": "\u21B3", "Re": "\u211C", "real": "\u211C", "realine": "\u211B", "realpart": "\u211C", "reals": "\u211D", "rect": "\u25AD", "reg": "\xAE", "REG": "\xAE", "ReverseElement": "\u220B", "ReverseEquilibrium": "\u21CB", "ReverseUpEquilibrium": "\u296F", "rfisht": "\u297D", "rfloor": "\u230B", "rfr": "\u{1D52F}", "Rfr": "\u211C", "rHar": "\u2964", "rhard": "\u21C1", "rharu": "\u21C0", "rharul": "\u296C", "rho": "\u03C1", "Rho": "\u03A1", "rhov": "\u03F1", "RightAngleBracket": "\u27E9", "rightarrow": "\u2192", "Rightarrow": "\u21D2", "RightArrow": "\u2192", "RightArrowBar": "\u21E5", "RightArrowLeftArrow": "\u21C4", "rightarrowtail": "\u21A3", "RightCeiling": "\u2309", "RightDoubleBracket": "\u27E7", "RightDownTeeVector": "\u295D", "RightDownVector": "\u21C2", "RightDownVectorBar": "\u2955", "RightFloor": "\u230B", "rightharpoondown": "\u21C1", "rightharpoonup": "\u21C0", "rightleftarrows": "\u21C4", "rightleftharpoons": "\u21CC", "rightrightarrows": "\u21C9", "rightsquigarrow": "\u219D", "RightTee": "\u22A2", "RightTeeArrow": "\u21A6", "RightTeeVector": "\u295B", "rightthreetimes": "\u22CC", "RightTriangle": "\u22B3", "RightTriangleBar": "\u29D0", "RightTriangleEqual": "\u22B5", "RightUpDownVector": "\u294F", "RightUpTeeVector": "\u295C", "RightUpVector": "\u21BE", "RightUpVectorBar": "\u2954", "RightVector": "\u21C0", "RightVectorBar": "\u2953", "ring": "\u02DA", "risingdotseq": "\u2253", "rlarr": "\u21C4", "rlhar": "\u21CC", "rlm": "\u200F", "rmoust": "\u23B1", "rmoustache": "\u23B1", "rnmid": "\u2AEE", "roang": "\u27ED", "roarr": "\u21FE", "robrk": "\u27E7", "ropar": "\u2986", "ropf": "\u{1D563}", "Ropf": "\u211D", "roplus": "\u2A2E", "rotimes": "\u2A35", "RoundImplies": "\u2970", "rpar": ")", "rpargt": "\u2994", "rppolint": "\u2A12", "rrarr": "\u21C9", "Rrightarrow": "\u21DB", "rsaquo": "\u203A", "rscr": "\u{1D4C7}", "Rscr": "\u211B", "rsh": "\u21B1", "Rsh": "\u21B1", "rsqb": "]", "rsquo": "\u2019", "rsquor": "\u2019", "rthree": "\u22CC", "rtimes": "\u22CA", "rtri": "\u25B9", "rtrie": "\u22B5", "rtrif": "\u25B8", "rtriltri": "\u29CE", "RuleDelayed": "\u29F4", "ruluhar": "\u2968", "rx": "\u211E", "sacute": "\u015B", "Sacute": "\u015A", "sbquo": "\u201A", "sc": "\u227B", "Sc": "\u2ABC", "scap": "\u2AB8", "scaron": "\u0161", "Scaron": "\u0160", "sccue": "\u227D", "sce": "\u2AB0", "scE": "\u2AB4", "scedil": "\u015F", "Scedil": "\u015E", "scirc": "\u015D", "Scirc": "\u015C", "scnap": "\u2ABA", "scnE": "\u2AB6", "scnsim": "\u22E9", "scpolint": "\u2A13", "scsim": "\u227F", "scy": "\u0441", "Scy": "\u0421", "sdot": "\u22C5", "sdotb": "\u22A1", "sdote": "\u2A66", "searhk": "\u2925", "searr": "\u2198", "seArr": "\u21D8", "searrow": "\u2198", "sect": "\xA7", "semi": ";", "seswar": "\u2929", "setminus": "\u2216", "setmn": "\u2216", "sext": "\u2736", "sfr": "\u{1D530}", "Sfr": "\u{1D516}", "sfrown": "\u2322", "sharp": "\u266F", "shchcy": "\u0449", "SHCHcy": "\u0429", "shcy": "\u0448", "SHcy": "\u0428", "ShortDownArrow": "\u2193", "ShortLeftArrow": "\u2190", "shortmid": "\u2223", "shortparallel": "\u2225", "ShortRightArrow": "\u2192", "ShortUpArrow": "\u2191", "shy": "\xAD", "sigma": "\u03C3", "Sigma": "\u03A3", "sigmaf": "\u03C2", "sigmav": "\u03C2", "sim": "\u223C", "simdot": "\u2A6A", "sime": "\u2243", "simeq": "\u2243", "simg": "\u2A9E", "simgE": "\u2AA0", "siml": "\u2A9D", "simlE": "\u2A9F", "simne": "\u2246", "simplus": "\u2A24", "simrarr": "\u2972", "slarr": "\u2190", "SmallCircle": "\u2218", "smallsetminus": "\u2216", "smashp": "\u2A33", "smeparsl": "\u29E4", "smid": "\u2223", "smile": "\u2323", "smt": "\u2AAA", "smte": "\u2AAC", "smtes": "\u2AAC\uFE00", "softcy": "\u044C", "SOFTcy": "\u042C", "sol": "/", "solb": "\u29C4", "solbar": "\u233F", "sopf": "\u{1D564}", "Sopf": "\u{1D54A}", "spades": "\u2660", "spadesuit": "\u2660", "spar": "\u2225", "sqcap": "\u2293", "sqcaps": "\u2293\uFE00", "sqcup": "\u2294", "sqcups": "\u2294\uFE00", "Sqrt": "\u221A", "sqsub": "\u228F", "sqsube": "\u2291", "sqsubset": "\u228F", "sqsubseteq": "\u2291", "sqsup": "\u2290", "sqsupe": "\u2292", "sqsupset": "\u2290", "sqsupseteq": "\u2292", "squ": "\u25A1", "square": "\u25A1", "Square": "\u25A1", "SquareIntersection": "\u2293", "SquareSubset": "\u228F", "SquareSubsetEqual": "\u2291", "SquareSuperset": "\u2290", "SquareSupersetEqual": "\u2292", "SquareUnion": "\u2294", "squarf": "\u25AA", "squf": "\u25AA", "srarr": "\u2192", "sscr": "\u{1D4C8}", "Sscr": "\u{1D4AE}", "ssetmn": "\u2216", "ssmile": "\u2323", "sstarf": "\u22C6", "star": "\u2606", "Star": "\u22C6", "starf": "\u2605", "straightepsilon": "\u03F5", "straightphi": "\u03D5", "strns": "\xAF", "sub": "\u2282", "Sub": "\u22D0", "subdot": "\u2ABD", "sube": "\u2286", "subE": "\u2AC5", "subedot": "\u2AC3", "submult": "\u2AC1", "subne": "\u228A", "subnE": "\u2ACB", "subplus": "\u2ABF", "subrarr": "\u2979", "subset": "\u2282", "Subset": "\u22D0", "subseteq": "\u2286", "subseteqq": "\u2AC5", "SubsetEqual": "\u2286", "subsetneq": "\u228A", "subsetneqq": "\u2ACB", "subsim": "\u2AC7", "subsub": "\u2AD5", "subsup": "\u2AD3", "succ": "\u227B", "succapprox": "\u2AB8", "succcurlyeq": "\u227D", "Succeeds": "\u227B", "SucceedsEqual": "\u2AB0", "SucceedsSlantEqual": "\u227D", "SucceedsTilde": "\u227F", "succeq": "\u2AB0", "succnapprox": "\u2ABA", "succneqq": "\u2AB6", "succnsim": "\u22E9", "succsim": "\u227F", "SuchThat": "\u220B", "sum": "\u2211", "Sum": "\u2211", "sung": "\u266A", "sup": "\u2283", "Sup": "\u22D1", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "supdot": "\u2ABE", "supdsub": "\u2AD8", "supe": "\u2287", "supE": "\u2AC6", "supedot": "\u2AC4", "Superset": "\u2283", "SupersetEqual": "\u2287", "suphsol": "\u27C9", "suphsub": "\u2AD7", "suplarr": "\u297B", "supmult": "\u2AC2", "supne": "\u228B", "supnE": "\u2ACC", "supplus": "\u2AC0", "supset": "\u2283", "Supset": "\u22D1", "supseteq": "\u2287", "supseteqq": "\u2AC6", "supsetneq": "\u228B", "supsetneqq": "\u2ACC", "supsim": "\u2AC8", "supsub": "\u2AD4", "supsup": "\u2AD6", "swarhk": "\u2926", "swarr": "\u2199", "swArr": "\u21D9", "swarrow": "\u2199", "swnwar": "\u292A", "szlig": "\xDF", "Tab": "	", "target": "\u2316", "tau": "\u03C4", "Tau": "\u03A4", "tbrk": "\u23B4", "tcaron": "\u0165", "Tcaron": "\u0164", "tcedil": "\u0163", "Tcedil": "\u0162", "tcy": "\u0442", "Tcy": "\u0422", "tdot": "\u20DB", "telrec": "\u2315", "tfr": "\u{1D531}", "Tfr": "\u{1D517}", "there4": "\u2234", "therefore": "\u2234", "Therefore": "\u2234", "theta": "\u03B8", "Theta": "\u0398", "thetasym": "\u03D1", "thetav": "\u03D1", "thickapprox": "\u2248", "thicksim": "\u223C", "ThickSpace": "\u205F\u200A", "thinsp": "\u2009", "ThinSpace": "\u2009", "thkap": "\u2248", "thksim": "\u223C", "thorn": "\xFE", "THORN": "\xDE", "tilde": "\u02DC", "Tilde": "\u223C", "TildeEqual": "\u2243", "TildeFullEqual": "\u2245", "TildeTilde": "\u2248", "times": "\xD7", "timesb": "\u22A0", "timesbar": "\u2A31", "timesd": "\u2A30", "tint": "\u222D", "toea": "\u2928", "top": "\u22A4", "topbot": "\u2336", "topcir": "\u2AF1", "topf": "\u{1D565}", "Topf": "\u{1D54B}", "topfork": "\u2ADA", "tosa": "\u2929", "tprime": "\u2034", "trade": "\u2122", "TRADE": "\u2122", "triangle": "\u25B5", "triangledown": "\u25BF", "triangleleft": "\u25C3", "trianglelefteq": "\u22B4", "triangleq": "\u225C", "triangleright": "\u25B9", "trianglerighteq": "\u22B5", "tridot": "\u25EC", "trie": "\u225C", "triminus": "\u2A3A", "TripleDot": "\u20DB", "triplus": "\u2A39", "trisb": "\u29CD", "tritime": "\u2A3B", "trpezium": "\u23E2", "tscr": "\u{1D4C9}", "Tscr": "\u{1D4AF}", "tscy": "\u0446", "TScy": "\u0426", "tshcy": "\u045B", "TSHcy": "\u040B", "tstrok": "\u0167", "Tstrok": "\u0166", "twixt": "\u226C", "twoheadleftarrow": "\u219E", "twoheadrightarrow": "\u21A0", "uacute": "\xFA", "Uacute": "\xDA", "uarr": "\u2191", "uArr": "\u21D1", "Uarr": "\u219F", "Uarrocir": "\u2949", "ubrcy": "\u045E", "Ubrcy": "\u040E", "ubreve": "\u016D", "Ubreve": "\u016C", "ucirc": "\xFB", "Ucirc": "\xDB", "ucy": "\u0443", "Ucy": "\u0423", "udarr": "\u21C5", "udblac": "\u0171", "Udblac": "\u0170", "udhar": "\u296E", "ufisht": "\u297E", "ufr": "\u{1D532}", "Ufr": "\u{1D518}", "ugrave": "\xF9", "Ugrave": "\xD9", "uHar": "\u2963", "uharl": "\u21BF", "uharr": "\u21BE", "uhblk": "\u2580", "ulcorn": "\u231C", "ulcorner": "\u231C", "ulcrop": "\u230F", "ultri": "\u25F8", "umacr": "\u016B", "Umacr": "\u016A", "uml": "\xA8", "UnderBar": "_", "UnderBrace": "\u23DF", "UnderBracket": "\u23B5", "UnderParenthesis": "\u23DD", "Union": "\u22C3", "UnionPlus": "\u228E", "uogon": "\u0173", "Uogon": "\u0172", "uopf": "\u{1D566}", "Uopf": "\u{1D54C}", "uparrow": "\u2191", "Uparrow": "\u21D1", "UpArrow": "\u2191", "UpArrowBar": "\u2912", "UpArrowDownArrow": "\u21C5", "updownarrow": "\u2195", "Updownarrow": "\u21D5", "UpDownArrow": "\u2195", "UpEquilibrium": "\u296E", "upharpoonleft": "\u21BF", "upharpoonright": "\u21BE", "uplus": "\u228E", "UpperLeftArrow": "\u2196", "UpperRightArrow": "\u2197", "upsi": "\u03C5", "Upsi": "\u03D2", "upsih": "\u03D2", "upsilon": "\u03C5", "Upsilon": "\u03A5", "UpTee": "\u22A5", "UpTeeArrow": "\u21A5", "upuparrows": "\u21C8", "urcorn": "\u231D", "urcorner": "\u231D", "urcrop": "\u230E", "uring": "\u016F", "Uring": "\u016E", "urtri": "\u25F9", "uscr": "\u{1D4CA}", "Uscr": "\u{1D4B0}", "utdot": "\u22F0", "utilde": "\u0169", "Utilde": "\u0168", "utri": "\u25B5", "utrif": "\u25B4", "uuarr": "\u21C8", "uuml": "\xFC", "Uuml": "\xDC", "uwangle": "\u29A7", "vangrt": "\u299C", "varepsilon": "\u03F5", "varkappa": "\u03F0", "varnothing": "\u2205", "varphi": "\u03D5", "varpi": "\u03D6", "varpropto": "\u221D", "varr": "\u2195", "vArr": "\u21D5", "varrho": "\u03F1", "varsigma": "\u03C2", "varsubsetneq": "\u228A\uFE00", "varsubsetneqq": "\u2ACB\uFE00", "varsupsetneq": "\u228B\uFE00", "varsupsetneqq": "\u2ACC\uFE00", "vartheta": "\u03D1", "vartriangleleft": "\u22B2", "vartriangleright": "\u22B3", "vBar": "\u2AE8", "Vbar": "\u2AEB", "vBarv": "\u2AE9", "vcy": "\u0432", "Vcy": "\u0412", "vdash": "\u22A2", "vDash": "\u22A8", "Vdash": "\u22A9", "VDash": "\u22AB", "Vdashl": "\u2AE6", "vee": "\u2228", "Vee": "\u22C1", "veebar": "\u22BB", "veeeq": "\u225A", "vellip": "\u22EE", "verbar": "|", "Verbar": "\u2016", "vert": "|", "Vert": "\u2016", "VerticalBar": "\u2223", "VerticalLine": "|", "VerticalSeparator": "\u2758", "VerticalTilde": "\u2240", "VeryThinSpace": "\u200A", "vfr": "\u{1D533}", "Vfr": "\u{1D519}", "vltri": "\u22B2", "vnsub": "\u2282\u20D2", "vnsup": "\u2283\u20D2", "vopf": "\u{1D567}", "Vopf": "\u{1D54D}", "vprop": "\u221D", "vrtri": "\u22B3", "vscr": "\u{1D4CB}", "Vscr": "\u{1D4B1}", "vsubne": "\u228A\uFE00", "vsubnE": "\u2ACB\uFE00", "vsupne": "\u228B\uFE00", "vsupnE": "\u2ACC\uFE00", "Vvdash": "\u22AA", "vzigzag": "\u299A", "wcirc": "\u0175", "Wcirc": "\u0174", "wedbar": "\u2A5F", "wedge": "\u2227", "Wedge": "\u22C0", "wedgeq": "\u2259", "weierp": "\u2118", "wfr": "\u{1D534}", "Wfr": "\u{1D51A}", "wopf": "\u{1D568}", "Wopf": "\u{1D54E}", "wp": "\u2118", "wr": "\u2240", "wreath": "\u2240", "wscr": "\u{1D4CC}", "Wscr": "\u{1D4B2}", "xcap": "\u22C2", "xcirc": "\u25EF", "xcup": "\u22C3", "xdtri": "\u25BD", "xfr": "\u{1D535}", "Xfr": "\u{1D51B}", "xharr": "\u27F7", "xhArr": "\u27FA", "xi": "\u03BE", "Xi": "\u039E", "xlarr": "\u27F5", "xlArr": "\u27F8", "xmap": "\u27FC", "xnis": "\u22FB", "xodot": "\u2A00", "xopf": "\u{1D569}", "Xopf": "\u{1D54F}", "xoplus": "\u2A01", "xotime": "\u2A02", "xrarr": "\u27F6", "xrArr": "\u27F9", "xscr": "\u{1D4CD}", "Xscr": "\u{1D4B3}", "xsqcup": "\u2A06", "xuplus": "\u2A04", "xutri": "\u25B3", "xvee": "\u22C1", "xwedge": "\u22C0", "yacute": "\xFD", "Yacute": "\xDD", "yacy": "\u044F", "YAcy": "\u042F", "ycirc": "\u0177", "Ycirc": "\u0176", "ycy": "\u044B", "Ycy": "\u042B", "yen": "\xA5", "yfr": "\u{1D536}", "Yfr": "\u{1D51C}", "yicy": "\u0457", "YIcy": "\u0407", "yopf": "\u{1D56A}", "Yopf": "\u{1D550}", "yscr": "\u{1D4CE}", "Yscr": "\u{1D4B4}", "yucy": "\u044E", "YUcy": "\u042E", "yuml": "\xFF", "Yuml": "\u0178", "zacute": "\u017A", "Zacute": "\u0179", "zcaron": "\u017E", "Zcaron": "\u017D", "zcy": "\u0437", "Zcy": "\u0417", "zdot": "\u017C", "Zdot": "\u017B", "zeetrf": "\u2128", "ZeroWidthSpace": "\u200B", "zeta": "\u03B6", "Zeta": "\u0396", "zfr": "\u{1D537}", "Zfr": "\u2128", "zhcy": "\u0436", "ZHcy": "\u0416", "zigrarr": "\u21DD", "zopf": "\u{1D56B}", "Zopf": "\u2124", "zscr": "\u{1D4CF}", "Zscr": "\u{1D4B5}", "zwj": "\u200D", "zwnj": "\u200C" };
      var decodeMapLegacy = { "aacute": "\xE1", "Aacute": "\xC1", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "aelig": "\xE6", "AElig": "\xC6", "agrave": "\xE0", "Agrave": "\xC0", "amp": "&", "AMP": "&", "aring": "\xE5", "Aring": "\xC5", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "brvbar": "\xA6", "ccedil": "\xE7", "Ccedil": "\xC7", "cedil": "\xB8", "cent": "\xA2", "copy": "\xA9", "COPY": "\xA9", "curren": "\xA4", "deg": "\xB0", "divide": "\xF7", "eacute": "\xE9", "Eacute": "\xC9", "ecirc": "\xEA", "Ecirc": "\xCA", "egrave": "\xE8", "Egrave": "\xC8", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "frac12": "\xBD", "frac14": "\xBC", "frac34": "\xBE", "gt": ">", "GT": ">", "iacute": "\xED", "Iacute": "\xCD", "icirc": "\xEE", "Icirc": "\xCE", "iexcl": "\xA1", "igrave": "\xEC", "Igrave": "\xCC", "iquest": "\xBF", "iuml": "\xEF", "Iuml": "\xCF", "laquo": "\xAB", "lt": "<", "LT": "<", "macr": "\xAF", "micro": "\xB5", "middot": "\xB7", "nbsp": "\xA0", "not": "\xAC", "ntilde": "\xF1", "Ntilde": "\xD1", "oacute": "\xF3", "Oacute": "\xD3", "ocirc": "\xF4", "Ocirc": "\xD4", "ograve": "\xF2", "Ograve": "\xD2", "ordf": "\xAA", "ordm": "\xBA", "oslash": "\xF8", "Oslash": "\xD8", "otilde": "\xF5", "Otilde": "\xD5", "ouml": "\xF6", "Ouml": "\xD6", "para": "\xB6", "plusmn": "\xB1", "pound": "\xA3", "quot": '"', "QUOT": '"', "raquo": "\xBB", "reg": "\xAE", "REG": "\xAE", "sect": "\xA7", "shy": "\xAD", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "szlig": "\xDF", "thorn": "\xFE", "THORN": "\xDE", "times": "\xD7", "uacute": "\xFA", "Uacute": "\xDA", "ucirc": "\xFB", "Ucirc": "\xDB", "ugrave": "\xF9", "Ugrave": "\xD9", "uml": "\xA8", "uuml": "\xFC", "Uuml": "\xDC", "yacute": "\xFD", "Yacute": "\xDD", "yen": "\xA5", "yuml": "\xFF" };
      var decodeMapNumeric = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
      var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65e3, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
      var stringFromCharCode = String.fromCharCode;
      var object = {};
      var hasOwnProperty = object.hasOwnProperty;
      var has = function(object2, propertyName) {
        return hasOwnProperty.call(object2, propertyName);
      };
      var contains2 = function(array, value) {
        var index = -1;
        var length = array.length;
        while (++index < length) {
          if (array[index] == value) {
            return true;
          }
        }
        return false;
      };
      var merge = function(options, defaults) {
        if (!options) {
          return defaults;
        }
        var result = {};
        var key2;
        for (key2 in defaults) {
          result[key2] = has(options, key2) ? options[key2] : defaults[key2];
        }
        return result;
      };
      var codePointToSymbol = function(codePoint, strict) {
        var output = "";
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          if (strict) {
            parseError("character reference outside the permissible Unicode range");
          }
          return "\uFFFD";
        }
        if (has(decodeMapNumeric, codePoint)) {
          if (strict) {
            parseError("disallowed character reference");
          }
          return decodeMapNumeric[codePoint];
        }
        if (strict && contains2(invalidReferenceCodePoints, codePoint)) {
          parseError("disallowed character reference");
        }
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += stringFromCharCode(codePoint);
        return output;
      };
      var hexEscape = function(codePoint) {
        return "&#x" + codePoint.toString(16).toUpperCase() + ";";
      };
      var decEscape = function(codePoint) {
        return "&#" + codePoint + ";";
      };
      var parseError = function(message) {
        throw Error("Parse error: " + message);
      };
      var encode = function(string, options) {
        options = merge(options, encode.options);
        var strict = options.strict;
        if (strict && regexInvalidRawCodePoint.test(string)) {
          parseError("forbidden code point");
        }
        var encodeEverything = options.encodeEverything;
        var useNamedReferences = options.useNamedReferences;
        var allowUnsafeSymbols = options.allowUnsafeSymbols;
        var escapeCodePoint = options.decimal ? decEscape : hexEscape;
        var escapeBmpSymbol = function(symbol) {
          return escapeCodePoint(symbol.charCodeAt(0));
        };
        if (encodeEverything) {
          string = string.replace(regexAsciiWhitelist, function(symbol) {
            if (useNamedReferences && has(encodeMap, symbol)) {
              return "&" + encodeMap[symbol] + ";";
            }
            return escapeBmpSymbol(symbol);
          });
          if (useNamedReferences) {
            string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
          }
          if (useNamedReferences) {
            string = string.replace(regexEncodeNonAscii, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          }
        } else if (useNamedReferences) {
          if (!allowUnsafeSymbols) {
            string = string.replace(regexEscape, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          }
          string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
          string = string.replace(regexEncodeNonAscii, function(string2) {
            return "&" + encodeMap[string2] + ";";
          });
        } else if (!allowUnsafeSymbols) {
          string = string.replace(regexEscape, escapeBmpSymbol);
        }
        return string.replace(regexAstralSymbols, function($0) {
          var high = $0.charCodeAt(0);
          var low = $0.charCodeAt(1);
          var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
          return escapeCodePoint(codePoint);
        }).replace(regexBmpWhitelist, escapeBmpSymbol);
      };
      encode.options = {
        "allowUnsafeSymbols": false,
        "encodeEverything": false,
        "strict": false,
        "useNamedReferences": false,
        "decimal": false
      };
      var decode2 = function(html, options) {
        options = merge(options, decode2.options);
        var strict = options.strict;
        if (strict && regexInvalidEntity.test(html)) {
          parseError("malformed character reference");
        }
        return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
          var codePoint;
          var semicolon;
          var decDigits;
          var hexDigits;
          var reference2;
          var next2;
          if ($1) {
            reference2 = $1;
            return decodeMap[reference2];
          }
          if ($2) {
            reference2 = $2;
            next2 = $3;
            if (next2 && options.isAttributeValue) {
              if (strict && next2 == "=") {
                parseError("`&` did not start a character reference");
              }
              return $0;
            } else {
              if (strict) {
                parseError("named character reference was not terminated by a semicolon");
              }
              return decodeMapLegacy[reference2] + (next2 || "");
            }
          }
          if ($4) {
            decDigits = $4;
            semicolon = $5;
            if (strict && !semicolon) {
              parseError("character reference was not terminated by a semicolon");
            }
            codePoint = parseInt(decDigits, 10);
            return codePointToSymbol(codePoint, strict);
          }
          if ($6) {
            hexDigits = $6;
            semicolon = $7;
            if (strict && !semicolon) {
              parseError("character reference was not terminated by a semicolon");
            }
            codePoint = parseInt(hexDigits, 16);
            return codePointToSymbol(codePoint, strict);
          }
          if (strict) {
            parseError("named character reference was not terminated by a semicolon");
          }
          return $0;
        });
      };
      decode2.options = {
        "isAttributeValue": false,
        "strict": false
      };
      var escape = function(string) {
        return string.replace(regexEscape, function($0) {
          return escapeMap[$0];
        });
      };
      var he = {
        "version": "1.2.0",
        "encode": encode,
        "decode": decode2,
        "escape": escape,
        "unescape": decode2
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define(function() {
          return he;
        });
      } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
          freeModule.exports = he;
        } else {
          for (var key in he) {
            has(he, key) && (freeExports[key] = he[key]);
          }
        }
      } else {
        root.he = he;
      }
    })(exports);
  }
});

// src/main.ts
__export(exports, {
  DEFAULT_CALENDAR: () => DEFAULT_CALENDAR,
  DEFAULT_DATA: () => DEFAULT_DATA,
  MODIFIER_KEY: () => MODIFIER_KEY2,
  default: () => FantasyCalendar2
});
var import_obsidian27 = __toModule(require("obsidian"));

// src/settings/settings.ts
var import_obsidian18 = __toModule(require("obsidian"));
var import_fast_copy2 = __toModule(require_fast_copy());

// src/settings/import/importer.ts
var import_distinct_colors = __toModule(require_lib());

// src/utils/functions.ts
function daysBetween(date1, date2) {
  const d1 = window.moment(date1);
  const d2 = window.moment(date2);
  let days = d2.diff(d1, "days");
  if ((d1.year() < d2.year() || d1.dayOfYear() < d2.dayOfYear()) && (d1.hour() > d2.hour() || d1.minute() > d2.minute() || d1.second() > d2.second() || d1.millisecond() > d2.millisecond())) {
    days += 1;
  }
  return days;
}
function wrap(value, size) {
  return (value % size + size) % size;
}
function nanoid(len) {
  return "ID_xyxyxyxyxyxy".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function getIntervalDescription(leapday) {
  if (!leapday.interval?.length)
    return "";
  const intervals = leapday.interval.sort((a, b) => a.interval - b.interval);
  let description = [];
  for (let interval of intervals) {
    const length = interval.interval + (interval.ignore ? 0 : leapday.offset);
    if (interval.exclusive) {
      description.push(`not every ${ordinal(length)} year`);
    } else {
      const index = intervals.indexOf(interval);
      const also = index > 0 && intervals[index - 1].exclusive;
      description.push(`${also ? "also " : ""}every ${ordinal(length)} year`);
    }
  }
  const join = description.join(", but ");
  return join[0].toUpperCase() + join.slice(1).toLowerCase();
}
function ordinal(i) {
  const j = i % 10, k = i % 100;
  if (j == 1 && k != 11) {
    return i + "st";
  }
  if (j == 2 && k != 12) {
    return i + "nd";
  }
  if (j == 3 && k != 13) {
    return i + "rd";
  }
  return i + "th";
}
function dateString(date, months, end2) {
  if (!date || date.day == void 0) {
    return "";
  }
  const { day, month, year } = date;
  if (month != void 0 && !months[month])
    return "Invalid Date";
  if (end2 && end2.day) {
    const endDay = end2.day;
    const endMonth = end2.month;
    const endYear = end2.year;
    if (endMonth != void 0 && endYear != void 0 && month != void 0 && year != void 0) {
      if (year != endYear) {
        return `${months[month].name} ${ordinal(day)}, ${year} - ${months[endMonth].name} ${ordinal(endDay)}, ${endYear}`;
      }
      if (endMonth == month) {
        return `${months[month].name} ${ordinal(day)}-${ordinal(endDay)}, ${year}`;
      }
      if (month != void 0 && year != void 0) {
        return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)}, ${year}`;
      }
      if (month != void 0) {
        return `${months[month].name} ${ordinal(day)}-${months[endMonth].name} ${ordinal(endDay)} of every year`;
      }
      return `${ordinal(day)}-${ordinal(endDay)} of every month`;
    }
  }
  if (month != void 0 && year != void 0) {
    return `${months[month].name} ${ordinal(day)}, ${year}`;
  }
  if (month != void 0) {
    return `${months[month].name} ${ordinal(day)} of every year`;
  }
  return `${ordinal(day)} of every month`;
}

// src/settings/import/importer.ts
var import_he = __toModule(require_he());
var Import = class {
  static import(objects) {
    const calendars = [];
    for (let data of objects) {
      const name = data.name ?? "Imported Calendar";
      const static_data = data.static_data;
      if (!static_data)
        continue;
      const year_data = static_data.year_data;
      if (!year_data)
        continue;
      const firstWeekDay = year_data.first_day - 1;
      const overflow = year_data.overflow ?? true;
      const global_week = year_data.global_week;
      if (!global_week)
        continue;
      const weekdays = global_week.map((n) => {
        return {
          type: "day",
          name: n,
          id: nanoid(6)
        };
      });
      const timespans = year_data.timespans;
      if (!timespans)
        continue;
      const months = timespans.map((m) => {
        return {
          name: (0, import_he.decode)(m.name),
          type: m.type,
          length: m.length,
          id: nanoid(6)
        };
      });
      const avgLength = months.reduce((a, b) => {
        if (b.type == "month") {
          return a + b.length;
        }
        return a;
      }, 0);
      const leapDays = [];
      if ("leap_days" in year_data) {
        for (let leap of year_data["leap_days"]) {
          const interval = leap.interval.split(",") ?? [
            "1"
          ];
          const intervals = interval.map((i) => {
            const ignore = /\+/.test(i);
            const exclusive = /\!/.test(i);
            const interval2 = i.match(/(\d+)/).first();
            return {
              ignore,
              exclusive,
              interval: Number(interval2)
            };
          });
          leapDays.push({
            name: leap.name ?? `Leap Day ${leapDays.length + 1}`,
            type: "leapday",
            interval: intervals,
            timespan: leap.timespan ?? 0,
            intercalary: leap.intercalary ?? false,
            offset: leap.offset ?? 0,
            id: nanoid(6)
          });
        }
      }
      const moons = [];
      if ("moons" in static_data) {
        for (let moon of static_data["moons"]) {
          moons.push({
            name: moon.name ?? `Moon ${moons.length + 1}`,
            cycle: Number(moon.cycle) ?? avgLength,
            offset: moon.shift ?? 0,
            faceColor: moon.color ?? "#ffffff",
            shadowColor: moon.shadow_color ?? "#000000",
            id: nanoid(6)
          });
        }
      }
      const eras = [];
      if ("eras" in static_data) {
        for (let era of static_data["eras"]) {
          eras.push({
            name: era.name ?? `Era ${eras.length + 1}`,
            description: era.description,
            format: era.formatting ?? "Year {{year}} - {{era_name}}",
            start: {
              year: era.date?.year ?? 1,
              month: era.date?.timespan ?? 0,
              day: era.date?.day ?? 0
            }
          });
        }
      }
      const staticData = {
        firstWeekDay,
        overflow,
        weekdays,
        months,
        moons,
        leapDays,
        eras,
        displayMoons: true,
        incrementDay: false,
        displayDayNumber: false
      };
      const dynamicData = {
        year: 1,
        day: 1,
        month: 0
      };
      if (data.dynamic_data) {
        dynamicData.year = data.dynamic_data.year ?? dynamicData.year;
        dynamicData.day = data.dynamic_data.day ?? dynamicData.day;
        dynamicData.month = data.dynamic_data.month ?? dynamicData.month;
      }
      const events = [];
      const existingCategories = new Map();
      if ("categories" in data) {
        for (let category of data.categories) {
          const name2 = category.name;
          const id = name2?.split(" ").join("-").toLowerCase() ?? nanoid(6);
          let color = category.event_settings.color;
          if (!(color in FantasyCalendarColorMap)) {
            color = color.split("-").join("");
            const canvas = createEl("canvas");
            const ctx = canvas.getContext("2d");
            ctx.fillStyle = color;
            color = ctx.fillStyle;
            canvas.detach();
          } else {
            color = FantasyCalendarColorMap[color];
          }
          existingCategories.set(id, { name: name2, id, color });
        }
      }
      if (data.events && Array.isArray(data.events) && data.events.length) {
        for (let event of data.events) {
          const date = {
            day: null,
            year: null,
            month: null
          };
          if (event.data && event.data.date && Array.isArray(event.data?.date) && event.data.date.length) {
            date.day = event.data.date[2];
            date.month = event.data.date[1];
            date.year = event.data.date[0];
          } else if (event.data && event.data.conditions && Array.isArray(event.data.conditions)) {
            const conditions = event.data.conditions;
            try {
              const year = conditions.find((c) => c[0] === "Year");
              const month = conditions.find((c) => c[0] === "Month");
              const day = conditions.find((c) => c[0] === "Day");
              if (year) {
                date.year = Number(year[2][0]);
              }
              if (month) {
                date.month = Number(month[2][0]);
              }
              if (day) {
                date.day = Number(day[2][0]);
              }
            } catch (e) {
            }
          }
          let description;
          if (event.description) {
            const descriptionEl = createDiv();
            descriptionEl.innerHTML = event.description;
            description = descriptionEl.textContent;
          }
          events.push({
            name: event.name,
            description,
            id: event.id,
            note: null,
            date,
            category: existingCategories.get(event.event_category_id)?.id ?? null
          });
        }
      }
      const colors = (0, import_distinct_colors.default)({
        count: existingCategories.size
      });
      for (let id of existingCategories.keys()) {
        const category = existingCategories.get(id);
        if (category.color)
          continue;
        category.color = colors.shift().hex();
        existingCategories.set(id, category);
      }
      const calendarData = {
        name,
        description: null,
        static: staticData,
        current: dynamicData,
        events,
        id: nanoid(6),
        categories: Array.from(existingCategories.values())
      };
      calendars.push(calendarData);
    }
    return calendars;
  }
};
var FantasyCalendarColorMap = {
  "Dark-Solid": "#000000",
  Red: "#9b2c2c",
  Pink: "#880E4F",
  Purple: "#4A148C",
  "Deep-Purple": "#311B92",
  Blue: "#0D47A1",
  "Light-Blue": "#0288D1",
  Cyan: "#006064",
  Teal: "#004D40",
  Green: "#2E7D32",
  "Light-Green": "#7CB342",
  Lime: "#9e9d24",
  Yellow: "#FFEB3B",
  Orange: "#FF9100",
  "Blue-Grey": "#455A64"
};

// src/utils/presets.ts
var PRESET_CALENDARS = [
  {
    name: "Gregorian Calendar",
    description: "A calendar for the real world.",
    static: {
      displayDayNumber: false,
      incrementDay: true,
      displayMoons: true,
      firstWeekDay: 6,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Sunday",
          id: "ID_19ea684b4a08"
        },
        {
          type: "day",
          name: "Monday",
          id: "ID_2928b90ab949"
        },
        {
          type: "day",
          name: "Tuesday",
          id: "ID_0ad9a8f9e95b"
        },
        {
          type: "day",
          name: "Wednesday",
          id: "ID_195a4b290bc9"
        },
        {
          type: "day",
          name: "Thursday",
          id: "ID_abe8c89b0999"
        },
        {
          type: "day",
          name: "Friday",
          id: "ID_2b5b8a79fa4a"
        },
        {
          type: "day",
          name: "Saturday",
          id: "ID_1a78cb79c8cb"
        }
      ],
      months: [
        {
          name: "January",
          type: "month",
          length: 31,
          id: "ID_e9997a780b3a"
        },
        {
          name: "February",
          type: "month",
          length: 28,
          id: "ID_b8c9ebeb0b89"
        },
        {
          name: "March",
          type: "month",
          length: 31,
          id: "ID_b83bda2b9be8"
        },
        {
          name: "April",
          type: "month",
          length: 30,
          id: "ID_29baea7b28ab"
        },
        {
          name: "May",
          type: "month",
          length: 31,
          id: "ID_6a3899fad909"
        },
        {
          name: "June",
          type: "month",
          length: 30,
          id: "ID_384aeb1afa8a"
        },
        {
          name: "July",
          type: "month",
          length: 31,
          id: "ID_48b8cba87b8a"
        },
        {
          name: "August",
          type: "month",
          length: 31,
          id: "ID_fa0b1a6bab8a"
        },
        {
          name: "September",
          type: "month",
          length: 30,
          id: "ID_da880b8af849"
        },
        {
          name: "October",
          type: "month",
          length: 31,
          id: "ID_babba8186968"
        },
        {
          name: "November",
          type: "month",
          length: 30,
          id: "ID_da582bfaf9b9"
        },
        {
          name: "December",
          type: "month",
          length: 31,
          id: "ID_ba1bab4a3a28"
        }
      ],
      moons: [
        {
          name: "Moon",
          cycle: 29.530588853,
          offset: 9.24953,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_a9ab186b1819"
        }
      ],
      leapDays: [
        {
          name: "Leap Day",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 400
            },
            {
              ignore: false,
              exclusive: true,
              interval: 100
            },
            {
              ignore: false,
              exclusive: false,
              interval: 4
            }
          ],
          offset: 0,
          timespan: 1,
          intercalary: false,
          id: "ID_b91ad86a887a"
        }
      ],
      eras: [
        {
          name: "Before Christ",
          description: "",
          format: "Year {{abs_year}} - {{era_name}}",
          start: {
            year: -1,
            month: 0,
            day: 31
          }
        },
        {
          name: "Anno Domini",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ],
      offset: 2
    },
    current: {
      year: null,
      day: null,
      month: null
    },
    events: [
      {
        name: "Summer Solstice",
        description: "At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824599",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824600",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824601",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824602",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Christmas",
        description: "Christmas is a Christian holiday celebrating the birth of Christ. Due to a combination of marketability and long lasting traditions it is popular even among many non-Christians, especially in countries that have a strong Christian tradition.",
        id: "824603",
        note: null,
        date: {
          day: 25,
          year: null,
          month: 11
        },
        category: "christian-holidays"
      },
      {
        name: "Paschal Full Moon",
        description: "The first full moon after march 21st, which is considered the fixed date for the spring equinox.",
        id: "824604",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Easter",
        description: "Easter is considered the most important feast for Christians, celebrating the resurrection of Christ. It is classed as a moveable feast occurring on the first full moon after the spring equinox, which is considered to be fixed at March 21st for the sake of computing the date.",
        id: "824605",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Easter Monday",
        description: "The Monday following the Easter Sunday is often considered part of the Easter Celebration and is a day off in many countries with a strong Christian tradition.",
        id: "824606",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Good Friday",
        description: "Good Friday is the Friday preceding Easter. It comemmorates the crucifixion of Christ according to the Bible.",
        id: "824607",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "Pentecost",
        description: "Celebrated exactly 50 days after Easter, Pentecost is the celebration of the Holy Spirit appearing before the Apostles as described in the Bible.",
        id: "824608",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "christian-holidays"
      },
      {
        name: "New Year's Day",
        description: "New Year's Day marks the start of a new year on the Gregorian Calendar. It starts when the clock strikes midnight and is often celebrated with fireworks, champagne and kissing.",
        id: "824609",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: "secular-holidays"
      },
      {
        name: "Valentine's Day",
        description: "Valentine's day is a celebration of love and romance that is popular across the world. Many more cynically minded people mostly consider it an attempt to monetize the expectation of romantic gestures on the holiday through gift cards, flowers, chocolate and dates.",
        id: "824610",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 1
        },
        category: "secular-holidays"
      },
      {
        name: "Halloween",
        description: 'Halloween is holiday popular in the US, Canada and Ireland that has gradually been adopted by more and more countries. It is often celebrated by people dressing up, usually as something scary. Children will often go from door to door shouting "trick or treat" in the hopes of receiving candy, while adults tend to go to parties.',
        id: "824611",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 9
        },
        category: "secular-holidays"
      },
      {
        name: "Work on the first version of this calendar started.",
        description: "Aecius started work on the first version Gregorian Calendar for Fantasy Calendar on this day.",
        id: "824612",
        note: null,
        date: {
          day: 23,
          year: 2019,
          month: 5
        },
        category: "miscellaneous-events"
      },
      {
        name: "Work on this version of the Gregorian Calendar started.",
        description: "On this day, Aecius started to rework the Gregorian Calendar from scratch to make it work with the updates Wasp and Alex implemented since the summer of 2019.",
        id: "824613",
        note: null,
        date: {
          day: 21,
          year: 2020,
          month: 0
        },
        category: "miscellaneous-events"
      },
      {
        name: "Introduction of the Gregorian Calendar",
        description: "On this day in 1582 the Gregorian calendar was officially introduced, following Thursday October 4th on the Julian Calendar",
        id: "824614",
        note: null,
        date: {
          day: 15,
          year: 1582,
          month: 9
        },
        category: "historical-events"
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Christian Holidays",
        id: "christian-holidays",
        color: "#9b2c2c"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#0D47A1"
      },
      {
        name: "Historical Events",
        id: "historical-events",
        color: "#455A64"
      },
      {
        name: "Miscellaneous Events",
        id: "miscellaneous-events",
        color: "#0288D1"
      }
    ]
  },
  {
    name: "Calendar of Greyhawk",
    description: "Calendar of the world of Greyhawk.",
    static: {
      displayDayNumber: false,
      incrementDay: false,
      displayMoons: true,
      firstWeekDay: 0,
      overflow: false,
      weekdays: [
        {
          type: "day",
          name: "Starday",
          id: "ID_a8e979984938"
        },
        {
          type: "day",
          name: "Sunday",
          id: "ID_1b68bb78ca1b"
        },
        {
          type: "day",
          name: "Moonday",
          id: "ID_c8b86aea0998"
        },
        {
          type: "day",
          name: "Godsday",
          id: "ID_b8097a18e95b"
        },
        {
          type: "day",
          name: "Waterday",
          id: "ID_1918c99949ca"
        },
        {
          type: "day",
          name: "Earthday",
          id: "ID_fa295a1bab89"
        },
        {
          type: "day",
          name: "Freeday",
          id: "ID_6a485ada3ae8"
        }
      ],
      months: [
        {
          name: "Needfest",
          type: "month",
          length: 7,
          id: "ID_b8a9e9da8a48"
        },
        {
          name: "Fireseek",
          type: "month",
          length: 28,
          id: "ID_39b90bd8189a"
        },
        {
          name: "Readying",
          type: "month",
          length: 28,
          id: "ID_48a9081ad839"
        },
        {
          name: "Coldeven",
          type: "month",
          length: 28,
          id: "ID_5a7b6beadb68"
        },
        {
          name: "Growfest",
          type: "month",
          length: 7,
          id: "ID_48c8d82b1908"
        },
        {
          name: "Planting",
          type: "month",
          length: 28,
          id: "ID_081a793a49da"
        },
        {
          name: "Flocktime",
          type: "month",
          length: 28,
          id: "ID_eb68a89a0a2a"
        },
        {
          name: "Wealsun",
          type: "month",
          length: 28,
          id: "ID_9b3a098ae908"
        },
        {
          name: "Richfest",
          type: "month",
          length: 7,
          id: "ID_f99b4b3a08b8"
        },
        {
          name: "Reaping",
          type: "month",
          length: 28,
          id: "ID_ebe9eb68ea39"
        },
        {
          name: "Goodmonth",
          type: "month",
          length: 28,
          id: "ID_fb3b6af9895b"
        },
        {
          name: "Harvester",
          type: "month",
          length: 28,
          id: "ID_395bcb399b8a"
        },
        {
          name: "Brewfest",
          type: "month",
          length: 7,
          id: "ID_e8b908181afa"
        },
        {
          name: "Patchwall",
          type: "month",
          length: 28,
          id: "ID_cbda3b399969"
        },
        {
          name: "Ready'reat",
          type: "month",
          length: 28,
          id: "ID_592a2a690bf8"
        },
        {
          name: "Sunsebb",
          type: "month",
          length: 28,
          id: "ID_39e8faf8e9b8"
        }
      ],
      moons: [
        {
          name: "Luna",
          cycle: 28,
          offset: 3,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_f8997b39b8b8"
        },
        {
          name: "Celene",
          cycle: 91,
          offset: 46,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_7afbb9b88be8"
        }
      ],
      leapDays: [],
      eras: [
        {
          name: "Common Year",
          description: "",
          format: "Year {{year}} CY",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ]
    },
    current: {
      year: 591,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824573",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The 4th of Growfest is the first day of Low Summer in Oerth's Calendar. This is the point where the sun crosses Oerth's equator. Holidays celebrated on this date include Saint Cuthbert's Day, the Feast of Edoira, the Spring Feast, and Raxivort's Orgy. This is also the day on which the priests of Tlaloc ritually sacrifice and eat the flesh of human children or babies in their patron's honor. Worshippers of Rillifane Rallathil celebrate the Budding on this day, a joyful celebration of new life celebrated through dance and song in oak groves in the heart of the forest. A ritual hunt of a noble heart is held on this day, after which the venison is eaten in celebration of Rillifane's bounty.\n\nAlso celebrated on this date is the Sanctification of Renewal, a sacred holiday to the followers of Garyx.",
        id: "824574",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Summer Solstice",
        description: "	At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824575",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The 4th of Brewfest is the Autumnal Equinox, when the sun crosses the equator from north to south. This date is the official end of high summer and the beginning of autumn on the Greyhawk Calendar. This date is holy to Wenta and is sometimes regarded as an unofficial holy day of Velnius. Among the xvarts, it also marks the celebration of Raxivort's Orgy. The worshippers of Rillifane Rallathil celebrate the Transformation on this day, a time of dancing and spiritual rebirth marking the beginning of autumn and the promise that spring will come again.",
        id: "824576",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Great Moons Glory",
        description: "The night of Great Moon's Glory on Readying 11th, when Luna is full but Celene is new. It is holy to Celestian, and a time when offerings are left to Atroa to beg her to come early and to Telchur to request that he peacefully leave. Druids of the Old Faith are known to also hold this night as auspicious, but few outside their circles know the details.",
        id: "824577",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Dark Night",
        description: "Dark Night, also called Black Night, Star Night, and the Night of Hopeful Dawn, is observed on Goodmonth 11. It is a holy night for the church of Celestian because the stars are so easy to observe without the light of one of the moons getting in the way.\n\nIt is also a holy night for the church of Rao, who refer to it as the Night of Hopeful Judgment. They believe that Rao chooses this time to separate the sinful from the righteous in the afterworld. There is also a prophecy in the Raoan holy text, the Book of Incarum, that claims that Rao will cleanse the world of evil on this night, sometime in the future.\n\nThe priesthood of Kurell consider it holy, too, calling it Kurell's Night, requiring the faithful to undertake special missions on this night to prove their cleverness and skill. Kurell smiles particularly on acts of theft or vengeance performed on his holy night, blessing those who do so successfully. Donations to Kurell's church are encouraged afterwards, for Kurell may take vengeance against those who do not properly thank him for his aid.\n\nMost other people regard Dark Night as a time of ill omen, fearing it as much as the night of the Blood Moon Festival. Bonfires are burned from dusk till dawn, particularly in small villages and in Elmshire and Narwell. Orc and goblin religions view it as an excellent night for raiding settlements. Certain evil cults perform kidnappings, murders, and vile rites during this period. On the other hand, lycanthropic activity is at its lowest.\n\nIggwilv and Tuerny attempted to summon a demonic army to Luna on this night in 585 CY.",
        id: "824578",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Agelong",
        description: "Agelong, observed on the 4th of Richfest (the Summer Solstice), is the celebration of the legendary creation of the elves. According to myth, after Corellon Larethian spilled his blood during the battle with Gruumsh, the rest of the Seldarine gathered this sacred blood and mingled it with the tears shed during the same battle by Sehanine Moonbow. The Seldarine then infused these divine fluids into vessels they had created to be the bodies of the elven race.\n\nThis day is, among the elves, mostly an excuse to go orc-hunting. Elven warriors cut themselves with daggers carved from volcanic glass to remind themselves of Corellon's own wound from Gruumsh's spear, then strive to slaughter as many orcs as possible during the night.",
        id: "824579",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Blood Moon Festival",
        description: "The Blood Moon Festival is celebrated on Coldeven 11, the night when Luna is full just before the Spring Equinox. On this night, curses are said to be twice as powerful and the forces of evil are at their strongest. Fiends roam the lands, and human sacrifice is common. This night is held especially sacred by cultists of Nerull, but worshipers of Kurell also mark this night as especially auspicious for acts of vengeance. Goodly folk superstitiously guard their homes with horseshoes, holy water, bottles of milk, and iron filings.\n\nDemonic forces sent by Iuz destroyed the leadership of the Horned Society during the Blood Moon Festival of 583 CY.\n\nIt's possible that this is also the night the elves celebrate as Faerieluck.",
        id: "824580",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Breadgiving Day",
        description: `Celebrated on on the Winter Solstice (Needfest 4), Breadgiving Day, is a day of charity observed in the Free City of Greyhawk by the faiths of Pelor, Rao, and Saint Cuthbert.

This was not originally a religious holiday as such. It is a new practice that began after the Greyhawk Wars to feed the refugees that flooded the city during that time. Since of Old City who line up by the hundreds along the Processional from the Black Gate. The booths are worked by low-ranking priests from all three religions, with armed priests of St. Cuthbert providing security. A smaller event is held simultaneously below Wharfgate in Greyhawk City's Shacktown.

The clergies of Heironeous, Pholtus, and Trithereon do not participate, but they compete with one another to perform good deeds the whole week of Needfest. The rivalries between Trithereon and Pholtus, Trithereon and Heironeous, and Pholtus and St. Cuthbert are such that the faiths sometimes fall into arguments and even blows if their "good deeds" conflict with each other. Greyhawk's rowdy citizens often cheer and place bets on the outcomes of these quarrels.

The priests of Pelor hold a morning ceremony on this day with a sermon, singing, and music.`,
        id: "824581",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Brewfest",
        description: `Also called Drunken Days or the Feast of Brewers, Brewfest, the fourth festival week of Oerth's calendar, is a rowdy period unsurprisingly claimed as a holy time by the churches of Olidammara and Wenta. The Free City of Greyhawk does not celebrate the entire week, but Brewfest 1 and Brewfest 7 are both set aside as public holidays. In Elmshire, the week is spent in restful, carefree music, drinking, and dancing. In Hardby it is spent with fistfights, riots, and ensuing hangovers. In Narwell it is celebrated with ale-brewing contests, horse races, beatings, and robbery. In Safeton it is celebrated with nervous violence and nightly orc hunts. The week is also sacred to the Old Faith.

The elves call this week Fallrite, and use it to contemplate the spirits of their ancestors, the passage to the afterworld, and the fragility of life. They believe other races make merry during Brewfest because they are "hiding" to avoid facing death's reality. In contrast, the olvenfolk strive to fulfill the most important of their duties and reach the most crucial of their decisions during this time of year. The elven kings and queens traditionally judge capital cases during Fallrite.`,
        id: "824582",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 12
        },
        category: null
      },
      {
        name: "Faerieluck",
        description: "Faerieluck is a holiday celebrated by the elves in early spring, when the power of Faerie runs high and they celebrate with their fey cousins: the sprites, buckawns, pixies, nymphs and so forth. The point of the festival is to remind the elves of their ancient kinship with these creatures. The day is spent playing practical jokes, engaging in battles of wit, and general merriment.",
        id: "824583",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Feast of Edoira",
        description: "The Feast of Edoira is a holiday celebrated in the Domain of Greyhawk on Growfest 4, during the Spring Equinox. It is named after Edoira, a priest of Rao who centuries ago established the Edoiran Compact, a pact by which many of the lawful good-aligned faiths and people of the Domain could agree to cooperate. The Compact was later extended to non-lawful good and neutral faiths.\n\nEdoira was never deified but was revered by many good faiths in the Domain. The holiday was marked by religious services on Godsday of Growfest led by the clerics of the good faiths who partook of the Compact, and secular festivals by the ordinary citizenry. Observance of the holiday has declined over the years, though the clergies of Rao and Pelor still hold their traditional interfaith services, with occasional participation by the priesthoods of Heironeous and Mayaheine. Since the end of the Greyhawk Wars most of the Domain's outlying communities no longer observe the holiday. Only one church in Safeton still does so.",
        id: "824584",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Desportium of Magic",
        description: "The highlight of Growfest is the Desportium of Magic. During this day torchlight only, no magic illumination is supposed to be used. Wizards and Sorcerers then perform feats of illusion and magic trying to outdo one another with their displays. Usually there is a panel of judges to decide, in the larger cities there is usually a limit of 5-person teams competing. Each performance during the Desportium of Magic uses a long established theme, that of an attack on the town by various monsters and Dark Elves, repelled by brave warriors and spellcasters. The displays, made up of any number of spells cast without the use of magic devices, cannot actually cause any harm to property or people, but must be as wonderful, striking, detailed, and lifelike as possible.\n\nThis motif is based on actual attacks through the years from the Uttermost War to the most recent Great Slave Raids. The idea is to make the attackers as dreadful as possible and the defenders as heroic as possible, secondary is to make sure that people will always remember the terror of the Uttermost War. In large cities like the CSIO and CSWE and Tarantis, these performances last all night and are amazing to watch. In smaller villages without spellcasters, puppet plays are often done in its stead.",
        id: "824585",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Holy Day of Pelor",
        description: "The Holy Day of Pelor, also known as Giving Day and Midsummer's Day, is celebrated on the Summer Solstice.\n\nBecause Pelor is widely loved by the commoners, this day is set aside as a day of rest in the Free City of Greyhawk. Only essential work is done on this day. Many merchants close their shops on Giving Day as well out of respect for the Sun Father and his teachings. Gambling houses are closed, but not hostelries, for Giving Day is a day of feasting and goodwill, a time for enjoying the fruits of the Oerth.\n\nPublic services are held from dawn until noon by Pelor's priests, outdoors if the weather permits (which if almost always does, as the clerics use weather-controlling magic for maximum sunlight). Even Greyhawk City's large temple of Pelor is not big enough to hold the throngs who come to celebrate on this day, so throngs of the faithful fill the temple grounds in the Garden Quarter, spilling out from the Millstream to the Nobles' Wall, and to the road leading toward Greyhawk's Grand Theater. Many come, of course, for the free meal the priests provide after the service. The Pelorian priests are well aware of this, but believe that for the needy, a full stomach must come before wisdom and learning. Members of Greyhawk's Guild of Thieves and Beggar's Union, many of whom remember Midsummer's Day fondly from their orphaned childhoods, both protect priests of Pelor on this day, and woe onto those who attempt to test them on this matter.\n\nPriests of Pelor, bedecked in yellow and gold, parade about the streets, demanding donations for their charitable works, freely using guilt to squeeze more from stingy purses. Free healings are given out, particularly to children. Most Greyhawkers wear at least one item of yellow cloth on this day out of respect.\n\nSome crusading Pelorians crusade against evil lycanthropes on this night, since both Celene and Luna are full.",
        id: "824586",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Holy Day of Serenity",
        description: "The Holy Day of Serenity, on Reaping 10, is celebrated in Veluna as a holy day of Rao, though it's actually the anniversary of Veluna's secession from Furyondy in 476 CY. It is celebrated with religious singing and worship.",
        id: "824587",
        note: null,
        date: {
          day: 10,
          year: null,
          month: 9
        },
        category: null
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Religious Holidays",
        id: "religious-holidays",
        color: "#FFEB3B"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#0D47A1"
      },
      {
        name: "Magical Events",
        id: "magical-events",
        color: "#311B92"
      },
      {
        name: "Miscellaneous Events",
        id: "miscellaneous-events",
        color: "#0288D1"
      }
    ]
  },
  {
    name: "Calendar of Golarion",
    description: "Calendar for the world of Pathfinder.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Moonday",
          id: "ID_db8af8f85b8a"
        },
        {
          type: "day",
          name: "Toilday",
          id: "ID_f87a094b2849"
        },
        {
          type: "day",
          name: "Wealday",
          id: "ID_2a5bb88b3ae8"
        },
        {
          type: "day",
          name: "Oathday",
          id: "ID_c93a0be8981b"
        },
        {
          type: "day",
          name: "Fireday",
          id: "ID_2b7b59794a0b"
        },
        {
          type: "day",
          name: "Starday",
          id: "ID_baaa6a89ca1b"
        },
        {
          type: "day",
          name: "Sunday",
          id: "ID_f9baca088b28"
        }
      ],
      months: [
        {
          name: "Abadius",
          type: "month",
          length: 31,
          id: "ID_dad9da89f818"
        },
        {
          name: "Calistril",
          type: "month",
          length: 28,
          id: "ID_980a88cb9b68"
        },
        {
          name: "Pharast",
          type: "month",
          length: 31,
          id: "ID_a9c96ac80908"
        },
        {
          name: "Gozran",
          type: "month",
          length: 30,
          id: "ID_a99a697b9abb"
        },
        {
          name: "Desnus",
          type: "month",
          length: 31,
          id: "ID_8bcad9a8f84a"
        },
        {
          name: "Sarenith",
          type: "month",
          length: 30,
          id: "ID_484a49a998db"
        },
        {
          name: "Erastus",
          type: "month",
          length: 31,
          id: "ID_9a48e9b96938"
        },
        {
          name: "Arodus",
          type: "month",
          length: 31,
          id: "ID_bbe99b2afaea"
        },
        {
          name: "Rova",
          type: "month",
          length: 30,
          id: "ID_ba39fbe8c8b8"
        },
        {
          name: "Lamashan",
          type: "month",
          length: 31,
          id: "ID_69d93ba9dba8"
        },
        {
          name: "Neth",
          type: "month",
          length: 30,
          id: "ID_4ad8fb79eb6a"
        },
        {
          name: "Kuthona",
          type: "month",
          length: 31,
          id: "ID_9a3a8b388939"
        }
      ],
      moons: [
        {
          name: "Somal",
          cycle: 29.5,
          offset: 9.5,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_b87ab959cac9"
        }
      ],
      leapDays: [
        {
          name: "Leap Day",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 8
            }
          ],
          offset: 0,
          timespan: 1,
          intercalary: false,
          id: "ID_88c8da3b8b2b"
        }
      ],
      eras: [
        {
          name: "Age of Serpents",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 4720,
            month: 8,
            day: 15
          }
        },
        {
          name: "Age of Darkness",
          description: "",
          format: "Year {{abs_year}} - {{era_name}}",
          start: {
            year: -5300,
            month: 0,
            day: 1
          }
        },
        {
          name: "Age of Anguish",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -4500,
            month: 8,
            day: 1
          }
        },
        {
          name: "Age of Destiny",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -3500,
            month: 8,
            day: 1
          }
        },
        {
          name: "Age of Enthronement",
          description: "",
          format: "Year {{year}} AR - {{era_name}}",
          start: {
            year: 1,
            month: 8,
            day: 1
          }
        },
        {
          name: "Age of Lost Omens",
          description: "",
          format: "Year {{year}} AR - {{era_name}}",
          start: {
            year: 4606,
            month: 8,
            day: 1
          }
        }
      ]
    },
    current: {
      year: 4720,
      day: 15,
      month: 0
    },
    events: [
      {
        name: "Summer Solstice",
        description: "At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824492",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824493",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824494",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The equinox marks the day and the night is equally as long.",
        id: "824495",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Eternal Kiss",
        description: "Zon-Kuthon\n\nCulminating on the first new moon of the new year, the Eternal Kiss is an 11 day ceremony honoring Zon-Kuthon. On the final day, a living sacrifice is made to the Dark Prince, after the victim is pampered and pleasured for the ten days prior. The sacrifice can either be an enemy or a great devotee of the church, and is kept alive for as long as possible during the torture using magic. This holiday often involves fortune-telling as a part of the torture, using the victim's entrails or their cries of pain to determine the Midnight Lord's will. Occasionally it is believed that the sacrifice will prophesy with the voice of Zon-Kuthon himself.",
        id: "824496",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Longnight",
        description: "Longnight is a holiday celebrated on the full moon in the winter month of Abadius. During the festival, revelers stay up all night to greet the dawn to defy the long winter months. It is even celebrated in Irrisen, where there are no natural seasons.",
        id: "824497",
        note: null,
        date: {
          day: null,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Foundation Day",
        description: "Absalom, Milani\n\nFoundation Day is a civil holiday celebrated on the New Year (1 Abadius) in Absalom to commemorate the city's founding by the god Aroden in 1 AR.",
        id: "824498",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Pjallarane Day",
        description: "Irrisen\n\nPjallarane Day is an ancient holiday in Irrisen celebrated on 1 Abadius (New Year's Day). Every 100 years, Baba Yaga returns to Golarion to remove her daughter from the throne of Irrisen, and put another daughter on the throne instead. In 3713 AR the third Queen of Irrisen, Pjallarane, and her children chose to resist. Baba Yaga ruthlessly crushed the rebellion in a single day, which is now celebrated as a holiday. The festival includes feasting and the burning of effigies of tar and straw. This is a reminder of the fate of Pjallarane's followers, who were burned alive as a warning to all those who would oppose Baba Yaga.",
        id: "824499",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Vault Day",
        description: "Abadar\n\nVault Day is a holiday held on 6 Abadius in honor of Abadar, Master of the First Vault.",
        id: "824500",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Ruby Prince's Birthday",
        description: "Osirion\n\nThe Ruby Prince's Birthday is a national holiday in Osirion in honor of the birthday of Khemet III, the Ruby Prince. It is celebrated annually on the 20 Abadius.",
        id: "824501",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Merrymead",
        description: "Druma, Cayden Cailean\n\nA holiday occurring on 2 Calistril, Merrymead was started in Druma and is supposed to be a time to share of the last of the previous year's mead with the rest of the community.\n\nIn current times, most people just use it as an excuse to drink excessively. The poor travel from bar to bar drinking whatever alcohol they can afford, while the wealthy will set aside specific vintages for this day. A known consequence of this day are 'mead riots' that happen when there are more celebrants than there is alcohol to serve them. This leads to a violent, destructive group of people in a crowded bar. If this is a common occurrence for particular cities, they may reinforce their guard force for the inevitably eventful night.",
        id: "824502",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "King Eodred II's Birthday",
        description: "Korvosa\n\nKing Eodred II's Birthday was a local holiday in the Varisian city-state of Korvosa and was celebrated on 16 Calistril. It commemorated the birthday of its former ruler, King Eodred Arabasti II, who decreed that on the day, scantily clad women would dance and serve free wine to celebrants.",
        id: "824503",
        note: null,
        date: {
          day: 16,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "Loyalty Day",
        description: "Cheliax, Asmodeus\n\nLoyalty Day is a holiday in the nation of Cheliax commemorating the date on Calistril 19, 4640 AR when House Thrune signed the Treaty of Egorian, declaring it the victor in the Chelish Civil War and ruler of the empire. Because of House Thrune's well-known ties to the infernal, this holiday is also observed by the Church of Asmodeus who consider it a feast day. The church along with local governments provide a free meal to all citizens to remind them of the benefits House Thrune provides them with.",
        id: "824504",
        note: null,
        date: {
          day: 19,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "Fateless Day",
        description: "Mahathallah\n\nFollowers of Mahathallah mark each leap day as Fateless Day, when the River of Souls temporarily stops and souls can escape Pharasma's judgment. They perform many sacrificial and suicidal rituals on Fateless Day.",
        id: "824505",
        note: null,
        date: {
          day: 29,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "Golemwalk Parade",
        description: "Magnimar, Varisia\n\nThe Golemwalk Parade is a parade of golems created by amateurs hoping to win a monetary grant, or even a job, from the Golemworks in Magnimar. At the end of the parade along the Avenue of Honors, the constructs are judged.",
        id: "824506",
        note: null,
        date: {
          day: null,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Day of Bones",
        description: "Pharasma\n\nPriests and worshipers of the Lady of Graves parade the bodies of the recently dead on this holiday, holding free burials afterwards.",
        id: "824507",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Sable Company Founding Day",
        description: "Korvosa\n\nSable Company Founding Day is a holiday marking the founding of the Sable Company of the Varisian city-state of Korvosa. Celebrated on 6 Pharast, the day is marked by somber military parades that generally preclude the consumption of alcohol, a staple on most other holidays.",
        id: "824508",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Night of Tears",
        description: "Solku\n\nThe Night of Tears held annually on 7 Pharast in the Katapeshi town of Solku. It is a solemn vigil commemorating those lost in the Battle of Red Hail in 4701 AR.",
        id: "824509",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Kaliashahrim",
        description: "Qadira\n\nKaliashahrim is a national holiday celebrated on Pharast 13 in Qadira that celebrates the Padishah Emperor of distant Katheer, and Qadira's loyalty to him.",
        id: "824510",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Conquest Day",
        description: "Nex\n\nEvery year, on the 26th of Pharast, Elder Architect Oblosk \u2014 oldest member of Nex's Council of Three and Nine \u2014 ascends to the highest balconies of the Bandeshar in Quantium. In a voice made thunderous by the platform's magic, the wizened pech councilman spends the hours from dusk to just past noon enumerating the atrocities committed by the necromancers of Geb upon the people of Nex, culminating with the disappearance of the archwizard Nex himself. At the conclusion of this record of national wounds, the country's eleven other council members join Oblosk in renewing their yearly vow to neither forget nor forgive the Gebbites' atrocities and to again swear in their lost ruler's name to endlessly wage war against their ancient enemies.\n\nOn this day, known as Conquest Day, all the people of Nex are expected to share in their leaders' oaths, to celebrate the shared patriotism of their wondrous nation, and to remember the sacrifices of heroes past. This also makes it a day for many Nexian wizards to reveal deadly new spells, gigantic constructs, and audacious arcane masterworks\u2014which many creators promise to be the doom of their foes. Even throughout the rest of the Inner Sea region, many crusaders, rebels, and zealots observe Conquest Day as a day to renew blood oaths, launch long-planned battles, and finally take revenge. It is a day for words of honor, a day for battle cries, and a day where glory most favors the bold.",
        id: "824511",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Days of Wrath",
        description: "Asmodeus, Cheliax\n\nThe Days of Wrath, or Dies Irae, are a holiday celebrated on both solstices and equinoxes in the nation of Cheliax and wherever Asmodeus is worshiped. They are primarily a national holiday and not truly a religious one, but the two are often confused due to Cheliax's current political climate. Various contests and blood sports are held on these days, promoting those elites who can clearly demonstrate their superiority over others. Some believe that these competitions are watched and judged by devils themselves. In the parts of the world where the Prince of Darkness is not openly venerated, these holidays take on a different tone: they are used to settle old grievances and also to end contracts.\n\nIn these days, bloodsports are organized into cities' stadiums. Slaves and servants of any master may choose to enter the arena for one-on-one bloody battles to the death. Free men and women of all classes are free to enter the arena as well. The entrants fight in rounds until at last one stands alone. The winner is granted freedom from slavery or servitude, erasure of all debts, and a purse of gold.\n\nThe winter solstice sees the culmination of the Dies Irae, with all the winners of the three previous bouts summoned to Egorian to fight to the death for the amusement of the nobles. The winner is given a title of baronet and a plot of land.",
        id: "824512",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Firstbloom",
        description: "Gozreh\n\nFirstbloom is a holiday celebrating the first planting of the agricultural season, and generally associated with the weather god Gozreh. It falls on the vernal equinox. Many farming communities see it as the beginning of the year, even though conventional calendars begin two months earlier. Despite weariness after a full day planting, many farming communities hold celebrations come the night: feasting, dancing and courtship feature showing the cycle of nature.",
        id: "824513",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "First Cut",
        description: "Falcon's Hollow\n\nThe First Cut celebration in Falcon's Hollow used to mark the start of the work in the woods each spring. Now, however, it is a meaningless ramshackle ceremony as Thuldrin Kreed forces the lumber crews to work through even during the coldest months in the winter. Still, First Cut brings people out to celebrate the start of the spring.",
        id: "824514",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Currentseve",
        description: "Gozreh\n\nOn this religious holiday, all who travel on the water make offerings to Gozreh in the hopes of safe passage for the coming year.",
        id: "824515",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Taxfest",
        description: "Abadar\n\nNo one enjoys paying taxes but the collection of fair taxes is considered an integral part of the maintenance of society, and is therefore holy to the god Abadar. Every year on the 15th of Gozran, priests of the church of Abadar spend the day walking city streets, doing what they can to make the bitter pill of annual taxes a bit easier to swallow.\n\nThe Business of the Day\n\nFrom dawn to dusk, clerics of Abadar attend the tax collectors of sizeable communities as the tax wagons roll from door to door. The church officials monitor these activities to make sure that the process is conducted respectfully and justly, and that citizens know that the process is monitored. More than just aiding in the yearly errand, the faithful personally thank every citizen for contributing to the improvement of their city, extol the public works funded by their contributions, and foretell the grandeur of civic projects to come. The disenfranchised and destitute they attempt to comfort as best they can, quoting from their god's dogma on work and worthiness, but this is not a day for discounts or deferrals. The citizens are able to voice their concerns and ideas as to where the monies levied should best be applied. Citizens are free to speak their mind on any issue here without fear of repercussion.\n\nThe Celebrations of the Day\n\nAt dusk, the Abadarans host several celebrations in parks, plazas, and other communal areas about the city, organizing donations and contributions from local vendors to feed and entertain all-comers. Having already preached to most of the city over the course of the day, the clerics perform only a brief opening ceremony, dedicating the feast to Abadar, the city, and its great people. These celebrations are often quite distinct from neighbourhood to neighbourhood and are almost always divided along economic boundaries.\n\nThe festivities involving the wealthiest citizens usually happen on the steps of city hall or other grand civic buildings and feature the best music and food, but often little more than polite card and guessing games. These galas usually wrap up by midnight.\n\nFor the common folk, the parks and marketplaces take on a carnival atmosphere, with simple but good food, local ales, performances by talented citizens, and games of chance going on well into the night. A prevailing superstition through these festivals is that, during the celebration, it is lucky to kiss\u2014or in some regions, pinch\u2014a cleric of Abadar, leading to many a rosy-cheeked cleric.\n\nEven the city's poor are given reason to celebrate, as the local temple of Abadar hosts a cheery but unabashedly religious gathering on its steps, feeding all comers, doling out a hearty ration of wine, singing hymns of the faith, and providing tokens for a second wine ration for any who return to attend a service within the month.\n\nFor a holiday that revolves around paying taxes, this Abadaran festival is not as reviled as one might expect.",
        id: "824516",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Wrights of Augustana",
        description: "Andoran, Brigh\n\nThis local festival in the Andoran port city of Augustana is held to honor and celebrate the local shipbuilding industry as well as the navy. The mathematics and engineering required for the building of the ships is praised by Brigh's faithful.",
        id: "824517",
        note: null,
        date: {
          day: 16,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Gala of Sails",
        description: "Absalom\n\nOne of two local festivals where kite-battlers compete.",
        id: "824518",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Remembrance Moon",
        description: "Iomedae, Lastwall, Ustalav\n\nA national holiday to commemorate those who died in the Shining Crusade against the Whispering Tyrant. Although not strictly a religious holiday, Iomedae's name is heavily invoked, due to her many military accomplishments during the war.",
        id: "824519",
        note: null,
        date: {
          day: null,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Angel Day",
        description: "Magnimar, Varisia\n\nAngel Day is a local Magnimarian holiday celebrated on 31 Desnus. The annual celebration marks the founding of the city, and its founders' flight from Korvosa. It also honors the presence and popular worship of the empyreal lords, which predates the city by centuries. During the festival, nearly all local businesses shut their doors and the citizens take part in countless feasts, masquerade balls dressed as angels, and the burning of devil effigies meant to symbolize infernally-influenced Korvosa.",
        id: "824520",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Old-Mage Day",
        description: "Holiday celebrating Old-Mage Jatembe, the father of Garundi magic.",
        id: "824521",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Multiple Events",
        description: "Festival of the Ruling Sun\n\nShizuru\n\nCelebrates the longest day.\n\nFounder's FollyUlar Kel\n\nAdventurers and children follow a hallucinatory red stripe along zigzagging paths, amusing residents.\n\nHarvest Bounty Festival\n\nSegada\n\nMarking the beginning of the harvest season, this festival involves sporting tournaments, dancing, storytelling, and feasts. Celebrants give thanks and eliminate grudges.\n\nLongwalk\n\nGrandmother Spider, Nurvatchta; southern hemisphere winter solstice\n\nCelebrates the escape of Nurvatchta's anadi people from bondage, in part thanks to Grandmother Spider lengthening their cover of darkness in their escape.\n\nRitual of Stardust\n\nDesna\n\nFestival held in the evening and through the night, where Desna's faithful sing songs and throw sand and powdered gems into bonfires.\n\nRunefeast\n\nMagrim\n\nDay marking the day dwarves learnt the first runes and the proper way to pray.\n\nSunwrought FestivalSarenrae, Brigh\n\nDay commemorating the defeat of Rovagug by Sarenrae, celebrated with the flying of kites, fireworks, and gift giving.",
        id: "824522",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Burning Blades",
        description: "Sarenrae\n\nThe holy, month-long festival ends on this day, featuring dances with flaming blades.",
        id: "824523",
        note: null,
        date: {
          day: 10,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Liberty Day",
        description: "Andoran, Milani\n\nHoliday celebrating Andoran's independence. Milanites celebrate that very little violence occurred.",
        id: "824524",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Talon Tag",
        description: "Andoran\n\nThe Eagle Knights perform aerial displays in Almas on this day.",
        id: "824525",
        note: null,
        date: {
          day: 21,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Riverwind Festival",
        description: "Korvosa\n\nAn early summer holiday that honors a cooling shift in the winds, celebrated with much drinking.",
        id: "824526",
        note: null,
        date: {
          day: 22,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "Inheritor's Ascendance ",
        description: "Iomedae\n\nInheritor's Ascendance, originally called 'Herald's Day', honours the day that Iomedae was chosen by the god Aroden to become his herald (thus replacing Arazni), thus boosting her power beyond that of a fledgling goddess. This holiday was renamed after the demise of Aroden.",
        id: "824527",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "First Crusader Day",
        description: "Mendev\n\nHoliday in celebration of the continuing crusade against the demons of the Worldwound.",
        id: "824528",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Day of Silenced Whispers",
        description: "Ustalav\n\nThe Day of Silenced Whispers is an Ustalavic holiday celebrated every 9 Arodus marking the defeat of the Whispering Tyrant in 3827 AR by the coalition forces of the Shining Crusade and the liberation of the country after centuries of undead domination.",
        id: "824529",
        note: null,
        date: {
          day: 9,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Founding Day",
        description: "Ilsurian, Varisia\n\nFestival celebrating the founding by Ilsur of the town of Ilsurian in 4631 AR.",
        id: "824530",
        note: null,
        date: {
          day: 10,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Armasse",
        description: "Aroden, Iomedae, Milani\n\nThe raucous, week-long festival known as Armasse is held each year beginning on 16 Arodus. The celebration \u2014 once dedicated to the god Aroden \u2014 is still important to the faithful of Iomedae, who use it to train commoners in combat, ordain apprentice clergy, pick squires for knights, and teach military history, hoping to prevent the mistakes of the past from being repeated. Among those not dedicated to the Inheritor the holiday has lost most of its religious significance since Aroden's death, tending now only toward wild partying, a fact that has precluded the diabolist authorities of Cheliax from prohibiting Armasse outright. Nevertheless, in places where the church of Asmodeus is openly allowed, it hosts special activities for its parishioners during the same week in an effort to counter the influence of the holiday. The city of Corentyn is especially known for its extravagant Armasse festivities.",
        id: "824531",
        note: null,
        date: {
          day: 16,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Saint Alika's Birthday",
        description: "Korvosa\n\nQuiet holiday honoring the birth of Saint Alika the Martyr.",
        id: "824532",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Archerfeast",
        description: `Erastil

Archer's Day or Archerfeast is a holiday of the god Erastil held annually on the 3rd of Erastus. Despite the holiday's origins in the worship of Erastil, common country folk from the Lands of the Linnorm Kings to Taldor celebrate the height of summer with a day set aside for establishing new relationships, enjoying current camaraderie, and celebrating the gifts of the gods. Archery competitions are held frequently in which the men test their skill with the bow through progressively harder trials. The exact form of competition is different from place to place, and the winner is awarded a rack of elk horns and a quiver of blessed arrows. He is also given the title of "Protector", which he holds until the next year.

While the festival's traditions emphasize contests of marksmanship, most have expanded to exhibit talents of all types, from baking and storytelling to racing and mock combat. Aside from encouraging a fair-like atmosphere, many of the displays and competitions serve one of two secondary purposes: either as a way for merchants to show off their superior livestock and wares, or (more popularly) as a way for eligible men and women to show off to each other.

While the day's events at most Archerfeast fairs are filled with games, food, and crafts, the night brings dancing, drinking, pranks, and the crowning of the princes and princesses of spring and summer for the two single youths and two single adults who fared best in the day's events. The festivities continue late into the evening, but end promptly at midnight, so that in true Erastilian fashion the next day's responsibilities are not overly impeded. For those not of Erastil's flock, however, private parties, drinking, and trysting carry on long into the next morning.`,
        id: "824533",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Founding Festival",
        description: "Korvosa\n\nFounding Festival is a local Korvosan celebration marking the establishment of the city in 4407 AR. Held annually on 14 Erastus, the festival is a chance for the citizens to let off some steam, drink copiously, and watch magical light shows late into the night.",
        id: "824534",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Burning Night",
        description: "Razmiran\n\nItems or people who have transgressed against the god-king of Razmiran are burned on this day.",
        id: "824535",
        note: null,
        date: {
          day: 17,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Kianidi Festival",
        description: "Garundi\n\nThe Kianidi Festival is a week long event held annually between 15 and 21 Erastus by Garundi people everywhere. The Garundi have a powerful belief in belonging to a specific location in this world, with clans or tribes sometimes traveling for years in search of their true home. In these travels each individual will collect small mementos of the places she or he has visited in order to remember them and maintain a spiritual connection. During the Kianidi, a tribe will gather and display these mementos to the group. The best ones are chosen and made part of the clan or tribal history, something which Garundi feel is a great honor.",
        id: "824536",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "Harvest Moon",
        description: null,
        id: "824537",
        note: null,
        date: {
          day: null,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Multiple Events",
        description: "Festival of Night's Return\n\nNidal\n\nCelebrated throughout Nidal, this holiday involves the burning of effigies and self-flagellation.\n\nSwallowtail Festival\n\nDesna\n\nHoliday celebrated with storytelling, feasting, and the release of butterflies.\n\nWaning Light Festival\n\nSegada\n\nAlso called Blessing of the Sun and Night of Spirits, participants bid farewell to the long days of sunshine with feasting, dancing, and music.",
        id: "824538",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Signing Day",
        description: "Andoran, Cheliax, Galt, Isger\n\nSigning Day is a Chelish holiday, dating back to the height of the empire. Observed on the second Oathday of Rova, this is the day on which new laws in the empire took effect. The significance of this day expanded over many years until imperial marriages, significant business arrangements and oaths of fealty were all conducted on this day.\n\nOriginally, the holiday began as a celebration of the mutual-defense pact between Cheliax, Isger, Galt and Andoran when the united nations threw off the shackles of Taldor, declaring themselves independent from the empire. Observances of the holiday vary, but often include firework displays, feats of strength, and public debates to showcase speaking and rhetorical skills.\n\nAs Cheliax degenerated to civil war and diabolism after 4606 AR, blood pacts and infernal contracts also began to be signed on this day. As a result of Cheliax's new affiliation, Andoran and Galt began to distance themselves from Cheliax and the original interpretation of the holiday. In Andoran it continues to be the day that most national laws take effect as well as being a traditional day of marriage, and the date on which new Steel Falcons are inducted.",
        id: "824539",
        note: null,
        date: {
          day: null,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Crabfest",
        description: "Korvosa\n\nCrabfest is a Korvosan holiday held on the first Wealday of Rova. It celebrates the return of the crabs from the cooler waters of the Jeggare River to their winter habitat in Conqueror's Bay, and is marked by crab boil feasts held throughout the city and its surrounding communities.",
        id: "824540",
        note: null,
        date: {
          day: null,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Feast of Szurpade",
        description: 'Irrisen\n\nThis "celebration of plenty" festival mocks the traditional harvest festivals celebrated in the region before Baba Yaga and her eternal winter descended upon the land.',
        id: "824541",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Day of Sundering",
        description: "Ydersius\n\nOnce many holidays were celebrated by the faith of Ydersius, but today only this date has much significance.",
        id: "824542",
        note: null,
        date: {
          day: 29,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "Admani Upastuti",
        description: "Jalmeri\n\nAdmani Upastuti is a Jalmeri holiday celebrated on the first full moon of Lamashan that marks the founding of Jalmeray as a Vudran colony.",
        id: "824543",
        note: null,
        date: {
          day: null,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Ascendance Day",
        description: "Iomedae\n\nAscendance Day is an Iomedaean holiday, held on the 6th of Lamashan. The day marks the anniversary of the day Iomedae took the Test of the Starstone in the autumn of 3832 AR and ascended to godhood.\n\nCelebration\n\nThe day is a joyous celebration for the faithful, with singing, pledging of friendships, and forgiving of old grudges.\n\nTo many, the Test of the Starstone represents the greatest of all challenges, yet for Iomedae it was one of three storied promotions in her rise from Aroden's herald to a goddess in her own right. On the 6th of Lamashan, the Inheritor's faithful observe the heroism of Iomedae's life before her moment of ascension and celebrate the anniversary of the apotheosis itself.\n\nThe celebration takes place in several stages. Early in the day, troupes of performers\u2014as often passionate amateurs as professionals\u2014stage morality plays featuring the Eleven Acts of Iomedae, the heroic near-miracles and sacrifices she made leading up to her trials in the Starstone Cathedral. Scripts vary by region, city, and even neighborhood, but despite differences in setting, performance medium, and word choice, the themes and morals are all the same.\n\nAs the day continues, the priests organize jousts and mock battles, allowing anyone to participate so long as she can demonstrate enough skill to not be a risk to herself or others. The winners of these contests then face tests of mental acuity such as solving riddles, deciphering philosophical quandaries, and answering questions of honor and justice. Those who prove themselves in both contests are awarded a white cloak\u2014representing the Inheritor at peace\u2014styled after Iomedae's own red garment to wear for the rest of the celebration. Feasting and singing follow the competitions, mirroring the jubilation that followed Iomedae's ascension. This is occasion for making pledges of friendship and forgiving enemies, and priests circulate about the crowd offering the Inheritor's blessing to those who do and providing a moment's counsel or mediation for those who need an extra nudge.\n\nThe celebration typically ends before midnight, and the following day the priests and previous day's champions gather up the blunted swords from the mock battles, sharpen them, and distribute them among the church's armory and those of like-minded organizations so that all may remain vigilant against evil and prepared to strike it down.",
        id: "824544",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Bastion Day",
        description: "Solku\n\nBastion Day is a two-day festival held annually on 19 and 20 Lamashan in the Katapeshi town of Solku honoring the founding of the town, when it is traditional to host a stranger from one noon until the next.",
        id: "824545",
        note: null,
        date: {
          day: 19,
          year: 4712,
          month: 9
        },
        category: null
      },
      {
        name: "Jestercap",
        description: "Andoran, Druma, Taldor\n\nJestercap occurs at the end of the month of Lamashan, traditionally on the 27th (although a few regions have taken to moving the exact day around slightly so it always falls on the last Starday of the month, allowing people who wish to celebrate in excess to have the following day of rest to recover).\n\nHistory\n\nWhile Jestercap has been embraced with excited open arms by the gnome communities of the Inner Sea region, its original genesis is said to have been in one of Taldor's coastal cities not long after King Aspex the Even-Tongued broke from the nation, significantly weakening Taldor's power and beginning that nation's long decline. The holiday was originally intended to distract the distraught Taldan populace with a night of revelry and comedic entertainment, but the antics of jesters were simply not enough.\n\nOver the course of the first few years, Jestercap evolved from a holiday of observation to a holiday of participation. Today, the holiday is a time where anyone can pull pranks or jokes or japes on companions, on neighbors, and (most typically) on rivals, with the understanding that provided no lasting harm is done, any humiliations inflicted before midnight are to be taken in stride. Of course, come morning the day after, there are inevitably jokes that went too far, and grudges and feuds borne from Jestercap antics have a way of lingering for months to follow.\n\nIn Religion\n\nFollowers of Chaldira Zuzaristan, a halfling deity of mischief, treat Jestercap as a holy day and their pranks \u2014 often elaborate and extravagant in nature and plotted for months in advance \u2014 as displays of their faith.",
        id: "824546",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Feast of the Survivors",
        description: "Zon-Kuthon, Nidal\n\nA harvest festival signifying the centuries of Nidalese ancestors protected by Zon-Kuthon. The ceremonial tables are made of human bones of community members from past generations.",
        id: "824547",
        note: null,
        date: {
          day: null,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Kraken Carnival",
        description: "Absalom\n\nThe second of two local festivals where kite-battlers compete.",
        id: "824548",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Independence Day",
        description: "Galt\n\nMarks the beginning of the Red Revolution.",
        id: "824549",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Seven Veils",
        description: `Sivanah

The holiday known as Seven Veils, which takes place on the 23rd of Neth in most realms of the Inner Sea region, is a celebration of the region's diversity \u2014 a time when social boundaries break down even further in a day-long event filled with dancing, feasting, and courting. The evening traditionally closes out with the Seven Veil masquerade, a ball wherein the participants wear disguises that hide their race or gender (often using minor magical trinkets and spells) or disguise these features as entirely new characteristics. At the end of the ball, the participants remove their disguises to their partners, often with unpredictable and sometimes delightfully awkward results. Traditionalists and conservative minds often find the Seven Veils masquerades to be scandalous or off-putting, yet they remain particularly popular in most of the larger cities of the land.

Historians note that the original "Dance of the Seven Veils" has a much different genesis than one promoting diversity \u2014 the mysterious cult of Sivanah, goddess of illusions, mystery, and reflections, is generally cited as the source of this festival, and indeed, worshippers of the goddess (herself known as the Seventh Veil) count the 23rd of Neth as one of their most sacred of days. What rituals the church of Sivanah performs on this date, however, are unknown to outsiders, for the cult enjoys its secrets. This secrecy has, unsurprisingly, given rise to all manner of sinister rumour, yet when Seven Veils rolls around each year, its eager participants are quick to set aside rumour in preference for the night's fun and games.`,
        id: "824550",
        note: null,
        date: {
          day: 23,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Abjurant Day",
        description: "Nethys\n\nAbjurant Day occurs on 8 Neth and is known as a day of cooperation between neighbors to shore up mutual defenses and train allies in magic. Potential apprentices are often tested on the day.",
        id: "824551",
        note: null,
        date: {
          day: 8,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Great Fire Remembrance",
        description: "Korvosa\n\nGreat Fire Remembrance is a holiday celebrated on each 13 Neth in the Varisian city of Korvosa. It commemorates the Great Fire of 4429 AR, which devastated the then still fledgling Chelish colony of Fort Korvosa. On this somber day, most of the city shuts down and people generally remain at home. It has become tradition not to light any fires (not even cooking fires) on Great Fire Remembrance.",
        id: "824552",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Even-Tongued Day",
        description: "Cheliax, Asmodeus, Milani\n\nObserved on 14 of Neth, Even-Tongued Day was once a day of joy and celebration in Cheliax, but has become instead one of mourning.\n\nOriginally, the date marked the conquest of Aspex the Even-Tongued, who brought the nations of Galt, Andoran and Isger under Chelish control. Since the death of Aroden and the loss of these nations, the holiday instead marks the loss of territory and glory once held by Cheliax. Oaths are sometimes made, typically to Asmodeus, and rarely of a pleasant nature (such as the reclaiming of the lost empire and vengeance against treacherous former allies).\n\nCitizens wear black on this day, public speaking is forbidden, and old feuds and vendettas are rekindled.",
        id: "824553",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Evoking Day",
        description: "Nethys\n\nA holy day to followers of Nethys, Evoking Day is full of vibrant explosions, skillful wielding of spells, and much dancing. Evoking Day is observed on the 18th of Neth, and while this holiday is mostly celebrated in Garund, temples dedicated to Nethys host celebrations throughout the Inner Sea region. Traditional celebrations of Evoking Day have changed over the thousands of years since its first incarnation, but to this day every occurrence of Evoking Day still features a grand meal shared by celebrants during the afternoon and a wondrous exhibition of brilliant and explosive magic once the sun sets. These days, such colorful magical displays are augmented with fireworks of a dozen different colors and patterns.\n\nIn temples of Nethys dedicated to revering evocation magic, priests and prominent arcanists participate in spell duels where each contestant stands on a raised platform and takes turns trying to incapacitate her opponent. The magic wielded in theses duels favors the flashy over the dangerous, but clerics of Nethys are on hand to treat any injuries. These duels gather large crowds eager to lend their applause to their favorite contestant.\n\nIt is also during this festival when wizards who worship Nethys open their spellbooks to others who share their craft. Wizards normally guard their spellbooks with their lives and covet the eldritch information therein, but on Evoking Day these wizards meet with one another prior to the afternoon feast to share their spells just as they prepare to share a grand meal.\n\nThough Evoking Day is primarily a day of grand magic, those with no spellcasting talent still flock to local temples of Nethys to partake in the shared feast and flashy evening displays of magic and fireworks. Between the meal and into the night, celebrants wear black-and-white robes and perform joyous dances meant to give thanks to the wonders Nethys brought to humankind. These dances are grand affairs involving dozens of dancers all spinning and clapping to the accompanying music as their black-and-white robes fan out around them with each spin. As night descends and the fireworks and magical displays begin, the dancing rises to a climax erupting in shouts and calls to Nethys with each thunderous boom.",
        id: "824554",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Baptism of Ice",
        description: "Irrisen\n\nIn the Irriseni Baptism of Ice, an annual fertility festival held from the 24th to the 30th of Neth, locals parade all children born during the year through the town in fine clothes. In most towns, the festival ends with a symbolic sacrifice of a child to the cold. However, in Whitethrone and Irrisen's provincial capitals, a peasant child is killed through exposure.",
        id: "824555",
        note: null,
        date: {
          day: 24,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Transmutatum",
        description: "Nethys\n\nTransmutatum is one of the three major holidays of the church of Nethys, on 28th of Neth. It is a day of reflection and self-improvement. Many followers of Nethys begin research and crafting projects on this day.",
        id: "824556",
        note: null,
        date: {
          day: 28,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Winter Week",
        description: "Traditional feast; time for courting and spending time with friends.",
        id: "824557",
        note: null,
        date: {
          day: null,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "The Shadowchaining",
        description: "Zon-Kuthon, Nidal\n\nCommemorating the Midnight Lord's gift of shadow animals.",
        id: "824558",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Pseudodragon Festival",
        description: "Korvosa\n\nKorvosa's Pseudodragon Festival, a holiday celebrated annually on 7 Kuthona, marks the winter migration of wild pseudodragons from the Mindspin Mountains to Conqueror's Bay, which inspires the creatures already in the city\u2014even those domesticated\u2014to play with their wild kin in the skies over the city. Locals mark the day with a joyous inebriation.",
        id: "824559",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Ascension Day",
        description: "Cayden Cailean\n\nMuch like the god to whom it is dedicated, the Caydenite holiday of Ascension Day is generally celebrated in a very informal style. Occurring annually on 11 Kuthona, it commemorates the day Cayden Cailean passed the Test of the Starstone and ascended to godhood in 2765 AR. In all likelihood, the 11th of Kuthona is not the exact date on which it actually happened, but since the god was dead drunk when it happened, it will probably be never known.",
        id: "824560",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Winterbloom",
        description: "Naderi\n\nHoliday celebrating Naderi's ascension. Celebrations are typically understated but include readings of The Lay of Arden and Lysena.",
        id: "824561",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Final Day",
        description: "Groetus\n\nCultists of Groetus perform an hour's silence at dusk on the last day of the year and seek guidance from their god about the End Time.",
        id: "824562",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Night of the Pale",
        description: "Not all of Golarion's holidays and festivals are times of rejoicing and delight. Holidays worshiped by dark and sinister cults and religions tend to be hidden affairs, their rituals and ceremonies involving cruelties and vile practices that send shivers of fear through gentler society. Scholars suspect that the Night of the Pale\u2014a holiday that traditionally takes place on the last day of the year, the 31st of Kuthona\u2014has links to several sinister religions, but today no one church has specific association with the event. Nonetheless, the Night of the Pale is an event that many look forward to all year, whether in fear or excitement.\n\nOn the Night of the Pale, it is said that the ghosts of those who died during the previous year manifest upon the world and come to visit the homes they lived in during life. Although some might think that the chance of seeing even the shade of a dearly departed one might be a blessing, the Night of the Pale is not a time for tearful reunions, for these ghosts, tradition says, do not return out of love for those they left behind but out of darker compulsions. Lingering jealousy, unfinished arguments, or the simmering need for revenge are said to be what compels the dead to return to torment the living on the Night of the Pale.\n\nThe evening of this night in many communities is celebrated by a morbid feast, the food prepared with themes revolving around graveyards, the dead, and other spooky traditions. This feast, on one level, helps the celebrants to make light of their fears while sharing good company with similarly nervous neighbors, but at another level is believed to placate vengeful spirits as toasts are raised to the memories of the recently departed. These feasts include retellings of favorite memories of the departed, in hopes of reminding the approaching ghosts of brighter and kinder memories than those that compel them to return. The feast always ends at least an hour before midnight in order to give participants time to return home, decorate doors and windows with salt and other trinkets taken from the feasting table (salted bread baked into crook-like shapes are a favorite, as these can be hung from doorknobs and eaves) to ward off evil spirits, and hide in their bedrooms until dawn. Brave youths and adventurers often deliberately stay out after midnight, either to dare the ghosts to challenge them or simply for the thrill of bucking tradition. Every Night of the Pale, it seems, there are disappearances among those who stay out after midnight, although whether these vanishings are the result of dissatisfied locals taking the opportunity to run away from home, murderers or wild animals or other mundane dangers, or the vengeful spirits carrying off their victims depends upon the circumstances.\n\nThe morning after a Night of the Pale is also the first day of the new year\u2014a time that many celebrate more as a relief for surviving the night before than in anticipation of what the new year might bring, although regional preferences for how this day is celebrated vary enough that no single tradition holds over the other. Save, of course, the lingering fears of what dread spirits might come knocking upon warded doors one year away...",
        id: "824563",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Turning Day",
        description: "Alseta\n\nThe changing of the year is celebrated with the forgiveness of old debts and grudges, and embracing new opportunities.",
        id: "824564",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Ritual of Stardust",
        description: "Desna\n\nThe Ritual of Stardust is one of the few formal religious holidays in honor of the goddess Desna. It is held on both the summer and winter solstices.\n\nFollowers of the Song of Spheres gather at dusk and light enormous bonfires and hold feasts, watching the sparks and embers float out into the darkening sky. After it is fully dark, the celebrants chant and sing songs as they watch the fires burn low. When only embers remain, sand mixed with ground star gems (either star rubies, star sapphires, or rose quartz) is thrown on them or into the air downwind. At this point it is common to make proclamations of love and friendship and of promised journeys to come. The twinkling of the sand is thought to mirror the night sky and demonstrate Desna's witnessing of these pronouncements.",
        id: "824565",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Planting Week",
        description: "Erastil\n\nThis holy week to the god Erastil is a time of heavy work in the fields for farmers.",
        id: "824566",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Ascendance Night",
        description: "Norgorber\n\nDay marking the apotheosis of the Reaper of Reputation.",
        id: "824567",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Azvadeva Dejal",
        description: "Gruhastha\n\nCelebration of the revelation of the Azvadeva Pujila, with gifts of books, celebrations of knowledge, blessing of animals, and a vegetarian feast.",
        id: "824568",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Goblin Flea Market",
        description: "Andoran\n\nA market day that focuses on unusual crafts and offers games to children who dress up for the occasion.",
        id: "824569",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Breaching Festival",
        description: "Korvosa\n\nYearly festival in which contestants try to break through the magical wards protecting the Academae.",
        id: "824570",
        note: null,
        date: {
          day: null,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Silverglazer Sunday",
        description: "Andoran\n\nSilverglazer Sunday is a two-part Andoren national festival that is held on the last Sunday of Arodus and the first Sunday of Rova every year. Celebrants spend the two Sundays fishing, holding swimming competitions, and making enormous puppets.",
        id: "824571",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Batul al-Alim",
        description: "Qadira\n\nBatul al-Alim is a holiday celebrated on the last Oathday of Calistril in Qadira. It commemorates the birthday of the popular romantic poet of the same name.",
        id: "824572",
        note: null,
        date: {
          day: null,
          year: null,
          month: 1
        },
        category: null
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Religious Holidays",
        id: "religious-holidays",
        color: "#9b2c2c"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#0D47A1"
      },
      {
        name: "Historical Events",
        id: "historical-events",
        color: "#455A64"
      },
      {
        name: "Miscellaneous Events",
        id: "miscellaneous-events",
        color: "#0288D1"
      }
    ]
  },
  {
    name: "Calendar of Galifar",
    description: "Calendar of the world of Eberron.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: false,
      weekdays: [
        {
          type: "day",
          name: "Sul",
          id: "ID_598a7bd9b8b9"
        },
        {
          type: "day",
          name: "Mol",
          id: "ID_69088ac8f818"
        },
        {
          type: "day",
          name: "Zol",
          id: "ID_a8c85a98f8fa"
        },
        {
          type: "day",
          name: "Wir",
          id: "ID_fa4b687aaba9"
        },
        {
          type: "day",
          name: "Zor",
          id: "ID_58e9a82a6bc8"
        },
        {
          type: "day",
          name: "Far",
          id: "ID_9a18cb889ada"
        },
        {
          type: "day",
          name: "Sar",
          id: "ID_3b9bfa38c979"
        }
      ],
      months: [
        {
          name: "Zarantyr",
          type: "month",
          length: 28,
          id: "ID_7a8afb09aa6a"
        },
        {
          name: "Olarune",
          type: "month",
          length: 28,
          id: "ID_386b188b2a89"
        },
        {
          name: "Therendor",
          type: "month",
          length: 28,
          id: "ID_599a0ad859c8"
        },
        {
          name: "Eyre",
          type: "month",
          length: 28,
          id: "ID_98a95869e90b"
        },
        {
          name: "Dravago",
          type: "month",
          length: 28,
          id: "ID_eb5a194bcbf8"
        },
        {
          name: "Nymm",
          type: "month",
          length: 28,
          id: "ID_bb596aa9ca5b"
        },
        {
          name: "Lharvion",
          type: "month",
          length: 28,
          id: "ID_fb1bb9dabb88"
        },
        {
          name: "Barrakas",
          type: "month",
          length: 28,
          id: "ID_8bcb19c8f90a"
        },
        {
          name: "Rhaan",
          type: "month",
          length: 28,
          id: "ID_0a09eb5b7b9b"
        },
        {
          name: "Sypheros",
          type: "month",
          length: 28,
          id: "ID_3b98ab1a29e8"
        },
        {
          name: "Aryth",
          type: "month",
          length: 28,
          id: "ID_899b59faaba9"
        },
        {
          name: "Vult",
          type: "month",
          length: 28,
          id: "ID_8a286b78aac9"
        }
      ],
      moons: [
        {
          name: "Nymm",
          cycle: 28,
          offset: -14,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_a8b88988a94a"
        },
        {
          name: "Sypheros",
          cycle: 35,
          offset: -11,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_5ba80b4b096a"
        },
        {
          name: "Therendor",
          cycle: 42,
          offset: 21,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_c999085a499b"
        },
        {
          name: "Rhaan",
          cycle: 49,
          offset: 9,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_39f91ab8a85a"
        },
        {
          name: "Olarune",
          cycle: 56,
          offset: 27,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_2ada8b99788b"
        },
        {
          name: "Eyre",
          cycle: 63,
          offset: 10,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_49285b79d988"
        },
        {
          name: "Vult",
          cycle: 70,
          offset: 6,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_eaebb94a9acb"
        },
        {
          name: "Zarantyr",
          cycle: 77,
          offset: 31,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_98d86aabcbb9"
        },
        {
          name: "Aryth",
          cycle: 84,
          offset: 41,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_d989b809d97b"
        },
        {
          name: "Dravago",
          cycle: 91,
          offset: 31,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_1a293959eaab"
        },
        {
          name: "Lharvion",
          cycle: 98,
          offset: 34,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_cbf919491a5b"
        },
        {
          name: "Barrakas",
          cycle: 105,
          offset: -11,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_4a1a2a6b589b"
        }
      ],
      leapDays: [],
      eras: []
    },
    current: {
      year: 998,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "The Tain Gala - Sharn",
        description: "The Tain Gala is a notable event held on the first Far of each month in Sharn.",
        id: "824461",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Revelation Day - Blood of Vol",
        description: "Meditation ceremony for Seekers (also called Ascension Day).",
        id: "824462",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The longest night of the year.",
        id: "824463",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Rebirth Eve - The Silver Flame",
        description: "The Purified new year; a night for spiritual vigil and guarding against evil. ",
        id: "824464",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 0
        },
        category: null
      },
      {
        name: "Crystalfall - Sharn",
        description: "A day of remembrance; Ice sculptures are created (and destroyed) to commemorate the destruction of the Glass Tower on 9 Olarune in 918 by abjurers. ",
        id: "824465",
        note: null,
        date: {
          day: 9,
          year: 998,
          month: 1
        },
        category: null
      },
      {
        name: "Bright Souls' Day - The Silver Flame",
        description: "On this day each year, the Purified celebrate the lives and sacrifice of all followers of the Flame who died while fighting evil and protecting the faithful. ",
        id: "824466",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 1
        },
        category: null
      },
      {
        name: "The Day of Mourning - Sharn",
        description: "In commemoration of the destruction of the nation of Cyre, those who survived gather to remember the loss of their kingdom on this date in the year 994. ",
        id: "824467",
        note: null,
        date: {
          day: 20,
          year: 995,
          month: 1
        },
        category: null
      },
      {
        name: "Tirasday - The Silver Flame",
        description: "On this day, the Silver Flame work, give gifts, and partake in joyous celebration out of thankfulness for the new planting season and the birth of Tira Miron - the Voice of the Silver Flame.",
        id: "824468",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Sun's Blessing - The Sovereign Host",
        description: "The Sovereign Host enjoys this festival of peace, and of setting aside differences, in the name of Dol Arrah.",
        id: "824469",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 2
        },
        category: null
      },
      {
        name: "Initiation Day - The Silver Flame",
        description: "Seminary graduations and breaking grounds for new churches are common on this day as the Silver Flame recalls their declarations of independent faith and the construction of their first cathedral on this special day each year. ",
        id: "824470",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 3
        },
        category: null
      },
      {
        name: "Baker's Night - The Silver Flame",
        description: "An old and misunderstood, yet immensely popular, holiday wherein followers of the Silver Flame gather to share pastries and treats created by bakers within their fold. ",
        id: "824471",
        note: null,
        date: {
          day: 6,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Aureon's Crown - Sharn and The Sovereign Host",
        description: "The Sovereign Host celebrate knowledge on this day with lectures and sermons.Secular institutions hold graduation and commencement ceremonies on this date, as do the monastic schools of the Silver Flame.In Sharn this has become a common secular holiday, wherein even non-devout members of the Five Nations attend lectures and sermons held by the priests of Aureon on philosophical, historical, and a range of other topics - including discussions on the nature of the gods.\n\n",
        id: "824472",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Promisetide - The Silver Flame",
        description: "A controversial holiday outside of the Silver Flame faith, on this day the Purified honor the Silver Flame for the promise of paradise. They also honor (without worship) the Sovereign Host for having created the world, before stepping aside to allow the Flame its rightful place as the last god of Eberron.\xA0 ",
        id: "824473",
        note: null,
        date: {
          day: 28,
          year: null,
          month: 4
        },
        category: null
      },
      {
        name: "Brightblade - Sharn and The Sovereign Host",
        description: "This Sovereign Host festival, dedicated to Dol Dorn, is marked by gladiatorial and athletic contests. \n\nIn Sharn, festival celebrations occur throughout the temple districts with events culminating in a combined contest of champions at the Cornerstone Arena. ",
        id: "824474",
        note: null,
        date: {
          day: 12,
          year: null,
          month: 5
        },
        category: null
      },
      {
        name: "First Dawn - The Silver Flame",
        description: "On this day in 914, the Church of the Silver Flame officially assumed control of the government of Thrane. On each anniversary, the Purified give thanks for their just rule, while also honoring the memory of King Thalin, whose death paved the way for their governance.",
        id: "824475",
        note: null,
        date: {
          day: 21,
          year: 915,
          month: 5
        },
        category: null
      },
      {
        name: "Silvertide - The Silver Flame",
        description: "Commemoration of both the couatl sacrifice and the entry, thousands of years ago, of the Silver Flame into Eberron mark this highest of holy days. The vast majority of Purified spend this day in prayer and observance.\xA0 ",
        id: "824476",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 6
        },
        category: null
      },
      {
        name: "The Race of Eight Winds - Sharn",
        description: "Legend tells of King Galifar II's fascination with aerial scouts and cavalry. The evolution of this annual contest took centuries, but has given Sharn an exotic and well anticipated event involving beasts and their riders in a symbiotic quest for glory* over a course that finds them weaving through the spires of the city. \n\n\n\n*the winner also receives 500gp and a land grant located elsewhere in Breland.",
        id: "824477",
        note: null,
        date: {
          day: 21,
          year: 201,
          month: 6
        },
        category: null
      },
      {
        name: "The Hunt - Sharn and The Sovereign Host",
        description: "The Sovereign Host celebrate Balinor with communal hunts of dangerous creatures. \n\nIn Sharn, a dangerous beast*, whose transport to the city was arranged by the priests of Balinor, is released into the Depths of the Lower-City. Open to any who would participate (and pay an entry fee in the form of a 5gp donation), the victor must return with the beast's head to receive a 500gp purse, local fame, and the blessing of Balinor. \n\n\n\n*often a singular beast, it can be several - which then requires the victor to return with the most skins. ",
        id: "824478",
        note: null,
        date: {
          day: 4,
          year: null,
          month: 7
        },
        category: null
      },
      {
        name: "Victory Day - The Silver Flame",
        description: "Commemorating the conclusion of the lycanthropic purge (832 YK - 880 YK), on Victory Day the adult faithful of the Silver Flame attend sermons on triumph, defeat, and the somewhat questionable methods utilized by the templars during the purge - while the children of the faithful act out great battles with toy swords. ",
        id: "824479",
        note: null,
        date: {
          day: 9,
          year: 881,
          month: 7
        },
        category: null
      },
      {
        name: "Fathen's Fall - Sharn",
        description: "Honoring the memory of Fathen, a great hero of the Silver Crusade (832 YK - 880 YK), who, in the last days of the purge, was torn apart by wererats on the streets of North Market. Faithful gather on this day at the Shrine of Fathen the Martyr to listen to a sermon from the priest of High Hope. This holiday is often uncomfortable and tense for shifter communities in Sharn. ",
        id: "824480",
        note: null,
        date: {
          day: 25,
          year: 881,
          month: 7
        },
        category: null
      },
      {
        name: "Boldrei's Feast - Sharn and The Sovereign Host",
        description: "A feast of community in the name of Boldrei, extravagant parties are often held on this holiday and it has also become the traditional day for elections. \n\nIn Sharn, a great feast is held at the Pavilion of the Host with goods and services donated\xA0 from local merchants, as well as House Ghallanda. Many grand parties, some quite astonishing in their opulence, are hosted by the wealthiest members of varying districts - often in competition with one another for social standing. ",
        id: "824481",
        note: null,
        date: {
          day: 9,
          year: null,
          month: 8
        },
        category: null
      },
      {
        name: "The Ascension - Sharn",
        description: "Each year on The Ascension, followers reaffirm their faith and give thanks as well as attend blessing ceremonies at temples throughout the city - the grandest of which occurs at the Cathedral of the Cleansing Flame. All of this is to honor the sacrifice of Tira Miron, the Voice of the Flame, without which there would be no Church of the Silver Flame. Contributions to their community on this day are a high priority for the faithful.",
        id: "824482",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Wildnight - Sharn",
        description: "With the The Fury (the Sovereign of Passion and Madness) reaching the height of her power on this night, people find it difficult to control or restrain their impulses - once the sun sets, public revelry in the streets climbs to joyous or, all too often, dangerous levels, calming only as the sun rises on the following morning. ",
        id: "824483",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Saint Voltros's Day - The Silver Flame",
        description: "Though one of the least high holy days, it is marked by brief prayers and church services in the honor of the birth of Saint Voltros - the first paladin called to only serve the Silver Flame.",
        id: "824484",
        note: null,
        date: {
          day: 25,
          year: null,
          month: 9
        },
        category: null
      },
      {
        name: "Thronehold - Sharn",
        description: "On this day in 996, the Treaty of Thronehold was signed, formally ending the Last War. Annual celebratory feasts are held throughout the Five Nations to mark this auspicious and long-awaited event. ",
        id: "824485",
        note: null,
        date: {
          day: 11,
          year: 997,
          month: 10
        },
        category: null
      },
      {
        name: "Rampartide - The Silver Flame",
        description: "In accordance with scripture, on this day the Purified steel themselves against wickedness, both without and within, through repentance and fasting. Children, elderly, and the sick are required only to give up their favorite foods for the day. ",
        id: "824486",
        note: null,
        date: {
          day: 24,
          year: null,
          month: 10
        },
        category: null
      },
      {
        name: "Long Shadows - Sharn",
        description: "As dark magic dominates over these three days of the Long Shadows, the myth of Sovereign Lord Aureon's stolen shadow is forefront in the minds of the people. Most will spend these days indoors huddled around the warmth of a fire, but those few who worship the dark deity use this time to prey upon the weak and the foolish. ",
        id: "824487",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Khybersef - The Silver Flame",
        description: `Originally called Khyber's Eve, the Purified spend the night in intense prayer and spiritual vigilance against the, according to scripture, "thinning of the bonds that hold the demon lords in Khyber" between now (the beginning of winter) and the solstice. Quests and crusades often begin on Khybersef. `,
        id: "824488",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 11
        },
        category: null
      },
      {
        name: "Spring Equinox",
        description: "The spring equinox is when the day and the night are equally as long, and are getting longer.",
        id: "824489",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Summer Solstice",
        description: "	At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824490",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The autumn equinox is when the day and the night are equally as long, and are getting shorter.",
        id: "824491",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      }
    ],
    id: null,
    categories: []
  },
  {
    name: "Barovian Calendar",
    description: "Calendar of the realm of Barovia, home of Strahd.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Monday",
          id: "ID_6a183b08c8eb"
        },
        {
          type: "day",
          name: "Tuesday",
          id: "ID_892b7b7a5ae9"
        },
        {
          type: "day",
          name: "Wednesday",
          id: "ID_6bb98899ba68"
        },
        {
          type: "day",
          name: "Thursday",
          id: "ID_4a7b683aea19"
        },
        {
          type: "day",
          name: "Friday",
          id: "ID_78690a099b89"
        },
        {
          type: "day",
          name: "Saturday",
          id: "ID_ba5b09ba5a89"
        },
        {
          type: "day",
          name: "Sunday",
          id: "ID_29b90acaead9"
        }
      ],
      months: [
        {
          name: "1st Moon",
          type: "month",
          length: 31,
          id: "ID_7b4978ab581a"
        },
        {
          name: "2nd Moon",
          type: "month",
          length: 28,
          id: "ID_cb99fbb9395b"
        },
        {
          name: "3rd Moon",
          type: "month",
          length: 31,
          id: "ID_79881a89cb18"
        },
        {
          name: "4th Moon",
          type: "month",
          length: 30,
          id: "ID_5b9a8a397908"
        },
        {
          name: "5th Moon",
          type: "month",
          length: 31,
          id: "ID_f8399ab80818"
        },
        {
          name: "6th Moon",
          type: "month",
          length: 30,
          id: "ID_3ac84a7bc869"
        },
        {
          name: "7th Moon",
          type: "month",
          length: 31,
          id: "ID_e98bc86bc809"
        },
        {
          name: "8th Moon",
          type: "month",
          length: 31,
          id: "ID_89ea78ca5988"
        },
        {
          name: "9th Moon",
          type: "month",
          length: 30,
          id: "ID_798a3b990a4b"
        },
        {
          name: "10th Moon",
          type: "month",
          length: 31,
          id: "ID_3a9999e8eb59"
        },
        {
          name: "11th Moon",
          type: "month",
          length: 30,
          id: "ID_db39383b990a"
        },
        {
          name: "12th Moon",
          type: "month",
          length: 31,
          id: "ID_1bfa3b180a48"
        }
      ],
      moons: [
        {
          name: "Moon",
          cycle: 29.530588853,
          offset: 10.24953,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_e98b3a8ab8da"
        }
      ],
      leapDays: [
        {
          name: "Leap Day",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 400
            },
            {
              ignore: false,
              exclusive: true,
              interval: 100
            },
            {
              ignore: false,
              exclusive: false,
              interval: 4
            }
          ],
          offset: 0,
          timespan: 1,
          intercalary: false,
          id: "ID_6a28dbb81a48"
        }
      ],
      eras: [
        {
          name: "Before Christ",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -9e3,
            month: 0,
            day: 0
          }
        },
        {
          name: "Anno Domini",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ]
    },
    current: {
      year: 735,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "Winter Solstice",
        description: "The Winter Solstice is the day of the year with the least time between sunrise and sunset. Many western cultures consider it the official start of winter.",
        id: "824455",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      },
      {
        name: "Summer Solstice",
        description: "The Summer Solstice is the day of the year with the most time between \nsunrise and sunset. Many western cultures consider it the official start\n of summer.",
        id: "824456",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      },
      {
        name: "Spring Equinox",
        description: "The Spring Equinox,\nalso called the Vernal Equinox, is the day between the winter and\nsummer solstices where the day is the exact same length as the night.\nMany western cultures consider it the official start of Spring.\n",
        id: "824457",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      },
      {
        name: "Autumnal Equinox",
        description: "The Autumnal Equinox,\nalso called the Fall Equinox, is the midpoint between the summer and\nwinter solstices, where the day is the exact same length as the night.\nMany western cultures consider it the official start of Autumn.\n",
        id: "824458",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "New Year's Day",
        description: "New Year's day marks the start of a new year.",
        id: "824459",
        note: null,
        date: {
          day: 1,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Paschal Full Moon",
        description: "The first full moon after march 21st, which is considered the fixed date for the spring equinox.",
        id: "824460",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-event"
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Event",
        id: "natural-event",
        color: "#9e9d24"
      }
    ]
  },
  {
    name: "Exandrian Calendar",
    description: "Calendar of the world of Wildemount.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 2,
      incrementDay: false,
      displayMoons: true,
      overflow: true,
      weekdays: [
        {
          type: "day",
          name: "Miresen",
          id: "ID_3b38aaa81bca"
        },
        {
          type: "day",
          name: "Grissen",
          id: "ID_da6b19882baa"
        },
        {
          type: "day",
          name: "Whelsen",
          id: "ID_a9cae8f88b98"
        },
        {
          type: "day",
          name: "Conthsen",
          id: "ID_e87859eb5aaa"
        },
        {
          type: "day",
          name: "Folsen",
          id: "ID_59180abbea8a"
        },
        {
          type: "day",
          name: "Yulisen",
          id: "ID_98082bd8d8ca"
        },
        {
          type: "day",
          name: "Da'leysen",
          id: "ID_da4ba92b299a"
        }
      ],
      months: [
        {
          name: "Horisal",
          type: "month",
          length: 29,
          id: "ID_e89a4ab9995b"
        },
        {
          name: "Misuthar",
          type: "month",
          length: 30,
          id: "ID_18b8894bab7b"
        },
        {
          name: "Dualahei",
          type: "month",
          length: 30,
          id: "ID_0a9b29f8f8db"
        },
        {
          name: "Thunsheer",
          type: "month",
          length: 31,
          id: "ID_6a8a8a5bea5b"
        },
        {
          name: "Unndilar",
          type: "month",
          length: 28,
          id: "ID_b8295bdbcafa"
        },
        {
          name: "Brussendar",
          type: "month",
          length: 31,
          id: "ID_c92a489bb909"
        },
        {
          name: "Sydenstar",
          type: "month",
          length: 32,
          id: "ID_7b48bb1b0a4a"
        },
        {
          name: "Fessuran",
          type: "month",
          length: 29,
          id: "ID_289858c97849"
        },
        {
          name: "Quen'pillar",
          type: "month",
          length: 27,
          id: "ID_f8abd9a86aa9"
        },
        {
          name: "Cuersaar",
          type: "month",
          length: 29,
          id: "ID_7aba59fa2b69"
        },
        {
          name: "Duscar",
          type: "month",
          length: 32,
          id: "ID_5819f86b99cb"
        }
      ],
      moons: [
        {
          name: "Catha",
          cycle: 33,
          offset: 7,
          faceColor: "#ffffff",
          shadowColor: "#292b4a",
          id: "ID_0ab929092b5b"
        },
        {
          name: "Ruidus",
          cycle: 328,
          offset: 80,
          faceColor: "#ff6161",
          shadowColor: "#1f1f1f",
          id: "ID_b9783ac818e9"
        }
      ],
      leapDays: [],
      eras: [
        {
          name: "The Founding",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        },
        {
          name: "Age of Arcanum",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -1500,
            month: 0,
            day: 1
          }
        },
        {
          name: "The Calamity",
          description: "",
          format: "Year {{year}} - {{era_name}}",
          start: {
            year: -665,
            month: 0,
            day: 1
          }
        },
        {
          name: "Post-Divergence",
          description: "",
          format: "Year {{year}} P.D.",
          start: {
            year: 1,
            month: 0,
            day: 1
          }
        }
      ]
    },
    current: {
      day: 1,
      month: 0,
      year: 836
    },
    events: [
      {
        name: "Spring Equinox",
        description: "The spring equinox is when the day and the night are equally as long, and are getting longer.",
        id: "824430",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Summer Solstice",
        description: "	At the summer solstice, the Sun travels the longest path through the sky, and that day therefore has the most daylight.",
        id: "824431",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Autumn Equinox",
        description: "The autumn equinox is when the day and the night are equally as long, and are getting shorter.",
        id: "824432",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "Winter Solstice",
        description: "The winter solstice marks the shortest day and longest night of the year, when the sun is at its lowest arc in the sky.",
        id: "824433",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: null
      },
      {
        name: "New Dawn",
        description: "The first day of the new year is also the holy day of the Changebringer, as the old year gives way to a new path.\n\nIn Tal'Dorei, Emon celebrates New Dawn with a grand midnight feast, which commonly features a short play celebrating the changes witnessed in the past year.\n\nOn the Menagerie Coast, people celebrate by having a feast on the shore at dusk to watch the sunset. They feast and discuss their hopes for the new year until the sun rises.",
        id: "824434",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 0
        },
        category: "religious-holidays"
      },
      {
        name: "Hillsgold",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824435",
        note: null,
        date: {
          day: 27,
          year: null,
          month: 0
        },
        category: "secular-holidays"
      },
      {
        name: "Day of Challenging",
        description: `The holy day of the Stormlord is one of the most raucous holidays in Emon. Thousands of spectators attend the annual Godsbrawl, which is held in the fighting ring within the Temple of the Stormlord. The people root for their deity's favored champion, and there is a fierce (yet friendly) rivalry between the Champion of the Stormlord and the Champion of the Platinum Dragon. The winner earns the title of "Supreme Champion" for an entire year.

The Day of Challenging is one of the most raucous holidays in Port Damali, and thousands of spectators attend the annual Godsbrawl held in the Temple of\xA0Kord to root for their favored deity's champion, particularly the chosen champions of the Storm Lord and the\xA0All-Hammer.\xA0`,
        id: "824436",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 1
        },
        category: "religious-holidays"
      },
      {
        name: "Renewal Festival",
        description: "Spring begins early in the month of Dualahei, officially starting on the 13th with the Renewal Festival.",
        id: "824437",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 2
        },
        category: "secular-holidays"
      },
      {
        name: "Wild's Grandeur",
        description: "Though the Archeart is the god of spring, the peak of the spring season is the holy day of the Wildmother.\n\nThe people in the southern wilds of Tal'Dorei celebrate the Wildmother's strength by journeying to a place of great natural beauty. This could be the top of a mountainous waterfall, the center of a desert, or even an old and peaceful city park (such as Azalea Street Park in Emon). Though Emon rarely celebrates Wild's Grandeur, the few who do will plant trees in observance of the holiday.\n\nThe people of the Menagerie Coast set aside this day to sail for no reason other than the pleasure of observing the natural beauty of their surroundings. Those who still partake in elements of Ki'Nau culture take this day to appreciate the fruits and foods granted by the sea, leaving offerings of delicacies and small handmade crafts at temporary altars of twisted roots and grasses.",
        id: "824438",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 2
        },
        category: "religious-holidays"
      },
      {
        name: "Harvest's Rise",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824439",
        note: null,
        date: {
          day: 11,
          year: null,
          month: 3
        },
        category: "secular-holidays"
      },
      {
        name: "Merryfrond's Day",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824440",
        note: null,
        date: {
          day: 31,
          year: null,
          month: 3
        },
        category: "secular-holidays"
      },
      {
        name: "Deep Solace",
        description: "Moradin's holy day is Deep Solace, which is celebrated on the eighteenth day of the fifth month. Especially devout followers of the All-Hammer spend the day in isolation, meditating on the meaning of family and how they may be better mothers, fathers, siblings, and children.\n\nThe dwarven communities across Exandria, such as the ones in Grimgolir and Kraghammer, celebrate with a full day of feasting and drinking.\xA0",
        id: "824441",
        note: null,
        date: {
          day: 18,
          year: null,
          month: 4
        },
        category: "religious-holidays"
      },
      {
        name: "Zenith",
        description: "Summer begins in the middle of Unndilar, officially starting at noon on the 26th day known as the Zenith.",
        id: "824442",
        note: null,
        date: {
          day: 26,
          year: null,
          month: 4
        },
        category: "secular-holidays"
      },
      {
        name: "Artisan's Faire",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824443",
        note: null,
        date: {
          day: 15,
          year: null,
          month: 5
        },
        category: "secular-holidays"
      },
      {
        name: "Elvendawn",
        description: "Corellon's holy day is called Elvendawn,\nor Midsummer. It is celebrated on the twentieth day\nof the sixth month, and commemorates the elves' first\nemergence from the Feywild.\n\nIn Syngorn, the Elves open small doorways into the Feywild and celebrate alongside the wild fey with uncharacteristic vigor.\n\nThough the Dwendalian\nEmpire doesn't promote the worship of the Arch Heart,\nthe elves of Bysaes Tyl quietly celebrate in private by\nopening small doors to the Feywild and having a little\nmore wine than usual.\xA0",
        id: "824444",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 5
        },
        category: "religious-holidays"
      },
      {
        name: "Highsummer",
        description: "The holy day of the Dawnfather is the peak of the summer season.\n\nEmon celebrates with an entire week of gift-giving and feasting, ending at midnight on the 21st of Sydenstar (the anniversary of the Battle of the Umbra Hills, where Zan Tal'Dorei dethroned Trist Drassig).\n\nWhitestone (where the Dawnfather is the city's patron god) celebrates with gift-giving and a festival of lights around the Sun Tree. Due to the Briarwood occupation, money is thin, so most Whitestone folk choose to recount the small things they are thankful for, rather than buy gifts.\n\nWhile other parts of Exandria feast, the Dwendalian\nEmpire uses this day as an opportunity to enlist more\nsoldiers in its army. The military holds great feasts and\nhands out toy soldiers and other propaganda, encouraging people to enlist and help fight against the evil that\nthreatens the king.\xA0",
        id: "824445",
        note: null,
        date: {
          day: 7,
          year: null,
          month: 6
        },
        category: "religious-holidays"
      },
      {
        name: "Morn of Largesse",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824446",
        note: null,
        date: {
          day: 14,
          year: null,
          month: 6
        },
        category: "secular-holidays"
      },
      {
        name: "Harvest's Close",
        description: "Autumn begins on the 3rd of Fessuran\xA0and is typically celebrated with feasting in rural regions and with carnivals in the cities.\xA0",
        id: "824447",
        note: null,
        date: {
          day: 3,
          year: null,
          month: 7
        },
        category: "secular-holidays"
      },
      {
        name: "The Hazel Festival",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824448",
        note: null,
        date: {
          day: 12,
          year: null,
          month: 8
        },
        category: "secular-holidays"
      },
      {
        name: "Civilization's Dawn",
        description: "The Law Bearer's holy day is Civilization's\nDawn, which is celebrated on the autumnal equinox,\nusually the twenty-second day of the ninth month.\n\nEmon celebrates with a great bonfire in the square of each neighborhood, around which each community dances and gives gifts.\n\nIn the\nDwendalian Empire, people celebrate by having feasts \nin honor of the laws of the Dwendal bloodline. One seat\nat every table is left open for the king, who eats in spirit\nwith the people he rules.\xA0",
        id: "824449",
        note: null,
        date: {
          day: 22,
          year: null,
          month: 8
        },
        category: "religious-holidays"
      },
      {
        name: "Night of Ascension",
        description: "The Raven Queen's holy day is called the Night of Ascension, celebrating her apotheosis. The actual date of the her rise to divinity is unclear, but the Night of Ascension is celebrated on the thirteenth day of the tenth month.\n\nThough most in Emon see this celebration of the dead as unnerving and macabre, the followers of the Matron of Ravens believe that the honored dead would prefer to be venerated with cheer, not misery.\n\nWhat was once a night of cheery celebration of the dead in the Dwendalian Empire has recently become an occasion to burn effigies and decry the Kryn Dynasty for their unnatural relationship with death.",
        id: "824450",
        note: null,
        date: {
          day: 13,
          year: null,
          month: 9
        },
        category: "religious-holidays"
      },
      {
        name: "Zan's Cup",
        description: "This holiday is up to the calendar owner to decide what it is for! :)",
        id: "824451",
        note: null,
        date: {
          day: 21,
          year: null,
          month: 9
        },
        category: "secular-holidays"
      },
      {
        name: "Barren Eve",
        description: "Winter begins on the 2nd day of Duscar, the Barren Eve, which is a nighttime celebration and remembrance of those who fell in battle.",
        id: "824452",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 10
        },
        category: "secular-holidays"
      },
      {
        name: "Embertide",
        description: "Bahamut's holy day is called Embertide,\xA0and is celebrated on the fifth day of Duscar. This is a day\xA0of remembrance, solemnity, and respect for those who\xA0have fallen in the defense of others.",
        id: "824453",
        note: null,
        date: {
          day: 5,
          year: null,
          month: 10
        },
        category: "religious-holidays"
      },
      {
        name: "Winter's Crest",
        description: "This day celebrates the freedom of Tal'Dorei from Errevon the Rimelord. It is the peak of the winter season, so devout followers of the Matron of Ravens (as the goddess of winter) consider it to be one of her holy days.\n\nHowever, in most of the land, people see Winter's Crest as a secular holiday, often celebrated with omnipresent music in public areas, lavish gift-giving to relatives and loved ones, and the cutting and decorating of trees placed indoors. The Sun Tree in Whitestone is often decorated with lights and other baubles for Winter's Crest.",
        id: "824454",
        note: null,
        date: {
          day: 20,
          year: null,
          month: 10
        },
        category: "secular-holidays"
      }
    ],
    id: null,
    categories: [
      {
        name: "Religious Holidays",
        id: "religious-holidays",
        color: "#0D47A1"
      },
      {
        name: "Secular Holidays",
        id: "secular-holidays",
        color: "#4A148C"
      }
    ]
  },
  {
    name: "Calendar of Harptos",
    description: "Calendar of Faer\xFBn of the Forgotten Realms.",
    static: {
      displayDayNumber: false,
      firstWeekDay: 0,
      incrementDay: false,
      displayMoons: true,
      overflow: false,
      weekdays: [
        {
          type: "day",
          name: "I",
          id: "ID_9999882bb94a"
        },
        {
          type: "day",
          name: "II",
          id: "ID_8a0b4b79d888"
        },
        {
          type: "day",
          name: "III",
          id: "ID_da483aca8bf9"
        },
        {
          type: "day",
          name: "IV",
          id: "ID_a8fbea39cac8"
        },
        {
          type: "day",
          name: "V",
          id: "ID_9b19d9787b0b"
        },
        {
          type: "day",
          name: "VI",
          id: "ID_382a590a8a28"
        },
        {
          type: "day",
          name: "VII",
          id: "ID_fbca0ab80afb"
        },
        {
          type: "day",
          name: "VIII",
          id: "ID_ca093bca5ad9"
        },
        {
          type: "day",
          name: "IX",
          id: "ID_d95b39098bf8"
        },
        {
          type: "day",
          name: "X",
          id: "ID_389bfb5858db"
        }
      ],
      months: [
        {
          name: "Hammer (Deepwinter)",
          type: "month",
          length: 30,
          id: "ID_cbeb4b190b6a"
        },
        {
          name: "Midwinter",
          type: "intercalary",
          length: 1,
          id: "ID_89bad9089b7b"
        },
        {
          name: "Alturiak (The Claw of Winter)",
          type: "month",
          length: 30,
          id: "ID_6a08a8aacb7b"
        },
        {
          name: "Ches (The Claw of the Sunsets)",
          type: "month",
          length: 30,
          id: "ID_db2a7bf97afa"
        },
        {
          name: "Tarsakh (The Claw of Storms)",
          type: "month",
          length: 30,
          id: "ID_6b48982b0bda"
        },
        {
          name: "Greengrass",
          type: "intercalary",
          length: 1,
          id: "ID_08790af92809"
        },
        {
          name: "Mirtul (The Melting)",
          type: "month",
          length: 30,
          id: "ID_b91b39f95a28"
        },
        {
          name: "Kythorn (The Time of Flowers)",
          type: "month",
          length: 30,
          id: "ID_f8e9585a2bf8"
        },
        {
          name: "Flamerule (Summertide)",
          type: "month",
          length: 30,
          id: "ID_fa895bdb38e9"
        },
        {
          name: "Midsummer",
          type: "intercalary",
          length: 1,
          id: "ID_a9181b5a683a"
        },
        {
          name: "Eleasis (Highsun)",
          type: "month",
          length: 30,
          id: "ID_1b1b1b287b0a"
        },
        {
          name: "Eleint (The Fading)",
          type: "month",
          length: 30,
          id: "ID_1aca5918993a"
        },
        {
          name: "Highharvestide",
          type: "intercalary",
          length: 1,
          id: "ID_a94a183b4b88"
        },
        {
          name: "Marpenoth (Leaffall)",
          type: "month",
          length: 30,
          id: "ID_58d97969eb79"
        },
        {
          name: "Uktar (The Rotting)",
          type: "month",
          length: 30,
          id: "ID_4b090b787b18"
        },
        {
          name: "The Feast of the Moon",
          type: "intercalary",
          length: 1,
          id: "ID_1b0ae8dbdb4a"
        },
        {
          name: "Nightal (The Drawing Down)",
          type: "month",
          length: 30,
          id: "ID_abb82afab80a"
        }
      ],
      moons: [
        {
          name: "Sel\xFAne",
          cycle: 30.4375,
          offset: 13.9,
          faceColor: "#ffffff",
          shadowColor: "#000000",
          id: "ID_48ea2a69a888"
        }
      ],
      leapDays: [
        {
          name: "Shieldsmeet",
          type: "leapday",
          interval: [
            {
              ignore: false,
              exclusive: false,
              interval: 4
            }
          ],
          offset: 0,
          timespan: 9,
          intercalary: false,
          id: "ID_5b08faa88ada"
        }
      ],
      eras: []
    },
    current: {
      year: 1491,
      day: 1,
      month: 0
    },
    events: [
      {
        name: "Winter Solstice",
        description: null,
        id: "824588",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Vernal Equinox",
        description: null,
        id: "824589",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Summer Solstice",
        description: null,
        id: "824590",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Autumnal Equinox",
        description: null,
        id: "824591",
        note: null,
        date: {
          day: null,
          year: null,
          month: null
        },
        category: "natural-events"
      },
      {
        name: "Shieldmeet",
        description: `Shieldmeet was the equivalent of a leap year day in the Calendar of Harptos, occurring once every four years, adding a day after the festival of Midsummer and before Eleasis 1. Traditionally the day was used for fairs, bazaars, musical and theatrical performances, and tournaments of skill and magical ability. Nobles usually held court to hear the petitions of their people and to make or renew trade pacts, alliances, and agreements. Shieldmeet was known as Cinnaelos'Cor (also seen as Cinnaeloscor), "the Day of Corellon's Peace" in elvish and marked the end of an aeloulaev and the beginning of a new one in the elven Aryselmalyn calendar.`,
        id: "824592",
        note: null,
        date: {
          day: 2,
          year: null,
          month: 9
        },
        category: "festivals"
      },
      {
        name: "Feast of the Moon",
        description: "The Feast of the Moon, or Moonfest, was an annual festival in the Calendar of Harptos, occurring between the final night of Uktar and the first day of Nightal. It was the last great festival of the calendar year.\n\nThe day traditionally marked the onset of winter. It was also a time to celebrate and honor the ancestors and the respected dead. On this day, folk blessed their ancestors' graves and performed the Ritual of Remembrance. People also gathered to tell stories of the deeds of their ancestors and of the gods until deep into the night, until they merged and became legend. This was a time to hear of past heroes, great treasures, and lost cities.\n\nIn Faer\xC3\u0192\xC2\xBBn, battles were typically fought between harvest-time and the coming of winter. This meant that most of the fighting usually occurred in the month of Uktar. The timing of the Feast of the Moon\xC3\xA2\xE2\u201A\xAC\xE2\u20ACafter recently slain soldiers had joined the ranks of the dead\xC3\xA2\xE2\u201A\xAC\xE2\u20ACwas thus practical, if sadly ironic.\n\nThe Heralds of Faer\xC3\u0192\xC2\xBBn had a number of special duties on the Feast of the Moon. Prime among these was to perform the Bloodsong ceremony, at which a Herald publicly recited the genealogies of each noble family in the area. In this way, the Heralds reaffirmed a noble family's traditional authority and status, as well as the respect accorded to them.\n\nPriests of a number of deities of various pantheons held rites, ceremonies, and festivals on the Feast of the Moon. Many, though not all, focused on remembering the dead in one way or another.",
        id: "824593",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 15
        },
        category: "festivals"
      },
      {
        name: "Highharvesttide",
        description: 'Highharvestide was an annual festival in the Calendar of Harptos, taking place between 30 Eleint and 1 Marpenoth. It was traditionally a feast to celebrate the harvest and the abundance of food, but also the time when those wishing to travel left on their journeys before winter set in.\n\nPreparations for the feast started as early as a tenday before, while preparing, cooking, and preserving the harvest for the cold winter months. Traditions varied from community to community, but examples of festive activity included food-related contests; races and challenges of skill and strength; receiving homemade sweets from the local clergy; and priests blessing larders, wine cellars, grain bins, and food preserves.\n\nThis day was often an important anniversary to various governments. Often, taxes and tithes came due, rulers held "open courts" to hear the concerns of their citizens, oaths were publicly renewed, troops received marching orders to new duty stations, and guilds met to confer on prices and rate changes for goods and services.\n\nAccording to tradition, dwarves only drank water and elves drank only dew on this day. However, these traditions began to fade in the 14th and 15th century DR.\n\nIt was said that children born on this day were favored by Tymora to have lifelong good luck but be smitten with wanderlust. Another legend was that human females born on this day had control over their reproductive system (i.e., got pregnant only when they wanted to) by force of will alone, and that they could instantly sense when they had been poisoned, either by ingestion or being bitten by a venomous creature for example.',
        id: "824594",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 12
        },
        category: "festivals"
      },
      {
        name: "Greengrass",
        description: "Greengrass was a festival to welcome in the first day of spring in the Calendar of Harptos. It occured annually on a special day between Tarsakh 30 and Mirtul 1. Traditionally, the wealthier people brought out flowers to give to the less wealthy, who either wore them or spread them on the ground to encourage the deities to usher in the summer.",
        id: "824595",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 5
        },
        category: "festivals"
      },
      {
        name: "Midwinter",
        description: "Midwinter (also known as Deadwinter Day) was a festival to mark the midpoint of winter in the Calendar of Harptos. It occured on a special day between Hammer 30 and Alturiak 1. Amongst nobles and monarchs it was known as Midwinter and was traditionally used to make or renew alliances, although the common people called it Deadwinter Day, a reference to the cold and hard times that remained before the spring.\n\nOn Midwinter Day the Red Fellowship of the Deity known as the Red Knight observes the Retreat. This solemn ceremony consists of an assembly wherein the clergy discuss the previous year's campaigns. Strategies are discussed, battles analyzed, and the accumulated lore integrated into the church's teachings.\n\nThe holiest day of the year for the Church of Shevarash is Midwinter Night, during which the Dark Court Slaughter is remembered. Inductions into the ranks of the clergy occur at this time. Each new cleric screams vows of vengeance into the night air and swears neither to laugh nor smile until the Spider Queen and her followers are no more.",
        id: "824596",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 1
        },
        category: "festivals"
      },
      {
        name: "Midsummer",
        description: "Midsummer was a festival that celebrated love and music through feast. It occurred between Flamerule 30 and Eleasis 1 on the Calendar of Harptos. It was a time when love advanced, and it was said the deities themselves took a hand to ensure good weather. If bad weather was experienced on this night it was considered an extremely bad omen. Shieldmeet occurred the day after Midsummer on leap years.",
        id: "824597",
        note: null,
        date: {
          day: 1,
          year: null,
          month: 9
        },
        category: "festivals"
      }
    ],
    id: null,
    categories: [
      {
        name: "Natural Events",
        id: "natural-events",
        color: "#2E7D32"
      },
      {
        name: "Festivals",
        id: "festivals",
        color: "#9b2c2c"
      }
    ]
  }
];

// node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function run(fn2) {
  return fn2();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn2) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn2);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn2) {
  return definition[1] && fn2 ? assign($$scope.ctx.slice(), definition[1](fn2(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn2) {
  if (definition[2] && fn2) {
    const lets = definition[2](fn2(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function to_number(value) {
  return value === "" ? null : +value;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  select.selectedIndex = -1;
}
function select_value(select) {
  const selected_option = select.querySelector(":checked") || select.options[0];
  return selected_option && selected_option.__value;
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, bubbles = false) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, false, detail);
  return e;
}
var managed_styles = new Map();
var active = 0;
function hash(str) {
  let hash4 = 5381;
  let i = str.length;
  while (i--)
    hash4 = (hash4 << 5) - hash4 ^ str.charCodeAt(i);
  return hash4 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn2, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn2(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn2(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1);
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { stylesheet } = info;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      info.rules = {};
    });
    managed_styles.clear();
  });
}
function create_animation(node, from, fn2, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end: end2 = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn2(node, { from, to }, params);
  let running = true;
  let started = false;
  let name;
  function start2() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end2) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start2();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn2) {
  get_current_component().$$.on_mount.push(fn2);
}
function onDestroy(fn2) {
  get_current_component().$$.on_destroy.push(fn2);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn2) => {
        fn2.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn2) => fn2.call(this, event));
  }
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn2) {
  render_callbacks.push(fn2);
}
var seen_callbacks = new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn2, params, intro) {
  let config = fn2(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block13, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block13(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = new Set();
  const did_move = new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
var boolean_attributes = new Set([
  "allowfullscreen",
  "allowpaymentrequest",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "defer",
  "disabled",
  "formnovalidate",
  "hidden",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "selected"
]);
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance28, create_fragment28, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance28 ? instance28(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment28 ? create_fragment28($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/settings/creator/Creator.svelte
var import_fast_copy = __toModule(require_fast_copy());
var import_obsidian = __toModule(require("obsidian"));

// node_modules/svelte/easing/index.mjs
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}

// node_modules/svelte/transition/index.mjs
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
  const style = getComputedStyle(node);
  const target_opacity = +style.opacity;
  const transform = style.transform === "none" ? "" : style.transform;
  const od = target_opacity * (1 - opacity);
  return {
    delay,
    duration,
    easing,
    css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - od * u}`
  };
}

// src/settings/creator/Creator.svelte
function add_css(target) {
  append_styles(target, "svelte-mf1lf5", ".fantasy-calendar-creator.svelte-mf1lf5{position:absolute;top:0;width:100%;height:100%;background-color:inherit}.back.svelte-mf1lf5{width:min-content}");
}
function create_if_block(ctx) {
  let div3;
  let div0;
  let back_action;
  let t0;
  let div2;
  let h3;
  let t2;
  let div1;
  let preset_action;
  let div3_transition;
  let current;
  let mounted;
  let dispose;
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div2 = element("div");
      h3 = element("h3");
      h3.textContent = "Calendar Creator";
      t2 = space();
      div1 = element("div");
      attr(div0, "class", "back svelte-mf1lf5");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div2);
      append(div2, h3);
      append(div2, t2);
      append(div2, div1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(back_action = ctx[2].call(null, div0)),
          listen(div0, "click", ctx[6]),
          action_destroyer(preset_action = ctx[3].call(null, div1)),
          listen(div3, "outroend", ctx[7])
        ];
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      add_render_callback(() => {
        if (!div3_transition)
          div3_transition = create_bidirectional_transition(div3, fly, { x: 200 }, true);
        div3_transition.run(1);
      });
      current = true;
    },
    o(local) {
      if (!div3_transition)
        div3_transition = create_bidirectional_transition(div3, fly, { x: 200 }, false);
      div3_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if (detaching && div3_transition)
        div3_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment(ctx) {
  let div;
  let current;
  let if_block = ctx[0] && create_if_block(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "class", "fantasy-calendar-creator svelte-mf1lf5");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let ready = false;
  onMount(() => $$invalidate(0, ready = true));
  const dispatch2 = createEventDispatcher();
  let { calendar = (0, import_fast_copy.default)(DEFAULT_CALENDAR) } = $$props;
  let { plugin } = $$props;
  const back = (node) => {
    new import_obsidian.ExtraButtonComponent(node).setIcon("left-arrow-with-tail").setTooltip("Exit Calendar Creator");
  };
  const preset = (node) => {
    const presetEl = node.createDiv("fantasy-calendar-apply-preset");
    new import_obsidian.Setting(presetEl).setName("Apply Preset").setDesc("Apply a common fantasy calendar as a preset.").addButton((b) => {
      b.setCta().setButtonText("Choose Preset").onClick(() => {
        const modal = new CalendarPresetModal(plugin.app);
        modal.onClose = () => {
          if (!modal.saved)
            return;
          if (modal.preset?.name == "Gregorian Calendar") {
            const today = new Date();
            modal.preset.current = {
              year: today.getFullYear(),
              month: today.getMonth(),
              day: today.getDate()
            };
          }
          $$invalidate(4, calendar = { ...(0, import_fast_copy.default)(modal.preset), id: calendar.id });
        };
        modal.open();
      });
    });
  };
  const click_handler = () => $$invalidate(0, ready = false);
  const outroend_handler = () => dispatch2("exit");
  $$self.$$set = ($$props2) => {
    if ("calendar" in $$props2)
      $$invalidate(4, calendar = $$props2.calendar);
    if ("plugin" in $$props2)
      $$invalidate(5, plugin = $$props2.plugin);
  };
  return [
    ready,
    dispatch2,
    back,
    preset,
    calendar,
    plugin,
    click_handler,
    outroend_handler
  ];
}
var Creator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { calendar: 4, plugin: 5 }, add_css);
  }
};
var Creator_default = Creator;

// node_modules/svelte/animate/index.mjs
function flip(node, { from, to }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to.width - (to.left + ox);
  const dy = from.top + from.height * oy / to.height - (to.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t, u) => {
      const x = u * dx;
      const y = u * dy;
      const sx = t + u * from.width / to.width;
      const sy = t + u * from.height / to.height;
      return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
    }
  };
}

// node_modules/svelte-dnd-action/dist/index.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = o[Symbol.iterator]();
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var FINALIZE_EVENT_NAME = "finalize";
var CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
var DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
      theOtherDz
    }
  }));
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
    }
  }));
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2
    }
  }));
}
var TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
var SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
var ITEM_ID_KEY = "id";
var activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
var isOnServer = typeof window === "undefined";
var printDebug = function printDebug2() {
};
function getBoundingRectNoTransforms(el) {
  var ta;
  var rect = el.getBoundingClientRect();
  var style = getComputedStyle(el);
  var tx = style.transform;
  if (tx) {
    var sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    var to = style.transformOrigin;
    var x = rect.x - dx - (1 - sx) * parseFloat(to);
    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
    var w = sx ? rect.width / sx : el.offsetWidth;
    var h = sy ? rect.height / sy : el.offsetHeight;
    return {
      x,
      y,
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  var rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  var rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  var rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
var dzToShadowIndexToRect;
function resetIndexesCache() {
  printDebug(function() {
    return "resetting indexes cache";
  });
  dzToShadowIndexToRect = new Map();
}
resetIndexesCache();
function cacheShadowRect(dz) {
  var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
    return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  });
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  var children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return {
      index: 0,
      isProximityBased: true
    };
  }
  var shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (var i = 0; i < children2.length; i++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
      var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return {
            index: shadowElIndex,
            isProximityBased: false
          };
        }
      }
      return {
        index: i,
        isProximityBased: false
      };
    }
  }
  var minDistanceSoFar = Number.MAX_VALUE;
  var indexOfMin = void 0;
  for (var _i = 0; _i < children2.length; _i++) {
    var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = _i;
    }
  }
  return {
    index: indexOfMin,
    isProximityBased: true
  };
}
var SCROLL_ZONE_PX = 25;
function makeScroller() {
  var scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = {
      directionObj: void 0,
      stepPx: 0
    };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(function() {
        return scrollContainer(containerEl);
      });
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    var isAlreadyScrolling = !!scrollingInfo.directionObj;
    var scrollingVertically = false, scrollingHorizontally = false;
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: 1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: -1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: 1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: -1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node) {
  var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (var keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }
  return true;
}
var INTERVAL_MS = 200;
var TOLERANCE_PX = 10;
var _makeScroller = makeScroller();
var scrollIfNeeded = _makeScroller.scrollIfNeeded;
var resetScrolling = _makeScroller.resetScrolling;
var next;
function observe(draggedEl2, dropZones) {
  var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
  var lastDropZoneFound;
  var lastIndexFound;
  var lastIsDraggedInADropZone = false;
  var lastCentrePositionOfDragged;
  var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
    return getDepth(dz2) - getDepth(dz1);
  });
  function andNow() {
    var currentCenterOfDragged = findCenterOfElement(draggedEl2);
    var scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      printDebug(function() {
        return "off document";
      });
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    var isDraggedInADropZone = false;
    var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        var indexObj = findWouldBeIndex(draggedEl2, dz);
        if (indexObj === null) {
          continue;
        }
        var index = indexObj.index;
        isDraggedInADropZone = true;
        if (dz !== lastDropZoneFound) {
          lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
          dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
          lastDropZoneFound = dz;
        } else if (index !== lastIndexFound) {
          dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
          lastIndexFound = index;
        }
        break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  printDebug(function() {
    return "unobserving";
  });
  clearTimeout(next);
  resetScrolling();
  resetIndexesCache();
}
var INTERVAL_MS$1 = 300;
var mousePosition;
function updateMousePosition(e) {
  var c = e.touches ? e.touches[0] : e;
  mousePosition = {
    x: c.clientX,
    y: c.clientY
  };
}
var _makeScroller$1 = makeScroller();
var scrollIfNeeded$1 = _makeScroller$1.scrollIfNeeded;
var resetScrolling$1 = _makeScroller$1.resetScrolling;
var next$1;
function loop2() {
  if (mousePosition) {
    scrollIfNeeded$1(mousePosition, document.documentElement);
  }
  next$1 = window.setTimeout(loop2, INTERVAL_MS$1);
}
function armWindowScroller() {
  printDebug(function() {
    return "arming window scroller";
  });
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop2();
}
function disarmWindowScroller() {
  printDebug(function() {
    return "disarming window scroller";
  });
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next$1);
  resetScrolling$1();
}
var TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  var rect = originalElement.getBoundingClientRect();
  var draggedEl2 = originalElement.cloneNode(true);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  var elTopPx = rect.top;
  var elLeftPx = rect.left;
  draggedEl2.style.top = "".concat(elTopPx, "px");
  draggedEl2.style.left = "".concat(elLeftPx, "px");
  if (positionCenterOnXY) {
    var center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(function() {
      draggedEl2.style.top = "".concat(elTopPx, "px");
      draggedEl2.style.left = "".concat(elLeftPx, "px");
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = "".concat(rect.height, "px");
  draggedEl2.style.width = "".concat(rect.width, "px");
  draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
  window.setTimeout(function() {
    return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
  }, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY, transformDraggedElement) {
  var newRect = copyFromEl.getBoundingClientRect();
  var draggedElRect = draggedEl2.getBoundingClientRect();
  var widthChange = newRect.width - draggedElRect.width;
  var heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    var relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    draggedEl2.style.height = "".concat(newRect.height, "px");
    draggedEl2.style.width = "".concat(newRect.width, "px");
    draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
    draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
  }
  copyStylesFromTo(copyFromEl, draggedEl2);
  transformDraggedElement();
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  var computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(function(s) {
    return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type";
  }).forEach(function(s) {
    return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
  });
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = function() {
    return false;
  };
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideOriginalDragTarget(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.add(c);
    });
  });
}
function styleInactiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = "";
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.contains(c) && dz.classList.remove(c);
    });
  });
}
function preventShrinking(el) {
  var originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  var originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
var DEFAULT_DROP_ZONE_TYPE = "--any--";
var MIN_OBSERVATION_INTERVAL_MS = 100;
var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
var DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var originalDragTarget;
var draggedEl;
var draggedElData;
var draggedElType;
var originDropZone;
var originIndex;
var shadowElData;
var shadowElDropZone;
var dragStartMousePosition;
var currentMousePosition;
var isWorkingOnPreviousDrag = false;
var finalizingPreviousDrag = false;
var unlockOriginDzMinDimensions;
var isDraggedOutsideOfAnyDz = false;
var typeToDropZones = new Map();
var dzToConfig = new Map();
var elToMouseDownListener = new WeakMap();
function registerDropZone(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  typeToDropZones.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones["delete"](type);
  }
}
function watchDraggedElement() {
  printDebug(function() {
    return "watching dragged element";
  });
  armWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator = _createForOfIteratorHelper(dropZones), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var dz = _step.value;
      dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  var observationIntervalMs = Math.max.apply(Math, [MIN_OBSERVATION_INTERVAL_MS].concat(_toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
    return dzToConfig.get(dz2).dropAnimationDurationMs;
  }))));
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  printDebug(function() {
    return "unwatching dragged element";
  });
  disarmWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var dz = _step2.value;
      dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  unobserve();
}
function findShadowPlaceHolderIdx(items) {
  return items.findIndex(function(item) {
    return item[ITEM_ID_KEY] === SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function findShadowElementIdx(items) {
  return items.findIndex(function(item) {
    return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[ITEM_ID_KEY] !== SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function handleDraggedEntered(e) {
  printDebug(function() {
    return ["dragged entered", e.currentTarget, e.detail];
  });
  var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "ignoring dragged entered because drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter(function(item) {
    return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
  });
  printDebug(function() {
    return "dragged entered items ".concat(toString(items));
  });
  if (originDropZone !== e.currentTarget) {
    var originZoneItems = dzToConfig.get(originDropZone).items;
    var newOriginZoneItems = originZoneItems.filter(function(item) {
      return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  } else {
    var shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
    if (shadowPlaceHolderIdx !== -1) {
      printDebug(function() {
        return "removing placeholder item from origin dz";
      });
      items.splice(shadowPlaceHolderIdx, 1);
    }
  }
  var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
  var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
  shadowElDropZone = e.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_ENTERED,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedLeft(e) {
  if (!isWorkingOnPreviousDrag)
    return;
  printDebug(function() {
    return ["dragged left", e.currentTarget, e.detail];
  });
  var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  var shadowElIdx = findShadowElementIdx(items);
  var shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  var _e$detail = e.detail, type = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
    printDebug(function() {
      return "dragged left all, putting shadow element back in the origin dz";
    });
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    var originZoneItems = dzToConfig.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e) {
  printDebug(function() {
    return ["dragged is over index", e.currentTarget, e.detail];
  });
  var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  var index = e.detail.indexObj.index;
  var shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_OVER_INDEX,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleMouseMove(e) {
  e.preventDefault();
  var c = e.touches ? e.touches[0] : e;
  currentMousePosition = {
    x: c.clientX,
    y: c.clientY
  };
  draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
}
function handleDrop() {
  printDebug(function() {
    return "dropped";
  });
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop);
  window.removeEventListener("touchend", handleDrop);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    printDebug(function() {
      return "element was dropped right after it left origin but before entering somewhere else";
    });
    shadowElDropZone = originDropZone;
  }
  printDebug(function() {
    return ["dropped in dz", shadowElDropZone];
  });
  var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type = _dzToConfig$get4.type;
  styleInactiveDropZones(typeToDropZones.get(type), function(dz) {
    return dzToConfig.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig.get(dz).dropTargetClasses;
  });
  var shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map(function(item) {
    return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
  });
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback) {
  var shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  var newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
  var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
  window.setTimeout(callback, dropAnimationDurationMs);
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    transformDraggedElement: function transformDraggedElement() {
    },
    centreDraggedOnCursor: false
  };
  printDebug(function() {
    return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
      node
    }];
  });
  var elToIdx = new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleFalseAlarm, {
      passive: false
    });
    window.addEventListener("touchend", handleFalseAlarm, {
      passive: false
    });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e) {
    if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
      printDebug(function() {
        return "won't initiate drag on a nested input element";
      });
      return;
    }
    if (e.button) {
      printDebug(function() {
        return "ignoring none left click button: ".concat(e.button);
      });
      return;
    }
    if (isWorkingOnPreviousDrag) {
      printDebug(function() {
        return "cannot start a new drag before finalizing previous one";
      });
      return;
    }
    e.stopPropagation();
    var c = e.touches ? e.touches[0] : e;
    dragStartMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    currentMousePosition = _objectSpread2({}, dragStartMousePosition);
    originalDragTarget = e.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    printDebug(function() {
      return ["drag start config: ".concat(toString(config)), originalDragTarget];
    });
    isWorkingOnPreviousDrag = true;
    var currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    var rootNode = originDropZone.getRootNode();
    var originDropZoneRoot = rootNode.body || rootNode;
    var items = config.items, type = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
    draggedElData = _objectSpread2({}, items[currentIdx]);
    draggedElType = type;
    shadowElData = _objectSpread2(_objectSpread2({}, draggedElData), {}, _defineProperty({}, SHADOW_ITEM_MARKER_PROPERTY_NAME, true));
    var placeHolderElData = _objectSpread2(_objectSpread2({}, shadowElData), {}, _defineProperty({}, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID));
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideOriginalDragTarget(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
      return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
    }), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    items.splice(currentIdx, 1, placeHolderElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    window.addEventListener("mousemove", handleMouseMove, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMove, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleDrop, {
      passive: false
    });
    window.addEventListener("touchend", handleDrop, {
      passive: false
    });
  }
  function configure(_ref) {
    var _ref$items = _ref.items, items = _ref$items === void 0 ? void 0 : _ref$items, _ref$flipDurationMs = _ref.flipDurationMs, dropAnimationDurationMs = _ref$flipDurationMs === void 0 ? 0 : _ref$flipDurationMs, _ref$type = _ref.type, newType = _ref$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref$type, _ref$dragDisabled = _ref.dragDisabled, dragDisabled = _ref$dragDisabled === void 0 ? false : _ref$dragDisabled, _ref$morphDisabled = _ref.morphDisabled, morphDisabled = _ref$morphDisabled === void 0 ? false : _ref$morphDisabled, _ref$dropFromOthersDi = _ref.dropFromOthersDisabled, dropFromOthersDisabled = _ref$dropFromOthersDi === void 0 ? false : _ref$dropFromOthersDi, _ref$dropTargetStyle = _ref.dropTargetStyle, dropTargetStyle = _ref$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref$dropTargetStyle, _ref$dropTargetClasse = _ref.dropTargetClasses, dropTargetClasses = _ref$dropTargetClasse === void 0 ? [] : _ref$dropTargetClasse, _ref$transformDragged = _ref.transformDraggedElement, transformDraggedElement = _ref$transformDragged === void 0 ? function() {
    } : _ref$transformDragged, _ref$centreDraggedOnC = _ref.centreDraggedOnCursor, centreDraggedOnCursor = _ref$centreDraggedOnC === void 0 ? false : _ref$centreDraggedOnC;
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones([node], function() {
        return config.dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
      styleActiveDropZones([node], function() {
        return dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
    function getConfigProp(dz, propName) {
      return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
    }
    if (isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      } else {
        styleActiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig.set(node, config);
    var shadowElIdx = findShadowElementIdx(config.items);
    var _loop = function _loop2(idx2) {
      var draggableEl = node.children[idx2];
      styleDraggable(draggableEl, dragDisabled);
      if (idx2 === shadowElIdx) {
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y, function() {
            return config.transformDraggedElement(draggedEl, draggedElData, idx2);
          });
        }
        decorateShadowEl(draggableEl);
        return "continue";
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx2);
    };
    for (var idx = 0; idx < node.children.length; idx++) {
      var _ret = _loop(idx);
      if (_ret === "continue")
        continue;
    }
  }
  configure(options);
  return {
    update: function update2(newOptions) {
      printDebug(function() {
        return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "pointer dndzone will destroy";
      });
      unregisterDropZone(node, config.type);
      dzToConfig["delete"](node);
    }
  };
}
var _ID_TO_INSTRUCTION;
var INSTRUCTION_IDs = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
var ALERT_DIV_ID = "dnd-action-aria-alert";
var alertsDiv;
function initAriaOnBrowser() {
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), id = _ref2[0], txt = _ref2[1];
    return document.body.prepend(instructionToHiddenDiv(id, txt));
  });
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return _objectSpread2({}, INSTRUCTION_IDs);
}
function instructionToHiddenDiv(id, txt) {
  var div = document.createElement("div");
  div.id = id;
  div.innerHTML = "<p>".concat(txt, "</p>");
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  alertsDiv.innerHTML = "";
  var alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
var DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var isDragging = false;
var draggedItemType;
var focusedDz;
var focusedDzLabel = "";
var focusedItem;
var focusedItemId;
var focusedItemLabel = "";
var allDragTargets = new WeakSet();
var elToKeyDownListeners = new WeakMap();
var elToFocusListeners = new WeakMap();
var dzToHandles = new Map();
var dzToConfig$1 = new Map();
var typeToDropZones$1 = new Map();
var INSTRUCTION_IDs$1 = initAria();
function registerDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "adding global keydown and click handlers";
    });
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "unregistering drop-zone";
  });
  if (focusedDz === dropZoneEl) {
    handleDrop$1();
  }
  typeToDropZones$1.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1["delete"](type);
  }
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "removing global keydown and click handlers";
    });
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
  }
}
function globalKeyDownHandler(e) {
  if (!isDragging)
    return;
  switch (e.key) {
    case "Escape": {
      handleDrop$1();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    printDebug(function() {
      return "clicked outside of any draggable";
    });
    handleDrop$1();
  }
}
function handleZoneFocus(e) {
  printDebug(function() {
    return "zone focus";
  });
  if (!isDragging)
    return;
  var newlyFocusedDz = e.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
  var originItem = originItems.find(function(item) {
    return item[ITEM_ID_KEY] === focusedItemId;
  });
  var originIdx = originItems.indexOf(originItem);
  var itemToMove = originItems.splice(originIdx, 1)[0];
  var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
    }
  }
  var dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, {
    trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
    trigger: TRIGGERS.DROPPED_INTO_ZONE,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(function(_ref, dz) {
    var update2 = _ref.update;
    return update2(dzToConfig$1.get(dz));
  });
}
function handleDrop$1() {
  var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  printDebug(function() {
    return "drop";
  });
  if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
    return dzToConfig$1.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig$1.get(dz).dropTargetClasses;
  });
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap(arr, i, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
  }
  function handleKeyDown(e) {
    printDebug(function() {
      return ["handling key down", e.key];
    });
    switch (e.key) {
      case "Enter":
      case " ": {
        if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        if (isDragging) {
          handleDrop$1();
        } else {
          handleDragStart(e);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
        var children2 = Array.from(node.children);
        var idx = children2.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow down", idx];
        });
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
          }
          swap(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
        var _children = Array.from(node.children);
        var _idx = _children.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow up", _idx];
        });
        if (_idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
          }
          swap(_items, _idx, _idx - 1);
          dispatchFinalizeEvent(node, _items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
    }
  }
  function handleDragStart(e) {
    printDebug(function() {
      return "drag start";
    });
    setCurrentFocusedItem(e.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
      return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
    });
    styleActiveDropZones(dropTargets, function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    if (!config.autoAriaDisabled) {
      var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
      if (dropTargets.length > 1) {
        msg += ", or tab to another list in order to move the item into it";
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    triggerAllDzsUpdate();
  }
  function handleClick(e) {
    if (!isDragging)
      return;
    if (e.currentTarget === focusedItem)
      return;
    e.stopPropagation();
    handleDrop$1(false);
    handleDragStart(e);
  }
  function setCurrentFocusedItem(draggableEl) {
    var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
    var children2 = Array.from(node.children);
    var focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
    }
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    registerDropZone$1(node, newType);
    dzToConfig$1.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    var _loop = function _loop2(i2) {
      var draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        printDebug(function() {
          return ["focusing on", {
            i: i2,
            focusedItemId
          }];
        });
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    };
    for (var i = 0; i < node.children.length; i++) {
      _loop(i);
    }
  }
  configure(options);
  var handles = {
    update: function update2(newOptions) {
      printDebug(function() {
        return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "keyboard dndzone will destroy";
      });
      unregisterDropZone$1(node, config.type);
      dzToConfig$1["delete"](node);
      dzToHandles["delete"](node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
function dndzone$2(node, options) {
  validateOptions(options);
  var pointerZone = dndzone(node, options);
  var keyboardZone = dndzone$1(node, options);
  return {
    update: function update2(newOptions) {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: function destroy() {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function validateOptions(options) {
  var items = options.items, flipDurationMs4 = options.flipDurationMs, type = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"]);
  if (Object.keys(rest).length > 0) {
    console.warn("dndzone will ignore unknown options", rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  var itemWithMissingId = items.find(function(item) {
    return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
  });
  if (itemWithMissingId) {
    throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
  }
}
function isInt(value) {
  return !isNaN(value) && function(x) {
    return (x | 0) === x;
  }(parseFloat(value));
}

// src/settings/ui/Weekdays.svelte
var import_obsidian3 = __toModule(require("obsidian"));

// src/settings/ui/Detail.svelte
var import_obsidian2 = __toModule(require("obsidian"));
function add_css2(target) {
  append_styles(target, "svelte-lbt0gy", ".add-new.svelte-lbt0gy{padding-top:0.75rem;padding-bottom:0.75rem;display:flex;width:100%}");
}
var get_pre_add_slot_changes = (dirty) => ({});
var get_pre_add_slot_context = (ctx) => ({});
function create_fragment2(ctx) {
  let details;
  let summary;
  let h4;
  let t0;
  let t1;
  let t2;
  let div0;
  let add_action;
  let t3;
  let div1;
  let current;
  let mounted;
  let dispose;
  const pre_add_slot_template = ctx[6]["pre-add"];
  const pre_add_slot = create_slot(pre_add_slot_template, ctx, ctx[5], get_pre_add_slot_context);
  const default_slot_template = ctx[6].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[5], null);
  return {
    c() {
      details = element("details");
      summary = element("summary");
      h4 = element("h4");
      t0 = text(ctx[0]);
      t1 = space();
      if (pre_add_slot)
        pre_add_slot.c();
      t2 = space();
      div0 = element("div");
      t3 = space();
      div1 = element("div");
      if (default_slot)
        default_slot.c();
      attr(div0, "class", "add-new svelte-lbt0gy");
      attr(div1, "class", "fantasy-calendar-container");
      details.open = ctx[1];
    },
    m(target, anchor) {
      insert(target, details, anchor);
      append(details, summary);
      append(summary, h4);
      append(h4, t0);
      append(details, t1);
      if (pre_add_slot) {
        pre_add_slot.m(details, null);
      }
      append(details, t2);
      append(details, div0);
      append(details, t3);
      append(details, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      current = true;
      if (!mounted) {
        dispose = action_destroyer(add_action = ctx[2].call(null, div0));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 1)
        set_data(t0, ctx2[0]);
      if (pre_add_slot) {
        if (pre_add_slot.p && (!current || dirty & 32)) {
          update_slot_base(pre_add_slot, pre_add_slot_template, ctx2, ctx2[5], !current ? get_all_dirty_from_scope(ctx2[5]) : get_slot_changes(pre_add_slot_template, ctx2[5], dirty, get_pre_add_slot_changes), get_pre_add_slot_context);
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 32)) {
          update_slot_base(default_slot, default_slot_template, ctx2, ctx2[5], !current ? get_all_dirty_from_scope(ctx2[5]) : get_slot_changes(default_slot_template, ctx2[5], dirty, null), null);
        }
      }
      if (!current || dirty & 2) {
        details.open = ctx2[1];
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(pre_add_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(pre_add_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(details);
      if (pre_add_slot)
        pre_add_slot.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch2 = createEventDispatcher();
  let { label } = $$props;
  let { open = false } = $$props;
  let { disabled = false } = $$props;
  let button;
  const add = (node) => {
    $$invalidate(4, button = new import_obsidian2.ButtonComponent(node).setTooltip("Add New").setButtonText("+").setDisabled(disabled).onClick(async () => {
      dispatch2("new-item");
    }));
    $$invalidate(4, button.buttonEl.style.width = "100%", button);
  };
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(0, label = $$props2.label);
    if ("open" in $$props2)
      $$invalidate(1, open = $$props2.open);
    if ("disabled" in $$props2)
      $$invalidate(3, disabled = $$props2.disabled);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 24) {
      $: {
        if (button) {
          button.setDisabled(disabled);
        }
      }
    }
  };
  return [label, open, add, disabled, button, $$scope, slots];
}
var Detail = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, { label: 0, open: 1, disabled: 3 }, add_css2);
  }
};
var Detail_default = Detail;

// src/settings/ui/Weekdays.svelte
function add_css3(target) {
  append_styles(target, "svelte-1xaj2n2", ".overflow.svelte-1xaj2n2.svelte-1xaj2n2{padding-top:0.75rem}.weekday.svelte-1xaj2n2.svelte-1xaj2n2{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1xaj2n2 .icon.svelte-1xaj2n2{align-items:center}.weekday.svelte-1xaj2n2.svelte-1xaj2n2{margin-top:0.5rem}");
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i];
  return child_ctx;
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  child_ctx[16] = i;
  return child_ctx;
}
function create_else_block(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value_1 = ctx[2];
  const get_key = (ctx2) => ctx2[17].id;
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_1(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[2],
            flipDurationMs,
            dragDisabled: ctx[3]
          })),
          listen(div, "consider", ctx[10]),
          listen(div, "finalize", ctx[11])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 516) {
        each_value_1 = ctx2[2];
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_1, each_1_lookup, div, fix_and_destroy_block, create_each_block_1, null, get_each_context_1);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 12)
        dndzone_action.update.call(null, {
          items: ctx2[2],
          flipDurationMs,
          dragDisabled: ctx2[3]
        });
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_1(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new weekday to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block_1(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(div0, "class", "icon svelte-1xaj2n2");
      attr(div2, "class", "icon svelte-1xaj2n2");
      attr(div3, "class", "weekday svelte-1xaj2n2");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[5].call(null, div0)),
          listen(div0, "mousedown", ctx[9]),
          listen(div0, "touchstart", ctx[9]),
          action_destroyer(name_action = ctx[7].call(null, div1, ctx[17])),
          action_destroyer(trash_action = ctx[6].call(null, div2, ctx[17]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 4)
        name_action.update.call(null, ctx[17]);
      if (trash_action && is_function(trash_action.update) && dirty & 4)
        trash_action.update.call(null, ctx[17]);
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs });
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2].length)
      return create_if_block_1;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block2(ctx) {
  let div5;
  let div4;
  let div2;
  let t3;
  let div3;
  let select;
  let select_aria_label_value;
  let mounted;
  let dispose;
  let each_value = ctx[2];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  return {
    c() {
      div5 = element("div");
      div4 = element("div");
      div2 = element("div");
      div2.innerHTML = `<div class="setting-item-name">First Day</div> 
                        <div class="setting-item-description">This only effects which day of the week the first
                            year starts on.</div>`;
      t3 = space();
      div3 = element("div");
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div2, "class", "setting-item-info");
      attr(select, "class", "dropdown");
      attr(select, "aria-label", select_aria_label_value = !ctx[1] ? "Cannot be modified without overflow." : void 0);
      if (ctx[0] === void 0)
        add_render_callback(() => ctx[12].call(select));
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item");
      attr(div5, "class", "first-weekday");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div4);
      append(div4, div2);
      append(div4, t3);
      append(div4, div3);
      append(div3, select);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(select, null);
      }
      select_option(select, ctx[0]);
      if (!mounted) {
        dispose = listen(select, "change", ctx[12]);
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 7) {
        each_value = ctx2[2];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & 2 && select_aria_label_value !== (select_aria_label_value = !ctx2[1] ? "Cannot be modified without overflow." : void 0)) {
        attr(select, "aria-label", select_aria_label_value);
      }
      if (dirty & 1) {
        select_option(select, ctx2[0]);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block(ctx) {
  let option;
  let t_value = (ctx[14].name ?? "") + "";
  let t;
  let option_disabled_value;
  let option_value_value;
  let option_selected_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.disabled = option_disabled_value = !ctx[1];
      option.__value = option_value_value = ctx[16];
      option.value = option.__value;
      option.selected = option_selected_value = ctx[16] == ctx[0];
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t_value !== (t_value = (ctx2[14].name ?? "") + ""))
        set_data(t, t_value);
      if (dirty & 2 && option_disabled_value !== (option_disabled_value = !ctx2[1])) {
        option.disabled = option_disabled_value;
      }
      if (dirty & 1 && option_selected_value !== (option_selected_value = ctx2[16] == ctx2[0])) {
        option.selected = option_selected_value;
      }
    },
    d(detaching) {
      if (detaching)
        detach(option);
    }
  };
}
function create_pre_add_slot(ctx) {
  let div;
  let overflowNode_action;
  let t;
  let if_block_anchor;
  let mounted;
  let dispose;
  let if_block = ctx[2].length && create_if_block2(ctx);
  return {
    c() {
      div = element("div");
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(div, "class", "overflow svelte-1xaj2n2");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      if (!mounted) {
        dispose = action_destroyer(overflowNode_action = ctx[8].call(null, div));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (ctx2[2].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching)
        detach(t);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment3(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Weekdays",
      $$slots: {
        "pre-add": [create_pre_add_slot],
        default: [create_default_slot]
      },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[4]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1048591) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
var flipDurationMs = 300;
function instance3($$self, $$props, $$invalidate) {
  let { firstWeekday = 0 } = $$props;
  let { overflow = true } = $$props;
  const addNew = () => {
    $$invalidate(2, weekdays = [...weekdays, { type: "day", name: null, id: nanoid(6) }]);
  };
  const grip = (node) => {
    (0, import_obsidian3.setIcon)(node, "fantasy-calendar-grip");
  };
  const trash = (node, item) => {
    new import_obsidian3.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(2, weekdays = weekdays.filter((day) => day.id !== item.id)));
  };
  const name = (node, item) => {
    const comp = new import_obsidian3.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange((v) => {
      item.name = v;
      dispatch2("weekday-update", weekdays);
      $$invalidate(2, weekdays);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  const overflowNode = (node) => {
    new import_obsidian3.Setting(node).setName("Overflow Weeks").setDesc("Turn this off to make each month start on the first of the week.").addToggle((t) => {
      t.setValue(overflow).onChange((v) => {
        $$invalidate(1, overflow = v);
      });
    });
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(3, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(2, weekdays = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(2, weekdays = newItems);
    if (source === SOURCES.POINTER) {
      $$invalidate(3, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  let { weekdays = [] } = $$props;
  function select_change_handler() {
    firstWeekday = select_value(this);
    $$invalidate(0, firstWeekday);
  }
  $$self.$$set = ($$props2) => {
    if ("firstWeekday" in $$props2)
      $$invalidate(0, firstWeekday = $$props2.firstWeekday);
    if ("overflow" in $$props2)
      $$invalidate(1, overflow = $$props2.overflow);
    if ("weekdays" in $$props2)
      $$invalidate(2, weekdays = $$props2.weekdays);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 4) {
      $: {
        dispatch2("weekday-update", weekdays);
      }
    }
    if ($$self.$$.dirty & 1) {
      $: {
        dispatch2("first-weekday-update", firstWeekday);
      }
    }
    if ($$self.$$.dirty & 2) {
      $: {
        dispatch2("overflow-update", overflow);
      }
    }
  };
  return [
    firstWeekday,
    overflow,
    weekdays,
    dragDisabled,
    addNew,
    grip,
    trash,
    name,
    overflowNode,
    startDrag,
    handleConsider,
    handleFinalize,
    select_change_handler
  ];
}
var Weekdays = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, {
      firstWeekday: 0,
      overflow: 1,
      weekdays: 2
    }, add_css3);
  }
};
var Weekdays_default = Weekdays;

// src/settings/ui/Months.svelte
var import_obsidian5 = __toModule(require("obsidian"));

// src/settings/ui/Month.svelte
var import_obsidian4 = __toModule(require("obsidian"));
function add_css4(target) {
  append_styles(target, "svelte-1nt6wkb", ".month.svelte-1nt6wkb.svelte-1nt6wkb{display:grid;grid-template-columns:1fr 1fr auto auto;align-items:center;justify-content:space-between;gap:1rem}.month.svelte-1nt6wkb .icon.svelte-1nt6wkb{align-items:center}");
}
function create_fragment4(ctx) {
  let div1;
  let input0;
  let t0;
  let input1;
  let t1;
  let select;
  let option0;
  let option1;
  let t4;
  let div0;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      input0 = element("input");
      t0 = space();
      input1 = element("input");
      t1 = space();
      select = element("select");
      option0 = element("option");
      option0.textContent = "Month";
      option1 = element("option");
      option1.textContent = "Intercalary";
      t4 = space();
      div0 = element("div");
      attr(input0, "type", "text");
      attr(input0, "spellcheck", "false");
      attr(input0, "placeholder", "Name");
      set_style(input0, "width", "100%");
      attr(input1, "type", "number");
      attr(input1, "spellcheck", "false");
      attr(input1, "placeholder", "Length");
      set_style(input1, "width", "100%");
      attr(input1, "min", "0");
      option0.__value = "month";
      option0.value = option0.__value;
      option1.__value = "intercalary";
      option1.value = option1.__value;
      attr(select, "class", "dropdown");
      if (ctx[0] === void 0)
        add_render_callback(() => ctx[8].call(select));
      attr(div0, "class", "icon svelte-1nt6wkb");
      attr(div1, "class", "month svelte-1nt6wkb");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, input0);
      set_input_value(input0, ctx[1]);
      append(div1, t0);
      append(div1, input1);
      set_input_value(input1, ctx[2]);
      append(div1, t1);
      append(div1, select);
      append(select, option0);
      append(select, option1);
      select_option(select, ctx[0]);
      append(div1, t4);
      append(div1, div0);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[6]),
          listen(input0, "input", ctx[4]),
          listen(input1, "input", ctx[7]),
          listen(input1, "input", ctx[4]),
          listen(select, "change", ctx[8]),
          listen(select, "input", ctx[4]),
          action_destroyer(trash_action = ctx[3].call(null, div0))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2 && input0.value !== ctx2[1]) {
        set_input_value(input0, ctx2[1]);
      }
      if (dirty & 4 && to_number(input1.value) !== ctx2[2]) {
        set_input_value(input1, ctx2[2]);
      }
      if (dirty & 1) {
        select_option(select, ctx2[0]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { month } = $$props;
  let name = month.name;
  let type = month.type;
  let length = month.length;
  const trash = (node) => {
    new import_obsidian4.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      dispatch2("month-delete");
    });
  };
  const update2 = (0, import_obsidian4.debounce)(() => {
    $$invalidate(5, month.name = name, month);
    $$invalidate(5, month.type = type, month);
    $$invalidate(5, month.length = length, month);
    dispatch2("month-update");
  }, 300, true);
  function input0_input_handler() {
    name = this.value;
    $$invalidate(1, name);
  }
  function input1_input_handler() {
    length = to_number(this.value);
    $$invalidate(2, length);
  }
  function select_change_handler() {
    type = select_value(this);
    $$invalidate(0, type);
  }
  $$self.$$set = ($$props2) => {
    if ("month" in $$props2)
      $$invalidate(5, month = $$props2.month);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $: {
        $$invalidate(5, month.type = type, month);
      }
    }
  };
  return [
    type,
    name,
    length,
    trash,
    update2,
    month,
    input0_input_handler,
    input1_input_handler,
    select_change_handler
  ];
}
var Month = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, { month: 5 }, add_css4);
  }
};
var Month_default = Month;

// src/settings/ui/Months.svelte
function add_css5(target) {
  append_styles(target, "svelte-xv4vbj", ".month.svelte-xv4vbj{display:flex;align-items:center;margin-top:0.5rem;gap:1rem}");
}
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_else_block2(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[0];
  const get_key = (ctx2) => ctx2[12].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context2(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block2(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[0],
            flipDurationMs: flipDurationMs2,
            dragDisabled: ctx[1]
          })),
          listen(div, "consider", ctx[6]),
          listen(div, "finalize", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 297) {
        each_value = ctx2[0];
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block2, null, get_each_context2);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 3)
        dndzone_action.update.call(null, {
          items: ctx2[0],
          flipDurationMs: flipDurationMs2,
          dragDisabled: ctx2[1]
        });
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block3(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new month to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block2(key_1, ctx) {
  let div1;
  let div0;
  let grip_action;
  let t0;
  let monthinstance;
  let t1;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  function month_delete_handler() {
    return ctx[9](ctx[12]);
  }
  monthinstance = new Month_default({ props: { month: ctx[12] } });
  monthinstance.$on("mousedown", ctx[5]);
  monthinstance.$on("month-delete", month_delete_handler);
  monthinstance.$on("month-update", ctx[10]);
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      create_component(monthinstance.$$.fragment);
      t1 = space();
      attr(div0, "class", "icon");
      attr(div1, "class", "month svelte-xv4vbj");
      this.first = div1;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div1, t0);
      mount_component(monthinstance, div1, null);
      append(div1, t1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[5]),
          listen(div0, "touchstart", ctx[5])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const monthinstance_changes = {};
      if (dirty & 1)
        monthinstance_changes.month = ctx[12];
      monthinstance.$set(monthinstance_changes);
    },
    r() {
      rect = div1.getBoundingClientRect();
    },
    f() {
      fix_position(div1);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div1, rect, flip, { duration: flipDurationMs2 });
    },
    i(local) {
      if (current)
        return;
      transition_in(monthinstance.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(monthinstance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(monthinstance);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block3, create_else_block2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment5(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Months",
      $$slots: { default: [create_default_slot2] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[2]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 32771) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
var flipDurationMs2 = 300;
function instance5($$self, $$props, $$invalidate) {
  const addNew = () => {
    $$invalidate(0, months = [
      ...months,
      {
        type: "month",
        name: null,
        length: null,
        id: nanoid(6)
      }
    ]);
    dispatch2("month-update", months);
  };
  const deleteMonth = (month) => {
    $$invalidate(0, months = months.filter((m) => m.id != month.id));
    dispatch2("month-update", months);
  };
  const updateMonth = (month) => {
  };
  const grip = (node) => {
    (0, import_obsidian5.setIcon)(node, "fantasy-calendar-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(1, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(0, months = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(1, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(0, months = newItems);
    dispatch2("month-update", months);
    if (source === SOURCES.POINTER) {
      $$invalidate(1, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  let { months = [] } = $$props;
  const month_delete_handler = (month) => deleteMonth(month);
  const month_update_handler = () => dispatch2("month-update", months);
  $$self.$$set = ($$props2) => {
    if ("months" in $$props2)
      $$invalidate(0, months = $$props2.months);
  };
  return [
    months,
    dragDisabled,
    addNew,
    deleteMonth,
    grip,
    startDrag,
    handleConsider,
    handleFinalize,
    dispatch2,
    month_delete_handler,
    month_update_handler
  ];
}
var Months = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, { months: 0 }, add_css5);
  }
};
var Months_default = Months;

// src/settings/ui/Event.svelte
var import_obsidian6 = __toModule(require("obsidian"));

// src/settings/ui/Dot.svelte
function add_css6(target) {
  append_styles(target, "svelte-1ldxqlp", ".dot.svelte-1ldxqlp{display:inline-block;height:0.875em;width:0.875em;margin:0 1px}");
}
function create_fragment6(ctx) {
  let svg;
  let circle;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "stroke", ctx[0]);
      attr(circle, "fill", ctx[0]);
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", "dot svelte-1ldxqlp");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "aria-label", ctx[1]);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        attr(circle, "stroke", ctx2[0]);
      }
      if (dirty & 1) {
        attr(circle, "fill", ctx2[0]);
      }
      if (dirty & 2) {
        attr(svg, "aria-label", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let { color } = $$props;
  let { label } = $$props;
  $$self.$$set = ($$props2) => {
    if ("color" in $$props2)
      $$invalidate(0, color = $$props2.color);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
  };
  return [color, label];
}
var Dot = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, { color: 0, label: 1 }, add_css6);
  }
};
var Dot_default = Dot;

// src/settings/ui/Event.svelte
function add_css7(target) {
  append_styles(target, "svelte-3snb0d", ".event.svelte-3snb0d.svelte-3snb0d{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.event-info.svelte-3snb0d.svelte-3snb0d{width:100%}.icons.svelte-3snb0d.svelte-3snb0d{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.event.svelte-3snb0d .icon.svelte-3snb0d{align-items:center}.date.svelte-3snb0d.svelte-3snb0d{display:flex;justify-content:flex-start;gap:0.25rem}.clamp.svelte-3snb0d.svelte-3snb0d{display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;width:calc(var(--event-max-width) * 0.75)}");
}
function create_if_block4(ctx) {
  let dot;
  let current;
  dot = new Dot_default({
    props: {
      color: ctx[1].color,
      label: ctx[1].name
    }
  });
  return {
    c() {
      create_component(dot.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dot, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dot_changes = {};
      if (dirty & 2)
        dot_changes.color = ctx2[1].color;
      if (dirty & 2)
        dot_changes.label = ctx2[1].name;
      dot.$set(dot_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dot.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dot.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dot, detaching);
    }
  };
}
function create_fragment7(ctx) {
  let div6;
  let div2;
  let span0;
  let t0;
  let t1_value = ctx[0].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4;
  let span1;
  let t5_value = (ctx[0].description ?? "") + "";
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[1] != null && create_if_block4(ctx);
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      span0 = element("span");
      if (if_block)
        if_block.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      div0 = element("div");
      t3 = text(ctx[2]);
      t4 = space();
      span1 = element("span");
      t5 = text(t5_value);
      t6 = space();
      div5 = element("div");
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      attr(span0, "class", "setting-item-name");
      attr(div0, "class", "date svelte-3snb0d");
      attr(span1, "class", "clamp svelte-3snb0d");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "event-info svelte-3snb0d");
      attr(div3, "class", "icon svelte-3snb0d");
      attr(div4, "class", "icon svelte-3snb0d");
      attr(div5, "class", "icons svelte-3snb0d");
      attr(div6, "class", "event svelte-3snb0d");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div2, span0);
      if (if_block)
        if_block.m(span0, null);
      append(span0, t0);
      append(span0, t1);
      append(div2, t2);
      append(div2, div1);
      append(div1, div0);
      append(div0, t3);
      append(div1, t4);
      append(div1, span1);
      append(span1, t5);
      append(div6, t6);
      append(div6, div5);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[5].call(null, div3)),
          listen(div3, "click", ctx[6]),
          action_destroyer(trash_action = ctx[4].call(null, div4)),
          listen(div4, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (ctx2[1] != null) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(span0, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if ((!current || dirty & 1) && t1_value !== (t1_value = ctx2[0].name + ""))
        set_data(t1, t1_value);
      if (!current || dirty & 4)
        set_data(t3, ctx2[2]);
      if ((!current || dirty & 1) && t5_value !== (t5_value = (ctx2[0].description ?? "") + ""))
        set_data(t5, t5_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  const trash = (node) => {
    let b = new import_obsidian6.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian6.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  let { event } = $$props;
  let { category } = $$props;
  let { date } = $$props;
  const click_handler = () => dispatch2("edit");
  const click_handler_1 = () => dispatch2("delete");
  $$self.$$set = ($$props2) => {
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("category" in $$props2)
      $$invalidate(1, category = $$props2.category);
    if ("date" in $$props2)
      $$invalidate(2, date = $$props2.date);
  };
  return [event, category, date, dispatch2, trash, edit, click_handler, click_handler_1];
}
var Event = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, { event: 0, category: 1, date: 2 }, add_css7);
  }
};
var Event_default = Event;

// src/settings/ui/Events.svelte
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block3(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 31) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block5(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new event to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block3(ctx) {
  let eventui;
  let current;
  function edit_handler() {
    return ctx[6](ctx[10]);
  }
  function delete_handler() {
    return ctx[7](ctx[10]);
  }
  eventui = new Event_default({
    props: {
      event: ctx[10],
      category: ctx[4](ctx[10].category),
      date: dateString(ctx[10].date, ctx[1], ctx[10].end)
    }
  });
  eventui.$on("edit", edit_handler);
  eventui.$on("delete", delete_handler);
  return {
    c() {
      create_component(eventui.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eventui, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const eventui_changes = {};
      if (dirty & 1)
        eventui_changes.event = ctx[10];
      if (dirty & 1)
        eventui_changes.category = ctx[4](ctx[10].category);
      if (dirty & 3)
        eventui_changes.date = dateString(ctx[10].date, ctx[1], ctx[10].end);
      eventui.$set(eventui_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(eventui.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eventui.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eventui, detaching);
    }
  };
}
function create_default_slot3(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block5, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment8(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Event",
      $$slots: { default: [create_default_slot3] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[8]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 8195) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let { categories = [] } = $$props;
  let { events = [] } = $$props;
  let { months = [] } = $$props;
  const dispatch2 = createEventDispatcher();
  const editEvent = (item) => {
    dispatch2("new-item", item);
  };
  const deleteEvent = (item) => {
    $$invalidate(0, events = events.filter((event) => event.id !== item.id));
    dispatch2("edit-events", events);
  };
  const getCategory = (category) => {
    return categories.find(({ id }) => id == category);
  };
  const edit_handler = (event) => editEvent(event);
  const delete_handler = (event) => deleteEvent(event);
  function new_item_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("categories" in $$props2)
      $$invalidate(5, categories = $$props2.categories);
    if ("events" in $$props2)
      $$invalidate(0, events = $$props2.events);
    if ("months" in $$props2)
      $$invalidate(1, months = $$props2.months);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $: {
        events.sort((a, b) => {
          if (a.date.year != b.date.year) {
            return a.date.year - b.date.year;
          }
          if (a.date.month != b.date.month) {
            return a.date.month - b.date.month;
          }
          return a.date.day - b.date.day;
        });
      }
    }
  };
  return [
    events,
    months,
    editEvent,
    deleteEvent,
    getCategory,
    categories,
    edit_handler,
    delete_handler,
    new_item_handler
  ];
}
var Events = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, { categories: 5, events: 0, months: 1 });
  }
};
var Events_default = Events;

// src/settings/ui/Categories.svelte
var import_obsidian7 = __toModule(require("obsidian"));

// src/utils/constants.ts
var DEFAULT_CATEGORY_COLOR = "#808080";
var MOON_SHADOWS = [
  "M6.5,16a9.5,9.5 0 1,0 19,0a9.5,9.5 0 1,0 -19,0",
  "M19.79,6C22.25,7.2,25,9.92,25,16s-2.75,8.8-5.21,10a10.59,10.59,0,0,1-3.79.71A10.72,10.72,0,0,1,16,5.28,10.59,10.59,0,0,1,19.79,6Z",
  "M19.43,5.86C21.79,7,24.5,9.7,24.5,16s-2.71,9-5.07,10.14a10.55,10.55,0,0,1-3.43.58A10.72,10.72,0,0,1,16,5.28,10.55,10.55,0,0,1,19.43,5.86Z",
  "M17.87,5.46C20.23,6.34,24,8.88,24,16.17c0,6.85-3.33,9.36-5.69,10.29a11,11,0,0,1-2.31.26A10.72,10.72,0,0,1,16,5.28,10.49,10.49,0,0,1,17.87,5.46Z",
  "M17.79,5.45C20,6.3,23.5,8.77,23.5,15.88c0,7.37-3.75,9.87-5.95,10.71a9.92,9.92,0,0,1-1.55.13A10.72,10.72,0,0,1,16,5.28,10.54,10.54,0,0,1,17.79,5.45Z",
  "M17.35,5.38c1.9.79,5.15,3.25,5.15,10.72,0,7.25-3.06,9.68-5,10.5a10.87,10.87,0,0,1-1.52.12A10.72,10.72,0,0,1,16,5.28,10.1,10.1,0,0,1,17.35,5.38Z",
  "M17.05,5.34c1.6.75,4.45,3.17,4.45,10.79,0,7.39-2.68,9.76-4.3,10.52a11.9,11.9,0,0,1-1.2.07A10.72,10.72,0,0,1,16,5.28,9,9,0,0,1,17.05,5.34Z",
  "M16.85,5.33c1.3.74,3.65,3.12,3.65,10.67s-2.35,9.93-3.65,10.67c-.28,0-.56,0-.85,0A10.72,10.72,0,0,1,16,5.28,7.92,7.92,0,0,1,16.85,5.33Z",
  "M16.46,5.31c.95.78,3,3.34,3,10.69s-2.09,9.91-3,10.69l-.46,0A10.72,10.72,0,0,1,16,5.28Z",
  "M16.29,5.3c.65.8,2.21,3.48,2.21,10.78S17,25.91,16.3,26.7l-.3,0A10.72,10.72,0,0,1,16,5.28Z",
  "M16.13,5.29c.37.89,1.37,3.92,1.37,10.79s-1,9.76-1.36,10.63H16A10.72,10.72,0,0,1,16,5.28Z",
  "M16,5.29A85.5,85.5,0,0,1,16.5,16,85.5,85.5,0,0,1,16,26.71h0A10.72,10.72,0,0,1,16,5.28Z",
  "M16,26.72A10.72,10.72,0,0,1,16,5.28Z",
  "M15.5,16A85.59,85.59,0,0,0,16,26.72,10.72,10.72,0,0,1,16,5.28,85.59,85.59,0,0,0,15.5,16Z",
  "M14.5,16.08c0,6.84,1,9.77,1.36,10.63a10.71,10.71,0,0,1,0-21.42C15.5,6.17,14.5,9.2,14.5,16.08Z",
  "M15.7,26.7a10.7,10.7,0,0,1,0-21.4c-.65.8-2.21,3.47-2.21,10.78S15,25.92,15.7,26.7Z",
  "M15.55,26.7a10.71,10.71,0,0,1,0-21.4c-1,.78-3.05,3.34-3.05,10.7S14.6,25.92,15.55,26.7Z",
  "M15.16,26.68a10.71,10.71,0,0,1,0-21.36C13.85,6.06,11.5,8.43,11.5,16S13.85,25.94,15.16,26.68Z",
  "M14.81,26.65A10.72,10.72,0,0,1,15,5.33c-1.59.76-4.45,3.17-4.45,10.8C10.5,23.53,13.19,25.9,14.81,26.65Z",
  "M14.49,26.6a10.71,10.71,0,0,1,.17-21.23c-1.9.8-5.16,3.24-5.16,10.73C9.5,23.37,12.57,25.79,14.49,26.6Z",
  "M14.46,26.6a10.71,10.71,0,0,1-.24-21.16C12,6.29,8.5,8.76,8.5,15.88,8.5,23.26,12.27,25.76,14.46,26.6Z",
  "M13.72,26.47a10.71,10.71,0,0,1,.43-21C11.78,6.33,8,8.87,8,16.17,8,23,11.35,25.55,13.72,26.47Z",
  "M12.6,26.19a10.73,10.73,0,0,1,0-20.35C10.23,7,7.5,9.67,7.5,16s2.73,9,5.1,10.16Z",
  "M12.23,26a10.7,10.7,0,0,1,0-20C9.77,7.19,7,9.9,7,16S9.77,24.81,12.23,26Z",
  null,
  "M19.77,26C22.23,24.81,25,22.1,25,16S22.23,7.19,19.77,6a10.7,10.7,0,0,1,0,20Z",
  "M19.4,26.16C21.77,25,24.5,22.33,24.5,16S21.77,7,19.4,5.84a10.71,10.71,0,0,1,0,20.32Z",
  "M18.28,26.47C20.65,25.55,24,23,24,16.17c0-7.3-3.78-9.84-6.15-10.72a10.71,10.71,0,0,1,.43,21Z",
  "M17.54,26.6c2.19-.84,6-3.34,6-10.72,0-7.12-3.5-9.59-5.72-10.44a10.71,10.71,0,0,1-.24,21.16Z",
  "M17.51,26.6c1.92-.81,5-3.23,5-10.5,0-7.49-3.26-9.93-5.16-10.73a10.71,10.71,0,0,1,.17,21.23Z",
  "M17.19,26.65c1.62-.75,4.31-3.12,4.31-10.52,0-7.63-2.86-10-4.45-10.8a10.72,10.72,0,0,1,.14,21.32Z",
  "M16.84,26.68c1.31-.74,3.66-3.11,3.66-10.68S18.15,6.06,16.84,5.32a10.71,10.71,0,0,1,0,21.36Z",
  "M16.45,26.7c.95-.78,3.05-3.34,3.05-10.7S17.4,6.08,16.45,5.3a10.71,10.71,0,0,1,0,21.4Z",
  "M16.3,26.7c.67-.78,2.2-3.37,2.2-10.62S16.94,6.1,16.29,5.3a10.7,10.7,0,0,1,0,21.4Z",
  "M16.14,26.71c.37-.86,1.36-3.79,1.36-10.63s-1-9.91-1.37-10.79a10.71,10.71,0,0,1,0,21.42Z",
  "M16,26.72A85.59,85.59,0,0,0,16.5,16,85.59,85.59,0,0,0,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72V5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72h0A85.59,85.59,0,0,1,15.5,16,85.59,85.59,0,0,1,16,5.28h0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72h-.14c-.37-.86-1.36-3.79-1.36-10.63s1-9.91,1.37-10.79H16a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72l-.3,0c-.67-.78-2.2-3.37-2.2-10.62s1.56-10,2.21-10.78l.29,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72l-.45,0c-1-.78-3.05-3.34-3.05-10.7s2.1-9.92,3.05-10.7l.45,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72c-.28,0-.56,0-.84,0C13.85,25.94,11.5,23.57,11.5,16s2.35-9.94,3.66-10.68c.28,0,.56,0,.84,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a11.7,11.7,0,0,1-1.19-.07c-1.62-.75-4.31-3.12-4.31-10.52,0-7.63,2.86-10,4.45-10.8.35,0,.7,0,1.05,0a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a10.85,10.85,0,0,1-1.51-.12c-1.92-.81-5-3.23-5-10.5,0-7.49,3.26-9.93,5.16-10.73A11.9,11.9,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a11.16,11.16,0,0,1-1.54-.12c-2.19-.84-6-3.34-6-10.72,0-7.12,3.5-9.59,5.72-10.44A10.43,10.43,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a10.69,10.69,0,0,1-2.28-.25C11.35,25.55,8,23,8,16.17c0-7.3,3.78-9.84,6.15-10.72A11.26,11.26,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z",
  "M16,26.72a10.63,10.63,0,0,1-3.4-.56C10.23,25,7.5,22.33,7.5,16s2.73-9,5.1-10.16A10.72,10.72,0,1,1,16,26.72Z",
  "M16,26.72a10.52,10.52,0,0,1-3.77-.7C9.77,24.81,7,22.1,7,16S9.77,7.19,12.23,6A10.52,10.52,0,0,1,16,5.28a10.72,10.72,0,0,1,0,21.44Z"
];
var SHADOW_MAP = {
  "New Moon": MOON_SHADOWS[0],
  "New Moon Fading": MOON_SHADOWS[1],
  "New Moon Faded": MOON_SHADOWS[2],
  "Waxing Crescent Rising": MOON_SHADOWS[3],
  "Waxing Crescent Risen": MOON_SHADOWS[4],
  "Waxing Crescent": MOON_SHADOWS[6],
  "Waxing Crescent Fading": MOON_SHADOWS[7],
  "Waxing Crescent Faded": MOON_SHADOWS[8],
  "First Quarter Rising": MOON_SHADOWS[9],
  "First Quarter Risen": MOON_SHADOWS[10],
  "First Quarter": MOON_SHADOWS[12],
  "First Quarter Fading": MOON_SHADOWS[13],
  "First Quarter Faded": MOON_SHADOWS[14],
  "Waxing Gibbous Rising": MOON_SHADOWS[15],
  "Waxing Gibbous Risen": MOON_SHADOWS[16],
  "Waxing Gibbous": MOON_SHADOWS[18],
  "Waxing Gibbous Fading": MOON_SHADOWS[19],
  "Waxing Gibbous Faded": MOON_SHADOWS[20],
  "Full Moon Rising": MOON_SHADOWS[21],
  "Full Moon Risen": MOON_SHADOWS[22],
  "Full Moon": MOON_SHADOWS[24],
  "Full Moon Fading": MOON_SHADOWS[25],
  "Full Moon Faded": MOON_SHADOWS[26],
  "Waning Gibbous Rising": MOON_SHADOWS[27],
  "Waning Gibbous Risen": MOON_SHADOWS[28],
  "Waning Gibbous": MOON_SHADOWS[30],
  "Waning Gibbous Fading": MOON_SHADOWS[31],
  "Waning Gibbous Faded": MOON_SHADOWS[32],
  "Last Quarter Rising": MOON_SHADOWS[33],
  "Last Quarter Risen": MOON_SHADOWS[34],
  "Last Quarter": MOON_SHADOWS[36],
  "Last Quarter Fading": MOON_SHADOWS[37],
  "Last Quarter Faded": MOON_SHADOWS[38],
  "Waning Crescent Rising": MOON_SHADOWS[39],
  "Waning Crescent Risen": MOON_SHADOWS[40],
  "Waning Crescent": MOON_SHADOWS[42],
  "Waning Crescent Fading": MOON_SHADOWS[43],
  "Waning Crescent Faded": MOON_SHADOWS[44],
  "New Moon Rising": MOON_SHADOWS[45],
  "New Moon Risen": MOON_SHADOWS[46]
};
var MOON_PHASES = {
  4: ["New Moon", "First Quarter", "Full Moon", "Last Quarter"],
  8: [
    "New Moon",
    "Waxing Crescent",
    "First Quarter",
    "Waxing Gibbous",
    "Full Moon",
    "Waning Gibbous",
    "Last Quarter",
    "Waning Crescent"
  ],
  16: [
    "New Moon",
    "New Moon Fading",
    "Waxing Crescent",
    "Waxing Crescent Fading",
    "First Quarter",
    "First Quarter Fading",
    "Waxing Gibbous",
    "Waxing Gibbous Fading",
    "Full Moon",
    "Full Moon Fading",
    "Waning Gibbous",
    "Waning Gibbous Fading",
    "Last Quarter",
    "Last Quarter Fading",
    "Waning Crescent",
    "Waning Crescent Fading"
  ],
  24: [
    "New Moon",
    "New Moon Fading",
    "Waxing Crescent Rising",
    "Waxing Crescent",
    "Waxing Crescent Fading",
    "First Quarter Rising",
    "First Quarter",
    "First Quarter Fading",
    "Waxing Gibbous Rising",
    "Waxing Gibbous",
    "Waxing Gibbous Fading",
    "Full Moon Rising",
    "Full Moon",
    "Full Moon Fading",
    "Waning Gibbous Rising",
    "Waning Gibbous",
    "Waning Gibbous Fading",
    "Last Quarter Rising",
    "Last Quarter",
    "Last Quarter Fading",
    "Waning Crescent Rising",
    "Waning Crescent",
    "Waning Crescent Fading",
    "New Moon Rising"
  ],
  40: [
    "New Moon",
    "New Moon Fading",
    "New Moon Faded",
    "Waxing Crescent Rising",
    "Waxing Crescent Risen",
    "Waxing Crescent",
    "Waxing Crescent Fading",
    "Waxing Crescent Faded",
    "First Quarter Rising",
    "First Quarter Risen",
    "First Quarter",
    "First Quarter Fading",
    "First Quarter Faded",
    "Waxing Gibbous Rising",
    "Waxing Gibbous Risen",
    "Waxing Gibbous",
    "Waxing Gibbous Fading",
    "Waxing Gibbous Faded",
    "Full Moon Rising",
    "Full Moon Risen",
    "Full Moon",
    "Full Moon Fading",
    "Full Moon Faded",
    "Waning Gibbous Rising",
    "Waning Gibbous Risen",
    "Waning Gibbous",
    "Waning Gibbous Fading",
    "Waning Gibbous Faded",
    "Last Quarter Rising",
    "Last Quarter Risen",
    "Last Quarter",
    "Last Quarter Fading",
    "Last Quarter Faded",
    "Waning Crescent Rising",
    "Waning Crescent Risen",
    "Waning Crescent",
    "Waning Crescent Fading",
    "Waning Crescent Faded",
    "New Moon Rising",
    "New Moon Risen"
  ]
};

// src/settings/ui/Categories.svelte
function add_css8(target) {
  append_styles(target, "svelte-1ok7o99", ".category.svelte-1ok7o99{display:grid;grid-template-columns:1fr auto auto;align-items:center;gap:0.5rem;padding-top:0.75rem}");
}
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_else_block4(ctx) {
  let div;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty & 9) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block6(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new category to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block4(ctx) {
  let div3;
  let div0;
  let name_action;
  let t0;
  let div1;
  let input;
  let input_value_value;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let mounted;
  let dispose;
  function change_handler(...args) {
    return ctx[5](ctx[7], ...args);
  }
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      input = element("input");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(input, "type", "color");
      input.value = input_value_value = ctx[7].color;
      attr(div1, "class", "color");
      attr(div3, "class", "category svelte-1ok7o99");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div1, input);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(name_action = ctx[1].call(null, div0, ctx[7])),
          listen(input, "change", change_handler),
          action_destroyer(trash_action = ctx[2].call(null, div2, ctx[7]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 1)
        name_action.update.call(null, ctx[7]);
      if (dirty & 1 && input_value_value !== (input_value_value = ctx[7].color)) {
        input.value = input_value_value;
      }
      if (trash_action && is_function(trash_action.update) && dirty & 1)
        trash_action.update.call(null, ctx[7]);
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot4(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return create_if_block6;
    return create_else_block4;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment9(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Event Categories",
      $$slots: { default: [create_default_slot4] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[4]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1025) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance9($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { categories = [] } = $$props;
  const name = (node, category) => {
    const comp = new import_obsidian7.TextComponent(node).setValue(category.name).setPlaceholder("Name").onChange((v) => {
      category.name = v;
      dispatch2("update", category);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  const trash = (node, item) => {
    new import_obsidian7.ExtraButtonComponent(node).setIcon("trash").onClick(() => {
      $$invalidate(0, categories = categories.filter((category) => category.id !== item.id));
      dispatch2("delete", item);
    });
  };
  const updateColor = (event, category) => {
    const { target } = event;
    if (!(target instanceof HTMLInputElement))
      return;
    category.color = target.value;
    dispatch2("update", category);
  };
  const addNew = () => {
    const cat = {
      id: nanoid(6),
      color: DEFAULT_CATEGORY_COLOR,
      name: "Category"
    };
    $$invalidate(0, categories);
    dispatch2("new", cat);
  };
  const change_handler = (category, evt) => updateColor(evt, category);
  $$self.$$set = ($$props2) => {
    if ("categories" in $$props2)
      $$invalidate(0, categories = $$props2.categories);
  };
  return [categories, name, trash, updateColor, addNew, change_handler];
}
var Categories = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, { categories: 0 }, add_css8);
  }
};
var Categories_default = Categories;

// src/settings/ui/Year.svelte
var import_obsidian9 = __toModule(require("obsidian"));

// src/settings/modals/confirm.ts
var import_obsidian8 = __toModule(require("obsidian"));
async function confirmWithModal(app, text2, buttons = {
  cta: "Yes",
  secondary: "No"
}) {
  return new Promise((resolve, reject) => {
    const modal = new ConfirmModal(app, text2, buttons);
    modal.onClose = () => {
      resolve(modal.confirmed);
    };
    modal.open();
  });
}
var ConfirmModal = class extends import_obsidian8.Modal {
  constructor(app, text2, buttons) {
    super(app);
    this.text = text2;
    this.buttons = buttons;
    this.confirmed = false;
  }
  async display() {
    new Promise((resolve) => {
      this.contentEl.empty();
      this.contentEl.addClass("confirm-modal");
      this.contentEl.createEl("p", {
        text: this.text
      });
      const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
      new import_obsidian8.ButtonComponent(buttonEl).setButtonText(this.buttons.cta).setCta().onClick(() => {
        this.confirmed = true;
        this.close();
      });
      new import_obsidian8.ButtonComponent(buttonEl).setButtonText(this.buttons.secondary).onClick(() => {
        this.close();
      });
    });
  }
  onOpen() {
    this.display();
  }
};

// src/settings/ui/Year.svelte
function add_css9(target) {
  append_styles(target, "svelte-1f06yhl", ".use-custom.svelte-1f06yhl.svelte-1f06yhl{padding-top:0.75rem}.weekday.svelte-1f06yhl.svelte-1f06yhl{display:grid;grid-template-columns:auto 1fr auto;align-items:center;justify-content:space-between;gap:1rem}.weekday.svelte-1f06yhl .icon.svelte-1f06yhl{align-items:center}.weekday.svelte-1f06yhl.svelte-1f06yhl{margin-top:0.5rem}");
}
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
}
function create_else_block5(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value = ctx[1];
  const get_key = (ctx2) => ctx2[13].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context5(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block5(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, div, {
            items: ctx[1],
            flipDurationMs: flipDurationMs3,
            dragDisabled: ctx[2]
          })),
          listen(div, "consider", ctx[9]),
          listen(div, "finalize", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 258) {
        each_value = ctx2[1];
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, fix_and_destroy_block, create_each_block5, null, get_each_context5);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 6)
        dndzone_action.update.call(null, {
          items: ctx2[1],
          flipDurationMs: flipDurationMs3,
          dragDisabled: ctx2[2]
        });
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block7(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new year to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block5(key_1, ctx) {
  let div3;
  let div0;
  let grip_action;
  let t0;
  let div1;
  let name_action;
  let t1;
  let div2;
  let trash_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = space();
      attr(div0, "class", "icon svelte-1f06yhl");
      attr(div2, "class", "icon svelte-1f06yhl");
      attr(div3, "class", "weekday svelte-1f06yhl");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div3, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[4].call(null, div0)),
          listen(div0, "mousedown", ctx[8]),
          listen(div0, "touchstart", ctx[8]),
          action_destroyer(name_action = ctx[6].call(null, div1, ctx[13])),
          action_destroyer(trash_action = ctx[5].call(null, div2, ctx[13]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (name_action && is_function(name_action.update) && dirty & 2)
        name_action.update.call(null, ctx[13]);
      if (trash_action && is_function(trash_action.update) && dirty & 2)
        trash_action.update.call(null, ctx[13]);
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs3 });
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot5(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[1] || !ctx2[1].length)
      return create_if_block7;
    return create_else_block5;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_pre_add_slot2(ctx) {
  let div;
  let customNode_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "use-custom svelte-1f06yhl");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(customNode_action = ctx[7].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment10(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Years",
      disabled: !ctx[0],
      $$slots: {
        "pre-add": [create_pre_add_slot2],
        default: [create_default_slot5]
      },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[3]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1)
        detail_changes.disabled = !ctx2[0];
      if (dirty & 65542) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
var flipDurationMs3 = 300;
function instance10($$self, $$props, $$invalidate) {
  let { useCustomYears } = $$props;
  let { years } = $$props;
  const addNew = () => {
    if (!years)
      $$invalidate(1, years = []);
    $$invalidate(1, years = [...years, { name: null, id: nanoid(6), type: "year" }]);
  };
  const grip = (node) => {
    (0, import_obsidian9.setIcon)(node, "fantasy-calendar-grip");
  };
  const trash = (node, item) => {
    new import_obsidian9.ExtraButtonComponent(node).setIcon("trash").onClick(() => $$invalidate(1, years = years.filter((year) => year.id !== item.id)));
  };
  const name = (node, item) => {
    const comp = new import_obsidian9.TextComponent(node).setValue(item.name).setPlaceholder("Name").onChange((v) => {
      item.name = v;
      dispatch2("years-update", years);
      $$invalidate(1, years);
    });
    comp.inputEl.setAttr("style", "width: 100%;");
  };
  let { app } = $$props;
  const customNode = (node) => {
    new import_obsidian9.Setting(node).setName("Use Custom Years").setDesc(createFragment((el) => {
      el.createSpan({
        text: "Create custom years to display instead of incrementing from 1."
      });
      el.createEl("br");
      el.createSpan({ text: "If on, " });
      el.createEl("strong", {
        text: "only the years added below will be displayed."
      });
      return el;
    })).addToggle((t) => {
      let skip = false;
      t.setValue(useCustomYears).onChange(async (v) => {
        if (!skip && useCustomYears && years?.length) {
          if (await confirmWithModal(app, "The custom years you have created will be removed. Proceed?")) {
            $$invalidate(1, years = []);
            $$invalidate(0, useCustomYears = v);
            skip = false;
          }
          skip = true;
          t.setValue(useCustomYears);
        } else {
          skip = false;
          $$invalidate(0, useCustomYears = v);
        }
      });
    });
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(2, dragDisabled = false);
  }
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(1, years = newItems);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(2, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(1, years = newItems);
    if (source === SOURCES.POINTER) {
      $$invalidate(2, dragDisabled = true);
    }
  }
  const dispatch2 = createEventDispatcher();
  $$self.$$set = ($$props2) => {
    if ("useCustomYears" in $$props2)
      $$invalidate(0, useCustomYears = $$props2.useCustomYears);
    if ("years" in $$props2)
      $$invalidate(1, years = $$props2.years);
    if ("app" in $$props2)
      $$invalidate(11, app = $$props2.app);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2) {
      $: {
        dispatch2("years-update", years);
      }
    }
    if ($$self.$$.dirty & 1) {
      $: {
        dispatch2("use-custom-update", useCustomYears);
      }
    }
  };
  return [
    useCustomYears,
    years,
    dragDisabled,
    addNew,
    grip,
    trash,
    name,
    customNode,
    startDrag,
    handleConsider,
    handleFinalize,
    app
  ];
}
var Year = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, { useCustomYears: 0, years: 1, app: 11 }, add_css9);
  }
};
var Year_default = Year;

// src/settings/modals/event.ts
var import_obsidian12 = __toModule(require("obsidian"));

// src/suggester/suggester.ts
var import_obsidian10 = __toModule(require("obsidian"));

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element2 = state.elements[name];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element2.removeAttribute(name2);
      } else {
        element2.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element2 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element2, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle2(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets;
  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === "function" ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref4) {
  var state = _ref4.state, options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance28 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance28.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance28.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance28.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance28.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash2 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash3 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash3[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element2) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle2(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element2) {
  var rect = getBoundingClientRect(element2);
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip2(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip2,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = popperOffsets2[mainAxis] + overflow[mainSide];
    var max2 = popperOffsets2[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets2[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets2[mainAxis] + maxOffset - offsetModifierValue;
    if (checkMainAxis) {
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = rect.width / element2.offsetWidth || 1;
  var scaleY = rect.height / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce2(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
      return self2.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance28 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance28.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance28
            }) || state;
          }
        }
      },
      update: debounce2(function() {
        return new Promise(function(resolve) {
          instance28.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance28;
    }
    instance28.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance28,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance28;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggester/suggester.ts
var Suggester = class {
  constructor(owner, containerEl, scope) {
    this.containerEl = containerEl;
    this.owner = owner;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", () => {
      this.setSelectedItem(this.selectedItem - 1, true);
      return false;
    });
    scope.register([], "ArrowDown", () => {
      this.setSelectedItem(this.selectedItem + 1, true);
      return false;
    });
    scope.register([], "Enter", (evt) => {
      this.useSelectedItem(evt);
      return false;
    });
    scope.register([], "Tab", (evt) => {
      this.chooseSuggestion(evt);
      return false;
    });
  }
  chooseSuggestion(evt) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.onChooseSuggestion(currentValue, evt);
    }
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(event, el) {
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  empty() {
    this.containerEl.empty();
  }
  setSuggestions(items) {
    this.containerEl.empty();
    const els = [];
    items.forEach((item) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(item, suggestionEl);
      els.push(suggestionEl);
    });
    this.items = items;
    this.suggestions = els;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  wrap(value, size) {
    return (value % size + size) % size;
  }
  setSelectedItem(index, scroll) {
    const nIndex = this.wrap(index, this.suggestions.length);
    const prev = this.suggestions[this.selectedItem];
    const next2 = this.suggestions[nIndex];
    if (prev)
      prev.removeClass("is-selected");
    if (next2)
      next2.addClass("is-selected");
    this.selectedItem = nIndex;
    if (scroll) {
      next2.scrollIntoView(false);
    }
  }
};
var SuggestionModal = class extends import_obsidian10.FuzzySuggestModal {
  constructor(app, inputEl, items) {
    super(app);
    this.items = [];
    this.scope = new import_obsidian10.Scope();
    this.emptyStateText = "No match found";
    this.limit = 100;
    this.inputEl = inputEl;
    this.items = items;
    this.suggestEl = createDiv("suggestion-container");
    this.contentEl = this.suggestEl.createDiv("suggestion");
    this.suggester = new Suggester(this, this.contentEl, this.scope);
    this.scope.register([], "Escape", this.onEscape.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onFocus.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  empty() {
    this.suggester.empty();
  }
  onInputChanged() {
    if (this.shouldNotOpen)
      return;
    const inputStr = this.modifyInput(this.inputEl.value);
    const suggestions = this.getSuggestions(inputStr);
    if (suggestions.length > 0) {
      this.suggester.setSuggestions(suggestions.slice(0, this.limit));
    } else {
      this.onNoSuggestion();
    }
    this.open();
  }
  onFocus() {
    this.shouldNotOpen = false;
    this.onInputChanged();
  }
  modifyInput(input) {
    return input;
  }
  onNoSuggestion() {
    this.empty();
    this.renderSuggestion(null, this.contentEl.createDiv("suggestion-item"));
  }
  open() {
    this.app.keymap.pushScope(this.scope);
    document.body.appendChild(this.suggestEl);
    this.popper = createPopper(this.inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 10]
          }
        },
        {
          name: "flip",
          options: {
            fallbackPlacements: ["top"]
          }
        }
      ]
    });
  }
  onEscape() {
    this.close();
    this.shouldNotOpen = true;
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggester.setSuggestions([]);
    if (this.popper) {
      this.popper.destroy();
    }
    this.suggestEl.detach();
  }
  createPrompt(prompts) {
    if (!this.promptEl)
      this.promptEl = this.suggestEl.createDiv("prompt-instructions");
    let prompt = this.promptEl.createDiv("prompt-instruction");
    for (let p of prompts) {
      prompt.appendChild(p);
    }
  }
};

// src/suggester/path.ts
var import_obsidian11 = __toModule(require("obsidian"));
var PathSuggestionModal = class extends SuggestionModal {
  constructor(app, input, items) {
    super(app, input.inputEl, items);
    this.files = [...items];
    this.text = input;
    this.createPrompts();
    this.inputEl.addEventListener("input", this.getFile.bind(this));
  }
  createPrompts() {
    this.createPrompt([
      createSpan({
        cls: "prompt-instruction-command",
        text: "Type #"
      }),
      createSpan({ text: "to link heading" })
    ]);
    this.createPrompt([
      createSpan({
        cls: "prompt-instruction-command",
        text: "Type ^"
      }),
      createSpan({ text: "to link blocks" })
    ]);
    this.createPrompt([
      createSpan({
        cls: "prompt-instruction-command",
        text: "Note: "
      }),
      createSpan({
        text: "Blocks must have been created already"
      })
    ]);
  }
  getFile() {
    const v = this.inputEl.value, file = this.app.metadataCache.getFirstLinkpathDest(v.split(/[\^#]/).shift() || "", "");
    if (file == this.file)
      return;
    this.file = file;
    if (this.file)
      this.cache = this.app.metadataCache.getFileCache(this.file);
    this.onInputChanged();
  }
  getItemText(item) {
    if (item instanceof import_obsidian11.TFile)
      return item.path;
    if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      return item.heading;
    }
    if (Object.prototype.hasOwnProperty.call(item, "id")) {
      return item.id;
    }
  }
  onChooseItem(item) {
    if (item instanceof import_obsidian11.TFile) {
      this.text.setValue(item.basename);
      this.file = item;
      this.cache = this.app.metadataCache.getFileCache(this.file);
    } else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      this.text.setValue(this.file.basename + "#" + item.heading);
    } else if (Object.prototype.hasOwnProperty.call(item, "id")) {
      this.text.setValue(this.file.basename + "^" + item.id);
    }
  }
  selectSuggestion({ item }) {
    let link;
    if (item instanceof import_obsidian11.TFile) {
      this.file = item;
      link = item.basename;
    } else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      link = this.file.basename + "#" + item.heading;
    } else if (Object.prototype.hasOwnProperty.call(item, "id")) {
      link = this.file.basename + "^" + item.id;
    }
    this.text.setValue(link);
    this.close();
    this.onClose();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    if (item instanceof import_obsidian11.TFile) {
      let pathLength = item.path.length - item.name.length;
      const matchElements = matches.matches.map((m) => {
        return createSpan("suggestion-highlight");
      });
      for (let i = pathLength; i < item.path.length - item.extension.length - 1; i++) {
        let match = matches.matches.find((m) => m[0] === i);
        if (match) {
          let element2 = matchElements[matches.matches.indexOf(match)];
          content.appendChild(element2);
          element2.appendText(item.path.substring(match[0], match[1]));
          i += match[1] - match[0] - 1;
          continue;
        }
        content.appendText(item.path[i]);
      }
      el.createDiv({
        cls: "suggestion-note",
        text: item.path
      });
    } else if (Object.prototype.hasOwnProperty.call(item, "heading")) {
      content.setText(item.heading);
      content.prepend(createSpan({
        cls: "suggestion-flair",
        text: `H${item.level}`
      }));
    } else if (Object.prototype.hasOwnProperty.call(item, "id")) {
      content.setText(item.id);
    }
  }
  get headings() {
    if (!this.file)
      return [];
    if (!this.cache) {
      this.cache = this.app.metadataCache.getFileCache(this.file);
    }
    return this.cache.headings || [];
  }
  get blocks() {
    if (!this.file)
      return [];
    if (!this.cache) {
      this.cache = this.app.metadataCache.getFileCache(this.file);
    }
    return Object.values(this.cache.blocks || {}) || [];
  }
  getItems() {
    const v = this.inputEl.value;
    if (/#/.test(v)) {
      this.modifyInput = (i) => i.split(/#/).pop();
      return this.headings;
    } else if (/\^/.test(v)) {
      this.modifyInput = (i) => i.split(/\^/).pop();
      return this.blocks;
    }
    return this.files;
  }
};

// src/settings/modals/event.ts
var CreateEventModal = class extends import_obsidian12.Modal {
  constructor(app, calendar, event, date) {
    super(app);
    this.calendar = calendar;
    this.saved = false;
    this.event = {
      name: null,
      description: null,
      date: {
        month: null,
        day: null,
        year: null
      },
      id: nanoid(6),
      note: null,
      category: null
    };
    if (event) {
      this.event = { ...event };
      this.editing = true;
    }
    if (date) {
      this.event.date = { ...date };
    }
    this.containerEl.addClass("fantasy-calendar-create-event");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Event" : "New Event"
    });
    this.infoEl = this.contentEl.createDiv("event-info");
    this.buildInfo();
    this.dateEl = this.contentEl.createDiv("event-date");
    this.buildDate();
    new import_obsidian12.Setting(this.contentEl).addButton((b) => {
      b.setButtonText("Save").setCta().onClick(() => {
        if (!this.event.name?.length) {
          new import_obsidian12.Notice("The event must have a name.");
          return;
        }
        if (this.event.end) {
          this.event.end = {
            year: this.event.end.year ?? this.event.date.year,
            month: this.event.end.month ?? this.event.date.month,
            day: this.event.end.day ?? this.event.date.day
          };
          const date = this.event.date;
          const end2 = this.event.end;
          const maxDays = Math.max(...this.calendar.static.months.map((m) => m.length));
          const totalDays = maxDays * this.calendar.static.months.length;
          const dateNumber = (date.year - 1) * totalDays + (date.month ?? -1) * maxDays + date.day;
          const endNumber = (end2.year - 1) * totalDays + (end2.month ?? -1) * maxDays + end2.day;
          if (dateNumber > endNumber) {
            const temp = { ...this.event.end };
            this.event.end = { ...this.event.date };
            this.event.date = { ...temp };
          }
        }
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
    });
  }
  buildDate() {
    this.dateEl.empty();
    this.buildStartDate();
    this.endEl = this.dateEl.createDiv();
    if (!this.event.end) {
      new import_obsidian12.Setting(this.endEl).setName("Add End Date").addToggle((t) => {
        t.setValue(false).onChange((v) => this.buildEndDate());
      });
    } else {
      this.buildEndDate();
    }
    this.stringEl = this.dateEl.createDiv("event-date-string setting-item-description");
    this.buildDateString();
  }
  buildStartDate() {
    this.startEl = this.dateEl.createDiv("fantasy-calendar-event-date");
    this.startEl.createSpan({ text: "Start:" });
    this.startDateEl = this.startEl.createDiv("fantasy-calendar-date-fields");
    this.buildDateFields(this.startDateEl, this.event.date);
  }
  buildEndDate() {
    this.event.end = this.event.end ?? { ...this.event.date };
    this.endEl.empty();
    this.endEl.addClass("fantasy-calendar-event-date");
    this.endEl.createSpan({ text: "End:" });
    this.endDateEl = this.endEl.createDiv("fantasy-calendar-date-fields");
    this.buildDateFields(this.endDateEl, this.event.end);
  }
  buildDateString() {
    this.stringEl.empty();
    this.stringEl.createSpan({
      text: dateString(this.event.date, this.calendar.static.months, this.event.end)
    });
  }
  buildDateFields(el, field = this.event.date) {
    el.empty();
    const dayEl = el.createDiv("fantasy-calendar-date-field");
    dayEl.createEl("label", { text: "Day" });
    const day = new import_obsidian12.TextComponent(dayEl).setPlaceholder("Day").setValue(`${field.day}`).onChange((v) => {
      field.day = Number(v);
      this.buildDateString();
    });
    day.inputEl.setAttr("type", "number");
    const monthEl = el.createDiv("fantasy-calendar-date-field");
    monthEl.createEl("label", { text: "Month" });
    new import_obsidian12.DropdownComponent(monthEl).addOptions(Object.fromEntries([
      ["select", "Select Month"],
      ...this.calendar.static.months.map((month) => [
        month.name,
        month.name
      ])
    ])).setValue(field.month != void 0 ? this.calendar.static.months[field.month].name : "select").onChange((v) => {
      if (v === "select")
        field.month = null;
      const index = this.calendar.static.months.find((m) => m.name == v);
      field.month = this.calendar.static.months.indexOf(index);
      this.buildDateString();
    });
    const yearEl = el.createDiv("fantasy-calendar-date-field");
    yearEl.createEl("label", { text: "Year" });
    const year = new import_obsidian12.TextComponent(yearEl).setPlaceholder("Year").setValue(`${field.year}`).onChange((v) => {
      if (!v || v == void 0) {
        field.year = void 0;
      } else {
        field.year = Number(v);
      }
      this.buildDateString();
    });
    year.inputEl.setAttr("type", "number");
  }
  buildInfo() {
    this.infoEl.empty();
    new import_obsidian12.Setting(this.infoEl).setName("Note").setDesc("Link the event to a note.").addText((text2) => {
      let files = this.app.vault.getFiles();
      text2.setPlaceholder("Path");
      if (this.event.note) {
        const note = this.app.vault.getAbstractFileByPath(this.event.note);
        if (note && note instanceof import_obsidian12.TFile) {
          text2.setValue(note.basename);
        }
      }
      const modal = new PathSuggestionModal(this.app, text2, [
        ...files
      ]);
      modal.onClose = async () => {
        text2.inputEl.blur();
        this.event.note = modal.file.path;
        this.tryParse(modal.file);
      };
    });
    new import_obsidian12.Setting(this.infoEl).setName("Event Name").addText((t) => t.setPlaceholder("Event Name").setValue(this.event.name).onChange((v) => {
      this.event.name = v;
    }));
    const descriptionEl = this.infoEl.createDiv("event-description");
    descriptionEl.createEl("label", { text: "Event Description" });
    new import_obsidian12.TextAreaComponent(descriptionEl).setPlaceholder("Event Description").setValue(this.event.description).onChange((v) => {
      this.event.description = v;
    });
    new import_obsidian12.Setting(this.infoEl).setName("Event Category").addDropdown((d) => {
      const options = Object.fromEntries(this.calendar.categories.map((category) => {
        return [category.id, category.name];
      }));
      d.addOptions(options).setValue(this.event.category).onChange((v) => this.event.category = v);
    });
  }
  async tryParse(file) {
    this.event.name = file.basename;
    const cache = this.app.metadataCache.getFileCache(file);
    const { frontmatter } = cache;
    if (frontmatter) {
      if ("fc-date" in frontmatter) {
        const { day, month, year } = frontmatter["fc-date"];
        if (day)
          this.event.date.day = day;
        if (month) {
          if (typeof month === "string") {
            const indexer = this.calendar.static.months?.find((m) => m.name == month) ?? this.calendar.static.months?.[0];
            this.event.date.month = this.calendar.static.months?.indexOf(indexer);
          }
          if (typeof month == "number") {
            this.event.date.month = month - 1;
          }
        }
        if (year)
          this.event.date.year = year;
      }
      if ("fc-category" in frontmatter) {
        if (!this.calendar.categories.find((c) => c.name === frontmatter["fc-category"])) {
          this.calendar.categories.push({
            name: frontmatter["fantasy-category"],
            color: "#808080",
            id: nanoid(6)
          });
        }
        this.event.category = this.calendar.categories.find((c) => c.name === frontmatter["fc-category"])?.id;
      }
    }
    await this.display();
  }
  async onOpen() {
    await this.display();
  }
};

// src/settings/ui/Moons.svelte
var import_obsidian13 = __toModule(require("obsidian"));

// src/view/ui/Moon.svelte
function create_fragment11(ctx) {
  let svg;
  let circle0;
  let circle0_fill_value;
  let path_1;
  let path_1_fill_value;
  let circle1;
  let svg_id_value;
  let svg_aria_label_value;
  return {
    c() {
      svg = svg_element("svg");
      circle0 = svg_element("circle");
      path_1 = svg_element("path");
      circle1 = svg_element("circle");
      attr(circle0, "cx", "16");
      attr(circle0, "cy", "16");
      attr(circle0, "r", "10");
      attr(circle0, "fill", circle0_fill_value = ctx[0].faceColor);
      attr(path_1, "class", "shadow");
      attr(path_1, "fill", path_1_fill_value = ctx[0].shadowColor);
      attr(path_1, "d", ctx[4]);
      attr(circle1, "cx", "16");
      attr(circle1, "cy", "16");
      attr(circle1, "r", "10");
      attr(circle1, "fill", "none");
      attr(circle1, "stroke", "#000");
      attr(circle1, "stroke-width", "2px");
      attr(svg, "class", "moon");
      attr(svg, "id", svg_id_value = ctx[0].id);
      attr(svg, "preserveAspectRatio", "xMidYMid");
      attr(svg, "aria-label", svg_aria_label_value = ctx[1] ? `${ctx[0].name}
${ctx[3]}` : null);
      attr(svg, "width", ctx[2]);
      attr(svg, "height", ctx[2]);
      attr(svg, "viewBox", "0 0 32 32");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle0);
      append(svg, path_1);
      append(svg, circle1);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && circle0_fill_value !== (circle0_fill_value = ctx2[0].faceColor)) {
        attr(circle0, "fill", circle0_fill_value);
      }
      if (dirty & 1 && path_1_fill_value !== (path_1_fill_value = ctx2[0].shadowColor)) {
        attr(path_1, "fill", path_1_fill_value);
      }
      if (dirty & 16) {
        attr(path_1, "d", ctx2[4]);
      }
      if (dirty & 1 && svg_id_value !== (svg_id_value = ctx2[0].id)) {
        attr(svg, "id", svg_id_value);
      }
      if (dirty & 11 && svg_aria_label_value !== (svg_aria_label_value = ctx2[1] ? `${ctx2[0].name}
${ctx2[3]}` : null)) {
        attr(svg, "aria-label", svg_aria_label_value);
      }
      if (dirty & 4) {
        attr(svg, "width", ctx2[2]);
      }
      if (dirty & 4) {
        attr(svg, "height", ctx2[2]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  let path;
  let { moon } = $$props;
  let { label = true } = $$props;
  let { size = 28 } = $$props;
  let { phase } = $$props;
  $$self.$$set = ($$props2) => {
    if ("moon" in $$props2)
      $$invalidate(0, moon = $$props2.moon);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("size" in $$props2)
      $$invalidate(2, size = $$props2.size);
    if ("phase" in $$props2)
      $$invalidate(3, phase = $$props2.phase);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 8) {
      $:
        $$invalidate(4, path = SHADOW_MAP[phase]);
    }
  };
  return [moon, label, size, phase, path];
}
var Moon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, { moon: 0, label: 1, size: 2, phase: 3 });
  }
};
var Moon_default = Moon;

// src/settings/ui/Moons.svelte
function add_css10(target) {
  append_styles(target, "svelte-v24qmo", ".moon.svelte-v24qmo{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.setting-item-name.svelte-v24qmo{display:flex;align-items:center}.icons.svelte-v24qmo{display:flex;align-self:flex-start;justify-self:flex-end;align-items:center}.icon.svelte-v24qmo{align-items:center}");
}
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block6(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 35) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block8(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new moon to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block6(ctx) {
  let div6;
  let div2;
  let span;
  let moonsvg;
  let t0;
  let t1_value = ctx[10].name + "";
  let t1;
  let t2;
  let div1;
  let div0;
  let t3;
  let t4_value = ctx[10].cycle + "";
  let t4;
  let t5;
  let t6;
  let div5;
  let div3;
  let edit_action;
  let t7;
  let div4;
  let trash_action;
  let t8;
  let current;
  let mounted;
  let dispose;
  moonsvg = new Moon_default({
    props: {
      moon: ctx[10],
      phase: "First Quarter",
      label: false,
      size: 20
    }
  });
  function click_handler() {
    return ctx[7](ctx[10]);
  }
  function click_handler_1() {
    return ctx[8](ctx[10]);
  }
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      span = element("span");
      create_component(moonsvg.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      div1 = element("div");
      div0 = element("div");
      t3 = text("Cycle: ");
      t4 = text(t4_value);
      t5 = text(" days");
      t6 = space();
      div5 = element("div");
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      t8 = space();
      attr(span, "class", "setting-item-name svelte-v24qmo");
      attr(div0, "class", "date");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "moon-info");
      attr(div3, "class", "icon svelte-v24qmo");
      attr(div4, "class", "icon svelte-v24qmo");
      attr(div5, "class", "icons svelte-v24qmo");
      attr(div6, "class", "moon svelte-v24qmo");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div2, span);
      mount_component(moonsvg, span, null);
      append(span, t0);
      append(span, t1);
      append(div2, t2);
      append(div2, div1);
      append(div1, div0);
      append(div0, t3);
      append(div0, t4);
      append(div0, t5);
      append(div6, t6);
      append(div6, div5);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      append(div6, t8);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[4].call(null, div3)),
          listen(div3, "click", click_handler),
          action_destroyer(trash_action = ctx[3].call(null, div4)),
          listen(div4, "click", click_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const moonsvg_changes = {};
      if (dirty & 1)
        moonsvg_changes.moon = ctx[10];
      moonsvg.$set(moonsvg_changes);
      if ((!current || dirty & 1) && t1_value !== (t1_value = ctx[10].name + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & 1) && t4_value !== (t4_value = ctx[10].cycle + ""))
        set_data(t4, t4_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(moonsvg.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moonsvg.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      destroy_component(moonsvg);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot6(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block8, create_else_block6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_pre_add_slot3(ctx) {
  let div;
  let display_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(display_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment12(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Moons",
      $$slots: {
        "pre-add": [create_pre_add_slot3],
        default: [create_default_slot6]
      },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[9]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 8193) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  let { moons = [] } = $$props;
  let { displayMoons = true } = $$props;
  const dispatch2 = createEventDispatcher();
  const display = (node) => {
    new import_obsidian13.Setting(node).setName("Display Moons").setDesc("Display moons by default when viewing this calendar.").addToggle((t) => {
      t.setValue(displayMoons).onChange((v) => dispatch2("display-toggle", v));
    });
  };
  const trash = (node) => {
    let b = new import_obsidian13.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  const deleteMoon = (item) => {
    $$invalidate(0, moons = moons.filter((moon) => moon.id !== item.id));
    dispatch2("edit-moons", moons);
  };
  const click_handler = (moon) => dispatch2("new-item", moon);
  const click_handler_1 = (moon) => deleteMoon(moon);
  function new_item_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("moons" in $$props2)
      $$invalidate(0, moons = $$props2.moons);
    if ("displayMoons" in $$props2)
      $$invalidate(6, displayMoons = $$props2.displayMoons);
  };
  return [
    moons,
    dispatch2,
    display,
    trash,
    edit,
    deleteMoon,
    displayMoons,
    click_handler,
    click_handler_1,
    new_item_handler
  ];
}
var Moons = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, { moons: 0, displayMoons: 6 }, add_css10);
  }
};
var Moons_default = Moons;

// src/settings/ui/LeapDay.svelte
var import_obsidian14 = __toModule(require("obsidian"));
function add_css11(target) {
  append_styles(target, "svelte-1rh93fc", ".leapday.svelte-1rh93fc.svelte-1rh93fc{display:grid;grid-template-columns:1fr auto;align-items:center;justify-content:space-between;gap:1rem;margin-top:0.5rem}.leapday-info.svelte-1rh93fc.svelte-1rh93fc{width:100%}.icons.svelte-1rh93fc.svelte-1rh93fc{display:flex;align-self:center;justify-self:flex-end;align-items:center}.leapday.svelte-1rh93fc .icon.svelte-1rh93fc{align-items:center}");
}
function create_fragment13(ctx) {
  let div5;
  let div1;
  let span;
  let t0_value = ctx[0].name + "";
  let t0;
  let t1;
  let div0;
  let t2;
  let t3;
  let div4;
  let div2;
  let edit_action;
  let t4;
  let div3;
  let trash_action;
  let mounted;
  let dispose;
  return {
    c() {
      div5 = element("div");
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = text(ctx[1]);
      t3 = space();
      div4 = element("div");
      div2 = element("div");
      t4 = space();
      div3 = element("div");
      attr(span, "class", "setting-item-name");
      attr(div0, "class", "setting-item-description");
      attr(div1, "class", "leapday-info svelte-1rh93fc");
      attr(div2, "class", "icon svelte-1rh93fc");
      attr(div3, "class", "icon svelte-1rh93fc");
      attr(div4, "class", "icons svelte-1rh93fc");
      attr(div5, "class", "leapday svelte-1rh93fc");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div1);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      append(div0, t2);
      append(div5, t3);
      append(div5, div4);
      append(div4, div2);
      append(div4, t4);
      append(div4, div3);
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[4].call(null, div2)),
          listen(div2, "click", ctx[5]),
          action_destroyer(trash_action = ctx[3].call(null, div3)),
          listen(div3, "click", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & 2)
        set_data(t2, ctx2[1]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div5);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let description;
  const dispatch2 = createEventDispatcher();
  const trash = (node) => {
    let b = new import_obsidian14.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete");
    b.extraSettingsEl.setAttr("style", "margin-left: 0;");
  };
  const edit = (node) => {
    new import_obsidian14.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit");
  };
  let { leapday } = $$props;
  const click_handler = () => dispatch2("edit");
  const click_handler_1 = () => dispatch2("delete");
  $$self.$$set = ($$props2) => {
    if ("leapday" in $$props2)
      $$invalidate(0, leapday = $$props2.leapday);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, description = getIntervalDescription(leapday));
    }
  };
  return [leapday, description, dispatch2, trash, edit, click_handler, click_handler_1];
}
var LeapDay = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, { leapday: 0 }, add_css11);
  }
};
var LeapDay_default = LeapDay;

// src/settings/ui/LeapDays.svelte
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_else_block7(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 7) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block9(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span>Create a new leap day to see it here.</span>`;
      attr(div, "class", "existing-items");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block7(ctx) {
  let leapdayui;
  let current;
  function edit_handler() {
    return ctx[3](ctx[7]);
  }
  function delete_handler() {
    return ctx[4](ctx[7]);
  }
  leapdayui = new LeapDay_default({ props: { leapday: ctx[7] } });
  leapdayui.$on("edit", edit_handler);
  leapdayui.$on("delete", delete_handler);
  return {
    c() {
      create_component(leapdayui.$$.fragment);
    },
    m(target, anchor) {
      mount_component(leapdayui, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const leapdayui_changes = {};
      if (dirty & 1)
        leapdayui_changes.leapday = ctx[7];
      leapdayui.$set(leapdayui_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(leapdayui.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(leapdayui.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(leapdayui, detaching);
    }
  };
}
function create_default_slot7(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block9, create_else_block7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment14(ctx) {
  let detail;
  let current;
  detail = new Detail_default({
    props: {
      label: "Leap Days",
      $$slots: { default: [create_default_slot7] },
      $$scope: { ctx }
    }
  });
  detail.$on("new-item", ctx[5]);
  return {
    c() {
      create_component(detail.$$.fragment);
    },
    m(target, anchor) {
      mount_component(detail, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const detail_changes = {};
      if (dirty & 1025) {
        detail_changes.$$scope = { dirty, ctx: ctx2 };
      }
      detail.$set(detail_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(detail.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(detail.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(detail, detaching);
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  let { leapdays = [] } = $$props;
  const dispatch2 = createEventDispatcher();
  const editLeapDay = (item) => {
    dispatch2("new-item", item);
  };
  const deleteLeapDay = (item) => {
    $$invalidate(0, leapdays = leapdays.filter((leapday) => leapday.id !== item.id));
    dispatch2("edit-leapdays", leapdays);
  };
  const edit_handler = (leapday) => editLeapDay(leapday);
  const delete_handler = (leapday) => deleteLeapDay(leapday);
  function new_item_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("leapdays" in $$props2)
      $$invalidate(0, leapdays = $$props2.leapdays);
  };
  return [
    leapdays,
    editLeapDay,
    deleteLeapDay,
    edit_handler,
    delete_handler,
    new_item_handler
  ];
}
var LeapDays = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment14, safe_not_equal, { leapdays: 0 });
  }
};
var LeapDays_default = LeapDays;

// src/settings/modals/moons.ts
var import_obsidian15 = __toModule(require("obsidian"));
var CreateMoonModal = class extends import_obsidian15.Modal {
  constructor(app, calendar, moon) {
    super(app);
    this.calendar = calendar;
    this.saved = false;
    this.moon = {
      name: null,
      cycle: null,
      offset: null,
      faceColor: "#fff",
      shadowColor: "#000",
      id: nanoid(6)
    };
    if (moon) {
      this.moon = { ...moon };
      this.editing = true;
    }
    this.containerEl.addClass("fantasy-calendar-create-moon");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Moon" : "New Moon"
    });
    this.infoEl = this.contentEl.createDiv("moon-info");
    this.buildInfo();
    new import_obsidian15.Setting(this.contentEl).addButton((b) => {
      b.setButtonText("Save").setCta().onClick(() => {
        if (!this.moon.name?.length) {
          new import_obsidian15.Notice("The moon must have a name.");
          return;
        }
        if (!this.moon.cycle) {
          new import_obsidian15.Notice("The moon must have a positive cycle.");
          return;
        }
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
    });
  }
  buildInfo() {
    this.infoEl.empty();
    new import_obsidian15.Setting(this.infoEl).setName("Name").addText((t) => {
      t.setValue(this.moon.name).onChange((v) => {
        this.moon.name = v;
      });
    });
    new import_obsidian15.Setting(this.infoEl).setName("Cycle").setDesc("How many days it takes for the moon to complete a full cycle.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.moon.cycle}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.moon.cycle = Number(v);
      });
    });
    new import_obsidian15.Setting(this.infoEl).setName("Offset").setDesc("Shift the starting moon phase by a number of days.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.moon.offset}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.moon.offset = Number(v);
      });
    });
    new import_obsidian15.Setting(this.infoEl).setName("Face Color").addText((t) => {
      t.inputEl.setAttr("type", "color");
      t.setValue(this.moon.faceColor).onChange((v) => {
        this.moon.faceColor = v;
      });
    });
    new import_obsidian15.Setting(this.infoEl).setName("Shadow Color").addText((t) => {
      t.inputEl.setAttr("type", "color");
      t.setValue(this.moon.shadowColor).onChange((v) => {
        this.moon.shadowColor = v;
      });
    });
  }
  async onOpen() {
    await this.display();
  }
};

// src/settings/modals/leapday.ts
var import_obsidian16 = __toModule(require("obsidian"));
var CreateLeapDayModal = class extends import_obsidian16.Modal {
  constructor(app, calendar, leapday) {
    super(app);
    this.calendar = calendar;
    this.saved = false;
    this.leapday = {
      id: nanoid(6),
      name: "Leap Day",
      interval: [],
      intercalary: false,
      timespan: null,
      offset: 0,
      type: "leapday"
    };
    if (leapday) {
      this.leapday = { ...leapday };
      this.editing = true;
    }
    this.containerEl.addClass("fantasy-calendar-create-leapday");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Leap Day" : "New Leap Day"
    });
    this.infoEl = this.contentEl.createDiv("leapday-info");
    this.buildInfo();
    new import_obsidian16.Setting(this.contentEl).addButton((b) => {
      b.setButtonText("Save").setCta().onClick(() => {
        if (!this.leapday.interval.length) {
          new import_obsidian16.Notice("The leap day must have an interval.");
          return;
        }
        if (this.leapday.timespan == void 0) {
          new import_obsidian16.Notice("The leap day must be attached to a Month.");
          return;
        }
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
    });
  }
  buildInfo() {
    this.infoEl.empty();
    new import_obsidian16.Setting(this.infoEl).setName("Name").addText((t) => {
      t.setValue(this.leapday.name).onChange((v) => {
        this.leapday.name = v;
      });
    });
    new import_obsidian16.Setting(this.infoEl).setName("Month").setDesc("The leap day will be added to this month.").addDropdown((d) => {
      for (let month of this.calendar.static.months) {
        const index = this.calendar.static.months.indexOf(month);
        d.addOption(`${index}`, month.name);
      }
      d.setValue(`${this.leapday.timespan}`).onChange((v) => this.leapday.timespan = Number(v));
    });
    new import_obsidian16.Setting(this.infoEl).setName("Offset").setDesc("Shift the years the leap day is applied to.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.leapday.offset}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.leapday.offset = Number(v);
      });
    });
    this.conditionsEl = this.infoEl.createDiv();
    this.buildConditions();
  }
  buildConditions() {
    this.conditionsEl.empty();
    const b = new import_obsidian16.ButtonComponent(this.conditionsEl).setTooltip("Add New").setButtonText("+").onClick(async () => {
      const modal = new IntervalModal(this.app, this.intervals.length > 0);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        this.leapday.interval.push(modal.condition);
        this.buildConditions();
      };
      modal.open();
    });
    b.buttonEl.style.width = "100%";
    this.conditionsEl.createSpan({
      text: getIntervalDescription(this.leapday),
      cls: "fantasy-leap-day-interval-description setting-item"
    });
    for (let interval of this.intervals) {
      new import_obsidian16.Setting(this.conditionsEl).setName(this.getIntervalName(interval)).addExtraButton((b2) => {
        b2.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new IntervalModal(this.app, this.intervals.indexOf(interval) != 0, interval);
          modal.onClose = () => {
            if (!modal.saved)
              return;
            this.leapday.interval.splice(this.leapday.interval.indexOf(interval), 1, modal.condition);
            this.buildConditions();
          };
          modal.open();
        });
      }).addExtraButton((b2) => {
        b2.setIcon("trash").setTooltip("Delete").onClick(() => {
          this.leapday.interval.splice(this.leapday.interval.indexOf(interval), 1);
          if (this.intervals.length && this.intervals[0].exclusive) {
            this.intervals[0].exclusive = false;
          }
          this.buildConditions();
        });
      });
    }
  }
  get intervals() {
    return this.leapday.interval.sort((a, b) => a.interval - b.interval);
  }
  getIntervalName(interval) {
    const name = [`${interval.interval}`];
    if (interval.exclusive) {
      name.push("(Exclusive)");
    }
    if (interval.ignore) {
      name.push(" - Ignoring Offset");
    }
    return name.join(" ");
  }
  async onOpen() {
    await this.display();
  }
};
var IntervalModal = class extends import_obsidian16.Modal {
  constructor(app, canBeExclusive, condition) {
    super(app);
    this.app = app;
    this.canBeExclusive = canBeExclusive;
    this.saved = false;
    this.editing = false;
    this.condition = {
      interval: null,
      exclusive: false,
      ignore: false
    };
    if (condition) {
      this.condition = { ...condition };
      this.editing = true;
    }
  }
  onOpen() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", { text: "Leap Day Condition" });
    new import_obsidian16.Setting(this.contentEl).setName("Interval").setDesc("How often the condition applies.").addText((t) => {
      t.inputEl.setAttr("type", "number");
      t.setValue(`${this.condition.interval}`).onChange((v) => {
        if (isNaN(Number(v)))
          return;
        this.condition.interval = Number(v);
      });
    });
    new import_obsidian16.Setting(this.contentEl).setName("Exclusive").setDesc("If true, the leap day will not apply when the year meets the condition.\n\nRequires the leap day to have at least one non-exclusive condition.").addToggle((t) => t.setDisabled(!this.canBeExclusive).setValue(this.condition.exclusive).onChange((v) => this.condition.exclusive = v));
    new import_obsidian16.Setting(this.contentEl).setName("Ignore Offset").setDesc("The condition will ignore the leap day's offset when checking to apply.").addToggle((t) => t.setValue(this.condition.ignore).onChange((v) => this.condition.ignore = v));
    this.buttonsEl = this.contentEl.createDiv("fantasy-context-buttons");
    new import_obsidian16.ButtonComponent(this.buttonsEl).setCta().setButtonText(this.editing ? "Save" : "Create").onClick(() => {
      if (!this.condition.interval) {
        new import_obsidian16.Notice("The condition requires an interval.");
        return;
      }
      this.saved = true;
      this.close();
    });
    new import_obsidian16.ExtraButtonComponent(this.buttonsEl).setTooltip("Cancel").setIcon("cross").onClick(() => this.close());
  }
};

// src/suggester/folder.ts
var import_obsidian17 = __toModule(require("obsidian"));
var FolderSuggestionModal = class extends SuggestionModal {
  constructor(app, input, items) {
    super(app, input.inputEl, items);
    this.folders = [...items];
    this.text = input;
    this.inputEl.addEventListener("input", () => this.getFolder());
  }
  getFolder() {
    const v = this.inputEl.value, folder = this.app.vault.getAbstractFileByPath(v);
    if (folder == this.folder)
      return;
    if (!(folder instanceof import_obsidian17.TFolder))
      return;
    this.folder = folder;
    this.onInputChanged();
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item) {
    this.text.setValue(item.path);
    this.folder = item;
  }
  selectSuggestion({ item }) {
    let link = item.path;
    this.text.setValue(link);
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    let pathLength = item.path.length - item.name.length;
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = pathLength; i < item.path.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.path.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.path[i]);
    }
    el.createDiv({
      cls: "suggestion-note",
      text: item.path
    });
  }
  getItems() {
    return this.folders;
  }
};

// src/settings/settings.ts
var Recurring;
(function(Recurring2) {
  Recurring2["none"] = "None";
  Recurring2["monthly"] = "Monthly";
  Recurring2["yearly"] = "Yearly";
})(Recurring || (Recurring = {}));
(0, import_obsidian18.addIcon)("fantasy-calendar-grip", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-lines" class="svg-inline--fa fa-grip-lines fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M496 288H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-128H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"/></svg>`);
(0, import_obsidian18.addIcon)("fantasy-calendar-warning", `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="exclamation-triangle" class="svg-inline--fa fa-exclamation-triangle fa-w-18" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor" d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"></path></svg>`);
var FantasyCalendarSettings = class extends import_obsidian18.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  get data() {
    return this.plugin.data;
  }
  async display() {
    this.containerEl.empty();
    this.containerEl.createEl("h2", { text: "Fantasy Calendars" });
    this.containerEl.addClass("fantasy-calendar-settings");
    this.buildInfo(this.containerEl.createDiv("fantasy-calendar-nested-settings"));
    this.buildCalendars(this.containerEl.createEl("details", {
      cls: "fantasy-calendar-nested-settings",
      attr: {
        ...this.data.settingsToggleState.calendars ? { open: `open` } : {}
      }
    }));
    this.buildEvents(this.containerEl.createEl("details", {
      cls: "fantasy-calendar-nested-settings",
      attr: {
        ...this.data.settingsToggleState.events ? { open: `open` } : {}
      }
    }));
  }
  buildInfo(containerEl) {
    containerEl.empty();
    new import_obsidian18.Setting(containerEl).setName(createFragment((e) => {
      const span = e.createSpan("fantasy-calendar-warning");
      (0, import_obsidian18.setIcon)(span.createSpan("fantasy-calendar-warning"), "fantasy-calendar-warning");
      span.createSpan({ text: "Default Config Directory" });
    })).setDesc(createFragment((e) => {
      e.createSpan({
        text: "Please back up your data before changing this setting. Hidden directories must be manually entered."
      });
      e.createEl("br");
      e.createSpan({
        text: `Current directory: `
      });
      const configDirectory = this.data.configDirectory ?? this.app.vault.configDir;
      e.createEl("code", {
        text: configDirectory
      });
    })).addText(async (text2) => {
      let folders = this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian18.TFolder);
      text2.setPlaceholder(this.data.configDirectory ?? this.app.vault.configDir);
      const modal = new FolderSuggestionModal(this.app, text2, [
        ...folders
      ]);
      modal.onClose = async () => {
        if (!text2.inputEl.value) {
          this.data.configDirectory = null;
        } else {
          const exists = await this.app.vault.adapter.exists(text2.inputEl.value);
          if (!exists) {
            this.data.configDirectory = text2.inputEl.value;
            await this.plugin.saveSettings();
          }
        }
      };
      text2.inputEl.onblur = async () => {
        if (!text2.inputEl.value) {
          return;
        }
        const exists = await this.app.vault.adapter.exists(text2.inputEl.value);
        this.data.configDirectory = text2.inputEl.value;
        await this.plugin.saveSettings();
        this.display();
      };
    }).addExtraButton((b) => {
      b.setTooltip("Reset to Default").setIcon("reset").onClick(async () => {
        this.data.configDirectory = null;
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  buildCalendars(containerEl) {
    containerEl.empty();
    containerEl.ontoggle = () => {
      this.data.settingsToggleState.calendars = containerEl.open;
    };
    const summary = containerEl.createEl("summary");
    new import_obsidian18.Setting(summary).setHeading().setName("Calendar Management");
    summary.createDiv("collapser").createDiv("handle");
    new import_obsidian18.Setting(containerEl).setName("Default Calendar").setDesc("Views will open to this calendar by default.").addDropdown((d) => {
      d.addOption("none", "None");
      for (let calendar of this.data.calendars) {
        d.addOption(calendar.id, calendar.name);
      }
      d.setValue(this.plugin.data.defaultCalendar);
      d.onChange((v) => {
        if (v === "none") {
          this.plugin.data.defaultCalendar = null;
          this.plugin.saveSettings();
          return;
        }
        this.plugin.data.defaultCalendar = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian18.Setting(containerEl).setName("Import Calendar").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Import calendar from "
      });
      e.createEl("a", {
        href: "https://app.fantasy-calendar.com",
        text: "Fantasy Calendar",
        cls: "external-link"
      });
    })).addButton((b) => {
      const input = createEl("input", {
        attr: {
          type: "file",
          name: "merge",
          accept: ".json",
          multiple: true,
          style: "display: none;"
        }
      });
      input.onchange = async () => {
        const { files } = input;
        if (!files.length)
          return;
        try {
          const data = [];
          for (let file of Array.from(files)) {
            data.push(JSON.parse(await file.text()));
          }
          const calendars = Import.import(data);
          this.plugin.data.calendars.push(...calendars);
          await this.plugin.saveCalendar();
          this.showCalendars(existing);
        } catch (e) {
          new import_obsidian18.Notice(`There was an error while importing the calendar${files.length == 1 ? "" : "s"}.`);
          console.error(e);
        }
        input.value = null;
      };
      b.setButtonText("Choose Files");
      b.buttonEl.addClass("calendar-file-upload");
      b.buttonEl.appendChild(input);
      b.onClick(() => input.click());
    });
    new import_obsidian18.Setting(containerEl).setName("Create New Calendar").addButton((button) => button.setTooltip("Launch Calendar Creator").setIcon("plus-with-circle").onClick(() => {
      this.launchCalendarCreator();
    }));
    const existing = containerEl.createDiv("existing-calendars");
    this.showCalendars(existing);
  }
  showCalendars(element2) {
    element2.empty();
    if (!this.data.calendars.length) {
      element2.createSpan({
        text: "No calendars created! Create a calendar to see it here."
      });
      return;
    }
    for (let calendar of this.data.calendars) {
      new import_obsidian18.Setting(element2).setName(calendar.name).setDesc(calendar.description ?? "").addExtraButton((b) => {
        b.setIcon("pencil").onClick(() => {
          const modal = new CreateCalendarModal(this.plugin, calendar);
          modal.onClose = async () => {
            if (!modal.saved) {
              this.showCalendars(element2);
              return;
            }
            this.data.calendars.splice(this.data.calendars.indexOf(calendar), 1, (0, import_fast_copy2.default)(modal.calendar));
            await this.plugin.saveCalendar();
            this.showCalendars(element2);
          };
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").onClick(async () => {
          if (!await confirmWithModal(this.app, "Are you sure you want to delete this calendar?", {
            cta: "Delete",
            secondary: "Cancel"
          }))
            return;
          this.plugin.data.calendars = this.plugin.data.calendars.filter((c) => c.id != calendar.id);
          await this.plugin.saveCalendar();
          if (calendar.name == this.plugin.data.defaultCalendar) {
            this.display();
          } else {
            this.showCalendars(element2);
          }
        });
      });
    }
  }
  buildEvents(containerEl) {
    containerEl.empty();
    containerEl.ontoggle = () => {
      this.data.settingsToggleState.events = containerEl.open;
    };
    const summary = containerEl.createEl("summary");
    new import_obsidian18.Setting(summary).setHeading().setName("Events");
    summary.createDiv("collapser").createDiv("handle");
    new import_obsidian18.Setting(containerEl).setName("Display Event Previews").setDesc("Use the core Note Preview plugin to display event notes when hovered.").addToggle((t) => {
      t.setValue(this.data.eventPreview).onChange((v) => {
        this.data.eventPreview = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian18.Setting(containerEl).setName("Automatically Parse for Events").setDesc("The plugin will automatically parse files in the vault for events.").addToggle((t) => {
      t.setValue(this.data.autoParse).onChange((v) => {
        this.data.autoParse = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian18.Setting(containerEl).setName("Events Folder").setDesc("The plugin will only watch for changes in this folder.").addText((text2) => {
      let folders = this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian18.TFolder);
      text2.setPlaceholder(this.plugin.data.path ?? "/");
      const modal = new FolderSuggestionModal(this.app, text2, [
        ...folders
      ]);
      modal.onClose = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        this.plugin.data.path = (0, import_obsidian18.normalizePath)(v);
      };
      text2.inputEl.onblur = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        this.plugin.data.path = (0, import_obsidian18.normalizePath)(v);
      };
    });
    new import_obsidian18.Setting(containerEl).setName("Parse Note Titles for Event Dates").setDesc("The plugin will parse note titles for event dates.").addToggle((t) => {
      t.setValue(this.data.parseDates).onChange((v) => {
        this.data.parseDates = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian18.Setting(containerEl).setName("Date Format").setClass(this.data.dailyNotes ? "daily-notes" : "no-daily-notes").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Event dates will be parsed using this format."
      });
      e.createSpan({ text: "Only the " });
      e.createEl("code", { text: "Y" });
      e.createSpan({
        text: ", "
      });
      e.createEl("code", { text: "M" });
      e.createSpan({
        text: ", and "
      });
      e.createEl("code", { text: "D" });
      e.createEl("a", {
        text: "tokens",
        href: "https://momentjs.com/docs/#/displaying/format/",
        cls: "external-link"
      });
      e.createSpan({
        text: " are supported."
      });
      if (["Y", "M", "D"].some((token) => !this.data.dateFormat.includes(token))) {
        e.createEl("br");
        const span = e.createSpan({
          cls: "fantasy-calendar-warning date-format"
        });
        (0, import_obsidian18.setIcon)(span.createSpan("fantasy-calendar-warning"), "fantasy-calendar-warning");
        let missing = ["Y", "M", "D"].filter((token) => !this.data.dateFormat.includes(token));
        span.createSpan({
          text: ` Date format is missing: ${missing.join(", ").replace(/, ([^,]*)$/, " and $1")}`
        });
      }
    })).addText((t) => {
      t.setDisabled(this.data.dailyNotes).setValue(this.plugin.format).onChange((v) => {
        this.data.dateFormat = v;
        this.plugin.saveSettings();
      });
      t.inputEl.onblur = () => this.buildEvents(containerEl);
    }).addExtraButton((b) => {
      if (!this.plugin.canUseDailyNotes) {
        b.extraSettingsEl.detach();
        return;
      }
      if (this.data.dailyNotes) {
        b.setIcon("checkmark").setTooltip("Unlink from Daily Notes").onClick(() => {
          this.data.dailyNotes = false;
          this.buildEvents(containerEl);
        });
      } else {
        b.setIcon("sync").setTooltip("Link with Daily Notes").onClick(() => {
          this.data.dailyNotes = true;
          this.buildEvents(containerEl);
        });
      }
    });
    new import_obsidian18.Setting(containerEl).setName("Support Timelines Events").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Support <span> elements used by the "
      });
      e.createEl("a", {
        text: "Obsidian Timelines",
        href: "obsidian://show-plugin?id=obsidian-timelines"
      });
      e.createSpan({
        text: " plugin (by Darakah)."
      });
    })).addToggle((t) => {
      t.setValue(this.data.supportTimelines).onChange((v) => {
        this.data.supportTimelines = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian18.Setting(containerEl).setName("Default tag marking pages containing Timelines data").setDesc("Tag to specify which notes to include in created timelines e.g. timeline to use the #timeline tag").addText((text2) => text2.setPlaceholder(this.data.timelineTag).setValue(this.data.timelineTag.replace("#", "")).setDisabled(this.plugin.syncTimelines).onChange((v) => {
      this.data.timelineTag = v.startsWith("#") ? v : `#${v}`;
      this.plugin.saveSettings();
    })).addExtraButton((b) => {
      if (!this.plugin.canUseTimelines) {
        this.data.syncTimelines = false;
        b.extraSettingsEl.detach();
        return;
      }
      if (this.data.syncTimelines) {
        b.setIcon("checkmark").setTooltip("Unsync from Timelines Plugin").onClick(async () => {
          this.data.syncTimelines = false;
          await this.plugin.saveSettings();
          this.buildEvents(containerEl);
        });
      } else {
        b.setIcon("sync").setTooltip("Sync with Timelines Plugin").onClick(async () => {
          this.data.syncTimelines = true;
          this.data.timelineTag = this.plugin.app.plugins.getPlugin("obsidian-timelines").settings.timelineTag;
          await this.plugin.saveSettings();
          this.buildEvents(containerEl);
        });
      }
    });
  }
  launchCalendarCreator(calendar) {
    this.containerEl.empty();
    const $app = new Creator_default({
      target: this.containerEl,
      props: {
        calendar,
        plugin: this.plugin
      }
    });
    $app.$on("exit", () => {
      this.display();
    });
  }
};
var CreateCalendarModal = class extends import_obsidian18.Modal {
  constructor(plugin, existing) {
    super(plugin.app);
    this.plugin = plugin;
    this.calendar = (0, import_fast_copy2.default)(DEFAULT_CALENDAR);
    this.saved = false;
    this.editing = false;
    this.canSave = false;
    this.tempCurrentDays = this.calendar.current.day;
    this.calendar.id = nanoid(6);
    if (existing) {
      this.editing = true;
      this.calendar = (0, import_fast_copy2.default)(existing);
    }
    this.containerEl.addClass("fantasy-calendar-create-calendar");
  }
  get static() {
    return this.calendar.static;
  }
  get week() {
    return this.static.weekdays;
  }
  get months() {
    return this.static.months;
  }
  get events() {
    return this.calendar.events;
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: this.editing ? "Edit Calendar" : "New Calendar"
    });
    const presetEl = this.contentEl.createDiv("fantasy-calendar-apply-preset");
    new import_obsidian18.Setting(presetEl).setName("Apply Preset").setDesc("Apply a common fantasy calendar as a preset.").addButton((b) => {
      b.setCta().setButtonText("Choose Preset").onClick(() => {
        const modal = new CalendarPresetModal(this.app);
        modal.onClose = () => {
          if (!modal.saved)
            return;
          if (modal.preset?.name == "Gregorian Calendar") {
            const today = new Date();
            modal.preset.current = {
              year: today.getFullYear(),
              month: today.getMonth(),
              day: today.getDate()
            };
          }
          this.calendar = {
            ...modal.preset,
            id: this.calendar.id
          };
          this.display();
        };
        modal.open();
      });
    });
    this.uiEl = this.contentEl.createDiv("fantasy-calendar-ui");
    this.buttonsEl = this.contentEl.createDiv("fantasy-context-buttons");
    this.buildButtons();
    this.infoEl = this.uiEl.createDiv("calendar-info");
    this.buildInfo();
    this.weekdayEl = this.uiEl.createDiv();
    this.buildWeekdays();
    this.monthEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildMonths();
    this.yearEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildYear();
    this.leapdayEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildLeapDays();
    this.eventEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildEvents();
    this.categoryEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildCategories();
    this.moonEl = this.uiEl.createDiv("fantasy-calendar-element");
    this.buildMoons();
  }
  buildInfo() {
    this.infoEl.empty();
    this.infoDetailEl = this.infoEl.createEl("details", {
      attr: { open: true }
    });
    this.infoDetailEl.createEl("summary").createEl("h4", { text: "Basic Info" });
    new import_obsidian18.Setting(this.infoDetailEl).setName("Calendar Name").addText((t) => {
      t.setValue(this.calendar.name).onChange((v) => this.calendar.name = v);
    });
    const descriptionEl = this.infoDetailEl.createDiv("calendar-description");
    descriptionEl.createEl("label", { text: "Calendar Description" });
    new import_obsidian18.TextAreaComponent(descriptionEl).setPlaceholder("Calendar Description").setValue(this.calendar.description).onChange((v) => {
      this.calendar.description = v;
    });
    new import_obsidian18.Setting(this.infoDetailEl).setName("Display Day Number").setDesc("Display the day of the year.").addToggle((t) => {
      t.setValue(this.static.displayDayNumber).onChange((v) => {
        this.static.displayDayNumber = v;
        this.buildInfo();
      });
    });
    new import_obsidian18.Setting(this.infoDetailEl).setName("Auto Increment Day").setDesc("Automatically increment the calendar day every real day.").addToggle((t) => {
      t.setValue(this.static.incrementDay).onChange((v) => {
        this.static.incrementDay = v;
      });
    });
    this.dateFieldEl = this.infoDetailEl.createDiv();
    this.buildDateFields();
  }
  buildDateFields() {
    this.dateFieldEl.empty();
    new import_obsidian18.Setting(this.dateFieldEl).setClass("fantasy-calendar-date-fields-heading").setHeading().setName("Current Date");
    const dateFieldEl = this.dateFieldEl.createDiv("fantasy-calendar-date-fields");
    if (this.tempCurrentDays == null && this.calendar.current.day) {
      this.tempCurrentDays = this.calendar.current.day;
    }
    if (this.tempCurrentDays != void 0 && this.calendar.current.month != void 0 && this.tempCurrentDays > this.calendar.static.months[this.calendar.current.month]?.length) {
      this.tempCurrentDays = this.calendar.static.months[this.calendar.current.month]?.length;
    }
    const dayEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
    dayEl.createEl("label", { text: "Day" });
    const day = new import_obsidian18.TextComponent(dayEl).setPlaceholder("Day").setValue(`${this.tempCurrentDays}`).setDisabled(this.calendar.current.month == void 0).onChange((v) => {
      if (Number(v) < 1 || Number(v) > this.calendar.static.months[this.calendar.current.month]?.length) {
        new import_obsidian18.Notice(`The current day must be between 1 and ${this.calendar.static.months[this.calendar.current.month].length}`);
        this.tempCurrentDays = this.calendar.current.day;
        this.buildDateFields();
        return;
      }
      this.tempCurrentDays = Number(v);
    });
    day.inputEl.setAttr("type", "number");
    const monthEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
    monthEl.createEl("label", { text: "Month" });
    new import_obsidian18.DropdownComponent(monthEl).addOptions(Object.fromEntries([
      ["select", "Select Month"],
      ...this.calendar.static.months.map((month) => [
        month.name,
        month.name
      ])
    ])).setValue(this.calendar.current.month != void 0 ? this.calendar.static.months[this.calendar.current.month].name : "select").onChange((v) => {
      if (v === "select")
        this.calendar.current.month = null;
      const index = this.calendar.static.months.find((m) => m.name == v);
      this.calendar.current.month = this.calendar.static.months.indexOf(index);
      this.buildDateFields();
    });
    const yearEl = dateFieldEl.createDiv("fantasy-calendar-date-field");
    yearEl.createEl("label", { text: "Year" });
    if (this.calendar.static.useCustomYears) {
      const yearDrop = new import_obsidian18.DropdownComponent(yearEl);
      (this.calendar.static.years ?? []).forEach((year) => {
        yearDrop.addOption(year.id, year.name);
      });
      if (this.calendar.current.year > this.calendar.static.years?.length) {
        this.calendar.current.year = this.calendar.static.years ? this.calendar.static.years.length : null;
      }
      yearDrop.setValue(this.calendar.static.years?.[this.calendar.current.year - 1]?.id).onChange((v) => {
        this.calendar.current.year = this.calendar.static.years.findIndex((y) => y.id == v) + 1;
      });
    } else {
      const year = new import_obsidian18.TextComponent(yearEl).setPlaceholder("Year").setValue(`${this.calendar.current.year}`).onChange((v) => {
        this.calendar.current.year = Number(v);
      });
      year.inputEl.setAttr("type", "number");
    }
  }
  buildWeekdays() {
    this.weekdayEl.empty();
    const weekday = new Weekdays_default({
      target: this.weekdayEl,
      props: {
        weekdays: this.week,
        firstWeekday: this.calendar.static.firstWeekDay,
        overflow: this.calendar.static.overflow
      }
    });
    weekday.$on("weekday-update", (e) => {
      this.calendar.static.weekdays = e.detail;
      if (!this.calendar.static.firstWeekDay && this.calendar.static.weekdays.length) {
        this.calendar.static.firstWeekDay = 0;
        weekday.$set({
          firstWeekday: this.calendar.static.firstWeekDay
        });
      }
      this.checkCanSave();
    });
    weekday.$on("first-weekday-update", (e) => {
      this.calendar.static.firstWeekDay = e.detail;
    });
    weekday.$on("overflow-update", (e) => {
      this.calendar.static.overflow = e.detail;
      if (!this.calendar.static.overflow)
        this.calendar.static.firstWeekDay = 0;
      weekday.$set({
        firstWeekday: this.calendar.static.firstWeekDay
      });
    });
  }
  buildMonths() {
    this.monthEl.empty();
    const months = new Months_default({
      target: this.monthEl,
      props: {
        months: this.months
      }
    });
    months.$on("month-update", (e) => {
      this.calendar.static.months = e.detail;
      this.buildDateFields();
      this.checkCanSave();
    });
  }
  buildYear() {
    this.yearEl.empty();
    const years = new Year_default({
      target: this.yearEl,
      props: {
        useCustomYears: this.static.useCustomYears,
        years: this.static.years,
        app: this.app
      }
    });
    years.$on("years-update", (e) => {
      this.calendar.static.years = e.detail;
      this.buildDateFields();
      this.buildEvents();
    });
    years.$on("use-custom-update", (e) => {
      this.calendar.static.useCustomYears = e.detail;
      this.buildDateFields();
      this.buildEvents();
    });
  }
  buildLeapDays() {
    this.leapdayEl.empty();
    const leapdayUI = new LeapDays_default({
      target: this.leapdayEl,
      props: {
        leapdays: this.static.leapDays
      }
    });
    leapdayUI.$on("new-item", async (e) => {
      const modal = new CreateLeapDayModal(this.app, this.calendar, e.detail);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        if (modal.editing) {
          const index = this.calendar.static.moons.indexOf(this.calendar.static.moons.find((e2) => e2.id === modal.leapday.id));
          this.calendar.static.leapDays.splice(index, 1, {
            ...modal.leapday
          });
        } else {
          this.calendar.static.leapDays.push({ ...modal.leapday });
        }
        leapdayUI.$set({ leapdays: this.calendar.static.leapDays });
        this.plugin.saveCalendar();
      };
      modal.open();
    });
    leapdayUI.$on("edit-leapdays", (e) => {
      this.calendar.static.leapDays = e.detail;
    });
  }
  buildEvents() {
    this.eventEl.empty();
    this.eventsUI = new Events_default({
      target: this.eventEl,
      props: {
        events: this.events,
        months: this.calendar.static.months,
        categories: this.calendar.categories
      }
    });
    this.eventsUI.$on("new-item", async (e) => {
      const modal = new CreateEventModal(this.app, this.calendar, e.detail);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        if (modal.editing) {
          const index = this.calendar.events.indexOf(this.calendar.events.find((e2) => e2.id === modal.event.id));
          this.calendar.events.splice(index, 1, { ...modal.event });
        } else {
          this.calendar.events.push({ ...modal.event });
        }
        this.eventsUI.$set({ events: this.events });
        this.plugin.saveCalendar();
      };
      modal.open();
    });
    this.eventsUI.$on("edit-events", (e) => {
      this.calendar.events = e.detail;
    });
    this.eventEl.setAttr(`style`, `--event-max-width: ${this.eventEl.getBoundingClientRect().width}px;`);
  }
  buildCategories() {
    this.categoryEl.empty();
    const category = new Categories_default({
      target: this.categoryEl,
      props: {
        categories: this.calendar.categories
      }
    });
    category.$on("new", (event) => {
      this.calendar.categories.push(event.detail);
      this.eventsUI.$set({
        categories: this.calendar.categories
      });
    });
    category.$on("update", (event) => {
      const existing = this.calendar.categories.find((c) => c.id == event.detail.id);
      this.calendar.categories.splice(this.calendar.categories.indexOf(existing), 1, event.detail);
      this.eventsUI.$set({
        categories: this.calendar.categories,
        events: this.events
      });
    });
    category.$on("delete", (event) => {
      this.calendar.categories.splice(this.calendar.categories.indexOf(event.detail), 1);
      this.eventsUI.$set({
        categories: this.calendar.categories,
        events: this.events
      });
    });
  }
  buildMoons() {
    this.moonEl.empty();
    this.static.displayMoons = this.static.displayMoons ?? true;
    const moonsUI = new Moons_default({
      target: this.moonEl,
      props: {
        moons: this.static.moons,
        displayMoons: this.static.displayMoons
      }
    });
    moonsUI.$on("display-toggle", (e) => {
      this.static.displayMoons = e.detail;
      moonsUI.$set({ displayMoons: this.static.displayMoons });
    });
    moonsUI.$on("new-item", async (e) => {
      const modal = new CreateMoonModal(this.app, this.calendar, e.detail);
      modal.onClose = () => {
        if (!modal.saved)
          return;
        if (modal.editing) {
          const index = this.calendar.static.moons.indexOf(this.calendar.static.moons.find((e2) => e2.id === modal.moon.id));
          this.calendar.static.moons.splice(index, 1, {
            ...modal.moon
          });
        } else {
          this.calendar.static.moons.push({ ...modal.moon });
        }
        moonsUI.$set({ moons: this.calendar.static.moons });
        this.plugin.saveCalendar();
      };
      modal.open();
    });
    moonsUI.$on("edit-moons", (e) => {
      this.calendar.static.moons = e.detail;
    });
  }
  checkCanSave() {
    if (this.months?.length && this.months?.every((m) => m.name?.length) && this.months?.every((m) => m.length > 0) && this.week?.length && this.week?.every((d) => d.name?.length) && this.calendar.name?.length && this.calendar.static.firstWeekDay < (this.week?.length ?? Infinity) && (!this.calendar.static.useCustomYears || this.calendar.static.useCustomYears && this.calendar.static.years?.length && this.calendar.static.years.every((y) => y.name?.length))) {
      this.canSave = true;
    }
  }
  buildButtons() {
    this.buttonsEl.empty();
    new import_obsidian18.ButtonComponent(this.buttonsEl).setCta().setButtonText(this.editing ? "Save" : "Create").onClick(() => {
      if (!this.canSave) {
        this.checkCanSave();
      }
      if (!this.canSave) {
        if (!this.calendar.name?.length) {
          new import_obsidian18.Notice("The calendar name is required!");
        } else if (!this.week.length) {
          new import_obsidian18.Notice("At least one weekday is required.");
        } else if (!this.week.every((w) => w.name?.length)) {
          new import_obsidian18.Notice("Every weekday must have a name.");
        } else if (!this.months.length) {
          new import_obsidian18.Notice("At least one month is required.");
        } else if (!this.months.every((m) => m.name?.length)) {
          new import_obsidian18.Notice("Every month must have a name.");
        } else if (!this.months.every((m) => m.length)) {
          new import_obsidian18.Notice("Every month must have a length.");
        } else if (this.calendar.static.useCustomYears && !this.calendar.static.years?.length) {
          new import_obsidian18.Notice("Custom years must be defined.");
        } else if (this.calendar.static.useCustomYears && !this.calendar.static.years.every((y) => y.name?.length)) {
          new import_obsidian18.Notice("Each custom year must be named.");
        } else if (this.calendar.static.firstWeekDay >= this.week.length) {
          new import_obsidian18.Notice("The first day of the week must be a valid weekday.");
        }
        return;
      }
      this.calendar.current.day = this.tempCurrentDays;
      this.saved = true;
      this.close();
    });
    new import_obsidian18.ExtraButtonComponent(this.buttonsEl).setTooltip("Cancel").setIcon("cross").onClick(() => this.close());
  }
  onOpen() {
    this.display();
  }
};
var CalendarPresetModal = class extends import_obsidian18.Modal {
  async onOpen() {
    await this.display();
  }
  async display() {
    this.containerEl.addClass("fantasy-calendar-choose-preset");
    this.contentEl.empty();
    this.contentEl.createEl("h3", {
      text: "Choose a Preset Calendar"
    });
    const presetEl = this.contentEl.createDiv("fantasy-calendar-preset-container");
    for (const preset of PRESET_CALENDARS) {
      const button = new import_obsidian18.ButtonComponent(presetEl).onClick(() => {
        this.preset = preset;
        this.display();
      });
      if (this.preset == preset)
        button.setCta();
      button.buttonEl.createDiv({
        cls: "setting-item-name",
        text: preset.name
      });
      button.buttonEl.createDiv({
        cls: "setting-item-description",
        text: preset.description
      });
    }
    const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
    new import_obsidian18.ButtonComponent(buttonEl).setButtonText("Apply").onClick(() => {
      this.saved = true;
      this.preset = (0, import_fast_copy2.default)(this.preset);
      this.close();
    }).setCta();
    new import_obsidian18.ExtraButtonComponent(buttonEl).setIcon("cross").onClick(() => {
      this.close();
    });
  }
};

// src/view/view.ts
var import_obsidian25 = __toModule(require("obsidian"));

// src/helper/index.ts
var import_obsidian19 = __toModule(require("obsidian"));
var MonthHelper = class {
  constructor(data, number, year, calendar) {
    this.data = data;
    this.number = number;
    this.year = year;
    this.calendar = calendar;
    this.days = [];
    this.leapDays = [];
    this.shouldUpdateEvents = false;
    this.shouldUpdateMoons = false;
    this.leapDays = this.calendar.leapDaysForMonth(this.number, year);
    this.daysBefore = this.calendar.daysBeforeMonth(this.number, this.year);
    this.days = [
      ...new Array(data.length + this.leapDays.length).keys()
    ].map((k) => new DayHelper(this, k + 1));
  }
  get id() {
    return this.data.id;
  }
  get index() {
    return this.calendar.data.months.indexOf(this.data);
  }
  get name() {
    return this.data.name;
  }
  get length() {
    return this.days.length;
  }
  get firstWeekday() {
    if (!this.calendar.data.overflow)
      return 0;
    return this.days[0].weekday;
  }
  get lastWeekday() {
    return this.days[this.days.length - 1].weekday;
  }
  get type() {
    return this.data.type;
  }
  getEventsOnDay(day) {
    if (!this.events || !this.events.length || this.shouldUpdateEvents) {
      this.events = this.calendar.eventsForMonth(this);
    }
    return this.events.filter((event) => {
      if (event.date.day == day.day)
        return true;
      if (!event.end)
        return false;
      const start2 = { ...event.date };
      const end2 = { ...event.end };
      if (!start2.year)
        start2.year = end2.year = this.year;
      if (!start2.month)
        start2.month = end2.month = this.number;
      const hash4 = Number(this.calendar.hash(day));
      if (Number(this.calendar.hash(start2)) <= hash4 && hash4 <= Number(this.calendar.hash(end2)))
        return true;
    });
  }
  getMoonsForDay(day) {
    if (!this.moons || !this.moons.length || this.shouldUpdateMoons) {
      this.moons = this.calendar.getMoonsForMonth(this);
    }
    return this.moons[day.day - 1];
  }
};
var DayHelper = class {
  constructor(month, number) {
    this.month = month;
    this.number = number;
  }
  get calendar() {
    return this.month.calendar;
  }
  get date() {
    return {
      day: this.number,
      month: this.month.number,
      year: this.year
    };
  }
  get events() {
    if (!this._events || !this._events.length || this.month.shouldUpdateEvents) {
      this._events = this.month.getEventsOnDay(this.date);
    }
    return this._events;
  }
  get longDate() {
    return {
      day: this.number,
      month: this.month.name,
      year: this.year
    };
  }
  get daysBefore() {
    return this.month.daysBefore + this.number - 1;
  }
  get year() {
    return this.month.year;
  }
  get weekday() {
    const firstOfYear = this.calendar.firstDayOfYear(this.year);
    return wrap(this.daysBefore % this.calendar.weekdays.length + firstOfYear, this.calendar.weekdays.length);
  }
  get isCurrentDay() {
    return this.number == this.calendar.current.day && this.month.number == this.calendar.current.month && this.month.year == this.calendar.current.year;
  }
  get isDisplaying() {
    return this.number == this.calendar.viewing.day && this.calendar.displayed.year == this.calendar.viewing.year && this.calendar.displayed.month == this.calendar.viewing.month;
  }
  get moons() {
    if (!this._moons || !this._moons.length) {
      this._moons = this.month.getMoonsForDay(this.date);
    }
    return this._moons;
  }
};
var CalendarHelper = class extends import_obsidian19.Events {
  constructor(calendar, plugin) {
    super();
    this.calendar = calendar;
    this.plugin = plugin;
    this._cache = new Map();
    this.displayed = {
      year: null,
      month: null,
      day: null
    };
    this.viewing = {
      year: null,
      month: null,
      day: null
    };
    this.displayed = { ...this.current };
    this.update(this.calendar);
    this.plugin.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-event-update", (tree) => {
      if (!tree.has(this.calendar.id))
        return;
      const years = tree.get(this.calendar.id);
      for (const [year, months] of years) {
        if (!this._cache.has(year))
          continue;
        for (const month of months) {
          if (!this._cache.get(year).has(month))
            continue;
          this._cache.get(year).get(month).shouldUpdateEvents = true;
          if (year == this.displayed.year && month == this.displayed.month || year == this.viewing.year && month == this.viewing.month) {
            this.trigger("month-update");
          }
        }
      }
    }));
  }
  getDayForDate(date) {
    const month = this.getMonth(date.month, date.year);
    const day = month.days[date.day - 1];
    return day;
  }
  eventsForMonth(helper) {
    const { year, number: month } = helper;
    const events = this.calendar.events.filter((event) => {
      const date = { ...event.date };
      const end2 = { ...event.end };
      if (date.month == void 0)
        return true;
      if ((date.year == year || date.year == void 0) && date.month == month)
        return true;
      if (date.year > year || date.year == year && date.month > month)
        return false;
      if (!end2 && (date.month != month || date.year < year))
        return false;
      if (date.year == void 0)
        end2.year = date.year = year;
      if ((date.year <= year || date.month <= month) && end2.year >= year && end2.month >= month)
        return true;
      return false;
    });
    return events;
  }
  getNameForYear(year) {
    if (!this.data.useCustomYears)
      return `${year}`;
    if (this.data.useCustomYears && year - 1 >= 0 && year <= this.data.years?.length) {
      return this.data.years[year - 1].name;
    }
  }
  get displayWeeks() {
    return this.calendar.displayWeeks;
  }
  getMonthsForYear(year) {
    if (!this._cache.has(year)) {
      this._cache.set(year, new Map(this.data.months.map((m, i) => [
        i,
        new MonthHelper(m, i, year, this)
      ])));
    }
    return Array.from(this._cache.get(year).values());
  }
  hash(date) {
    if (date.year == null || date.month == null || date.day == null)
      return null;
    const months = `${this.data.months.length}`.length;
    const month = `${date.month}`.padStart(months, "0");
    const days = `${this.maxDays}`.length;
    const day = `${date.day}`.padStart(days, "0");
    return `${date.year}${month}${day}`;
  }
  update(calendar) {
    this.calendar = calendar ?? this.calendar;
    this.maxDays = Math.max(...this.data.months.map((m) => m.length));
    this.trigger("month-update");
    this.trigger("day-update");
  }
  get categories() {
    return this.calendar.categories;
  }
  get data() {
    return this.calendar.static;
  }
  get current() {
    return this.calendar.current;
  }
  get leapdays() {
    return this.data.leapDays;
  }
  get currentDate() {
    return dateString(this.current, this.data.months);
  }
  get displayedDate() {
    return dateString(this.displayed, this.data.months);
  }
  get viewedDate() {
    return dateString(this.viewing, this.data.months);
  }
  reset() {
    this.displayed = { ...this.current };
    this.viewing = { ...this.current };
    this.trigger("month-update");
    this.trigger("day-update");
  }
  setCurrentMonth(n) {
    this.displayed.month = n;
    this.trigger("month-update");
  }
  goToNextDay() {
    this.viewing.day += 1;
    const currentMonth = this.getMonth(this.displayed.month, this.displayed.year);
    if (this.viewing.day > currentMonth.days.length) {
      this.goToNext();
      this.viewing.month = this.displayed.month;
      this.viewing.year = this.displayed.year;
      this.viewing.day = 1;
    }
    this.trigger("day-update");
  }
  goToNextCurrentDay() {
    this.current.day += 1;
    const currentMonth = this.getMonth(this.current.month, this.current.year);
    if (this.current.day >= currentMonth.days.length) {
      this.current.day = 1;
      this.current.month += 1;
      if (this.current.month >= this.data.months.length) {
        this.current.month = 0;
        this.current.year += 1;
      }
    }
    this.trigger("day-update");
  }
  get nextMonthIndex() {
    return wrap(this.displayed.month + 1, this.data.months.length);
  }
  get nextMonth() {
    return this.getMonth(this.displayed.month + 1, this.displayed.year);
  }
  canGoToNextYear(year = this.displayed.year) {
    return !this.data.useCustomYears || year < this.data.years.length;
  }
  goToNext() {
    if (this.nextMonthIndex < this.displayed.month) {
      if (!this.canGoToNextYear()) {
        new import_obsidian19.Notice("This is the last year. Additional years can be created in settings.");
        return;
      }
      this.goToNextYear();
    }
    this.setCurrentMonth(this.nextMonthIndex);
  }
  goToNextYear() {
    this.displayed.year += 1;
    this.trigger("year-update");
  }
  get prevMonthIndex() {
    return wrap(this.displayed.month - 1, this.data.months.length);
  }
  get previousMonth() {
    return this.getMonth(this.displayed.month - 1, this.displayed.year);
  }
  goToPrevious() {
    if (this.prevMonthIndex > this.displayed.month) {
      if (this.displayed.year == 1) {
        new import_obsidian19.Notice("This is the earliest year.");
        return;
      }
      this.goToPreviousYear();
    }
    this.setCurrentMonth(this.prevMonthIndex);
  }
  goToPreviousDay() {
    this.viewing.day -= 1;
    if (this.viewing.day < 1) {
      this.goToPrevious();
      this.viewing.month = this.displayed.month;
      this.viewing.year = this.displayed.year;
      this.viewing.day = this.currentMonth.days.length;
    }
    this.trigger("day-update");
  }
  goToPreviousYear() {
    this.displayed.year -= 1;
    this.trigger("year-update");
  }
  get weekdays() {
    return this.data.weekdays;
  }
  get currentMonth() {
    return this.getMonth(this.displayed.month, this.displayed.year);
  }
  testLeapDay(leapday, year) {
    return leapday.interval.sort((a, b) => a.interval - b.interval).some(({ interval, exclusive }, index, array) => {
      if (exclusive && index == 0) {
        return (year - leapday.offset) % interval != 0;
      }
      if (exclusive)
        return;
      if (array[index + 1] && array[index + 1].exclusive) {
        return (year - leapday.offset) % interval == 0 && (year - leapday.offset) % array[index + 1].interval != 0;
      }
      return (year - leapday.offset) % interval == 0;
    });
  }
  leapDaysForYear(year) {
    return this.leapdays.filter((l) => {
      return this.testLeapDay(l, year);
    });
  }
  leapDaysForMonth(month, year = this.displayed.year) {
    return this.leapdays.filter((l) => {
      if (l.timespan != month)
        return false;
      return this.testLeapDay(l, year);
    });
  }
  getMonth(number, year, direction = 0) {
    const months = this.data.months;
    let index = wrap(number, months.length);
    if (number < 0)
      year -= 1;
    if (year == 0)
      return null;
    if (number >= months.length)
      year += 1;
    if (this._cache.has(year)) {
      if (this._cache.get(year).has(index)) {
        return this._cache.get(year).get(index);
      }
    } else {
      this._cache.set(year, new Map());
    }
    if (months[index].type == "intercalary" && direction != 0) {
      return this.getMonth(number + direction, year, direction);
    }
    const helper = new MonthHelper(months[index], index, year, this);
    this._cache.set(year, this._cache.get(year).set(index, helper));
    return helper;
  }
  getPaddedDaysForMonth(month) {
    let current = month.days;
    let previous = [];
    const previousMonth = this.getMonth(month.index - 1, this.displayed.year, -1);
    if (month.firstWeekday > 0 && month.type == "month") {
      previous = previousMonth != null ? previousMonth.days.slice(-month.firstWeekday) : Array(month.firstWeekday).fill(null);
    }
    let next2 = [];
    const nextMonth = this.getMonth(month.index + 1, this.displayed.year, 1);
    if (month.lastWeekday < this.weekdays.length - 1 && month.type == "month") {
      next2 = nextMonth.days.slice(0, this.weekdays.length - month.lastWeekday - 1);
    }
    return {
      previous,
      current,
      next: next2
    };
  }
  get weeksPerCurrentMonth() {
    return Math.ceil(this.getMonth(this.displayed.month, this.displayed.year).length / this.data.weekdays.length);
  }
  weeksOfMonth(month) {
    return Math.ceil((month.length + month.firstWeekday) / this.data.weekdays.length);
  }
  weekNumbersOfMonth(month) {
    const daysBefore = month.daysBefore + this.firstDayOfYear(month.year);
    return Math.floor(daysBefore / this.data.weekdays.length);
  }
  get daysPerYear() {
    return this.data.months.filter((m) => m.type === "month").reduce((a, b) => a + b.length, 0);
  }
  daysBeforeMonth(month, year, all = false) {
    if (!month || month == 0)
      return 0;
    return this.data.months.slice(0, month).filter((m) => all ? true : m.type == "month").map((m, i) => m.length + this.leapDaysForMonth(i, year).length).reduce((a, b) => a + b, 0);
  }
  areDatesEqual(date, date2) {
    if (date.day != date2.day)
      return false;
    if (date.month != date2.month && date.month != void 0 && date2.month != void 0)
      return false;
    if (date.year != date2.year && date.year != void 0 && date2.year != void 0)
      return false;
    return true;
  }
  dayNumberForDate(date) {
    return this.daysBeforeMonth(date.month, date.year, true) + date.day;
  }
  get firstWeekday() {
    return this.data.firstWeekDay;
  }
  get leapDaysBefore() {
    if (this.displayed.year == 1)
      return 0;
    return this.leapDaysBeforeYear(this.displayed.year - 1);
  }
  leapDaysBeforeYear(tester) {
    if (tester == 1)
      return 0;
    const year = tester - 1;
    let total = 0;
    for (const { interval, offset: offset2 } of this.leapdays) {
      let leapdays = 0;
      for (let i = 0; i < interval.length; i++) {
        const condition = interval[i];
        const rest = interval.slice(i + 1).filter((c) => !c.exclusive).map((c) => Math.floor((year + (c.ignore ? 0 : offset2)) / c.interval)).reduce((a, b) => a + b, 0);
        const calc = Math.floor((year + (condition.ignore ? 0 : offset2)) / condition.interval);
        if (condition.exclusive) {
          leapdays -= calc;
          leapdays += rest;
        } else {
          leapdays += calc;
          leapdays -= rest;
        }
      }
      total += leapdays;
    }
    return total;
  }
  get totalDaysBefore() {
    return this.totalDaysBeforeYear(this.displayed.year);
  }
  totalDaysBeforeYear(year, all = false) {
    if (year < 1)
      return 0;
    return Math.abs(year - 1) * this.data.months.filter((m) => all || m.type == "month").reduce((a, b) => a + b.length, 0) + this.leapDaysBeforeYear(year);
  }
  firstDayOfYear(year = this.displayed.year) {
    if (!this.data.overflow)
      return 0;
    if (year == 1)
      return this.firstWeekday;
    return wrap(this.totalDaysBeforeYear(year) % this.data.weekdays.length + this.firstWeekday + (this.data.offset ?? 0), this.data.weekdays.length);
  }
  get moons() {
    return this.data.moons;
  }
  getMoonsForMonth(month) {
    const phases = [];
    for (const day of month.days) {
      const daysBefore = this.totalDaysBeforeYear(month.year, true) + this.daysBeforeMonth(month.number, month.year, true) + day.number - 1;
      const moons = [];
      for (let moon of this.moons) {
        const { offset: offset2, cycle } = moon;
        const granularity = 24;
        let data = (daysBefore - offset2) / cycle;
        let position = data - Math.floor(data);
        const phase = position * granularity % granularity;
        const options = MOON_PHASES[granularity];
        moons.push([
          moon,
          options[wrap(Math.round(phase), options.length)]
        ]);
      }
      phases.push(moons);
    }
    return phases;
  }
};

// node_modules/svelte/store/index.mjs
var subscriber_queue = [];
function writable(value, start2 = noop) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn2) {
    set(fn2(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/view/ui/DayView.svelte
var import_obsidian21 = __toModule(require("obsidian"));

// src/view/ui/Flag.svelte
var import_obsidian20 = __toModule(require("obsidian"));
function add_css12(target) {
  append_styles(target, "svelte-1e1nyi2", ".flag.svelte-1e1nyi2.svelte-1e1nyi2{cursor:pointer;position:relative;padding-left:0.125rem;text-align:left;width:100%;background-color:var(--hex-alpha);border-left:2px solid var(--color)}.flag-content.svelte-1e1nyi2.svelte-1e1nyi2{display:flex;gap:0.25rem;align-items:flex-start;justify-content:space-between}.day-view.svelte-1e1nyi2 .flag-content.svelte-1e1nyi2{justify-content:space-between}.clamp.svelte-1e1nyi2.svelte-1e1nyi2{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;word-break:keep-all;overflow:hidden;text-overflow:ellipsis}.note.svelte-1e1nyi2.svelte-1e1nyi2{display:flex;align-self:center}.multi.svelte-1e1nyi2.svelte-1e1nyi2{flex-shrink:0;overflow:visible;width:unset}.multi.svelte-1e1nyi2 .clamp.svelte-1e1nyi2{-webkit-line-clamp:1;overflow:visible}.multi.start.svelte-1e1nyi2.svelte-1e1nyi2{margin-left:0}.multi.end.svelte-1e1nyi2.svelte-1e1nyi2{margin-right:0}.multi.first.svelte-1e1nyi2.svelte-1e1nyi2{overflow:visible;white-space:nowrap}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.first){color:transparent;overflow:hidden}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.start){border:0;margin-left:-6px}.multi.svelte-1e1nyi2.svelte-1e1nyi2:not(.end){margin-right:-6px}.start.svelte-1e1nyi2>.flag-content.svelte-1e1nyi2{justify-content:flex-start;gap:1em}");
}
function create_if_block10(ctx) {
  let div;
  let note_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "note svelte-1e1nyi2");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(note_action = ctx[9].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment15(ctx) {
  let div1;
  let div0;
  let span;
  let t0_value = ctx[0].name + "";
  let t0;
  let t1;
  let div1_aria_label_value;
  let mounted;
  let dispose;
  let if_block = ctx[0].note && create_if_block10(ctx);
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      attr(span, "class", "svelte-1e1nyi2");
      toggle_class(span, "clamp", !ctx[1]);
      toggle_class(span, "day-view", ctx[1]);
      attr(div0, "class", "flag-content svelte-1e1nyi2");
      attr(div1, "class", "flag svelte-1e1nyi2");
      attr(div1, "aria-label", div1_aria_label_value = !ctx[1] ? ctx[0].name : null);
      set_style(div1, "--hex-alpha", ctx[6] + "40");
      set_style(div1, "--color", ctx[6]);
      toggle_class(div1, "multi", ctx[4]);
      toggle_class(div1, "start", ctx[2]);
      toggle_class(div1, "end", ctx[3]);
      toggle_class(div1, "first", ctx[5]);
      toggle_class(div1, "day-view", ctx[1]);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, span);
      append(span, t0);
      append(div0, t1);
      if (if_block)
        if_block.m(div0, null);
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[12]),
          listen(div1, "mouseover", ctx[13]),
          listen(div1, "focus", focus_handler),
          listen(div1, "contextmenu", ctx[14])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & 2) {
        toggle_class(span, "clamp", !ctx2[1]);
      }
      if (dirty & 2) {
        toggle_class(span, "day-view", ctx2[1]);
      }
      if (ctx2[0].note) {
        if (if_block) {
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & 3 && div1_aria_label_value !== (div1_aria_label_value = !ctx2[1] ? ctx2[0].name : null)) {
        attr(div1, "aria-label", div1_aria_label_value);
      }
      if (dirty & 64) {
        set_style(div1, "--hex-alpha", ctx2[6] + "40");
      }
      if (dirty & 64) {
        set_style(div1, "--color", ctx2[6]);
      }
      if (dirty & 16) {
        toggle_class(div1, "multi", ctx2[4]);
      }
      if (dirty & 4) {
        toggle_class(div1, "start", ctx2[2]);
      }
      if (dirty & 8) {
        toggle_class(div1, "end", ctx2[3]);
      }
      if (dirty & 32) {
        toggle_class(div1, "first", ctx2[5]);
      }
      if (dirty & 2) {
        toggle_class(div1, "day-view", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
var focus_handler = () => {
};
function instance15($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { event } = $$props;
  let { date } = $$props;
  let { dayView = false } = $$props;
  let multi = false, start2 = false, end2 = false, first = false;
  let { categories } = $$props;
  let color = categories.find((c) => c.id == event.category)?.color ?? DEFAULT_CATEGORY_COLOR;
  const meta = import_obsidian20.Platform.isMacOS ? "Meta" : "Control";
  const note = (node) => {
    (0, import_obsidian20.setIcon)(node, "note-glyph");
  };
  const click_handler = (evt) => {
    evt.stopPropagation();
    dispatch2("event-click", {
      event,
      modifier: evt.getModifierState(meta)
    });
  };
  const mouseover_handler = (evt) => dispatch2("event-mouseover", { target: evt.target, event });
  const contextmenu_handler = (evt) => {
    evt.stopPropagation();
    dispatch2("event-context", { evt, event });
  };
  $$self.$$set = ($$props2) => {
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("date" in $$props2)
      $$invalidate(10, date = $$props2.date);
    if ("dayView" in $$props2)
      $$invalidate(1, dayView = $$props2.dayView);
    if ("categories" in $$props2)
      $$invalidate(11, categories = $$props2.categories);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1039) {
      $: {
        if (event.end != void 0 && !dayView) {
          $$invalidate(4, multi = true);
          $$invalidate(2, start2 = date.day === event.date.day && (event.date.month == void 0 || date.month == event.date.month) && (event.date.year == void 0 || date.year === event.date.year));
          $$invalidate(5, first = start2 || date.day == 1);
          $$invalidate(3, end2 = date.day === event.end.day && (event.end.month == void 0 || date.month == event.end.month) && (event.end.year == void 0 || date.year === event.end.year));
          if (start2 && end2) {
            $$invalidate(4, multi = false);
            $$invalidate(2, start2 = false);
            $$invalidate(3, end2 = false);
          }
        }
      }
    }
    if ($$self.$$.dirty & 2049) {
      $:
        $$invalidate(6, color = categories.find((c) => c.id == event.category)?.color ?? DEFAULT_CATEGORY_COLOR);
    }
  };
  return [
    event,
    dayView,
    start2,
    end2,
    multi,
    first,
    color,
    dispatch2,
    meta,
    note,
    date,
    categories,
    click_handler,
    mouseover_handler,
    contextmenu_handler
  ];
}
var Flag = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment15, safe_not_equal, {
      event: 0,
      date: 10,
      dayView: 1,
      categories: 11
    }, add_css12);
  }
};
var Flag_default = Flag;

// src/view/ui/Flags.svelte
function add_css13(target) {
  append_styles(target, "svelte-qnut28", ".flags-container.svelte-qnut28{height:100%}.flag-container.svelte-qnut28{display:flex;flex-flow:column nowrap;gap:0.25rem}.overflow.svelte-qnut28{color:var(--text-muted);display:flex;justify-content:flex-end;width:100%}");
}
function create_key_block(ctx) {
  let div;
  let addEvents_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "flag-container svelte-qnut28");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(addEvents_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block11(ctx) {
  let span;
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text("+");
      t1 = text(ctx[1]);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t1, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment16(ctx) {
  let div1;
  let previous_key = ctx[0];
  let t;
  let div0;
  let key_block = create_key_block(ctx);
  let if_block = ctx[1] > 0 && create_if_block11(ctx);
  return {
    c() {
      div1 = element("div");
      key_block.c();
      t = space();
      div0 = element("div");
      if (if_block)
        if_block.c();
      attr(div0, "class", "overflow svelte-qnut28");
      attr(div1, "class", "flags-container svelte-qnut28");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      key_block.m(div1, null);
      append(div1, t);
      append(div1, div0);
      if (if_block)
        if_block.m(div0, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(div1, t);
      }
      if (ctx2[1] > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block11(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      key_block.d(detaching);
      if (if_block)
        if_block.d();
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let { events = [] } = $$props;
  let { categories } = $$props;
  let { dayView = false } = $$props;
  let { date } = $$props;
  let { calendar } = $$props;
  let overflow = 0;
  const dispatch2 = createEventDispatcher();
  let flagContainer;
  let previousHeight = 0;
  const addEvents = (flags) => {
    if (events.length) {
      const height = flags?.parentElement?.getBoundingClientRect()?.height;
      if (!dayView && (height == null || Math.floor(height) == Math.floor(previousHeight)))
        return;
      previousHeight = height;
      flagContainer = flags;
      flags.empty();
      $$invalidate(1, overflow = 0);
      let remaining = height;
      for (const event of events) {
        const flag = new Flag_default({
          target: flags,
          props: { event, categories, dayView, date }
        });
        flag.$on("event-click", (e) => dispatch2("event-click", e.detail));
        flag.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
        flag.$on("event-context", (e) => dispatch2("event-context", e.detail));
        if (!dayView) {
          remaining = height - flags.getBoundingClientRect().height;
          if (remaining < 0) {
            flags.lastElementChild.detach();
            $$invalidate(1, overflow = events.length - events.indexOf(event));
            break;
          } else if (remaining == 0) {
            $$invalidate(1, overflow = events.length - events.indexOf(event) - 1);
            break;
          }
        }
      }
    }
  };
  calendar.on("view-resized", () => {
    if (dayView)
      return;
    addEvents(flagContainer);
  });
  $$self.$$set = ($$props2) => {
    if ("events" in $$props2)
      $$invalidate(0, events = $$props2.events);
    if ("categories" in $$props2)
      $$invalidate(3, categories = $$props2.categories);
    if ("dayView" in $$props2)
      $$invalidate(4, dayView = $$props2.dayView);
    if ("date" in $$props2)
      $$invalidate(5, date = $$props2.date);
    if ("calendar" in $$props2)
      $$invalidate(6, calendar = $$props2.calendar);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(0, events = [...events]);
    }
  };
  return [events, overflow, addEvents, categories, dayView, date, calendar];
}
var Flags = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment16, safe_not_equal, {
      events: 0,
      categories: 3,
      dayView: 4,
      date: 5,
      calendar: 6
    }, add_css13);
  }
};
var Flags_default = Flags;

// src/view/ui/DayView.svelte
function add_css14(target) {
  append_styles(target, "svelte-1uhffao", ".day-view.svelte-1uhffao{padding:5px 15px;display:flex;flex-flow:column nowrap;gap:0.5rem}.nav.svelte-1uhffao,.date.svelte-1uhffao{display:flex;justify-content:space-between;align-items:center}.left-nav.svelte-1uhffao{display:flex}.left-nav.svelte-1uhffao .clickable-icon{margin-right:0}.calendar-clickable.svelte-1uhffao{align-items:center;cursor:pointer;display:flex;justify-content:center}h3.svelte-1uhffao{margin:0}.day-view.svelte-1uhffao .flag-container > .flag{padding-left:0.5rem}.title-container.svelte-1uhffao{display:flex;flex-flow:column nowrap;align-items:center;justify-content:center}.day-number.svelte-1uhffao{font-size:small}");
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i][0];
  child_ctx[25] = list[i][1];
  return child_ctx;
}
function create_if_block_12(ctx) {
  let div;
  let em;
  let t0;
  let t1;
  return {
    c() {
      div = element("div");
      em = element("em");
      t0 = text("Day ");
      t1 = text(ctx[8]);
      attr(div, "class", "day-number svelte-1uhffao");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, em);
      append(em, t0);
      append(em, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 256)
        set_data(t1, ctx2[8]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block12(ctx) {
  let div;
  let current;
  let each_value = ctx[5];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "moon-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 32) {
        each_value = ctx2[5];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block8(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block8(ctx) {
  let moon;
  let current;
  moon = new Moon_default({
    props: {
      moon: ctx[24],
      phase: ctx[25]
    }
  });
  return {
    c() {
      create_component(moon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(moon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const moon_changes = {};
      if (dirty & 32)
        moon_changes.moon = ctx2[24];
      if (dirty & 32)
        moon_changes.phase = ctx2[25];
      moon.$set(moon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(moon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(moon, detaching);
    }
  };
}
function create_fragment17(ctx) {
  let div9;
  let div4;
  let div2;
  let div0;
  let reveal_action;
  let t0;
  let div1;
  let event_action;
  let t1;
  let div3;
  let close_action;
  let t2;
  let div8;
  let div5;
  let left_action;
  let t3;
  let div6;
  let h3;
  let span;
  let t4;
  let t5;
  let t6;
  let div7;
  let right_action;
  let t7;
  let t8;
  let flags;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[0] && create_if_block_12(ctx);
  let if_block1 = ctx[4] && ctx[5] && ctx[5].length && create_if_block12(ctx);
  flags = new Flags_default({
    props: {
      events: ctx[3].events,
      categories: ctx[7],
      date: ctx[2],
      dayView: true,
      calendar: ctx[1]
    }
  });
  flags.$on("event-click", ctx[19]);
  flags.$on("event-mouseover", ctx[20]);
  flags.$on("event-context", ctx[21]);
  return {
    c() {
      div9 = element("div");
      div4 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div3 = element("div");
      t2 = space();
      div8 = element("div");
      div5 = element("div");
      t3 = space();
      div6 = element("div");
      h3 = element("h3");
      span = element("span");
      t4 = text(ctx[6]);
      t5 = space();
      if (if_block0)
        if_block0.c();
      t6 = space();
      div7 = element("div");
      t7 = space();
      if (if_block1)
        if_block1.c();
      t8 = space();
      create_component(flags.$$.fragment);
      attr(div2, "class", "left-nav svelte-1uhffao");
      attr(div4, "class", "nav svelte-1uhffao");
      attr(div5, "class", "arrow calendar-clickable svelte-1uhffao");
      attr(div5, "aria-label", "Previous");
      attr(span, "class", "current");
      attr(h3, "class", "fantasy-title title svelte-1uhffao");
      attr(div6, "class", "title-container svelte-1uhffao");
      attr(div7, "class", "arrow right calendar-clickable svelte-1uhffao");
      attr(div7, "aria-label", "Next");
      attr(div8, "class", "date svelte-1uhffao");
      attr(div9, "class", "day-view svelte-1uhffao");
    },
    m(target, anchor) {
      insert(target, div9, anchor);
      append(div9, div4);
      append(div4, div2);
      append(div2, div0);
      append(div2, t0);
      append(div2, div1);
      append(div4, t1);
      append(div4, div3);
      append(div9, t2);
      append(div9, div8);
      append(div8, div5);
      append(div8, t3);
      append(div8, div6);
      append(div6, h3);
      append(h3, span);
      append(span, t4);
      append(div6, t5);
      if (if_block0)
        if_block0.m(div6, null);
      append(div8, t6);
      append(div8, div7);
      append(div9, t7);
      if (if_block1)
        if_block1.m(div9, null);
      append(div9, t8);
      mount_component(flags, div9, null);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(reveal_action = ctx[11].call(null, div0)),
          listen(div0, "click", ctx[15]),
          action_destroyer(event_action = ctx[12].call(null, div1)),
          action_destroyer(close_action = ctx[10].call(null, div3)),
          listen(div3, "click", ctx[16]),
          action_destroyer(left_action = ctx[13].call(null, div5)),
          listen(div5, "click", ctx[17]),
          action_destroyer(right_action = ctx[14].call(null, div7)),
          listen(div7, "click", ctx[18])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 64)
        set_data(t4, ctx2[6]);
      if (ctx2[0]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_12(ctx2);
          if_block0.c();
          if_block0.m(div6, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (ctx2[4] && ctx2[5] && ctx2[5].length) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & 48) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block12(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div9, t8);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const flags_changes = {};
      if (dirty & 8)
        flags_changes.events = ctx2[3].events;
      if (dirty & 128)
        flags_changes.categories = ctx2[7];
      if (dirty & 4)
        flags_changes.date = ctx2[2];
      if (dirty & 2)
        flags_changes.calendar = ctx2[1];
      flags.$set(flags_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(flags.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(flags.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div9);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      destroy_component(flags);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let currentDate;
  let date;
  let day;
  let dayNumber;
  let moons;
  let categories;
  let { displayDayNumber } = $$props;
  const calendarStore = getContext("calendar");
  let calendar;
  calendarStore.subscribe((c) => {
    $$invalidate(1, calendar = c);
  });
  let displayMoons;
  const moonStore = getContext("displayMoons");
  moonStore.subscribe((v) => $$invalidate(4, displayMoons = v));
  calendar.on("day-update", () => {
    $$invalidate(2, date = calendar.viewing);
    $$invalidate(6, currentDate = calendar.viewedDate);
    $$invalidate(3, day = calendar.getDayForDate(date));
    $$invalidate(5, moons = day.moons);
  });
  const dispatch2 = createEventDispatcher();
  const close = (node) => {
    new import_obsidian21.ExtraButtonComponent(node).setIcon("cross").setTooltip("Close");
  };
  const reveal = (node) => {
    new import_obsidian21.ExtraButtonComponent(node).setIcon("fantasy-calendar-reveal").setTooltip("Show on Calendar").onClick(() => {
      $$invalidate(1, calendar.displayed.year = calendar.viewing.year, calendar);
      calendar.setCurrentMonth(calendar.viewing.month);
    });
  };
  const event = (node) => {
    new import_obsidian21.ExtraButtonComponent(node).setIcon("plus-with-circle").setTooltip("New Event").onClick(() => dispatch2("event", date));
  };
  const left2 = (node) => {
    new import_obsidian21.ExtraButtonComponent(node).setIcon("left-arrow");
  };
  const right2 = (node) => {
    new import_obsidian21.ExtraButtonComponent(node).setIcon("right-arrow");
  };
  const click_handler = () => dispatch2("reveal");
  const click_handler_1 = () => dispatch2("close");
  const click_handler_2 = () => calendar.goToPreviousDay();
  const click_handler_3 = () => calendar.goToNextDay();
  function event_click_handler(event2) {
    bubble.call(this, $$self, event2);
  }
  function event_mouseover_handler(event2) {
    bubble.call(this, $$self, event2);
  }
  function event_context_handler(event2) {
    bubble.call(this, $$self, event2);
  }
  $$self.$$set = ($$props2) => {
    if ("displayDayNumber" in $$props2)
      $$invalidate(0, displayDayNumber = $$props2.displayDayNumber);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(6, currentDate = calendar.viewedDate);
    }
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(2, date = calendar.viewing);
    }
    if ($$self.$$.dirty & 6) {
      $:
        $$invalidate(3, day = calendar.getDayForDate(date));
    }
    if ($$self.$$.dirty & 6) {
      $:
        $$invalidate(8, dayNumber = calendar.dayNumberForDate(date));
    }
    if ($$self.$$.dirty & 8) {
      $:
        $$invalidate(5, moons = day.moons);
    }
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(7, categories = calendar.categories);
    }
  };
  return [
    displayDayNumber,
    calendar,
    date,
    day,
    displayMoons,
    moons,
    currentDate,
    categories,
    dayNumber,
    dispatch2,
    close,
    reveal,
    event,
    left2,
    right2,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    event_click_handler,
    event_mouseover_handler,
    event_context_handler
  ];
}
var DayView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment17, safe_not_equal, { displayDayNumber: 0 }, add_css14);
  }
};
var DayView_default = DayView;

// src/view/ui/Dot.svelte
function add_css15(target) {
  append_styles(target, "svelte-1gou5hh", ".dot.svelte-1gou5hh{display:inline-block;min-height:6px;min-width:6px;height:6px;width:6px;margin:0 2px}.active.svelte-1gou5hh{color:var(--text-on-accent)}");
}
function create_fragment18(ctx) {
  let svg;
  let circle;
  let circle_stroke_value;
  let circle_fill_value;
  return {
    c() {
      svg = svg_element("svg");
      circle = svg_element("circle");
      attr(circle, "stroke", circle_stroke_value = ctx[2] ?? "currentColor");
      attr(circle, "fill", circle_fill_value = ctx[2] ?? "currentColor");
      attr(circle, "cx", "3");
      attr(circle, "cy", "3");
      attr(circle, "r", "2");
      attr(svg, "class", "dot svelte-1gou5hh");
      attr(svg, "viewBox", "0 0 6 6");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      toggle_class(svg, "filled", ctx[0]);
      toggle_class(svg, "active", ctx[1]);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, circle);
    },
    p(ctx2, [dirty]) {
      if (dirty & 4 && circle_stroke_value !== (circle_stroke_value = ctx2[2] ?? "currentColor")) {
        attr(circle, "stroke", circle_stroke_value);
      }
      if (dirty & 4 && circle_fill_value !== (circle_fill_value = ctx2[2] ?? "currentColor")) {
        attr(circle, "fill", circle_fill_value);
      }
      if (dirty & 1) {
        toggle_class(svg, "filled", ctx2[0]);
      }
      if (dirty & 2) {
        toggle_class(svg, "active", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  let { isFilled = true } = $$props;
  let { isActive = false } = $$props;
  let { color } = $$props;
  $$self.$$set = ($$props2) => {
    if ("isFilled" in $$props2)
      $$invalidate(0, isFilled = $$props2.isFilled);
    if ("isActive" in $$props2)
      $$invalidate(1, isActive = $$props2.isActive);
    if ("color" in $$props2)
      $$invalidate(2, color = $$props2.color);
  };
  return [isFilled, isActive, color];
}
var Dot2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment18, safe_not_equal, { isFilled: 0, isActive: 1, color: 2 }, add_css15);
  }
};
var Dot_default2 = Dot2;

// src/view/ui/Dots.svelte
function add_css16(target) {
  append_styles(target, "svelte-1w3ytba", ".dots-container.svelte-1w3ytba{width:100%}.dot-container.svelte-1w3ytba{display:flex;flex-flow:row nowrap;width:fit-content;margin:auto;line-height:6px;min-height:6px}.centered.svelte-1w3ytba{justify-content:center;align-items:center}.overflow.svelte-1w3ytba{color:var(--text-muted);font-size:xx-small;display:flex;justify-content:flex-end;width:100%;line-height:1.25}");
}
function create_key_block2(ctx) {
  let div;
  let addEvents_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "dot-container centered svelte-1w3ytba");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(addEvents_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block13(ctx) {
  let span;
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text("+");
      t1 = text(ctx[1]);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t1, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment19(ctx) {
  let div1;
  let previous_key = ctx[0];
  let t;
  let div0;
  let key_block = create_key_block2(ctx);
  let if_block = ctx[1] > 0 && create_if_block13(ctx);
  return {
    c() {
      div1 = element("div");
      key_block.c();
      t = space();
      div0 = element("div");
      if (if_block)
        if_block.c();
      attr(div0, "class", "overflow svelte-1w3ytba");
      attr(div1, "class", "dots-container svelte-1w3ytba");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      key_block.m(div1, null);
      append(div1, t);
      append(div1, div0);
      if (if_block)
        if_block.m(div0, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block2(ctx2);
        key_block.c();
        key_block.m(div1, t);
      }
      if (ctx2[1] > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block13(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      key_block.d(detaching);
      if (if_block)
        if_block.d();
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  let { events = [] } = $$props;
  let { categories } = $$props;
  let { calendar } = $$props;
  let overflow = 0;
  let dotContainer;
  let previousWidth = 0;
  const addEvents = (dots) => {
    dotContainer = dots;
    if (events.length) {
      const width = dots.parentElement?.getBoundingClientRect()?.width;
      if (!width || Math.floor(width) == Math.floor(previousWidth))
        return;
      previousWidth = width;
      let remaining = width;
      dots.empty();
      $$invalidate(1, overflow = 0);
      for (const event of events) {
        new Dot_default2({
          target: dots,
          props: { color: color(event) }
        });
        remaining = width - dots.getBoundingClientRect().width;
        if (remaining < 0) {
          dots.lastElementChild.detach();
          $$invalidate(1, overflow = events.length - events.indexOf(event));
          break;
        } else if (remaining == 0) {
          $$invalidate(1, overflow = events.length - events.indexOf(event) - 1);
          break;
        }
      }
    }
  };
  calendar.on("view-resized", () => {
    if (!dotContainer)
      return;
    addEvents(dotContainer);
  });
  const color = (event) => {
    return categories.find((c) => c.id == event.category)?.color;
  };
  $$self.$$set = ($$props2) => {
    if ("events" in $$props2)
      $$invalidate(0, events = $$props2.events);
    if ("categories" in $$props2)
      $$invalidate(3, categories = $$props2.categories);
    if ("calendar" in $$props2)
      $$invalidate(4, calendar = $$props2.calendar);
  };
  return [events, overflow, addEvents, categories, calendar];
}
var Dots = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment19, safe_not_equal, { events: 0, categories: 3, calendar: 4 }, add_css16);
  }
};
var Dots_default = Dots;

// src/view/ui/Day.svelte
function add_css17(target) {
  append_styles(target, "svelte-3pptg2", ".day.svelte-3pptg2{background-color:transparent;border:2px solid transparent;border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:2px;position:relative;text-align:center;vertical-align:baseline;overflow:visible;display:flex;flex-flow:column nowrap}.active.svelte-3pptg2{background-color:var(--background-secondary)}.viewing.svelte-3pptg2{border:2px solid var(--background-modifier-border)}.adjacent-month.svelte-3pptg2{opacity:0.25}");
}
function get_each_context9(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i][0];
  child_ctx[21] = list[i][1];
  return child_ctx;
}
function create_else_block8(ctx) {
  let dots;
  let current;
  dots = new Dots_default({
    props: {
      events: ctx[4],
      categories: ctx[9],
      calendar: ctx[0].calendar
    }
  });
  return {
    c() {
      create_component(dots.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dots, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dots_changes = {};
      if (dirty & 16)
        dots_changes.events = ctx2[4];
      if (dirty & 512)
        dots_changes.categories = ctx2[9];
      if (dirty & 1)
        dots_changes.calendar = ctx2[0].calendar;
      dots.$set(dots_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dots.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dots.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dots, detaching);
    }
  };
}
function create_if_block14(ctx) {
  let t;
  let flags;
  let current;
  let if_block = ctx[5] && ctx[10] && ctx[10].length && create_if_block_13(ctx);
  flags = new Flags_default({
    props: {
      events: ctx[4],
      categories: ctx[9],
      date: ctx[8],
      calendar: ctx[0].calendar
    }
  });
  flags.$on("event-click", ctx[12]);
  flags.$on("event-mouseover", ctx[13]);
  flags.$on("event-context", ctx[14]);
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
      create_component(flags.$$.fragment);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
      mount_component(flags, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[5] && ctx2[10] && ctx2[10].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1056) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_13(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const flags_changes = {};
      if (dirty & 16)
        flags_changes.events = ctx2[4];
      if (dirty & 512)
        flags_changes.categories = ctx2[9];
      if (dirty & 256)
        flags_changes.date = ctx2[8];
      if (dirty & 1)
        flags_changes.calendar = ctx2[0].calendar;
      flags.$set(flags_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(flags.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(flags.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t);
      destroy_component(flags, detaching);
    }
  };
}
function create_if_block_13(ctx) {
  let div;
  let current;
  let each_value = ctx[10];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "moon-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 1024) {
        each_value = ctx2[10];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context9(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block9(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block9(ctx) {
  let moon;
  let current;
  moon = new Moon_default({
    props: {
      moon: ctx[20],
      phase: ctx[21]
    }
  });
  return {
    c() {
      create_component(moon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(moon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const moon_changes = {};
      if (dirty & 1024)
        moon_changes.moon = ctx2[20];
      if (dirty & 1024)
        moon_changes.phase = ctx2[21];
      moon.$set(moon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(moon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(moon, detaching);
    }
  };
}
function create_fragment20(ctx) {
  let div;
  let span;
  let t0_value = ctx[0].number + "";
  let t0;
  let t1;
  let current_block_type_index;
  let if_block;
  let div_class_value;
  let div_aria_label_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block14, create_else_block8];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[2])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if_block.c();
      attr(div, "class", div_class_value = "" + (null_to_empty(ctx[1] ? "adjacent-month fantasy-adjacent-month" : "") + " svelte-3pptg2"));
      attr(div, "aria-label", div_aria_label_value = !ctx[2] && ctx[4].length ? `${ctx[4].length} event${ctx[4].length == 1 ? "" : "s"}` : void 0);
      toggle_class(div, "day", true);
      toggle_class(div, "fantasy-day", true);
      toggle_class(div, "active", ctx[7] && !ctx[1]);
      toggle_class(div, "viewing", ctx[3] && ctx[6] && !ctx[1]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(span, t0);
      append(div, t1);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div, "click", ctx[15]),
          listen(div, "dblclick", ctx[16]),
          listen(div, "contextmenu", ctx[17])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & 1) && t0_value !== (t0_value = ctx2[0].number + ""))
        set_data(t0, t0_value);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & 2 && div_class_value !== (div_class_value = "" + (null_to_empty(ctx2[1] ? "adjacent-month fantasy-adjacent-month" : "") + " svelte-3pptg2"))) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty & 20 && div_aria_label_value !== (div_aria_label_value = !ctx2[2] && ctx2[4].length ? `${ctx2[4].length} event${ctx2[4].length == 1 ? "" : "s"}` : void 0)) {
        attr(div, "aria-label", div_aria_label_value);
      }
      if (dirty & 2) {
        toggle_class(div, "day", true);
      }
      if (dirty & 2) {
        toggle_class(div, "fantasy-day", true);
      }
      if (dirty & 130) {
        toggle_class(div, "active", ctx2[7] && !ctx2[1]);
      }
      if (dirty & 74) {
        toggle_class(div, "viewing", ctx2[3] && ctx2[6] && !ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  let moons;
  let categories;
  let date;
  let today;
  let displaying;
  const dispatch2 = createEventDispatcher();
  let { day } = $$props;
  let { adjacent } = $$props;
  let { fullView } = $$props;
  let events = [];
  let dayView;
  const dayViewStore = getContext("dayView");
  dayViewStore.subscribe((v) => $$invalidate(3, dayView = v));
  let displayMoons;
  const moonStore = getContext("displayMoons");
  moonStore.subscribe((v) => $$invalidate(5, displayMoons = v));
  day.calendar.on("month-update", () => {
    $$invalidate(7, today = day.isCurrentDay);
    $$invalidate(6, displaying = day.isDisplaying);
    $$invalidate(4, events = day.events);
  });
  day.calendar.on("day-update", () => {
    $$invalidate(7, today = day.isCurrentDay);
    $$invalidate(6, displaying = day.isDisplaying);
  });
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = () => dispatch2("day-click", day);
  const dblclick_handler = () => dispatch2("day-doubleclick", day);
  const contextmenu_handler = (evt) => dispatch2("day-context-menu", { day, evt });
  $$self.$$set = ($$props2) => {
    if ("day" in $$props2)
      $$invalidate(0, day = $$props2.day);
    if ("adjacent" in $$props2)
      $$invalidate(1, adjacent = $$props2.adjacent);
    if ("fullView" in $$props2)
      $$invalidate(2, fullView = $$props2.fullView);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 3) {
      $: {
        if (!adjacent) {
          $$invalidate(4, events = day.events);
        }
      }
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(10, moons = day.moons);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(9, categories = day.calendar.categories);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(8, date = day.date);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(7, today = day.isCurrentDay);
    }
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(6, displaying = day.isDisplaying);
    }
    if ($$self.$$.dirty & 8) {
      $:
        $$invalidate(3, dayView);
    }
  };
  return [
    day,
    adjacent,
    fullView,
    dayView,
    events,
    displayMoons,
    displaying,
    today,
    date,
    categories,
    moons,
    dispatch2,
    event_click_handler,
    event_mouseover_handler,
    event_context_handler,
    click_handler,
    dblclick_handler,
    contextmenu_handler
  ];
}
var Day = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment20, safe_not_equal, { day: 0, adjacent: 1, fullView: 2 }, add_css17);
  }
};
var Day_default = Day;

// src/view/ui/Month.svelte
function add_css18(target) {
  append_styles(target, "svelte-1xujcmn", ".fantasy-month.svelte-1xujcmn{display:grid;grid-template-columns:repeat(\r\n            var(--calendar-columns),\r\n            var(--column-widths)\r\n        );grid-auto-rows:var(--calendar-rows)}.full-view.svelte-1xujcmn{height:100%;margin-bottom:0.5rem}.month.svelte-1xujcmn{border-radius:1rem;padding:0.25rem}.month-name.svelte-1xujcmn{margin:0}.month.svelte-1xujcmn .fantasy-day.day{padding:0px}");
}
function get_each_context10(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_if_block_2(ctx) {
  let h3;
  let t_value = ctx[1].name + "";
  let t;
  return {
    c() {
      h3 = element("h3");
      t = text(t_value);
      attr(h3, "class", "month-name svelte-1xujcmn");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      append(h3, t);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t_value !== (t_value = ctx2[1].name + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(h3);
    }
  };
}
function create_else_block_1(ctx) {
  let div;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block_14(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      day: ctx[16],
      adjacent: true,
      fullView: ctx[3]
    }
  });
  return {
    c() {
      create_component(day.$$.fragment);
    },
    m(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const day_changes = {};
      if (dirty & 256)
        day_changes.day = ctx2[16];
      if (dirty & 8)
        day_changes.fullView = ctx2[3];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(day, detaching);
    }
  };
}
function create_each_block_2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_14, create_else_block_1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[5] && ctx2[16] != null)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block_12(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      day: ctx[16],
      adjacent: false,
      fullView: ctx[3]
    }
  });
  day.$on("day-click", ctx[10]);
  day.$on("day-doubleclick", ctx[11]);
  day.$on("day-context-menu", ctx[12]);
  day.$on("event-click", ctx[13]);
  day.$on("event-mouseover", ctx[14]);
  day.$on("event-context", ctx[15]);
  return {
    c() {
      create_component(day.$$.fragment);
    },
    m(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const day_changes = {};
      if (dirty & 128)
        day_changes.day = ctx2[16];
      if (dirty & 8)
        day_changes.fullView = ctx2[3];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(day, detaching);
    }
  };
}
function create_else_block9(ctx) {
  let div;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block15(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      day: ctx[16],
      adjacent: true,
      fullView: ctx[3]
    }
  });
  return {
    c() {
      create_component(day.$$.fragment);
    },
    m(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const day_changes = {};
      if (dirty & 64)
        day_changes.day = ctx2[16];
      if (dirty & 8)
        day_changes.fullView = ctx2[3];
      day.$set(day_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(day, detaching);
    }
  };
}
function create_each_block10(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block15, create_else_block9];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[5])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_key_block3(ctx) {
  let div;
  let t0;
  let t1;
  let current;
  let each_value_2 = ctx[8];
  let each_blocks_2 = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  const out = (i) => transition_out(each_blocks_2[i], 1, 1, () => {
    each_blocks_2[i] = null;
  });
  let each_value_1 = ctx[7];
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  const out_1 = (i) => transition_out(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });
  let each_value = ctx[6];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block10(get_each_context10(ctx, each_value, i));
  }
  const out_2 = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }
      t0 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "fantasy-month svelte-1xujcmn");
      set_style(div, "--calendar-columns", ctx[2]);
      set_style(div, "--calendar-rows", ctx[3] ? `${1 / ctx[4] * 100}%` : "1fr");
      toggle_class(div, "full-view", ctx[3]);
      toggle_class(div, "year-view", ctx[0]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].m(div, null);
      }
      append(div, t0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(div, null);
      }
      append(div, t1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 296) {
        each_value_2 = ctx2[8];
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks_2[i]) {
            each_blocks_2[i].p(child_ctx, dirty);
            transition_in(each_blocks_2[i], 1);
          } else {
            each_blocks_2[i] = create_each_block_2(child_ctx);
            each_blocks_2[i].c();
            transition_in(each_blocks_2[i], 1);
            each_blocks_2[i].m(div, t0);
          }
        }
        group_outros();
        for (i = each_value_2.length; i < each_blocks_2.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty & 136) {
        each_value_1 = ctx2[7];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            transition_in(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_12(child_ctx);
            each_blocks_1[i].c();
            transition_in(each_blocks_1[i], 1);
            each_blocks_1[i].m(div, t1);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
          out_1(i);
        }
        check_outros();
      }
      if (dirty & 104) {
        each_value = ctx2[6];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context10(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block10(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out_2(i);
        }
        check_outros();
      }
      if (!current || dirty & 4) {
        set_style(div, "--calendar-columns", ctx2[2]);
      }
      if (!current || dirty & 24) {
        set_style(div, "--calendar-rows", ctx2[3] ? `${1 / ctx2[4] * 100}%` : "1fr");
      }
      if (dirty & 8) {
        toggle_class(div, "full-view", ctx2[3]);
      }
      if (dirty & 1) {
        toggle_class(div, "year-view", ctx2[0]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks_2[i]);
      }
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks_2 = each_blocks_2.filter(Boolean);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        transition_out(each_blocks_2[i]);
      }
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks_2, detaching);
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment21(ctx) {
  let div;
  let t;
  let previous_key = ctx[7];
  let div_data_id_value;
  let div_id_value;
  let current;
  let if_block = ctx[0] && create_if_block_2(ctx);
  let key_block = create_key_block3(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t = space();
      key_block.c();
      attr(div, "class", "month svelte-1xujcmn");
      attr(div, "data-id", div_data_id_value = ctx[1].id);
      attr(div, "id", div_id_value = `MONTH-${ctx[1].id}-${ctx[1].year}`);
      toggle_class(div, "full-view", ctx[3]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append(div, t);
      key_block.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          if_block.m(div, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & 128 && safe_not_equal(previous_key, previous_key = ctx2[7])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block3(ctx2);
        key_block.c();
        transition_in(key_block);
        key_block.m(div, null);
      } else {
        key_block.p(ctx2, dirty);
      }
      if (!current || dirty & 2 && div_data_id_value !== (div_data_id_value = ctx2[1].id)) {
        attr(div, "data-id", div_data_id_value);
      }
      if (!current || dirty & 2 && div_id_value !== (div_id_value = `MONTH-${ctx2[1].id}-${ctx2[1].year}`)) {
        attr(div, "id", div_id_value);
      }
      if (dirty & 8) {
        toggle_class(div, "full-view", ctx2[3]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      key_block.d(detaching);
    }
  };
}
function instance21($$self, $$props, $$invalidate) {
  let padded;
  let previous;
  let current;
  let next2;
  let { yearView = false } = $$props;
  let { month } = $$props;
  let { columns } = $$props;
  let { fullView = false } = $$props;
  let { weeks } = $$props;
  let { showPad = true } = $$props;
  function day_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("yearView" in $$props2)
      $$invalidate(0, yearView = $$props2.yearView);
    if ("month" in $$props2)
      $$invalidate(1, month = $$props2.month);
    if ("columns" in $$props2)
      $$invalidate(2, columns = $$props2.columns);
    if ("fullView" in $$props2)
      $$invalidate(3, fullView = $$props2.fullView);
    if ("weeks" in $$props2)
      $$invalidate(4, weeks = $$props2.weeks);
    if ("showPad" in $$props2)
      $$invalidate(5, showPad = $$props2.showPad);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(9, padded = month.calendar.getPaddedDaysForMonth(month));
    }
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(8, previous = padded.previous);
    }
    if ($$self.$$.dirty & 2) {
      $:
        $$invalidate(7, current = month.days);
    }
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(6, next2 = padded.next);
    }
  };
  return [
    yearView,
    month,
    columns,
    fullView,
    weeks,
    showPad,
    next2,
    current,
    previous,
    padded,
    day_click_handler,
    day_doubleclick_handler,
    day_context_menu_handler,
    event_click_handler,
    event_mouseover_handler,
    event_context_handler
  ];
}
var Month2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment21, safe_not_equal, {
      yearView: 0,
      month: 1,
      columns: 2,
      fullView: 3,
      weeks: 4,
      showPad: 5
    }, add_css18);
  }
};
var Month_default2 = Month2;

// src/view/ui/Nav.svelte
var import_obsidian22 = __toModule(require("obsidian"));
function add_css19(target) {
  append_styles(target, "svelte-131055d", ".fantasy-nav.nav.nav.svelte-131055d{padding:10px 0px;margin:0;display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:stretch}.container.svelte-131055d{display:flex;align-items:center}.fantasy-title.svelte-131055d{margin:0;line-height:1.25}.fantasy-right-nav.svelte-131055d{display:flex;justify-content:center;align-items:flex-start}.calendar-clickable.svelte-131055d{align-items:center;cursor:pointer;display:flex;justify-content:center}.title-container.svelte-131055d{display:flex;flex-flow:column nowrap;align-items:flex-start}");
}
function create_fragment22(ctx) {
  let div7;
  let div0;
  let h3;
  let span0;
  let t0;
  let t1;
  let span1;
  let t2;
  let t3;
  let div6;
  let div5;
  let div1;
  let left_action;
  let t4;
  let div2;
  let span2;
  let div2_aria_label_value;
  let t6;
  let div3;
  let right_action;
  let t7;
  let div4;
  let settings_action;
  let mounted;
  let dispose;
  return {
    c() {
      div7 = element("div");
      div0 = element("div");
      h3 = element("h3");
      span0 = element("span");
      t0 = text(ctx[0]);
      t1 = space();
      span1 = element("span");
      t2 = text(ctx[1]);
      t3 = space();
      div6 = element("div");
      div5 = element("div");
      div1 = element("div");
      t4 = space();
      div2 = element("div");
      span2 = element("span");
      span2.textContent = "Today";
      t6 = space();
      div3 = element("div");
      t7 = space();
      div4 = element("div");
      attr(span0, "class", "fantasy-month month");
      attr(span1, "class", "fantasy-year year");
      attr(h3, "class", "fantasy-title title svelte-131055d");
      attr(div0, "class", "title-container svelte-131055d");
      attr(div1, "class", "arrow calendar-clickable svelte-131055d");
      attr(div1, "aria-label", "Previous Month");
      attr(div2, "class", "reset-button calendar-clickable svelte-131055d");
      attr(div2, "aria-label", div2_aria_label_value = "Today is " + ctx[2]);
      attr(div3, "class", "arrow right calendar-clickable svelte-131055d");
      attr(div3, "aria-label", "Next Month");
      attr(div4, "class", "calendar-clickable svelte-131055d");
      attr(div4, "aria-label", "Calendar Settings");
      attr(div5, "class", "container svelte-131055d");
      attr(div6, "class", "right-nav fantasy-right-nav svelte-131055d");
      attr(div7, "class", "fantasy-nav nav svelte-131055d");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, div0);
      append(div0, h3);
      append(h3, span0);
      append(span0, t0);
      append(h3, t1);
      append(h3, span1);
      append(span1, t2);
      append(div7, t3);
      append(div7, div6);
      append(div6, div5);
      append(div5, div1);
      append(div5, t4);
      append(div5, div2);
      append(div2, span2);
      append(div5, t6);
      append(div5, div3);
      append(div5, t7);
      append(div5, div4);
      if (!mounted) {
        dispose = [
          action_destroyer(left_action = ctx[4].call(null, div1)),
          listen(div1, "click", ctx[7]),
          listen(div2, "click", ctx[8]),
          action_destroyer(right_action = ctx[5].call(null, div3)),
          listen(div3, "click", ctx[9]),
          action_destroyer(settings_action = ctx[6].call(null, div4)),
          listen(div4, "click", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t0, ctx2[0]);
      if (dirty & 2)
        set_data(t2, ctx2[1]);
      if (dirty & 4 && div2_aria_label_value !== (div2_aria_label_value = "Today is " + ctx2[2])) {
        attr(div2, "aria-label", div2_aria_label_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div7);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { month } = $$props;
  let { year } = $$props;
  let { current } = $$props;
  const left2 = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setIcon("left-arrow");
  };
  const right2 = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setIcon("right-arrow");
  };
  const settings = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setIcon("gear");
  };
  const click_handler = () => dispatch2("previous");
  const click_handler_1 = () => dispatch2("reset");
  const click_handler_2 = (evt) => dispatch2("next");
  const click_handler_3 = (evt) => dispatch2("settings", evt);
  $$self.$$set = ($$props2) => {
    if ("month" in $$props2)
      $$invalidate(0, month = $$props2.month);
    if ("year" in $$props2)
      $$invalidate(1, year = $$props2.year);
    if ("current" in $$props2)
      $$invalidate(2, current = $$props2.current);
  };
  return [
    month,
    year,
    current,
    dispatch2,
    left2,
    right2,
    settings,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var Nav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment22, safe_not_equal, { month: 0, year: 1, current: 2 }, add_css19);
  }
};
var Nav_default = Nav;

// src/view/ui/YearNav.svelte
var import_obsidian23 = __toModule(require("obsidian"));
function add_css20(target) {
  append_styles(target, "svelte-i3pajt", "#calendar-container .fantasy-nav.nav.nav.svelte-i3pajt{padding:0;margin:0;display:flex;flex-flow:row nowrap;justify-content:space-between;align-items:center;position:sticky;top:0;z-index:2}.fantasy-year-nav.svelte-i3pajt{display:flex;align-items:center;margin-right:auto}.container.svelte-i3pajt{display:flex;align-items:center}.fantasy-title.svelte-i3pajt{margin:0}.fantasy-right-nav.svelte-i3pajt{display:flex;justify-content:center;align-items:flex-start}.calendar-clickable.svelte-i3pajt{align-items:center;cursor:pointer;display:flex;justify-content:center}");
}
function create_if_block_15(ctx) {
  let div;
  let left_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "arrow calendar-clickable svelte-i3pajt");
      attr(div, "aria-label", "Previous Year");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(left_action = ctx[4].call(null, div)),
          listen(div, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block16(ctx) {
  let div;
  let right_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "arrow right calendar-clickable svelte-i3pajt");
      attr(div, "aria-label", "Next Year");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(right_action = ctx[5].call(null, div)),
          listen(div, "click", ctx[9])
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment23(ctx) {
  let div5;
  let div0;
  let h2;
  let span0;
  let t0;
  let t1;
  let div4;
  let div3;
  let t2;
  let div1;
  let span1;
  let div1_aria_label_value;
  let t4;
  let t5;
  let div2;
  let settings_action;
  let mounted;
  let dispose;
  let if_block0 = ctx[1] && create_if_block_15(ctx);
  let if_block1 = ctx[1] && create_if_block16(ctx);
  return {
    c() {
      div5 = element("div");
      div0 = element("div");
      h2 = element("h2");
      span0 = element("span");
      t0 = text(ctx[0]);
      t1 = space();
      div4 = element("div");
      div3 = element("div");
      if (if_block0)
        if_block0.c();
      t2 = space();
      div1 = element("div");
      span1 = element("span");
      span1.textContent = "Today";
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      div2 = element("div");
      attr(span0, "class", "fantasy-year");
      attr(h2, "class", "fantasy-title svelte-i3pajt");
      attr(div0, "class", "fantasy-year-nav svelte-i3pajt");
      attr(div1, "class", "reset-button calendar-clickable svelte-i3pajt");
      attr(div1, "aria-label", div1_aria_label_value = "Today is " + ctx[2]);
      attr(div2, "class", "calendar-clickable svelte-i3pajt");
      attr(div2, "aria-label", "Calendar Settings");
      attr(div3, "class", "container svelte-i3pajt");
      attr(div4, "class", "right-nav fantasy-right-nav svelte-i3pajt");
      attr(div5, "class", "fantasy-nav nav svelte-i3pajt");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div0);
      append(div0, h2);
      append(h2, span0);
      append(span0, t0);
      append(div5, t1);
      append(div5, div4);
      append(div4, div3);
      if (if_block0)
        if_block0.m(div3, null);
      append(div3, t2);
      append(div3, div1);
      append(div1, span1);
      append(div3, t4);
      if (if_block1)
        if_block1.m(div3, null);
      append(div3, t5);
      append(div3, div2);
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[8]),
          action_destroyer(settings_action = ctx[6].call(null, div2)),
          listen(div2, "click", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t0, ctx2[0]);
      if (ctx2[1]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_15(ctx2);
          if_block0.c();
          if_block0.m(div3, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & 4 && div1_aria_label_value !== (div1_aria_label_value = "Today is " + ctx2[2])) {
        attr(div1, "aria-label", div1_aria_label_value);
      }
      if (ctx2[1]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block16(ctx2);
          if_block1.c();
          if_block1.m(div3, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div5);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance23($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { year } = $$props;
  let { arrows = false } = $$props;
  let { current } = $$props;
  const left2 = (node) => {
    new import_obsidian23.ExtraButtonComponent(node).setIcon("left-arrow");
  };
  const right2 = (node) => {
    new import_obsidian23.ExtraButtonComponent(node).setIcon("right-arrow");
  };
  const settings = (node) => {
    new import_obsidian23.ExtraButtonComponent(node).setIcon("gear");
  };
  const click_handler = () => dispatch2("previous");
  const click_handler_1 = () => dispatch2("reset");
  const click_handler_2 = (evt) => dispatch2("next");
  const click_handler_3 = (evt) => dispatch2("settings", evt);
  $$self.$$set = ($$props2) => {
    if ("year" in $$props2)
      $$invalidate(0, year = $$props2.year);
    if ("arrows" in $$props2)
      $$invalidate(1, arrows = $$props2.arrows);
    if ("current" in $$props2)
      $$invalidate(2, current = $$props2.current);
  };
  return [
    year,
    arrows,
    current,
    dispatch2,
    left2,
    right2,
    settings,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var YearNav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance23, create_fragment23, safe_not_equal, { year: 0, arrows: 1, current: 2 }, add_css20);
  }
};
var YearNav_default = YearNav;

// src/view/ui/YearView.svelte
function add_css21(target) {
  append_styles(target, "svelte-15hvixf", ".year-view.svelte-15hvixf{height:100%;position:relative;display:flex;flex-direction:column}.year.svelte-15hvixf{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;overflow:auto;flex:1}.year.svelte-15hvixf:not(.full-view){grid-template-columns:1fr}");
}
function create_fragment24(ctx) {
  let div1;
  let yearnav;
  let t;
  let div0;
  let current;
  let mounted;
  let dispose;
  yearnav = new YearNav_default({
    props: {
      year: ctx[3],
      current: ctx[0]
    }
  });
  yearnav.$on("next", ctx[9]);
  yearnav.$on("previous", ctx[10]);
  yearnav.$on("reset", ctx[11]);
  yearnav.$on("settings", ctx[12]);
  return {
    c() {
      div1 = element("div");
      create_component(yearnav.$$.fragment);
      t = space();
      div0 = element("div");
      attr(div0, "class", "year svelte-15hvixf");
      toggle_class(div0, "full-view", ctx[1]);
      attr(div1, "class", "year-view svelte-15hvixf");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(yearnav, div1, null);
      append(div1, t);
      append(div1, div0);
      ctx[13](div0);
      current = true;
      if (!mounted) {
        dispose = listen(div0, "scroll", ctx[5], { once: true });
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const yearnav_changes = {};
      if (dirty & 8)
        yearnav_changes.year = ctx2[3];
      if (dirty & 1)
        yearnav_changes.current = ctx2[0];
      yearnav.$set(yearnav_changes);
      if (dirty & 2) {
        toggle_class(div0, "full-view", ctx2[1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(yearnav.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearnav.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(yearnav);
      ctx[13](null);
      mounted = false;
      dispose();
    }
  };
}
function instance24($$self, $$props, $$invalidate) {
  let yearDisplay;
  const dispatch2 = createEventDispatcher();
  let { current } = $$props;
  let { year } = $$props;
  let { columns } = $$props;
  let { fullView } = $$props;
  let yearContainer;
  let firstMonth;
  let lastMonth;
  const calendarStore = getContext("calendar");
  let calendar;
  calendarStore.subscribe((c) => {
    $$invalidate(8, calendar = c);
  });
  const trackedMonths = [];
  const dayViewStore = getContext("dayView");
  const moonStore = getContext("displayMoons");
  const appendObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== appendObserver)
      return;
    if (!entries.length)
      return;
    if (!entries[0].isIntersecting)
      return;
    appendObserver.disconnect();
    if (!calendar.canGoToNextYear(lastMonth.year) && lastMonth.number === calendar.data.months.length - 1)
      return;
    appendMonth();
    destroy(trackedMonths.shift());
    resetAppend();
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0.25
  });
  const resetAppend = () => {
    const el = yearContainer.children[yearContainer.children.length - 2];
    if (!el)
      return;
    appendObserver.observe(el);
  };
  const appendHeaderObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== appendHeaderObserver)
      return;
    if (!entries && !entries.length)
      return;
    if (entries[0].isIntersecting)
      return;
    const yearRect = yearContainer.getBoundingClientRect();
    if (entries[0].boundingClientRect.top < yearRect.top) {
      $$invalidate(6, year += 1);
      prependHeaderObserver.observe(entries[0].target);
      appendHeaderObserver.disconnect();
    }
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0
  });
  const appendMonth = (reset2 = true) => {
    if (!calendar.canGoToNextYear(lastMonth.year) && lastMonth.number === calendar.data.months.length - 1)
      return;
    lastMonth = calendar.getMonth(lastMonth.number + 1, lastMonth.year);
    if (lastMonth.number === 0 && !(yearContainer.lastElementChild instanceof HTMLHeadingElement)) {
      const header = yearContainer.createEl("h2", {
        text: calendar.getNameForYear(lastMonth.year),
        cls: "fantasy-title"
      });
      trackedMonths.push(header);
      appendHeaderObserver.disconnect();
      appendHeaderObserver.observe(header);
    }
    trackedMonths.push(createMonth(lastMonth, false));
    if (reset2) {
      firstMonth = calendar.getMonth((firstMonth?.number ?? 0) + 1, firstMonth?.year ?? 1);
    }
    resetPrepend();
  };
  const prependObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== prependObserver)
      return;
    if (!entries.length)
      return;
    if (!entries[0].isIntersecting)
      return;
    prependObserver.disconnect();
    if (!firstMonth)
      return;
    prependMonth();
    destroy(trackedMonths.pop());
    resetPrepend();
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0.25
  });
  const resetPrepend = () => {
    const el = yearContainer.children[1];
    if (!el)
      return;
    prependObserver.observe(el);
  };
  const prependHeaderObserver = new IntersectionObserver((entries, observer) => {
    if (observer !== prependHeaderObserver)
      return;
    if (!entries && !entries.length)
      return;
    if (entries[0].isIntersecting) {
      $$invalidate(6, year -= 1);
      appendHeaderObserver.observe(entries[0].target);
      prependHeaderObserver.disconnect();
    }
  }, {
    root: yearContainer,
    rootMargin: "0px",
    threshold: 0
  });
  const prependMonth = (reset2 = true) => {
    firstMonth = calendar.getMonth(firstMonth.number - 1, firstMonth.year);
    if (!firstMonth)
      return;
    trackedMonths.unshift(createMonth(firstMonth, true));
    if (firstMonth.number === 0 && !(yearContainer.firstElementChild instanceof HTMLHeadingElement)) {
      const header = createEl("h2", {
        text: calendar.getNameForYear(firstMonth.year),
        cls: "fantasy-title"
      });
      yearContainer.prepend(header);
      trackedMonths.unshift(header);
      prependHeaderObserver.disconnect();
      prependHeaderObserver.observe(header);
    }
    if (reset2) {
      lastMonth = calendar.getMonth(lastMonth.number - 1, lastMonth.year);
    }
    resetAppend();
  };
  const createMonth = (month, anchor) => {
    const svelteInstance = new Month_default2({
      target: yearContainer,
      anchor: anchor ? yearContainer.children[0] : null,
      props: {
        month,
        fullView: false,
        yearView: true,
        columns,
        weeks: calendar.weekdays.length,
        showPad: false
      },
      context: new Map([["dayView", dayViewStore], ["displayMoons", moonStore]])
    });
    svelteInstance.$on("day-click", (e) => dispatch2("day-click", e.detail));
    svelteInstance.$on("day-doubleclick", (e) => dispatch2("day-doubleclick", e.detail));
    svelteInstance.$on("day-context-menu", (e) => dispatch2("day-context-menu", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    return svelteInstance;
  };
  const destroy = (item) => {
    if (item instanceof HTMLHeadingElement) {
      item.detach();
    } else {
      item.$destroy();
    }
  };
  const reset = async (full = false) => {
    for (let item of trackedMonths) {
      destroy(item);
    }
    trackedMonths.splice(0, trackedMonths.length);
    yearContainer.empty();
    await tick();
    $$invalidate(6, year = calendar.current.year);
    firstMonth = calendar.getMonth(calendar.displayed.month - 1, calendar.displayed.year);
    lastMonth = firstMonth;
    for (let i = 0; i < calendar.data.months.length; i++) {
      appendMonth(false);
    }
    prependMonth(false);
    await tick();
    const currentEl = yearContainer.querySelector(`#MONTH-${calendar.currentMonth.id}-${year}`);
    currentEl.scrollIntoView(true);
    if (full) {
      scroll();
    }
  };
  onDestroy(() => {
    prependObserver.disconnect();
    appendObserver.disconnect();
    prependHeaderObserver.disconnect();
    appendHeaderObserver.disconnect();
  });
  onMount(reset);
  const scroll = async () => {
    await tick();
    prependObserver.observe(yearContainer.children[1]);
    appendObserver.observe(yearContainer.children[yearContainer.children.length - 2]);
  };
  function next_handler(event) {
    bubble.call(this, $$self, event);
  }
  function previous_handler(event) {
    bubble.call(this, $$self, event);
  }
  const reset_handler = () => reset(true);
  function settings_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      yearContainer = $$value;
      $$invalidate(2, yearContainer);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("current" in $$props2)
      $$invalidate(0, current = $$props2.current);
    if ("year" in $$props2)
      $$invalidate(6, year = $$props2.year);
    if ("columns" in $$props2)
      $$invalidate(7, columns = $$props2.columns);
    if ("fullView" in $$props2)
      $$invalidate(1, fullView = $$props2.fullView);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 320) {
      $:
        $$invalidate(3, yearDisplay = calendar.getNameForYear(year));
    }
  };
  return [
    current,
    fullView,
    yearContainer,
    yearDisplay,
    reset,
    scroll,
    year,
    columns,
    calendar,
    next_handler,
    previous_handler,
    reset_handler,
    settings_handler,
    div0_binding
  ];
}
var YearView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance24, create_fragment24, safe_not_equal, {
      current: 0,
      year: 6,
      columns: 7,
      fullView: 1
    }, add_css21);
  }
};
var YearView_default = YearView;

// src/view/ui/YearViewBig.svelte
var import_obsidian24 = __toModule(require("obsidian"));

// src/view/ui/YearViewContainer.svelte
function add_css22(target) {
  append_styles(target, "svelte-ztrrn8", ".year.svelte-ztrrn8{display:grid;grid-template-columns:1fr 1fr 1fr;gap:1rem;overflow:auto;flex:1}.year.svelte-ztrrn8:not(.full-view){grid-template-columns:1fr}");
}
function get_each_context11(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
}
function create_each_block11(ctx) {
  let month;
  let current;
  month = new Month_default2({
    props: {
      month: ctx[8],
      fullView: false,
      yearView: true,
      columns: ctx[2],
      weeks: ctx[8].calendar.weekdays.length,
      showPad: false
    }
  });
  month.$on("day-click", ctx[3]);
  month.$on("day-doubleclick", ctx[4]);
  month.$on("day-context-menu", ctx[5]);
  month.$on("event-click", ctx[6]);
  month.$on("event-mouseover", ctx[7]);
  return {
    c() {
      create_component(month.$$.fragment);
    },
    m(target, anchor) {
      mount_component(month, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const month_changes = {};
      if (dirty & 2)
        month_changes.month = ctx2[8];
      if (dirty & 4)
        month_changes.columns = ctx2[2];
      if (dirty & 2)
        month_changes.weeks = ctx2[8].calendar.weekdays.length;
      month.$set(month_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(month.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(month.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(month, detaching);
    }
  };
}
function create_fragment25(ctx) {
  let div;
  let current;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block11(get_each_context11(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "year svelte-ztrrn8");
      toggle_class(div, "full-view", ctx[0]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & 6) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context11(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block11(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty & 1) {
        toggle_class(div, "full-view", ctx2[0]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance25($$self, $$props, $$invalidate) {
  let { fullView } = $$props;
  let { months } = $$props;
  let { columns } = $$props;
  function day_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("fullView" in $$props2)
      $$invalidate(0, fullView = $$props2.fullView);
    if ("months" in $$props2)
      $$invalidate(1, months = $$props2.months);
    if ("columns" in $$props2)
      $$invalidate(2, columns = $$props2.columns);
  };
  return [
    fullView,
    months,
    columns,
    day_click_handler,
    day_doubleclick_handler,
    day_context_menu_handler,
    event_click_handler,
    event_mouseover_handler
  ];
}
var YearViewContainer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance25, create_fragment25, safe_not_equal, { fullView: 0, months: 1, columns: 2 }, add_css22);
  }
};
var YearViewContainer_default = YearViewContainer;

// src/view/ui/YearViewBig.svelte
function add_css23(target) {
  append_styles(target, "svelte-1xpvbi", ".year-view.svelte-1xpvbi{height:100%;position:relative;display:flex;flex-direction:column}.year-container.svelte-1xpvbi{flex:1;overflow:auto}");
}
function create_fragment26(ctx) {
  let div1;
  let yearnav;
  let t;
  let div0;
  let current;
  yearnav = new YearNav_default({
    props: {
      year: ctx[2],
      current: ctx[0],
      arrows: true
    }
  });
  yearnav.$on("next", ctx[9]);
  yearnav.$on("previous", ctx[10]);
  yearnav.$on("reset", ctx[11]);
  yearnav.$on("settings", ctx[12]);
  return {
    c() {
      div1 = element("div");
      create_component(yearnav.$$.fragment);
      t = space();
      div0 = element("div");
      attr(div0, "class", "year-container svelte-1xpvbi");
      attr(div1, "class", "year-view svelte-1xpvbi");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(yearnav, div1, null);
      append(div1, t);
      append(div1, div0);
      ctx[13](div0);
      current = true;
    },
    p(ctx2, [dirty]) {
      const yearnav_changes = {};
      if (dirty & 4)
        yearnav_changes.year = ctx2[2];
      if (dirty & 1)
        yearnav_changes.current = ctx2[0];
      yearnav.$set(yearnav_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearnav.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearnav.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(yearnav);
      ctx[13](null);
    }
  };
}
function instance26($$self, $$props, $$invalidate) {
  let yearDisplay;
  const dispatch2 = createEventDispatcher();
  const calendarStore = getContext("calendar");
  const dayViewStore = getContext("dayView");
  const moonStore = getContext("displayMoons");
  let calendar;
  calendarStore.subscribe((c) => {
    $$invalidate(8, calendar = c);
  });
  let { year } = $$props;
  let { current } = $$props;
  let { columns } = $$props;
  let yearContainer;
  const createYear = (year2, anchor = false) => {
    const months = calendar.getMonthsForYear(year2);
    const svelteInstance = new YearViewContainer_default({
      target: yearContainer,
      anchor: anchor ? yearContainer.children[0] : null,
      props: { months, fullView: true, columns },
      context: new Map([["dayView", dayViewStore], ["displayMoons", moonStore]])
    });
    svelteInstance.$on("day-click", (e) => dispatch2("day-click", e.detail));
    svelteInstance.$on("day-doubleclick", (e) => dispatch2("day-doubleclick", e.detail));
    svelteInstance.$on("day-context-menu", (e) => dispatch2("day-context-menu", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    svelteInstance.$on("event-mouseover", (e) => dispatch2("event-mouseover", e.detail));
    return svelteInstance;
  };
  const destroy = (item) => {
    if (item instanceof HTMLHeadingElement) {
      item.detach();
    } else {
      item.$destroy();
    }
  };
  const years = [];
  const next2 = () => {
    if (!calendar.canGoToNextYear(year)) {
      new import_obsidian24.Notice("This is the last year. Additional years can be created in settings.");
      return;
    }
    $$invalidate(6, year = year + 1);
    reset(year);
  };
  const previous = () => {
    if (year === 1) {
      new import_obsidian24.Notice("This is the earliest year.");
      return;
    }
    $$invalidate(6, year = year - 1);
    reset(year);
  };
  const currentYear = () => {
    $$invalidate(6, year = calendar.current.year);
    reset(year);
  };
  const reset = async (year2) => {
    years.forEach((el) => destroy(el));
    yearContainer.empty();
    await tick();
    year2 = year2;
    years.push(createYear(year2));
  };
  onMount(() => years.push(createYear(year)));
  const next_handler = () => next2();
  const previous_handler = () => previous();
  const reset_handler = () => currentYear();
  function settings_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      yearContainer = $$value;
      $$invalidate(1, yearContainer);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("year" in $$props2)
      $$invalidate(6, year = $$props2.year);
    if ("current" in $$props2)
      $$invalidate(0, current = $$props2.current);
    if ("columns" in $$props2)
      $$invalidate(7, columns = $$props2.columns);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 320) {
      $:
        $$invalidate(2, yearDisplay = calendar.getNameForYear(year));
    }
  };
  return [
    current,
    yearContainer,
    yearDisplay,
    next2,
    previous,
    currentYear,
    year,
    columns,
    calendar,
    next_handler,
    previous_handler,
    reset_handler,
    settings_handler,
    div0_binding
  ];
}
var YearViewBig = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance26, create_fragment26, safe_not_equal, { year: 6, current: 0, columns: 7 }, add_css23);
  }
};
var YearViewBig_default = YearViewBig;

// src/view/ui/Calendar.svelte
function add_css24(target) {
  append_styles(target, "svelte-1kty1w6", "#calendar-container.year-view.svelte-1kty1w6.svelte-1kty1w6{height:100%}#calendar-container.fantasy-calendar.full-view.svelte-1kty1w6.svelte-1kty1w6{width:100%;padding:0 0.5rem 0.5rem;height:100%;display:flex;flex-flow:column}.fantasy-calendar.full-view.svelte-1kty1w6 .month-container.svelte-1kty1w6{height:100%}.month-container.svelte-1kty1w6.svelte-1kty1w6{display:flex}.month-view.svelte-1kty1w6.svelte-1kty1w6{flex-grow:2}.weeks.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-rows:auto 1fr}.week-num-container.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-rows:repeat(var(--calendar-rows), auto);padding:0.25rem 0}.week-num.svelte-1kty1w6.svelte-1kty1w6{background-color:transparent;border:2px solid transparent;border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:2px;position:relative;text-align:center;vertical-align:baseline;overflow:visible}.weekdays.svelte-1kty1w6.svelte-1kty1w6{display:grid;grid-template-columns:repeat(var(--calendar-columns), 1fr);grid-template-rows:auto;padding:0 0.25rem;gap:2px}.weekday.svelte-1kty1w6.svelte-1kty1w6{background-color:var(--color-background-heading);color:var(--color-text-heading);font-size:0.6em;letter-spacing:1px;padding:4px;text-transform:uppercase;text-align:center;border:2px solid transparent}hr.svelte-1kty1w6.svelte-1kty1w6{margin:1rem 0}.moon-container{display:flex;flex-flow:row wrap;align-items:center;justify-content:center}");
}
function get_each_context12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[49] = list[i];
  return child_ctx;
}
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[52] = list[i];
  return child_ctx;
}
function create_else_block10(ctx) {
  let nav;
  let t0;
  let div3;
  let div0;
  let t1;
  let div2;
  let div1;
  let t2;
  let monthview;
  let current;
  nav = new Nav_default({
    props: {
      month: ctx[6].name,
      year: ctx[9],
      current: ctx[3].displayedDate
    }
  });
  nav.$on("next", ctx[31]);
  nav.$on("previous", ctx[32]);
  nav.$on("reset", ctx[33]);
  nav.$on("settings", ctx[34]);
  let if_block = ctx[5] && create_if_block_3(ctx);
  let each_value = ctx[11];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block12(get_each_context12(ctx, each_value, i));
  }
  monthview = new Month_default2({
    props: {
      columns: ctx[11].length,
      weeks: ctx[7],
      month: ctx[6],
      fullView: ctx[1]
    }
  });
  monthview.$on("day-click", ctx[35]);
  monthview.$on("day-doubleclick", ctx[36]);
  monthview.$on("day-context-menu", ctx[37]);
  monthview.$on("event-click", ctx[38]);
  monthview.$on("event-mouseover", ctx[39]);
  monthview.$on("event-context", ctx[40]);
  return {
    c() {
      create_component(nav.$$.fragment);
      t0 = space();
      div3 = element("div");
      div0 = element("div");
      if (if_block)
        if_block.c();
      t1 = space();
      div2 = element("div");
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      create_component(monthview.$$.fragment);
      attr(div0, "class", "weeks svelte-1kty1w6");
      attr(div1, "class", "weekdays svelte-1kty1w6");
      attr(div2, "class", "month-view svelte-1kty1w6");
      attr(div3, "class", "month-container svelte-1kty1w6");
    },
    m(target, anchor) {
      mount_component(nav, target, anchor);
      insert(target, t0, anchor);
      insert(target, div3, anchor);
      append(div3, div0);
      if (if_block)
        if_block.m(div0, null);
      append(div3, t1);
      append(div3, div2);
      append(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div1, null);
      }
      append(div2, t2);
      mount_component(monthview, div2, null);
      current = true;
    },
    p(ctx2, dirty) {
      const nav_changes = {};
      if (dirty[0] & 64)
        nav_changes.month = ctx2[6].name;
      if (dirty[0] & 512)
        nav_changes.year = ctx2[9];
      if (dirty[0] & 8)
        nav_changes.current = ctx2[3].displayedDate;
      nav.$set(nav_changes);
      if (ctx2[5]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty[0] & 2048) {
        each_value = ctx2[11];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context12(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block12(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      const monthview_changes = {};
      if (dirty[0] & 2048)
        monthview_changes.columns = ctx2[11].length;
      if (dirty[0] & 128)
        monthview_changes.weeks = ctx2[7];
      if (dirty[0] & 64)
        monthview_changes.month = ctx2[6];
      if (dirty[0] & 2)
        monthview_changes.fullView = ctx2[1];
      monthview.$set(monthview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(nav.$$.fragment, local);
      transition_in(monthview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(nav.$$.fragment, local);
      transition_out(monthview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(nav, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div3);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
      destroy_component(monthview);
    }
  };
}
function create_if_block_22(ctx) {
  let yearviewbig;
  let current;
  yearviewbig = new YearViewBig_default({
    props: {
      year: ctx[10],
      columns: ctx[11].length,
      current: ctx[3].displayedDate
    }
  });
  yearviewbig.$on("next", ctx[22]);
  yearviewbig.$on("previous", ctx[23]);
  yearviewbig.$on("reset", ctx[24]);
  yearviewbig.$on("settings", ctx[25]);
  yearviewbig.$on("day-click", ctx[26]);
  yearviewbig.$on("day-doubleclick", ctx[27]);
  yearviewbig.$on("day-context-menu", ctx[28]);
  yearviewbig.$on("event-click", ctx[29]);
  yearviewbig.$on("event-mouseover", ctx[30]);
  return {
    c() {
      create_component(yearviewbig.$$.fragment);
    },
    m(target, anchor) {
      mount_component(yearviewbig, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const yearviewbig_changes = {};
      if (dirty[0] & 1024)
        yearviewbig_changes.year = ctx2[10];
      if (dirty[0] & 2048)
        yearviewbig_changes.columns = ctx2[11].length;
      if (dirty[0] & 8)
        yearviewbig_changes.current = ctx2[3].displayedDate;
      yearviewbig.$set(yearviewbig_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearviewbig.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearviewbig.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(yearviewbig, detaching);
    }
  };
}
function create_if_block_16(ctx) {
  let yearview;
  let current;
  yearview = new YearView_default({
    props: {
      year: ctx[10],
      fullView: ctx[1],
      columns: ctx[11].length,
      current: ctx[3].displayedDate
    }
  });
  yearview.$on("next", ctx[13]);
  yearview.$on("previous", ctx[14]);
  yearview.$on("reset", ctx[15]);
  yearview.$on("settings", ctx[16]);
  yearview.$on("day-click", ctx[17]);
  yearview.$on("day-doubleclick", ctx[18]);
  yearview.$on("day-context-menu", ctx[19]);
  yearview.$on("event-click", ctx[20]);
  yearview.$on("event-mouseover", ctx[21]);
  return {
    c() {
      create_component(yearview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(yearview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const yearview_changes = {};
      if (dirty[0] & 1024)
        yearview_changes.year = ctx2[10];
      if (dirty[0] & 2)
        yearview_changes.fullView = ctx2[1];
      if (dirty[0] & 2048)
        yearview_changes.columns = ctx2[11].length;
      if (dirty[0] & 8)
        yearview_changes.current = ctx2[3].displayedDate;
      yearview.$set(yearview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(yearview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(yearview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(yearview, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let span;
  let t1;
  let div;
  let each_value_1 = [...Array(ctx[7]).keys()];
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  return {
    c() {
      span = element("span");
      span.textContent = "W";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(span, "class", "week-num weekday fantasy-weekday svelte-1kty1w6");
      attr(div, "class", "week-num-container svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & 384) {
        each_value_1 = [...Array(ctx2[7]).keys()];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_13(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_13(ctx) {
  let span;
  let t_value = ctx[8] + 1 + ctx[52] + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "week-num svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 384 && t_value !== (t_value = ctx2[8] + 1 + ctx2[52] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block12(ctx) {
  let span;
  let t_value = ctx[49].name.slice(0, 3) + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "weekday fantasy-weekday svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 2048 && t_value !== (t_value = ctx2[49].name.slice(0, 3) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block17(ctx) {
  let hr;
  let t;
  let dayview;
  let current;
  dayview = new DayView_default({
    props: {
      displayDayNumber: ctx[4]
    }
  });
  dayview.$on("close", ctx[41]);
  dayview.$on("event-click", ctx[42]);
  dayview.$on("event-mouseover", ctx[43]);
  dayview.$on("event-context", ctx[44]);
  dayview.$on("event", ctx[45]);
  return {
    c() {
      hr = element("hr");
      t = space();
      create_component(dayview.$$.fragment);
      attr(hr, "class", "svelte-1kty1w6");
    },
    m(target, anchor) {
      insert(target, hr, anchor);
      insert(target, t, anchor);
      mount_component(dayview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dayview_changes = {};
      if (dirty[0] & 16)
        dayview_changes.displayDayNumber = ctx2[4];
      dayview.$set(dayview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dayview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dayview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(hr);
      if (detaching)
        detach(t);
      destroy_component(dayview, detaching);
    }
  };
}
function create_fragment27(ctx) {
  let div;
  let current_block_type_index;
  let if_block0;
  let t;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_16, create_if_block_22, create_else_block10];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[2] && !ctx2[1])
      return 0;
    if (ctx2[2])
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = ctx[0] && !ctx[1] && create_if_block17(ctx);
  return {
    c() {
      div = element("div");
      if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(div, "id", "calendar-container");
      attr(div, "class", "fantasy-calendar svelte-1kty1w6");
      set_style(div, "--calendar-columns", ctx[3].weekdays.length);
      set_style(div, "--column-widths", 1 / ctx[3].weekdays.length * 100 + "%");
      set_style(div, "--calendar-rows", ctx[3].weeksPerCurrentMonth);
      toggle_class(div, "full-view", ctx[1]);
      toggle_class(div, "year-view", ctx[2]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div, null);
      }
      if (!current || dirty[0] & 8) {
        set_style(div, "--calendar-columns", ctx2[3].weekdays.length);
      }
      if (!current || dirty[0] & 8) {
        set_style(div, "--column-widths", 1 / ctx2[3].weekdays.length * 100 + "%");
      }
      if (!current || dirty[0] & 8) {
        set_style(div, "--calendar-rows", ctx2[3].weeksPerCurrentMonth);
      }
      if (dirty[0] & 2) {
        toggle_class(div, "full-view", ctx2[1]);
      }
      if (dirty[0] & 4) {
        toggle_class(div, "year-view", ctx2[2]);
      }
      if (ctx2[0] && !ctx2[1]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & 3) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block17(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      if (detaching)
        detach(t);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
    }
  };
}
function instance27($$self, $$props, $$invalidate) {
  let weekdays;
  let year;
  let yearDisplay;
  let month;
  let firstWeek;
  let weeks;
  let { fullView = false } = $$props;
  let { dayView = false } = $$props;
  let { yearView = false } = $$props;
  let { calendar } = $$props;
  let { moons } = $$props;
  let { displayDayNumber } = $$props;
  let { displayWeeks } = $$props;
  const dayViewStore = writable(dayView);
  const moonStore = writable(moons);
  const calendarStore = writable(calendar);
  setContext("dayView", dayViewStore);
  setContext("displayMoons", moonStore);
  setContext("calendar", calendarStore);
  calendar.on("month-update", () => {
    $$invalidate(10, year = calendar.displayed.year);
    $$invalidate(9, yearDisplay = calendar.getNameForYear(calendar.displayed.year));
    $$invalidate(6, month = calendar.currentMonth);
    $$invalidate(7, weeks = calendar.weeksOfMonth(month));
    $$invalidate(8, firstWeek = calendar.weekNumbersOfMonth(month));
  });
  const next_handler = () => calendar.goToNextYear();
  const previous_handler = () => calendar.goToPreviousYear();
  function reset_handler(event) {
    bubble.call(this, $$self, event);
  }
  function settings_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  const next_handler_1 = () => calendar.goToNextYear();
  const previous_handler_1 = () => calendar.goToPreviousYear();
  function reset_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function settings_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function day_click_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  const next_handler_2 = () => calendar.goToNext();
  const previous_handler_2 = () => calendar.goToPrevious();
  function reset_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function settings_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function day_click_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function day_doubleclick_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function day_context_menu_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function event_click_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler(event) {
    bubble.call(this, $$self, event);
  }
  const close_handler = () => $$invalidate(0, dayView = false);
  function event_click_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function event_mouseover_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function event_context_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function event_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("fullView" in $$props2)
      $$invalidate(1, fullView = $$props2.fullView);
    if ("dayView" in $$props2)
      $$invalidate(0, dayView = $$props2.dayView);
    if ("yearView" in $$props2)
      $$invalidate(2, yearView = $$props2.yearView);
    if ("calendar" in $$props2)
      $$invalidate(3, calendar = $$props2.calendar);
    if ("moons" in $$props2)
      $$invalidate(12, moons = $$props2.moons);
    if ("displayDayNumber" in $$props2)
      $$invalidate(4, displayDayNumber = $$props2.displayDayNumber);
    if ("displayWeeks" in $$props2)
      $$invalidate(5, displayWeeks = $$props2.displayWeeks);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 4) {
      $: {
        if (yearView)
          $$invalidate(0, dayView = false);
      }
    }
    if ($$self.$$.dirty[0] & 1) {
      $:
        dayViewStore.set(dayView);
    }
    if ($$self.$$.dirty[0] & 4096) {
      $:
        moonStore.set(moons);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        calendarStore.set(calendar);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(11, weekdays = calendar.weekdays);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(10, year = calendar.displayed.year);
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(9, yearDisplay = calendar.getNameForYear(calendar.displayed.year));
    }
    if ($$self.$$.dirty[0] & 8) {
      $:
        $$invalidate(6, month = calendar.currentMonth);
    }
    if ($$self.$$.dirty[0] & 72) {
      $:
        $$invalidate(8, firstWeek = calendar.weekNumbersOfMonth(month));
    }
    if ($$self.$$.dirty[0] & 72) {
      $:
        $$invalidate(7, weeks = calendar.weeksOfMonth(month));
    }
  };
  return [
    dayView,
    fullView,
    yearView,
    calendar,
    displayDayNumber,
    displayWeeks,
    month,
    weeks,
    firstWeek,
    yearDisplay,
    year,
    weekdays,
    moons,
    next_handler,
    previous_handler,
    reset_handler,
    settings_handler,
    day_click_handler,
    day_doubleclick_handler,
    day_context_menu_handler,
    event_click_handler,
    event_mouseover_handler,
    next_handler_1,
    previous_handler_1,
    reset_handler_1,
    settings_handler_1,
    day_click_handler_1,
    day_doubleclick_handler_1,
    day_context_menu_handler_1,
    event_click_handler_1,
    event_mouseover_handler_1,
    next_handler_2,
    previous_handler_2,
    reset_handler_2,
    settings_handler_2,
    day_click_handler_2,
    day_doubleclick_handler_2,
    day_context_menu_handler_2,
    event_click_handler_2,
    event_mouseover_handler_2,
    event_context_handler,
    close_handler,
    event_click_handler_3,
    event_mouseover_handler_3,
    event_context_handler_1,
    event_handler
  ];
}
var Calendar = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance27, create_fragment27, safe_not_equal, {
      fullView: 1,
      dayView: 0,
      yearView: 2,
      calendar: 3,
      moons: 12,
      displayDayNumber: 4,
      displayWeeks: 5
    }, add_css24, [-1, -1]);
  }
};
var Calendar_default = Calendar;

// src/view/view.ts
var VIEW_TYPE = "FANTASY_CALENDAR";
var FULL_VIEW = "FANTASY_CALENDAR_FULL_VIEW";
(0, import_obsidian25.addIcon)(VIEW_TYPE, `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="calendar" class="svg-inline--fa fa-calendar fa-w-14" role="img" viewBox="0 0 448 512"><path xmlns="http://www.w3.org/2000/svg" fill="currentColor" d="M400 64h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V160h352v298c0 3.3-2.7 6-6 6z"/><path fill="currentColor" d="M18.32 255.78L192 223.96l-91.28 68.69c-10.08 10.08-2.94 27.31 11.31 27.31h222.7c-9.44-26.4-14.73-54.47-14.73-83.38v-42.27l-119.73-87.6c-23.82-15.88-55.29-14.01-77.06 4.59L5.81 227.64c-12.38 10.33-3.45 30.42 12.51 28.14zm556.87 34.1l-100.66-50.31A47.992 47.992 0 0 1 448 196.65v-36.69h64l28.09 22.63c6 6 14.14 9.37 22.63 9.37h30.97a32 32 0 0 0 28.62-17.69l14.31-28.62a32.005 32.005 0 0 0-3.02-33.51l-74.53-99.38C553.02 4.7 543.54 0 533.47 0H296.02c-7.13 0-10.7 8.57-5.66 13.61L352 63.96 292.42 88.8c-5.9 2.95-5.9 11.36 0 14.31L352 127.96v108.62c0 72.08 36.03 139.39 96 179.38-195.59 6.81-344.56 41.01-434.1 60.91C5.78 478.67 0 485.88 0 494.2 0 504 7.95 512 17.76 512h499.08c63.29.01 119.61-47.56 122.99-110.76 2.52-47.28-22.73-90.4-64.64-111.36zM489.18 66.25l45.65 11.41c-2.75 10.91-12.47 18.89-24.13 18.26-12.96-.71-25.85-12.53-21.52-29.67z" style="&#10;    transform: scale(0.4125) translate(50%, 95%);&#10;"/></svg>`);
(0, import_obsidian25.addIcon)("fantasy-calendar-reveal", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="calendar-day" class="svg-inline--fa fa-calendar-day fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm64-192c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-96zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"/></svg>`);
var FantasyCalendarView = class extends import_obsidian25.ItemView {
  constructor(plugin, leaf, options = {}) {
    super(leaf);
    this.plugin = plugin;
    this.leaf = leaf;
    this.options = options;
    this.updateMe = true;
    this.yearView = false;
    this.moons = true;
    this.containerEl.addClass("fantasy-calendar-view");
    this.contentEl.addClass("fantasy-calendar-view-content");
    this.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-updated", () => {
      this.updateCalendars();
    }));
    this.registerEvent(this.plugin.app.workspace.on("layout-change", () => {
      if (!this._app)
        return;
      this._app.$set({
        fullView: this.full,
        ...this.full ? { dayView: false } : {}
      });
    }));
  }
  get root() {
    return this.leaf.getRoot();
  }
  get full() {
    return !("collapse" in this.root);
  }
  updateCalendars() {
    if (!this.updateMe) {
      this.updateMe = true;
      return;
    }
    if (!this.plugin.data.calendars.length) {
      this._app?.$destroy();
      this.contentEl.empty();
      this.noCalendarEl = this.contentEl.createDiv("fantasy-no-calendar");
      this.noCalendarEl.createSpan({
        text: "No calendars created! Create a calendar to see it here."
      });
      return;
    }
    const calendar = this.plugin.data.calendars.find((c) => c.id == this.calendar?.id) ?? this.plugin.defaultCalendar ?? this.plugin.data.calendars[0];
    if (this.helper && this.helper.calendar.id == calendar.id) {
      this.update(calendar);
    } else {
      this.setCurrentCalendar(calendar);
    }
  }
  update(calendar) {
    this.calendar = calendar;
    this.helper.update(this.calendar);
    this.registerCalendarInterval();
    if (!this._app) {
      this.build();
    } else {
      this._app.$set({ calendar: this.helper });
    }
  }
  registerCalendarInterval() {
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    if (this.calendar.static.incrementDay) {
      let current = new Date();
      if (!this.calendar.date) {
        this.calendar.date = current.valueOf();
      }
      const dif = daysBetween(new Date(this.calendar.date), current);
      if (dif >= 1) {
        for (let i = 0; i < dif; i++) {
          this.helper.goToNextCurrentDay();
        }
        this.calendar.date = current.valueOf();
        this.plugin.saveSettings();
      }
      this.interval = window.setInterval(() => {
        if (daysBetween(new Date(), current) >= 1) {
          this.helper.goToNextCurrentDay();
          this.helper.current;
          current = new Date();
          this.calendar.date = current.valueOf();
          this.plugin.saveSettings();
        }
      }, 60 * 1e3);
      this.registerInterval(this.interval);
    }
  }
  setCurrentCalendar(calendar) {
    this.noCalendarEl?.detach();
    this.calendar = calendar;
    this.moons = this.calendar.static.displayMoons;
    this.dayNumber = this.calendar.static.displayDayNumber;
    this.helper = new CalendarHelper(this.calendar, this.plugin);
    this.registerCalendarInterval();
    this.build();
  }
  createEventForDay(date) {
    const modal = new CreateEventModal(this.app, this.calendar, null, date);
    modal.onClose = () => {
      if (!modal.saved)
        return;
      this.calendar.events.push(modal.event);
      this.plugin.saveSettings();
      this._app.$set({
        calendar: this.helper
      });
      this.triggerHelperEvent("day-update");
    };
    modal.open();
  }
  async onOpen() {
    this.updateCalendars();
  }
  build() {
    this.contentEl.empty();
    this._app = new Calendar_default({
      target: this.contentEl,
      props: {
        calendar: this.helper,
        fullView: this.full,
        yearView: this.yearView,
        moons: this.moons,
        displayWeeks: this.helper.displayWeeks,
        displayDayNumber: this.dayNumber
      }
    });
    this._app.$on("day-click", (event) => {
      const day = event.detail;
      if (day.events.length)
        return;
      this.createEventForDay(day.date);
    });
    this._app.$on("day-doubleclick", (event) => {
      const day = event.detail;
      if (!day.events.length)
        return;
      this.helper.viewing.day = day.number;
      this.helper.viewing.month = this.helper.displayed.month;
      this.helper.viewing.year = this.helper.displayed.year;
      this.yearView = false;
      this._app.$set({ yearView: false });
      this._app.$set({ dayView: true });
      this.triggerHelperEvent("day-update", false);
    });
    this._app.$on("day-context-menu", (event) => {
      const { day, evt } = event.detail;
      const menu = new import_obsidian25.Menu(this.app);
      menu.setNoIcon();
      if (!this.full) {
        menu.addItem((item) => {
          item.setTitle("Open Day").onClick(() => {
            this.openDay({
              day: day.number,
              month: this.helper.displayed.month,
              year: this.helper.displayed.year
            });
          });
        });
      }
      menu.addItem((item) => {
        item.setTitle("Set as Today").onClick(() => {
          this.calendar.current = day.date;
          this.helper.current.day = day.number;
          this.triggerHelperEvent("day-update");
          this.plugin.saveSettings();
        });
      });
      menu.addItem((item) => item.setTitle("New Event").onClick(() => {
        this.createEventForDay(day.date);
      }));
      menu.showAtMouseEvent(evt);
    });
    this._app.$on("settings", (event) => {
      const evt = event.detail;
      const menu = new import_obsidian25.Menu(this.app);
      menu.setNoIcon();
      menu.addItem((item) => {
        item.setTitle(`${this.calendar.displayWeeks ? "Hide" : "Show"} Weeks`).onClick(() => {
          this.calendar.displayWeeks = !this.calendar.displayWeeks;
          this.helper.update(this.calendar);
          this._app.$set({
            displayWeeks: this.calendar.displayWeeks
          });
          this.plugin.saveSettings();
        });
      });
      menu.addItem((item) => {
        item.setTitle(`Open ${this.yearView ? "Month" : "Year"}`).onClick(() => {
          this.yearView = !this.yearView;
          this._app.$set({ yearView: this.yearView });
        });
      });
      menu.addItem((item) => {
        item.setTitle(this.moons ? "Hide Moons" : "Display Moons").onClick(() => {
          this.toggleMoons();
        });
      });
      menu.addItem((item) => {
        item.setTitle(this.dayNumber ? "Hide Day Number" : "Display Day Number").onClick(() => {
          this.dayNumber = !this.dayNumber;
          this.calendar.static.displayDayNumber = this.dayNumber;
          this._app.$set({ displayDayNumber: this.dayNumber });
          this.plugin.saveSettings();
        });
      });
      menu.addItem((item) => {
        item.setTitle("View Day");
        item.onClick(() => {
          this.openDate();
        });
      });
      menu.addItem((item) => {
        item.setTitle("Switch Calendars");
        item.setDisabled(this.plugin.data.calendars.length <= 1);
        item.onClick(() => {
          const modal = new SwitchModal(this.plugin, this.calendar);
          modal.onClose = () => {
            if (!modal.confirmed)
              return;
            this.setCurrentCalendar(modal.calendar);
          };
          modal.open();
        });
      });
      menu.showAtMouseEvent(evt);
    });
    this._app.$on("event-click", (evt) => {
      const { event, modifier } = evt.detail;
      if (event.note) {
        let leaves = [];
        this.app.workspace.iterateAllLeaves((leaf) => {
          if (!(leaf.view instanceof import_obsidian25.MarkdownView))
            return;
          if (leaf.view.file.basename === event.note) {
            leaves.push(leaf);
          }
        });
        if (leaves.length) {
          this.app.workspace.setActiveLeaf(leaves[0]);
        } else {
          this.app.workspace.openLinkText(event.note, "", this.full || modifier);
        }
      } else {
        const modal = new ViewEventModal(event, this.plugin);
        modal.open();
      }
    });
    this._app.$on("event-mouseover", (evt) => {
      if (!this.plugin.data.eventPreview)
        return;
      const { target, event } = evt.detail;
      if (event.note) {
        this.app.workspace.trigger("link-hover", this, target, event.note, "");
      }
    });
    this._app.$on("event-context", (custom) => {
      const { evt, event } = custom.detail;
      const menu = new import_obsidian25.Menu(this.app);
      menu.setNoIcon();
      if (!event.note) {
        menu.addItem((item) => {
          item.setTitle("Create Note").onClick(async () => {
            const path = this.app.workspace.getActiveFile()?.path;
            const newFilePath = path ? this.app.fileManager.getNewFileParent(path)?.parent ?? "/" : "/";
            const date = `${event.date.year}-${event.date.month + 1}-${event.date.day}`;
            let end2;
            if (event.end) {
              end2 = `${event.end.year}-${event.end.month + 1}-${event.end.day}`;
            }
            const content = {
              "fc-calendar": this.calendar.name,
              "fc-date": date,
              ...event.end ? { "fc-end": end2 } : {},
              ...event.category ? {
                "fc-category": this.calendar.categories.find((cat) => cat.id == event.category)?.name
              } : {}
            };
            event.note = (0, import_obsidian25.normalizePath)(`${newFilePath}/${event.name}.md`);
            let file = this.app.vault.getAbstractFileByPath(event.note);
            if (!file) {
              file = await this.app.vault.create(event.note, `---
${(0, import_obsidian25.stringifyYaml)(content)}
---`);
            }
            this.plugin.saveCalendar();
            if (file instanceof import_obsidian25.TFile) {
              const fileViews = this.app.workspace.getLeavesOfType("markdown");
              const existing = fileViews.find((l) => {
                l.view instanceof import_obsidian25.FileView && l.view.file.path == event.note;
              });
              if (existing) {
                this.app.workspace.setActiveLeaf(existing);
              } else {
                await this.app.workspace.getUnpinnedLeaf().openFile(file, {
                  active: true
                });
              }
            }
          });
        });
      }
      menu.addItem((item) => {
        item.setTitle("Edit Event").onClick(() => {
          const modal = new CreateEventModal(this.app, this.calendar, event);
          modal.onClose = () => {
            if (!modal.saved)
              return;
            const existing = this.calendar.events.find((e) => e.id == event.id);
            this.calendar.events.splice(this.calendar.events.indexOf(existing), 1, modal.event);
            this.plugin.saveSettings();
            this._app.$set({
              calendar: this.helper
            });
            this.triggerHelperEvent("day-update");
          };
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("Delete Event").onClick(async () => {
          if (await confirmWithModal(this.app, "Are you sure you wish to delete this event?", {
            cta: "Delete",
            secondary: "Cancel"
          })) {
            const existing = this.calendar.events.find((e) => e.id == event.id);
            this.calendar.events.splice(this.calendar.events.indexOf(existing), 1);
            this.plugin.saveSettings();
            this._app.$set({
              calendar: this.helper
            });
            this.triggerHelperEvent("day-update");
          }
        });
      });
      menu.showAtMouseEvent(evt);
    });
    this._app.$on("event", (e) => {
      const date = e.detail;
      this.createEventForDay(date);
    });
    this._app.$on("reset", () => {
      this.helper.reset();
      this.yearView = false;
      this._app.$set({ yearView: false });
      this._app.$set({ dayView: true });
      this.triggerHelperEvent("day-update", false);
    });
  }
  openDay(date) {
    this.helper.viewing.day = date.day;
    this.helper.viewing.month = date.month;
    this.helper.viewing.year = date.year;
    this.yearView = false;
    this._app.$set({ yearView: false });
    this._app.$set({ dayView: true });
    this.triggerHelperEvent("day-update", false);
  }
  openDate() {
    if (!this.helper)
      return;
    if (!this.calendar)
      return;
    const modal = new ChangeDateModal(this.plugin, this.calendar);
    modal.onClose = () => {
      if (!modal.confirmed)
        return;
      if (modal.setCurrent) {
        this.calendar.current = { ...modal.date };
        this.setCurrentCalendar(this.calendar);
      } else {
        this.helper.displayed = { ...modal.date };
        this.helper.update();
        this._app.$set({ calendar: this.helper });
      }
      this.plugin.saveSettings();
    };
    modal.open();
  }
  toggleMoons() {
    this.moons = !this.moons;
    this._app.$set({ moons: this.moons });
  }
  async onClose() {
  }
  onResize() {
    this.triggerHelperEvent("view-resized", false);
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "Fantasy Calendar";
  }
  getIcon() {
    return VIEW_TYPE;
  }
  triggerHelperEvent(event, full = true) {
    if (!this.helper)
      return;
    this.helper.trigger(event);
    if (full) {
      this.updateMe = false;
      this.plugin.app.workspace.trigger("fantasy-calendars-updated");
    }
  }
  async onunload() {
  }
};
var SwitchModal = class extends import_obsidian25.Modal {
  constructor(plugin, calendar) {
    super(plugin.app);
    this.plugin = plugin;
    this.calendar = calendar;
    this.confirmed = false;
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h4", { text: "Switch Calendars" });
    const dropdownEl = this.contentEl.createDiv("fantasy-calendar-dropdown");
    dropdownEl.createEl("label", {
      text: "Choose a Calendar"
    });
    const dropdown = new import_obsidian25.DropdownComponent(dropdownEl).onChange((v) => {
      this.calendar = this.plugin.data.calendars.find((c) => c.id == v);
    });
    dropdown.addOptions(Object.fromEntries(this.plugin.data.calendars.map((c) => [c.id, c.name]))).setValue(this.calendar ? this.calendar.id : null);
    const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
    new import_obsidian25.ButtonComponent(buttonEl).setButtonText("Switch").setCta().onClick(() => {
      this.confirmed = true;
      this.close();
    });
    new import_obsidian25.ButtonComponent(buttonEl).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onOpen() {
    this.display();
  }
};
var ChangeDateModal = class extends import_obsidian25.Modal {
  constructor(plugin, calendar) {
    super(plugin.app);
    this.plugin = plugin;
    this.calendar = calendar;
    this.confirmed = false;
    this.setCurrent = false;
    this.date = { ...this.calendar.current };
    this.tempCurrentDays = this.date.day;
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h4", { text: "View Day" });
    this.dateFieldEl = this.contentEl.createDiv("fantasy-calendar-date-fields");
    this.buildDateFields();
    new import_obsidian25.Setting(this.contentEl).setName("Set as Current Date").setDesc("Also set this date to today's date.").addToggle((t) => t.setValue(this.setCurrent).onChange((v) => {
      this.setCurrent = v;
    }));
    const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
    new import_obsidian25.ButtonComponent(buttonEl).setButtonText("Switch").setCta().onClick(() => {
      this.confirmed = true;
      this.date.day = this.tempCurrentDays;
      this.close();
    });
    new import_obsidian25.ButtonComponent(buttonEl).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  buildDateFields() {
    this.dateFieldEl.empty();
    if (this.tempCurrentDays != void 0 && this.date.month != void 0 && this.tempCurrentDays > this.calendar.static.months[this.date.month]?.length) {
      this.tempCurrentDays = this.calendar.static.months[this.date.month]?.length;
    }
    const dayEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
    dayEl.createEl("label", { text: "Day" });
    const day = new import_obsidian25.TextComponent(dayEl).setPlaceholder("Day").setValue(`${this.tempCurrentDays}`).setDisabled(this.date.month == void 0).onChange((v) => {
      if (Number(v) < 1 || Number(v) > this.calendar.static.months[this.date.month]?.length) {
        new import_obsidian25.Notice(`The current day must be between 1 and ${this.calendar.static.months[this.date.month].length}`);
        this.tempCurrentDays = this.date.day;
        this.buildDateFields();
        return;
      }
      this.tempCurrentDays = Number(v);
    });
    day.inputEl.setAttr("type", "number");
    const monthEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
    monthEl.createEl("label", { text: "Month" });
    new import_obsidian25.DropdownComponent(monthEl).addOptions(Object.fromEntries([
      ["select", "Select Month"],
      ...this.calendar.static.months.map((month) => [
        month.name,
        month.name
      ])
    ])).setValue(this.date.month != void 0 ? this.calendar.static.months[this.date.month].name : "select").onChange((v) => {
      if (v === "select")
        this.date.month = null;
      const index = this.calendar.static.months.find((m) => m.name == v);
      this.date.month = this.calendar.static.months.indexOf(index);
      this.buildDateFields();
    });
    const yearEl = this.dateFieldEl.createDiv("fantasy-calendar-date-field");
    yearEl.createEl("label", { text: "Year" });
    if (this.calendar.static.useCustomYears) {
      const yearDrop = new import_obsidian25.DropdownComponent(yearEl);
      (this.calendar.static.years ?? []).forEach((year) => {
        yearDrop.addOption(year.id, year.name);
      });
      if (this.date.year > this.calendar.static.years?.length) {
        this.date.year = this.calendar.static.years ? this.calendar.static.years.length : null;
      }
      yearDrop.setValue(this.calendar.static.years?.[this.date.year - 1]?.id).onChange((v) => {
        this.date.year = this.calendar.static.years.findIndex((y) => y.id == v) + 1;
      });
    } else {
      const year = new import_obsidian25.TextComponent(yearEl).setPlaceholder("Year").setValue(`${this.date.year}`).onChange((v) => {
        this.date.year = Number(v);
      });
      year.inputEl.setAttr("type", "number");
    }
  }
  onOpen() {
    this.display();
  }
};
var ViewEventModal = class extends import_obsidian25.Modal {
  constructor(event, plugin) {
    super(plugin.app);
    this.event = event;
    this.plugin = plugin;
    this.containerEl.addClass("fantasy-calendar-view-event");
  }
  async display() {
    this.contentEl.empty();
    this.contentEl.createEl("h4", { text: this.event.name });
    await import_obsidian25.MarkdownRenderer.renderMarkdown(this.event.description, this.contentEl, this.event.note, null);
  }
  async onOpen() {
    await this.display();
  }
};

// src/watcher/watcher.ts
var import_fs = __toModule(require("fs"));
var import_obsidian26 = __toModule(require("obsidian"));

// inline-worker:__inline-worker
function inlineWorker(scriptText) {
  let blob = new Blob([scriptText], { type: "text/javascript" });
  let url = URL.createObjectURL(blob);
  let worker = new Worker(url);
  URL.revokeObjectURL(url);
  return worker;
}

// src/watcher/watcher.worker.ts
function Worker2() {
  return inlineWorker(`var ee=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Re=ee(Ie=>{Ie.entityMap={lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"\\xC0",Aacute:"\\xC1",Acirc:"\\xC2",Atilde:"\\xC3",Auml:"\\xC4",Aring:"\\xC5",AElig:"\\xC6",Ccedil:"\\xC7",Egrave:"\\xC8",Eacute:"\\xC9",Ecirc:"\\xCA",Euml:"\\xCB",Igrave:"\\xCC",Iacute:"\\xCD",Icirc:"\\xCE",Iuml:"\\xCF",ETH:"\\xD0",Ntilde:"\\xD1",Ograve:"\\xD2",Oacute:"\\xD3",Ocirc:"\\xD4",Otilde:"\\xD5",Ouml:"\\xD6",Oslash:"\\xD8",Ugrave:"\\xD9",Uacute:"\\xDA",Ucirc:"\\xDB",Uuml:"\\xDC",Yacute:"\\xDD",THORN:"\\xDE",szlig:"\\xDF",agrave:"\\xE0",aacute:"\\xE1",acirc:"\\xE2",atilde:"\\xE3",auml:"\\xE4",aring:"\\xE5",aelig:"\\xE6",ccedil:"\\xE7",egrave:"\\xE8",eacute:"\\xE9",ecirc:"\\xEA",euml:"\\xEB",igrave:"\\xEC",iacute:"\\xED",icirc:"\\xEE",iuml:"\\xEF",eth:"\\xF0",ntilde:"\\xF1",ograve:"\\xF2",oacute:"\\xF3",ocirc:"\\xF4",otilde:"\\xF5",ouml:"\\xF6",oslash:"\\xF8",ugrave:"\\xF9",uacute:"\\xFA",ucirc:"\\xFB",uuml:"\\xFC",yacute:"\\xFD",thorn:"\\xFE",yuml:"\\xFF",nbsp:"\\xA0",iexcl:"\\xA1",cent:"\\xA2",pound:"\\xA3",curren:"\\xA4",yen:"\\xA5",brvbar:"\\xA6",sect:"\\xA7",uml:"\\xA8",copy:"\\xA9",ordf:"\\xAA",laquo:"\\xAB",not:"\\xAC",shy:"\\xAD\\xAD",reg:"\\xAE",macr:"\\xAF",deg:"\\xB0",plusmn:"\\xB1",sup2:"\\xB2",sup3:"\\xB3",acute:"\\xB4",micro:"\\xB5",para:"\\xB6",middot:"\\xB7",cedil:"\\xB8",sup1:"\\xB9",ordm:"\\xBA",raquo:"\\xBB",frac14:"\\xBC",frac12:"\\xBD",frac34:"\\xBE",iquest:"\\xBF",times:"\\xD7",divide:"\\xF7",forall:"\\u2200",part:"\\u2202",exist:"\\u2203",empty:"\\u2205",nabla:"\\u2207",isin:"\\u2208",notin:"\\u2209",ni:"\\u220B",prod:"\\u220F",sum:"\\u2211",minus:"\\u2212",lowast:"\\u2217",radic:"\\u221A",prop:"\\u221D",infin:"\\u221E",ang:"\\u2220",and:"\\u2227",or:"\\u2228",cap:"\\u2229",cup:"\\u222A",int:"\\u222B",there4:"\\u2234",sim:"\\u223C",cong:"\\u2245",asymp:"\\u2248",ne:"\\u2260",equiv:"\\u2261",le:"\\u2264",ge:"\\u2265",sub:"\\u2282",sup:"\\u2283",nsub:"\\u2284",sube:"\\u2286",supe:"\\u2287",oplus:"\\u2295",otimes:"\\u2297",perp:"\\u22A5",sdot:"\\u22C5",Alpha:"\\u0391",Beta:"\\u0392",Gamma:"\\u0393",Delta:"\\u0394",Epsilon:"\\u0395",Zeta:"\\u0396",Eta:"\\u0397",Theta:"\\u0398",Iota:"\\u0399",Kappa:"\\u039A",Lambda:"\\u039B",Mu:"\\u039C",Nu:"\\u039D",Xi:"\\u039E",Omicron:"\\u039F",Pi:"\\u03A0",Rho:"\\u03A1",Sigma:"\\u03A3",Tau:"\\u03A4",Upsilon:"\\u03A5",Phi:"\\u03A6",Chi:"\\u03A7",Psi:"\\u03A8",Omega:"\\u03A9",alpha:"\\u03B1",beta:"\\u03B2",gamma:"\\u03B3",delta:"\\u03B4",epsilon:"\\u03B5",zeta:"\\u03B6",eta:"\\u03B7",theta:"\\u03B8",iota:"\\u03B9",kappa:"\\u03BA",lambda:"\\u03BB",mu:"\\u03BC",nu:"\\u03BD",xi:"\\u03BE",omicron:"\\u03BF",pi:"\\u03C0",rho:"\\u03C1",sigmaf:"\\u03C2",sigma:"\\u03C3",tau:"\\u03C4",upsilon:"\\u03C5",phi:"\\u03C6",chi:"\\u03C7",psi:"\\u03C8",omega:"\\u03C9",thetasym:"\\u03D1",upsih:"\\u03D2",piv:"\\u03D6",OElig:"\\u0152",oelig:"\\u0153",Scaron:"\\u0160",scaron:"\\u0161",Yuml:"\\u0178",fnof:"\\u0192",circ:"\\u02C6",tilde:"\\u02DC",ensp:"\\u2002",emsp:"\\u2003",thinsp:"\\u2009",zwnj:"\\u200C",zwj:"\\u200D",lrm:"\\u200E",rlm:"\\u200F",ndash:"\\u2013",mdash:"\\u2014",lsquo:"\\u2018",rsquo:"\\u2019",sbquo:"\\u201A",ldquo:"\\u201C",rdquo:"\\u201D",bdquo:"\\u201E",dagger:"\\u2020",Dagger:"\\u2021",bull:"\\u2022",hellip:"\\u2026",permil:"\\u2030",prime:"\\u2032",Prime:"\\u2033",lsaquo:"\\u2039",rsaquo:"\\u203A",oline:"\\u203E",euro:"\\u20AC",trade:"\\u2122",larr:"\\u2190",uarr:"\\u2191",rarr:"\\u2192",darr:"\\u2193",harr:"\\u2194",crarr:"\\u21B5",lceil:"\\u2308",rceil:"\\u2309",lfloor:"\\u230A",rfloor:"\\u230B",loz:"\\u25CA",spades:"\\u2660",clubs:"\\u2663",hearts:"\\u2665",diams:"\\u2666"}});var Pe=ee(pe=>{var fe=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/,Oe=new RegExp("[\\\\-\\\\.0-9"+fe.source.slice(1,-1)+"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]"),Se=new RegExp("^"+fe.source+Oe.source+"*(?::"+fe.source+Oe.source+"*)?$"),z=0,O=1,$=2,j=3,F=4,L=5,G=6,te=7;function P(e,t){this.message=e,this.locator=t,Error.captureStackTrace&&Error.captureStackTrace(this,P)}P.prototype=new Error;P.prototype.name=P.name;function Me(){}Me.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),Fe(t,t={}),vt(e,t,n,r,this.errorHandler),r.endDocument()}};function vt(e,t,n,r,a){function i(v){if(v>65535){v-=65536;var C=55296+(v>>10),dt=56320+(v&1023);return String.fromCharCode(C,dt)}else return String.fromCharCode(v)}function o(v){var C=v.slice(1,-1);return C in n?n[C]:C.charAt(0)==="#"?i(parseInt(C.substr(1).replace("x","0x"))):(a.error("entity not found:"+v),v)}function c(v){if(v>m){var C=e.substring(m,v).replace(/&#?\\w+;/g,o);p&&l(m),r.characters(C,0,v-m),m=v}}function l(v,C){for(;v>=u&&(C=h.exec(e));)s=C.index,u=s+C[0].length,p.lineNumber++;p.columnNumber=v-s+1}for(var s=0,u=0,h=/.*(?:\\r\\n?|\\n)|.*$/g,p=r.locator,d=[{currentNSMap:t}],T={},m=0;;){try{var f=e.indexOf("<",m);if(f<0){if(!e.substr(m).match(/^\\s*$/)){var A=r.doc,be=A.createTextNode(e.substr(m));A.appendChild(be),r.currentElement=be}return}switch(f>m&&c(f),e.charAt(f+1)){case"/":var y=e.indexOf(">",f+3),_=e.substring(f+2,y),I=d.pop();y<0?(_=e.substring(f+2).replace(/[\\s<].*/,""),a.error("end tag name: "+_+" is not complete:"+I.tagName),y=f+1+_.length):_.match(/\\s</)&&(_=_.replace(/[\\s<].*/,""),a.error("end tag name: "+_+" maybe not complete"),y=f+1+_.length);var _e=I.localNSMap,Ce=I.tagName==_,pt=Ce||I.tagName&&I.tagName.toLowerCase()==_.toLowerCase();if(pt){if(r.endElement(I.uri,I.localName,_),_e)for(var mt in _e)r.endPrefixMapping(mt);Ce||a.fatalError("end tag name: "+_+" is not match the current start tagName:"+I.tagName)}else d.push(I);y++;break;case"?":p&&l(f),y=Dt(e,f,r);break;case"!":p&&l(f),y=yt(e,f,r,a);break;default:p&&l(f);var b=new Le,se=d[d.length-1].currentNSMap,y=gt(e,f,b,se,o,a),xe=b.length;if(!b.closed&&Nt(e,y,b.tagName,T)&&(b.closed=!0,n.nbsp||a.warning("unclosed xml attribute")),p&&xe){for(var ht=Ue(p,{}),ue=0;ue<xe;ue++){var Ae=b[ue];l(Ae.offset),Ae.locator=Ue(p,{})}r.locator=ht,$e(b,r,se)&&d.push(b),r.locator=p}else $e(b,r,se)&&d.push(b);b.uri==="http://www.w3.org/1999/xhtml"&&!b.closed?y=Et(e,y,b.tagName,o,r):y++}}catch(v){if(v instanceof P)throw v;a.error("element parse error: "+v),y=-1}y>m?m=y:c(Math.max(f,m)+1)}}function Ue(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function gt(e,t,n,r,a,i){function o(d,T,m){d in n.attributeNames&&i.fatalError("Attribute "+d+" redefined"),n.addValue(d,T,m)}for(var c,l,s=++t,u=z;;){var h=e.charAt(s);switch(h){case"=":if(u===O)c=e.slice(t,s),u=j;else if(u===$)u=j;else throw new Error("attribute equal must after attrName");break;case"'":case'"':if(u===j||u===O)if(u===O&&(i.warning('attribute value must after "="'),c=e.slice(t,s)),t=s+1,s=e.indexOf(h,t),s>0)l=e.slice(t,s).replace(/&#?\\w+;/g,a),o(c,l,t-1),u=L;else throw new Error("attribute value no end '"+h+"' match");else if(u==F)l=e.slice(t,s).replace(/&#?\\w+;/g,a),o(c,l,t),i.warning('attribute "'+c+'" missed start quot('+h+")!!"),t=s+1,u=L;else throw new Error('attribute value must after "="');break;case"/":switch(u){case z:n.setTagName(e.slice(t,s));case L:case G:case te:u=te,n.closed=!0;case F:case O:case $:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return i.error("unexpected end of input"),u==z&&n.setTagName(e.slice(t,s)),s;case">":switch(u){case z:n.setTagName(e.slice(t,s));case L:case G:case te:break;case F:case O:l=e.slice(t,s),l.slice(-1)==="/"&&(n.closed=!0,l=l.slice(0,-1));case $:u===$&&(l=c),u==F?(i.warning('attribute "'+l+'" missed quot(")!'),o(c,l.replace(/&#?\\w+;/g,a),t)):((r[""]!=="http://www.w3.org/1999/xhtml"||!l.match(/^(?:disabled|checked|selected)$/i))&&i.warning('attribute "'+l+'" missed value!! "'+l+'" instead!!'),o(l,l,t));break;case j:throw new Error("attribute value missed!!")}return s;case"\\x80":h=" ";default:if(h<=" ")switch(u){case z:n.setTagName(e.slice(t,s)),u=G;break;case O:c=e.slice(t,s),u=$;break;case F:var l=e.slice(t,s).replace(/&#?\\w+;/g,a);i.warning('attribute "'+l+'" missed quot(")!!'),o(c,l,t);case L:u=G;break}else switch(u){case $:var p=n.tagName;(r[""]!=="http://www.w3.org/1999/xhtml"||!c.match(/^(?:disabled|checked|selected)$/i))&&i.warning('attribute "'+c+'" missed value!! "'+c+'" instead2!!'),o(c,c,t),t=s,u=O;break;case L:i.warning('attribute space is required"'+c+'"!!');case G:u=O,t=s;break;case j:u=F,t=s;break;case te:throw new Error("elements closed character '/' and '>' must be connected to")}}s++}}function $e(e,t,n){for(var r=e.tagName,a=null,i=e.length;i--;){var o=e[i],c=o.qName,l=o.value,p=c.indexOf(":");if(p>0)var s=o.prefix=c.slice(0,p),u=c.slice(p+1),h=s==="xmlns"&&u;else u=c,s=null,h=c==="xmlns"&&"";o.localName=u,h!==!1&&(a==null&&(a={},Fe(n,n={})),n[h]=a[h]=l,o.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(h,l))}for(var i=e.length;i--;){o=e[i];var s=o.prefix;s&&(s==="xml"&&(o.uri="http://www.w3.org/XML/1998/namespace"),s!=="xmlns"&&(o.uri=n[s||""]))}var p=r.indexOf(":");p>0?(s=e.prefix=r.slice(0,p),u=e.localName=r.slice(p+1)):(s=null,u=e.localName=r);var d=e.uri=n[s||""];if(t.startElement(d,u,r,e),e.closed){if(t.endElement(d,u,r),a)for(s in a)t.endPrefixMapping(s)}else return e.currentNSMap=n,e.localNSMap=a,!0}function Et(e,t,n,r,a){if(/^(?:script|textarea)$/i.test(n)){var i=e.indexOf("</"+n+">",t),o=e.substring(t+1,i);if(/[&<]/.test(o))return/^script$/i.test(n)?(a.characters(o,0,o.length),i):(o=o.replace(/&#?\\w+;/g,r),a.characters(o,0,o.length),i)}return t+1}function Nt(e,t,n,r){var a=r[n];return a==null&&(a=e.lastIndexOf("</"+n+">"),a<t&&(a=e.lastIndexOf("</"+n)),r[n]=a),a<t}function Fe(e,t){for(var n in e)t[n]=e[n]}function yt(e,t,n,r){var a=e.charAt(t+2);switch(a){case"-":if(e.charAt(t+3)==="-"){var i=e.indexOf("-->",t+4);return i>t?(n.comment(e,t+4,i-t-4),i+3):(r.error("Unclosed comment"),-1)}else return-1;default:if(e.substr(t+3,6)=="CDATA["){var i=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,i-t-9),n.endCDATA(),i+3}var o=wt(e,t),c=o.length;if(c>1&&/!doctype/i.test(o[0][0])){var l=o[1][0],s=!1,u=!1;c>3&&(/^public$/i.test(o[2][0])?(s=o[3][0],u=c>4&&o[4][0]):/^system$/i.test(o[2][0])&&(u=o[3][0]));var h=o[c-1];return n.startDTD(l,s,u),n.endDTD(),h.index+h[0].length}}return-1}function Dt(e,t,n){var r=e.indexOf("?>",t);if(r){var a=e.substring(t,r).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(a){var i=a[0].length;return n.processingInstruction(a[1],a[2]),r+2}else return-1}return-1}function Le(){this.attributeNames={}}Le.prototype={setTagName:function(e){if(!Se.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},addValue:function(e,t,n){if(!Se.test(e))throw new Error("invalid attribute:"+e);this.attributeNames[e]=this.length,this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}};function wt(e,t){var n,r=[],a=/'[^']+'|"[^"]+"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;for(a.lastIndex=t,a.exec(e);n=a.exec(e);)if(r.push(n),n[1])return r}pe.XMLReader=Me;pe.ParseError=P});var we=ee(K=>{function W(e,t){for(var n in e)t[n]=e[n]}function D(e,t){var n=e.prototype;if(!(n instanceof t)){let a=function(){};var r=a;a.prototype=t.prototype,a=new a,W(n,a),e.prototype=n=a}n.constructor!=e&&(typeof e!="function"&&console.error("unknow Class:"+e),n.constructor=e)}var Tt="http://www.w3.org/1999/xhtml",w={},x=w.ELEMENT_NODE=1,k=w.ATTRIBUTE_NODE=2,ne=w.TEXT_NODE=3,ke=w.CDATA_SECTION_NODE=4,Ve=w.ENTITY_REFERENCE_NODE=5,bt=w.ENTITY_NODE=6,qe=w.PROCESSING_INSTRUCTION_NODE=7,Xe=w.COMMENT_NODE=8,Ye=w.DOCUMENT_NODE=9,ze=w.DOCUMENT_TYPE_NODE=10,R=w.DOCUMENT_FRAGMENT_NODE=11,_t=w.NOTATION_NODE=12,E={},g={},qt=E.INDEX_SIZE_ERR=(g[1]="Index size error",1),Xt=E.DOMSTRING_SIZE_ERR=(g[2]="DOMString size error",2),Ct=E.HIERARCHY_REQUEST_ERR=(g[3]="Hierarchy request error",3),Yt=E.WRONG_DOCUMENT_ERR=(g[4]="Wrong document",4),zt=E.INVALID_CHARACTER_ERR=(g[5]="Invalid character",5),jt=E.NO_DATA_ALLOWED_ERR=(g[6]="No data allowed",6),Gt=E.NO_MODIFICATION_ALLOWED_ERR=(g[7]="No modification allowed",7),xt=E.NOT_FOUND_ERR=(g[8]="Not found",8),Wt=E.NOT_SUPPORTED_ERR=(g[9]="Not supported",9),je=E.INUSE_ATTRIBUTE_ERR=(g[10]="Attribute in use",10),Qt=E.INVALID_STATE_ERR=(g[11]="Invalid state",11),Bt=E.SYNTAX_ERR=(g[12]="Syntax error",12),Zt=E.INVALID_MODIFICATION_ERR=(g[13]="Invalid modification",13),Kt=E.NAMESPACE_ERR=(g[14]="Invalid namespace",14),Jt=E.INVALID_ACCESS_ERR=(g[15]="Invalid access",15);function M(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,g[e]),this.message=g[e],Error.captureStackTrace&&Error.captureStackTrace(this,M);return n.code=e,t&&(this.message=this.message+": "+t),n}M.prototype=Error.prototype;W(E,M);function S(){}S.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)X(this[r],n,e,t);return n.join("")}};function V(e,t){this._node=e,this._refresh=t,me(this)}function me(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var n=e._refresh(e._node);ot(e,"length",n.length),W(n,e),e._inc=t}}V.prototype.item=function(e){return me(this),this[e]};D(V,S);function re(){}function Ge(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function We(e,t,n,r){if(r?t[Ge(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var a=e.ownerDocument;a&&(r&&Ke(a,e,r),At(a,e,n))}}function Qe(e,t,n){var r=Ge(t,n);if(r>=0){for(var a=t.length-1;r<a;)t[r]=t[++r];if(t.length=a,e){var i=e.ownerDocument;i&&(Ke(i,e,n),n.ownerElement=null)}}else throw M(xt,new Error(e.tagName+"@"+n))}re.prototype={length:0,item:S.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new M(je);var n=this.getNamedItem(e.nodeName);return We(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t=e.ownerElement,n;if(t&&t!=this._ownerElement)throw new M(je);return n=this.getNamedItemNS(e.namespaceURI,e.localName),We(this._ownerElement,this,e,n),n},removeNamedItem:function(e){var t=this.getNamedItem(e);return Qe(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return Qe(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}};function Be(e){if(this._features={},e)for(var t in e)this._features=e[t]}Be.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!!(n&&(!t||t in n))},createDocument:function(e,t,n){var r=new B;if(r.implementation=this,r.childNodes=new S,r.doctype=n,n&&r.appendChild(n),t){var a=r.createElementNS(e,t);r.appendChild(a)}return r},createDocumentType:function(e,t,n){var r=new Ee;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}};function N(){}N.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return He(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return Je(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(e){return De(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==ne&&e.nodeType==ne?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n){for(var r in n)if(n[r]==e)return r}t=t.nodeType==k?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==k?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){var t=this.lookupPrefix(e);return t==null}};function Ze(e){return e=="<"&&"&lt;"||e==">"&&"&gt;"||e=="&"&&"&amp;"||e=='"'&&"&quot;"||"&#"+e.charCodeAt()+";"}W(w,N);W(w,N.prototype);function Q(e,t){if(t(e))return!0;if(e=e.firstChild)do if(Q(e,t))return!0;while(e=e.nextSibling)}function B(){}function At(e,t,n){e&&e._inc++;var r=n.namespaceURI;r=="http://www.w3.org/2000/xmlns/"&&(t._nsMap[n.prefix?n.localName:""]=n.value)}function Ke(e,t,n,r){e&&e._inc++;var a=n.namespaceURI;a=="http://www.w3.org/2000/xmlns/"&&delete t._nsMap[n.prefix?n.localName:""]}function he(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var a=t.firstChild,i=0;a;)r[i++]=a,a=a.nextSibling;r.length=i}}}function Je(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,he(e.ownerDocument,e),t}function He(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===R){var a=t.firstChild;if(a==null)return t;var i=t.lastChild}else a=i=t;var o=n?n.previousSibling:e.lastChild;a.previousSibling=o,i.nextSibling=n,o?o.nextSibling=a:e.firstChild=a,n==null?e.lastChild=i:n.previousSibling=i;do a.parentNode=e;while(a!==i&&(a=a.nextSibling));return he(e.ownerDocument||e,e),t.nodeType==R&&(t.firstChild=t.lastChild=null),t}function It(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t);var r=e.lastChild}var r=e.lastChild;return t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,he(e.ownerDocument,e,t),t}B.prototype={nodeName:"#document",nodeType:Ye,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==R){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return this.documentElement==null&&e.nodeType==x&&(this.documentElement=e),He(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),Je(this,e)},importNode:function(e,t){return it(this,e,t)},getElementById:function(e){var t=null;return Q(this.documentElement,function(n){if(n.nodeType==x&&n.getAttribute("id")==e)return t=n,!0}),t},getElementsByClassName:function(e){var t=new RegExp("(^|\\\\s)"+e+"(\\\\s|$)");return new V(this,function(n){var r=[];return Q(n.documentElement,function(a){a!==n&&a.nodeType==x&&t.test(a.getAttribute("class"))&&r.push(a)}),r})},createElement:function(e){var t=new q;t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new S;var n=t.attributes=new re;return n._ownerElement=t,t},createDocumentFragment:function(){var e=new ie;return e.ownerDocument=this,e.childNodes=new S,e},createTextNode:function(e){var t=new de;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new ve;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new ge;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new ye;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new ae;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new Ne;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new q,r=t.split(":"),a=n.attributes=new re;return n.childNodes=new S,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=t,a._ownerElement=n,n},createAttributeNS:function(e,t){var n=new ae,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}};D(B,N);function q(){this._nsMap={}}q.prototype={nodeType:x,hasAttribute:function(e){return this.getAttributeNode(e)!=null},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===R?this.insertBefore(e,null):It(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return this.getAttributeNodeNS(e,t)!=null},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new V(this,function(t){var n=[];return Q(t,function(r){r!==t&&r.nodeType==x&&(e==="*"||r.tagName==e)&&n.push(r)}),n})},getElementsByTagNameNS:function(e,t){return new V(this,function(n){var r=[];return Q(n,function(a){a!==n&&a.nodeType===x&&(e==="*"||a.namespaceURI===e)&&(t==="*"||a.localName==t)&&r.push(a)}),r})}};B.prototype.getElementsByTagName=q.prototype.getElementsByTagName;B.prototype.getElementsByTagNameNS=q.prototype.getElementsByTagNameNS;D(q,N);function ae(){}ae.prototype.nodeType=k;D(ae,N);function Z(){}Z.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(g[Ct])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){var r=this.data.substring(0,e),a=this.data.substring(e+t);n=r+n+a,this.nodeValue=this.data=n,this.length=n.length}};D(Z,N);function de(){}de.prototype={nodeName:"#text",nodeType:ne,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}};D(de,Z);function ve(){}ve.prototype={nodeName:"#comment",nodeType:Xe};D(ve,Z);function ge(){}ge.prototype={nodeName:"#cdata-section",nodeType:ke};D(ge,Z);function Ee(){}Ee.prototype.nodeType=ze;D(Ee,N);function et(){}et.prototype.nodeType=_t;D(et,N);function tt(){}tt.prototype.nodeType=bt;D(tt,N);function Ne(){}Ne.prototype.nodeType=Ve;D(Ne,N);function ie(){}ie.prototype.nodeName="#document-fragment";ie.prototype.nodeType=R;D(ie,N);function ye(){}ye.prototype.nodeType=qe;D(ye,N);function nt(){}nt.prototype.serializeToString=function(e,t,n){return rt.call(e,t,n)};N.prototype.toString=rt;function rt(e,t){var n=[],r=this.nodeType==9&&this.documentElement||this,a=r.prefix,i=r.namespaceURI;if(i&&a==null){var a=r.lookupPrefix(i);if(a==null)var o=[{namespace:i,prefix:null}]}return X(this,n,e,t,o),n.join("")}function at(e,t,n){var r=e.prefix||"",a=e.namespaceURI;if(!r&&!a||r==="xml"&&a==="http://www.w3.org/XML/1998/namespace"||a=="http://www.w3.org/2000/xmlns/")return!1;for(var i=n.length;i--;){var o=n[i];if(o.prefix==r)return o.namespace!=a}return!0}function X(e,t,n,r,a){if(r)if(e=r(e),e){if(typeof e=="string"){t.push(e);return}}else return;switch(e.nodeType){case x:a||(a=[]);var i=a.length,o=e.attributes,c=o.length,l=e.firstChild,s=e.tagName;n=Tt===e.namespaceURI||n,t.push("<",s);for(var u=0;u<c;u++){var h=o.item(u);h.prefix=="xmlns"?a.push({prefix:h.localName,namespace:h.value}):h.nodeName=="xmlns"&&a.push({prefix:"",namespace:h.value})}for(var u=0;u<c;u++){var h=o.item(u);if(at(h,n,a)){var p=h.prefix||"",d=h.namespaceURI,T=p?" xmlns:"+p:" xmlns";t.push(T,'="',d,'"'),a.push({prefix:p,namespace:d})}X(h,t,n,r,a)}if(at(e,n,a)){var p=e.prefix||"",d=e.namespaceURI;if(d){var T=p?" xmlns:"+p:" xmlns";t.push(T,'="',d,'"'),a.push({prefix:p,namespace:d})}}if(l||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(s)){if(t.push(">"),n&&/^script$/i.test(s))for(;l;)l.data?t.push(l.data):X(l,t,n,r,a),l=l.nextSibling;else for(;l;)X(l,t,n,r,a),l=l.nextSibling;t.push("</",s,">")}else t.push("/>");return;case Ye:case R:for(var l=e.firstChild;l;)X(l,t,n,r,a),l=l.nextSibling;return;case k:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,Ze),'"');case ne:return t.push(e.data.replace(/[<&]/g,Ze).replace(/]]>/g,"]]&gt;"));case ke:return t.push("<![CDATA[",e.data,"]]>");case Xe:return t.push("<!--",e.data,"-->");case ze:var m=e.publicId,f=e.systemId;if(t.push("<!DOCTYPE ",e.name),m)t.push(" PUBLIC ",m),f&&f!="."&&t.push(" ",f),t.push(">");else if(f&&f!=".")t.push(" SYSTEM ",f,">");else{var A=e.internalSubset;A&&t.push(" [",A,"]"),t.push(">")}return;case qe:return t.push("<?",e.target," ",e.data,"?>");case Ve:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function it(e,t,n){var r;switch(t.nodeType){case x:r=t.cloneNode(!1),r.ownerDocument=e;case R:break;case k:n=!0;break}if(r||(r=t.cloneNode(!1)),r.ownerDocument=e,r.parentNode=null,n)for(var a=t.firstChild;a;)r.appendChild(it(e,a,n)),a=a.nextSibling;return r}function De(e,t,n){var r=new t.constructor;for(var a in t){var i=t[a];typeof i!="object"&&i!=r[a]&&(r[a]=i)}switch(t.childNodes&&(r.childNodes=new S),r.ownerDocument=e,r.nodeType){case x:var o=t.attributes,c=r.attributes=new re,l=o.length;c._ownerElement=r;for(var s=0;s<l;s++)r.setAttributeNode(De(e,o.item(s),!0));break;case k:n=!0}if(n)for(var u=t.firstChild;u;)r.appendChild(De(e,u,n)),u=u.nextSibling;return r}function ot(e,t,n){e[t]=n}try{if(Object.defineProperty){let e=function(t){switch(t.nodeType){case x:case R:var n=[];for(t=t.firstChild;t;)t.nodeType!==7&&t.nodeType!==8&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}};Ht=e,Object.defineProperty(V.prototype,"length",{get:function(){return me(this),this.$$length}}),Object.defineProperty(N.prototype,"textContent",{get:function(){return e(this)},set:function(t){switch(this.nodeType){case x:case R:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),ot=function(t,n,r){t["$$"+n]=r}}}catch(e){}var Ht;K.Node=N;K.DOMException=M;K.DOMImplementation=Be;K.XMLSerializer=nt});var ct=ee(H=>{function st(e){this.options=e||{locator:{}}}st.prototype.parseFromString=function(e,t){var n=this.options,r=new St,a=n.domBuilder||new J,i=n.errorHandler,o=n.locator,c=n.xmlns||{},l=/\\/x?html?$/.test(t),s=l?Ot.entityMap:{lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return o&&a.setDocumentLocator(o),r.errorHandler=Rt(i,a,o),r.domBuilder=n.domBuilder||a,l&&(c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",e&&typeof e=="string"?r.parse(e,c,s):r.errorHandler.error("invalid doc source"),a.doc};function Rt(e,t,n){if(!e){if(t instanceof J)return t;e=t}var r={},a=e instanceof Function;n=n||{};function i(o){var c=e[o];!c&&a&&(c=e.length==2?function(l){e(o,l)}:e),r[o]=c&&function(l){c("[xmldom "+o+"]	"+l+Te(n))}||function(){}}return i("warning"),i("error"),i("fatalError"),r}function J(){this.cdata=!1}function Y(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}J.prototype={startDocument:function(){this.doc=new Ut().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var a=this.doc,i=a.createElementNS(e,n||t),o=r.length;oe(this,i),this.currentElement=i,this.locator&&Y(this.locator,i);for(var c=0;c<o;c++){var e=r.getURI(c),l=r.getValue(c),n=r.getQName(c),s=a.createAttributeNS(e,n);this.locator&&Y(r.getLocator(c),s),s.value=s.nodeValue=l,i.setAttributeNode(s)}},endElement:function(e,t,n){var r=this.currentElement,a=r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&Y(this.locator,n),oe(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=ut.apply(this,arguments),e){if(this.cdata)var r=this.doc.createCDATASection(e);else var r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&Y(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=ut.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&Y(this.locator,r),oe(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var a=r.createDocumentType(e,t,n);this.locator&&Y(this.locator,a),oe(this,a)}},warning:function(e){console.warn("[xmldom warning]	"+e,Te(this.locator))},error:function(e){console.error("[xmldom error]	"+e,Te(this.locator))},fatalError:function(e){throw new Mt(e,this.locator)}};function Te(e){if(e)return\`
@\`+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function ut(e,t,n){return typeof e=="string"?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\\w+/g,function(e){J.prototype[e]=function(){return null}});function oe(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}var Ot=Re(),lt=Pe(),St=lt.XMLReader,Mt=lt.ParseError,Ut=H.DOMImplementation=we().DOMImplementation;H.XMLSerializer=we().XMLSerializer;H.DOMParser=st;H.__DOMHandler=J});function le(e,t){return(e%t+t)%t}function ce(e){return"ID_xyxyxyxyxyxy".replace(/[xy]/g,function(t){var n=Math.random()*16|0,r=t=="x"?n:n&3|8;return r.toString(16)})}var{DOMParser:$t}=ct(),Ft=/(<(span|div).*?<\\/(span|div)>)/g,U=self,ft=class{constructor(){this.queue=[];this.parsing=!1;this.parseTitle=!1;U.addEventListener("message",t=>{if(t.data.type=="options"){let{defaultCalendar:n,format:r,parseTitle:a,supportsTimelines:i,timelineTag:o}=t.data;this.defaultCalendar=n,this.format=r,this.parseTitle=a,this.supportsTimelines=i,this.timelineTag=o}}),U.addEventListener("message",t=>{if(t.data.type=="calendars"){let{calendars:n}=t.data;this.calendars=[...n]}}),U.addEventListener("message",t=>{t.data.type=="queue"&&this.add(...t.data.paths)})}add(...t){this.queue.push(...t),this.parsing||this.parse()}async parse(){for(this.parsing=!0;this.queue.length;){let t=this.queue.shift(),{data:n,file:r,cache:a,allTags:i}=await this.getFileData(t);this.parseFileForEvents(n,a,i,r)}this.parsing=!1,U.postMessage({type:"save"})}async getFileData(t){return new Promise(n=>{U.addEventListener("message",r=>{n(r.data)}),U.postMessage({path:t,type:"get"})})}getDataFromFrontmatter(t){let n,r;return t&&(n=t==null?void 0:t["fc-calendar"],r=t==null?void 0:t["fc-category"]),(!n||!n.length)&&(n=this.defaultCalendar),n=n.toLowerCase(),{calendar:this.calendars.find(i=>n==i.name.toLowerCase()),fcCategory:r}}parseFileForEvents(t,n,r,a){var s,u,h,p,d,T;let i=[],{frontmatter:o}=n!=null?n:{},{calendar:c,fcCategory:l}=this.getDataFromFrontmatter(o);if(!!c){this.supportsTimelines&&r&&r.includes(this.timelineTag)&&i.push(...this.parseTimelineEvents(c,t,a,l)),i.push(...this.parseFrontmatterEvents(c,l,o,a));for(let m of i){let f=c.events.find(A=>A.note==a.path&&(!m.timestamp||A.timestamp==m.timestamp));(f==null?void 0:f.date.day)==m.date.day&&(f==null?void 0:f.date.month)==m.date.month&&(f==null?void 0:f.date.year)==m.date.year&&((s=f==null?void 0:f.end)==null?void 0:s.day)==((u=m.end)==null?void 0:u.day)&&((h=f==null?void 0:f.end)==null?void 0:h.month)==((p=m.end)==null?void 0:p.month)&&((d=f==null?void 0:f.end)==null?void 0:d.year)==((T=m.end)==null?void 0:T.year)&&(f==null?void 0:f.category)==m.category&&(!m.timestamp&&!(f==null?void 0:f.timestamp)||(f==null?void 0:f.timestamp)==m.timestamp)||U.postMessage({type:"update",id:c.id,index:f?c.events.findIndex(A=>A.id==(f==null?void 0:f.id)):-1,event:m,original:f})}}}parseFrontmatterEvents(t,n,r,a){let{date:i,end:o}=this.getDates(r,this.parseTitle?a.basename:"");if(!i)return[];if((i==null?void 0:i.month)&&typeof(i==null?void 0:i.month)=="string"){let s=t.static.months.find(u=>u.name==i.month);s?i.month=t.static.months.indexOf(s):i.month=null}else(i==null?void 0:i.month)&&typeof(i==null?void 0:i.month)=="number"&&(i.month=le(i.month-1,t.static.months.length));if((o==null?void 0:o.month)&&typeof(o==null?void 0:o.month)=="string"){let s=t.static.months.find(u=>u.name==o.month);s?o.month=t.static.months.indexOf(s):o.month=null}else(o==null?void 0:o.month)&&typeof(o==null?void 0:o.month)=="number"&&(o.month=le(o.month-1,t.static.months.length));let c=Number(\`\${i.year}\${i.month}\${i.day}00\`),l=t.categories.find(s=>(s==null?void 0:s.name)==n);return[{id:ce(6),name:a.basename,note:a.path,date:i,end:o,category:l==null?void 0:l.id,description:""}]}parseTimelineEvents(t,n,r,a){var c;let i=[],o=new $t;for(let l of n.matchAll(Ft)){let s=o.parseFromString(l[0],"text/html"),u={class:s.documentElement.getAttribute("class"),dataset:{date:s.documentElement.getAttribute("data-date"),title:s.documentElement.getAttribute("data-title"),class:s.documentElement.getAttribute("data-class"),end:s.documentElement.getAttribute("data-end")},content:s.documentElement.textContent};if(u.class!=="ob-timelines"||!u.dataset.date)continue;let h=Number(u.dataset.date[0]=="-"?+u.dataset.date.substring(1,u.dataset.date.length).split("-").join("")*-1:+u.dataset.date.split("-").join("")),p=u.dataset.date.split(/(?<!^)-/),d={year:parseInt(p[0]),month:parseInt(p[1]),day:parseInt(p[2])},T;u.dataset.end&&(p=u.dataset.end.split(/(?<!^)-/),T={year:parseInt(p[0]),month:parseInt(p[1]),day:parseInt(p[2])});let m=t.categories.find(f=>(f==null?void 0:f.name)==a);i.push({id:ce(6),name:(c=u.dataset.title)!=null?c:r.basename,note:r.path,date:d,end:T,timestamp:h,category:m==null?void 0:m.id,description:u.content})}return i}parseDate(t){var n;if(typeof t=="string"){if(!/\\d+[./-]\\d+[./-]\\d+/.test(t))return;try{let[r]=(n=t.match(/\\d+[./-]\\d+[./-]\\d+/))!=null?n:[];if(!r)return;let a=r.split(/[.\\-\\/]/).map(o=>Number(o)),i=[...new Set(this.format.replace(/[^\\w]/g,"").toUpperCase().split(""))];return{year:a[i.indexOf("Y")],month:a[i.indexOf("M")],day:a[i.indexOf("D")]}}catch(r){return}}else return t}getDates(t={},n){let r="fc-date"in t?"fc-date":"fc-start",a;t&&r in t&&(a=t[r]),a||(a=n);let i=this.parseDate(a),o="fc-end"in t?t["fc-end"]:null,c=this.parseDate(o);return{date:i,end:c}}};new ft;
`);
}

// src/watcher/watcher.ts
var Watcher = class extends import_obsidian26.Component {
  constructor(plugin) {
    super();
    this.plugin = plugin;
    this.parsing = new Set();
    this.tree = new Map();
    this.worker = new Worker2();
  }
  get calendars() {
    return this.plugin.data.calendars;
  }
  get metadataCache() {
    return this.plugin.app.metadataCache;
  }
  get vault() {
    return this.plugin.app.vault;
  }
  onload() {
    this.worker.postMessage({
      type: "calendars",
      calendars: this.calendars
    });
    this.registerEvent(this.plugin.app.workspace.on("fantasy-calendars-updated", () => {
      this.worker.postMessage({
        type: "calendars",
        calendars: this.calendars
      });
    }));
    this.worker.postMessage({
      type: "options",
      parseTitle: this.plugin.data.parseDates,
      format: this.plugin.format,
      defaultCalendar: this.plugin.defaultCalendar?.name,
      supportsTimelines: this.plugin.data.supportTimelines,
      timelineTag: this.plugin.data.timelineTag
    });
    this.registerEvent(this.plugin.app.workspace.on("fantasy-calendar-settings-change", () => {
      this.worker.postMessage({
        type: "options",
        parseTitle: this.plugin.data.parseDates,
        format: this.plugin.format,
        defaultCalendar: this.plugin.defaultCalendar?.name,
        supportsTimelines: this.plugin.data.supportTimelines,
        timelineTag: this.plugin.data.timelineTag
      });
    }));
    this.registerEvent(this.metadataCache.on("changed", (file) => {
      const parsing2 = new Set();
      for (const path of this.getFiles(file))
        parsing2.add(path);
      this.startParsing([...parsing2]);
    }));
    this.registerEvent(this.vault.on("rename", (abstractFile, oldPath) => {
      if (!this.calendars.length)
        return;
      if (!(abstractFile instanceof import_obsidian26.TFile))
        return;
      this.worker.postMessage({
        type: "rename",
        file: {
          path: abstractFile.path,
          basename: abstractFile.basename,
          oldPath
        },
        sourceCalendars: this.calendars
      });
    }));
    this.registerEvent(this.vault.on("delete", (abstractFile) => {
      if (!(abstractFile instanceof import_obsidian26.TFile))
        return;
      for (let calendar of this.calendars) {
        for (let event of calendar.events) {
          if (!event.note)
            continue;
          if (event.note === abstractFile.path) {
            event.note = null;
          }
        }
      }
      this.plugin.saveCalendar();
    }));
    this.worker.addEventListener("message", async (event) => {
      if (event.data.type == "get") {
        const { path } = event.data;
        const data = await this.getFileInformation(path);
        this.worker.postMessage({
          type: "file",
          path,
          ...data
        });
      }
    });
    this.worker.addEventListener("message", async (evt) => {
      if (evt.data.type == "update") {
        const { id, index, event, original } = evt.data;
        const calendar = this.calendars.find((c) => c.id == id);
        if (!calendar)
          return;
        calendar.events.splice(index, index >= 0 ? 1 : 0, event);
        this.addToTree(calendar, event);
        if (original) {
          this.addToTree(calendar, original);
        }
      }
    });
    this.worker.addEventListener("message", async (evt) => {
      if (evt.data.type == "save") {
        this.plugin.app.workspace.trigger("fantasy-calendars-event-update", this.tree);
        this.tree = new Map();
        await this.plugin.saveCalendar();
      }
    });
    if (!this.calendars.length)
      return;
    const folder = this.vault.getAbstractFileByPath(this.plugin.data.path);
    if (!folder || !(folder instanceof import_obsidian26.TFolder))
      return;
    const parsing = new Set();
    for (const path of this.getFiles(folder))
      parsing.add(path);
    this.startParsing([...parsing]);
  }
  addToTree(calendar, event) {
    if (!this.tree.has(calendar.id)) {
      this.tree.set(calendar.id, new Map());
    }
    const calendarTree = this.tree.get(calendar.id);
    if (!calendarTree.has(event.date.year)) {
      calendarTree.set(event.date.year, new Set());
    }
    const yearSet = calendarTree.get(event.date.year);
    this.tree.set(calendar.id, calendarTree.set(event.date.year, yearSet.add(event.date.month)));
  }
  startParsing(paths) {
    if (paths.length) {
      this.worker.postMessage({
        type: "queue",
        paths
      });
    }
  }
  async getFileInformation(path) {
    const file = this.plugin.app.vault.getAbstractFileByPath(path);
    if (!(file instanceof import_obsidian26.TFile))
      return;
    const cache = this.metadataCache.getFileCache(file);
    const allTags = (0, import_obsidian26.getAllTags)(cache);
    const data = await this.vault.cachedRead(file);
    return {
      cache,
      file: { path: file.path, basename: file.basename },
      allTags,
      data
    };
  }
  getFiles(folder) {
    if (!this.plugin.data.autoParse)
      return [];
    let files = [];
    if (folder instanceof import_obsidian26.TFolder) {
      for (const child of folder.children) {
        files.push(...this.getFiles(child));
      }
    }
    if (folder instanceof import_obsidian26.TFile) {
      files.push(folder.path);
    }
    return files;
  }
  onunload() {
    this.worker.terminate();
    this.worker = null;
  }
};

// src/api/api.ts
var API = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  getMoons(date, name) {
    const calendar = name ? this.plugin.data.calendars.find(({ name: c_name }) => c_name == name) : this.plugin.defaultCalendar ?? this.plugin.defaultCalendar;
    const helper = this._getHelper(calendar);
    const dateToGet = date ? date : helper.current;
    const day = helper.getDayForDate(dateToGet);
    let moons = [];
    for (const [moon, phase] of day.moons) {
      const target = createSpan();
      new Moon_default({
        target,
        props: {
          moon,
          phase
        }
      });
      moons.push({ icon: target, moon, phase });
    }
    return moons;
  }
  _getHelper(calendar = this.plugin.defaultCalendar) {
    return new CalendarHelper(calendar, this.plugin);
  }
};

// src/main.ts
var import_fast_copy3 = __toModule(require_fast_copy());
var MODIFIER_KEY2 = import_obsidian27.Platform.isMacOS ? "Meta" : "Control";
var DEFAULT_CALENDAR = {
  name: null,
  description: null,
  id: null,
  static: {
    incrementDay: false,
    firstWeekDay: null,
    overflow: true,
    weekdays: [],
    months: [],
    moons: [],
    displayMoons: true,
    displayDayNumber: false,
    leapDays: [],
    eras: []
  },
  current: {
    year: 1,
    month: null,
    day: null
  },
  events: [],
  categories: []
};
var DEFAULT_DATA = {
  calendars: [],
  currentCalendar: null,
  defaultCalendar: null,
  eventPreview: false,
  configDirectory: null,
  path: "/",
  parseDates: false,
  dateFormat: "YYYY-MM-DD",
  dailyNotes: false,
  version: {
    major: null,
    minor: null,
    patch: null
  },
  supportTimelines: false,
  timelineTag: "#timeline",
  syncTimelines: true,
  autoParse: true,
  settingsToggleState: {
    calendars: false,
    events: false
  }
};
var FantasyCalendar2 = class extends import_obsidian27.Plugin {
  constructor() {
    super(...arguments);
    this.api = new API(this);
    this.watcher = new Watcher(this);
  }
  async addNewCalendar(calendar) {
    this.data.calendars.push({ ...calendar });
    if (!this.data.defaultCalendar) {
      this.data.defaultCalendar = calendar.id;
    }
    await this.saveCalendar();
  }
  get currentCalendar() {
    return this.data.calendars.find((c) => c.id == this.data.currentCalendar);
  }
  get canUseDailyNotes() {
    return this.dailyNotes._loaded;
  }
  get dailyNotes() {
    return this.app.internalPlugins.getPluginById("daily-notes");
  }
  get canUseTimelines() {
    return this.app.plugins.getPlugin("obsidian-timelines") != null;
  }
  get syncTimelines() {
    return this.data.syncTimelines && this.canUseTimelines;
  }
  get timelineTag() {
    if (this.syncTimelines) {
      return this.app.plugins.getPlugin("obsidian-timelines").settings.timelineTag;
    } else {
      return this.data.timelineTag;
    }
  }
  get format() {
    return (this.data.dailyNotes && this.canUseDailyNotes ? this.dailyNotes.instance.options.format : this.data.dateFormat) ?? "YYYY-MM-DD";
  }
  get defaultCalendar() {
    return this.data.calendars.find((c) => c.id == this.data.defaultCalendar) ?? this.data.calendars[0];
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE);
    const leaf = leaves.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof FantasyCalendarView)
      return leaf.view;
  }
  get full() {
    const leaves = this.app.workspace.getLeavesOfType(FULL_VIEW);
    const leaf = leaves.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof FantasyCalendarView)
      return leaf.view;
  }
  async onload() {
    console.log("Loading Fantasy Calendars v" + this.manifest.version);
    await this.loadSettings();
    this.watcher.load();
    this.addSettingTab(new FantasyCalendarSettings(this));
    this.registerView(VIEW_TYPE, (leaf) => new FantasyCalendarView(this, leaf));
    this.app.workspace.onLayoutReady(() => this.addCalendarView(true));
    this.addRibbonIcon(VIEW_TYPE, "Open Large Fantasy Calendar", (evt) => {
      this.app.workspace.getLeaf(evt.getModifierState(MODIFIER_KEY2)).setViewState({ type: FULL_VIEW });
    });
    this.registerView(FULL_VIEW, (leaf) => {
      return new FantasyCalendarView(this, leaf, { full: true });
    });
    this.addCommand({
      id: "open-fantasy-calendar",
      name: "Open Fantasy Calendar",
      callback: () => {
        this.addCalendarView();
      }
    });
    this.addCommand({
      id: "open-big-fantasy-calendar",
      name: "Open Large Fantasy Calendar",
      callback: () => {
        this.addFullCalendarView();
      }
    });
    this.addCommand({
      id: "toggle-moons",
      name: "Toggle Moons",
      checkCallback: (checking) => {
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE);
        if (views && views.length) {
          if (!checking) {
            views[0].view.toggleMoons();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "view-date",
      name: "View Date",
      checkCallback: (checking) => {
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE);
        if (views && views.length) {
          if (!checking) {
            views[0].view.openDate();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "view-date",
      name: "View Note Event",
      checkCallback: (checking) => {
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE);
        if (views && views.length && views[0].view instanceof FantasyCalendarView) {
          const file = this.app.workspace.getActiveFile();
          if (file) {
            const event = views[0].view.calendar.events.find((e) => e.note == file.path);
            if (event) {
              if (!checking) {
                views[0].view.openDay(event.date);
              }
              return true;
            }
          }
        }
      }
    });
  }
  async onunload() {
    console.log("Unloading Fantasy Calendars v" + this.manifest.version);
    this.app.workspace.getLeavesOfType(VIEW_TYPE).forEach((leaf) => leaf.detach());
    this.app.workspace.getLeavesOfType(FULL_VIEW).forEach((leaf) => leaf.detach());
    this.watcher.unload();
  }
  async addCalendarView(startup = false) {
    if (startup && this.app.workspace.getLeavesOfType(VIEW_TYPE)?.length)
      return;
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE
    });
    if (this.view)
      this.app.workspace.revealLeaf(this.view.leaf);
  }
  async addFullCalendarView(startup = false) {
    if (startup && this.app.workspace.getLeavesOfType(FULL_VIEW)?.length)
      return;
    this.app.workspace.getLeaf(false).setViewState({ type: FULL_VIEW });
    if (this.full)
      this.app.workspace.revealLeaf(this.full.leaf);
  }
  async loadSettings() {
    this.data = {
      ...(0, import_fast_copy3.default)(DEFAULT_DATA),
      ...await this.loadData()
    };
    if (this.configDirectory && await this.app.vault.adapter.exists(this.configFilePath)) {
      this.data = Object.assign({}, this.data, JSON.parse(await this.app.vault.adapter.read(this.configFilePath)));
    }
    if (!this.data.defaultCalendar && this.data.calendars.length) {
      this.data.defaultCalendar = this.data.calendars[0].id;
    }
  }
  async saveCalendar() {
    await this.saveSettings();
    this.app.workspace.trigger("fantasy-calendars-updated");
  }
  get configDirectory() {
    if (!this.data || !this.data.configDirectory)
      return;
    return `${this.data.configDirectory}/plugins/fantasy-calendar`;
  }
  get configFilePath() {
    if (!this.data.configDirectory)
      return;
    return `${this.configDirectory}/data.json`;
  }
  async saveSettings() {
    await this.saveData(this.data);
    this.app.workspace.trigger("fantasy-calendar-settings-change");
  }
  async saveData(data) {
    if (this.configDirectory) {
      try {
        if (!await this.app.vault.adapter.exists(this.configDirectory)) {
          await this.app.vault.adapter.mkdir(this.configDirectory);
        }
        await this.app.vault.adapter.write(this.configFilePath, JSON.stringify(data));
      } catch (e) {
        console.error(e);
        new import_obsidian27.Notice("There was an error saving into the configured directory.");
      }
    }
    await super.saveData(data);
  }
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */
//# sourceMappingURL=data:application/json;base64,
