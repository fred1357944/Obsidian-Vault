/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => divideAndConquer
});
var import_obsidian = __toModule(require("obsidian"));
var divideAndConquer = class extends import_obsidian.Plugin {
  onunload() {
    return __async(this, null, function* () {
      console.log("Divide & Conquer Plugin unloaded.");
    });
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Divide & Conquer Plugin loaded.");
      this.addCommand({
        id: "count-enabled-and-disabled",
        name: "Count enabled and disabled plugins",
        callback: () => this.divideConquer("count")
      });
      this.addCommand({
        id: "disable-all",
        name: "Disable all plugins",
        callback: () => this.divideConquer("disable", "all")
      });
      this.addCommand({
        id: "enable-all",
        name: "Enable all plugins",
        callback: () => this.divideConquer("enable", "all")
      });
      this.addCommand({
        id: "toggle-all",
        name: "Toggle all plugins (Disable enabled plugins & enable disabled ones)",
        callback: () => this.divideConquer("toggle", "all")
      });
      this.addCommand({
        id: "disable-half",
        name: "Disable half of enabled plugins",
        callback: () => this.divideConquer("disable", "half")
      });
      this.addCommand({
        id: "enable-half",
        name: "Enable half of disabled plugins",
        callback: () => this.divideConquer("enable", "half")
      });
      this.addCommand({
        id: "count-enabled-and-disabled-snippets",
        name: "Count enabled and disabled snippets",
        callback: () => this.divideConquerSnippets("count")
      });
      this.addCommand({
        id: "disable-all-snippets",
        name: "Disable all snippets",
        callback: () => this.divideConquerSnippets("disable", "all")
      });
      this.addCommand({
        id: "enable-all-snippets",
        name: "Enable all snippets",
        callback: () => this.divideConquerSnippets("enable", "all")
      });
      this.addCommand({
        id: "toggle-all-snippets",
        name: "Toggle all plugins (Disable enabled snippets & enable disabled ones)",
        callback: () => this.divideConquerSnippets("toggle", "all")
      });
      this.addCommand({
        id: "disable-half-snippets",
        name: "Disable half of enabled snippets",
        callback: () => this.divideConquerSnippets("disable", "half")
      });
      this.addCommand({
        id: "enable-half-snippets",
        name: "Enable half of disabled snippets",
        callback: () => this.divideConquerSnippets("enable", "half")
      });
    });
  }
  divideConquer(mode, scope) {
    return __async(this, null, function* () {
      console.log("Mode: " + mode + ", Scope: " + scope);
      const reloadDelay = 2e3;
      const pluginsToIgnore = [
        "hot-reload",
        "obsidian-divide-and-conquer"
      ];
      const tplugins = this.app.plugins;
      let noticeText;
      const allPlugins = Object.keys(tplugins.manifests).filter((id) => !pluginsToIgnore.includes(id));
      const enabledPlugins = Object.keys(tplugins.plugins).filter((id) => !pluginsToIgnore.includes(id));
      const disabledPlugins = allPlugins.filter((id) => !enabledPlugins.includes(id));
      if (mode === "count") {
        noticeText = "Total: " + allPlugins.length + "\nDisabled: " + disabledPlugins.length + "\nEnabled: " + enabledPlugins.length;
      }
      if (scope === "all") {
        if (mode === "enable") {
          for (const id of disabledPlugins)
            yield tplugins.enablePluginAndSave(id);
        } else if (mode === "disable") {
          for (const id of enabledPlugins)
            yield tplugins.disablePluginAndSave(id);
        } else if (mode === "toggle") {
          for (const id of enabledPlugins)
            yield tplugins.disablePluginAndSave(id);
          for (const id of disabledPlugins)
            yield tplugins.enablePluginAndSave(id);
        }
        noticeText = mode.charAt(0).toUpperCase() + mode.slice(1, -1) + "ing all " + allPlugins.length.toString() + " plugins";
      }
      if (scope === "half") {
        if (mode === "enable") {
          const disabled = disabledPlugins.length;
          const half = Math.ceil(disabled / 2);
          const halfOfDisabled = disabledPlugins.slice(0, half);
          for (const id of halfOfDisabled)
            yield tplugins.enablePluginAndSave(id);
          noticeText = "Enabling " + half.toString() + " out of " + disabled.toString() + " disabled plugins.";
        } else if (mode === "disable") {
          const enabled = enabledPlugins.length;
          const half = Math.ceil(enabled / 2);
          const halfOfEnabled = enabledPlugins.slice(0, half);
          for (const id of halfOfEnabled)
            yield tplugins.disablePluginAndSave(id);
          noticeText = "Disabling " + half.toString() + " out of " + enabled.toString() + " enabled plugins.";
        }
      }
      const reloadAfterwards = mode === "toggle" || mode === "disable";
      if (reloadAfterwards)
        noticeText += "\n\nReloading Obsidian...";
      new import_obsidian.Notice(noticeText);
      if (reloadAfterwards) {
        setTimeout(() => {
          this.app.commands.executeCommandById("app:reload");
        }, reloadDelay);
      }
    });
  }
  divideConquerSnippets(mode, scope) {
    return __async(this, null, function* () {
      console.log("Mode: " + mode + ", Scope: " + scope);
      const reloadDelay = 2e3;
      let noticeText;
      const allSnippets = this.app.customCss.snippets;
      const enabledSnippets = allSnippets.filter((snippet) => this.app.customCss.enabledSnippets.has(snippet));
      const disabledSnippets = allSnippets.filter((snippet) => !this.app.customCss.enabledSnippets.has(snippet));
      if (mode === "count") {
        noticeText = "Total: " + allSnippets.length + "\nDisabled: " + disabledSnippets.length + "\nEnabled: " + enabledSnippets.length;
      }
      if (scope === "all") {
        if (mode === "enable") {
          for (const snippet of disabledSnippets)
            yield this.app.customCss.setCssEnabledStatus(snippet, true);
        } else if (mode === "disable") {
          for (const snippet of enabledSnippets)
            yield this.app.customCss.setCssEnabledStatus(snippet, false);
        } else if (mode === "toggle") {
          for (const snippet of enabledSnippets)
            yield this.app.customCss.setCssEnabledStatus(snippet, false);
          for (const snippet of disabledSnippets)
            yield this.app.customCss.setCssEnabledStatus(snippet, true);
        }
        noticeText = mode.charAt(0).toUpperCase() + mode.slice(1, -1) + "ing all " + allSnippets.length.toString() + " snippets";
      }
      if (scope === "half") {
        if (mode === "enable") {
          const disabled = disabledSnippets.length;
          const half = Math.ceil(disabled / 2);
          const halfOfDisabled = disabledSnippets.slice(0, half);
          for (const snippet of halfOfDisabled)
            yield this.app.customCss.setCssEnabledStatus(snippet, true);
          noticeText = "Enabling " + half.toString() + " out of " + disabled.toString() + " disabled snippets.";
        } else if (mode === "disable") {
          const enabled = enabledSnippets.length;
          const half = Math.ceil(enabled / 2);
          const halfOfEnabled = enabledSnippets.slice(0, half);
          for (const snippet of halfOfEnabled)
            yield this.app.customCss.setCssEnabledStatus(snippet, false);
          noticeText = "Disabling " + half.toString() + " out of " + enabled.toString() + " enabled snippets.";
        }
      }
      new import_obsidian.Notice(noticeText);
    });
  }
};
