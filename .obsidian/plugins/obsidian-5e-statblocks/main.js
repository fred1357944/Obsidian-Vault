/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/dom-to-image/src/dom-to-image.js
var require_dom_to_image = __commonJS({
  "node_modules/dom-to-image/src/dom-to-image.js"(exports, module2) {
    (function(global2) {
      "use strict";
      var util = newUtil();
      var inliner = newInliner();
      var fontFaces = newFontFaces();
      var images = newImages();
      var defaultOptions = {
        imagePlaceholder: void 0,
        cacheBust: false
      };
      var domtoimage2 = {
        toSvg,
        toPng,
        toJpeg,
        toBlob,
        toPixelData,
        impl: {
          fontFaces,
          images,
          util,
          inliner,
          options: {}
        }
      };
      if (typeof module2 !== "undefined")
        module2.exports = domtoimage2;
      else
        global2.domtoimage = domtoimage2;
      function toSvg(node, options) {
        options = options || {};
        copyOptions(options);
        return Promise.resolve(node).then(function(node2) {
          return cloneNode(node2, options.filter, true);
        }).then(embedFonts).then(inlineImages).then(applyOptions).then(function(clone) {
          return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node));
        });
        function applyOptions(clone) {
          if (options.bgcolor)
            clone.style.backgroundColor = options.bgcolor;
          if (options.width)
            clone.style.width = options.width + "px";
          if (options.height)
            clone.style.height = options.height + "px";
          if (options.style)
            Object.keys(options.style).forEach(function(property) {
              clone.style[property] = options.style[property];
            });
          return clone;
        }
      }
      function toPixelData(node, options) {
        return draw(node, options || {}).then(function(canvas) {
          return canvas.getContext("2d").getImageData(0, 0, util.width(node), util.height(node)).data;
        });
      }
      function toPng(node, options) {
        return draw(node, options || {}).then(function(canvas) {
          return canvas.toDataURL();
        });
      }
      function toJpeg(node, options) {
        options = options || {};
        return draw(node, options).then(function(canvas) {
          return canvas.toDataURL("image/jpeg", options.quality || 1);
        });
      }
      function toBlob(node, options) {
        return draw(node, options || {}).then(util.canvasToBlob);
      }
      function copyOptions(options) {
        if (typeof options.imagePlaceholder === "undefined") {
          domtoimage2.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;
        } else {
          domtoimage2.impl.options.imagePlaceholder = options.imagePlaceholder;
        }
        if (typeof options.cacheBust === "undefined") {
          domtoimage2.impl.options.cacheBust = defaultOptions.cacheBust;
        } else {
          domtoimage2.impl.options.cacheBust = options.cacheBust;
        }
      }
      function draw(domNode, options) {
        return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function(image) {
          var canvas = newCanvas(domNode);
          canvas.getContext("2d").drawImage(image, 0, 0);
          return canvas;
        });
        function newCanvas(domNode2) {
          var canvas = document.createElement("canvas");
          canvas.width = options.width || util.width(domNode2);
          canvas.height = options.height || util.height(domNode2);
          if (options.bgcolor) {
            var ctx = canvas.getContext("2d");
            ctx.fillStyle = options.bgcolor;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
          return canvas;
        }
      }
      function cloneNode(node, filter, root) {
        if (!root && filter && !filter(node))
          return Promise.resolve();
        return Promise.resolve(node).then(makeNodeCopy).then(function(clone) {
          return cloneChildren(node, clone, filter);
        }).then(function(clone) {
          return processClone(node, clone);
        });
        function makeNodeCopy(node2) {
          if (node2 instanceof HTMLCanvasElement)
            return util.makeImage(node2.toDataURL());
          return node2.cloneNode(false);
        }
        function cloneChildren(original, clone, filter2) {
          var children2 = original.childNodes;
          if (children2.length === 0)
            return Promise.resolve(clone);
          return cloneChildrenInOrder(clone, util.asArray(children2), filter2).then(function() {
            return clone;
          });
          function cloneChildrenInOrder(parent, children3, filter3) {
            var done = Promise.resolve();
            children3.forEach(function(child) {
              done = done.then(function() {
                return cloneNode(child, filter3);
              }).then(function(childClone) {
                if (childClone)
                  parent.appendChild(childClone);
              });
            });
            return done;
          }
        }
        function processClone(original, clone) {
          if (!(clone instanceof Element))
            return clone;
          return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function() {
            return clone;
          });
          function cloneStyle() {
            copyStyle(window.getComputedStyle(original), clone.style);
            function copyStyle(source, target) {
              if (source.cssText)
                target.cssText = source.cssText;
              else
                copyProperties(source, target);
              function copyProperties(source2, target2) {
                util.asArray(source2).forEach(function(name) {
                  target2.setProperty(name, source2.getPropertyValue(name), source2.getPropertyPriority(name));
                });
              }
            }
          }
          function clonePseudoElements() {
            [":before", ":after"].forEach(function(element2) {
              clonePseudoElement(element2);
            });
            function clonePseudoElement(element2) {
              var style = window.getComputedStyle(original, element2);
              var content = style.getPropertyValue("content");
              if (content === "" || content === "none")
                return;
              var className = util.uid();
              clone.className = clone.className + " " + className;
              var styleElement = document.createElement("style");
              styleElement.appendChild(formatPseudoElementStyle(className, element2, style));
              clone.appendChild(styleElement);
              function formatPseudoElementStyle(className2, element3, style2) {
                var selector = "." + className2 + ":" + element3;
                var cssText = style2.cssText ? formatCssText(style2) : formatCssProperties(style2);
                return document.createTextNode(selector + "{" + cssText + "}");
                function formatCssText(style3) {
                  var content2 = style3.getPropertyValue("content");
                  return style3.cssText + " content: " + content2 + ";";
                }
                function formatCssProperties(style3) {
                  return util.asArray(style3).map(formatProperty).join("; ") + ";";
                  function formatProperty(name) {
                    return name + ": " + style3.getPropertyValue(name) + (style3.getPropertyPriority(name) ? " !important" : "");
                  }
                }
              }
            }
          }
          function copyUserInput() {
            if (original instanceof HTMLTextAreaElement)
              clone.innerHTML = original.value;
            if (original instanceof HTMLInputElement)
              clone.setAttribute("value", original.value);
          }
          function fixSvg() {
            if (!(clone instanceof SVGElement))
              return;
            clone.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            if (!(clone instanceof SVGRectElement))
              return;
            ["width", "height"].forEach(function(attribute) {
              var value = clone.getAttribute(attribute);
              if (!value)
                return;
              clone.style.setProperty(attribute, value);
            });
          }
        }
      }
      function embedFonts(node) {
        return fontFaces.resolveAll().then(function(cssText) {
          var styleNode = document.createElement("style");
          node.appendChild(styleNode);
          styleNode.appendChild(document.createTextNode(cssText));
          return node;
        });
      }
      function inlineImages(node) {
        return images.inlineAll(node).then(function() {
          return node;
        });
      }
      function makeSvgDataUri(node, width, height) {
        return Promise.resolve(node).then(function(node2) {
          node2.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
          return new XMLSerializer().serializeToString(node2);
        }).then(util.escapeXhtml).then(function(xhtml) {
          return '<foreignObject x="0" y="0" width="100%" height="100%">' + xhtml + "</foreignObject>";
        }).then(function(foreignObject) {
          return '<svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '">' + foreignObject + "</svg>";
        }).then(function(svg) {
          return "data:image/svg+xml;charset=utf-8," + svg;
        });
      }
      function newUtil() {
        return {
          escape,
          parseExtension,
          mimeType,
          dataAsUrl,
          isDataUrl,
          canvasToBlob,
          resolveUrl,
          getAndEncode,
          uid: uid(),
          delay,
          asArray,
          escapeXhtml,
          makeImage,
          width,
          height
        };
        function mimes() {
          var WOFF = "application/font-woff";
          var JPEG = "image/jpeg";
          return {
            "woff": WOFF,
            "woff2": WOFF,
            "ttf": "application/font-truetype",
            "eot": "application/vnd.ms-fontobject",
            "png": "image/png",
            "jpg": JPEG,
            "jpeg": JPEG,
            "gif": "image/gif",
            "tiff": "image/tiff",
            "svg": "image/svg+xml"
          };
        }
        function parseExtension(url) {
          var match = /\.([^\.\/]*?)$/g.exec(url);
          if (match)
            return match[1];
          else
            return "";
        }
        function mimeType(url) {
          var extension = parseExtension(url).toLowerCase();
          return mimes()[extension] || "";
        }
        function isDataUrl(url) {
          return url.search(/^(data:)/) !== -1;
        }
        function toBlob2(canvas) {
          return new Promise(function(resolve) {
            var binaryString = window.atob(canvas.toDataURL().split(",")[1]);
            var length = binaryString.length;
            var binaryArray = new Uint8Array(length);
            for (var i = 0; i < length; i++)
              binaryArray[i] = binaryString.charCodeAt(i);
            resolve(new Blob([binaryArray], {
              type: "image/png"
            }));
          });
        }
        function canvasToBlob(canvas) {
          if (canvas.toBlob)
            return new Promise(function(resolve) {
              canvas.toBlob(resolve);
            });
          return toBlob2(canvas);
        }
        function resolveUrl(url, baseUrl) {
          var doc = document.implementation.createHTMLDocument();
          var base = doc.createElement("base");
          doc.head.appendChild(base);
          var a = doc.createElement("a");
          doc.body.appendChild(a);
          base.href = baseUrl;
          a.href = url;
          return a.href;
        }
        function uid() {
          var index = 0;
          return function() {
            return "u" + fourRandomChars() + index++;
            function fourRandomChars() {
              return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
            }
          };
        }
        function makeImage(uri) {
          return new Promise(function(resolve, reject) {
            var image = new Image();
            image.onload = function() {
              resolve(image);
            };
            image.onerror = reject;
            image.src = uri;
          });
        }
        function getAndEncode(url) {
          var TIMEOUT = 3e4;
          if (domtoimage2.impl.options.cacheBust) {
            url += (/\?/.test(url) ? "&" : "?") + new Date().getTime();
          }
          return new Promise(function(resolve) {
            var request = new XMLHttpRequest();
            request.onreadystatechange = done;
            request.ontimeout = timeout;
            request.responseType = "blob";
            request.timeout = TIMEOUT;
            request.open("GET", url, true);
            request.send();
            var placeholder;
            if (domtoimage2.impl.options.imagePlaceholder) {
              var split = domtoimage2.impl.options.imagePlaceholder.split(/,/);
              if (split && split[1]) {
                placeholder = split[1];
              }
            }
            function done() {
              if (request.readyState !== 4)
                return;
              if (request.status !== 200) {
                if (placeholder) {
                  resolve(placeholder);
                } else {
                  fail("cannot fetch resource: " + url + ", status: " + request.status);
                }
                return;
              }
              var encoder = new FileReader();
              encoder.onloadend = function() {
                var content = encoder.result.split(/,/)[1];
                resolve(content);
              };
              encoder.readAsDataURL(request.response);
            }
            function timeout() {
              if (placeholder) {
                resolve(placeholder);
              } else {
                fail("timeout of " + TIMEOUT + "ms occured while fetching resource: " + url);
              }
            }
            function fail(message) {
              console.error(message);
              resolve("");
            }
          });
        }
        function dataAsUrl(content, type) {
          return "data:" + type + ";base64," + content;
        }
        function escape(string) {
          return string.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
        }
        function delay(ms) {
          return function(arg) {
            return new Promise(function(resolve) {
              setTimeout(function() {
                resolve(arg);
              }, ms);
            });
          };
        }
        function asArray(arrayLike) {
          var array = [];
          var length = arrayLike.length;
          for (var i = 0; i < length; i++)
            array.push(arrayLike[i]);
          return array;
        }
        function escapeXhtml(string) {
          return string.replace(/#/g, "%23").replace(/\n/g, "%0A");
        }
        function width(node) {
          var leftBorder = px(node, "border-left-width");
          var rightBorder = px(node, "border-right-width");
          return node.scrollWidth + leftBorder + rightBorder;
        }
        function height(node) {
          var topBorder = px(node, "border-top-width");
          var bottomBorder = px(node, "border-bottom-width");
          return node.scrollHeight + topBorder + bottomBorder;
        }
        function px(node, styleProperty) {
          var value = window.getComputedStyle(node).getPropertyValue(styleProperty);
          return parseFloat(value.replace("px", ""));
        }
      }
      function newInliner() {
        var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;
        return {
          inlineAll,
          shouldProcess,
          impl: {
            readUrls,
            inline
          }
        };
        function shouldProcess(string) {
          return string.search(URL_REGEX) !== -1;
        }
        function readUrls(string) {
          var result = [];
          var match;
          while ((match = URL_REGEX.exec(string)) !== null) {
            result.push(match[1]);
          }
          return result.filter(function(url) {
            return !util.isDataUrl(url);
          });
        }
        function inline(string, url, baseUrl, get) {
          return Promise.resolve(url).then(function(url2) {
            return baseUrl ? util.resolveUrl(url2, baseUrl) : url2;
          }).then(get || util.getAndEncode).then(function(data) {
            return util.dataAsUrl(data, util.mimeType(url));
          }).then(function(dataUrl) {
            return string.replace(urlAsRegex(url), "$1" + dataUrl + "$3");
          });
          function urlAsRegex(url2) {
            return new RegExp(`(url\\(['"]?)(` + util.escape(url2) + `)(['"]?\\))`, "g");
          }
        }
        function inlineAll(string, baseUrl, get) {
          if (nothingToInline())
            return Promise.resolve(string);
          return Promise.resolve(string).then(readUrls).then(function(urls) {
            var done = Promise.resolve(string);
            urls.forEach(function(url) {
              done = done.then(function(string2) {
                return inline(string2, url, baseUrl, get);
              });
            });
            return done;
          });
          function nothingToInline() {
            return !shouldProcess(string);
          }
        }
      }
      function newFontFaces() {
        return {
          resolveAll,
          impl: {
            readAll
          }
        };
        function resolveAll() {
          return readAll(document).then(function(webFonts) {
            return Promise.all(webFonts.map(function(webFont) {
              return webFont.resolve();
            }));
          }).then(function(cssStrings) {
            return cssStrings.join("\n");
          });
        }
        function readAll() {
          return Promise.resolve(util.asArray(document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function(rules) {
            return rules.map(newWebFont);
          });
          function selectWebFontRules(cssRules) {
            return cssRules.filter(function(rule) {
              return rule.type === CSSRule.FONT_FACE_RULE;
            }).filter(function(rule) {
              return inliner.shouldProcess(rule.style.getPropertyValue("src"));
            });
          }
          function getCssRules(styleSheets) {
            var cssRules = [];
            styleSheets.forEach(function(sheet) {
              try {
                util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
              } catch (e) {
                console.log("Error while reading CSS rules from " + sheet.href, e.toString());
              }
            });
            return cssRules;
          }
          function newWebFont(webFontRule) {
            return {
              resolve: function resolve() {
                var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                return inliner.inlineAll(webFontRule.cssText, baseUrl);
              },
              src: function() {
                return webFontRule.style.getPropertyValue("src");
              }
            };
          }
        }
      }
      function newImages() {
        return {
          inlineAll,
          impl: {
            newImage
          }
        };
        function newImage(element2) {
          return {
            inline
          };
          function inline(get) {
            if (util.isDataUrl(element2.src))
              return Promise.resolve();
            return Promise.resolve(element2.src).then(get || util.getAndEncode).then(function(data) {
              return util.dataAsUrl(data, util.mimeType(element2.src));
            }).then(function(dataUrl) {
              return new Promise(function(resolve, reject) {
                element2.onload = resolve;
                element2.onerror = reject;
                element2.src = dataUrl;
              });
            });
          }
        }
        function inlineAll(node) {
          if (!(node instanceof Element))
            return Promise.resolve(node);
          return inlineBackground(node).then(function() {
            if (node instanceof HTMLImageElement)
              return newImage(node).inline();
            else
              return Promise.all(util.asArray(node.childNodes).map(function(child) {
                return inlineAll(child);
              }));
          });
          function inlineBackground(node2) {
            var background = node2.style.getPropertyValue("background");
            if (!background)
              return Promise.resolve(node2);
            return inliner.inlineAll(background).then(function(inlined) {
              node2.style.setProperty("background", inlined, node2.style.getPropertyPriority("background"));
            }).then(function() {
              return node2;
            });
          }
        }
      }
    })(exports);
  }
});

// node_modules/fast-copy/dist/fast-copy.js
var require_fast_copy = __commonJS({
  "node_modules/fast-copy/dist/fast-copy.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2["fast-copy"] = factory());
    })(exports, function() {
      "use strict";
      var toStringFunction = Function.prototype.toString;
      var create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf = Object.getPrototypeOf;
      var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
      var SUPPORTS = {
        SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === "function",
        WEAKMAP: typeof WeakMap === "function"
      };
      var createCache = function() {
        if (SUPPORTS.WEAKMAP) {
          return new WeakMap();
        }
        var object = create({
          has: function(key) {
            return !!~object._keys.indexOf(key);
          },
          set: function(key, value) {
            object._keys.push(key);
            object._values.push(value);
          },
          get: function(key) {
            return object._values[object._keys.indexOf(key)];
          }
        });
        object._keys = [];
        object._values = [];
        return object;
      };
      var getCleanClone = function(object, realm) {
        if (!object.constructor) {
          return create(null);
        }
        var Constructor = object.constructor;
        var prototype = object.__proto__ || getPrototypeOf(object);
        if (Constructor === realm.Object) {
          return prototype === realm.Object.prototype ? {} : create(prototype);
        }
        if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
          try {
            return new Constructor();
          } catch (_a2) {
          }
        }
        return create(prototype);
      };
      var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            clone[key] = handleCopy(object[key], cache);
          }
        }
        if (SUPPORTS.SYMBOL_PROPERTIES) {
          var symbols = getOwnPropertySymbols(object);
          var length_1 = symbols.length;
          if (length_1) {
            for (var index = 0, symbol = void 0; index < length_1; index++) {
              symbol = symbols[index];
              if (propertyIsEnumerable.call(object, symbol)) {
                clone[symbol] = handleCopy(object[symbol], cache);
              }
            }
          }
        }
        return clone;
      };
      var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        var properties = SUPPORTS.SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
        var length = properties.length;
        if (length) {
          for (var index = 0, property = void 0, descriptor = void 0; index < length; index++) {
            property = properties[index];
            if (property !== "callee" && property !== "caller") {
              descriptor = getOwnPropertyDescriptor(object, property);
              if (descriptor) {
                if (!descriptor.get && !descriptor.set) {
                  descriptor.value = handleCopy(object[property], cache);
                }
                try {
                  defineProperty(clone, property, descriptor);
                } catch (error) {
                  clone[property] = descriptor.value;
                }
              } else {
                clone[property] = handleCopy(object[property], cache);
              }
            }
          }
        }
        return clone;
      };
      var getRegExpFlags = function(regExp) {
        var flags = "";
        if (regExp.global) {
          flags += "g";
        }
        if (regExp.ignoreCase) {
          flags += "i";
        }
        if (regExp.multiline) {
          flags += "m";
        }
        if (regExp.unicode) {
          flags += "u";
        }
        if (regExp.sticky) {
          flags += "y";
        }
        return flags;
      };
      var isArray = Array.isArray;
      var GLOBAL_THIS = function() {
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        if (console && console.error) {
          console.error('Unable to locate global object, returning "this".');
        }
      }();
      function copy3(object, options) {
        var isStrict = !!(options && options.isStrict);
        var realm = options && options.realm || GLOBAL_THIS;
        var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
        var handleCopy = function(object2, cache) {
          if (!object2 || typeof object2 !== "object") {
            return object2;
          }
          if (cache.has(object2)) {
            return cache.get(object2);
          }
          var Constructor = object2.constructor;
          if (Constructor === realm.Object) {
            return getObjectClone(object2, realm, handleCopy, cache);
          }
          var clone;
          if (isArray(object2)) {
            if (isStrict) {
              return getObjectCloneStrict(object2, realm, handleCopy, cache);
            }
            var length_1 = object2.length;
            clone = new Constructor();
            cache.set(object2, clone);
            for (var index = 0; index < length_1; index++) {
              clone[index] = handleCopy(object2[index], cache);
            }
            return clone;
          }
          if (object2 instanceof realm.Date) {
            return new Constructor(object2.getTime());
          }
          if (object2 instanceof realm.RegExp) {
            clone = new Constructor(object2.source, object2.flags || getRegExpFlags(object2));
            clone.lastIndex = object2.lastIndex;
            return clone;
          }
          if (realm.Map && object2 instanceof realm.Map) {
            clone = new Constructor();
            cache.set(object2, clone);
            object2.forEach(function(value, key) {
              clone.set(key, handleCopy(value, cache));
            });
            return clone;
          }
          if (realm.Set && object2 instanceof realm.Set) {
            clone = new Constructor();
            cache.set(object2, clone);
            object2.forEach(function(value) {
              clone.add(handleCopy(value, cache));
            });
            return clone;
          }
          if (realm.Blob && object2 instanceof realm.Blob) {
            return object2.slice(0, object2.size, object2.type);
          }
          if (realm.Buffer && realm.Buffer.isBuffer(object2)) {
            clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(object2.length) : new Constructor(object2.length);
            cache.set(object2, clone);
            object2.copy(clone);
            return clone;
          }
          if (realm.ArrayBuffer) {
            if (realm.ArrayBuffer.isView(object2)) {
              clone = new Constructor(object2.buffer.slice(0));
              cache.set(object2, clone);
              return clone;
            }
            if (object2 instanceof realm.ArrayBuffer) {
              clone = object2.slice(0);
              cache.set(object2, clone);
              return clone;
            }
          }
          if (typeof object2.then === "function" || object2 instanceof Error || realm.WeakMap && object2 instanceof realm.WeakMap || realm.WeakSet && object2 instanceof realm.WeakSet) {
            return object2;
          }
          return getObjectClone(object2, realm, handleCopy, cache);
        };
        return handleCopy(object, createCache());
      }
      copy3.default = copy3;
      copy3.strict = function strictCopy(object, options) {
        return copy3(object, {
          isStrict: true,
          realm: options ? options.realm : void 0
        });
      };
      return copy3;
    });
  }
});

// src/main.ts
__export(exports, {
  default: () => StatBlockPlugin
});
var import_obsidian23 = __toModule(require("obsidian"));
var import_dom_to_image = __toModule(require_dom_to_image());

// src/data/srd-bestiary.ts
var BESTIARY = [
  {
    name: "Aboleth",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 135,
    hit_dice: "18d10 + 36",
    speed: "10 ft., swim 40 ft.",
    stats: [21, 9, 15, 18, 15, 18],
    saves: [{ constitution: 6 }, { intelligence: 8 }, { wisdom: 6 }],
    skillsaves: [{ history: 12 }, { perception: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 20",
    languages: "Deep Speech, telepathy 120 ft.",
    cr: "10",
    traits: [
      {
        name: "Amphibious",
        desc: "The aboleth can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Mucous Cloud",
        desc: "While underwater, the aboleth is surrounded by transformative mucus. A creature that touches the aboleth or that hits it with a melee attack while within 5 ft. of it must make a DC 14 Constitution saving throw. On a failure, the creature is diseased for 1d4 hours. The diseased creature can breathe only underwater.",
        attack_bonus: 0
      },
      {
        name: "Probing Telepathy",
        desc: "If a creature communicates telepathically with the aboleth, the aboleth learns the creature's greatest desires if the aboleth can see the creature.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The aboleth makes three tentacle attacks.",
        attack_bonus: 0
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 14 Constitution saving throw or become diseased. The disease has no effect for 1 minute and can be removed by any magic that cures disease. After 1 minute, the diseased creature's skin becomes translucent and slimy, the creature can't regain hit points unless it is underwater, and the disease can be removed only by heal or another disease-curing spell of 6th level or higher. When the creature is outside a body of water, it takes 6 (1d12) acid damage every 10 minutes unless moisture is applied to the skin before 10 minutes have passed.",
        attack_bonus: 9,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft. one target. Hit: 15 (3d6 + 5) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d6",
        damage_bonus: 5
      },
      {
        name: "Enslave (3/day)",
        desc: "The aboleth targets one creature it can see within 30 ft. of it. The target must succeed on a DC 14 Wisdom saving throw or be magically charmed by the aboleth until the aboleth dies or until it is on a different plane of existence from the target. The charmed target is under the aboleth's control and can't take reactions, and the aboleth and the target can communicate telepathically with each other over any distance.\\nWhenever the charmed target takes damage, the target can repeat the saving throw. On a success, the effect ends. No more than once every 24 hours, the target can also repeat the saving throw when it is at least 1 mile away from the aboleth.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The aboleth makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Swipe",
        desc: "The aboleth makes one tail attack.",
        attack_bonus: 0
      },
      {
        name: "Psychic Drain (Costs 2 Actions)",
        desc: "One creature charmed by the aboleth takes 10 (3d6) psychic damage, and the aboleth regains hit points equal to the damage the creature takes.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Acolyte",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 10,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [10, 10, 10, 10, 14, 11],
    skillsaves: [{ medicine: 4 }, { religion: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "1/4",
    traits: [],
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ],
    spells: [
      "The acolyte is a 1st-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). The acolyte has following cleric spells prepared:",
      { "Cantrips (at will)": "light, sacred flame, thaumaturgy" },
      { "1st level (3 slots)": "bless, cure wounds, sanctuary" }
    ]
  },
  {
    name: "Adult Black Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 195,
    hit_dice: "17d12 + 84",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 14, 21, 14, 13, 17],
    saves: [
      { dexterity: 7 },
      { constitution: 10 },
      { wisdom: 6 },
      { charisma: 8 }
    ],
    skillsaves: [null, { perception: 11 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "14",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Blue Dracolich",
    size: "Huge",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 225,
    hit_dice: "18d12 + 108",
    speed: "40 ft., burrow 30 ft., fly 80 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    skillsaves: [{ perception: 12 }],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic",
    damage_immunities: "lightning, poison",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dracolich fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The dracolich has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dracolich can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 12,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dracolich's choice that is within 120 feet of the dracolich and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dracolich's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dracolich exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 20 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dracolich makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dracolich makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dracolich beats its tattered wings. Each creature within 10 ft. of the dracolich must succeed on a DC 21 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. After beating its wings this way, the dracolich can fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Blue Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 225,
    hit_dice: "18d12 + 108",
    speed: "40 ft., burrow 30 ft., fly 80 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    saves: [
      { dexterity: 5 },
      { constitution: 11 },
      { wisdom: 7 },
      { charisma: 9 }
    ],
    skillsaves: [null, { perception: 12 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "16",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 12,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 90-foot line that is 5 ft. wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Brass Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 18,
    hp: 172,
    hit_dice: "15d12 + 74",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 13, 17],
    saves: [
      { dexterity: 5 },
      { constitution: 10 },
      { wisdom: 6 },
      { charisma: 8 }
    ],
    skillsaves: [
      null,
      { history: 7 },
      { persuasion: 8 },
      { perception: 11 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "13",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach,.0 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 11,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 45 (13d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "13d6"
      }
    ]
  },
  {
    name: "Adult Bronze Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 212,
    hit_dice: "17d12 + 101",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    saves: [
      { dexterity: 5 },
      { constitution: 11 },
      { wisdom: 7 },
      { charisma: 9 }
    ],
    skillsaves: [{ insight: 7 }, { perception: 12 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "15",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage.",
        attack_bonus: 12,
        damage_dice: "2d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 19 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Copper Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 18,
    hp: 184,
    hit_dice: "16d12 + 80",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [23, 12, 21, 18, 15, 17],
    saves: [
      { dexterity: 6 },
      { constitution: 10 },
      { wisdom: 7 },
      { charisma: 8 }
    ],
    skillsaves: [{ deception: 8 }, { perception: 12 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "14",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 11,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Gold Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 256,
    hit_dice: "19d12 + 132",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 14, 25, 16, 15, 24],
    saves: [
      { dexterity: 8 },
      { constitution: 13 },
      { wisdom: 8 },
      { charisma: 13 }
    ],
    skillsaves: [
      { insight: 8 },
      { persuasion: 13 },
      { perception: 14 },
      { stealth: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 14,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 66 (12d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 21 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Green Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 207,
    hit_dice: "18d12 + 90",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 12, 21, 18, 15, 17],
    saves: [
      { dexterity: 6 },
      { constitution: 10 },
      { wisdom: 7 },
      { charisma: 8 }
    ],
    skillsaves: [
      { deception: 8 },
      { insight: 7 },
      { persuasion: 8 },
      { perception: 12 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "15",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
        attack_bonus: 0
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 56 (16d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Red Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 256,
    hit_dice: "19d12 + 132",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 13, 21],
    saves: [
      { dexterity: 6 },
      { constitution: 13 },
      { wisdom: 7 },
      { charisma: 11 }
    ],
    skillsaves: [{ perception: 13 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 7 (2d6) fire damage.",
        attack_bonus: 14,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 63 (18d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "18d6"
      },
      {
        name: "Lair Actions",
        desc: "On initiative count 20 (losing initiative ties), the dragon takes a lair action to cause one of the following effects: the dragon can't use the same effect two rounds in a row:\\n\u2022 Magma erupts from a point on the ground the dragon can see within 120 feet of it, creating a 20-foot-high, 5-foot-radius geyser. Each creature in the geyser's area must make a DC 15 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.\\n\u2022 A tremor shakes the lair in a 60-foot-radius around the dragon. Each creature other than the dragon on the ground in that area must succeed on a DC 15 Dexterity saving throw or be knocked prone.\\n\u2022 Volcanic gases form a cloud in a 20-foot-radius sphere centered on a point the dragon can see within 120 feet of it. The sphere spreads around corners, and its area is lightly obscured. It lasts until initiative count 20 on the next round. Each creature that starts its turn in the cloud must succeed on a DC 13 Constitution saving throw or be poisoned until the end of its turn. While poisoned in this way, a creature is incapacitated.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Silver Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 243,
    hit_dice: "18d12 + 126",
    speed: "40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 13, 21],
    saves: [
      { dexterity: 5 },
      { constitution: 12 },
      { wisdom: 6 },
      { charisma: 10 }
    ],
    skillsaves: [
      { arcana: 8 },
      { history: 8 },
      { perception: 11 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "16",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 13,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 13,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 13,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 20 Constitution saving throw, taking 58 (13d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 60-foot cone. Each creature in that area must succeed on a DC 20 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "13d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult White Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 200,
    hit_dice: "16d12 + 96",
    speed: "40 ft., burrow 30 ft., fly 80 ft., swim 40 ft.",
    stats: [22, 10, 22, 8, 12, 12],
    saves: [
      { dexterity: 5 },
      { constitution: 11 },
      { wisdom: 6 },
      { charisma: 6 }
    ],
    skillsaves: [{ perception: 11 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "13",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) cold damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 14 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Air Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 15,
    hp: 90,
    hit_dice: "12d10 + 24",
    speed: "fly 90 ft. (hover)",
    stats: [14, 20, 14, 6, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Auran",
    cr: "5",
    traits: [
      {
        name: "Air Form",
        desc: "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      },
      {
        name: "Whirlwind (Recharge 4-6)",
        desc: "Each creature in the elemental's space must make a DC 13 Strength saving throw. On a failure, a target takes 15 (3d8 + 2) bludgeoning damage and is flung up 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Black Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 22,
    hp: 367,
    hit_dice: "21d20 + 146",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 14, 25, 16, 15, 19],
    saves: [
      { dexterity: 9 },
      { constitution: 14 },
      { wisdom: 9 },
      { charisma: 11 }
    ],
    skillsaves: [{ perception: 16 }, { stealth: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "21",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack:+ 15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) acid damage.",
        attack_bonus: 15,
        damage_dice: "2d10 + 2d8",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft ., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 15,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 67 (15d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Blue Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 22,
    hp: 481,
    hit_dice: "26d20 + 208",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [29, 10, 27, 18, 17, 21],
    saves: [
      { dexterity: 7 },
      { constitution: 15 },
      { wisdom: 10 },
      { charisma: 12 }
    ],
    skillsaves: [{ perception: 17 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "23",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage plus 11 (2d10) lightning damage.",
        attack_bonus: 16,
        damage_dice: "2d10 + 2d10",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
        attack_bonus: 16,
        damage_dice: "2d6",
        damage_bonus: 9
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
        attack_bonus: 16,
        damage_dice: "2d8",
        damage_bonus: 9
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Brass Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 20,
    hp: 297,
    hit_dice: "17d20 + 118",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 15, 19],
    saves: [
      { dexterity: 6 },
      { constitution: 13 },
      { wisdom: 8 },
      { charisma: 10 }
    ],
    skillsaves: [
      { history: 9 },
      { persuasion: 10 },
      { perception: 14 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
    languages: "Common, Draconic",
    cr: "20",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 14,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons:\\nFire Breath. The dragon exhales fire in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 21 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 90-foot cone. Each creature in that area must succeed on a DC 21 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "16d6"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Bronze Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 444,
    hit_dice: "24d20 + 192",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [29, 10, 27, 18, 17, 21],
    saves: [
      { dexterity: 7 },
      { constitution: 15 },
      { wisdom: 10 },
      { charisma: 12 }
    ],
    skillsaves: [{ insight: 10 }, { perception: 17 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "22",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage.",
        attack_bonus: 16,
        damage_dice: "2d10",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
        attack_bonus: 16,
        damage_dice: "1d6",
        damage_bonus: 9
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
        attack_bonus: 0,
        damage_dice: "2d8",
        damage_bonus: 9
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 23 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "16d10"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Copper Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 21,
    hp: 350,
    hit_dice: "20d20 + 140",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [27, 12, 25, 20, 17, 19],
    saves: [
      { dexterity: 8 },
      { constitution: 14 },
      { wisdom: 10 },
      { charisma: 11 }
    ],
    skillsaves: [{ stealth: 8 }, { perception: 17 }, { deception: 11 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "21",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 15,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 15,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 63 (14d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 22 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "14d8"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Gold Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 546,
    hit_dice: "28d20 + 252",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [30, 14, 29, 18, 17, 28],
    saves: [
      { dexterity: 9 },
      { constitution: 16 },
      { wisdom: 10 },
      { charisma: 16 }
    ],
    skillsaves: [
      { persuasion: 16 },
      { stealth: 9 },
      { perception: 17 },
      { insight: 10 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "24",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
        attack_bonus: 17,
        damage_dice: "2d10",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 24 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 71 (13d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 24 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "13d10"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Green Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 21,
    hp: 385,
    hit_dice: "22d20 + 154",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 12, 25, 20, 17, 19],
    saves: [
      { dexterity: 8 },
      { constitution: 14 },
      { wisdom: 10 },
      { charisma: 11 }
    ],
    skillsaves: [
      { deception: 11 },
      { insight: 10 },
      { perception: 17 },
      { persuasion: 11 },
      { stealth: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "22",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 10 (3d6) poison damage.",
        attack_bonus: 15,
        damage_dice: "2d10 + 3d6",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 22 (4d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "4d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 16,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 77 (22d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "22d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Red Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 22,
    hp: 546,
    hit_dice: "28d20 + 252",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [30, 10, 29, 18, 15, 23],
    saves: [
      { dexterity: 7 },
      { constitution: 16 },
      { wisdom: 9 },
      { charisma: 13 }
    ],
    skillsaves: [{ perception: 16 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "24",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage plus 14 (4d6) fire damage.",
        attack_bonus: 17,
        damage_dice: "2d10 + 4d6",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 91 (26d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "26d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Silver Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 487,
    hit_dice: "25d20 + 224",
    speed: "40 ft., fly 80 ft.",
    stats: [30, 10, 29, 18, 15, 23],
    saves: [
      { dexterity: 7 },
      { constitution: 16 },
      { wisdom: 9 },
      { charisma: 13 }
    ],
    skillsaves: [
      { arcana: 11 },
      { perception: 16 },
      { history: 11 },
      { stealth: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "23",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
        attack_bonus: 17,
        damage_dice: "2d10",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 24 Constitution saving throw, taking 67 (15d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 90- foot cone. Each creature in that area must succeed on a DC 24 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "15d8"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient White Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 20,
    hp: 333,
    hit_dice: "18d20 + 144",
    speed: "40 ft., burrow 40 ft., fly 80 ft., swim 40 ft.",
    stats: [26, 10, 26, 10, 13, 14],
    saves: [
      { dexterity: 6 },
      { constitution: 14 },
      { wisdom: 7 },
      { charisma: 8 }
    ],
    skillsaves: [{ perception: 13 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
    languages: "Common, Draconic",
    cr: "20",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) cold damage.",
        attack_bonus: 14,
        damage_dice: "2d10 + 2d8",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
        attack_bonus: 0
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 72 (l6d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d8"
      }
    ]
  },
  {
    name: "Androsphinx",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 199,
    hit_dice: "19d10 + 94",
    speed: "40 ft., fly 60 ft.",
    stats: [22, 10, 20, 16, 18, 23],
    saves: [
      { dexterity: 6 },
      { constitution: 11 },
      { intelligence: 9 },
      { wisdom: 10 }
    ],
    skillsaves: [{ religion: 15 }, { perception: 10 }, { arcana: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, frightened",
    senses: "truesight 120 ft., passive Perception 20",
    languages: "Common, Sphinx",
    cr: "17",
    traits: [
      {
        name: "Inscrutable",
        desc: "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The sphinx's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sphinx makes two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 17 (2d10 + 6) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Roar (3/Day)",
        desc: "The sphinx emits a magical roar. Each time it roars before finishing a long rest, the roar is louder and the effect is different, as detailed below. Each creature within 500 feet of the sphinx and able to hear the roar must make a saving throw.\\n\\nFirst Roar. Each creature that fails a DC 18 Wisdom saving throw is frightened for 1 minute. A frightened creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\\n\\nSecond Roar. Each creature that fails a DC 18 Wisdom saving throw is deafened and frightened for 1 minute. A frightened creature is paralyzed and can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\\n\\nThird Roar. Each creature makes a DC 18 Constitution saving throw. On a failed save, a creature takes 44 (8d10) thunder damage and is knocked prone. On a successful save, the creature takes half as much damage and isn't knocked prone.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Claw Attack",
        desc: "The sphinx makes one claw attack.",
        attack_bonus: 0
      },
      {
        name: "Teleport (Costs 2 Actions)",
        desc: "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Cast a Spell (Costs 3 Actions)",
        desc: "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The sphinx is a 12th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 18, +10 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following cleric spells prepared:",
      {
        "Cantrips (at will)": "sacred flame, spare the dying, thaumaturgy"
      },
      {
        "1st level (4 slots)": "command, detect evil and good, detect magic"
      },
      { "2nd level (3 slots)": "lesser restoration, zone of truth" },
      { "3rd level (3 slots)": "dispel magic, tongues" },
      { "4th level (3 slots)": "banishment, freedom of movement" },
      { "5th level (2 slots)": "flame strike, greater restoration" },
      { "6th level (1 slot)": "heroes' feast" }
    ]
  },
  {
    name: "Animated Armor",
    size: "Medium",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 18,
    hp: 33,
    hit_dice: "6d8 + 6",
    speed: "25 ft.",
    stats: [14, 11, 13, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The armor is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the armor must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the armor remains motionless, it is indistinguishable from a normal suit of armor.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The armor makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Ankheg",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 39,
    hit_dice: "6d10 + 6",
    speed: "30 ft., burrow 10 ft.",
    stats: [17, 11, 13, 1, 13, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 11",
    languages: "",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage plus 3 (1d6) acid damage. If the target is a Large or smaller creature, it is grappled (escape DC 13). Until this grapple ends, the ankheg can bite only the grappled creature and has advantage on attack rolls to do so.",
        attack_bonus: 5,
        damage_dice: "2d6 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Acid Spray (Recharge 6)",
        desc: "The ankheg spits acid in a line that is 30 ft. long and 5 ft. wide, provided that it has no creature grappled. Each creature in that line must make a DC 13 Dexterity saving throw, taking 10 (3d6) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Ape",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d8 + 5",
    speed: "30 ft., climb 30 ft.",
    stats: [16, 14, 14, 6, 12, 7],
    skillsaves: [{ athletics: 5 }, { perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Multiattack",
        desc: "The ape makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +5 to hit, range 25/50 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Archmage",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 99,
    hit_dice: "18d8 + 18",
    speed: "30 ft.",
    stats: [10, 14, 12, 20, 15, 16],
    saves: [{ intelligence: 9 }, { wisdom: 6 }],
    skillsaves: [{ arcana: 13 }, { history: 13 }],
    damage_vulnerabilities: "",
    damage_resistances: "damage from spells; non magical bludgeoning, piercing, and slashing (from stoneskin)",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any six languages",
    cr: "12",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The archmage has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The archmage is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 17, +9 to hit with spell attacks). The archmage can cast disguise self and invisibility at will and has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "fire bolt, light, mage hand, prestidigitation, shocking grasp"
      },
      {
        "1st level (4 slots)": "detect magic, identify, mage armor*, magic missile"
      },
      {
        "2nd level (3 slots)": "detect thoughts, mirror image, misty step"
      },
      { "3rd level (3 slots)": "counterspell,fly, lightning bolt" },
      { "4th level (3 slots)": "banishment, fire shield, stoneskin*" },
      { "5th level (3 slots)": "cone of cold, scrying, wall of force" },
      { "6th level (1 slot)": "globe of invulnerability" },
      { "7th level (1 slot)": "teleport" },
      { "8th level (1 slot)": "mind blank*" },
      { "9th level (1 slot)": "time stop" },
      "* The archmage casts these spells on itself before combat."
    ]
  },
  {
    name: "Assassin",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 15,
    hp: 78,
    hit_dice: "12d8 + 24",
    speed: "30 ft.",
    stats: [11, 16, 14, 13, 11, 10],
    saves: [{ dexterity: 6 }, { intelligence: 4 }],
    skillsaves: [
      { acrobatics: 6 },
      { deception: 3 },
      { perception: 3 },
      { stealth: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "poison",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Thieves' cant plus any two languages",
    cr: "8",
    traits: [
      {
        name: "Assassinate",
        desc: "During its first turn, the assassin has advantage on attack rolls against any creature that hasn't taken a turn. Any hit the assassin scores against a surprised creature is a critical hit.",
        attack_bonus: 0
      },
      {
        name: "Evasion",
        desc: "If the assassin is subjected to an effect that allows it to make a Dexterity saving throw to take only half damage, the assassin instead takes no damage if it succeeds on the saving throw, and only half damage if it fails.",
        attack_bonus: 0
      },
      {
        name: "Sneak Attack (1/Turn)",
        desc: "The assassin deals an extra 13 (4d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the assassin that isn't incapacitated and the assassin doesn't have disadvantage on the attack roll.",
        attack_bonus: 0,
        damage_dice: "4d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The assassin makes two shortsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Light Crossbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 80/320 ft., one target. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Awakened Shrub",
    size: "Small",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 9,
    hp: 10,
    hit_dice: "3d6 + -1",
    speed: "20 ft.",
    stats: [3, 8, 11, 10, 10, 6],
    damage_vulnerabilities: "fire",
    damage_resistances: "piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "one language known by its creator",
    cr: "0",
    traits: [
      {
        name: "False Appearance",
        desc: "While the shrub remains motionless, it is indistinguishable from a normal shrub.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Rake",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) slashing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Awakened Tree",
    size: "Huge",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 59,
    hit_dice: "7d12 + 13",
    speed: "20 ft.",
    stats: [19, 6, 15, 10, 10, 7],
    damage_vulnerabilities: "fire",
    damage_resistances: "bludgeoning, piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "one language known by its creator",
    cr: "2",
    traits: [
      {
        name: "False Appearance",
        desc: "While the tree remains motionless, it is indistinguishable from a normal tree.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Axe Beak",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "50 ft.",
    stats: [14, 12, 12, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Azer",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 39,
    hit_dice: "6d8 + 12",
    speed: "30 ft.",
    stats: [17, 12, 15, 12, 13, 10],
    saves: [{ constitution: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "passive Perception 11",
    languages: "Ignan",
    cr: "2",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the azer or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage.",
        attack_bonus: 0,
        damage_dice: "1d10"
      },
      {
        name: "Heated Weapons",
        desc: "When the azer hits with a metal melee weapon, it deals an extra 3 (1d6) fire damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Illumination",
        desc: "The azer sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Warhammer",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage, or 8 (1d10 + 3) bludgeoning damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
        attack_bonus: 5,
        damage_dice: "1d8 + 1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Baboon",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "30 ft., climb 30 ft.",
    stats: [8, 14, 11, 4, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The baboon has advantage on an attack roll against a creature if at least one of the baboon's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) piercing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Badger",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 3,
    hit_dice: "1d4",
    speed: "20 ft., burrow 5 ft.",
    stats: [4, 11, 12, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 2,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Balor",
    size: "Huge",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 19,
    hp: 262,
    hit_dice: "21d12 + 125",
    speed: "40 ft., fly 80 ft.",
    stats: [26, 15, 22, 20, 16, 22],
    saves: [
      { strength: 14 },
      { constitution: 12 },
      { wisdom: 9 },
      { charisma: 12 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "19",
    traits: [
      {
        name: "Death Throes",
        desc: "When the balor dies, it explodes, and each creature within 30 feet of it must make a DC 20 Dexterity saving throw, taking 70 (20d6) fire damage on a failed save, or half as much damage on a successful one. The explosion ignites flammable objects in that area that aren't being worn or carried, and it destroys the balor's weapons.",
        attack_bonus: 0,
        damage_dice: "20d6"
      },
      {
        name: "Fire Aura",
        desc: "At the start of each of the balor's turns, each creature within 5 feet of it takes 10 (3d6) fire damage, and flammable objects in the aura that aren't being worn or carried ignite. A creature that touches the balor or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      },
      {
        name: "Magic Resistance",
        desc: "The balor has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The balor's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The balor makes two attacks: one with its longsword and one with its whip.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) slashing damage plus 13 (3d8) lightning damage. If the balor scores a critical hit, it rolls damage dice three times, instead of twice.",
        attack_bonus: 14,
        damage_dice: "3d8 + 3d8",
        damage_bonus: 8
      },
      {
        name: "Whip",
        desc: "Melee Weapon Attack: +14 to hit, reach 30 ft., one target. Hit: 15 (2d6 + 8) slashing damage plus 10 (3d6) fire damage, and the target must succeed on a DC 20 Strength saving throw or be pulled up to 25 feet toward the balor.",
        attack_bonus: 14,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 8
      },
      {
        name: "Teleport",
        desc: "The balor magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA balor has a 50 percent chance of summoning 1d8 vrocks, 1d6 hezrous, 1d4 glabrezus, 1d3 nalfeshnees, 1d2 mariliths, or one goristro.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Bandit",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-lawful alignment",
    ac: 12,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [11, 12, 12, 10, 10, 10],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/8",
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Light Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 80 ft./320 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bandit Captain",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-lawful alignment",
    ac: 15,
    hp: 65,
    hit_dice: "10d8 + 20",
    speed: "30 ft.",
    stats: [15, 16, 14, 14, 11, 14],
    saves: [{ strength: 4 }, { dexterity: 5 }, { wisdom: 2 }],
    skillsaves: [{ athletics: 4 }, { deception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any two languages",
    cr: "2",
    actions: [
      {
        name: "Multiattack",
        desc: "The captain makes three melee attacks: two with its scimitar and one with its dagger. Or the captain makes two ranged attacks with its daggers.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The captain adds 2 to its AC against one melee attack that would hit it. To do so, the captain must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Barbed Devil",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 15,
    hp: 110,
    hit_dice: "13d8 + 51",
    speed: "30 ft.",
    stats: [16, 17, 18, 12, 14, 14],
    saves: [
      { strength: 6 },
      { constitution: 7 },
      { wisdom: 5 },
      { charisma: 5 }
    ],
    skillsaves: [{ deception: 5 }, { insight: 5 }, { perception: 8 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 18",
    languages: "Infernal, telepathy 120 ft.",
    cr: "5",
    traits: [
      {
        name: "Barbed Hide",
        desc: "At the start of each of its turns, the barbed devil deals 5 (1d10) piercing damage to any creature grappling it.",
        attack_bonus: 0,
        damage_dice: "1d10"
      },
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three melee attacks: one with its tail and two with its claws. Alternatively, it can use Hurl Flame twice.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft ., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +5 to hit, range 150 ft., one target. Hit: 10 (3d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
        attack_bonus: 5,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Basilisk",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "20 ft.",
    stats: [16, 8, 15, 2, 8, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Petrifying Gaze",
        desc: "If a creature starts its turn within 30 ft. of the basilisk and the two of them can see each other, the basilisk can force the creature to make a DC 12 Constitution saving throw if the basilisk isn't incapacitated. On a failed save, the creature magically begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified until freed by the greater restoration spell or other magic.\\nA creature that isn't surprised can avert its eyes to avoid the saving throw at the start of its turn. If it does so, it can't see the basilisk until the start of its next turn, when it can avert its eyes again. If it looks at the basilisk in the meantime, it must immediately make the save.\\nIf the basilisk sees its reflection within 30 ft. of it in bright light, it mistakes itself for a rival and targets itself with its gaze.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Bat",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "5 ft., fly 30 ft.",
    stats: [2, 15, 8, 2, 12, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Echolocation",
        desc: "The bat can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bearded Devil",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 13,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft.",
    stats: [16, 15, 15, 9, 11, 11],
    saves: [{ strength: 5 }, { constitution: 4 }, { wisdom: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Infernal, telepathy 120 ft.",
    cr: "3",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Steadfast",
        desc: "The devil can't be frightened while it can see an allied creature within 30 feet of it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes two attacks: one with its beard and one with its glaive.",
        attack_bonus: 0
      },
      {
        name: "Beard",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. While poisoned in this way, the target can't regain hit points. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Glaive",
        desc: "Melee Weapon Attack: +5 to hit, reach 10 ft., one target. Hit: 8 (1d10 + 3) slashing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 12 Constitution saving throw or lose 5 (1d10) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 5 (1d10). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Behir",
    size: "Huge",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 168,
    hit_dice: "16d12 + 64",
    speed: "50 ft., climb 40 ft.",
    stats: [23, 16, 18, 7, 14, 12],
    skillsaves: [{ perception: 6 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "darkvision 90 ft., passive Perception 16",
    languages: "Draconic",
    cr: "11",
    actions: [
      {
        name: "Multiattack",
        desc: "The behir makes two attacks: one with its bite and one to constrict.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "3d10",
        damage_bonus: 6
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one Large or smaller creature. Hit: 17 (2d10 + 6) bludgeoning damage plus 17 (2d10 + 6) slashing damage. The target is grappled (escape DC 16) if the behir isn't already constricting a creature, and the target is restrained until this grapple ends.",
        attack_bonus: 10,
        damage_dice: "2d10 + 2d10",
        damage_bonus: 6
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The behir exhales a line of lightning that is 20 ft. long and 5 ft. wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      },
      {
        name: "Swallow",
        desc: "The behir makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is also swallowed, and the grapple ends. While swallowed, the target is blinded and restrained, it has total cover against attacks and other effects outside the behir, and it takes 21 (6d6) acid damage at the start of each of the behir's turns. A behir can have only one creature swallowed at a time.\\nIf the behir takes 30 damage or more on a single turn from the swallowed creature, the behir must succeed on a DC 14 Constitution saving throw at the end of that turn or regurgitate the creature, which falls prone in a space within 10 ft. of the behir. If the behir dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 15 ft. of movement, exiting prone.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Berserker",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any chaotic alignment",
    ac: 13,
    hp: 67,
    hit_dice: "9d8 + 26",
    speed: "30 ft.",
    stats: [16, 12, 17, 9, 11, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "2",
    traits: [
      {
        name: "Reckless",
        desc: "At the start of its turn, the berserker can gain advantage on all melee weapon attack rolls during that turn, but attack rolls against it have advantage until the start of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d12",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Black Bear",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d8 + 5",
    speed: "40 ft., climb 30 ft.",
    stats: [15, 10, 14, 2, 12, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Black Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 33,
    hit_dice: "6d8 + 6",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [15, 14, 13, 10, 11, 13],
    saves: [
      { dexterity: 4 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) acid damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 15-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 22 (Sd8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "5d8"
      }
    ]
  },
  {
    name: "Black Pudding",
    size: "Large",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 7,
    hp: 85,
    hit_dice: "10d10 + 30",
    speed: "20 ft., climb 20 ft.",
    stats: [16, 5, 16, 1, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid, cold, lightning, slashing",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "4",
    traits: [
      {
        name: "Amorphous",
        desc: "The pudding can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Corrosive Form",
        desc: "A creature that touches the pudding or hits it with a melee attack while within 5 feet of it takes 4 (1d8) acid damage. Any nonmagical weapon made of metal or wood that hits the pudding corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal or wood that hits the pudding is destroyed after dealing damage. The pudding can eat through 2-inch-thick, nonmagical wood or metal in 1 round.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "Spider Climb",
        desc: "The pudding can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage plus 18 (4d8) acid damage. In addition, nonmagical armor worn by the target is partly dissolved and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
        attack_bonus: 5,
        damage_dice: "1d6 + 4d8",
        damage_bonus: 3
      }
    ],
    reactions: [
      {
        name: "Split",
        desc: "When a pudding that is Medium or larger is subjected to lightning or slashing damage, it splits into two new puddings if it has at least 10 hit points. Each new pudding has hit points equal to half the original pudding's, rounded down. New puddings are one size smaller than the original pudding.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Blink Dog",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "lawful good",
    ac: 13,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "40 ft.",
    stats: [12, 17, 12, 10, 13, 11],
    skillsaves: [{ perception: 3 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "Blink Dog, understands Sylvan but can't speak it",
    cr: "1/4",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The dog has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Teleport (Recharge 4-6)",
        desc: "The dog magically teleports, along with any equipment it is wearing or carrying, up to 40 ft. to an unoccupied space it can see. Before or after teleporting, the dog can make one bite attack.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Blood Hawk",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "10 ft., fly 60 ft.",
    stats: [6, 14, 10, 3, 14, 5],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The hawk has advantage on an attack roll against a creature if at least one of the hawk's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Blue Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft., burrow 15 ft., fly 60 ft.",
    stats: [17, 10, 15, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 4 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "3",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage plus 3 (1d6) lightning damage.",
        attack_bonus: 5,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ]
  },
  {
    name: "Boar",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [13, 11, 12, 2, 9, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 9",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Charge",
        desc: "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 3 (1d6) slashing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "1d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the boar takes 7 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tusk",
        desc: "Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bone Devil",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 19,
    hp: 142,
    hit_dice: "15d10 + 59",
    speed: "40 ft., fly 40 ft.",
    stats: [18, 16, 18, 13, 14, 16],
    saves: [{ intelligence: 5 }, { wisdom: 6 }, { charisma: 7 }],
    skillsaves: [{ deception: 7 }, { insight: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 9",
    languages: "Infernal, telepathy 120 ft.",
    cr: "12",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Brass Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 16,
    hit_dice: "3d8 + 2",
    speed: "30 ft., burrow 15 ft., fly 60 ft.",
    stats: [15, 10, 13, 10, 11, 13],
    saves: [
      { dexterity: 2 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 14 (4d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 15-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw or fall unconscious for 1 minute. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Bronze Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 32,
    hit_dice: "5d8 + 9",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [17, 10, 15, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 4 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 16 (3d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 12 Strength saving throw. On a failed save, the creature is pushed 30 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "3d10"
      }
    ]
  },
  {
    name: "Brown Bear",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 34,
    hit_dice: "4d10 + 12",
    speed: "40 ft., climb 30 ft.",
    stats: [19, 10, 16, 2, 13, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Bugbear",
    size: "Medium",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "chaotic evil",
    ac: 16,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "30 ft.",
    stats: [15, 14, 13, 8, 11, 9],
    skillsaves: [{ stealth: 6 }, { survival: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Goblin",
    cr: "1",
    traits: [
      {
        name: "Brute",
        desc: "A melee weapon deals one extra die of its damage when the bugbear hits with it (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Surprise Attack",
        desc: "If the bugbear surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 7 (2d6) damage from the attack.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 11 (2d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d8",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 9 (2d6 + 2) piercing damage in melee or 5 (1d6 + 2) piercing damage at range.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Bulette",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 94,
    hit_dice: "9d10 + 44",
    speed: "40 ft., burrow 40 ft.",
    stats: [19, 11, 21, 2, 10, 5],
    skillsaves: [{ perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Standing Leap",
        desc: "The bulette's long jump is up to 30 ft. and its high jump is up to 15 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 30 (4d12 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "4d12",
        damage_bonus: 4
      },
      {
        name: "Deadly Leap",
        desc: "If the bulette jumps at least 15 ft. as part of its movement, it can then use this action to land on its ft. in a space that contains one or more other creatures. Each of those creatures must succeed on a DC 16 Strength or Dexterity saving throw (target's choice) or be knocked prone and take 14 (3d6 + 4) bludgeoning damage plus 14 (3d6 + 4) slashing damage. On a successful save, the creature takes only half the damage, isn't knocked prone, and is pushed 5 ft. out of the bulette's space into an unoccupied space of the creature's choice. If no unoccupied space is within range, the creature instead falls prone in the bulette's space.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Camel",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 9,
    hp: 15,
    hit_dice: "2d10 + 4",
    speed: "50 ft.",
    stats: [16, 8, 14, 2, 8, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 9",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Carrion Crawler",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 51,
    hit_dice: "6d10 + 18",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 13, 16, 1, 12, 5],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The carrion crawler has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The carrion crawler can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The carrion crawler makes two attacks: one with its tentacles and one with its bite.",
        attack_bonus: 0
      },
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 4 (1d4 + 2) poison damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the poison on itself on a success.",
        attack_bonus: 8,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Cat",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "40 ft., climb 30 ft.",
    stats: [3, 15, 10, 3, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The cat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Cave Bear",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10 + 14",
    speed: "40 ft., swim 30 ft.",
    stats: [20, 10, 16, 2, 13, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Centaur",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral good",
    ac: 12,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "50 ft.",
    stats: [18, 14, 14, 9, 13, 11],
    skillsaves: [{ athletics: 6 }, { perception: 3 }, { survival: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Elvish, Sylvan",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the centaur moves at least 30 ft. straight toward a target and then hits it with a pike attack on the same turn, the target takes an extra 10 (3d6) piercing damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The centaur makes two attacks: one with its pike and one with its hooves or two with its longbow.",
        attack_bonus: 0
      },
      {
        name: "Pike",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Chain Devil",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 16,
    hp: 85,
    hit_dice: "10d8 + 40",
    speed: "30 ft.",
    stats: [18, 15, 18, 11, 12, 14],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 8",
    languages: "Infernal, telepathy 120 ft.",
    cr: "11",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes two attacks with its chains.",
        attack_bonus: 0
      },
      {
        name: "Chain",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) slashing damage. The target is grappled (escape DC 14) if the devil isn't already grappling a creature. Until this grapple ends, the target is restrained and takes 7 (2d6) piercing damage at the start of each of its turns.",
        attack_bonus: 8,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Animate Chains (Recharges after a Short or Long Rest)",
        desc: "Up to four chains the devil can see within 60 feet of it magically sprout razor-edged barbs and animate under the devil's control, provided that the chains aren't being worn or carried.\\nEach animated chain is an object with AC 20, 20 hit points, resistance to piercing damage, and immunity to psychic and thunder damage. When the devil uses Multiattack on its turn, it can use each animated chain to make one additional chain attack. An animated chain can grapple one creature of its own but can't make attacks while grappling. An animated chain reverts to its inanimate state if reduced to 0 hit points or if the devil is incapacitated or dies.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Unnerving Mask",
        desc: "When a creature the devil can see starts its turn within 30 feet of the devil, the devil can create the illusion that it looks like one of the creature's departed loved ones or bitter enemies. If the creature can see the devil, it must succeed on a DC 14 Wisdom saving throw or be frightened until the end of its turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Chimera",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "30 ft., fly 60 ft.",
    stats: [19, 11, 19, 3, 14, 10],
    skillsaves: [{ perception: 8 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 18",
    languages: "understands Draconic but can't speak",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The chimera makes three attacks: one with its bite, one with its horns, and one with its claws. When its fire breath is available, it can use the breath in place of its bite or horns.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Horns",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "1d12",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon head exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 31 (7d8) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d8"
      }
    ]
  },
  {
    name: "Chuul",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "chaotic evil",
    ac: 16,
    hp: 93,
    hit_dice: "11d10 + 32",
    speed: "30 ft., swim 30 ft.",
    stats: [19, 10, 16, 5, 11, 5],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "understands Deep Speech but can't speak",
    cr: "4",
    traits: [
      {
        name: "Amphibious",
        desc: "The chuul can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Sense Magic",
        desc: "The chuul senses magic within 120 feet of it at will. This trait otherwise works like the detect magic spell but isn't itself magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The chuul makes two pincer attacks. If the chuul is grappling a creature, the chuul can also use its tentacles once.",
        attack_bonus: 0
      },
      {
        name: "Pincer",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage. The target is grappled (escape DC 14) if it is a Large or smaller creature and the chuul doesn't have two other creatures grappled.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Tentacles",
        desc: "One creature grappled by the chuul must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Clay Golem",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 133,
    hit_dice: "14d10 + 56",
    speed: "20 ft.",
    stats: [20, 9, 18, 3, 8, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands the languages of its creator but can't speak",
    cr: "9",
    traits: [
      {
        name: "Acid Absorption",
        desc: "Whenever the golem is subjected to acid damage, it takes no damage and instead regains a number of hit points equal to the acid damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Berserk",
        desc: "Whenever the golem starts its turn with 60 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw or have its hit point maximum reduced by an amount equal to the damage taken. The target dies if this attack reduces its hit point maximum to 0. The reduction lasts until removed by the greater restoration spell or other magic.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Haste (Recharge 5-6)",
        desc: "Until the end of its next turn, the golem magically gains a +2 bonus to its AC, has advantage on Dexterity saving throws, and can use its slam attack as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Cloaker",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 78,
    hit_dice: "12d10 + 12",
    speed: "10 ft., fly 40 ft.",
    stats: [17, 15, 12, 13, 12, 14],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Deep Speech, Undercommon",
    cr: "8",
    traits: [
      {
        name: "Damage Transfer",
        desc: "While attached to a creature, the cloaker takes only half the damage dealt to it (rounded down). and that creature takes the other half.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the cloaker remains motionless without its underside exposed, it is indistinguishable from a dark leather cloak.",
        attack_bonus: 0
      },
      {
        name: "Light Sensitivity",
        desc: "While in bright light, the cloaker has disadvantage on attack rolls and Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The cloaker makes two attacks: one with its bite and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 10 (2d6 + 3) piercing damage, and if the target is Large or smaller, the cloaker attaches to it. If the cloaker has advantage against the target, the cloaker attaches to the target's head, and the target is blinded and unable to breathe while the cloaker is attached. While attached, the cloaker can make this attack only against the target and has advantage on the attack roll. The cloaker can detach itself by spending 5 feet of its movement. A creature, including the target, can take its action to detach the cloaker by succeeding on a DC 16 Strength check.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Moan",
        desc: "Each creature within 60 feet of the cloaker that can hear its moan and that isn't an aberration must succeed on a DC 13 Wisdom saving throw or become frightened until the end of the cloaker's next turn. If a creature's saving throw is successful, the creature is immune to the cloaker's moan for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Phantasms (Recharges after a Short or Long Rest)",
        desc: "The cloaker magically creates three illusory duplicates of itself if it isn't in bright light. The duplicates move with it and mimic its actions, shifting position so as to make it impossible to track which cloaker is the real one. If the cloaker is ever in an area of bright light, the duplicates disappear.\\nWhenever any creature targets the cloaker with an attack or a harmful spell while a duplicate remains, that creature rolls randomly to determine whether it targets the cloaker or one of the duplicates. A creature is unaffected by this magical effect if it can't see or if it relies on senses other than sight.\\nA duplicate has the cloaker's AC and uses its saving throws. If an attack hits a duplicate, or if a duplicate fails a saving throw against an effect that deals damage, the duplicate disappears.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Cloud Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "neutral good (50%) or neutral evil (50%)",
    ac: 14,
    hp: 200,
    hit_dice: "16d12 + 96",
    speed: "40 ft.",
    stats: [27, 10, 22, 12, 16, 16],
    saves: [{ constitution: 10 }, { wisdom: 7 }, { charisma: 7 }],
    skillsaves: [{ insight: 7 }, { perception: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 17",
    languages: "Common, Giant",
    cr: "9",
    traits: [
      {
        name: "Keen Smell",
        desc: "The giant has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The giant's innate spellcasting ability is Charisma. It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic, fog cloud, light\\n3/day each: feather fall, fly, misty step, telekinesis\\n1/day each: control weather, gaseous form",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two morningstar attacks.",
        attack_bonus: 0
      },
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) piercing damage.",
        attack_bonus: 12,
        damage_dice: "3d8",
        damage_bonus: 8
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +12 to hit, range 60/240 ft., one target. Hit: 30 (4d10 + 8) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "4d10",
        damage_bonus: 8
      }
    ]
  },
  {
    name: "Cockatrice",
    size: "Small",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 27,
    hit_dice: "6d6 + 6",
    speed: "20 ft., fly 40 ft.",
    stats: [6, 12, 12, 2, 13, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) piercing damage, and the target must succeed on a DC 11 Constitution saving throw against being magically petrified. On a failed save, the creature begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified for 24 hours.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Commoner",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 10,
    hp: 4,
    hit_dice: "1d8 + -1",
    speed: "30 ft.",
    stats: [10, 10, 10, 10, 10, 10],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "0",
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Constrictor Snake",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "2d10 + 2",
    speed: "30 ft., swim 30 ft.",
    stats: [15, 14, 12, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 14). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Copper Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "30 ft., climb 30 ft., fly 60 ft.",
    stats: [15, 12, 13, 14, 11, 13],
    saves: [
      { dexterity: 3 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 18 (4d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 1 5-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Couatl",
    size: "Medium",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 97,
    hit_dice: "13d8 + 38",
    speed: "30 ft., fly 90 ft.",
    stats: [16, 20, 17, 18, 20, 18],
    saves: [{ constitution: 5 }, { wisdom: 7 }, { charisma: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant",
    damage_immunities: "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "",
    senses: "truesight 120 ft., passive Perception 15",
    languages: "all, telepathy 120 ft.",
    cr: "4",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The couatl's spellcasting ability is Charisma (spell save DC 14). It can innately cast the following spells, requiring only verbal components:\\n\\nAt will: detect evil and good, detect magic, detect thoughts\\n3/day each: bless, create food and water, cure wounds, lesser restoration, protection from poison, sanctuary, shield\\n1/day each: dream, greater restoration, scrying",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The couatl's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Shielded Mind",
        desc: "The couatl is immune to scrying and to any effect that would sense its emotions, read its thoughts, or detect its location.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one creature. Hit: 8 (1d6 + 5) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 24 hours. Until this poison ends, the target is unconscious. Another creature can use an action to shake the target awake.",
        attack_bonus: 8,
        damage_dice: "1d6",
        damage_bonus: 5
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one Medium or smaller creature. Hit: 10 (2d6 + 3) bludgeoning damage, and the target is grappled (escape DC 15). Until this grapple ends, the target is restrained, and the couatl can't constrict another target.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Change Shape",
        desc: "The couatl magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the couatl's choice).\\nIn a new form, the couatl retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and other actions are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks. If the new form has a bite attack, the couatl can use its bite in that form.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Crab",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "20 ft., swim 20 ft.",
    stats: [2, 11, 10, 1, 8, 2],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 9",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Amphibious",
        desc: "The crab can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Crocodile",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "20 ft., swim 20 ft.",
    stats: [15, 10, 13, 2, 10, 5],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The crocodile can hold its breath for 15 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target is grappled (escape DC 12). Until this grapple ends, the target is restrained, and the crocodile can't bite another target",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Cult Fanatic",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 13,
    hp: 22,
    hit_dice: "6d8 + -5",
    speed: "30 ft.",
    stats: [11, 14, 12, 10, 13, 14],
    skillsaves: [{ deception: 4 }, { persuasion: 4 }, { religion: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any one language (usually Common)",
    cr: "2",
    traits: [
      {
        name: "Dark Devotion",
        desc: "The fanatic has advantage on saving throws against being charmed or frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The fanatic makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The fanatic is a 4th-level spellcaster. Its spell casting ability is Wisdom (spell save DC 11, +3 to hit with spell attacks). The fanatic has the following cleric spells prepared:",
      "Cantrips (at will): light, sacred flame, thaumaturgy",
      {
        "1st level (4 slots)": "command, inflict wounds, shield of faith"
      },
      { "2nd level (3 slots)": "hold person, spiritual weapon" }
    ]
  },
  {
    name: "Cultist",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 12,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 10, 10, 11, 10],
    skillsaves: [{ deception: 2 }, { religion: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/8",
    traits: [
      {
        name: "Dark Devotion",
        desc: "The cultist has advantage on saving throws against being charmed or frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Darkmantle",
    size: "Small",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 22,
    hit_dice: "5d6 + 4",
    speed: "10 ft., fly 30 ft.",
    stats: [16, 12, 13, 2, 10, 5],
    skillsaves: [{ stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Echolocation",
        desc: "The darkmantle can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the darkmantle remains motionless, it is indistinguishable from a cave formation such as a stalactite or stalagmite.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Crush",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d6 + 3) bludgeoning damage, and the darkmantle attaches to the target. If the target is Medium or smaller and the darkmantle has advantage on the attack roll, it attaches by engulfing the target's head, and the target is also blinded and unable to breathe while the darkmantle is attached in this way.\\nWhile attached to the target, the darkmantle can attack no other creature except the target but has advantage on its attack rolls. The darkmantle's speed also becomes 0, it can't benefit from any bonus to its speed, and it moves with the target.\\nA creature can detach the darkmantle by making a successful DC 13 Strength check as an action. On its turn, the darkmantle can detach itself from the target by using 5 feet of movement.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Darkness Aura (1/day)",
        desc: "A 15-foot radius of magical darkness extends out from the darkmantle, moves with it, and spreads around corners. The darkness lasts as long as the darkmantle maintains concentration, up to 10 minutes (as if concentrating on a spell). Darkvision can't penetrate this darkness, and no natural light can illuminate it. If any of the darkness overlaps with an area of light created by a spell of 2nd level or lower, the spell creating the light is dispelled.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Death Dog",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 12,
    hp: 39,
    hit_dice: "6d8 + 12",
    speed: "40 ft.",
    stats: [15, 14, 14, 3, 13, 6],
    skillsaves: [{ perception: 5 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Two-Headed",
        desc: "The dog has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, or knocked unconscious.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dog makes two bite attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the creature must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. This reduction lasts until the disease is cured. The creature dies if the disease reduces its hit point maximum to 0.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Deep Gnome (Svirfneblin)",
    size: "Small",
    type: "humanoid",
    subtype: "gnome",
    alignment: "neutral good",
    ac: 15,
    hp: 16,
    hit_dice: "3d6 + 5",
    speed: "20 ft.",
    stats: [15, 14, 14, 12, 10, 9],
    skillsaves: [{ perception: 2 }, { investigation: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Gnomish, Terran, Undercommon",
    cr: "1/2",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The gnome has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      },
      {
        name: "Gnome Cunning",
        desc: "The gnome has advantage on Intelligence, Wisdom, and Charisma saving throws against magic.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The gnome's innate spellcasting ability is Intelligence (spell save DC 11). It can innately cast the following spells, requiring no material components:\\nAt will: nondetection (self only)\\n1/day each: blindness/deafness, blur, disguise self",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "War Pick",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Poisoned Dart",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Deer",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d8 + -1",
    speed: "50 ft.",
    stats: [11, 16, 11, 2, 14, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Deva",
    size: "Medium",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 136,
    hit_dice: "16d8 + 64",
    speed: "30 ft., fly 90 ft.",
    stats: [18, 18, 18, 17, 20, 20],
    saves: [{ wisdom: 9 }, { charisma: 9 }],
    skillsaves: [{ insight: 9 }, { perception: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "charmed, exhaustion, frightened",
    senses: "darkvision 120 ft., passive Perception 19",
    languages: "all, telepathy 120 ft.",
    cr: "10",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The deva's weapon attacks are magical. When the deva hits with any weapon, the weapon deals an extra 4d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The deva's spellcasting ability is Charisma (spell save DC 17). The deva can innately cast the following spells, requiring only verbal components:\\nAt will: detect evil and good\\n1/day each: commune, raise dead",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The deva has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The deva makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage plus 18 (4d8) radiant damage.",
        attack_bonus: 8,
        damage_dice: "1d6 + 4d8",
        damage_bonus: 4
      },
      {
        name: "Healing Touch (3/Day)",
        desc: "The deva touches another creature. The target magically regains 20 (4d8 + 2) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      },
      {
        name: "Change Shape",
        desc: "The deva magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the deva's choice).\\nIn a new form, the deva retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and special senses are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Dire Wolf",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 37,
    hit_dice: "5d10 + 9",
    speed: "50 ft.",
    stats: [17, 15, 15, 3, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Djinni",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 161,
    hit_dice: "14d10 + 84",
    speed: "30 ft., fly 90 ft.",
    stats: [21, 15, 22, 15, 16, 20],
    saves: [{ dexterity: 6 }, { wisdom: 7 }, { charisma: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning, thunder",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "Auran",
    cr: "11",
    traits: [
      {
        name: "Elemental Demise",
        desc: "If the djinni dies, its body disintegrates into a warm breeze, leaving behind only equipment the djinni was wearing or carrying.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The djinni's innate spellcasting ability is Charisma (spell save DC 17, +9 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect evil and good, detect magic, thunderwave 3/day each: create food and water (can create wine instead of water), tongues, wind walk\\n1/day each: conjure elemental (air elemental only), creation, gaseous form, invisibility, major image, plane shift",
        attack_bonus: 0
      },
      {
        name: "Variant: Genie Powers",
        desc: "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\\n\\nDisguises.\\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\\nWishes.\\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The djinni makes three scimitar attacks.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage plus 3 (1d6) lightning or thunder damage (djinni's choice).",
        attack_bonus: 9,
        damage_dice: "2d6 + 1d6",
        damage_bonus: 5
      },
      {
        name: "Create Whirlwind",
        desc: "A 5-foot-radius, 30-foot-tall cylinder of swirling air magically forms on a point the djinni can see within 120 feet of it. The whirlwind lasts as long as the djinni maintains concentration (as if concentrating on a spell). Any creature but the djinni that enters the whirlwind must succeed on a DC 18 Strength saving throw or be restrained by it. The djinni can move the whirlwind up to 60 feet as an action, and creatures restrained by the whirlwind move with it. The whirlwind ends if the djinni loses sight of it.\\nA creature can use its action to free a creature restrained by the whirlwind, including itself, by succeeding on a DC 18 Strength check. If the check succeeds, the creature is no longer restrained and moves to the nearest space outside the whirlwind.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Doppelganger",
    size: "Medium",
    type: "monstrosity",
    subtype: "shapechanger",
    alignment: "unaligned",
    ac: 14,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft.",
    stats: [11, 18, 14, 11, 12, 14],
    skillsaves: [{ deception: 6 }, { insight: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "charmed",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Common",
    cr: "3",
    traits: [
      {
        name: "Shapechanger",
        desc: "The doppelganger can use its action to polymorph into a Small or Medium humanoid it has seen, or back into its true form. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Ambusher",
        desc: "The doppelganger has advantage on attack rolls against any creature it has surprised.",
        attack_bonus: 0
      },
      {
        name: "Surprise Attack",
        desc: "If the doppelganger surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 10 (3d6) damage from the attack.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The doppelganger makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 4
      },
      {
        name: "Read Thoughts",
        desc: "The doppelganger magically reads the surface thoughts of one creature within 60 ft. of it. The effect can penetrate barriers, but 3 ft. of wood or dirt, 2 ft. of stone, 2 inches of metal, or a thin sheet of lead blocks it. While the target is in range, the doppelganger can continue reading its thoughts, as long as the doppelganger's concentration isn't broken (as if concentrating on a spell). While reading the target's mind, the doppelganger has advantage on Wisdom (Insight) and Charisma (Deception, Intimidation, and Persuasion) checks against the target.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Draft Horse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "40 ft.",
    stats: [18, 10, 12, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Dragon Turtle",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "neutral",
    ac: 20,
    hp: 341,
    hit_dice: "22d20 + 110",
    speed: "20 ft., swim 40 ft.",
    stats: [25, 10, 20, 10, 12, 12],
    saves: [{ dexterity: 6 }, { constitution: 11 }, { wisdom: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "fire",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Aquan, Draconic",
    cr: "17",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon turtle can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon turtle makes three attacks: one with its bite and two with its claws. It can make one tail attack in place of its two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) piercing damage.",
        attack_bonus: 13,
        damage_dice: "3d12",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 16 (2d8 + 7) slashing damage.",
        attack_bonus: 13,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be pushed up to 10 feet away from the dragon turtle and knocked prone.",
        attack_bonus: 13,
        damage_dice: "3d12",
        damage_bonus: 7
      },
      {
        name: "Steam Breath (Recharge 5-6)",
        desc: "The dragon turtle exhales scalding steam in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 52 (15d6) fire damage on a failed save, or half as much damage on a successful one. Being underwater doesn't grant resistance against this damage.",
        attack_bonus: 0,
        damage_dice: "15d6"
      }
    ]
  },
  {
    name: "Dretch",
    size: "Small",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 11,
    hp: 18,
    hit_dice: "4d6 + 4",
    speed: "20 ft.",
    stats: [11, 11, 12, 5, 8, 3],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "Abyssal, telepathy 60 ft. (works only with creatures that understand Abyssal)",
    cr: "1/4",
    actions: [
      {
        name: "Multiattack",
        desc: "The dretch makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 5 (2d4) slashing damage.",
        attack_bonus: 2,
        damage_dice: "2d4"
      },
      {
        name: "Fetid Cloud (1/Day)",
        desc: "A 10-foot radius of disgusting green gas extends out from the dretch. The gas spreads around corners, and its area is lightly obscured. It lasts for 1 minute or until a strong wind disperses it. Any creature that starts its turn in that area must succeed on a DC 11 Constitution saving throw or be poisoned until the start of its next turn. While poisoned in this way, the target can take either an action or a bonus action on its turn, not both, and can't take reactions.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Drider",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 123,
    hit_dice: "13d10 + 51",
    speed: "30 ft., climb 30 ft.",
    stats: [16, 16, 18, 13, 14, 12],
    skillsaves: [{ perception: 5 }, { stealth: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Elvish, Undercommon",
    cr: "6",
    traits: [
      {
        name: "Fey Ancestry",
        desc: "The drider has advantage on saving throws against being charmed, and magic can't put the drider to sleep.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The drider's innate spellcasting ability is Wisdom (spell save DC 13). The drider can innately cast the following spells, requiring no material components:\\nAt will: dancing lights\\n1/day each: darkness, faerie fire",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The drider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the drider has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The drider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The drider makes three attacks, either with its longsword or its longbow. It can replace one of those attacks with a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 2 (1d4) piercing damage plus 9 (2d8) poison damage.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) poison damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Drow",
    size: "Medium",
    type: "humanoid",
    subtype: "elf",
    alignment: "neutral evil",
    ac: 15,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "30 ft.",
    stats: [10, 14, 10, 11, 11, 12],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Elvish, Undercommon",
    cr: "1/4",
    traits: [
      {
        name: "Fey Ancestry",
        desc: "The drow has advantage on saving throws against being charmed, and magic can't put the drow to sleep.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The drow's spellcasting ability is Charisma (spell save DC 11). It can innately cast the following spells, requiring no material components:\\nAt will: dancing lights\\n1/day each: darkness, faerie fire",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the drow has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 hour. If the saving throw fails by 5 or more, the target is also unconscious while poisoned in this way. The target wakes up if it takes damage or if another creature takes an action to shake it awake.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Druid",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 11,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "30 ft.",
    stats: [10, 12, 13, 12, 15, 11],
    skillsaves: [{ nature: 3 }, { medicine: 4 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Druidic plus any two languages",
    cr: "2",
    traits: [],
    actions: [
      {
        name: "Quarterstaff",
        desc: "Melee Weapon Attack: +2 to hit (+4 to hit with shillelagh), reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage, or 6 (1d8 + 2) bludgeoning damage with shillelagh or if wielded with two hands.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ],
    spells: [
      "The druid is a 4th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). It has the following druid spells prepared:",
      { "Cantrips (at will)": "druidcraft, produce flame, shillelagh" },
      {
        "1st level (4 slots)": "entangle, longstrider, speak with animals, thunderwave"
      },
      { "2nd level (3 slots)": "animal messenger, barkskin" }
    ]
  },
  {
    name: "Dryad",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "neutral",
    ac: 11,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "30 ft.",
    stats: [10, 12, 11, 14, 15, 18],
    skillsaves: [{ perception: 4 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Elvish, Sylvan",
    cr: "1",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The dryad's innate spellcasting ability is Charisma (spell save DC 14). The dryad can innately cast the following spells, requiring no material components:\\n\\nAt will: druidcraft\\n3/day each: entangle, goodberry\\n1/day each: barkskin, pass without trace, shillelagh",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The dryad has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Speak with Beasts and Plants",
        desc: "The dryad can communicate with beasts and plants as if they shared a language.",
        attack_bonus: 0
      },
      {
        name: "Tree Stride",
        desc: "Once on her turn, the dryad can use 10 ft. of her movement to step magically into one living tree within her reach and emerge from a second living tree within 60 ft. of the first tree, appearing in an unoccupied space within 5 ft. of the second tree. Both trees must be large or bigger.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit (+6 to hit with shillelagh), reach 5 ft., one target. Hit: 2 (1 d4) bludgeoning damage, or 8 (1d8 + 4) bludgeoning damage with shillelagh.",
        attack_bonus: 2,
        damage_dice: "1d4"
      },
      {
        name: "Fey Charm",
        desc: "The dryad targets one humanoid or beast that she can see within 30 feet of her. If the target can see the dryad, it must succeed on a DC 14 Wisdom saving throw or be magically charmed. The charmed creature regards the dryad as a trusted friend to be heeded and protected. Although the target isn't under the dryad's control, it takes the dryad's requests or actions in the most favorable way it can.\\nEach time the dryad or its allies do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the dryad dies, is on a different plane of existence from the target, or ends the effect as a bonus action. If a target's saving throw is successful, the target is immune to the dryad's Fey Charm for the next 24 hours.\\nThe dryad can have no more than one humanoid and up to three beasts charmed at a time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Duergar",
    size: "Medium",
    type: "humanoid",
    subtype: "dwarf",
    alignment: "lawful evil",
    ac: 16,
    hp: 26,
    hit_dice: "4d8 + 8",
    speed: "25 ft.",
    stats: [14, 11, 14, 11, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "poison",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Dwarvish, Undercommon",
    cr: "1",
    traits: [
      {
        name: "Duergar Resilience",
        desc: "The duergar has advantage on saving throws against poison, spells, and illusions, as well as to resist being charmed or paralyzed.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the duergar has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Enlarge (Recharges after a Short or Long Rest)",
        desc: "For 1 minute, the duergar magically increases in size, along with anything it is wearing or carrying. While enlarged, the duergar is Large, doubles its damage dice on Strength-based weapon attacks (included in the attacks), and makes Strength checks and Strength saving throws with advantage. If the duergar lacks the room to become Large, it attains the maximum size possible in the space available.",
        attack_bonus: 0
      },
      {
        name: "War Pick",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage, or 11 (2d8 + 2) piercing damage while enlarged.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 9 (2d6 + 2) piercing damage while enlarged.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Invisibility (Recharges after a Short or Long Rest)",
        desc: "The duergar magically turns invisible until it attacks, casts a spell, or uses its Enlarge, or until its concentration is broken, up to 1 hour (as if concentrating on a spell). Any equipment the duergar wears or carries is invisible with it .",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Dust Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 12,
    hp: 17,
    hit_dice: "5d6 + -1",
    speed: "30 ft., fly 30 ft.",
    stats: [5, 14, 10, 9, 11, 10],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "fire",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Auran, Terran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of dust. Each creature within 5 ft. of it must then succeed on a DC 10 Constitution saving throw or be blinded for 1 minute. A blinded creature can repeat the saving throw on each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast sleep, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Blinding Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of blinding dust. Each creature in that area must succeed on a DC 10 Dexterity saving throw or be blinded for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Eagle",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "10 ft., fly 60 ft.",
    stats: [6, 15, 10, 2, 14, 7],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight",
        desc: "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Earth Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 17,
    hp: 126,
    hit_dice: "12d10 + 60",
    speed: "30 ft., burrow 30 ft.",
    stats: [20, 8, 20, 5, 10, 5],
    damage_vulnerabilities: "thunder",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, paralyzed, petrified, poisoned, unconscious",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
    languages: "Terran",
    cr: "5",
    traits: [
      {
        name: "Earth Glide",
        desc: "The elemental can burrow through nonmagical, unworked earth and stone. While doing so, the elemental doesn't disturb the material it moves through.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The elemental deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Efreeti",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 200,
    hit_dice: "16d10 + 112",
    speed: "40 ft., fly 60 ft.",
    stats: [22, 12, 24, 16, 15, 16],
    saves: [{ intelligence: 7 }, { wisdom: 6 }, { charisma: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Ignan",
    cr: "11",
    traits: [
      {
        name: "Elemental Demise",
        desc: "If the efreeti dies, its body disintegrates in a flash of fire and puff of smoke, leaving behind only equipment the djinni was wearing or carrying.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The efreeti's innate spell casting ability is Charisma (spell save DC 15, +7 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic\\n3/day: enlarge/reduce, tongues\\n1/day each: conjure elemental (fire elemental only), gaseous form, invisibility, major image, plane shift, wall of fire",
        attack_bonus: 0
      },
      {
        name: "Variant: Genie Powers",
        desc: "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\\n\\nDisguises.\\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\\nWishes.\\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The efreeti makes two scimitar attacks or uses its Hurl Flame twice.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage plus 7 (2d6) fire damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 6
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +7 to hit, range 120 ft., one target. Hit: 17 (5d6) fire damage.",
        attack_bonus: 7,
        damage_dice: "5d6"
      }
    ]
  },
  {
    name: "Elephant",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 76,
    hit_dice: "8d12 + 24",
    speed: "40 ft.",
    stats: [22, 9, 17, 3, 11, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "4",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the elephant moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the elephant can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) piercing damage.",
        attack_bonus: 8,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Elk",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d10 + 2",
    speed: "50 ft.",
    stats: [16, 10, 12, 2, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Charge",
        desc: "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 0
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one prone creature. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Erinyes",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 153,
    hit_dice: "18d8 + 72",
    speed: "30 ft., fly 60 ft.",
    stats: [18, 16, 18, 14, 14, 18],
    saves: [
      { dexterity: 7 },
      { constitution: 8 },
      { wisdom: 6 },
      { charisma: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 12",
    languages: "Infernal, telepathy 120 ft.",
    cr: "12",
    traits: [
      {
        name: "Hellish Weapons",
        desc: "The erinyes's weapon attacks are magical and deal an extra 13 (3d8) poison damage on a hit (included in the attacks).",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The erinyes has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The erinyes makes three attacks",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage, or 9 (1d10 + 4) slashing damage if used with two hands, plus 13 (3d8) poison damage.",
        attack_bonus: 8,
        damage_dice: "1d8 + 3d8",
        damage_bonus: 4
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +7 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 13 (3d8) poison damage, and the target must succeed on a DC 14 Constitution saving throw or be poisoned. The poison lasts until it is removed by the lesser restoration spell or similar magic.",
        attack_bonus: 7,
        damage_dice: "1d8 + 3d8",
        damage_bonus: 3
      },
      {
        name: "Variant: Rope of Entanglement",
        desc: "Some erinyes carry a rope of entanglement (detailed in the Dungeon Master's Guide). When such an erinyes uses its Multiattack, the erinyes can use the rope in place of two of the attacks.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The erinyes adds 4 to its AC against one melee attack that would hit it. To do so, the erinyes must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ettercap",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 44,
    hit_dice: "8d8 + 8",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 15, 13, 7, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 4 }, { survival: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Spider Climb",
        desc: "The ettercap can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the ettercap knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The ettercap ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The ettercap makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage plus 4 (1d8) poison damage. The target must succeed on a DC 11 Constitution saving throw or be poisoned for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Web (Recharge 5-6)",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/60 ft., one Large or smaller creature. Hit: The creature is restrained by webbing. As an action, the restrained creature can make a DC 11 Strength check, escaping from the webbing on a success. The effect ends if the webbing is destroyed. The webbing has AC 10, 5 hit points, is vulnerable to fire damage and immune to bludgeoning damage.",
        attack_bonus: 0
      },
      {
        name: "Variant: Web Garrote",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one Medium or Small creature against which the ettercap has advantage on the attack roll. Hit: 4 (1d4 + 2) bludgeoning damage, and the target is grappled (escape DC 12). Until this grapple ends, the target can't breathe, and the ettercap has advantage on attack rolls against it.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Ettin",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 85,
    hit_dice: "10d10 + 30",
    speed: "40 ft.",
    stats: [21, 8, 17, 6, 10, 8],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Giant, Orc",
    cr: "4",
    traits: [
      {
        name: "Two Heads",
        desc: "The ettin has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.",
        attack_bonus: 0
      },
      {
        name: "Wakeful",
        desc: "When one of the ettin's heads is asleep, its other head is awake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The ettin makes two attacks: one with its battleaxe and one with its morningstar.",
        attack_bonus: 0
      },
      {
        name: "Battleaxe",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      },
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Fire Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 13,
    hp: 102,
    hit_dice: "12d10 + 36",
    speed: "50 ft.",
    stats: [10, 17, 16, 6, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "5",
    traits: [
      {
        name: "Fire Form",
        desc: "The elemental can move through a space as narrow as 1 inch wide without squeezing. A creature that touches the elemental or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage. In addition, the elemental can enter a hostile creature's space and stop there. The first time it enters a creature's space on a turn, that creature takes 5 (1d10) fire damage and catches fire; until someone takes an action to douse the fire, the creature takes 5 (1d10) fire damage at the start of each of its turns.",
        attack_bonus: 0,
        damage_dice: "5d10"
      },
      {
        name: "Illumination",
        desc: "The elemental sheds bright light in a 30-foot radius and dim light in an additional 30 ft..",
        attack_bonus: 0
      },
      {
        name: "Water Susceptibility",
        desc: "For every 5 ft. the elemental moves in water, or for every gallon of water splashed on it, it takes 1 cold damage.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two touch attacks.",
        attack_bonus: 0
      },
      {
        name: "Touch",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) fire damage. If the target is a creature or a flammable object, it ignites. Until a creature takes an action to douse the fire, the target takes 5 (1d10) fire damage at the start of each of its turns.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Fire Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 162,
    hit_dice: "13d12 + 77",
    speed: "30 ft.",
    stats: [25, 9, 23, 10, 14, 13],
    saves: [{ dexterity: 3 }, { constitution: 10 }, { charisma: 5 }],
    skillsaves: [{ athletics: 11 }, { perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "Giant",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 28 (6d6 + 7) slashing damage.",
        attack_bonus: 11,
        damage_dice: "6d6",
        damage_bonus: 7
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +11 to hit, range 60/240 ft., one target. Hit: 29 (4d10 + 7) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "4d10",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Flesh Golem",
    size: "Medium",
    type: "construct",
    subtype: "",
    alignment: "neutral",
    ac: 9,
    hp: 93,
    hit_dice: "11d8 + 43",
    speed: "30 ft.",
    stats: [19, 9, 18, 6, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "5",
    traits: [
      {
        name: "Berserk",
        desc: "Whenever the golem starts its turn with 40 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.\\nThe golem's creator, if within 60 feet of the berserk golem, can try to calm it by speaking firmly and persuasively. The golem must be able to hear its creator, who must take an action to make a DC 15 Charisma (Persuasion) check. If the check succeeds, the golem ceases being berserk. If it takes damage while still at 40 hit points or fewer, the golem might go berserk again.",
        attack_bonus: 0
      },
      {
        name: "Aversion of Fire",
        desc: "If the golem takes fire damage, it has disadvantage on attack rolls and ability checks until the end of its next turn.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Lightning Absorption",
        desc: "Whenever the golem is subjected to lightning damage, it takes no damage and instead regains a number of hit points equal to the lightning damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Flying Snake",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 5,
    hit_dice: "2d4",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [4, 18, 11, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 11",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Flyby",
        desc: "The snake doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 1 piercing damage plus 7 (3d4) poison damage.",
        attack_bonus: 6,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Flying Sword",
    size: "Small",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 17,
    hit_dice: "5d6 + -1",
    speed: "0 ft., fly 50 ft. It can hover.",
    stats: [12, 15, 11, 1, 5, 1],
    saves: [{ dexterity: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 7",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The sword is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the sword must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the sword remains motionless and isn't flying, it is indistinguishable from a normal sword.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Frog",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "20 ft., swim 20 ft.",
    stats: [1, 13, 8, 1, 8, 3],
    skillsaves: [{ perception: 1 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Amphibious",
        desc: "The frog can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The frog's long jump is up to 10 ft. and its high jump is up to 5 ft., with or without a running start.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Frost Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 138,
    hit_dice: "12d12 + 60",
    speed: "40 ft.",
    stats: [23, 9, 21, 9, 10, 12],
    saves: [{ constitution: 8 }, { wisdom: 3 }, { charisma: 4 }],
    skillsaves: [{ athletics: 9 }, { perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Giant",
    cr: "8",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greataxe attacks.",
        attack_bonus: 0
      },
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 25 (3d12 + 6) slashing damage.",
        attack_bonus: 9,
        damage_dice: "3d12",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "4d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Gargoyle",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 52,
    hit_dice: "7d8 + 20",
    speed: "30 ft., fly 60 ft.",
    stats: [15, 11, 16, 6, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Terran",
    cr: "2",
    traits: [
      {
        name: "False Appearance",
        desc: "While the gargoyle remains motion less, it is indistinguishable from an inanimate statue.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gargoyle makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Gelatinous Cube",
    size: "Large",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 6,
    hp: 84,
    hit_dice: "8d10 + 40",
    speed: "15 ft.",
    stats: [14, 3, 20, 1, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Ooze Cube",
        desc: "The cube takes up its entire space. Other creatures can enter the space, but a creature that does so is subjected to the cube's Engulf and has disadvantage on the saving throw.\\nCreatures inside the cube can be seen but have total cover.\\nA creature within 5 feet of the cube can take an action to pull a creature or object out of the cube. Doing so requires a successful DC 12 Strength check, and the creature making the attempt takes 10 (3d6) acid damage.\\nThe cube can hold only one Large creature or up to four Medium or smaller creatures inside it at a time.",
        attack_bonus: 0
      },
      {
        name: "Transparent",
        desc: "Even when the cube is in plain sight, it takes a successful DC 15 Wisdom (Perception) check to spot a cube that has neither moved nor attacked. A creature that tries to enter the cube's space while unaware of the cube is surprised by the cube.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) acid damage.",
        attack_bonus: 4,
        damage_dice: "3d6"
      },
      {
        name: "Engulf",
        desc: "The cube moves up to its speed. While doing so, it can enter Large or smaller creatures' spaces. Whenever the cube enters a creature's space, the creature must make a DC 12 Dexterity saving throw.\\nOn a successful save, the creature can choose to be pushed 5 feet back or to the side of the cube. A creature that chooses not to be pushed suffers the consequences of a failed saving throw.\\nOn a failed save, the cube enters the creature's space, and the creature takes 10 (3d6) acid damage and is engulfed. The engulfed creature can't breathe, is restrained, and takes 21 (6d6) acid damage at the start of each of the cube's turns. When the cube moves, the engulfed creature moves with it.\\nAn engulfed creature can try to escape by taking an action to make a DC 12 Strength check. On a success, the creature escapes and enters a space of its choice within 5 feet of the cube.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ghast",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 36,
    hit_dice: "8d8",
    speed: "30 ft.",
    stats: [16, 17, 10, 11, 10, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "necrotic",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common",
    cr: "2",
    traits: [
      {
        name: "Stench",
        desc: "Any creature that starts its turn within 5 ft. of the ghast must succeed on a DC 10 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the ghast's Stench for 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Turn Defiance",
        desc: "The ghast and any ghouls within 30 ft. of it have advantage on saving throws against effects that turn undead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 12 (2d8 + 3) piercing damage.",
        attack_bonus: 3,
        damage_dice: "2d8",
        damage_bonus: 3
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a creature other than an undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Ghost",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "any alignment",
    ac: 11,
    hp: 45,
    hit_dice: "10d8",
    speed: "0 ft., fly 40 ft. It can hover.",
    stats: [7, 13, 10, 10, 12, 17],
    damage_vulnerabilities: "",
    damage_resistances: "acid, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "cold, necrotic, poison",
    condition_immunities: "charmed, exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "any languages it knew in life",
    cr: "4",
    traits: [
      {
        name: "Ethereal Sight",
        desc: "The ghost can see 60 ft. into the Ethereal Plane when it is on the Material Plane, and vice versa.",
        attack_bonus: 0
      },
      {
        name: "Incorporeal Movement",
        desc: "The ghost can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Withering Touch",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 17 (4d6 + 3) necrotic damage.",
        attack_bonus: 5,
        damage_dice: "4d6",
        damage_bonus: 3
      },
      {
        name: "Etherealness",
        desc: "The ghost enters the Ethereal Plane from the Material Plane, or vice versa. It is visible on the Material Plane while it is in the Border Ethereal, and vice versa, yet it can't affect or be affected by anything on the other plane.",
        attack_bonus: 0
      },
      {
        name: "Horrifying Visage",
        desc: "Each non-undead creature within 60 ft. of the ghost that can see it must succeed on a DC 13 Wisdom saving throw or be frightened for 1 minute. If the save fails by 5 or more, the target also ages 1d4 _ 10 years. A frightened target can repeat the saving throw at the end of each of its turns, ending the frightened condition on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to this ghost's Horrifying Visage for the next 24 hours. The aging effect can be reversed with a greater restoration spell, but only within 24 hours of it occurring.",
        attack_bonus: 0
      },
      {
        name: "Possession (Recharge 6)",
        desc: "One humanoid that the ghost can see within 5 ft. of it must succeed on a DC 13 Charisma saving throw or be possessed by the ghost; the ghost then disappears, and the target is incapacitated and loses control of its body. The ghost now controls the body but doesn't deprive the target of awareness. The ghost can't be targeted by any attack, spell, or other effect, except ones that turn undead, and it retains its alignment, Intelligence, Wisdom, Charisma, and immunity to being charmed and frightened. It otherwise uses the possessed target's statistics, but doesn't gain access to the target's knowledge, class features, or proficiencies.\\nThe possession lasts until the body drops to 0 hit points, the ghost ends it as a bonus action, or the ghost is turned or forced out by an effect like the dispel evil and good spell. When the possession ends, the ghost reappears in an unoccupied space within 5 ft. of the body. The target is immune to this ghost's Possession for 24 hours after succeeding on the saving throw or after the possession ends.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ghoul",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "30 ft.",
    stats: [13, 15, 10, 7, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) piercing damage.",
        attack_bonus: 2,
        damage_dice: "2d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage. If the target is a creature other than an elf or undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Ape",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 157,
    hit_dice: "15d12 + 59",
    speed: "40 ft., climb 40 ft.",
    stats: [23, 14, 18, 7, 12, 7],
    skillsaves: [{ athletics: 9 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "7",
    actions: [
      {
        name: "Multiattack",
        desc: "The ape makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 50/100 ft., one target. Hit: 30 (7d6 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "7d6",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Giant Badger",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d8 + 4",
    speed: "30 ft., burrow 10 ft.",
    stats: [13, 10, 15, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The badger makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Bat",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 22,
    hit_dice: "4d10",
    speed: "10 ft., fly 60 ft.",
    stats: [15, 16, 11, 2, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Echolocation",
        desc: "The bat can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Boar",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10 + 14",
    speed: "40 ft.",
    stats: [17, 10, 16, 2, 7, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the boar takes 10 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tusk",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Centipede",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d6",
    speed: "30 ft., climb 30 ft.",
    stats: [5, 14, 12, 1, 7, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 8",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Bite. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or take 10 (3d6) poison damage. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Constrictor Snake",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 60,
    hit_dice: "8d12 + 8",
    speed: "30 ft., swim 30 ft.",
    stats: [19, 14, 12, 1, 10, 3],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 12",
    languages: "",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 13 (2d8 + 4) bludgeoning damage, and the target is grappled (escape DC 16). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Crab",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "30 ft., swim 30 ft.",
    stats: [13, 15, 11, 1, 9, 3],
    skillsaves: [{ stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 9",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Amphibious",
        desc: "The crab can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage, and the target is grappled (escape DC 11). The crab has two claws, each of which can grapple only one target.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Crocodile",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 85,
    hit_dice: "9d12 + 26",
    speed: "30 ft., swim 50 ft.",
    stats: [21, 9, 17, 2, 10, 7],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Hold Breath",
        desc: "The crocodile can hold its breath for 30 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The crocodile makes two attacks: one with its bite and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 21 (3d10 + 5) piercing damage, and the target is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the crocodile can't bite another target.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target not grappled by the crocodile. Hit: 14 (2d8 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 16 Strength saving throw or be knocked prone.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Giant Eagle",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "neutral good",
    ac: 13,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "10 ft., fly 80 ft.",
    stats: [16, 17, 13, 8, 14, 10],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Giant Eagle, understands Common and Auran but can't speak",
    cr: "1",
    traits: [
      {
        name: "Keen Sight",
        desc: "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The eagle makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Elk",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 42,
    hit_dice: "5d12 + 9",
    speed: "60 ft.",
    stats: [19, 16, 14, 7, 14, 10],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Giant Elk, understands Common, Elvish, and Sylvan but can't speak",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one prone creature. Hit: 22 (4d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "4d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Fire Beetle",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d6",
    speed: "30 ft.",
    stats: [8, 10, 12, 1, 7, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 8",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Illumination",
        desc: "The beetle sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 2 (1d6 \u2014 1) slashing damage.",
        attack_bonus: 1,
        damage_dice: "1d6",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Giant Frog",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 18,
    hit_dice: "4d8",
    speed: "30 ft., swim 30 ft.",
    stats: [12, 13, 11, 2, 10, 3],
    skillsaves: [{ perception: 2 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Amphibious",
        desc: "The frog can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The frog's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage, and the target is grappled (escape DC 11). Until this grapple ends, the target is restrained, and the frog can't bite another target.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Swallow",
        desc: "The frog makes one bite attack against a Small or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the frog, and it takes 5 (2d4) acid damage at the start of each of the frog's turns. The frog can have only one target swallowed at a time. If the frog dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 ft. of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Goat",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "40 ft.",
    stats: [17, 11, 12, 3, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Charge",
        desc: "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 5 (2d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d4"
      },
      {
        name: "Sure-Footed",
        desc: "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Hyena",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "50 ft.",
    stats: [16, 14, 14, 2, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Rampage",
        desc: "When the hyena reduces a creature to 0 hit points with a melee attack on its turn, the hyena can take a bonus action to move up to half its speed and make a bite attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Lizard",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "30 ft., climb 30 ft.",
    stats: [15, 12, 13, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Variant: Hold Breath",
        desc: "The lizard can hold its breath for 15 minutes. (A lizard that has this trait also has a swimming speed of 30 feet.)",
        attack_bonus: 0
      },
      {
        name: "Variant: Spider Climb",
        desc: "The lizard can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Octopus",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 52,
    hit_dice: "8d10 + 8",
    speed: "10 ft., swim 60 ft.",
    stats: [17, 13, 13, 4, 10, 4],
    skillsaves: [{ perception: 4 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Hold Breath",
        desc: "While out of water, the octopus can hold its breath for 1 hour.",
        attack_bonus: 0
      },
      {
        name: "Underwater Camouflage",
        desc: "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The octopus can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +5 to hit, reach 15 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage. If the target is a creature, it is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the octopus can't use its tentacles on another target.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Ink Cloud (Recharges after a Short or Long Rest)",
        desc: "A 20-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Owl",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "neutral",
    ac: 12,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "5 ft., fly 60 ft.",
    stats: [13, 15, 12, 8, 13, 10],
    skillsaves: [{ perception: 5 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Giant Owl, understands Common, Elvish, and Sylvan but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Flyby",
        desc: "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Sight",
        desc: "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 8 (2d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Poisonous Snake",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft., swim 30 ft.",
    stats: [10, 18, 13, 2, 10, 3],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 12",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 6 (1d4 + 4) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Rat",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 11, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Smell",
        desc: "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The rat has advantage on an attack roll against a creature if at least one of the rat's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Rat (Diseased)",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 11, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 10 Constitution saving throw or contract a disease. Until the disease is cured, the target can't regain hit points except by magical means, and the target's hit point maximum decreases by 3 (1d6) every 24 hours. If the target's hit point maximum drops to 0 as a result of this disease, the target dies.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Scorpion",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 52,
    hit_dice: "7d10 + 13",
    speed: "40 ft.",
    stats: [15, 13, 15, 1, 9, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 9",
    languages: "",
    cr: "3",
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 12). The scorpion has two claws, each of which can grapple only one target.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Multiattack",
        desc: "The scorpion makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 12 Constitution saving throw, taking 22 (4d10) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Sea Horse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 16,
    hit_dice: "3d10 + -1",
    speed: "0 ft., swim 40 ft.",
    stats: [12, 15, 11, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Charge",
        desc: "If the sea horse moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) bludgeoning damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Water Breathing",
        desc: "The sea horse can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Shark",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 126,
    hit_dice: "11d12 + 54",
    speed: "swim 50 ft.",
    stats: [23, 11, 21, 1, 10, 5],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 13",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Giant Spider",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 16, 12, 2, 11, 4],
    skillsaves: [{ stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 9 (2d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Web (Recharge 5-6)",
        desc: "Ranged Weapon Attack: +5 to hit, range 30/60 ft., one creature. Hit: The target is restrained by webbing. As an action, the restrained target can make a DC 12 Strength check, bursting the webbing on a success. The webbing can also be attacked and destroyed (AC 10; hp 5; vulnerability to fire damage; immunity to bludgeoning, poison, and psychic damage).",
        attack_bonus: 5
      }
    ]
  },
  {
    name: "Giant Toad",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 39,
    hit_dice: "6d10 + 6",
    speed: "20 ft., swim 40 ft.",
    stats: [15, 13, 13, 2, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Amphibious",
        desc: "The toad can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The toad's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 5 (1d10) poison damage, and the target is grappled (escape DC 13). Until this grapple ends, the target is restrained, and the toad can't bite another target.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Swallow",
        desc: "The toad makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the toad, and it takes 10 (3d6) acid damage at the start of each of the toad's turns. The toad can have only one target swallowed at a time.\\nIf the toad dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Vulture",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "neutral evil",
    ac: 10,
    hp: 22,
    hit_dice: "3d10 + 5",
    speed: "10 ft., fly 60 ft.",
    stats: [15, 10, 15, 6, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "understands Common but can't speak",
    cr: "1",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vulture makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Wasp",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "10 ft., fly 50 ft., swim 50 ft.",
    stats: [10, 14, 10, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Sting",
        desc: "Sting. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Weasel",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 9,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [11, 16, 10, 4, 12, 5],
    skillsaves: [{ perception: 3 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Wolf Spider",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft., climb 40 ft.",
    stats: [12, 16, 13, 3, 12, 4],
    skillsaves: [{ perception: 3 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 7 (2d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Gibbering Mouther",
    size: "Medium",
    type: "aberration",
    subtype: "",
    alignment: "neutral",
    ac: 9,
    hp: 67,
    hit_dice: "9d8 + 26",
    speed: "10 ft., swim 10 ft.",
    stats: [10, 8, 16, 3, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "prone",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Aberrant Ground",
        desc: "The ground in a 10-foot radius around the mouther is doughlike difficult terrain. Each creature that starts its turn in that area must succeed on a DC 10 Strength saving throw or have its speed reduced to 0 until the start of its next turn.",
        attack_bonus: 0
      },
      {
        name: "Gibbering",
        desc: "The mouther babbles incoherently while it can see any creature and isn't incapacitated. Each creature that starts its turn within 20 feet of the mouther and can hear the gibbering must succeed on a DC 10 Wisdom saving throw. On a failure, the creature can't take reactions until the start of its next turn and rolls a d8 to determine what it does during its turn. On a 1 to 4, the creature does nothing. On a 5 or 6, the creature takes no action or bonus action and uses all its movement to move in a randomly determined direction. On a 7 or 8, the creature makes a melee attack against a randomly determined creature within its reach or does nothing if it can't make such an attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gibbering mouther makes one bite attack and, if it can, uses its Blinding Spittle.",
        attack_bonus: 0
      },
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 17 (5d6) piercing damage. If the target is Medium or smaller, it must succeed on a DC 10 Strength saving throw or be knocked prone. If the target is killed by this damage, it is absorbed into the mouther.",
        attack_bonus: 2,
        damage_dice: "5d6"
      },
      {
        name: "Blinding Spittle (Recharge 5-6)",
        desc: "The mouther spits a chemical glob at a point it can see within 15 feet of it. The glob explodes in a blinding flash of light on impact. Each creature within 5 feet of the flash must succeed on a DC 13 Dexterity saving throw or be blinded until the end of the mouther's next turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Glabrezu",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 17,
    hp: 157,
    hit_dice: "15d10 + 74",
    speed: "40 ft.",
    stats: [20, 15, 21, 19, 17, 16],
    saves: [
      { strength: 9 },
      { constitution: 9 },
      { wisdom: 7 },
      { charisma: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "9",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The glabrezu's spellcasting ability is Intelligence (spell save DC 16). The glabrezu can innately cast the following spells, requiring no material components:\\nAt will: darkness, detect magic, dispel magic\\n1/day each: confusion, fly, power word stun",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The glabrezu has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The glabrezu makes four attacks: two with its pincers and two with its fists. Alternatively, it makes two attacks with its pincers and casts one spell.",
        attack_bonus: 0
      },
      {
        name: "Pincer",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a Medium or smaller creature, it is grappled (escape DC 15). The glabrezu has two pincers, each of which can grapple only one target.",
        attack_bonus: 9,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA glabrezu has a 30 percent chance of summoning 1d3 vrocks, 1d2 hezrous, or one glabrezu.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gladiator",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 16,
    hp: 112,
    hit_dice: "15d8 + 44",
    speed: "30 ft.",
    stats: [18, 15, 16, 10, 12, 15],
    saves: [{ strength: 7 }, { dexterity: 5 }, { constitution: 6 }],
    skillsaves: [{ intimidation: 5 }, { athletics: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any one language (usually Common)",
    cr: "5",
    traits: [
      {
        name: "Brave",
        desc: "The gladiator has advantage on saving throws against being frightened.",
        attack_bonus: 0
      },
      {
        name: "Brute",
        desc: "A melee weapon deals one extra die of its damage when the gladiator hits with it (included in the attack).",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gladiator makes three melee attacks or two ranged attacks.",
        attack_bonus: 0
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. and range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Shield Bash",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 9 (2d4 + 4) bludgeoning damage. If the target is a Medium or smaller creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 7,
        damage_dice: "2d4",
        damage_bonus: 4
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The gladiator adds 3 to its AC against one melee attack that would hit it. To do so, the gladiator must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gnoll",
    size: "Medium",
    type: "humanoid",
    subtype: "gnoll",
    alignment: "chaotic evil",
    ac: 15,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "30 ft.",
    stats: [14, 12, 11, 6, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Gnoll",
    cr: "1/2",
    traits: [
      {
        name: "Rampage",
        desc: "When the gnoll reduces a creature to 0 hit points with a melee attack on its turn, the gnoll can take a bonus action to move up to half its speed and make a bite attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Goat",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 4,
    hit_dice: "1d8 + -1",
    speed: "40 ft.",
    stats: [12, 10, 11, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Charge",
        desc: "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 2 (1d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 10 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "1d4"
      },
      {
        name: "Sure-Footed",
        desc: "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Goblin",
    size: "Small",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "neutral evil",
    ac: 15,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [8, 14, 10, 10, 8, 8],
    skillsaves: [{ stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "Common, Goblin",
    cr: "1/4",
    traits: [
      {
        name: "Nimble Escape",
        desc: "The goblin can take the Disengage or Hide action as a bonus action on each of its turns.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Gold Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 60,
    hit_dice: "8d8 + 24",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [19, 14, 17, 14, 11, 16],
    saves: [
      { dexterity: 4 },
      { constitution: 5 },
      { wisdom: 2 },
      { charisma: 5 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "3",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 22 (4d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ]
  },
  {
    name: "Gorgon",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 19,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "40 ft.",
    stats: [20, 11, 18, 2, 12, 7],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "petrified",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the gorgon moves at least 20 feet straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 16 Strength saving throw or be knocked prone. If the target is prone, the gorgon can make one attack with its hooves against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 18 (2d12 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "2d12",
        damage_bonus: 5
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Petrifying Breath (Recharge 5-6)",
        desc: "The gorgon exhales petrifying gas in a 30-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw. On a failed save, a target begins to turn to stone and is restrained. The restrained target must repeat the saving throw at the end of its next turn. On a success, the effect ends on the target. On a failure, the target is petrified until freed by the greater restoration spell or other magic.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gray Ooze",
    size: "Medium",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 8,
    hp: 22,
    hit_dice: "3d8 + 8",
    speed: "10 ft., climb 10 ft.",
    stats: [12, 6, 16, 1, 6, 2],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire",
    damage_immunities: "",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Amorphous",
        desc: "The ooze can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Corrode Metal",
        desc: "Any nonmagical weapon made of metal that hits the ooze corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal that hits the ooze is destroyed after dealing damage.\\nThe ooze can eat through 2-inch-thick, nonmagical metal in 1 round.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the ooze remains motionless, it is indistinguishable from an oily pool or wet rock.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage plus 7 (2d6) acid damage, and if the target is wearing nonmagical metal armor, its armor is partly corroded and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Green Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 38,
    hit_dice: "7d8 + 6",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [15, 12, 13, 14, 11, 13],
    saves: [
      { dexterity: 3 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 3 (1d6) poison damage.",
        attack_bonus: 4,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 11 Constitution saving throw, taking 21 (6d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Green Hag",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 82,
    hit_dice: "11d8 + 32",
    speed: "30 ft.",
    stats: [18, 12, 16, 13, 14, 14],
    skillsaves: [
      { arcana: 3 },
      { deception: 4 },
      { perception: 4 },
      { stealth: 3 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common, Draconic, Sylvan",
    cr: "3",
    traits: [
      {
        name: "Amphibious",
        desc: "The hag can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The hag's innate spellcasting ability is Charisma (spell save DC 12). She can innately cast the following spells, requiring no material components:\\n\\nAt will: dancing lights, minor illusion, vicious mockery",
        attack_bonus: 0
      },
      {
        name: "Mimicry",
        desc: "The hag can mimic animal sounds and humanoid voices. A creature that hears the sounds can tell they are imitations with a successful DC 14 Wisdom (Insight) check.",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\\n\\n\u2022 1st level (4 slots): identify, ray of sickness\\n\u2022 2nd level (3 slots): hold person, locate object\\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\\n\u2022 4th level (3 slots): phantasmal killer, polymorph\\n\u2022 5th level (2 slots): contact other plane, scrying\\n\u2022 6th level (1 slot): eye bite\\n\\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Illusory Appearance",
        desc: "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like another creature of her general size and humanoid shape. The illusion ends if the hag takes a bonus action to end it or if she dies.\\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have smooth skin, but someone touching her would feel her rough flesh. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 20 Intelligence (Investigation) check to discern that the hag is disguised.",
        attack_bonus: 0
      },
      {
        name: "Invisible Passage",
        desc: "The hag magically turns invisible until she attacks or casts a spell, or until her concentration ends (as if concentrating on a spell). While invisible, she leaves no physical evidence of her passage, so she can be tracked only by magic. Any equipment she wears or carries is invisible with her.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Grick",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 27,
    hit_dice: "6d8",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 14, 11, 3, 14, 5],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing damage from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The grick has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The grick makes one attack with its tentacles. If that attack hits, the grick can make one beak attack against the same target.",
        attack_bonus: 0
      },
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Griffon",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "30 ft., fly 80 ft.",
    stats: [18, 15, 16, 2, 13, 8],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Sight",
        desc: "The griffon has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The griffon makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Grimlock",
    size: "Medium",
    type: "humanoid",
    subtype: "grimlock",
    alignment: "neutral evil",
    ac: 11,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [16, 12, 12, 9, 8, 6],
    skillsaves: [{ athletics: 5 }, { perception: 3 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "blinded",
    condition_immunities: "",
    senses: "blindsight 30 ft. or 10 ft. while deafened (blind beyond this radius), passive Perception 13",
    languages: "Undercommon",
    cr: "1/4",
    traits: [
      {
        name: "Blind Senses",
        desc: "The grimlock can't use its blindsight while deafened and unable to smell.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The grimlock has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Stone Camouflage",
        desc: "The grimlock has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spiked Bone Club",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) bludgeoning damage plus 2 (1d4) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4 + 1d4",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Guard",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 16,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [13, 12, 12, 10, 11, 10],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "1/8",
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Guardian Naga",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 127,
    hit_dice: "15d10 + 44",
    speed: "40 ft.",
    stats: [19, 18, 16, 16, 19, 18],
    saves: [
      { dexterity: 8 },
      { constitution: 7 },
      { intelligence: 7 },
      { wisdom: 8 },
      { charisma: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Celestial, Common",
    cr: "10",
    traits: [
      {
        name: "Rejuvenation",
        desc: "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 8 (1d8 + 4) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Spit Poison",
        desc: "Ranged Weapon Attack: +8 to hit, range 15/30 ft., one creature. Hit: The target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 8,
        damage_dice: "10d8"
      }
    ],
    spells: [
      "The naga is an 11th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 16, +8 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following cleric spells prepared:",
      { "Cantrips (at will)": "mending, sacred flame, thaumaturgy" },
      { "1st level (4 slots)": "command, cure wounds, shield of faith" },
      { "2nd level (3 slots)": "calm emotions, hold person" },
      { "3rd level (3 slots)": "bestow curse, clairvoyance" },
      { "4th level (3 slots)": "banishment, freedom of movement" },
      { "5th level (2 slots)": "flame strike, geas" },
      { "6th level (1 slot)": "true seeing" }
    ]
  },
  {
    name: "Gynosphinx",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 136,
    hit_dice: "16d10 + 48",
    speed: "40 ft., fly 60 ft.",
    stats: [18, 15, 16, 18, 18, 18],
    skillsaves: [
      { arcana: 12 },
      { history: 12 },
      { perception: 8 },
      { religion: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "psychic",
    condition_immunities: "charmed, frightened",
    senses: "truesight 120 ft., passive Perception 18",
    languages: "Common, Sphinx",
    cr: "11",
    traits: [
      {
        name: "Inscrutable",
        desc: "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The sphinx's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sphinx makes two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ],
    legendary_actions: [
      {
        name: "Claw Attack",
        desc: "The sphinx makes one claw attack.",
        attack_bonus: 0
      },
      {
        name: "Teleport (Costs 2 Actions)",
        desc: "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Cast a Spell (Costs 3 Actions)",
        desc: "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The sphinx is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 16, +8 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, minor illusion, prestidigitation"
      },
      { "1st level (4 slots)": "detect magic, identify, shield" },
      { "2nd level (3 slots)": "darkness, locate object, suggestion" },
      { "3rd level (3 slots)": "dispel magic, remove curse, tongues" },
      { "4th level (3 slots)": "banishment, greater invisibility" },
      { "5th level (1 slot)": "legend lore" }
    ]
  },
  {
    name: "Half-Red Dragon Veteran",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "any alignment",
    ac: 18,
    hp: 65,
    hit_dice: "10d8 + 20",
    speed: "30 ft.",
    stats: [16, 13, 14, 10, 11, 10],
    damage_vulnerabilities: "",
    damage_resistances: "fire",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 12",
    languages: "Common, Draconic",
    cr: "5",
    actions: [
      {
        name: "Multiattack",
        desc: "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d10",
        damage_bonus: 1
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The veteran exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d6"
      }
    ]
  },
  {
    name: "Harpy",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 11,
    hp: 38,
    hit_dice: "7d8 + 6",
    speed: "20 ft., fly 40 ft.",
    stats: [12, 13, 12, 7, 10, 13],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "Common",
    cr: "1",
    actions: [
      {
        name: "Multiattack",
        desc: "The harpy makes two attacks: one with its claws and one with its club.",
        attack_bonus: 0
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      },
      {
        name: "Club",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Luring Song",
        desc: "The harpy sings a magical melody. Every humanoid and giant within 300 ft. of the harpy that can hear the song must succeed on a DC 11 Wisdom saving throw or be charmed until the song ends. The harpy must take a bonus action on its subsequent turns to continue singing. It can stop singing at any time. The song ends if the harpy is incapacitated.\\nWhile charmed by the harpy, a target is incapacitated and ignores the songs of other harpies. If the charmed target is more than 5 ft. away from the harpy, the must move on its turn toward the harpy by the most direct route. It doesn't avoid opportunity attacks, but before moving into damaging terrain, such as lava or a pit, and whenever it takes damage from a source other than the harpy, a target can repeat the saving throw. A creature can also repeat the saving throw at the end of each of its turns. If a creature's saving throw is successful, the effect ends on it.\\nA target that successfully saves is immune to this harpy's song for the next 24 hours.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Hawk",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "10 ft., fly 60 ft.",
    stats: [5, 16, 8, 2, 14, 6],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Hell Hound",
    size: "Medium",
    type: "fiend",
    subtype: "",
    alignment: "lawful evil",
    ac: 15,
    hp: 45,
    hit_dice: "7d8 + 13",
    speed: "50 ft.",
    stats: [17, 12, 14, 6, 13, 6],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "understands Infernal but can't speak it",
    cr: "3",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The hound has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The hound has advantage on an attack roll against a creature if at least one of the hound's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 7 (2d6) fire damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The hound exhales fire in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Hezrou",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 16,
    hp: 136,
    hit_dice: "13d10 + 64",
    speed: "30 ft.",
    stats: [19, 17, 20, 5, 12, 13],
    saves: [{ strength: 7 }, { constitution: 8 }, { wisdom: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "8",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The hezrou has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Stench",
        desc: "Any creature that starts its turn within 10 feet of the hezrou must succeed on a DC 14 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the hezrou's stench for 24 hours.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hezrou makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA hezrou has a 30 percent chance of summoning 2d6 dretches or one hezrou.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Hill Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 105,
    hit_dice: "10d12 + 40",
    speed: "40 ft.",
    stats: [21, 8, 19, 5, 9, 6],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Giant",
    cr: "5",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatclub attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 18 (3d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d8",
        damage_bonus: 5
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +8 to hit, range 60/240 ft., one target. Hit: 21 (3d10 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Hippogriff",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "40 ft, fly 60 ft.",
    stats: [17, 13, 13, 2, 12, 8],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hippogriff has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hippogriff makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Hobgoblin",
    size: "Medium",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "lawful evil",
    ac: 18,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [13, 12, 12, 10, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Goblin",
    cr: "1/2",
    traits: [
      {
        name: "Martial Advantage",
        desc: "Once per turn, the hobgoblin can deal an extra 7 (2d6) damage to a creature it hits with a weapon attack if that creature is within 5 ft. of an ally of the hobgoblin that isn't incapacitated.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage, or 6 (1d10 + 1) slashing damage if used with two hands.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Homunculus",
    size: "Tiny",
    type: "construct",
    subtype: "",
    alignment: "neutral",
    ac: 13,
    hp: 5,
    hit_dice: "2d4",
    speed: "20 ft., fly 40 ft.",
    stats: [4, 15, 11, 10, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "0",
    traits: [
      {
        name: "Telepathic Bond",
        desc: "While the homunculus is on the same plane of existence as its master, it can magically convey what it senses to its master, and the two can communicate telepathically.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or be poisoned for 1 minute. If the saving throw fails by 5 or more, the target is instead poisoned for 5 (1d10) minutes and unconscious while poisoned in this way.",
        attack_bonus: 4,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Horned Devil",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 148,
    hit_dice: "17d10 + 54",
    speed: "20 ft., fly 60 ft.",
    stats: [22, 17, 21, 12, 16, 17],
    saves: [
      { strength: 10 },
      { dexterity: 7 },
      { wisdom: 7 },
      { charisma: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "Infernal, telepathy 120 ft.",
    cr: "11",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three melee attacks: two with its fork and one with its tail. It can use Hurl Flame in place of any melee attack.",
        attack_bonus: 0
      },
      {
        name: "Fork",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (2d8 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 10 (1d8 + 6) piercing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 17 Constitution saving throw or lose 10 (3d6) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 10 (3d6). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
        attack_bonus: 10,
        damage_dice: "1d8",
        damage_bonus: 6
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +7 to hit, range 150 ft., one target. Hit: 14 (4d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
        attack_bonus: 7,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Hunter Shark",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "swim 40 ft.",
    stats: [18, 13, 15, 1, 10, 4],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Hydra",
    size: "Huge",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 172,
    hit_dice: "15d12 + 74",
    speed: "30 ft., swim 30 ft.",
    stats: [20, 12, 20, 2, 10, 7],
    skillsaves: [{ perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 16",
    languages: "",
    cr: "8",
    traits: [
      {
        name: "Hold Breath",
        desc: "The hydra can hold its breath for 1 hour.",
        attack_bonus: 0
      },
      {
        name: "Multiple Heads",
        desc: "The hydra has five heads. While it has more than one head, the hydra has advantage on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.\\nWhenever the hydra takes 25 or more damage in a single turn, one of its heads dies. If all its heads die, the hydra dies.\\nAt the end of its turn, it grows two heads for each of its heads that died since its last turn, unless it has taken fire damage since its last turn. The hydra regains 10 hit points for each head regrown in this way.",
        attack_bonus: 0
      },
      {
        name: "Reactive Heads",
        desc: "For each head the hydra has beyond one, it gets an extra reaction that can be used only for opportunity attacks.",
        attack_bonus: 0
      },
      {
        name: "Wakeful",
        desc: "While the hydra sleeps, at least one of its heads is awake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hydra makes as many bite attacks as it has heads.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "1d10",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Hyena",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 5,
    hit_dice: "1d8",
    speed: "50 ft.",
    stats: [11, 13, 12, 2, 12, 5],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The hyena has advantage on an attack roll against a creature if at least one of the hyena's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ]
  },
  {
    name: "Ice Devil",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 180,
    hit_dice: "19d10 + 75",
    speed: "40 ft.",
    stats: [21, 14, 18, 18, 15, 18],
    saves: [
      { dexterity: 7 },
      { constitution: 9 },
      { wisdom: 7 },
      { charisma: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 12",
    languages: "Infernal, telepathy 120 ft.",
    cr: "14",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: one with its bite, one with its claws, and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) piercing damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 10 (2d4 + 5) slashing damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d4 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack:+10 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Wall of Ice",
        desc: "The devil magically forms an opaque wall of ice on a solid surface it can see within 60 feet of it. The wall is 1 foot thick and up to 30 feet long and 10 feet high, or it's a hemispherical dome up to 20 feet in diameter.\\nWhen the wall appears, each creature in its space is pushed out of it by the shortest route. The creature chooses which side of the wall to end up on, unless the creature is incapacitated. The creature then makes a DC 17 Dexterity saving throw, taking 35 (10d6) cold damage on a failed save, or half as much damage on a successful one.\\nThe wall lasts for 1 minute or until the devil is incapacitated or dies. The wall can be damaged and breached; each 10-foot section has AC 5, 30 hit points, vulnerability to fire damage, and immunity to acid, cold, necrotic, poison, and psychic damage. If a section is destroyed, it leaves behind a sheet of frigid air in the space the wall occupied. Whenever a creature finishes moving through the frigid air on a turn, willingly or otherwise, the creature must make a DC 17 Constitution saving throw, taking 17 (5d6) cold damage on a failed save, or half as much damage on a successful one. The frigid air dissipates when the rest of the wall vanishes.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ice Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 11,
    hp: 21,
    hit_dice: "6d6",
    speed: "30 ft., fly 30 ft.",
    stats: [7, 13, 10, 9, 11, 12],
    skillsaves: [{ perception: 2 }, { stealth: 3 }],
    damage_vulnerabilities: "bludgeoning, fire",
    damage_resistances: "",
    damage_immunities: "cold, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Aquan, Auran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of jagged ice. Each creature within 5 ft. of it must make a DC 10 Dexterity saving throw, taking 4 (1d8) slashing damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "False Appearance",
        desc: "While the mephit remains motionless, it is indistinguishable from an ordinary shard of ice.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast fog cloud, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) cold damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Frost Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of cold air. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 5 (2d4) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Imp",
    size: "Tiny",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 13,
    hp: 10,
    hit_dice: "3d4 + 2",
    speed: "20 ft., fly 40 ft.",
    stats: [6, 17, 13, 11, 12, 14],
    skillsaves: [
      { deception: 4 },
      { insight: 3 },
      { persuasion: 4 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical/nonsilver weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Infernal, Common",
    cr: "1",
    traits: [
      {
        name: "Shapechanger",
        desc: "The imp can use its action to polymorph into a beast form that resembles a rat (speed 20 ft.), a raven (20 ft., fly 60 ft.), or a spider (20 ft., climb 20 ft.), or back into its true form. Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the imp's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The imp has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The imp can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the imp is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the imp can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Sting (Bite in Beast Form)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must make on a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Invisibility",
        desc: "The imp magically turns invisible until it attacks, or until its concentration ends (as if concentrating on a spell). Any equipment the imp wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Invisible Stalker",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 104,
    hit_dice: "16d8 + 32",
    speed: "50 ft., fly 50 ft. (hover)",
    stats: [16, 19, 14, 10, 15, 11],
    skillsaves: [{ perception: 8 }, { stealth: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 18",
    languages: "Auran, understands Common but doesn't speak it",
    cr: "6",
    traits: [
      {
        name: "Invisibility",
        desc: "The stalker is invisible.",
        attack_bonus: 0
      },
      {
        name: "Faultless Tracker",
        desc: "The stalker is given a quarry by its summoner. The stalker knows the direction and distance to its quarry as long as the two of them are on the same plane of existence. The stalker also knows the location of its summoner.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The stalker makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Iron Golem",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 20,
    hp: 210,
    hit_dice: "20d10 + 100",
    speed: "30 ft.",
    stats: [24, 9, 20, 3, 11, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "16",
    traits: [
      {
        name: "Fire Absorption",
        desc: "Whenever the golem is subjected to fire damage, it takes no damage and instead regains a number of hit points equal to the fire damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
        attack_bonus: 13,
        damage_dice: "3d8",
        damage_bonus: 7
      },
      {
        name: "Sword",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 23 (3d10 + 7) slashing damage.",
        attack_bonus: 13,
        damage_dice: "3d10",
        damage_bonus: 7
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The golem exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 45 (l0d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d8"
      }
    ]
  },
  {
    name: "Jackal",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "40 ft.",
    stats: [8, 15, 11, 3, 12, 6],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The jackal has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The jackal has advantage on an attack roll against a creature if at least one of the jackal's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) piercing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Killer Whale",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 90,
    hit_dice: "12d12 + 12",
    speed: "swim 60 ft.",
    stats: [19, 10, 13, 3, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 120 ft., passive Perception 13",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Echolocation",
        desc: "The whale can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Hold Breath",
        desc: "The whale can hold its breath for 30 minutes",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The whale has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 21 (5d6 + 4) piercing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Knight",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 18,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft.",
    stats: [16, 11, 14, 11, 11, 15],
    saves: [{ constitution: 4 }, { wisdom: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "3",
    traits: [
      {
        name: "Brave",
        desc: "The knight has advantage on saving throws against being frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The knight makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d10"
      },
      {
        name: "Leadership (Recharges after a Short or Long Rest)",
        desc: "For 1 minute, the knight can utter a special command or warning whenever a nonhostile creature that it can see within 30 ft. of it makes an attack roll or a saving throw. The creature can add a d4 to its roll provided it can hear and understand the knight. A creature can benefit from only one Leadership die at a time. This effect ends if the knight is incapacitated.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The knight adds 2 to its AC against one melee attack that would hit it. To do so, the knight must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Kobold",
    size: "Small",
    type: "humanoid",
    subtype: "kobold",
    alignment: "lawful evil",
    ac: 12,
    hp: 5,
    hit_dice: "2d6 + -2",
    speed: "30 ft.",
    stats: [7, 15, 9, 8, 7, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "Common, Draconic",
    cr: "1/8",
    traits: [
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the kobold has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The kobold has advantage on an attack roll against a creature if at least one of the kobold's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Dagger",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Sling",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Kraken",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "titan",
    alignment: "chaotic evil",
    ac: 18,
    hp: 472,
    hit_dice: "27d20 + 188",
    speed: "20 ft., swim 60 ft.",
    stats: [30, 11, 25, 22, 18, 20],
    saves: [
      { strength: 17 },
      { dexterity: 7 },
      { constitution: 14 },
      { intelligence: 13 },
      { wisdom: 11 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "frightened, paralyzed",
    senses: "truesight 120 ft., passive Perception 14",
    languages: "understands Abyssal, Celestial, Infernal, and Primordial but can't speak, telepathy 120 ft.",
    cr: "23",
    traits: [
      {
        name: "Amphibious",
        desc: "The kraken can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Freedom of Movement",
        desc: "The kraken ignores difficult terrain, and magical effects can't reduce its speed or cause it to be restrained. It can spend 5 feet of movement to escape from nonmagical restraints or being grappled.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The kraken deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The kraken makes three tentacle attacks, each of which it can replace with one use of Fling.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 23 (3d8 + 10) piercing damage. If the target is a Large or smaller creature grappled by the kraken, that creature is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the kraken, and it takes 42 (12d6) acid damage at the start of each of the kraken's turns. If the kraken takes 50 damage or more on a single turn from a creature inside it, the kraken must succeed on a DC 25 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the kraken. If the kraken dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
        attack_bonus: 7,
        damage_dice: "3d8",
        damage_bonus: 10
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +7 to hit, reach 30 ft., one target. Hit: 20 (3d6 + 10) bludgeoning damage, and the target is grappled (escape DC 18). Until this grapple ends, the target is restrained. The kraken has ten tentacles, each of which can grapple one target.",
        attack_bonus: 7,
        damage_dice: "3d6",
        damage_bonus: 10
      },
      {
        name: "Fling",
        desc: "One Large or smaller object held or creature grappled by the kraken is thrown up to 60 feet in a random direction and knocked prone. If a thrown target strikes a solid surface, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 18 Dexterity saving throw or take the same damage and be knocked prone.",
        attack_bonus: 0
      },
      {
        name: "Lightning Storm",
        desc: "The kraken magically creates three bolts of lightning, each of which can strike a target the kraken can see within 120 feet of it. A target must make a DC 23 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ],
    legendary_actions: [
      {
        name: "Tentacle Attack or Fling",
        desc: "The kraken makes one tentacle attack or uses its Fling.",
        attack_bonus: 0
      },
      {
        name: "Lightning Storm (Costs 2 Actions)",
        desc: "The kraken uses Lightning Storm.",
        attack_bonus: 0
      },
      {
        name: "Ink Cloud (Costs 3 Actions)",
        desc: "While underwater, the kraken expels an ink cloud in a 60-foot radius. The cloud spreads around corners, and that area is heavily obscured to creatures other than the kraken. Each creature other than the kraken that ends its turn there must succeed on a DC 23 Constitution saving throw, taking 16 (3d10) poison damage on a failed save, or half as much damage on a successful one. A strong current disperses the cloud, which otherwise disappears at the end of the kraken's next turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Lamia",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 97,
    hit_dice: "13d10 + 25",
    speed: "30 ft.",
    stats: [16, 13, 15, 14, 15, 16],
    skillsaves: [{ deception: 7 }, { insight: 4 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Abyssal, Common",
    cr: "4",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The lamia's innate spellcasting ability is Charisma (spell save DC 13). It can innately cast the following spells, requiring no material components. At will: disguise self (any humanoid form), major image 3/day each: charm person, mirror image, scrying, suggestion 1/day: geas",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The lamia makes two attacks: one with its claws and one with its dagger or Intoxicating Touch.",
        attack_bonus: 0
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d10",
        damage_bonus: 3
      },
      {
        name: "Dagger",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Intoxicating Touch",
        desc: "Melee Spell Attack: +5 to hit, reach 5 ft., one creature. Hit: The target is magically cursed for 1 hour. Until the curse ends, the target has disadvantage on Wisdom saving throws and all ability checks.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Lemure",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 7,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "15 ft.",
    stats: [10, 5, 11, 1, 11, 3],
    damage_vulnerabilities: "",
    damage_resistances: "cold",
    damage_immunities: "fire, poison",
    condition_immunities: "charmed, frightened, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands infernal but can't speak",
    cr: "0",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the lemure's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Hellish Rejuvenation",
        desc: "A lemure that dies in the Nine Hells comes back to life with all its hit points in 1d10 days unless it is killed by a good-aligned creature with a bless spell cast on that creature or its remains are sprinkled with holy water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage",
        attack_bonus: 3,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Lich",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "any evil alignment",
    ac: 17,
    hp: 135,
    hit_dice: "18d8 + 54",
    speed: "30 ft.",
    stats: [11, 16, 16, 20, 14, 16],
    saves: [{ constitution: 10 }, { intelligence: 12 }, { wisdom: 9 }],
    skillsaves: [
      { arcana: 18 },
      { history: 12 },
      { insight: 9 },
      { perception: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, lightning, necrotic",
    damage_immunities: "poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "truesight 120 ft., passive Perception 19",
    languages: "Common plus up to five other languages",
    cr: "21",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the lich fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Rejuvenation",
        desc: "If it has a phylactery, a destroyed lich gains a new body in 1d10 days, regaining all its hit points and becoming active again. The new body appears within 5 feet of the phylactery.",
        attack_bonus: 0
      },
      {
        name: "Turn Resistance",
        desc: "The lich has advantage on saving throws against any effect that turns undead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Paralyzing Touch",
        desc: "Melee Spell Attack: +12 to hit, reach 5 ft., one creature. Hit: 10 (3d6) cold damage. The target must succeed on a DC 18 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 12,
        damage_dice: "3d6"
      }
    ],
    legendary_actions: [
      {
        name: "Cantrip",
        desc: "The lich casts a cantrip.",
        attack_bonus: 0
      },
      {
        name: "Paralyzing Touch (Costs 2 Actions)",
        desc: "The lich uses its Paralyzing Touch.",
        attack_bonus: 0
      },
      {
        name: "Frightening Gaze (Costs 2 Actions)",
        desc: "The lich fixes its gaze on one creature it can see within 10 feet of it. The target must succeed on a DC 18 Wisdom saving throw against this magic or become frightened for 1 minute. The frightened target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to the lich's gaze for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Disrupt Life (Costs 3 Actions)",
        desc: "Each living creature within 20 feet of the lich must make a DC 18 Constitution saving throw against this magic, taking 21 (6d6) necrotic damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ],
    spells: [
      "The lich is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 20, +12 to hit with spell attacks). The lich has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, prestidigitation, ray of frost"
      },
      {
        "1st level (4 slots)": "detect magic, magic missile, shield, thunderwave"
      },
      {
        "2nd level (3 slots)": "detect thoughts, invisibility, Melf's acid arrow, mirror image"
      },
      {
        "3rd level (3 slots)": "animate dead, counterspell, dispel magic, fireball"
      },
      { "4th level (3 slots)": "blight, dimension door" },
      { "5th level (3 slots)": "cloudkill, scrying" },
      { "6th level (1 slot)": "disintegrate, globe of invulnerability" },
      { "7th level (1 slot)": "finger of death, plane shift" },
      { "8th level (1 slot)": "dominate monster, power word stun" },
      { "9th level (1 slot)": "power word kill" }
    ]
  },
  {
    name: "Lion",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "50 ft.",
    stats: [17, 15, 13, 3, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The lion has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The lion has advantage on an attack roll against a creature if at least one of the lion's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the lion moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the lion can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      },
      {
        name: "Running Leap",
        desc: "With a 10-foot running start, the lion can long jump up to 25 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Lizard",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [2, 11, 10, 1, 8, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 9",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Lizardfolk",
    size: "Medium",
    type: "humanoid",
    subtype: "lizardfolk",
    alignment: "neutral",
    ac: 15,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "30 ft., swim 30 ft.",
    stats: [15, 10, 13, 7, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 4 }, { survival: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Draconic",
    cr: "1/2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The lizardfolk can hold its breath for 15 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The lizardfolk makes two melee attacks, each one with a different weapon.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Heavy Club",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Spiked Shield",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Mage",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 40,
    hit_dice: "9d8 + -1",
    speed: "30 ft.",
    stats: [9, 14, 11, 17, 12, 11],
    saves: [{ intelligence: 6 }, { wisdom: 4 }],
    skillsaves: [{ arcana: 6 }, { history: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any four languages",
    cr: "6",
    traits: [],
    actions: [
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The mage is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks). The mage has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "fire bolt, light, mage hand, prestidigitation"
      },
      {
        "1st level (4 slots)": "detect magic, mage armor, magic missile, shield"
      },
      { "2nd level (3 slots)": "misty step, suggestion" },
      { "3rd level (3 slots)": "counterspell, fireball, fly" },
      { "4th level (3 slots)": "greater invisibility, ice storm" },
      { "5th level (1 slot)": "cone of cold" }
    ]
  },
  {
    name: "Magma Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 11,
    hp: 22,
    hit_dice: "5d6 + 4",
    speed: "30 ft., fly 30 ft.",
    stats: [8, 12, 12, 7, 10, 10],
    skillsaves: [{ stealth: 3 }],
    damage_vulnerabilities: "cold",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan, Terran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of lava. Each creature within 5 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "False Appearance",
        desc: "While the mephit remains motionless, it is indistinguishable from an ordinary mound of magma.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast heat metal (spell save DC 10), requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft ., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) fire damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Fire Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of fire. Each creature in that area must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Magmin",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 9,
    hit_dice: "2d6 + 2",
    speed: "30 ft.",
    stats: [7, 15, 12, 8, 11, 10],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the magmin dies, it explodes in a burst of fire and magma. Each creature within 10 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one. Flammable objects that aren't being worn or carried in that area are ignited.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Ignited Illumination",
        desc: "As a bonus action, the magmin can set itself ablaze or extinguish its flames. While ablaze, the magmin sheds bright light in a 10-foot radius and dim light for an additional 10 ft.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Touch",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d6) fire damage. If the target is a creature or a flammable object, it ignites. Until a target takes an action to douse the fire, the target takes 3 (1d6) fire damage at the end of each of its turns.",
        attack_bonus: 4,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Mammoth",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 126,
    hit_dice: "11d12 + 54",
    speed: "40 ft.",
    stats: [24, 9, 21, 3, 11, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "6",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the mammoth moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 18 Strength saving throw or be knocked prone. If the target is prone, the mammoth can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 25 (4d8 + 7) piercing damage.",
        attack_bonus: 10,
        damage_dice: "4d8",
        damage_bonus: 7
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one prone creature. Hit: 29 (4d10 + 7) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "4d10",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Manticore",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful evil",
    ac: 14,
    hp: 68,
    hit_dice: "8d10 + 24",
    speed: "30 ft., fly 50 ft.",
    stats: [17, 16, 17, 7, 12, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Tail Spike Regrowth",
        desc: "The manticore has twenty-four tail spikes. Used spikes regrow when the manticore finishes a long rest.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The manticore makes three attacks: one with its bite and two with its claws or three with its tail spikes.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Tail Spike",
        desc: "Ranged Weapon Attack: +5 to hit, range 100/200 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Marilith",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 18,
    hp: 189,
    hit_dice: "18d10 + 90",
    speed: "40 ft.",
    stats: [18, 20, 20, 18, 16, 20],
    saves: [
      { strength: 9 },
      { constitution: 10 },
      { wisdom: 8 },
      { charisma: 10 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "16",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The marilith has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The marilith's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Reactive",
        desc: "The marilith can take one reaction on every turn in combat.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The marilith can make seven attacks: six with its longswords and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 15 (2d10 + 4) bludgeoning damage. If the target is Medium or smaller, it is grappled (escape DC 19). Until this grapple ends, the target is restrained, the marilith can automatically hit the target with its tail, and the marilith can't make tail attacks against other targets.",
        attack_bonus: 9,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Teleport",
        desc: "The marilith magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA marilith has a 50 percent chance of summoning 1d6 vrocks, 1d4 hezrous, 1d3 glabrezus, 1d2 nalfeshnees, or one marilith.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The marilith adds 5 to its AC against one melee attack that would hit it. To do so, the marilith must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Mastiff",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 5,
    hit_dice: "1d8",
    speed: "40 ft.",
    stats: [13, 14, 12, 3, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The mastiff has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Medusa",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful evil",
    ac: 15,
    hp: 127,
    hit_dice: "17d8 + 50",
    speed: "30 ft.",
    stats: [10, 15, 16, 12, 13, 15],
    skillsaves: [
      { deception: 5 },
      { insight: 4 },
      { perception: 4 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common",
    cr: "6",
    traits: [
      {
        name: "Petrifying Gaze",
        desc: "When a creature that can see the medusa's eyes starts its turn within 30 ft. of the medusa, the medusa can force it to make a DC 14 Constitution saving throw if the medusa isn't incapacitated and can see the creature. If the saving throw fails by 5 or more, the creature is instantly petrified. Otherwise, a creature that fails the save begins to turn to stone and is restrained. The restrained creature must repeat the saving throw at the end of its next turn, becoming petrified on a failure or ending the effect on a success. The petrification lasts until the creature is freed by the greater restoration spell or other magic.\\nUnless surprised, a creature can avert its eyes to avoid the saving throw at the start of its turn. If the creature does so, it can't see the medusa until the start of its next turn, when it can avert its eyes again. If the creature looks at the medusa in the meantime, it must immediately make the save.\\nIf the medusa sees itself reflected on a polished surface within 30 ft. of it and in an area of bright light, the medusa is, due to its curse, affected by its own gaze.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The medusa makes either three melee attacks \u2014  one with its snake hair and two with its shortsword \u2014 or two ranged attacks with its longbow.",
        attack_bonus: 0
      },
      {
        name: "Snake Hair",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage plus 14 (4d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +5 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Merfolk",
    size: "Medium",
    type: "humanoid",
    subtype: "merfolk",
    alignment: "neutral",
    ac: 11,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "10 ft., swim 40 ft.",
    stats: [10, 13, 12, 11, 11, 12],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Aquan, Common",
    cr: "1/8",
    traits: [
      {
        name: "Amphibious",
        desc: "The merfolk can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +2 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 3 (1d6) piercing damage, or 4 (1d8) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ]
  },
  {
    name: "Merrow",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "10 ft., swim 40 ft.",
    stats: [18, 10, 15, 8, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Abyssal, Aquan",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The merrow can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The merrow makes two attacks: one with its bite and one with its claws or harpoon.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 4
      },
      {
        name: "Harpoon",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a Huge or smaller creature, it must succeed on a Strength contest against the merrow or be pulled up to 20 feet toward the merrow.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Mimic",
    size: "Medium",
    type: "monstrosity",
    subtype: "shapechanger",
    alignment: "neutral",
    ac: 12,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "15 ft.",
    stats: [17, 12, 15, 5, 13, 8],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "prone",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Shapechanger",
        desc: "The mimic can use its action to polymorph into an object or back into its true, amorphous form. Its statistics are the same in each form. Any equipment it is wearing or carrying isn 't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Adhesive (Object Form Only)",
        desc: "The mimic adheres to anything that touches it. A Huge or smaller creature adhered to the mimic is also grappled by it (escape DC 13). Ability checks made to escape this grapple have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "False Appearance (Object Form Only)",
        desc: "While the mimic remains motionless, it is indistinguishable from an ordinary object.",
        attack_bonus: 0
      },
      {
        name: "Grappler",
        desc: "The mimic has advantage on attack rolls against any creature grappled by it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage. If the mimic is in object form, the target is subjected to its Adhesive trait.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 5,
        damage_dice: "1d8 + 1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Minotaur",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 76,
    hit_dice: "9d10 + 26",
    speed: "40 ft.",
    stats: [18, 11, 16, 6, 16, 9],
    skillsaves: [{ perception: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 17",
    languages: "Abyssal",
    cr: "3",
    traits: [
      {
        name: "Charge",
        desc: "If the minotaur moves at least 10 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 ft. away and knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      },
      {
        name: "Labyrinthine Recall",
        desc: "The minotaur can perfectly recall any path it has traveled.",
        attack_bonus: 0
      },
      {
        name: "Reckless",
        desc: "At the start of its turn, the minotaur can gain advantage on all melee weapon attack rolls it makes during that turn, but attack rolls against it have advantage until the start of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d12",
        damage_bonus: 4
      },
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Minotaur Skeleton",
    size: "Large",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 12,
    hp: 67,
    hit_dice: "9d10 + 17",
    speed: "40 ft.",
    stats: [18, 11, 15, 6, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands Abyssal but can't speak",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the skeleton moves at least 10 feet straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 feet away and knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d12",
        damage_bonus: 4
      },
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Mule",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [14, 10, 13, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Beast of Burden",
        desc: "The mule is considered to be a Large animal for the purpose of determining its carrying capacity.",
        attack_bonus: 0
      },
      {
        name: "Sure-Footed",
        desc: "The mule has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Mummy",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 11,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "20 ft.",
    stats: [16, 8, 15, 6, 10, 12],
    saves: [{ wisdom: 2 }],
    damage_vulnerabilities: "fire",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "necrotic, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "the languages it knew in life",
    cr: "3",
    actions: [
      {
        name: "Multiattack",
        desc: "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
        attack_bonus: 0
      },
      {
        name: "Rotting Fist",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage plus 10 (3d6) necrotic damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Dreadful Glare",
        desc: "The mummy targets one creature it can see within 60 ft. of it. If the target can see the mummy, it must succeed on a DC 11 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies (but not mummy lords) for the next 24 hours.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Mummy Lord",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 97,
    hit_dice: "13d8 + 38",
    speed: "20 ft.",
    stats: [18, 10, 17, 11, 18, 16],
    saves: [
      { constitution: 8 },
      { intelligence: 5 },
      { wisdom: 9 },
      { charisma: 8 }
    ],
    skillsaves: [{ history: 5 }, { religion: 5 }],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "necrotic, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "the languages it knew in life",
    cr: "15",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The mummy lord has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Rejuvenation",
        desc: "A destroyed mummy lord gains a new body in 24 hours if its heart is intact, regaining all its hit points and becoming active again. The new body appears within 5 feet of the mummy lord's heart.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
        attack_bonus: 0
      },
      {
        name: "Rotting Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage plus 21 (6d6) necrotic damage. If the target is a creature, it must succeed on a DC 16 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
        attack_bonus: 9,
        damage_dice: "3d6 + 6d6",
        damage_bonus: 4
      },
      {
        name: "Dreadful Glare",
        desc: "The mummy lord targets one creature it can see within 60 feet of it. If the target can see the mummy lord, it must succeed on a DC 16 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies and mummy lords for the next 24 hours.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Attack",
        desc: "The mummy lord makes one attack with its rotting fist or uses its Dreadful Glare.",
        attack_bonus: 0
      },
      {
        name: "Blinding Dust",
        desc: "Blinding dust and sand swirls magically around the mummy lord. Each creature within 5 feet of the mummy lord must succeed on a DC 16 Constitution saving throw or be blinded until the end of the creature's next turn.",
        attack_bonus: 0
      },
      {
        name: "Blasphemous Word (Costs 2 Actions)",
        desc: "The mummy lord utters a blasphemous word. Each non-undead creature within 10 feet of the mummy lord that can hear the magical utterance must succeed on a DC 16 Constitution saving throw or be stunned until the end of the mummy lord's next turn.",
        attack_bonus: 0
      },
      {
        name: "Channel Negative Energy (Costs 2 Actions)",
        desc: "The mummy lord magically unleashes negative energy. Creatures within 60 feet of the mummy lord, including ones behind barriers and around corners, can't regain hit points until the end of the mummy lord's next turn.",
        attack_bonus: 0
      },
      {
        name: "Whirlwind of Sand (Costs 2 Actions)",
        desc: "The mummy lord magically transforms into a whirlwind of sand, moves up to 60 feet, and reverts to its normal form. While in whirlwind form, the mummy lord is immune to all damage, and it can't be grappled, petrified, knocked prone, restrained, or stunned. Equipment worn or carried by the mummy lord remain in its possession.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The mummy lord is a 10th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 17, +9 to hit with spell attacks). The mummy lord has the following cleric spells prepared:",
      { "Cantrips (at will)": "sacred flame, thaumaturgy" },
      { "1st level (4 slots)": "command, guiding bolt, shield of faith" },
      { "2nd level (3 slots)": "hold person, silence, spiritual weapon" },
      { "3rd level (3 slots)": "animate dead, dispel magic" },
      { "4th level (3 slots)": "divination, guardian of faith" },
      { "5th level (2 slots)": "contagion, insect plague" },
      { "6th level (1 slot)": "harm" }
    ]
  },
  {
    name: "Nalfeshnee",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 18,
    hp: 184,
    hit_dice: "16d10 + 96",
    speed: "20 ft., fly 30 ft.",
    stats: [21, 10, 22, 19, 12, 15],
    saves: [
      { constitution: 11 },
      { intelligence: 9 },
      { wisdom: 6 },
      { charisma: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "13",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The nalfeshnee has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The nalfeshnee uses Horror Nimbus if it can.  It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 32 (5d10 + 5) piercing damage.",
        attack_bonus: 10,
        damage_dice: "5d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (3d6 + 5) slashing damage.",
        attack_bonus: 10,
        damage_dice: "3d6",
        damage_bonus: 5
      },
      {
        name: "Horror Nimbus (Recharge 5-6)",
        desc: "The nalfeshnee magically emits scintillating, multicolored light. Each creature within 15 feet of the nalfeshnee that can see the light must succeed on a DC 15 Wisdom saving throw or be frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the nalfeshnee's Horror Nimbus for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Teleport",
        desc: "The nalfeshnee magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA nalfeshnee has a 50 percent chance of summoning 1d4 vrocks, 1d3 hezrous, 1d2 glabrezus, or one nalfeshnee.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Night Hag",
    size: "Medium",
    type: "fiend",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 112,
    hit_dice: "15d8 + 44",
    speed: "30 ft.",
    stats: [18, 15, 16, 16, 14, 16],
    skillsaves: [
      { deception: 7 },
      { insight: 6 },
      { perception: 6 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "",
    condition_immunities: "charmed",
    senses: "darkvision 120 ft., passive Perception 16",
    languages: "Abyssal, Common, Infernal, Primordial",
    cr: "5",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The hag's innate spellcasting ability is Charisma (spell save DC 14, +6 to hit with spell attacks). She can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic, magic missile\\n2/day each: plane shift (self only), ray of enfeeblement, sleep",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The hag has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Night Hag Items",
        desc: "A night hag carries two very rare magic items that she must craft for herself If either object is lost, the night hag will go to great lengths to retrieve it, as creating a new tool takes time and effort.\\nHeartstone: This lustrous black gem allows a night hag to become ethereal while it is in her possession. The touch of a heartstone also cures any disease. Crafting a heartstone takes 30 days.\\nSoul Bag: When an evil humanoid dies as a result of a night hag's Nightmare Haunting, the hag catches the soul in this black sack made of stitched flesh. A soul bag can hold only one evil soul at a time, and only the night hag who crafted the bag can catch a soul with it. Crafting a soul bag takes 7 days and a humanoid sacrifice (whose flesh is used to make the bag).",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\\n\\n\u2022 1st level (4 slots): identify, ray of sickness\\n\u2022 2nd level (3 slots): hold person, locate object\\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\\n\u2022 4th level (3 slots): phantasmal killer, polymorph\\n\u2022 5th level (2 slots): contact other plane, scrying\\n\u2022 6th level (1 slot): eye bite\\n\\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws (Hag Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Change Shape",
        desc: "The hag magically polymorphs into a Small or Medium female humanoid, or back into her true form. Her statistics are the same in each form. Any equipment she is wearing or carrying isn't transformed. She reverts to her true form if she dies.",
        attack_bonus: 0
      },
      {
        name: "Etherealness",
        desc: "The hag magically enters the Ethereal Plane from the Material Plane, or vice versa. To do so, the hag must have a heartstone in her possession.",
        attack_bonus: 0
      },
      {
        name: "Nightmare Haunting (1/Day)",
        desc: "While on the Ethereal Plane, the hag magically touches a sleeping humanoid on the Material Plane. A protection from evil and good spell cast on the target prevents this contact, as does a magic circle. As long as the contact persists, the target has dreadful visions. If these visions last for at least 1 hour, the target gains no benefit from its rest, and its hit point maximum is reduced by 5 (1d10). If this effect reduces the target's hit point maximum to 0, the target dies, and if the target was evil, its soul is trapped in the hag's soul bag. The reduction to the target's hit point maximum lasts until removed by the greater restoration spell or similar magic.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Nightmare",
    size: "Large",
    type: "fiend",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 68,
    hit_dice: "8d10 + 24",
    speed: "60 ft., fly 90 ft.",
    stats: [18, 15, 16, 10, 13, 15],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "understands Abyssal, Common, and Infernal but can't speak",
    cr: "3",
    traits: [
      {
        name: "Confer Fire Resistance",
        desc: "The nightmare can grant resistance to fire damage to anyone riding it.",
        attack_bonus: 0
      },
      {
        name: "Illumination",
        desc: "The nightmare sheds bright light in a 10-foot radius and dim light for an additional 10 feet.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage plus 7 (2d6) fire damage.",
        attack_bonus: 6,
        damage_dice: "2d8 + 2d6",
        damage_bonus: 4
      },
      {
        name: "Ethereal Stride",
        desc: "The nightmare and up to three willing creatures within 5 feet of it magically enter the Ethereal Plane from the Material Plane, or vice versa.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Noble",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 15,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 11, 12, 14, 16],
    skillsaves: [{ deception: 5 }, { insight: 4 }, { persuasion: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any two languages",
    cr: "1/8",
    actions: [
      {
        name: "Rapier",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The noble adds 2 to its AC against one melee attack that would hit it. To do so, the noble must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ochre Jelly",
    size: "Large",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 8,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "10 ft., climb 10 ft.",
    stats: [15, 6, 14, 2, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "acid",
    damage_immunities: "lightning, slashing",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Amorphous",
        desc: "The jelly can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The jelly can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) bludgeoning damage plus 3 (1d6) acid damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ],
    reactions: [
      {
        name: "Split",
        desc: "When a jelly that is Medium or larger is subjected to lightning or slashing damage, it splits into two new jellies if it has at least 10 hit points. Each new jelly has hit points equal to half the original jelly's, rounded down. New jellies are one size smaller than the original jelly.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Octopus",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "5 ft., swim 30 ft.",
    stats: [4, 15, 11, 3, 10, 4],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Hold Breath",
        desc: "While out of water, the octopus can hold its breath for 30 minutes.",
        attack_bonus: 0
      },
      {
        name: "Underwater Camouflage",
        desc: "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The octopus can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage, and the target is grappled (escape DC 10). Until this grapple ends, the octopus can't use its tentacles on another target.",
        attack_bonus: 4,
        damage_bonus: 1
      },
      {
        name: "Ink Cloud (Recharges after a Short or Long Rest)",
        desc: "A 5-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ogre",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 11,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "40 ft.",
    stats: [19, 8, 16, 5, 7, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "Common, Giant",
    cr: "2",
    actions: [
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Ogre Zombie",
    size: "Large",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 8,
    hp: 85,
    hit_dice: "9d10 + 35",
    speed: "30 ft.",
    stats: [19, 6, 18, 3, 6, 5],
    saves: [{ wisdom: 0 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "understands Common and Giant but can't speak",
    cr: "2",
    traits: [
      {
        name: "Undead Fortitude",
        desc: "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Oni",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "lawful evil",
    ac: 16,
    hp: 110,
    hit_dice: "13d10 + 38",
    speed: "30 ft., fly 30 ft.",
    stats: [19, 11, 16, 14, 12, 15],
    saves: [
      { dexterity: 3 },
      { constitution: 6 },
      { wisdom: 4 },
      { charisma: 5 }
    ],
    skillsaves: [{ arcana: 5 }, { deception: 8 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common, Giant",
    cr: "7",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The oni's innate spellcasting ability is Charisma (spell save DC 13). The oni can innately cast the following spells, requiring no material components:\\n\\nAt will: darkness, invisibility\\n1/day each: charm person, cone of cold, gaseous form, sleep",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The oni's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The oni regains 10 hit points at the start of its turn if it has at least 1 hit point.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The oni makes two attacks, either with its claws or its glaive.",
        attack_bonus: 0
      },
      {
        name: "Claw (Oni Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Glaive",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) slashing damage, or 9 (1d10 + 4) slashing damage in Small or Medium form.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Change Shape",
        desc: "The oni magically polymorphs into a Small or Medium humanoid, into a Large giant, or back into its true form. Other than its size, its statistics are the same in each form. The only equipment that is transformed is its glaive, which shrinks so that it can be wielded in humanoid form. If the oni dies, it reverts to its true form, and its glaive reverts to its normal size.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Orc",
    size: "Medium",
    type: "humanoid",
    subtype: "orc",
    alignment: "chaotic evil",
    ac: 13,
    hp: 15,
    hit_dice: "2d8 + 6",
    speed: "30 ft.",
    stats: [16, 12, 16, 7, 11, 10],
    skillsaves: [{ intimidation: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Orc",
    cr: "1/2",
    traits: [
      {
        name: "Aggressive",
        desc: "As a bonus action, the orc can move up to its speed toward a hostile creature that it can see.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d12",
        damage_bonus: 3
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Otyugh",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "30 ft.",
    stats: [16, 11, 19, 6, 13, 6],
    saves: [{ constitution: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Otyugh",
    cr: "5",
    traits: [
      {
        name: "Limited Telepathy",
        desc: "The otyugh can magically transmit simple messages and images to any creature within 120 ft. of it that can understand a language. This form of telepathy doesn't allow the receiving creature to telepathically respond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The otyugh makes three attacks: one with its bite and two with its tentacles.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d8 + 3) piercing damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the target must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. The disease is cured on a success. The target dies if the disease reduces its hit point maximum to 0. This reduction to the target's hit point maximum lasts until the disease is cured.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 3
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage plus 4 (1d8) piercing damage. If the target is Medium or smaller, it is grappled (escape DC 13) and restrained until the grapple ends. The otyugh has two tentacles, each of which can grapple one target.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Tentacle Slam",
        desc: "The otyugh slams creatures grappled by it into each other or a solid surface. Each creature must succeed on a DC 14 Constitution saving throw or take 10 (2d6 + 3) bludgeoning damage and be stunned until the end of the otyugh's next turn. On a successful save, the target takes half the bludgeoning damage and isn't stunned.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Owl",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "5 ft., fly 60 ft.",
    stats: [3, 13, 8, 2, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Flyby",
        desc: "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Sight",
        desc: "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 3,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Owlbear",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "40 ft.",
    stats: [20, 12, 17, 3, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The owlbear has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The owlbear makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d10",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Panther",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "50 ft., climb 40 ft.",
    stats: [14, 15, 10, 3, 14, 7],
    skillsaves: [{ perception: 4 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The panther has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the panther moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the panther can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Pegasus",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "chaotic good",
    ac: 12,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "60 ft., fly 90 ft.",
    stats: [18, 15, 16, 10, 15, 13],
    saves: [{ dexterity: 4 }, { wisdom: 4 }, { charisma: 3 }],
    skillsaves: [{ perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "understands Celestial, Common, Elvish, and Sylvan but can't speak",
    cr: "2",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Phase Spider",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 32,
    hit_dice: "5d10 + 4",
    speed: "30 ft., climb 30 ft.",
    stats: [15, 15, 12, 6, 10, 6],
    skillsaves: [{ stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Ethereal Jaunt",
        desc: "As a bonus action, the spider can magically shift from the Material Plane to the Ethereal Plane, or vice versa.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 18 (4d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Pit Fiend",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 19,
    hp: 300,
    hit_dice: "24d10 + 168",
    speed: "30 ft., fly 60 ft.",
    stats: [26, 14, 24, 22, 18, 24],
    saves: [{ dexterity: 8 }, { constitution: 13 }, { wisdom: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 14",
    languages: "Infernal, telepathy 120 ft.",
    cr: "20",
    traits: [
      {
        name: "Fear Aura",
        desc: "Any creature hostile to the pit fiend that starts its turn within 20 feet of the pit fiend must make a DC 21 Wisdom saving throw, unless the pit fiend is incapacitated. On a failed save, the creature is frightened until the start of its next turn. If a creature's saving throw is successful, the creature is immune to the pit fiend's Fear Aura for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The pit fiend has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The pit fiend's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The pit fiend's spellcasting ability is Charisma (spell save DC 21). The pit fiend can innately cast the following spells, requiring no material components:\\nAt will: detect magic, fireball\\n3/day each: hold monster, wall of fire",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The pit fiend makes four attacks: one with its bite, one with its claw, one with its mace, and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) piercing damage. The target must succeed on a DC 21 Constitution saving throw or become poisoned. While poisoned in this way, the target can't regain hit points, and it takes 21 (6d6) poison damage at the start of each of its turns. The poisoned target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 14,
        damage_dice: "4d6",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft. , one target. Hit: 17 (2d8 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 15 (2d6 + 8) bludgeoning damage plus 21 (6d6) fire damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 24 (3d1O + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "3d10",
        damage_bonus: 8
      }
    ]
  },
  {
    name: "Planetar",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 200,
    hit_dice: "16d10 + 112",
    speed: "40 ft., fly 120 ft.",
    stats: [24, 20, 24, 19, 22, 25],
    saves: [{ constitution: 12 }, { wisdom: 11 }, { charisma: 12 }],
    skillsaves: [{ perception: 11 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "charmed, exhaustion, frightened",
    senses: "truesight 120 ft., passive Perception 21",
    languages: "all, telepathy 120 ft.",
    cr: "16",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The planetar's weapon attacks are magical. When the planetar hits with any weapon, the weapon deals an extra 5d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Divine Awareness",
        desc: "The planetar knows if it hears a lie.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The planetar's spellcasting ability is Charisma (spell save DC 20). The planetar can innately cast the following spells, requiring no material components:\\nAt will: detect evil and good, invisibility (self only)\\n3/day each: blade barrier, dispel evil and good, flame strike, raise dead\\n1/day each: commune, control weather, insect plague",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The planetar has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The planetar makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 21 (4d6 + 7) slashing damage plus 22 (5d8) radiant damage.",
        attack_bonus: 12,
        damage_dice: "4d6 + 5d8",
        damage_bonus: 7
      },
      {
        name: "Healing Touch (4/Day)",
        desc: "The planetar touches another creature. The target magically regains 30 (6d8 + 3) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Plesiosaurus",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 68,
    hit_dice: "8d10 + 24",
    speed: "20 ft., swim 40 ft.",
    stats: [18, 15, 16, 2, 12, 5],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The plesiosaurus can hold its breath for 1 hour.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Poisonous Snake",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "30 ft., swim 30 ft.",
    stats: [2, 16, 11, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage, and the target must make a DC 10 Constitution saving throw, taking 5 (2d4) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Polar Bear",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10 + 14",
    speed: "40 ft., swim 30 ft.",
    stats: [20, 10, 16, 2, 13, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Pony",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [15, 10, 13, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Priest",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 13,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "25 ft.",
    stats: [10, 10, 12, 13, 16, 13],
    skillsaves: [{ medicine: 7 }, { persuasion: 3 }, { religion: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "any two languages",
    cr: "2",
    traits: [
      {
        name: "Divine Eminence",
        desc: "As a bonus action, the priest can expend a spell slot to cause its melee weapon attacks to magically deal an extra 10 (3d6) radiant damage to a target on a hit. This benefit lasts until the end of the turn. If the priest expends a spell slot of 2nd level or higher, the extra damage increases by 1d6 for each level above 1st.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ],
    spells: [
      "The priest is a 5th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 13, +5 to hit with spell attacks). The priest has the following cleric spells prepared:",
      { "Cantrips (at will)": "light, sacred flame, thaumaturgy" },
      { "1st level (4 slots)": "cure wounds, guiding bolt, sanctuary" },
      { "2nd level (3 slots)": "lesser restoration, spiritual weapon" },
      { "3rd level (2 slots)": "dispel magic, spirit guardians" }
    ]
  },
  {
    name: "Pseudodragon",
    size: "Tiny",
    type: "dragon",
    subtype: "",
    alignment: "neutral good",
    ac: 13,
    hp: 7,
    hit_dice: "2d4 + 2",
    speed: "15 ft., fly 60 ft.",
    stats: [6, 15, 13, 10, 12, 10],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
    languages: "understands Common and Draconic but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Keen Senses",
        desc: "The pseudodragon has advantage on Wisdom (Perception) checks that rely on sight, hearing, or smell.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The pseudodragon has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Limited Telepathy",
        desc: "The pseudodragon can magically communicate simple ideas, emotions, and images telepathically with any creature within 100 ft. of it that can understand a language.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The pseudodragon can serve another creature as a familiar, forming a magic, telepathic bond with that willing companion. While the two are bonded, the companion can sense what the pseudodragon senses as long as they are within 1 mile of each other. While the pseudodragon is within 10 feet of its companion, the companion shares the pseudodragon's Magic Resistance trait. At any time and for any reason, the pseudodragon can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or become poisoned for 1 hour. If the saving throw fails by 5 or more, the target falls unconscious for the same duration, or until it takes damage or another creature uses an action to shake it awake.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Purple Worm",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 18,
    hp: 247,
    hit_dice: "15d20 + 89",
    speed: "50 ft., burrow 30 ft.",
    stats: [28, 7, 22, 1, 8, 4],
    saves: [{ constitution: 11 }, { wisdom: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., tremorsense 60 ft., passive Perception 9",
    languages: "",
    cr: "15",
    traits: [
      {
        name: "Tunneler",
        desc: "The worm can burrow through solid rock at half its burrow speed and leaves a 10-foot-diameter tunnel in its wake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The worm makes two attacks: one with its bite and one with its stinger.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d8 + 9) piercing damage. If the target is a Large or smaller creature, it must succeed on a DC 19 Dexterity saving throw or be swallowed by the worm. A swallowed creature is blinded and restrained, it has total cover against attacks and other effects outside the worm, and it takes 21 (6d6) acid damage at the start of each of the worm's turns.\\nIf the worm takes 30 damage or more on a single turn from a creature inside it, the worm must succeed on a DC 21 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the worm. If the worm dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 20 feet of movement, exiting prone.",
        attack_bonus: 9,
        damage_dice: "3d8",
        damage_bonus: 9
      },
      {
        name: "Tail Stinger",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 19 (3d6 + 9) piercing damage, and the target must make a DC 19 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 9,
        damage_dice: "3d6",
        damage_bonus: 9
      }
    ]
  },
  {
    name: "Quasit",
    size: "Tiny",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 13,
    hp: 7,
    hit_dice: "3d4 + -1",
    speed: "40 ft.",
    stats: [5, 17, 10, 7, 10, 10],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; fire; lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Abyssal, Common",
    cr: "1",
    traits: [
      {
        name: "Shapechanger",
        desc: "The quasit can use its action to polymorph into a beast form that resembles a bat (speed 10 ft. fly 40 ft.), a centipede (40 ft., climb 40 ft.), or a toad (40 ft., swim 40 ft.), or back into its true form . Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed . It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The quasit has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The quasit can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the quasit is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the quasit can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw (Bite in Beast Form)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must succeed on a DC 10 Constitution saving throw or take 5 (2d4) poison damage and become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Scare (1/day)",
        desc: "One creature of the quasit's choice within 20 ft. of it must succeed on a DC 10 Wisdom saving throw or be frightened for 1 minute. The target can repeat the saving throw at the end of each of its turns, with disadvantage if the quasit is within line of sight, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Invisibility",
        desc: "The quasit magically turns invisible until it attacks or uses Scare, or until its concentration ends (as if concentrating on a spell). Any equipment the quasit wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Quipper",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "swim 40 ft.",
    stats: [2, 16, 9, 1, 7, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The quipper has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The quipper can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Rakshasa",
    size: "Medium",
    type: "fiend",
    subtype: "",
    alignment: "lawful evil",
    ac: 16,
    hp: 110,
    hit_dice: "13d8 + 51",
    speed: "40 ft.",
    stats: [14, 17, 18, 13, 16, 20],
    skillsaves: [{ deception: 10 }, { insight: 8 }],
    damage_vulnerabilities: "piercing from magic weapons wielded by good creatures",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "Common, Infernal",
    cr: "13",
    traits: [
      {
        name: "Limited Magic Immunity",
        desc: "The rakshasa can't be affected or detected by spells of 6th level or lower unless it wishes to be. It has advantage on saving throws against all other spells and magical effects.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The rakshasa's innate spellcasting ability is Charisma (spell save DC 18, +10 to hit with spell attacks). The rakshasa can innately cast the following spells, requiring no material components:\\n\\nAt will: detect thoughts, disguise self, mage hand, minor illusion\\n3/day each: charm person, detect magic, invisibility, major image, suggestion\\n1/day each: dominate person, fly, plane shift, true seeing",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The rakshasa makes two claw attacks",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage, and the target is cursed if it is a creature. The magical curse takes effect whenever the target takes a short or long rest, filling the target's thoughts with horrible images and dreams. The cursed target gains no benefit from finishing a short or long rest. The curse lasts until it is lifted by a remove curse spell or similar magic.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Rat",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "20 ft.",
    stats: [2, 11, 9, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Raven",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "10 ft., fly 50 ft.",
    stats: [2, 14, 8, 2, 12, 6],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Mimicry",
        desc: "The raven can mimic simple sounds it has heard, such as a person whispering, a baby crying, or an animal chittering. A creature that hears the sounds can tell they are imitations with a successful DC 10 Wisdom (Insight) check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Red Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 75,
    hit_dice: "10d8 + 30",
    speed: "30 ft., climb 30 ft., fly 60 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 5 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage plus 3 (1d6) fire damage.",
        attack_bonus: 6,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 4
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d6"
      }
    ]
  },
  {
    name: "Reef Shark",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "swim 40 ft.",
    stats: [14, 13, 13, 1, 10, 4],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 12",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The shark has advantage on an attack roll against a creature if at least one of the shark's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Remorhaz",
    size: "Huge",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 195,
    hit_dice: "17d12 + 84",
    speed: "30 ft., burrow 20 ft.",
    stats: [24, 13, 21, 4, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold, fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
    languages: "",
    cr: "11",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the remorhaz or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 40 (6d10 + 7) piercing damage plus 10 (3d6) fire damage. If the target is a creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the remorhaz can't bite another target.",
        attack_bonus: 11,
        damage_dice: "6d10 + 3d6",
        damage_bonus: 7
      },
      {
        name: "Swallow",
        desc: "The remorhaz makes one bite attack against a Medium or smaller creature it is grappling. If the attack hits, that creature takes the bite's damage and is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the remorhaz, and it takes 21 (6d6) acid damage at the start of each of the remorhaz's turns.\\nIf the remorhaz takes 30 damage or more on a single turn from a creature inside it, the remorhaz must succeed on a DC 15 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet oft he remorhaz. If the remorhaz dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Rhinoceros",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "40 ft.",
    stats: [21, 8, 15, 2, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the rhinoceros moves at least 20 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Riding Horse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d10 + 2",
    speed: "60 ft.",
    stats: [16, 10, 12, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Roc",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 248,
    hit_dice: "16d20 + 80",
    speed: "20 ft., fly 120 ft.",
    stats: [28, 10, 20, 3, 10, 9],
    saves: [
      { dexterity: 4 },
      { constitution: 9 },
      { wisdom: 4 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "11",
    traits: [
      {
        name: "Keen Sight",
        desc: "The roc has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The roc makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 27 (4d8 + 9) piercing damage.",
        attack_bonus: 13,
        damage_dice: "4d8",
        damage_bonus: 9
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 23 (4d6 + 9) slashing damage, and the target is grappled (escape DC 19). Until this grapple ends, the target is restrained, and the roc can't use its talons on another target.",
        attack_bonus: 13,
        damage_dice: "4d6",
        damage_bonus: 9
      }
    ]
  },
  {
    name: "Roper",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 20,
    hp: 93,
    hit_dice: "11d10 + 32",
    speed: "10 ft., climb 10 ft.",
    stats: [18, 8, 17, 7, 16, 6],
    skillsaves: [{ perception: 6 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 16",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "False Appearance",
        desc: "While the roper remains motionless, it is indistinguishable from a normal cave formation, such as a stalagmite.",
        attack_bonus: 0
      },
      {
        name: "Grasping Tendrils",
        desc: "The roper can have up to six tendrils at a time. Each tendril can be attacked (AC 20; 10 hit points; immunity to poison and psychic damage). Destroying a tendril deals no damage to the roper, which can extrude a replacement tendril on its next turn. A tendril can also be broken if a creature takes an action and succeeds on a DC 15 Strength check against it.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The roper can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The roper makes four attacks with its tendrils, uses Reel, and makes one attack with its bite.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 22 (4d8 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "4d8",
        damage_bonus: 4
      },
      {
        name: "Tendril",
        desc: "Melee Weapon Attack: +7 to hit, reach 50 ft., one creature. Hit: The target is grappled (escape DC 15). Until the grapple ends, the target is restrained and has disadvantage on Strength checks and Strength saving throws, and the roper can't use the same tendril on another target.",
        attack_bonus: 7
      },
      {
        name: "Reel",
        desc: "The roper pulls each creature grappled by it up to 25 ft. straight toward it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Rug of Smothering",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 33,
    hit_dice: "6d10",
    speed: "10 ft.",
    stats: [17, 14, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The rug is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the rug must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "Damage Transfer",
        desc: "While it is grappling a creature, the rug takes only half the damage dealt to it, and the creature grappled by the rug takes the other half.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the rug remains motionless, it is indistinguishable from a normal rug.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Smother",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one Medium or smaller creature. Hit: The creature is grappled (escape DC 13). Until this grapple ends, the target is restrained, blinded, and at risk of suffocating, and the rug can't smother another target. In addition, at the start of each of the target's turns, the target takes 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 0,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Rust Monster",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "40 ft.",
    stats: [13, 12, 13, 2, 13, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Iron Scent",
        desc: "The rust monster can pinpoint, by scent, the location of ferrous metal within 30 feet of it.",
        attack_bonus: 0
      },
      {
        name: "Rust Metal",
        desc: "Any nonmagical weapon made of metal that hits the rust monster corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Non magical ammunition made of metal that hits the rust monster is destroyed after dealing damage.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      },
      {
        name: "Antennae",
        desc: "The rust monster corrodes a nonmagical ferrous metal object it can see within 5 feet of it. If the object isn't being worn or carried, the touch destroys a 1-foot cube of it. If the object is being worn or carried by a creature, the creature can make a DC 11 Dexterity saving throw to avoid the rust monster's touch.\\nIf the object touched is either metal armor or a metal shield being worn or carried, its takes a permanent and cumulative -1 penalty to the AC it offers. Armor reduced to an AC of 10 or a shield that drops to a +0 bonus is destroyed. If the object touched is a held metal weapon, it rusts as described in the Rust Metal trait.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Saber-Toothed Tiger",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 52,
    hit_dice: "7d10 + 13",
    speed: "40 ft.",
    stats: [18, 14, 15, 3, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Sahuagin",
    size: "Medium",
    type: "humanoid",
    subtype: "sahuagin",
    alignment: "lawful evil",
    ac: 12,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "30 ft., swim 40 ft.",
    stats: [13, 11, 12, 12, 13, 9],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Sahuagin",
    cr: "1/2",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The sahuagin has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Limited Amphibiousness",
        desc: "The sahuagin can breathe air and water, but it needs to be submerged at least once every 4 hours to avoid suffocating.",
        attack_bonus: 0
      },
      {
        name: "Shark Telepathy",
        desc: "The sahuagin can magically command any shark within 120 feet of it, using a limited telepathy.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sahuagin makes two melee attacks: one with its bite and one with its claws or spear.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Salamander",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 90,
    hit_dice: "12d10 + 24",
    speed: "30 ft.",
    stats: [18, 14, 15, 11, 10, 12],
    damage_vulnerabilities: "cold",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "5",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the salamander or hits it with a melee attack while within 5 ft. of it takes 7 (2d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Heated Weapons",
        desc: "Any metal melee weapon the salamander wields deals an extra 3 (1d6) fire damage on a hit (included in the attack).",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The salamander makes two attacks: one with its spear and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. or range 20 ft./60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage plus 7 (2d6) fire damage, and the target is grappled (escape DC 14). Until this grapple ends, the target is restrained, the salamander can automatically hit the target with its tail, and the salamander can't make tail attacks against other targets.",
        attack_bonus: 7,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Satyr",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 31,
    hit_dice: "7d8 + -1",
    speed: "40 ft.",
    stats: [12, 16, 11, 12, 10, 14],
    skillsaves: [{ perception: 2 }, { performance: 6 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Common, Elvish, Sylvan",
    cr: "1/2",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The satyr has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1 d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +5 to hit, range 80/320 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Variant: Panpipes",
        desc: "Gentle Lullaby. The creature falls asleep and is unconscious for 1 minute. The effect ends if the creature takes damage or if someone takes an action to shake the creature awake.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Scorpion",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "10 ft.",
    stats: [2, 11, 8, 1, 8, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 9",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must make a DC 9 Constitution saving throw, taking 4 (1d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 2,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Scout",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 13,
    hp: 16,
    hit_dice: "3d8 + 2",
    speed: "30 ft.",
    stats: [11, 14, 12, 11, 13, 11],
    skillsaves: [
      { nature: 4 },
      { perception: 5 },
      { stealth: 6 },
      { survival: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "any one language (usually Common)",
    cr: "1/2",
    traits: [
      {
        name: "Keen Hearing and Sight",
        desc: "The scout has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The scout makes two melee attacks or two ranged attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, ranged 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Sea Hag",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 52,
    hit_dice: "7d8 + 20",
    speed: "30 ft., swim 40 ft.",
    stats: [16, 13, 16, 12, 12, 13],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Aquan, Common, Giant",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The hag can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Horrific Appearance",
        desc: "Any humanoid that starts its turn within 30 feet of the hag and can see the hag's true form must make a DC 11 Wisdom saving throw. On a failed save, the creature is frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the hag is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the hag's Horrific Appearance for the next 24 hours.\\nUnless the target is surprised or the revelation of the hag's true form is sudden, the target can avert its eyes and avoid making the initial saving throw. Until the start of its next turn, a creature that averts its eyes has disadvantage on attack rolls against the hag.",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\\n\\n\u2022 1st level (4 slots): identify, ray of sickness\\n\u2022 2nd level (3 slots): hold person, locate object\\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\\n\u2022 4th level (3 slots): phantasmal killer, polymorph\\n\u2022 5th level (2 slots): contact other plane, scrying\\n\u2022 6th level (1 slot): eye bite\\n\\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Death Glare",
        desc: "The hag targets one frightened creature she can see within 30 ft. of her. If the target can see the hag, it must succeed on a DC 11 Wisdom saving throw against this magic or drop to 0 hit points.",
        attack_bonus: 0
      },
      {
        name: "Illusory Appearance",
        desc: "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like an ugly creature of her general size and humanoid shape. The effect ends if the hag takes a bonus action to end it or if she dies.\\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have no claws, but someone touching her hand might feel the claws. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 16 Intelligence (Investigation) check to discern that the hag is disguised.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Sea Horse",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "swim 20 ft.",
    stats: [1, 12, 8, 1, 10, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Water Breathing",
        desc: "The sea horse can breathe only underwater.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shadow",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 16,
    hit_dice: "3d8 + 2",
    speed: "40 ft.",
    stats: [6, 14, 13, 6, 10, 8],
    skillsaves: [{ stealth: 4 }],
    damage_vulnerabilities: "radiant",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Amorphous",
        desc: "The shadow can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Shadow Stealth",
        desc: "While in dim light or darkness, the shadow can take the Hide action as a bonus action. Its stealth bonus is also improved to +6.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Weakness",
        desc: "While in sunlight, the shadow has disadvantage on attack rolls, ability checks, and saving throws.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Strength Drain",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) necrotic damage, and the target's Strength score is reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.\\nIf a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Shambling Mound",
    size: "Large",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 136,
    hit_dice: "16d10 + 48",
    speed: "20 ft., swim 20 ft.",
    stats: [18, 8, 16, 5, 10, 5],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire",
    damage_immunities: "lightning",
    condition_immunities: "blinded, deafened, exhaustion",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Lightning Absorption",
        desc: "Whenever the shambling mound is subjected to lightning damage, it takes no damage and regains a number of hit points equal to the lightning damage dealt.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The shambling mound makes two slam attacks. If both attacks hit a Medium or smaller target, the target is grappled (escape DC 14), and the shambling mound uses its Engulf on it.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Engulf",
        desc: "The shambling mound engulfs a Medium or smaller creature grappled by it. The engulfed target is blinded, restrained, and unable to breathe, and it must succeed on a DC 14 Constitution saving throw at the start of each of the mound's turns or take 13 (2d8 + 4) bludgeoning damage. If the mound moves, the engulfed target moves with it. The mound can have only one creature engulfed at a time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shield Guardian",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 142,
    hit_dice: "15d10 + 59",
    speed: "30 ft.",
    stats: [18, 8, 18, 7, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
    languages: "understands commands given in any language but can't speak",
    cr: "7",
    traits: [
      {
        name: "Bound",
        desc: "The shield guardian is magically bound to an amulet. As long as the guardian and its amulet are on the same plane of existence, the amulet's wearer can telepathically call the guardian to travel to it, and the guardian knows the distance and direction to the amulet. If the guardian is within 60 feet of the amulet's wearer, half of any damage the wearer takes (rounded up) is transferred to the guardian.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The shield guardian regains 10 hit points at the start of its turn if it has at least 1 hit. point.",
        attack_bonus: 0
      },
      {
        name: "Spell Storing",
        desc: "A spellcaster who wears the shield guardian's amulet can cause the guardian to store one spell of 4th level or lower. To do so, the wearer must cast the spell on the guardian. The spell has no effect but is stored within the guardian. When commanded to do so by the wearer or when a situation arises that was predefined by the spellcaster, the guardian casts the stored spell with any parameters set by the original caster, requiring no components. When the spell is cast or a new spell is stored, any previously stored spell is lost.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The guardian makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ],
    reactions: [
      {
        name: "Shield",
        desc: "When a creature makes an attack against the wearer of the guardian's amulet, the guardian grants a +2 bonus to the wearer's AC if the guardian is within 5 feet of the wearer.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shrieker",
    size: "Medium",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 5,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "0 ft.",
    stats: [1, 1, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, deafened, frightened",
    senses: "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "False Appearance",
        desc: "While the shrieker remains motionless, it is indistinguishable from an ordinary fungus.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shriek",
        desc: "When bright light or a creature is within 30 feet of the shrieker, it emits a shriek audible within 300 feet of it. The shrieker continues to shriek until the disturbance moves out of range and for 1d4 of the shrieker's turns afterward",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Silver Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 45,
    hit_dice: "6d8 + 18",
    speed: "30 ft., fly 60 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 5 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 15-foot cone. Each creature in that area must make a DC 13 Constitution saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Skeleton",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 13,
    hp: 13,
    hit_dice: "2d8 + 4",
    speed: "30 ft.",
    stats: [10, 14, 15, 6, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands all languages it spoke in life but can't speak",
    cr: "1/4",
    actions: [
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Solar",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 21,
    hp: 243,
    hit_dice: "18d10 + 144",
    speed: "50 ft., fly 150 ft.",
    stats: [26, 22, 26, 25, 25, 30],
    saves: [{ intelligence: 14 }, { wisdom: 14 }, { charisma: 17 }],
    skillsaves: [{ perception: 14 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, frightened, poisoned",
    senses: "truesight 120 ft., passive Perception 24",
    languages: "all, telepathy 120 ft.",
    cr: "21",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The solar's weapon attacks are magical. When the solar hits with any weapon, the weapon deals an extra 6d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Divine Awareness",
        desc: "The solar knows if it hears a lie.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The solar's spell casting ability is Charisma (spell save DC 25). It can innately cast the following spells, requiring no material components:\\nAt will: detect evil and good, invisibility (self only)\\n3/day each: blade barrier, dispel evil and good, resurrection\\n1/day each: commune, control weather",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The solar has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The solar makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +15 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) slashing damage plus 27 (6d8) radiant damage.",
        attack_bonus: 15,
        damage_dice: "4d6 + 6d8",
        damage_bonus: 8
      },
      {
        name: "Slaying Longbow",
        desc: "Ranged Weapon Attack: +13 to hit, range 150/600 ft., one target. Hit: 15 (2d8 + 6) piercing damage plus 27 (6d8) radiant damage. If the target is a creature that has 190 hit points or fewer, it must succeed on a DC 15 Constitution saving throw or die.",
        attack_bonus: 13,
        damage_dice: "2d8 + 6d8",
        damage_bonus: 6
      },
      {
        name: "Flying Sword",
        desc: "The solar releases its greatsword to hover magically in an unoccupied space within 5 ft. of it. If the solar can see the sword, the solar can mentally command it as a bonus action to fly up to 50 ft. and either make one attack against a target or return to the solar's hands. If the hovering sword is targeted by any effect, the solar is considered to be holding it. The hovering sword falls if the solar dies.",
        attack_bonus: 0
      },
      {
        name: "Healing Touch (4/Day)",
        desc: "The solar touches another creature. The target magically regains 40 (8d8 + 4) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Teleport",
        desc: "The solar magically teleports, along with any equipment it is wearing or carrying, up to 120 ft. to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Searing Burst (Costs 2 Actions)",
        desc: "The solar emits magical, divine energy. Each creature of its choice in a 10 -foot radius must make a DC 23 Dexterity saving throw, taking 14 (4d6) fire damage plus 14 (4d6) radiant damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Blinding Gaze (Costs 3 Actions)",
        desc: "The solar targets one creature it can see within 30 ft. of it. If the target can see it, the target must succeed on a DC 15 Constitution saving throw or be blinded until magic such as the lesser restoration spell removes the blindness.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Specter",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "0 ft., fly 50 ft. (hover)",
    stats: [1, 14, 11, 10, 10, 11],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands all languages it knew in life but can't speak",
    cr: "1",
    traits: [
      {
        name: "Incorporeal Movement",
        desc: "The specter can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the specter has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Life Drain",
        desc: "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) necrotic damage. The target must succeed on a DC 10 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the creature finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 4,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Spider",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "20 ft., climb 20 ft.",
    stats: [2, 14, 8, 1, 10, 2],
    skillsaves: [{ stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 9 Constitution saving throw or take 2 (1d4) poison damage.",
        attack_bonus: 4,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Spirit Naga",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 75,
    hit_dice: "10d10 + 20",
    speed: "40 ft.",
    stats: [18, 17, 14, 16, 15, 16],
    saves: [
      { dexterity: 6 },
      { constitution: 5 },
      { wisdom: 5 },
      { charisma: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Abyssal, Common",
    cr: "8",
    traits: [
      {
        name: "Rejuvenation",
        desc: "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 7 (1d6 + 4) piercing damage, and the target must make a DC 13 Constitution saving throw, taking 31 (7d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 7,
        damage_dice: "1d6",
        damage_bonus: 4
      }
    ],
    spells: [
      "The naga is a 10th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following wizard spells prepared:",
      { "Cantrips (at will)": "mage hand, minor illusion, ray of frost" },
      { "1st level (4 slots)": "charm person, detect magic, sleep" },
      { "2nd level (3 slots)": "detect thoughts, hold person" },
      { "3rd level (3 slots)": "lightning bolt, water breathing" },
      { "4th level (3 slots)": "blight, dimension door" },
      { "5th level (2 slots)": "dominate person" }
    ]
  },
  {
    name: "Sprite",
    size: "Tiny",
    type: "fey",
    subtype: "",
    alignment: "neutral good",
    ac: 15,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "10 ft., fly 40 ft.",
    stats: [3, 18, 10, 14, 13, 11],
    skillsaves: [{ perception: 3 }, { stealth: 8 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Common, Elvish, Sylvan",
    cr: "1/4",
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 2,
        damage_bonus: 1
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 40/160 ft., one target. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or become poisoned for 1 minute. If its saving throw result is 5 or lower, the poisoned target falls unconscious for the same duration, or until it takes damage or another creature takes an action to shake it awake.",
        attack_bonus: 6,
        damage_bonus: 1
      },
      {
        name: "Heart Sight",
        desc: "The sprite touches a creature and magically knows the creature's current emotional state. If the target fails a DC 10 Charisma saving throw, the sprite also knows the creature's alignment. Celestials, fiends, and undead automatically fail the saving throw.",
        attack_bonus: 0
      },
      {
        name: "Invisibility",
        desc: "The sprite magically turns invisible until it attacks or casts a spell, or until its concentration ends (as if concentrating on a spell). Any equipment the sprite wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Spy",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 27,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [10, 15, 10, 12, 14, 16],
    skillsaves: [
      { deception: 5 },
      { insight: 4 },
      { investigation: 5 },
      { perception: 6 },
      { persuasion: 5 },
      { stealth: 4 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "any two languages",
    cr: "1",
    traits: [
      {
        name: "Cunning Action",
        desc: "On each of its turns, the spy can use a bonus action to take the Dash, Disengage, or Hide action.",
        attack_bonus: 0
      },
      {
        name: "Sneak Attack (1/Turn)",
        desc: "The spy deals an extra 7 (2d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the spy that isn't incapacitated and the spy doesn't have disadvantage on the attack roll.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The spy makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Steam Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 10,
    hp: 21,
    hit_dice: "6d6",
    speed: "30 ft., fly 30 ft.",
    stats: [5, 11, 10, 11, 10, 12],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Aquan, Ignan",
    cr: "1/4",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a cloud of steam. Each creature within 5 ft. of the mephit must succeed on a DC 10 Dexterity saving throw or take 4 (1d8) fire damage.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast blur, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 2 (1d4) slashing damage plus 2 (1d4) fire damage.",
        attack_bonus: 2,
        damage_dice: "2d4"
      },
      {
        name: "Steam Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of scalding steam. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 4 (1d8) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Stirge",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "10 ft., fly 40 ft.",
    stats: [4, 16, 11, 2, 8, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Blood Drain",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 5 (1d4 + 3) piercing damage, and the stirge attaches to the target. While attached, the stirge doesn't attack. Instead, at the start of each of the stirge's turns, the target loses 5 (1d4 + 3) hit points due to blood loss.\\nThe stirge can detach itself by spending 5 feet of its movement. It does so after it drains 10 hit points of blood from the target or the target dies. A creature, including the target, can use its action to detach the stirge.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Stone Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "neutral",
    ac: 17,
    hp: 126,
    hit_dice: "11d12 + 54",
    speed: "40 ft.",
    stats: [23, 15, 20, 10, 12, 9],
    saves: [{ dexterity: 5 }, { constitution: 8 }, { wisdom: 4 }],
    skillsaves: [{ athletics: 12 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Giant",
    cr: "7",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The giant has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatclub attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +9 to hit, reach 15 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage. If the target is a creature, it must succeed on a DC 17 Strength saving throw or be knocked prone.",
        attack_bonus: 9,
        damage_dice: "4d10",
        damage_bonus: 6
      }
    ],
    reactions: [
      {
        name: "Rock Catching",
        desc: "If a rock or similar object is hurled at the giant, the giant can, with a successful DC 10 Dexterity saving throw, catch the missile and take no bludgeoning damage from it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Stone Golem",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 178,
    hit_dice: "17d10 + 84",
    speed: "30 ft.",
    stats: [22, 9, 20, 3, 11, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "10",
    traits: [
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Slow (Recharge 5-6)",
        desc: "The golem targets one or more creatures it can see within 10 ft. of it. Each target must make a DC 17 Wisdom saving throw against this magic. On a failed save, a target can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the target can take either an action or a bonus action on its turn, not both. These effects last for 1 minute. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Storm Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 230,
    hit_dice: "20d12 + 100",
    speed: "50 ft., swim 50 ft.",
    stats: [29, 14, 20, 16, 18, 18],
    saves: [
      { strength: 14 },
      { constitution: 10 },
      { wisdom: 9 },
      { charisma: 9 }
    ],
    skillsaves: [
      { arcana: 8 },
      { athletics: 14 },
      { history: 8 },
      { perception: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold",
    damage_immunities: "lightning, thunder",
    condition_immunities: "",
    senses: "passive Perception 19",
    languages: "Common, Giant",
    cr: "13",
    traits: [
      {
        name: "Amphibious",
        desc: "The giant can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The giant's innate spellcasting ability is Charisma (spell save DC 17). It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic, feather fall, levitate, light\\n3/day each: control weather, water breathing",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 30 (6d6 + 9) slashing damage.",
        attack_bonus: 14,
        damage_dice: "6d6",
        damage_bonus: 9
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +14 to hit, range 60/240 ft., one target. Hit: 35 (4d12 + 9) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "4d12",
        damage_bonus: 9
      },
      {
        name: "Lightning Strike (Recharge 5-6)",
        desc: "The giant hurls a magical lightning bolt at a point it can see within 500 feet of it. Each creature within 10 feet of that point must make a DC 17 Dexterity saving throw, taking 54 (12d8) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ]
  },
  {
    name: "Succubus/Incubus",
    size: "Medium",
    type: "fiend",
    subtype: "shapechanger",
    alignment: "neutral evil",
    ac: 15,
    hp: 66,
    hit_dice: "12d8 + 12",
    speed: "30 ft., fly 60 ft.",
    stats: [8, 17, 13, 15, 12, 20],
    skillsaves: [
      { deception: 9 },
      { insight: 5 },
      { perception: 5 },
      { persuasion: 9 },
      { stealth: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "Abyssal, Common, Infernal, telepathy 60 ft.",
    cr: "4",
    traits: [
      {
        name: "Telepathic Bond",
        desc: "The fiend ignores the range restriction on its telepathy when communicating with a creature it has charmed. The two don't even need to be on the same plane of existence.",
        attack_bonus: 0
      },
      {
        name: "Shapechanger",
        desc: "The fiend can use its action to polymorph into a Small or Medium humanoid, or back into its true form. Without wings, the fiend loses its flying speed. Other than its size and speed, its statistics are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw (Fiend Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Charm",
        desc: "One humanoid the fiend can see within 30 feet of it must succeed on a DC 15 Wisdom saving throw or be magically charmed for 1 day. The charmed target obeys the fiend's verbal or telepathic commands. If the target suffers any harm or receives a suicidal command, it can repeat the saving throw, ending the effect on a success. If the target successfully saves against the effect, or if the effect on it ends, the target is immune to this fiend's Charm for the next 24 hours.\\nThe fiend can have only one target charmed at a time. If it charms another, the effect on the previous target ends.",
        attack_bonus: 0
      },
      {
        name: "Draining Kiss",
        desc: "The fiend kisses a creature charmed by it or a willing creature. The target must make a DC 15 Constitution saving throw against this magic, taking 32 (5d10 + 5) psychic damage on a failed save, or half as much damage on a successful one. The target's hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 0,
        damage_dice: "5d10",
        damage_bonus: 5
      },
      {
        name: "Etherealness",
        desc: "The fiend magically enters the Ethereal Plane from the Material Plane, or vice versa.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Swarm of Bats",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "0 ft., fly 30 ft.",
    stats: [5, 15, 10, 2, 12, 4],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Echolocation",
        desc: "The swarm can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The swarm has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny bat. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +4 to hit, reach 0 ft., one creature in the swarm's space. Hit: 5 (2d4) piercing damage, or 2 (1d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 4,
        damage_dice: "2d4"
      }
    ]
  },
  {
    name: "Swarm of Beetles",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., burrow 5 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Centipedes",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.\\nA creature reduced to 0 hit points by a swarm of centipedes is stable but poisoned for 1 hour, even after regaining hit points, and paralyzed while poisoned in this way.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Insects",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Poisonous Snakes",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 36,
    hit_dice: "8d8",
    speed: "30 ft., swim 30 ft.",
    stats: [8, 18, 11, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny snake. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +6 to hit, reach 0 ft., one creature in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer. The target must make a DC 10 Constitution saving throw, taking 14 (4d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Quippers",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 28,
    hit_dice: "8d8 + -8",
    speed: "0 ft., swim 40 ft.",
    stats: [13, 16, 9, 1, 7, 2],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The swarm has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny quipper. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The swarm can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +5 to hit, reach 0 ft., one creature in the swarm's space. Hit: 14 (4d6) piercing damage, or 7 (2d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 5,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Swarm of Rats",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 24,
    hit_dice: "7d8 + -8",
    speed: "30 ft.",
    stats: [9, 11, 9, 2, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The swarm has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny rat. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +2 to hit, reach 0 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 2,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Ravens",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 24,
    hit_dice: "7d8 + -8",
    speed: "10 ft., fly 50 ft.",
    stats: [6, 14, 8, 3, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "passive Perception 15",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny raven. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beaks",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 4,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Spiders",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The swarm can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the swarm knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The swarm ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Wasps",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "5 ft., fly 30 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Tarrasque",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "titan",
    alignment: "unaligned",
    ac: 25,
    hp: 676,
    hit_dice: "33d20 + 329",
    speed: "40 ft.",
    stats: [30, 11, 30, 3, 11, 11],
    saves: [{ intelligence: 5 }, { wisdom: 9 }, { charisma: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, frightened, paralyzed, poisoned",
    senses: "blindsight 120 ft., passive Perception 10",
    languages: "",
    cr: "30",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the tarrasque fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The tarrasque has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Reflective Carapace",
        desc: "Any time the tarrasque is targeted by a magic missile spell, a line spell, or a spell that requires a ranged attack roll, roll a d6. On a 1 to 5, the tarrasque is unaffected. On a 6, the tarrasque is unaffected, and the effect is reflected back at the caster as though it originated from the tarrasque, turning the caster into the target.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The tarrasque deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The tarrasque can use its Frightful Presence. It then makes five attacks: one with its bite, two with its claws, one with its horns, and one with its tai l. It can use its Swallow instead of its bite.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 36 (4d12 + 10) piercing damage. If the target is a creature, it is grappled (escape DC 20). Until this grapple ends, the target is restrained, and the tarrasque can't bite another target.",
        attack_bonus: 19,
        damage_dice: "4d12",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +19 to hit, reach 15 ft., one target. Hit: 28 (4d8 + 10) slashing damage.",
        attack_bonus: 19,
        damage_dice: "4d8",
        damage_bonus: 10
      },
      {
        name: "Horns",
        desc: "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 32 (4d10 + 10) piercing damage.",
        attack_bonus: 19,
        damage_dice: "4d10",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +19 to hit, reach 20 ft., one target. Hit: 24 (4d6 + 10) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be knocked prone.",
        attack_bonus: 19,
        damage_dice: "4d6",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the tarrasque's choice within 120 feet of it and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the tarrasque is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the tarrasque's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Swallow",
        desc: "The tarrasque makes one bite attack against a Large or smaller creature it is grappling. If the attack hits, the target takes the bite's damage, the target is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the tarrasque, and it takes 56 (16d6) acid damage at the start of each of the tarrasque's turns.\\nIf the tarrasque takes 60 damage or more on a single turn from a creature inside it, the tarrasque must succeed on a DC 20 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the tarrasque. If the tarrasque dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 30 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Attack",
        desc: "The tarrasque makes one claw attack or tail attack.",
        attack_bonus: 0
      },
      {
        name: "Move",
        desc: "The tarrasque moves up to half its speed.",
        attack_bonus: 0
      },
      {
        name: "Chomp (Costs 2 Actions)",
        desc: "The tarrasque makes one bite attack or uses its Swallow.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Thug",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 11,
    hp: 32,
    hit_dice: "5d8 + 9",
    speed: "30 ft.",
    stats: [15, 11, 14, 10, 10, 11],
    skillsaves: [{ intimidation: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/2",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The thug has advantage on an attack roll against a creature if at least one of the thug's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The thug makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d10"
      }
    ]
  },
  {
    name: "Tiger",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 37,
    hit_dice: "5d10 + 9",
    speed: "40 ft.",
    stats: [17, 15, 14, 3, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Treant",
    size: "Huge",
    type: "plant",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 138,
    hit_dice: "12d12 + 60",
    speed: "30 ft.",
    stats: [23, 8, 21, 12, 16, 12],
    damage_vulnerabilities: "fire",
    damage_resistances: "bludgeoning, piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Common, Druidic, Elvish, Sylvan",
    cr: "9",
    traits: [
      {
        name: "False Appearance",
        desc: "While the treant remains motionless, it is indistinguishable from a normal tree.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The treant deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The treant makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 16 (3d6 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d6",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +10 to hit, range 60/180 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "4d10",
        damage_bonus: 6
      },
      {
        name: "Animate Trees (1/Day)",
        desc: "The treant magically animates one or two trees it can see within 60 feet of it. These trees have the same statistics as a treant, except they have Intelligence and Charisma scores of 1, they can't speak, and they have only the Slam action option. An animated tree acts as an ally of the treant. The tree remains animate for 1 day or until it dies; until the treant dies or is more than 120 feet from the tree; or until the treant takes a bonus action to turn it back into an inanimate tree. The tree then takes root if possible.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Tribal Warrior",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [13, 11, 12, 8, 11, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language",
    cr: "1/8",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The warrior has advantage on an attack roll against a creature if at least one of the warrior's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Triceratops",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 95,
    hit_dice: "10d12 + 30",
    speed: "50 ft.",
    stats: [22, 9, 17, 2, 11, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the triceratops moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the triceratops can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 24 (4d8 + 6) piercing damage.",
        attack_bonus: 9,
        damage_dice: "4d8",
        damage_bonus: 6
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Troll",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 84,
    hit_dice: "8d10 + 40",
    speed: "30 ft.",
    stats: [18, 13, 20, 7, 9, 7],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Giant",
    cr: "5",
    traits: [
      {
        name: "Keen Smell",
        desc: "The troll has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The troll regains 10 hit points at the start of its turn. If the troll takes acid or fire damage, this trait doesn't function at the start of the troll's next turn. The troll dies only if it starts its turn with 0 hit points and doesn't regenerate.",
        attack_bonus: 0
      },
      {
        name: "Variant: Loathsome Limbs",
        desc: "Whenever the troll takes at least 15 slashing damage at one time, roll a d20 to determine what else happens to it:\\n1-10: Nothing else happens.\\n11-14: One leg is severed from the troll if it has any legs left.\\n15- 18: One arm is severed from the troll if it has any arms left.\\n19-20: The troll is decapitated, but the troll dies only if it can't regenerate. If it dies, so does the severed head.\\nIf the troll finishes a short or long rest without reattaching a severed limb or head, the part regrows. At that point, the severed part dies. Until then, a severed part acts on the troll's initiative and has its own action and movement. A severed part has AC 13, 10 hit points, and the troll's Regeneration trait.\\nA severed leg is unable to attack and has a speed of 5 feet.\\nA severed arm has a speed of 5 feet and can make one claw attack on its turn, with disadvantage on the attack roll unless the troll can see the arm and its target. Each time the troll loses an arm, it loses a claw attack.\\nIf its head is severed, the troll loses its bite attack and its body is blinded unless the head can see it. The severed head has a speed of 0 feet and the troll's Keen Smell trait. It can make a bite attack but only against a target in its space.\\nThe troll's speed is halved if it's missing a leg. If it loses both legs, it falls prone. If it has both arms, it can crawl. With only one arm, it can still crawl, but its speed is halved. With no arms or legs, its speed is 0, and it can't benefit from bonuses to speed.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The troll makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d6",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Tyrannosaurus Rex",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 136,
    hit_dice: "13d12 + 51",
    speed: "50 ft.",
    stats: [25, 10, 19, 2, 12, 9],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "8",
    actions: [
      {
        name: "Multiattack",
        desc: "The tyrannosaurus makes two attacks: one with its bite and one with its tail. It can't make both attacks against the same target.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 33 (4d12 + 7) piercing damage. If the target is a Medium or smaller creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the tyrannosaurus can't bite another target.",
        attack_bonus: 10,
        damage_dice: "4d12",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d8",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Unicorn",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 12,
    hp: 67,
    hit_dice: "9d10 + 17",
    speed: "50 ft.",
    stats: [18, 14, 15, 11, 17, 16],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, paralyzed, poisoned",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "Celestial, Elvish, Sylvan, telepathy 60 ft.",
    cr: "5",
    traits: [
      {
        name: "Charge",
        desc: "If the unicorn moves at least 20 ft. straight toward a target and then hits it with a horn attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      },
      {
        name: "Innate Spellcasting",
        desc: "The unicorn's innate spellcasting ability is Charisma (spell save DC 14). The unicorn can innately cast the following spells, requiring no components:\\n\\nAt will: detect evil and good, druidcraft, pass without trace\\n1/day each: calm emotions, dispel evil and good, entangle",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The unicorn has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The unicorn's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The unicorn makes two attacks: one with its hooves and one with its horn.",
        attack_bonus: 0
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Horn",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Healing Touch (3/Day)",
        desc: "The unicorn touches another creature with its horn. The target magically regains 11 (2d8 + 2) hit points. In addition, the touch removes all diseases and neutralizes all poisons afflicting the target.",
        attack_bonus: 0
      },
      {
        name: "Teleport (1/Day)",
        desc: "The unicorn magically teleports itself and up to three willing creatures it can see within 5 ft. of it, along with any equipment they are wearing or carrying, to a location the unicorn is familiar with, up to 1 mile away.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Hooves",
        desc: "The unicorn makes one attack with its hooves.",
        attack_bonus: 0
      },
      {
        name: "Shimmering Shield (Costs 2 Actions)",
        desc: "The unicorn creates a shimmering, magical field around itself or another creature it can see within 60 ft. of it. The target gains a +2 bonus to AC until the end of the unicorn's next turn.",
        attack_bonus: 0
      },
      {
        name: "Heal Self (Costs 3 Actions)",
        desc: "The unicorn magically regains 11 (2d8 + 2) hit points.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vampire",
    size: "Medium",
    type: "undead",
    subtype: "shapechanger",
    alignment: "lawful evil",
    ac: 16,
    hp: 144,
    hit_dice: "17d8 + 67",
    speed: "30 ft.",
    stats: [18, 18, 18, 17, 15, 18],
    saves: [{ dexterity: 9 }, { wisdom: 7 }, { charisma: 9 }],
    skillsaves: [{ perception: 7 }, { stealth: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 17",
    languages: "the languages it knew in life",
    cr: "13",
    traits: [
      {
        name: "Shapechanger",
        desc: "If the vampire isn't in sun light or running water, it can use its action to polymorph into a Tiny bat or a Medium cloud of mist, or back into its true form.\\nWhile in bat form, the vampire can't speak, its walking speed is 5 feet, and it has a flying speed of 30 feet. Its statistics, other than its size and speed, are unchanged. Anything it is wearing transforms with it, but nothing it is carrying does. It reverts to its true form if it dies.\\nWhile in mist form, the vampire can't take any actions, speak, or manipulate objects. It is weightless, has a flying speed of 20 feet, can hover, and can enter a hostile creature's space and stop there. In addition, if air can pass through a space, the mist can do so without squeezing, and it can't pass through water. It has advantage on Strength, Dexterity, and Constitution saving throws, and it is immune to all nonmagical damage, except the damage it takes from sunlight.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the vampire fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Misty Escape",
        desc: "When it drops to 0 hit points outside its resting place, the vampire transforms into a cloud of mist (as in the Shapechanger trait) instead of falling unconscious, provided that it isn't in sunlight or running water. If it can't transform, it is destroyed.\\nWhile it has 0 hit points in mist form, it can't revert to its vampire form, and it must reach its resting place within 2 hours or be destroyed. Once in its resting place, it reverts to its vampire form. It is then paralyzed until it regains at least 1 hit point. After spending 1 hour in its resting place with 0 hit points, it regains 1 hit point.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The vampire regains 20 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Vampire Weaknesses",
        desc: "The vampire has the following flaws:\\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\\nHarmed by Running Water. The vampire takes 20 acid damage if it ends its turn in running water.\\nStake to the Heart. If a piercing weapon made of wood is driven into the vampire's heart while the vampire is incapacitated in its resting place, the vampire is paralyzed until the stake is removed.\\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Vampire Form Only)",
        desc: "The vampire makes two attacks, only one of which can be a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Unarmed Strike (Vampire Form Only)",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one creature. Hit: 8 (1d8 + 4) bludgeoning damage. Instead of dealing damage, the vampire can grapple the target (escape DC 18).",
        attack_bonus: 9,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Bite (Bat or Vampire Form Only)",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 7 (1d6 + 4) piercing damage plus 10 (3d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0. A humanoid slain in this way and then buried in the ground rises the following night as a vampire spawn under the vampire's control.",
        attack_bonus: 9,
        damage_dice: "1d6 + 3d6",
        damage_bonus: 4
      },
      {
        name: "Charm",
        desc: "The vampire targets one humanoid it can see within 30 ft. of it. If the target can see the vampire, the target must succeed on a DC 17 Wisdom saving throw against this magic or be charmed by the vampire. The charmed target regards the vampire as a trusted friend to be heeded and protected. Although the target isn't under the vampire's control, it takes the vampire's requests or actions in the most favorable way it can, and it is a willing target for the vampire's bit attack.\\nEach time the vampire or the vampire's companions do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the vampire is destroyed, is on a different plane of existence than the target, or takes a bonus action to end the effect.",
        attack_bonus: 0
      },
      {
        name: "Children of the Night (1/Day)",
        desc: "The vampire magically calls 2d4 swarms of bats or rats, provided that the sun isn't up. While outdoors, the vampire can call 3d6 wolves instead. The called creatures arrive in 1d4 rounds, acting as allies of the vampire and obeying its spoken commands. The beasts remain for 1 hour, until the vampire dies, or until the vampire dismisses them as a bonus action.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Move",
        desc: "The vampire moves up to its speed without provoking opportunity attacks.",
        attack_bonus: 0
      },
      {
        name: "Unarmed Strike",
        desc: "The vampire makes one unarmed strike.",
        attack_bonus: 0
      },
      {
        name: "Bite (Costs 2 Actions)",
        desc: "The vampire makes one bite attack.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vampire Spawn",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 82,
    hit_dice: "11d8 + 32",
    speed: "30 ft.",
    stats: [16, 16, 16, 11, 10, 12],
    saves: [{ dexterity: 6 }, { wisdom: 3 }],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "the languages it knew in life",
    cr: "5",
    traits: [
      {
        name: "Regeneration",
        desc: "The vampire regains 10 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Vampire Weaknesses",
        desc: "The vampire has the following flaws:\\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\\nHarmed by Running Water. The vampire takes 20 acid damage when it ends its turn in running water.\\nStake to the Heart. The vampire is destroyed if a piercing weapon made of wood is driven into its heart while it is incapacitated in its resting place.\\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vampire makes two attacks, only one of which can be a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 6 (1d6 + 3) piercing damage plus 7 (2d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 61
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 8 (2d4 + 3) slashing damage. Instead of dealing damage, the vampire can grapple the target (escape DC 13).",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Veteran",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 17,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "30 ft.",
    stats: [16, 13, 14, 10, 11, 10],
    skillsaves: [{ athletics: 5 }, { perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "3",
    actions: [
      {
        name: "Multiattack",
        desc: "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d10",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Violet Fungus",
    size: "Medium",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 5,
    hp: 18,
    hit_dice: "4d8",
    speed: "5 ft.",
    stats: [3, 1, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, deafened, frightened",
    senses: "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "False Appearance",
        desc: "While the violet fungus remains motionless, it is indistinguishable from an ordinary fungus.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The fungus makes 1d4 Rotting Touch attacks.",
        attack_bonus: 0
      },
      {
        name: "Rotting Touch",
        desc: "Melee Weapon Attack: +2 to hit, reach 10 ft., one creature. Hit: 4 (1d8) necrotic damage.",
        attack_bonus: 2,
        damage_dice: "1d8"
      }
    ]
  },
  {
    name: "Vrock",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 15,
    hp: 104,
    hit_dice: "11d10 + 43",
    speed: "40 ft., fly 60 ft.",
    stats: [17, 15, 18, 8, 13, 8],
    saves: [{ dexterity: 5 }, { wisdom: 4 }, { charisma: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "6",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The vrock has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vrock makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d10",
        damage_bonus: 3
      },
      {
        name: "Spores (Recharge 6)",
        desc: "A 15-foot-radius cloud of toxic spores extends out from the vrock. The spores spread around corners. Each creature in that area must succeed on a DC 14 Constitution saving throw or become poisoned. While poisoned in this way, a target takes 5 (1d10) poison damage at the start of each of its turns. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. Emptying a vial of holy water on the target also ends the effect on it.",
        attack_bonus: 0
      },
      {
        name: "Stunning Screech (1/Day)",
        desc: "The vrock emits a horrific screech. Each creature within 20 feet of it that can hear it and that isn't a demon must succeed on a DC 14 Constitution saving throw or be stunned until the end of the vrock's next turn .",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA vrock has a 30 percent chance of summoning 2d4 dretches or one vrock.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vulture",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 5,
    hit_dice: "1d8",
    speed: "10 ft., fly 50 ft.",
    stats: [7, 10, 13, 2, 12, 4],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Warhorse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "60 ft.",
    stats: [18, 12, 13, 2, 12, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the horse moves at least 20 ft. straight toward a creature and then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the horse can make another attack with its hooves against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Warhorse Skeleton",
    size: "Large",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 13,
    hp: 22,
    hit_dice: "3d10 + 5",
    speed: "60 ft.",
    stats: [18, 12, 15, 2, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Water Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "30 ft., swim 90 ft.",
    stats: [18, 14, 18, 5, 10, 8],
    damage_vulnerabilities: "",
    damage_resistances: "acid; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Aquan",
    cr: "5",
    traits: [
      {
        name: "Water Form",
        desc: "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Freeze",
        desc: "If the elemental takes cold damage, it partially freezes; its speed is reduced by 20 ft. until the end of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Whelm (Recharge 4-6)",
        desc: "Each creature in the elemental's space must make a DC 15 Strength saving throw. On a failure, a target takes 13 (2d8 + 4) bludgeoning damage. If it is Large or smaller, it is also grappled (escape DC 14). Until this grapple ends, the target is restrained and unable to breathe unless it can breathe water. If the saving throw is successful, the target is pushed out of the elemental's space.\\nThe elemental can grapple one Large creature or up to two Medium or smaller creatures at one time. At the start of each of the elemental's turns, each target grappled by it takes 13 (2d8 + 4) bludgeoning damage. A creature within 5 feet of the elemental can pull a creature or object out of it by taking an action to make a DC 14 Strength and succeeding.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Weasel",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "30 ft.",
    stats: [3, 16, 8, 2, 12, 3],
    skillsaves: [{ perception: 3 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Werebear",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral good",
    ac: 10,
    hp: 135,
    hit_dice: "18d8 + 54",
    speed: "30 ft. (40 ft., climb 30 ft. in bear or hybrid form)",
    stats: [19, 10, 17, 11, 12, 12],
    skillsaves: [{ perception: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 17",
    languages: "Common (can't speak in bear form)",
    cr: "5",
    traits: [
      {
        name: "Shapechanger",
        desc: "The werebear can use its action to polymorph into a Large bear-humanoid hybrid or into a Large bear, or back into its true form, which is humanoid. Its statistics, other than its size and AC, are the same in each form. Any equipment it. is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Smell",
        desc: "The werebear has advantage on WisGlom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "In bear form, the werebear makes two claw attacks. In humanoid form, it makes two greataxe attacks. In hybrid form, it can attack like a bear or a humanoid.",
        attack_bonus: 0
      },
      {
        name: "Bite (Bear or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage. If the target is a humanoid, it must succeed on a DC 14 Constitution saving throw or be cursed with were bear lycanthropy.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw (Bear or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Greataxe (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "1d12",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Wereboar",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral evil",
    ac: 10,
    hp: 78,
    hit_dice: "12d8 + 24",
    speed: "30 ft. (40 ft. in boar form)",
    stats: [17, 10, 15, 10, 11, 8],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Common (can't speak in boar form)",
    cr: "4",
    traits: [
      {
        name: "Shapechanger",
        desc: "The wereboar can use its action to polymorph into a boar-humanoid hybrid or into a boar, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Charge (Boar or Hybrid Form Only)",
        desc: "If the wereboar moves at least 15 feet straight toward a target and then hits it with its tusks on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the wereboar takes 14 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The wereboar makes two attacks, only one of which can be with its tusks.",
        attack_bonus: 0
      },
      {
        name: "Maul (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Tusks (Boar or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with wereboar lycanthropy.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Wererat",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "lawful evil",
    ac: 12,
    hp: 33,
    hit_dice: "6d8 + 6",
    speed: "30 ft.",
    stats: [10, 15, 12, 11, 10, 8],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "darkvision 60 ft. (rat form only), passive Perception 12",
    languages: "Common (can't speak in rat form)",
    cr: "2",
    traits: [
      {
        name: "Shapechanger",
        desc: "The wererat can use its action to polymorph into a rat-humanoid hybrid or into a giant rat, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Smell",
        desc: "The wererat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The wererat makes two attacks, only one of which can be a bite.",
        attack_bonus: 0
      },
      {
        name: "Bite (Rat or Hybrid Form Only).",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 11 Constitution saving throw or be cursed with wererat lycanthropy.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Shortsword (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow (Humanoid or Hybrid Form Only)",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Weretiger",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral",
    ac: 12,
    hp: 120,
    hit_dice: "16d8 + 48",
    speed: "30 ft. (40 ft. in tiger form)",
    stats: [17, 15, 16, 10, 13, 11],
    skillsaves: [{ perception: 5 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "Common (can't speak in tiger form)",
    cr: "4",
    traits: [
      {
        name: "Shapechanger",
        desc: "The weretiger can use its action to polymorph into a tiger-humanoid hybrid or into a tiger, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The weretiger has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce (Tiger or Hybrid Form Only)",
        desc: "If the weretiger moves at least 15 feet straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the weretiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "In humanoid form, the weretiger makes two scimitar attacks or two longbow attacks. In hybrid form, it can attack like a humanoid or make two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite (Tiger or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage. If the target is a humanoid, it must succeed on a DC 13 Constitution saving throw or be cursed with weretiger lycanthropy.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claw (Tiger or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Scimitar (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Longbow (Humanoid or Hybrid Form Only)",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Werewolf",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "chaotic evil",
    ac: 11,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "30 ft. (40 ft. in wolf form)",
    stats: [15, 13, 14, 10, 11, 10],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Common (can't speak in wolf form)",
    cr: "3",
    traits: [
      {
        name: "Shapechanger",
        desc: "The werewolf can use its action to polymorph into a wolf-humanoid hybrid or into a wolf, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The werewolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The werewolf makes two attacks: one with its bite and one with its claws or spear.",
        attack_bonus: 0
      },
      {
        name: "Bite (Wolf or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with werewolf lycanthropy.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Claws (Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Spear (Humanoid Form Only)",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: -2
      }
    ]
  },
  {
    name: "White Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 16,
    hp: 32,
    hit_dice: "5d8 + 9",
    speed: "30 ft., burrow 15 ft., fly 60 ft., swim 30 ft.",
    stats: [14, 10, 14, 5, 10, 11],
    saves: [
      { dexterity: 2 },
      { constitution: 4 },
      { wisdom: 2 },
      { charisma: 2 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) cold damage.",
        attack_bonus: 4,
        damage_dice: "1d10 + 1d4",
        damage_bonus: 2
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast of hail in a 15-foot cone. Each creature in that area must make a DC 12 Constitution saving throw, taking 22 (5d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "5d8"
      }
    ]
  },
  {
    name: "Wight",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 14,
    hp: 45,
    hit_dice: "6d8 + 18",
    speed: "30 ft.",
    stats: [15, 14, 16, 10, 13, 15],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "the languages it knew in life",
    cr: "3",
    traits: [
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the wight has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The wight makes two longsword attacks or two longbow attacks. It can use its Life Drain in place of one longsword attack.",
        attack_bonus: 0
      },
      {
        name: "Life Drain",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) necrotic damage. The target must succeed on a DC 13 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.\\nA humanoid slain by this attack rises 24 hours later as a zombie under the wight's control, unless the humanoid is restored to life or its body is destroyed. The wight can have no more than twelve zombies under its control at one time.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage, or 7 (1d10 + 2) slashing damage if used with two hands.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Will-o'-Wisp",
    size: "Tiny",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 22,
    hit_dice: "9d4 + -1",
    speed: "0 ft., fly 50 ft. (hover)",
    stats: [1, 28, 10, 13, 14, 11],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, necrotic, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "lightning, poison",
    condition_immunities: "exhaustion, grappled, paralyzed, poisoned, prone, restrained, unconscious",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "the languages it knew in life",
    cr: "2",
    traits: [
      {
        name: "Consume Life",
        desc: "As a bonus action, the will-o'-wisp can target one creature it can see within 5 ft. of it that has 0 hit points and is still alive. The target must succeed on a DC 10 Constitution saving throw against this magic or die. If the target dies, the will-o'-wisp regains 10 (3d6) hit points.",
        attack_bonus: 0
      },
      {
        name: "Ephemeral",
        desc: "The will-o'-wisp can't wear or carry anything.",
        attack_bonus: 0
      },
      {
        name: "Incorporeal Movement",
        desc: "The will-o'-wisp can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Variable Illumination",
        desc: "The will-o'-wisp sheds bright light in a 5- to 20-foot radius and dim light for an additional number of ft. equal to the chosen radius. The will-o'-wisp can alter the radius as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shock",
        desc: "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d8) lightning damage.",
        attack_bonus: 4,
        damage_dice: "2d8"
      },
      {
        name: "Invisibility",
        desc: "The will-o'-wisp and its light magically become invisible until it attacks or uses its Consume Life, or until its concentration ends (as if concentrating on a spell).",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Winter Wolf",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 75,
    hit_dice: "10d10 + 20",
    speed: "50 ft.",
    stats: [18, 13, 14, 7, 12, 8],
    skillsaves: [{ perception: 5 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "Common, Giant, Winter Wolf",
    cr: "3",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Snow Camouflage",
        desc: "The wolf has advantage on Dexterity (Stealth) checks made to hide in snowy terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The wolf exhales a blast of freezing wind in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Wolf",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [12, 15, 12, 3, 12, 6],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Worg",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "50 ft.",
    stats: [16, 13, 13, 7, 11, 8],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Goblin, Worg",
    cr: "1/2",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The worg has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Wraith",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 67,
    hit_dice: "9d8 + 26",
    speed: "0 ft., fly 60 ft. (hover)",
    stats: [6, 16, 16, 12, 14, 15],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "the languages it knew in life",
    cr: "5",
    traits: [
      {
        name: "Incorporeal Movement",
        desc: "The wraith can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the wraith has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Life Drain",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 21 (4d8 + 3) necrotic damage. The target must succeed on a DC 14 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 6,
        damage_dice: "4d8",
        damage_bonus: 3
      },
      {
        name: "Create Specter",
        desc: "The wraith targets a humanoid within 10 feet of it that has been dead for no longer than 1 minute and died violently. The target's spirit rises as a specter in the space of its corpse or in the nearest unoccupied space. The specter is under the wraith's control. The wraith can have no more than seven specters under its control at one time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Wyvern",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 110,
    hit_dice: "13d10 + 38",
    speed: "20 ft., fly 80 ft.",
    stats: [19, 10, 16, 5, 12, 6],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The wyvern makes two attacks: one with its bite and one with its stinger. While flying, it can use its claws in place of one other attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Stinger",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage. The target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Xorn",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 19,
    hp: 73,
    hit_dice: "7d8 + 41",
    speed: "20 ft., burrow 20 ft.",
    stats: [17, 10, 22, 11, 10, 11],
    skillsaves: [{ perception: 6 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "piercing and slashing from nonmagical weapons that aren't adamantine",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
    languages: "Terran",
    cr: "5",
    traits: [
      {
        name: "Earth Glide",
        desc: "The xorn can burrow through nonmagical, unworked earth and stone. While doing so, the xorn doesn't disturb the material it moves through.",
        attack_bonus: 0
      },
      {
        name: "Stone Camouflage",
        desc: "The xorn has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      },
      {
        name: "Treasure Sense",
        desc: "The xorn can pinpoint, by scent, the location of precious metals and stones, such as coins and gems, within 60 ft. of it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The xorn makes three claw attacks and one bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (3d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Young Black Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 127,
    hit_dice: "15d10 + 44",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [19, 14, 17, 12, 11, 15],
    saves: [
      { dexterity: 5 },
      { constitution: 6 },
      { wisdom: 3 },
      { charisma: 5 }
    ],
    skillsaves: [{ perception: 6 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "7",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 49 (11d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "11d8"
      }
    ]
  },
  {
    name: "Young Blue Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 152,
    hit_dice: "16d10 + 64",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [21, 10, 19, 14, 13, 17],
    saves: [
      { dexterity: 4 },
      { constitution: 8 },
      { wisdom: 5 },
      { charisma: 7 }
    ],
    skillsaves: [{ perception: 9 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
    languages: "Common, Draconic",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 9,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Brass Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 110,
    hit_dice: "13d10 + 38",
    speed: "40 ft., burrow 20 ft., fly 80 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      { dexterity: 3 },
      { constitution: 6 },
      { wisdom: 3 },
      { charisma: 5 }
    ],
    skillsaves: [{ perception: 6 }, { persuasion: 5 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 42 (12d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw or fall unconscious for 5 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "12d6"
      }
    ]
  },
  {
    name: "Young Bronze Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 142,
    hit_dice: "15d10 + 59",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [21, 10, 19, 14, 13, 17],
    saves: [
      { dexterity: 3 },
      { constitution: 7 },
      { wisdom: 4 },
      { charisma: 6 }
    ],
    skillsaves: [{ insight: 4 }, { perception: 7 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "8",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 8,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 15 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 15 Strength saving throw. On a failed save, the creature is pushed 40 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Copper Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 119,
    hit_dice: "14d10 + 42",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [19, 12, 17, 16, 13, 15],
    saves: [
      { dexterity: 4 },
      { constitution: 6 },
      { wisdom: 4 },
      { charisma: 5 }
    ],
    skillsaves: [{ deception: 5 }, { perception: 7 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "7",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 40 (9d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "9d8"
      }
    ]
  },
  {
    name: "Young Gold Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 178,
    hit_dice: "17d10 + 84",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 14, 21, 16, 13, 20],
    saves: [
      { dexterity: 6 },
      { constitution: 9 },
      { wisdom: 5 },
      { charisma: 9 }
    ],
    skillsaves: [
      { insight: 5 },
      { perception: 9 },
      { persuasion: 9 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
    languages: "Common, Draconic",
    cr: "10",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 55 (10d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Green Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 136,
    hit_dice: "16d10 + 48",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [19, 12, 17, 16, 13, 15],
    saves: [
      { dexterity: 4 },
      { constitution: 6 },
      { wisdom: 4 },
      { charisma: 5 }
    ],
    skillsaves: [{ deception: 5 }, { perception: 7 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "8",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 30-foot cone. Each creature in that area must make a DC 14 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d6"
      }
    ]
  },
  {
    name: "Young Red Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 178,
    hit_dice: "17d10 + 84",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 11, 19],
    saves: [
      { dexterity: 4 },
      { constitution: 9 },
      { wisdom: 4 },
      { charisma: 8 }
    ],
    skillsaves: [{ perception: 8 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
    languages: "Common, Draconic",
    cr: "10",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 3 (1d6) fire damage.",
        attack_bonus: 10,
        damage_dice: "2d10 + 1d6",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d6"
      }
    ]
  },
  {
    name: "Young Silver Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 168,
    hit_dice: "16d10 + 80",
    speed: "40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 11, 19],
    saves: [
      { dexterity: 4 },
      { constitution: 9 },
      { wisdom: 4 },
      { charisma: 8 }
    ],
    skillsaves: [
      { arcana: 6 },
      { history: 6 },
      { perception: 8 },
      { stealth: 4 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
    languages: "Common, Draconic",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 17 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ]
  },
  {
    name: "Young White Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 133,
    hit_dice: "14d10 + 56",
    speed: "40 ft., burrow 20 ft., fly 80 ft., swim 40 ft.",
    stats: [18, 10, 18, 6, 11, 12],
    saves: [
      { dexterity: 3 },
      { constitution: 7 },
      { wisdom: 3 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 6 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "6",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) cold damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 15 Constitution saving throw, taking 45 (10d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d8"
      }
    ]
  },
  {
    name: "Zombie",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 8,
    hp: 22,
    hit_dice: "3d8 + 8",
    speed: "20 ft.",
    stats: [13, 6, 16, 3, 6, 5],
    saves: [{ wisdom: 0 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "understands all languages it spoke in life but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Undead Fortitude",
        desc: "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  }
];
var BESTIARY_BY_NAME = new Map(BESTIARY.map((monster) => {
  return [monster.name, monster];
}));

// src/view/statblock.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/util/util.ts
function toTitleCase(str) {
  return str[0].toUpperCase() + str.slice(1).toLowerCase();
}
function nanoid() {
  return "xyxyxyxyxyxy".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
var stringify = (property, depth = 0) => {
  const ret = [];
  if (depth == 5) {
    return "";
  }
  if (!property || property == null)
    return ``;
  if (typeof property == "string")
    return property;
  if (typeof property == "number")
    return `${property}`;
  if (Array.isArray(property)) {
    ret.push(`(${property.map((p) => stringify(p, depth++)).join(" ")})`);
  } else if (typeof property == "object") {
    for (const value of Object.values(property)) {
      ret.push(stringify(value, depth++));
    }
  }
  return ret.join(" ");
};
var stringifyWithKeys = (property, depth = 0) => {
  const ret = [];
  if (depth == 5) {
    return "";
  }
  if (!property || property == null)
    return ``;
  if (typeof property == "string")
    return property;
  if (typeof property == "number")
    return `${property}`;
  if (Array.isArray(property)) {
    ret.push(`${property.map((p) => stringifyWithKeys(p, depth++)).join(" ")}`);
  } else if (typeof property == "object") {
    for (const [key, value] of Object.entries(property)) {
      ret.push(stringifyWithKeys(key, depth++), stringifyWithKeys(value, depth++));
    }
  }
  return ret.join(" ");
};
function transformTraits(monsterTraits = [], paramsTraits = []) {
  if (!monsterTraits)
    monsterTraits = [];
  if (!paramsTraits)
    paramsTraits = [];
  for (const trait of paramsTraits ?? []) {
    if (!trait)
      continue;
    if (Array.isArray(trait)) {
      monsterTraits = monsterTraits.filter((t) => t.name != trait[0]);
      monsterTraits.push({
        name: trait[0],
        desc: stringifyWithKeys(trait.slice(1))
      });
    } else if (typeof trait == "object" && "name" in trait && "desc" in trait) {
      monsterTraits = monsterTraits.filter((t) => t.name != trait.name);
      monsterTraits.push({
        name: trait.name,
        desc: stringifyWithKeys(trait.desc)
      });
    }
  }
  return monsterTraits;
}

// src/layouts/basic5e.ts
var Statblock5e = [
  {
    type: "inline",
    id: nanoid(),
    properties: [],
    hasRule: true,
    nested: [
      {
        type: "group",
        id: nanoid(),
        properties: ["name", "size", "type", "subtype", "alignment"],
        nested: [
          {
            type: "heading",
            id: nanoid(),
            properties: ["name"],
            conditioned: true
          },
          {
            type: "subheading",
            id: nanoid(),
            properties: ["size", "type", "subtype", "alignment"],
            conditioned: true
          }
        ],
        conditioned: true
      },
      {
        type: "image",
        id: nanoid(),
        properties: ["image"]
      }
    ]
  },
  {
    type: "group",
    id: nanoid(),
    properties: ["ac", "hp", "speed"],
    nested: [
      {
        type: "property",
        id: nanoid(),
        properties: ["ac"],
        display: "Armor Class",
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        properties: ["hp"],
        display: "Hit Points",
        dice: true,
        diceProperty: "hit_dice",
        diceCallback: `return [{ text: monster["hit_dice"] }]`,
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Speed",
        properties: ["speed"],
        conditioned: true
      }
    ],
    hasRule: true,
    conditioned: true
  },
  {
    type: "table",
    id: nanoid(),
    properties: ["stats"],
    headers: ["Str", "Dex", "Con", "Int", "Wis", "Cha"],
    calculate: true,
    hasRule: true,
    conditioned: true
  },
  {
    type: "table",
    id: nanoid(),
    properties: ["fage_stats"],
    headers: ["Accuracy", "Communication", "Constitution", "Dexterity", "Fighting", "Intelligence", "Perception", "Strength", "Willpower"],
    calculate: false,
    hasRule: true,
    conditioned: true
  },
  {
    type: "group",
    id: nanoid(),
    properties: [
      "saves",
      "skillsaves",
      "damage_immunities",
      "damage_resistances",
      "damage_vulnerabilities",
      "condition_immunities",
      "cr",
      "languages",
      "senses"
    ],
    nested: [
      {
        type: "saves",
        id: nanoid(),
        display: "Saves",
        properties: ["saves"],
        conditioned: true
      },
      {
        type: "saves",
        id: nanoid(),
        display: "Skills",
        properties: ["skillsaves"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Damage Resistances",
        properties: ["damage_resistances"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Damage Immunities",
        properties: ["damage_immunities"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Condition Immunities",
        properties: ["condition_immunities"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Damage Vulnerabilities",
        properties: ["damage_vulnerabilities"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Senses",
        properties: ["senses"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Languages",
        properties: ["languages"],
        fallback: "-"
      },
      {
        type: "inline",
        id: nanoid(),
        properties: [],
        conditioned: true,
        nested: [
          {
            type: "property",
            id: nanoid(),
            display: "Challenge",
            properties: ["cr"],
            callback: `const CR = {
    "0": {
        cr: "0",
        value: 0,
        xp: 0
    },
    "1/8": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "1/4": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "1/2": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "0.125": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "0.25": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "0.5": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "1": {
        cr: "1",
        value: 1,
        xp: 200
    },
    "2": {
        cr: "2",
        value: 2,
        xp: 450
    },
    "3": {
        cr: "3",
        value: 3,
        xp: 700
    },
    "4": {
        cr: "4",
        value: 4,
        xp: 1100
    },
    "5": {
        cr: "5",
        value: 5,
        xp: 1800
    },
    "6": {
        cr: "6",
        value: 6,
        xp: 2300
    },
    "7": {
        cr: "7",
        value: 7,
        xp: 2900
    },
    "8": {
        cr: "8",
        value: 8,
        xp: 3900
    },
    "9": {
        cr: "9",
        value: 9,
        xp: 5000
    },
    "10": {
        cr: "10",
        value: 10,
        xp: 5900
    },
    "11": {
        cr: "11",
        value: 11,
        xp: 7200
    },
    "12": {
        cr: "12",
        value: 12,
        xp: 8400
    },
    "13": {
        cr: "13",
        value: 13,
        xp: 10000
    },
    "14": {
        cr: "14",
        value: 14,
        xp: 11500
    },
    "15": {
        cr: "15",
        value: 15,
        xp: 13000
    },
    "16": {
        cr: "16",
        value: 16,
        xp: 15000
    },
    "17": {
        cr: "17",
        value: 17,
        xp: 18000
    },
    "18": {
        cr: "18",
        value: 18,
        xp: 20000
    },
    "19": {
        cr: "19",
        value: 19,
        xp: 22000
    },
    "20": {
        cr: "20",
        value: 20,
        xp: 25000
    },
    "21": {
        cr: "21",
        value: 21,
        xp: 33000
    },
    "22": {
        cr: "22",
        value: 22,
        xp: 41000
    },
    "23": {
        cr: "23",
        value: 23,
        xp: 50000
    },
    "24": {
        cr: "24",
        value: 24,
        xp: 62000
    },
    "25": {
        cr: "25",
        value: 25,
        xp: 75000
    },
    "26": {
        cr: "26",
        value: 26,
        xp: 90000
    },
    "27": {
        cr: "27",
        value: 27,
        xp: 105000
    },
    "28": {
        cr: "28",
        value: 28,
        xp: 120000
    },
    "29": {
        cr: "29",
        value: 29,
        xp: 135000
    },
    "30": {
        cr: "30",
        value: 30,
        xp: 155000
    }
};                        
if ("cr" in monster && monster.cr in CR) {
    return \`\${CR[
        monster.cr
    ].cr} (\${CR[
        monster.cr
    ].xp.toLocaleString()} XP)\`;
}
return "";`
          },
          {
            type: "property",
            id: nanoid(),
            display: "Proficiency Bonus",
            properties: ["cr"],
            callback: `const CR = {
    "0": {
        cr: "0",
        value: 0,
        xp: 0
    },
    "1/8": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "1/4": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "1/2": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "0.125": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "0.25": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "0.5": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "1": {
        cr: "1",
        value: 1,
        xp: 200
    },
    "2": {
        cr: "2",
        value: 2,
        xp: 450
    },
    "3": {
        cr: "3",
        value: 3,
        xp: 700
    },
    "4": {
        cr: "4",
        value: 4,
        xp: 1100
    },
    "5": {
        cr: "5",
        value: 5,
        xp: 1800
    },
    "6": {
        cr: "6",
        value: 6,
        xp: 2300
    },
    "7": {
        cr: "7",
        value: 7,
        xp: 2900
    },
    "8": {
        cr: "8",
        value: 8,
        xp: 3900
    },
    "9": {
        cr: "9",
        value: 9,
        xp: 5000
    },
    "10": {
        cr: "10",
        value: 10,
        xp: 5900
    },
    "11": {
        cr: "11",
        value: 11,
        xp: 7200
    },
    "12": {
        cr: "12",
        value: 12,
        xp: 8400
    },
    "13": {
        cr: "13",
        value: 13,
        xp: 10000
    },
    "14": {
        cr: "14",
        value: 14,
        xp: 11500
    },
    "15": {
        cr: "15",
        value: 15,
        xp: 13000
    },
    "16": {
        cr: "16",
        value: 16,
        xp: 15000
    },
    "17": {
        cr: "17",
        value: 17,
        xp: 18000
    },
    "18": {
        cr: "18",
        value: 18,
        xp: 20000
    },
    "19": {
        cr: "19",
        value: 19,
        xp: 22000
    },
    "20": {
        cr: "20",
        value: 20,
        xp: 25000
    },
    "21": {
        cr: "21",
        value: 21,
        xp: 33000
    },
    "22": {
        cr: "22",
        value: 22,
        xp: 41000
    },
    "23": {
        cr: "23",
        value: 23,
        xp: 50000
    },
    "24": {
        cr: "24",
        value: 24,
        xp: 62000
    },
    "25": {
        cr: "25",
        value: 25,
        xp: 75000
    },
    "26": {
        cr: "26",
        value: 26,
        xp: 90000
    },
    "27": {
        cr: "27",
        value: 27,
        xp: 105000
    },
    "28": {
        cr: "28",
        value: 28,
        xp: 120000
    },
    "29": {
        cr: "29",
        value: 29,
        xp: 135000
    },
    "30": {
        cr: "30",
        value: 30,
        xp: 155000
    }
};           
if ("cr" in monster && monster.cr in CR) {
    return \`+\${Math.max(
            Math.floor(2 + ((CR[monster.cr]?.value ?? 0) - 1) / 4),
            2
        )}\`;
}
return "";`
          }
        ]
      }
    ],
    conditioned: true,
    hasRule: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["traits"],
    conditioned: true,
    dice: true
  },
  {
    type: "spells",
    id: nanoid(),
    properties: ["spells"],
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["actions"],
    heading: "Actions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["bonus_actions"],
    heading: "Bonus Actions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["legendary_actions"],
    heading: "Legendary Actions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["reactions"],
    heading: "Reactions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["lair_actions"],
    heading: "Lair Actions",
    conditioned: true,
    dice: true
  }
];
var Layout5e = {
  blocks: Statblock5e,
  name: "Basic 5e Layout"
};

// src/view/statblock.ts
var import_obsidian7 = __toModule(require("obsidian"));

// node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function is_promise(value) {
  return value && typeof value === "object" && typeof value.then === "function";
}
function run(fn2) {
  return fn2();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, bubbles = false) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, false, detail);
  return e;
}
var managed_styles = new Map();
var active = 0;
function hash(str) {
  let hash4 = 5381;
  let i = str.length;
  while (i--)
    hash4 = (hash4 << 5) - hash4 ^ str.charCodeAt(i);
  return hash4 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn2, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn2(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn2(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1);
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { stylesheet } = info;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      info.rules = {};
    });
    managed_styles.clear();
  });
}
function create_animation(node, from, fn2, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end: end2 = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn2(node, { from, to }, params);
  let running = true;
  let started = false;
  let name;
  function start2() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end2) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start2();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn2) {
  get_current_component().$$.on_mount.push(fn2);
}
function onDestroy(fn2) {
  get_current_component().$$.on_destroy.push(fn2);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn2) => {
        fn2.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function getAllContexts() {
  return get_current_component().$$.context;
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn2) => fn2.call(this, event));
  }
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn2) {
  render_callbacks.push(fn2);
}
function add_flush_callback(fn2) {
  flush_callbacks.push(fn2);
}
var seen_callbacks = new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}
function handle_promise(promise, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise)) {
    const current_component2 = get_current_component();
    promise.then((value) => {
      set_current_component(current_component2);
      update2(info.then, 1, info.value, value);
      set_current_component(null);
    }, (error) => {
      set_current_component(current_component2);
      update2(info.catch, 2, info.error, error);
      set_current_component(null);
      if (!info.hasCatch) {
        throw error;
      }
    });
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise);
      return true;
    }
    info.resolved = promise;
  }
}
function update_await_block_branch(info, ctx, dirty) {
  const child_ctx = ctx.slice();
  const { resolved } = info;
  if (info.current === info.then) {
    child_ctx[info.value] = resolved;
  }
  if (info.current === info.catch) {
    child_ctx[info.error] = resolved;
  }
  info.block.p(child_ctx, dirty);
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block8, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = new Map();
  const deltas = new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block8(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = new Set();
  const did_move = new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
var boolean_attributes = new Set([
  "allowfullscreen",
  "allowpaymentrequest",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "defer",
  "disabled",
  "formnovalidate",
  "hidden",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "selected"
]);
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance23, create_fragment25, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance23 ? instance23(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment25 ? create_fragment25($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/view/Statblock.svelte
var import_obsidian5 = __toModule(require("obsidian"));

// src/data/constants.ts
var SAVE_ICON = `<svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="save" class="svg-inline--fa fa-save fa-w-14" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM272 80v80H144V80h128zm122 352H54a6 6 0 0 1-6-6V86a6 6 0 0 1 6-6h42v104c0 13.255 10.745 24 24 24h176c13.255 0 24-10.745 24-24V83.882l78.243 78.243a6 6 0 0 1 1.757 4.243V426a6 6 0 0 1-6 6zM224 232c-48.523 0-88 39.477-88 88s39.477 88 88 88 88-39.477 88-88-39.477-88-88-88zm0 128c-22.056 0-40-17.944-40-40s17.944-40 40-40 40 17.944 40 40-17.944 40-40 40z"></path></svg>`;
var SAVE_SYMBOL = "statblock-save";
var EXPORT_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="download" class="svg-inline--fa fa-download fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"/></svg>`;
var EXPORT_SYMBOL = "statblock-export-as-png";

// node_modules/svelte/store/index.mjs
var subscriber_queue = [];
function writable(value, start2 = noop) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn2) {
    set(fn2(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/view/ui/Bar.svelte
function add_css(target) {
  append_styles(target, "svelte-1g1j5xk", ".bar.svelte-1g1j5xk{height:5px;background:var(--statblock-bar-color);border:1px solid #000;z-index:1;width:auto}");
}
function create_fragment(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "bar svelte-1g1j5xk");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
var Bar = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment, safe_not_equal, {}, add_css);
  }
};
var Bar_default = Bar;

// src/view/ui/DiceHolder.svelte
var import_obsidian = __toModule(require("obsidian"));

// src/view/ui/DiceRoll.svelte
function add_css2(target) {
  append_styles(target, "svelte-rmxhsz", ".roller-result.svelte-rmxhsz{font-weight:700}");
}
function create_else_block(ctx) {
  let span;
  let rollerEl_action;
  let t;
  let if_block_anchor;
  let mounted;
  let dispose;
  let if_block = (typeof ctx[1] == "number" || ctx[1] && ctx[1].length) && create_if_block_1(ctx);
  return {
    c() {
      span = element("span");
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(span, "class", "roller-result svelte-rmxhsz");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      if (!mounted) {
        dispose = action_destroyer(rollerEl_action = ctx[4].call(null, span));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (typeof ctx2[1] == "number" || ctx2[1] && ctx2[1].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if (detaching)
        detach(t);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block(ctx) {
  let t;
  return {
    c() {
      t = text(ctx[0]);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_1(ctx) {
  let span;
  let t0;
  let t1;
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text("(");
      t1 = text(ctx[1]);
      t2 = text(")");
      attr(span, "class", "dice-original");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t1, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_key_block(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (ctx2[2] || !ctx2[3])
      return create_if_block;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment2(ctx) {
  let previous_key = ctx[2];
  let key_block_anchor;
  let key_block = create_key_block(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & 4 && safe_not_equal(previous_key, previous_key = ctx2[2])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(key_block_anchor);
      key_block.d(detaching);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { text: text2 } = $$props;
  let { original = text2 } = $$props;
  const dice = getContext("dice");
  const plugin = getContext("plugin");
  const render = getContext("render");
  const reset = getContext("reset");
  reset.subscribe(async (v) => {
    if (v)
      await roller.applyResult({
        type: "dice",
        result: defaultValue,
        tooltip: "Average"
      });
  });
  let roller = null;
  let error = false;
  if (!roller && dice) {
    try {
      roller = plugin.getRoller(`${text2}`);
    } catch (e) {
      console.error(e);
      error = true;
    }
  }
  let defaultValue = 0;
  onMount(async () => {
    if (roller) {
      try {
        await roller.roll();
        defaultValue = roller.dice.reduce((a, dice2) => a + (dice2.static ? dice2.result : Math.ceil((dice2.faces.min + dice2.faces.max) / 2 * dice2.rolls)), 0);
        await roller.applyResult({
          type: "dice",
          result: defaultValue,
          tooltip: "Average"
        });
        roller.shouldRender = render;
      } catch (e) {
        $$invalidate(2, error = true);
      }
    }
  });
  const rollerEl = (node) => {
    if (!roller || !roller.containerEl) {
      node.setText(`${original}`);
    } else {
      node.appendChild(roller.containerEl);
    }
  };
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(0, text2 = $$props2.text);
    if ("original" in $$props2)
      $$invalidate(1, original = $$props2.original);
  };
  return [text2, original, error, dice, rollerEl];
}
var DiceRoll = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment2, safe_not_equal, { text: 0, original: 1 }, add_css2);
  }
};
var DiceRoll_default = DiceRoll;

// src/view/ui/DiceHolder.svelte
function add_css3(target) {
  append_styles(target, "svelte-9xkcir", ".property-text.svelte-9xkcir{display:inline;margin:0}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_else_block2(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 3) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_if_block2(ctx) {
  let span;
  let t;
  return {
    c() {
      span = element("span");
      t = text(ctx[0]);
      attr(span, "class", "property-text svelte-9xkcir");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_else_block_1(ctx) {
  let span;
  let t_value = ctx[6] + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "property-text svelte-9xkcir");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t_value !== (t_value = ctx2[6] + ""))
        set_data(t, t_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_12(ctx) {
  let diceroll;
  let current;
  diceroll = new DiceRoll_default({
    props: {
      text: ctx[6]?.text ?? ctx[0],
      original: ctx[6]?.original ?? ctx[6]?.text ?? ctx[0]
    }
  });
  return {
    c() {
      create_component(diceroll.$$.fragment);
    },
    m(target, anchor) {
      mount_component(diceroll, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const diceroll_changes = {};
      if (dirty & 3)
        diceroll_changes.text = ctx2[6]?.text ?? ctx2[0];
      if (dirty & 3)
        diceroll_changes.original = ctx2[6]?.original ?? ctx2[6]?.text ?? ctx2[0];
      diceroll.$set(diceroll_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(diceroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(diceroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(diceroll, detaching);
    }
  };
}
function create_each_block(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_12, create_else_block_1];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (typeof ctx2[6] != "string" && typeof ctx2[6] == "object" && "text" in ctx2[6])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment3(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block2, create_else_block2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { property } = $$props;
  let item = getContext("item");
  let dice = getContext("dice") && item.dice;
  let monster = getContext("monster");
  let plugin = getContext("plugin");
  let split = [property];
  if (dice) {
    if (item.diceProperty && item.diceProperty in monster && typeof monster[item.diceProperty] == "string") {
      split = [{ text: monster[item.diceProperty] }];
    } else if (item.diceCallback) {
      try {
        const frame = document.body.createEl("iframe");
        const funct = frame.contentWindow.Function;
        const func = new funct("monster", "property", item.diceCallback);
        const parsed = func.call(void 0, monster, property) ?? property;
        document.body.removeChild(frame);
        if (Array.isArray(parsed)) {
          split = parsed;
        } else {
          split = [parsed];
        }
      } catch (e) {
        new import_obsidian.Notice(`There was an error executing the provided dice callback for [${item.properties.join(", ")}]

${e.message}`);
        console.error(e);
      }
    } else {
      const parsed = plugin.parseForDice(property);
      if (Array.isArray(parsed)) {
        split = parsed;
      } else {
        split = [parsed];
      }
    }
  }
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(0, property = $$props2.property);
  };
  return [property, split, dice];
}
var DiceHolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment3, safe_not_equal, { property: 0 }, add_css3);
  }
};
var DiceHolder_default = DiceHolder;

// src/view/ui/MarkdownHolder.svelte
var import_obsidian2 = __toModule(require("obsidian"));
function create_fragment4(ctx) {
  let div;
  let markdown_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(markdown_action = ctx[0].call(null, div));
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { property } = $$props;
  const context = getContext("context");
  const renderer = getContext("renderer");
  const markdown = (node) => {
    import_obsidian2.MarkdownRenderer.renderMarkdown(property, node, context, renderer);
  };
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(1, property = $$props2.property);
  };
  return [markdown, property];
}
var MarkdownHolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment4, safe_not_equal, { property: 1 });
  }
};
var MarkdownHolder_default = MarkdownHolder;

// src/view/ui/TextContentHolder.svelte
function create_else_block3(ctx) {
  let diceholder;
  let current;
  diceholder = new DiceHolder_default({ props: { property: ctx[0] } });
  return {
    c() {
      create_component(diceholder.$$.fragment);
    },
    m(target, anchor) {
      mount_component(diceholder, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const diceholder_changes = {};
      if (dirty & 1)
        diceholder_changes.property = ctx2[0];
      diceholder.$set(diceholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(diceholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(diceholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(diceholder, detaching);
    }
  };
}
function create_if_block3(ctx) {
  let markdownholder;
  let current;
  markdownholder = new MarkdownHolder_default({ props: { property: ctx[0] } });
  return {
    c() {
      create_component(markdownholder.$$.fragment);
    },
    m(target, anchor) {
      mount_component(markdownholder, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const markdownholder_changes = {};
      if (dirty & 1)
        markdownholder_changes.property = ctx2[0];
      markdownholder.$set(markdownholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(markdownholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(markdownholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(markdownholder, detaching);
    }
  };
}
function create_fragment5(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block3, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[1])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let { property } = $$props;
  let { render = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(0, property = $$props2.property);
    if ("render" in $$props2)
      $$invalidate(1, render = $$props2.render);
  };
  return [property, render];
}
var TextContentHolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment5, safe_not_equal, { property: 0, render: 1 });
  }
};
var TextContentHolder_default = TextContentHolder;

// src/view/ui/Traits.svelte
function add_css4(target) {
  append_styles(target, "svelte-oskcir", ".property-text.svelte-oskcir{display:inline;white-space:pre-line;text-indent:0}.property-name.svelte-oskcir{margin:0;margin-right:0.25em;display:inline;font-weight:bold;font-style:italic}");
}
function create_if_block4(ctx) {
  let div;
  let t;
  return {
    c() {
      div = element("div");
      t = text(ctx[0]);
      attr(div, "class", "property-name svelte-oskcir");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment6(ctx) {
  let div1;
  let t;
  let div0;
  let textcontentholder;
  let current;
  let if_block = ctx[0] && create_if_block4(ctx);
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[2],
      property: ctx[1]
    }
  });
  return {
    c() {
      div1 = element("div");
      if (if_block)
        if_block.c();
      t = space();
      div0 = element("div");
      create_component(textcontentholder.$$.fragment);
      attr(div0, "class", "property-text svelte-oskcir");
      attr(div1, "class", "property");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      if (if_block)
        if_block.m(div1, null);
      append(div1, t);
      append(div1, div0);
      mount_component(textcontentholder, div0, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          if_block.m(div1, t);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const textcontentholder_changes = {};
      if (dirty & 4)
        textcontentholder_changes.render = ctx2[2];
      if (dirty & 2)
        textcontentholder_changes.property = ctx2[1];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block)
        if_block.d();
      destroy_component(textcontentholder);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let { name } = $$props;
  let { desc } = $$props;
  let { render = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(0, name = $$props2.name);
    if ("desc" in $$props2)
      $$invalidate(1, desc = $$props2.desc);
    if ("render" in $$props2)
      $$invalidate(2, render = $$props2.render);
  };
  return [name, desc, render];
}
var Traits = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment6, safe_not_equal, { name: 0, desc: 1, render: 2 }, add_css4);
  }
};
var Traits_default = Traits;

// src/view/ui/Spells.svelte
var import_obsidian3 = __toModule(require("obsidian"));
function add_css5(target) {
  append_styles(target, "svelte-nhjtjx", ".spell-line.svelte-nhjtjx .spells.svelte-nhjtjx{font-style:italic}");
}
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  child_ctx[5] = i;
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  child_ctx[8] = i;
  return child_ctx;
}
function create_else_block_12(ctx) {
  let traits;
  let current;
  traits = new Traits_default({
    props: { name: "", desc: ctx[3].header }
  });
  return {
    c() {
      create_component(traits.$$.fragment);
    },
    m(target, anchor) {
      mount_component(traits, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(traits.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(traits.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(traits, detaching);
    }
  };
}
function create_if_block_13(ctx) {
  let traits;
  let current;
  traits = new Traits_default({
    props: {
      name: "Spellcasting",
      desc: ctx[3].header
    }
  });
  return {
    c() {
      create_component(traits.$$.fragment);
    },
    m(target, anchor) {
      mount_component(traits, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(traits.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(traits.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(traits, detaching);
    }
  };
}
function create_else_block4(ctx) {
  let li;
  let span0;
  let t0_value = ctx[6].split(":").shift() + "";
  let t0;
  let t1;
  let t2;
  let span1;
  let t3_value = ctx[6].split(":").pop() + "";
  let t3;
  return {
    c() {
      li = element("li");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = text(":");
      t2 = space();
      span1 = element("span");
      t3 = text(t3_value);
      attr(span0, "class", "spell-level");
      attr(span1, "class", "spells svelte-nhjtjx");
      attr(li, "class", "spell-line svelte-nhjtjx");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, span0);
      append(span0, t0);
      append(span0, t1);
      append(li, t2);
      append(li, span1);
      append(span1, t3);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(li);
    }
  };
}
function create_if_block5(ctx) {
  let span;
  let t_value = ctx[6] + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "spell-line");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block_1(ctx) {
  let show_if;
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[8] === ctx2[3].spells.length - 1 && !ctx2[6].includes(":"))
      return create_if_block5;
    return create_else_block4;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if_block.p(ctx2, dirty);
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block2(ctx) {
  let current_block_type_index;
  let if_block;
  let t0;
  let ul;
  let t1;
  let current;
  const if_block_creators = [create_if_block_13, create_else_block_12];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[5] === 0)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let each_value_1 = ctx[3].spells;
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  return {
    c() {
      if_block.c();
      t0 = space();
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      attr(ul, "class", "spell-list");
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, t0, anchor);
      insert(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }
      append(ul, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if_block.p(ctx2, dirty);
      if (dirty & 1) {
        each_value_1 = ctx2[3].spells;
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, t1);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(ul);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment7(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "spellcasting");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  const ensureColon = (header) => {
    if (header[header.length - 1] === ":")
      return header;
    return `${header}:`;
  };
  let spellBlocks = monster.spells.reduce((acc, current) => {
    if (typeof current === "string" && current.charAt(current.length - 1) == ":") {
      const newBlock = { header: ensureColon(current), spells: [] };
      acc.push(newBlock);
      return acc;
    }
    const lastBlock = acc[acc.length - 1];
    const spell = typeof current == "string" ? current : (0, import_obsidian3.stringifyYaml)(current);
    if (lastBlock) {
      lastBlock.spells.push(spell);
    } else {
      const missingHeaderBlock = {
        header: `${monster.name} knows the following spells:`,
        spells: [spell]
      };
      acc.push(missingHeaderBlock);
    }
    return acc;
  }, []);
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(1, monster = $$props2.monster);
  };
  return [spellBlocks, monster];
}
var Spells = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment7, safe_not_equal, { monster: 1 }, add_css5);
  }
};
var Spells_default = Spells;

// src/view/ui/Heading.svelte
function add_css6(target) {
  append_styles(target, "svelte-v0iiew", '.flex-container.svelte-v0iiew{display:flex;justify-content:space-between;align-items:center}.heading.svelte-v0iiew{font-family:"Libre Baskerville", "Lora", "Calisto MT",\r\n            "Bookman Old Style", Bookman, "Goudy Old Style", Garamond,\r\n            "Hoefler Text", "Bitstream Charter", Georgia, serif;color:var(--statblock-primary-color);font-weight:700;margin:0px;font-size:23px;letter-spacing:1px;font-variant:small-caps;display:flex;justify-content:space-between;align-items:center}');
}
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[2] = list[i];
  return child_ctx;
}
function create_if_block6(ctx) {
  let div;
  let t_value = ctx[0][ctx[2]] + "";
  let t;
  return {
    c() {
      div = element("div");
      t = text(t_value);
      attr(div, "class", "heading svelte-v0iiew");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t);
    },
    p(ctx2, dirty) {
      if (dirty & 3 && t_value !== (t_value = ctx2[0][ctx2[2]] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block3(ctx) {
  let if_block_anchor;
  let if_block = ctx[2] in ctx[0] && create_if_block6(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (ctx2[2] in ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block6(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment8(ctx) {
  let div;
  let each_value = ctx[1].properties;
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "flex-container svelte-v0iiew");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 3) {
        each_value = ctx2[1].properties;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(1, item = $$props2.item);
  };
  return [monster, item];
}
var Heading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment8, safe_not_equal, { monster: 0, item: 1 }, add_css6);
  }
};
var Heading_default = Heading;

// src/view/ui/PropertyLine.svelte
var import_obsidian4 = __toModule(require("obsidian"));
function add_css7(target) {
  append_styles(target, "svelte-18djcuw", ".line.svelte-18djcuw{line-height:1.4;display:block;color:var(--statblock-primary-color)}.property-name.svelte-18djcuw{margin:0;margin-right:0.25em;display:inline;font-weight:bold}");
}
function create_if_block7(ctx) {
  let div;
  let span;
  let t1;
  let textcontentholder;
  let current;
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[0].markdown,
      property: ctx[1]
    }
  });
  return {
    c() {
      div = element("div");
      span = element("span");
      span.textContent = `${ctx[2]}`;
      t1 = space();
      create_component(textcontentholder.$$.fragment);
      attr(span, "class", "property-name svelte-18djcuw");
      attr(div, "class", "line svelte-18djcuw");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(div, t1);
      mount_component(textcontentholder, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontentholder_changes = {};
      if (dirty & 1)
        textcontentholder_changes.render = ctx2[0].markdown;
      if (dirty & 2)
        textcontentholder_changes.property = ctx2[1];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(textcontentholder);
    }
  };
}
function create_fragment9(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (!ctx[0].conditioned || ctx[0].conditioned && `${ctx[1]}`.length) && create_if_block7(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!ctx2[0].conditioned || ctx2[0].conditioned && `${ctx2[1]}`.length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 3) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let property = stringify(monster[item.properties[0]]);
  let display = item.display ?? item.properties[0];
  if (item.callback) {
    try {
      const frame = document.body.createEl("iframe");
      const funct = frame.contentWindow.Function;
      const func = new funct("monster", item.callback);
      property = func.call(void 0, monster) ?? property;
      document.body.removeChild(frame);
    } catch (e) {
      new import_obsidian4.Notice(`There was an error executing the provided callback for [${item.properties.join(", ")}]

${e.message}`);
      console.error(e);
    }
  }
  if (!item.conditioned && !`${property}`.length) {
    property = item.fallback ?? "-";
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(3, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, property, display, monster];
}
var PropertyLine = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment9, safe_not_equal, { monster: 3, item: 0 }, add_css7);
  }
};
var PropertyLine_default = PropertyLine;

// src/view/ui/Rule.svelte
function add_css8(target) {
  append_styles(target, "svelte-sujd32", ".tapered-rule.svelte-sujd32{width:auto;margin:0.5em 0;height:5px;background:-webkit-linear-gradient(\r\n            0deg,\r\n            var(--statblock-rule-color) 0%,\r\n            var(--statblock-rule-color) 50%,\r\n            var(--statblock-background-color) 95%,\r\n            var(--statblock-background-color) 100%\r\n        );clip-path:polygon(0 0, 0 100%, 95% 50%);-webkit-clip-path:polygon(0 0, 0 100%, 95% 50%)}");
}
function create_fragment10(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "tapered-rule svelte-sujd32");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
var Rule = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment10, safe_not_equal, {}, add_css8);
  }
};
var Rule_default = Rule;

// src/view/ui/Saves.svelte
function add_css9(target) {
  append_styles(target, "svelte-1ey5nbe", ".line.svelte-1ey5nbe{line-height:1.4;display:block;color:var(--statblock-primary-color)}.property-name.svelte-1ey5nbe{margin:0;margin-right:0.25em;display:inline;font-weight:bold}.property-text.svelte-1ey5nbe{display:inline;margin:0}");
}
function create_fragment11(ctx) {
  let div2;
  let div1;
  let span;
  let t0_value = (ctx[0].display ?? toTitleCase(ctx[0].properties[0])) + "";
  let t0;
  let t1;
  let div0;
  let textcontentholder;
  let current;
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[0].markdown,
      property: ctx[1]
    }
  });
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      create_component(textcontentholder.$$.fragment);
      attr(span, "class", "property-name svelte-1ey5nbe");
      attr(div0, "class", "property-text svelte-1ey5nbe");
      attr(div1, "class", "line svelte-1ey5nbe");
      attr(div2, "class", "info");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      mount_component(textcontentholder, div0, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & 1) && t0_value !== (t0_value = (ctx2[0].display ?? toTitleCase(ctx2[0].properties[0])) + ""))
        set_data(t0, t0_value);
      const textcontentholder_changes = {};
      if (dirty & 1)
        textcontentholder_changes.render = ctx2[0].markdown;
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(textcontentholder);
    }
  };
}
function getMod(value) {
  return `${value > 0 ? "+" : ""}${value}`;
}
function instance9($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let arr = monster[item.properties[0]];
  if (!Array.isArray(arr)) {
    arr = [];
  }
  const saves = arr.map((ability) => {
    if (typeof ability != "object" || ability == null)
      return null;
    let key = Object.keys(ability)[0];
    if (!key)
      return null;
    const value = Object.values(ability)[0];
    if (!value || isNaN(Number(value)))
      return null;
    return `${toTitleCase(key)} ${getMod(value)}`;
  }).filter((m) => m).join(", ");
  let canDice = getContext("dice");
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(2, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, saves, monster];
}
var Saves = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment11, safe_not_equal, { monster: 2, item: 0 }, add_css9);
  }
};
var Saves_default = Saves;

// src/view/ui/SectionHeading.svelte
function add_css10(target) {
  append_styles(target, "svelte-htlq9m", ".section-header.svelte-htlq9m{border-bottom:1px solid var(--statblock-primary-color);color:var(--statblock-primary-color);font-size:21px;font-variant:small-caps;font-weight:normal;letter-spacing:1px;margin:0;margin-bottom:0.3em;break-inside:avoid-column;break-after:avoid-column}");
}
function create_fragment12(ctx) {
  let h3;
  let t;
  return {
    c() {
      h3 = element("h3");
      t = text(ctx[0]);
      attr(h3, "class", "section-header svelte-htlq9m");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      append(h3, t);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(h3);
    }
  };
}
function instance10($$self, $$props, $$invalidate) {
  let { header } = $$props;
  $$self.$$set = ($$props2) => {
    if ("header" in $$props2)
      $$invalidate(0, header = $$props2.header);
  };
  return [header];
}
var SectionHeading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment12, safe_not_equal, { header: 0 }, add_css10);
  }
};
var SectionHeading_default = SectionHeading;

// src/view/ui/Subheading.svelte
function add_css11(target) {
  append_styles(target, "svelte-4yps8l", ".subheading.svelte-4yps8l{font-weight:normal;font-style:italic;font-size:12px;margin:0}");
}
function create_if_block8(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = `${ctx[0].join(" ")}`;
      attr(div, "class", "subheading svelte-4yps8l");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment13(ctx) {
  let if_block_anchor;
  let if_block = ctx[0].length && create_if_block8(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (ctx2[0].length)
        if_block.p(ctx2, dirty);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  const subheading = [];
  for (let property of item.properties) {
    if (property in monster) {
      subheading.push(`${stringify(monster[property])}`);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(1, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(2, item = $$props2.item);
  };
  return [subheading, monster, item];
}
var Subheading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment13, safe_not_equal, { monster: 1, item: 2 }, add_css11);
  }
};
var Subheading_default = Subheading;

// src/view/ui/Table.svelte
function add_css12(target) {
  append_styles(target, "svelte-1gnzqxx", ".statblock-table-header.svelte-1gnzqxx{font-weight:bold}.table.svelte-1gnzqxx{display:flex;justify-content:space-evenly;align-items:center;flex-wrap:wrap}.table-item.svelte-1gnzqxx{display:flex;justify-content:center;align-items:center;flex-flow:column nowrap}");
}
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i];
  child_ctx[6] = i;
  return child_ctx;
}
function create_if_block9(ctx) {
  let span;
  let t0;
  let t1_value = getMod2(ctx[4]) + "";
  let t1;
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text("(");
      t1 = text(t1_value);
      t2 = text(")");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t1_value !== (t1_value = getMod2(ctx2[4]) + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block4(ctx) {
  let div;
  let span0;
  let t0_value = `${ctx[2][ctx[6]]}`.toUpperCase() + "";
  let t0;
  let t1;
  let span1;
  let t2_value = ctx[4] + "";
  let t2;
  let t3;
  let t4;
  let if_block = ctx[0].calculate && create_if_block9(ctx);
  return {
    c() {
      div = element("div");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      attr(span0, "class", "statblock-table-header svelte-1gnzqxx");
      attr(div, "class", "table-item svelte-1gnzqxx");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span0);
      append(span0, t0);
      append(div, t1);
      append(div, span1);
      append(span1, t2);
      append(span1, t3);
      if (if_block)
        if_block.m(span1, null);
      append(div, t4);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t2_value !== (t2_value = ctx2[4] + ""))
        set_data(t2, t2_value);
      if (ctx2[0].calculate) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block9(ctx2);
          if_block.c();
          if_block.m(span1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
    }
  };
}
function create_fragment14(ctx) {
  let div;
  let each_value = ctx[1].slice(0, ctx[2].length);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "table svelte-1gnzqxx");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 7) {
        each_value = ctx2[1].slice(0, ctx2[2].length);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function getMod2(stat) {
  let mod = Math.floor(((stat ?? 10) - 10) / 2);
  return `${mod >= 0 ? "+" : "-"}${Math.abs(mod)}`;
}
function instance12($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let values = monster[item.properties[0]];
  if (!Array.isArray(values)) {
    values = [];
  }
  const headers = item.headers ?? [...Array(values.length > 0 ? values.length : 1).keys()];
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(3, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, values, headers, monster];
}
var Table = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment14, safe_not_equal, { monster: 3, item: 0 }, add_css12);
  }
};
var Table_default = Table;

// src/view/ui/Text.svelte
function create_if_block10(ctx) {
  let t;
  let div;
  let textcontentholder;
  let current;
  let if_block = ctx[0].heading && create_if_block_14(ctx);
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[0].markdown,
      property: ctx[1]
    }
  });
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
      div = element("div");
      create_component(textcontentholder.$$.fragment);
      attr(div, "class", "line");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
      insert(target, div, anchor);
      mount_component(textcontentholder, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[0].heading) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_14(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const textcontentholder_changes = {};
      if (dirty & 1)
        textcontentholder_changes.render = ctx2[0].markdown;
      if (dirty & 2)
        textcontentholder_changes.property = ctx2[1];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t);
      if (detaching)
        detach(div);
      destroy_component(textcontentholder);
    }
  };
}
function create_if_block_14(ctx) {
  let sectionheading;
  let current;
  sectionheading = new SectionHeading_default({
    props: { header: ctx[0].heading }
  });
  return {
    c() {
      create_component(sectionheading.$$.fragment);
    },
    m(target, anchor) {
      mount_component(sectionheading, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheading_changes = {};
      if (dirty & 1)
        sectionheading_changes.header = ctx2[0].heading;
      sectionheading.$set(sectionheading_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheading.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheading.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(sectionheading, detaching);
    }
  };
}
function create_fragment15(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (!ctx[0].conditioned || ctx[0].conditioned && `${ctx[1]}`.length) && create_if_block10(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!ctx2[0].conditioned || ctx2[0].conditioned && `${ctx2[1]}`.length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 3) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let property = item.text && item.text.length ? item.text : stringify(monster[item.properties[0]]);
  if (!item.conditioned && !`${property}`.length) {
    property = item.fallback ?? "-";
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(2, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, property, monster];
}
var Text = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment15, safe_not_equal, { monster: 2, item: 0 });
  }
};
var Text_default = Text;

// src/view/ui/Image.svelte
function add_css13(target) {
  append_styles(target, "svelte-1nb7a6z", ".image.svelte-1nb7a6z{width:75px;height:75px}img.svelte-1nb7a6z{object-fit:cover;width:100%;height:100%;border-radius:100%;border:2px solid var(--statblock-primary-color);object-position:center}");
}
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_if_block11(ctx) {
  let await_block_anchor;
  let promise_1;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 10
  };
  handle_promise(promise_1 = ctx[2], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      update_await_block_branch(info, ctx, dirty);
    },
    d(detaching) {
      if (detaching)
        detach(await_block_anchor);
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_then_block(ctx) {
  let t;
  let if_block = ctx[10] && create_if_block_15(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (ctx2[10])
        if_block.p(ctx2, dirty);
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_15(ctx) {
  let div;
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      div = element("div");
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = ctx[10]))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = ctx[0].name);
      attr(img, "class", "svelte-1nb7a6z");
      attr(div, "class", "image svelte-1nb7a6z");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && img_alt_value !== (img_alt_value = ctx2[0].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_pending_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_each_block5(ctx) {
  let if_block_anchor;
  let if_block = ctx[7] in ctx[0] && create_if_block11(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (ctx2[7] in ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block11(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment16(ctx) {
  let each_1_anchor;
  let each_value = ctx[1].properties;
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & 7) {
        each_value = ctx2[1].properties;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function parseLink(link) {
  return link?.replace(/(\[|\])/g, "");
}
function instance14($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  const plugin = getContext("plugin");
  const context = getContext("context");
  async function getLink(url) {
    url = decodeURIComponent(url);
    let link;
    try {
      if (/https?:/.test(url)) {
        const [linkpath] = parseLink(url).split("|");
        link = linkpath;
      } else {
        const [linkpath] = parseLink(url).split("|");
        let file = plugin.app.metadataCache.getFirstLinkpathDest(linkpath, "");
        if (!file)
          throw new Error();
        link = plugin.app.vault.getResourcePath(file);
      }
    } catch (e) {
      console.error(e);
    }
    return link;
  }
  const getImage = async () => {
    if (item.properties.length && item.properties.some((p) => p in monster && typeof monster[p] == "string")) {
      const props = item.properties.filter((p) => p in monster && typeof monster[p] == "string");
      if (props.length > 1) {
        console.log("TTRPG Statblocks: Multiple image properties provided, using first.");
      }
      const path = monster[props[0]];
      return getLink(path);
    }
  };
  let promise = getImage();
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(1, item = $$props2.item);
  };
  return [monster, item, promise];
}
var Image2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment16, safe_not_equal, { monster: 0, item: 1 }, add_css13);
  }
};
var Image_default = Image2;

// src/view/ui/Content.svelte
function add_css14(target) {
  append_styles(target, "svelte-wrk0j1", '.statblock-content.svelte-wrk0j1{font-family:"Noto Sans", "Myriad Pro", Calibri, Helvetica, Arial,\r\n            sans-serif;font-size:14px;color:var(--statblock-primary-color);background-color:var(--statblock-background-color);padding:0.5em;border:1px #ddd solid;box-shadow:0 0 1.5em #ddd;margin-left:2px;margin-right:2px;display:flex;gap:1rem}.statblock-content.svelte-wrk0j1>.column{width:var(--statblock-column-width)}@media screen and (max-width: 400px){.statblock-content.svelte-wrk0j1>.column{width:75vw}}.statblock-item-container{margin-bottom:0.25rem}.statblock-detached{position:absolute;top:-9999px}.statblock-item-inline{display:flex;justify-content:space-between}');
}
function create_fragment17(ctx) {
  let div1;
  let div0;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      attr(div0, "class", "statblock-content svelte-wrk0j1");
      attr(div1, "class", "statblock-content-container");
      set_style(div1, "--statblock-column-width", ctx[1]);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      ctx[6](div0);
    },
    p(ctx2, [dirty]) {
      if (dirty & 2) {
        set_style(div1, "--statblock-column-width", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      ctx[6](null);
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  let maxHeight;
  const dispatch = createEventDispatcher();
  let { statblock } = $$props;
  let { columns = 1 } = $$props;
  let { ready } = $$props;
  let { maxColumns = columns } = $$props;
  const monster = getContext("monster");
  const checkConditioned = (item) => {
    if (item.conditioned == null || !item.conditioned)
      return true;
    if (!item.properties.length)
      return true;
    return item.properties.some((prop) => {
      if (prop in monster) {
        if (Array.isArray(monster[prop]) && monster[prop].length) {
          return true;
        }
        if (typeof monster[prop] === "string" && monster[prop].length) {
          return true;
        }
        if (typeof monster[prop] === "number") {
          return true;
        }
      }
      return false;
    });
  };
  const context = getAllContexts();
  const getElementForStatblockItem = (item, container) => {
    const targets = [];
    const target = container ?? createDiv("statblock-item-container");
    context.set("item", item);
    if (!checkConditioned(item)) {
      return [];
    }
    targets.push(target);
    switch (item.type) {
      case "group": {
        for (const nested of item.nested ?? []) {
          const element2 = getElementForStatblockItem(nested, target);
          targets.push(...element2);
        }
        break;
      }
      case "heading": {
        const heading = new Heading_default({
          target,
          props: { monster, item },
          context
        });
        heading.$on("save", (e) => dispatch("save", e.detail));
        heading.$on("export", (e) => dispatch("export", e.detail));
        break;
      }
      case "inline": {
        const inline = createDiv("statblock-item-inline");
        for (const nested of item.nested ?? []) {
          getElementForStatblockItem(nested, inline.createDiv("statblock-inline-item"));
        }
        targets.push(inline);
        break;
      }
      case "image": {
        new Image_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "property": {
        new PropertyLine_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "saves": {
        new Saves_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "spells": {
        const blocks = monster[item.properties[0]];
        if (!Array.isArray(blocks) || !blocks.length)
          return;
        new Spells_default({ target, props: { monster }, context });
        break;
      }
      case "subheading": {
        new Subheading_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "table": {
        new Table_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "text": {
        new Text_default({ target, props: { monster, item } });
        break;
      }
      case "traits": {
        const blocks = monster[item.properties[0]];
        if (!Array.isArray(blocks) || !blocks.length)
          return [];
        if (item.heading) {
          new SectionHeading_default({
            target,
            props: { header: item.heading },
            context
          });
        }
        try {
          for (const block of blocks) {
            const prop = createDiv("statblock-item-container");
            new Traits_default({
              target: prop,
              props: {
                name: block.name,
                desc: block.desc,
                render: item.markdown
              },
              context
            });
            targets.push(prop);
          }
        } catch (e) {
          return [];
        }
        break;
      }
    }
    if (item.hasRule) {
      const rule = createDiv("statblock-item-container");
      new Rule_default({ target: rule });
      targets.push(rule);
    }
    return targets;
  };
  const buildStatblock = (node) => {
    node.empty();
    const targets = [];
    for (let item of statblock) {
      targets.push(...getElementForStatblockItem(item));
    }
    let columnEl = node.createDiv("column");
    if (columns == 1) {
      targets.forEach((el) => columnEl.appendChild(el));
      return;
    }
    const temp = document.body.createDiv("statblock-detached");
    const heightmap = new Map();
    for (let target of targets) {
      temp.appendChild(target);
      heightmap.set(target, target.clientHeight);
    }
    temp.style.width = columnWidth;
    let split;
    if (monster.forceColumns) {
      split = temp.clientHeight / maxColumns;
    } else if (monster.columns && monster.columns > 0) {
      split = Math.max(temp.clientHeight / monster.columns, temp.clientHeight / columns);
    } else {
      split = Math.min(temp.clientHeight / columns, maxHeight);
    }
    temp.empty();
    temp.detach();
    for (let target of targets) {
      if (node.childElementCount < columns && columnEl.clientHeight + heightmap.get(target) > split) {
        columnEl = node.createDiv("column");
      }
      columnEl.appendChild(target);
    }
  };
  let content;
  let columnWidth = "400px";
  if (monster.columnWidth) {
    if (typeof monster.columnWidth == "number") {
      columnWidth = `${monster.columnWidth}px`;
    }
    if (typeof monster.columnWidth == "string") {
      columnWidth = monster.columnWidth;
    }
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      content = $$value;
      $$invalidate(0, content);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("statblock" in $$props2)
      $$invalidate(2, statblock = $$props2.statblock);
    if ("columns" in $$props2)
      $$invalidate(3, columns = $$props2.columns);
    if ("ready" in $$props2)
      $$invalidate(4, ready = $$props2.ready);
    if ("maxColumns" in $$props2)
      $$invalidate(5, maxColumns = $$props2.maxColumns);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 17) {
      $: {
        if (ready && content) {
          buildStatblock(content);
        }
      }
    }
  };
  $:
    maxHeight = !isNaN(Number(monster.columnHeight)) && monster.columnHeight > 0 ? monster.columnHeight : Infinity;
  return [content, columnWidth, statblock, columns, ready, maxColumns, div0_binding];
}
var Content = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment17, safe_not_equal, {
      statblock: 2,
      columns: 3,
      ready: 4,
      maxColumns: 5
    }, add_css14);
  }
};
var Content_default = Content;

// src/view/Statblock.svelte
function add_css15(target) {
  append_styles(target, "svelte-1r5gl1g", ".container.svelte-1r5gl1g{display:flex;width:100%;margin:0.25rem 0}.statblock.svelte-1r5gl1g{margin:0 auto;position:relative}.icons.svelte-1r5gl1g{position:absolute;right:0}");
}
function create_if_block12(ctx) {
  let div;
  let current_block_type_index;
  let if_block0;
  let div_class_value;
  let t;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_2, create_else_block5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = ctx[2] && create_if_block_16(ctx);
  return {
    c() {
      div = element("div");
      if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(div, "class", div_class_value = "" + (null_to_empty(ctx[9].join(" ")) + " svelte-1r5gl1g"));
      toggle_class(div, "obsidian-statblock-plugin", true);
      toggle_class(div, "statblock", true);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div, null);
      }
      if (ctx2[2]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_16(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      if (detaching)
        detach(t);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
    }
  };
}
function create_else_block5(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Invalid monster.";
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_2(ctx) {
  let bar0;
  let t0;
  let previous_key = ctx[4];
  let t1;
  let bar1;
  let current;
  bar0 = new Bar_default({});
  let key_block = create_key_block2(ctx);
  bar1 = new Bar_default({});
  return {
    c() {
      create_component(bar0.$$.fragment);
      t0 = space();
      key_block.c();
      t1 = space();
      create_component(bar1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bar0, target, anchor);
      insert(target, t0, anchor);
      key_block.m(target, anchor);
      insert(target, t1, anchor);
      mount_component(bar1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 16 && safe_not_equal(previous_key, previous_key = ctx2[4])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block2(ctx2);
        key_block.c();
        transition_in(key_block);
        key_block.m(t1.parentNode, t1);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(bar0.$$.fragment, local);
      transition_in(key_block);
      transition_in(bar1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bar0.$$.fragment, local);
      transition_out(key_block);
      transition_out(bar1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(bar0, detaching);
      if (detaching)
        detach(t0);
      key_block.d(detaching);
      if (detaching)
        detach(t1);
      destroy_component(bar1, detaching);
    }
  };
}
function create_key_block2(ctx) {
  let content;
  let current;
  content = new Content_default({
    props: {
      columns: ctx[4],
      maxColumns: ctx[6],
      statblock: ctx[1],
      ready: ctx[5]
    }
  });
  content.$on("save", ctx[15]);
  content.$on("export", ctx[16]);
  return {
    c() {
      create_component(content.$$.fragment);
    },
    m(target, anchor) {
      mount_component(content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const content_changes = {};
      if (dirty & 16)
        content_changes.columns = ctx2[4];
      if (dirty & 2)
        content_changes.statblock = ctx2[1];
      if (dirty & 32)
        content_changes.ready = ctx2[5];
      content.$set(content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(content, detaching);
    }
  };
}
function create_if_block_16(ctx) {
  let div;
  let iconsEl_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "icons svelte-1r5gl1g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(iconsEl_action = ctx[7].call(null, div)),
          listen(div, "click", ctx[8])
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment18(ctx) {
  let div;
  let current;
  let if_block = ctx[5] && create_if_block12(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "class", "container svelte-1r5gl1g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      ctx[17](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[5]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block12(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      ctx[17](null);
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let monsterColumnWidth;
  let columnWidth;
  const dispatch = createEventDispatcher();
  let { monster } = $$props;
  let { context } = $$props;
  let { plugin } = $$props;
  let { statblock } = $$props;
  let { renderer } = $$props;
  let { layout } = $$props;
  let { icons = true } = $$props;
  let maxColumns = !isNaN(Number(monster.columns)) && Number(monster.columns) > 0 ? Number(monster.columns) : 2;
  let canExport = monster.export ?? plugin.settings.export;
  let canDice = plugin.canUseDiceRoller && (monster.dice ?? plugin.settings.useDice);
  let canRender = monster.render ?? plugin.settings.renderDice;
  setContext("plugin", plugin);
  setContext("context", context);
  setContext("monster", monster);
  setContext("dice", canDice);
  setContext("render", canRender);
  setContext("renderer", renderer);
  const reset = writable(false);
  setContext("reset", reset);
  let container;
  let columns = maxColumns;
  let ready = false;
  const setColumns = () => {
    if (monster.forceColumns) {
      $$invalidate(4, columns = maxColumns);
      observer.disconnect();
      return;
    }
    const width = container.clientWidth;
    $$invalidate(4, columns = Math.min(Math.max(Math.floor(width / columnWidth), 1), maxColumns));
  };
  const onResize = (0, import_obsidian5.debounce)(() => {
    setColumns();
    if (!ready)
      $$invalidate(5, ready = true);
  }, 100, false);
  const observer = new ResizeObserver(onResize);
  onMount(() => {
    setColumns();
    observer.observe(container);
  });
  onDestroy(() => {
    observer.disconnect();
  });
  const iconsEl = (node) => {
    new import_obsidian5.ExtraButtonComponent(node).setIcon("vertical-three-dots");
  };
  const menu = new import_obsidian5.Menu(plugin.app);
  menu.addItem((item) => item.setIcon(SAVE_SYMBOL).setTitle("Save to Bestiary").onClick(() => dispatch("save")));
  if (canExport)
    menu.addItem((item) => item.setIcon(EXPORT_SYMBOL).setTitle("Export as PNG").onClick(() => dispatch("export")));
  if (canDice)
    menu.addItem((item) => item.setIcon("reset").setTitle("Reset Dice").onClick(() => {
      reset.set(true);
      reset.set(false);
    }));
  const showMenu = (evt) => {
    menu.showAtMouseEvent(evt);
  };
  const name = monster?.name?.toLowerCase().replace(/[^A-Za-z0-9\s]/g, "").replace(/\s+/g, "-") ?? "no-name";
  const layoutName = layout.toLowerCase().replace(/[^A-Za-z0-9\s]/g, "").replace(/\s+/g, "-") ?? "no-layout";
  const classes = [name, layoutName].filter((n) => n?.length);
  function save_handler(event) {
    bubble.call(this, $$self, event);
  }
  function export_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(3, container);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("context" in $$props2)
      $$invalidate(10, context = $$props2.context);
    if ("plugin" in $$props2)
      $$invalidate(11, plugin = $$props2.plugin);
    if ("statblock" in $$props2)
      $$invalidate(1, statblock = $$props2.statblock);
    if ("renderer" in $$props2)
      $$invalidate(12, renderer = $$props2.renderer);
    if ("layout" in $$props2)
      $$invalidate(13, layout = $$props2.layout);
    if ("icons" in $$props2)
      $$invalidate(2, icons = $$props2.icons);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(14, monsterColumnWidth = Number(`${monster.columnWidth}`.replace(/\D/g, "")));
    }
    if ($$self.$$.dirty & 16384) {
      $:
        columnWidth = !isNaN(monsterColumnWidth) && monsterColumnWidth > 0 ? monsterColumnWidth : 400;
    }
  };
  return [
    monster,
    statblock,
    icons,
    container,
    columns,
    ready,
    maxColumns,
    iconsEl,
    showMenu,
    classes,
    context,
    plugin,
    renderer,
    layout,
    monsterColumnWidth,
    save_handler,
    export_handler,
    div_binding
  ];
}
var Statblock = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment18, safe_not_equal, {
      monster: 0,
      context: 10,
      plugin: 11,
      statblock: 1,
      renderer: 12,
      layout: 13,
      icons: 2
    }, add_css15);
  }
};
var Statblock_default = Statblock;

// src/view/statblock.ts
var import_fast_copy = __toModule(require_fast_copy());
var StatBlockRenderer = class extends import_obsidian7.MarkdownRenderChild {
  constructor(container, monster, plugin, icons, context, layout = Layout5e) {
    super(container);
    this.monster = monster;
    this.plugin = plugin;
    this.icons = icons;
    this.context = context;
    this.layout = layout;
    this.loaded = false;
    const statblock = new Statblock_default({
      target: this.containerEl,
      props: {
        context: this.context,
        monster: this.monster,
        statblock: this.layout.blocks,
        layout: this.layout.name,
        plugin: this.plugin,
        renderer: this,
        icons: this.icons
      }
    });
    statblock.$on("save", async () => {
      if (!await confirmWithModal(this.plugin.app, "This will overwrite an existing monster in settings. Are you sure?"))
        return;
      this.plugin.saveMonster({
        ...(0, import_fast_copy.default)(this.monster),
        source: "Homebrew",
        layout: this.layout.name
      });
    });
    statblock.$on("export", () => {
      this.plugin.exportAsPng(this.monster.name, this.containerEl.firstElementChild);
    });
  }
};
async function confirmWithModal(app, text2, buttons = {
  cta: "Yes",
  secondary: "No"
}) {
  return new Promise((resolve, reject) => {
    const modal = new ConfirmModal(app, text2, buttons);
    modal.onClose = () => {
      resolve(modal.confirmed);
    };
    modal.open();
  });
}
var ConfirmModal = class extends import_obsidian6.Modal {
  constructor(app, text2, buttons) {
    super(app);
    this.text = text2;
    this.buttons = buttons;
    this.confirmed = false;
  }
  async display() {
    new Promise((resolve) => {
      this.contentEl.empty();
      this.contentEl.addClass("confirm-modal");
      this.contentEl.createEl("p", {
        text: this.text
      });
      const buttonEl = this.contentEl.createDiv("fantasy-calendar-confirm-buttons");
      new import_obsidian6.ButtonComponent(buttonEl).setButtonText(this.buttons.cta).setCta().onClick(() => {
        this.confirmed = true;
        this.close();
      });
      new import_obsidian6.ButtonComponent(buttonEl).setButtonText(this.buttons.secondary).onClick(() => {
        this.close();
      });
    });
  }
  onOpen() {
    this.display();
  }
};

// src/settings/settings.ts
var import_obsidian21 = __toModule(require("obsidian"));

// src/settings/StatblockCreator.svelte
var import_obsidian14 = __toModule(require("obsidian"));

// src/settings/add.ts
var import_obsidian8 = __toModule(require("obsidian"));

// src/layouts/types.ts
var TypeNames = [
  ["group", "Group"],
  ["heading", "Heading"],
  ["image", "Image"],
  ["inline", "Inline Group"],
  ["property", "Property Line"],
  ["saves", "Saves"],
  ["spells", "Spells"],
  ["subheading", "Subheading"],
  ["table", "Table"],
  ["text", "Text"],
  ["traits", "Traits"]
];
var MarkdownTypes = [
  "property",
  "traits",
  "spells",
  "text",
  "saves"
];

// src/settings/add.ts
function blockGenerator(type) {
  switch (type) {
    case "inline":
    case "group": {
      return {
        type,
        id: nanoid(),
        properties: [],
        nested: []
      };
    }
    case "heading": {
      return {
        type: "heading",
        id: nanoid(),
        properties: []
      };
    }
    case "property": {
      return {
        type: "property",
        id: nanoid(),
        properties: []
      };
    }
    case "saves": {
      return {
        type: "saves",
        id: nanoid(),
        properties: []
      };
    }
    case "traits": {
      return {
        type: "traits",
        id: nanoid(),
        properties: []
      };
    }
    case "spells": {
      return {
        type: "spells",
        id: nanoid(),
        properties: []
      };
    }
    case "subheading": {
      return {
        type: "subheading",
        id: nanoid(),
        properties: []
      };
    }
    case "image": {
      return {
        type: "image",
        id: nanoid(),
        properties: []
      };
    }
    case "table": {
      return {
        type: "table",
        id: nanoid(),
        properties: [],
        headers: [],
        calculate: true
      };
    }
    case "text": {
      return {
        type: "text",
        id: nanoid(),
        properties: [],
        text: null
      };
    }
  }
}
var generate = async (plugin, evt) => {
  return new Promise((resolve, reject) => {
    const addMenu = new import_obsidian8.Menu(plugin.app).setNoIcon();
    TypeNames.forEach((type) => {
      addMenu.addItem((item) => {
        item.setTitle(type[1]).onClick(() => {
          const gen = blockGenerator(type[0]);
          resolve(gen);
        });
      });
    });
    addMenu.onunload = () => {
      resolve();
    };
    addMenu.showAtMouseEvent(evt);
  });
};

// node_modules/svelte/easing/index.mjs
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}

// node_modules/svelte/animate/index.mjs
function flip(node, { from, to }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to.width - (to.left + ox);
  const dy = from.top + from.height * oy / to.height - (to.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t, u) => {
      const x = u * dx;
      const y = u * dy;
      const sx = t + u * from.width / to.width;
      const sy = t + u * from.height / to.height;
      return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
    }
  };
}

// node_modules/svelte-dnd-action/dist/index.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = o[Symbol.iterator]();
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var FINALIZE_EVENT_NAME = "finalize";
var CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
var DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
      theOtherDz
    }
  }));
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
    }
  }));
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2
    }
  }));
}
var TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
var SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
var ITEM_ID_KEY = "id";
var activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
var isOnServer = typeof window === "undefined";
var printDebug = function printDebug2() {
};
function getBoundingRectNoTransforms(el) {
  var ta;
  var rect = el.getBoundingClientRect();
  var style = getComputedStyle(el);
  var tx = style.transform;
  if (tx) {
    var sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    var to = style.transformOrigin;
    var x = rect.x - dx - (1 - sx) * parseFloat(to);
    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
    var w = sx ? rect.width / sx : el.offsetWidth;
    var h = sy ? rect.height / sy : el.offsetHeight;
    return {
      x,
      y,
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  var rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  var rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  var rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
var dzToShadowIndexToRect;
function resetIndexesCache() {
  printDebug(function() {
    return "resetting indexes cache";
  });
  dzToShadowIndexToRect = new Map();
}
resetIndexesCache();
function cacheShadowRect(dz) {
  var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
    return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  });
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  var children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return {
      index: 0,
      isProximityBased: true
    };
  }
  var shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (var i = 0; i < children2.length; i++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
      var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return {
            index: shadowElIndex,
            isProximityBased: false
          };
        }
      }
      return {
        index: i,
        isProximityBased: false
      };
    }
  }
  var minDistanceSoFar = Number.MAX_VALUE;
  var indexOfMin = void 0;
  for (var _i = 0; _i < children2.length; _i++) {
    var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = _i;
    }
  }
  return {
    index: indexOfMin,
    isProximityBased: true
  };
}
var SCROLL_ZONE_PX = 25;
function makeScroller() {
  var scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = {
      directionObj: void 0,
      stepPx: 0
    };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(function() {
        return scrollContainer(containerEl);
      });
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    var isAlreadyScrolling = !!scrollingInfo.directionObj;
    var scrollingVertically = false, scrollingHorizontally = false;
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: 1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: -1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: 1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: -1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node) {
  var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (var keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }
  return true;
}
var INTERVAL_MS = 200;
var TOLERANCE_PX = 10;
var _makeScroller = makeScroller();
var scrollIfNeeded = _makeScroller.scrollIfNeeded;
var resetScrolling = _makeScroller.resetScrolling;
var next;
function observe(draggedEl2, dropZones) {
  var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
  var lastDropZoneFound;
  var lastIndexFound;
  var lastIsDraggedInADropZone = false;
  var lastCentrePositionOfDragged;
  var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
    return getDepth(dz2) - getDepth(dz1);
  });
  function andNow() {
    var currentCenterOfDragged = findCenterOfElement(draggedEl2);
    var scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      printDebug(function() {
        return "off document";
      });
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    var isDraggedInADropZone = false;
    var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        var indexObj = findWouldBeIndex(draggedEl2, dz);
        if (indexObj === null) {
          continue;
        }
        var index = indexObj.index;
        isDraggedInADropZone = true;
        if (dz !== lastDropZoneFound) {
          lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
          dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
          lastDropZoneFound = dz;
        } else if (index !== lastIndexFound) {
          dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
          lastIndexFound = index;
        }
        break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  printDebug(function() {
    return "unobserving";
  });
  clearTimeout(next);
  resetScrolling();
  resetIndexesCache();
}
var INTERVAL_MS$1 = 300;
var mousePosition;
function updateMousePosition(e) {
  var c = e.touches ? e.touches[0] : e;
  mousePosition = {
    x: c.clientX,
    y: c.clientY
  };
}
var _makeScroller$1 = makeScroller();
var scrollIfNeeded$1 = _makeScroller$1.scrollIfNeeded;
var resetScrolling$1 = _makeScroller$1.resetScrolling;
var next$1;
function loop2() {
  if (mousePosition) {
    scrollIfNeeded$1(mousePosition, document.documentElement);
  }
  next$1 = window.setTimeout(loop2, INTERVAL_MS$1);
}
function armWindowScroller() {
  printDebug(function() {
    return "arming window scroller";
  });
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop2();
}
function disarmWindowScroller() {
  printDebug(function() {
    return "disarming window scroller";
  });
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next$1);
  resetScrolling$1();
}
var TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  var rect = originalElement.getBoundingClientRect();
  var draggedEl2 = originalElement.cloneNode(true);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  var elTopPx = rect.top;
  var elLeftPx = rect.left;
  draggedEl2.style.top = "".concat(elTopPx, "px");
  draggedEl2.style.left = "".concat(elLeftPx, "px");
  if (positionCenterOnXY) {
    var center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(function() {
      draggedEl2.style.top = "".concat(elTopPx, "px");
      draggedEl2.style.left = "".concat(elLeftPx, "px");
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = "".concat(rect.height, "px");
  draggedEl2.style.width = "".concat(rect.width, "px");
  draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
  window.setTimeout(function() {
    return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
  }, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY, transformDraggedElement) {
  var newRect = copyFromEl.getBoundingClientRect();
  var draggedElRect = draggedEl2.getBoundingClientRect();
  var widthChange = newRect.width - draggedElRect.width;
  var heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    var relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    draggedEl2.style.height = "".concat(newRect.height, "px");
    draggedEl2.style.width = "".concat(newRect.width, "px");
    draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
    draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
  }
  copyStylesFromTo(copyFromEl, draggedEl2);
  transformDraggedElement();
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  var computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(function(s) {
    return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type";
  }).forEach(function(s) {
    return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
  });
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = function() {
    return false;
  };
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideOriginalDragTarget(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.add(c);
    });
  });
}
function styleInactiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = "";
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.contains(c) && dz.classList.remove(c);
    });
  });
}
function preventShrinking(el) {
  var originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  var originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
var DEFAULT_DROP_ZONE_TYPE = "--any--";
var MIN_OBSERVATION_INTERVAL_MS = 100;
var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
var DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var originalDragTarget;
var draggedEl;
var draggedElData;
var draggedElType;
var originDropZone;
var originIndex;
var shadowElData;
var shadowElDropZone;
var dragStartMousePosition;
var currentMousePosition;
var isWorkingOnPreviousDrag = false;
var finalizingPreviousDrag = false;
var unlockOriginDzMinDimensions;
var isDraggedOutsideOfAnyDz = false;
var typeToDropZones = new Map();
var dzToConfig = new Map();
var elToMouseDownListener = new WeakMap();
function registerDropZone(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  typeToDropZones.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones["delete"](type);
  }
}
function watchDraggedElement() {
  printDebug(function() {
    return "watching dragged element";
  });
  armWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator = _createForOfIteratorHelper(dropZones), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var dz = _step.value;
      dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  var observationIntervalMs = Math.max.apply(Math, [MIN_OBSERVATION_INTERVAL_MS].concat(_toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
    return dzToConfig.get(dz2).dropAnimationDurationMs;
  }))));
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  printDebug(function() {
    return "unwatching dragged element";
  });
  disarmWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var dz = _step2.value;
      dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  unobserve();
}
function findShadowPlaceHolderIdx(items) {
  return items.findIndex(function(item) {
    return item[ITEM_ID_KEY] === SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function findShadowElementIdx(items) {
  return items.findIndex(function(item) {
    return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[ITEM_ID_KEY] !== SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function handleDraggedEntered(e) {
  printDebug(function() {
    return ["dragged entered", e.currentTarget, e.detail];
  });
  var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "ignoring dragged entered because drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter(function(item) {
    return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
  });
  printDebug(function() {
    return "dragged entered items ".concat(toString(items));
  });
  if (originDropZone !== e.currentTarget) {
    var originZoneItems = dzToConfig.get(originDropZone).items;
    var newOriginZoneItems = originZoneItems.filter(function(item) {
      return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  } else {
    var shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
    if (shadowPlaceHolderIdx !== -1) {
      printDebug(function() {
        return "removing placeholder item from origin dz";
      });
      items.splice(shadowPlaceHolderIdx, 1);
    }
  }
  var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
  var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
  shadowElDropZone = e.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_ENTERED,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedLeft(e) {
  if (!isWorkingOnPreviousDrag)
    return;
  printDebug(function() {
    return ["dragged left", e.currentTarget, e.detail];
  });
  var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  var shadowElIdx = findShadowElementIdx(items);
  var shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  var _e$detail = e.detail, type = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
    printDebug(function() {
      return "dragged left all, putting shadow element back in the origin dz";
    });
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    var originZoneItems = dzToConfig.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e) {
  printDebug(function() {
    return ["dragged is over index", e.currentTarget, e.detail];
  });
  var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  var index = e.detail.indexObj.index;
  var shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_OVER_INDEX,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleMouseMove(e) {
  e.preventDefault();
  var c = e.touches ? e.touches[0] : e;
  currentMousePosition = {
    x: c.clientX,
    y: c.clientY
  };
  draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
}
function handleDrop() {
  printDebug(function() {
    return "dropped";
  });
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop);
  window.removeEventListener("touchend", handleDrop);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    printDebug(function() {
      return "element was dropped right after it left origin but before entering somewhere else";
    });
    shadowElDropZone = originDropZone;
  }
  printDebug(function() {
    return ["dropped in dz", shadowElDropZone];
  });
  var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type = _dzToConfig$get4.type;
  styleInactiveDropZones(typeToDropZones.get(type), function(dz) {
    return dzToConfig.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig.get(dz).dropTargetClasses;
  });
  var shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map(function(item) {
    return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
  });
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback) {
  var shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  var newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
  var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
  window.setTimeout(callback, dropAnimationDurationMs);
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    transformDraggedElement: function transformDraggedElement() {
    },
    centreDraggedOnCursor: false
  };
  printDebug(function() {
    return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
      node
    }];
  });
  var elToIdx = new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleFalseAlarm, {
      passive: false
    });
    window.addEventListener("touchend", handleFalseAlarm, {
      passive: false
    });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e) {
    if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
      printDebug(function() {
        return "won't initiate drag on a nested input element";
      });
      return;
    }
    if (e.button) {
      printDebug(function() {
        return "ignoring none left click button: ".concat(e.button);
      });
      return;
    }
    if (isWorkingOnPreviousDrag) {
      printDebug(function() {
        return "cannot start a new drag before finalizing previous one";
      });
      return;
    }
    e.stopPropagation();
    var c = e.touches ? e.touches[0] : e;
    dragStartMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    currentMousePosition = _objectSpread2({}, dragStartMousePosition);
    originalDragTarget = e.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    printDebug(function() {
      return ["drag start config: ".concat(toString(config)), originalDragTarget];
    });
    isWorkingOnPreviousDrag = true;
    var currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    var rootNode = originDropZone.getRootNode();
    var originDropZoneRoot = rootNode.body || rootNode;
    var items = config.items, type = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
    draggedElData = _objectSpread2({}, items[currentIdx]);
    draggedElType = type;
    shadowElData = _objectSpread2(_objectSpread2({}, draggedElData), {}, _defineProperty({}, SHADOW_ITEM_MARKER_PROPERTY_NAME, true));
    var placeHolderElData = _objectSpread2(_objectSpread2({}, shadowElData), {}, _defineProperty({}, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID));
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideOriginalDragTarget(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
      return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
    }), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    items.splice(currentIdx, 1, placeHolderElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    window.addEventListener("mousemove", handleMouseMove, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMove, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleDrop, {
      passive: false
    });
    window.addEventListener("touchend", handleDrop, {
      passive: false
    });
  }
  function configure(_ref) {
    var _ref$items = _ref.items, items = _ref$items === void 0 ? void 0 : _ref$items, _ref$flipDurationMs = _ref.flipDurationMs, dropAnimationDurationMs = _ref$flipDurationMs === void 0 ? 0 : _ref$flipDurationMs, _ref$type = _ref.type, newType = _ref$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref$type, _ref$dragDisabled = _ref.dragDisabled, dragDisabled = _ref$dragDisabled === void 0 ? false : _ref$dragDisabled, _ref$morphDisabled = _ref.morphDisabled, morphDisabled = _ref$morphDisabled === void 0 ? false : _ref$morphDisabled, _ref$dropFromOthersDi = _ref.dropFromOthersDisabled, dropFromOthersDisabled = _ref$dropFromOthersDi === void 0 ? false : _ref$dropFromOthersDi, _ref$dropTargetStyle = _ref.dropTargetStyle, dropTargetStyle = _ref$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref$dropTargetStyle, _ref$dropTargetClasse = _ref.dropTargetClasses, dropTargetClasses = _ref$dropTargetClasse === void 0 ? [] : _ref$dropTargetClasse, _ref$transformDragged = _ref.transformDraggedElement, transformDraggedElement = _ref$transformDragged === void 0 ? function() {
    } : _ref$transformDragged, _ref$centreDraggedOnC = _ref.centreDraggedOnCursor, centreDraggedOnCursor = _ref$centreDraggedOnC === void 0 ? false : _ref$centreDraggedOnC;
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones([node], function() {
        return config.dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
      styleActiveDropZones([node], function() {
        return dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
    function getConfigProp(dz, propName) {
      return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
    }
    if (isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      } else {
        styleActiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig.set(node, config);
    var shadowElIdx = findShadowElementIdx(config.items);
    var _loop = function _loop2(idx2) {
      var draggableEl = node.children[idx2];
      styleDraggable(draggableEl, dragDisabled);
      if (idx2 === shadowElIdx) {
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y, function() {
            return config.transformDraggedElement(draggedEl, draggedElData, idx2);
          });
        }
        decorateShadowEl(draggableEl);
        return "continue";
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx2);
    };
    for (var idx = 0; idx < node.children.length; idx++) {
      var _ret = _loop(idx);
      if (_ret === "continue")
        continue;
    }
  }
  configure(options);
  return {
    update: function update2(newOptions) {
      printDebug(function() {
        return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "pointer dndzone will destroy";
      });
      unregisterDropZone(node, config.type);
      dzToConfig["delete"](node);
    }
  };
}
var _ID_TO_INSTRUCTION;
var INSTRUCTION_IDs = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
var ALERT_DIV_ID = "dnd-action-aria-alert";
var alertsDiv;
function initAriaOnBrowser() {
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), id = _ref2[0], txt = _ref2[1];
    return document.body.prepend(instructionToHiddenDiv(id, txt));
  });
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return _objectSpread2({}, INSTRUCTION_IDs);
}
function instructionToHiddenDiv(id, txt) {
  var div = document.createElement("div");
  div.id = id;
  div.innerHTML = "<p>".concat(txt, "</p>");
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  alertsDiv.innerHTML = "";
  var alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
var DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var isDragging = false;
var draggedItemType;
var focusedDz;
var focusedDzLabel = "";
var focusedItem;
var focusedItemId;
var focusedItemLabel = "";
var allDragTargets = new WeakSet();
var elToKeyDownListeners = new WeakMap();
var elToFocusListeners = new WeakMap();
var dzToHandles = new Map();
var dzToConfig$1 = new Map();
var typeToDropZones$1 = new Map();
var INSTRUCTION_IDs$1 = initAria();
function registerDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "adding global keydown and click handlers";
    });
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "unregistering drop-zone";
  });
  if (focusedDz === dropZoneEl) {
    handleDrop$1();
  }
  typeToDropZones$1.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1["delete"](type);
  }
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "removing global keydown and click handlers";
    });
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
  }
}
function globalKeyDownHandler(e) {
  if (!isDragging)
    return;
  switch (e.key) {
    case "Escape": {
      handleDrop$1();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    printDebug(function() {
      return "clicked outside of any draggable";
    });
    handleDrop$1();
  }
}
function handleZoneFocus(e) {
  printDebug(function() {
    return "zone focus";
  });
  if (!isDragging)
    return;
  var newlyFocusedDz = e.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
  var originItem = originItems.find(function(item) {
    return item[ITEM_ID_KEY] === focusedItemId;
  });
  var originIdx = originItems.indexOf(originItem);
  var itemToMove = originItems.splice(originIdx, 1)[0];
  var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
    }
  }
  var dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, {
    trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
    trigger: TRIGGERS.DROPPED_INTO_ZONE,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(function(_ref, dz) {
    var update2 = _ref.update;
    return update2(dzToConfig$1.get(dz));
  });
}
function handleDrop$1() {
  var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  printDebug(function() {
    return "drop";
  });
  if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
    return dzToConfig$1.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig$1.get(dz).dropTargetClasses;
  });
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap(arr, i, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
  }
  function handleKeyDown(e) {
    printDebug(function() {
      return ["handling key down", e.key];
    });
    switch (e.key) {
      case "Enter":
      case " ": {
        if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        if (isDragging) {
          handleDrop$1();
        } else {
          handleDragStart(e);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
        var children2 = Array.from(node.children);
        var idx = children2.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow down", idx];
        });
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
          }
          swap(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
        var _children = Array.from(node.children);
        var _idx = _children.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow up", _idx];
        });
        if (_idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
          }
          swap(_items, _idx, _idx - 1);
          dispatchFinalizeEvent(node, _items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
    }
  }
  function handleDragStart(e) {
    printDebug(function() {
      return "drag start";
    });
    setCurrentFocusedItem(e.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
      return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
    });
    styleActiveDropZones(dropTargets, function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    if (!config.autoAriaDisabled) {
      var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
      if (dropTargets.length > 1) {
        msg += ", or tab to another list in order to move the item into it";
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    triggerAllDzsUpdate();
  }
  function handleClick(e) {
    if (!isDragging)
      return;
    if (e.currentTarget === focusedItem)
      return;
    e.stopPropagation();
    handleDrop$1(false);
    handleDragStart(e);
  }
  function setCurrentFocusedItem(draggableEl) {
    var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
    var children2 = Array.from(node.children);
    var focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
    }
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    registerDropZone$1(node, newType);
    dzToConfig$1.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    var _loop = function _loop2(i2) {
      var draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        printDebug(function() {
          return ["focusing on", {
            i: i2,
            focusedItemId
          }];
        });
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    };
    for (var i = 0; i < node.children.length; i++) {
      _loop(i);
    }
  }
  configure(options);
  var handles = {
    update: function update2(newOptions) {
      printDebug(function() {
        return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "keyboard dndzone will destroy";
      });
      unregisterDropZone$1(node, config.type);
      dzToConfig$1["delete"](node);
      dzToHandles["delete"](node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
function dndzone$2(node, options) {
  validateOptions(options);
  var pointerZone = dndzone(node, options);
  var keyboardZone = dndzone$1(node, options);
  return {
    update: function update2(newOptions) {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: function destroy() {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function validateOptions(options) {
  var items = options.items, flipDurationMs3 = options.flipDurationMs, type = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"]);
  if (Object.keys(rest).length > 0) {
    console.warn("dndzone will ignore unknown options", rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  var itemWithMissingId = items.find(function(item) {
    return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
  });
  if (itemWithMissingId) {
    throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
  }
}
function isInt(value) {
  return !isNaN(value) && function(x) {
    return (x | 0) === x;
  }(parseFloat(value));
}

// src/settings/ui/PropertyBlock.svelte
var import_obsidian9 = __toModule(require("obsidian"));
function add_css16(target) {
  append_styles(target, "svelte-r3p86y", ".property-block-container.svelte-r3p86y{display:flex;justify-content:space-between;align-items:center}.info.svelte-r3p86y{display:flex;flex-flow:column}.context.svelte-r3p86y{display:flex;align-items:center;gap:0.25rem;color:var(--text-muted)}.context-item.svelte-r3p86y{display:flex;align-items:center}");
}
function create_if_block_4(ctx) {
  let strong;
  let t0;
  let t1_value = ctx[0].headers.join(" | ") + "";
  let t1;
  let t2;
  return {
    c() {
      strong = element("strong");
      t0 = text("(");
      t1 = text(t1_value);
      t2 = text(")");
    },
    m(target, anchor) {
      insert(target, strong, anchor);
      append(strong, t0);
      append(strong, t1);
      append(strong, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t1_value !== (t1_value = ctx2[0].headers.join(" | ") + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching)
        detach(strong);
    }
  };
}
function create_if_block_3(ctx) {
  let div;
  let heading_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item heading svelte-r3p86y");
      attr(div, "aria-label", "Has Heading");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(heading_action = ctx[4].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_22(ctx) {
  let div;
  let conditioned_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item conditioned svelte-r3p86y");
      attr(div, "aria-label", "Conditioned");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(conditioned_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_17(ctx) {
  let div;
  let code_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item callback svelte-r3p86y");
      attr(div, "aria-label", "Has Callback");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(code_action = ctx[5].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block13(ctx) {
  let div;
  let dice_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item dice svelte-r3p86y");
      attr(div, "aria-label", "Will Parse for Dice Rolls");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(dice_action = ctx[3].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment19(ctx) {
  let div2;
  let div1;
  let div0;
  let span;
  let t0_value = ctx[1](ctx[0].type) + "";
  let t0;
  let t1;
  let t2;
  let small0;
  let em;
  let t3_value = ctx[0].properties.join(", ") + "";
  let t3;
  let t4;
  let small1;
  let t5;
  let t6;
  let t7;
  let if_block0 = ctx[0].type == "table" && ctx[0].headers?.length && create_if_block_4(ctx);
  let if_block1 = "heading" in ctx[0] && create_if_block_3(ctx);
  let if_block2 = ctx[0].conditioned && create_if_block_22(ctx);
  let if_block3 = "callback" in ctx[0] && create_if_block_17(ctx);
  let if_block4 = "dice" in ctx[0] && create_if_block13(ctx);
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      small0 = element("small");
      em = element("em");
      t3 = text(t3_value);
      t4 = space();
      small1 = element("small");
      if (if_block1)
        if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      t6 = space();
      if (if_block3)
        if_block3.c();
      t7 = space();
      if (if_block4)
        if_block4.c();
      attr(div1, "class", "info svelte-r3p86y");
      attr(small1, "class", "context svelte-r3p86y");
      attr(div2, "class", "property-block-container svelte-r3p86y");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, div0);
      append(div0, span);
      append(span, t0);
      append(div0, t1);
      if (if_block0)
        if_block0.m(div0, null);
      append(div1, t2);
      append(div1, small0);
      append(small0, em);
      append(em, t3);
      append(div2, t4);
      append(div2, small1);
      if (if_block1)
        if_block1.m(small1, null);
      append(small1, t5);
      if (if_block2)
        if_block2.m(small1, null);
      append(small1, t6);
      if (if_block3)
        if_block3.m(small1, null);
      append(small1, t7);
      if (if_block4)
        if_block4.m(small1, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[1](ctx2[0].type) + ""))
        set_data(t0, t0_value);
      if (ctx2[0].type == "table" && ctx2[0].headers?.length) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_4(ctx2);
          if_block0.c();
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & 1 && t3_value !== (t3_value = ctx2[0].properties.join(", ") + ""))
        set_data(t3, t3_value);
      if ("heading" in ctx2[0]) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_3(ctx2);
          if_block1.c();
          if_block1.m(small1, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (ctx2[0].conditioned) {
        if (if_block2) {
        } else {
          if_block2 = create_if_block_22(ctx2);
          if_block2.c();
          if_block2.m(small1, t6);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if ("callback" in ctx2[0]) {
        if (if_block3) {
        } else {
          if_block3 = create_if_block_17(ctx2);
          if_block3.c();
          if_block3.m(small1, t7);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if ("dice" in ctx2[0]) {
        if (if_block4) {
        } else {
          if_block4 = create_if_block13(ctx2);
          if_block4.c();
          if_block4.m(small1, null);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div2);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (if_block4)
        if_block4.d();
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let { block } = $$props;
  const transform = (text2) => {
    if ("display" in block) {
      return `${block.display} (${text2[0].toUpperCase() + text2.slice(1).toLowerCase()})`;
    }
    return text2[0].toUpperCase() + text2.slice(1).toLowerCase();
  };
  const conditioned = (node) => {
    (0, import_obsidian9.setIcon)(node, "statblock-conditioned");
  };
  const dice = (node) => {
    (0, import_obsidian9.setIcon)(node, "dice-roller-dice");
  };
  const heading = (node) => {
    (0, import_obsidian9.setIcon)(node, "heading-glyph");
  };
  const code = (node) => {
    (0, import_obsidian9.setIcon)(node, "code-glyph");
  };
  $$self.$$set = ($$props2) => {
    if ("block" in $$props2)
      $$invalidate(0, block = $$props2.block);
  };
  return [block, transform, conditioned, dice, heading, code];
}
var PropertyBlock = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment19, safe_not_equal, { block: 0 }, add_css16);
  }
};
var PropertyBlock_default = PropertyBlock;

// src/settings/ui/Block.svelte
var import_obsidian12 = __toModule(require("obsidian"));

// src/settings/ui/block.ts
var import_fast_copy2 = __toModule(require_fast_copy());
var import_obsidian11 = __toModule(require("obsidian"));

// src/settings/ui/TableHeaders.svelte
var import_obsidian10 = __toModule(require("obsidian"));
function add_css17(target) {
  append_styles(target, "svelte-1blh0v3", ".creator-zone.svelte-1blh0v3{display:flex;justify-content:space-evenly;gap:1rem;flex-flow:row wrap}.header-container.svelte-1blh0v3{display:flex;align-items:center}");
}
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_each_block6(key_1, ctx) {
  let div1;
  let span;
  let t0_value = ctx[12].name + "";
  let t0;
  let t1;
  let div0;
  let del_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  function click_handler() {
    return ctx[8](ctx[12]);
  }
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      attr(span, "class", "table-header");
      attr(div1, "class", "header-container svelte-1blh0v3");
      this.first = div1;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      append(div1, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(del_action = ctx[5].call(null, div0)),
          listen(div0, "click", click_handler)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 1 && t0_value !== (t0_value = ctx[12].name + ""))
        set_data(t0, t0_value);
    },
    r() {
      rect = div1.getBoundingClientRect();
    },
    f() {
      fix_position(div1);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div1, rect, flip, { duration: flipDurationMs });
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment20(ctx) {
  let div;
  let section;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value = ctx[0].filter(ctx[7]);
  const get_key = (ctx2) => ctx2[12].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context6(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block6(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      section = element("section");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(section, "class", "creator-zone svelte-1blh0v3");
      attr(div, "class", "table-header-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, section);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(section, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, section, {
            items: ctx[0],
            flipDurationMs,
            dragDisabled: ctx[1],
            type: "table_headers"
          })),
          listen(section, "consider", ctx[2]),
          listen(section, "finalize", ctx[3])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 17) {
        each_value = ctx2[0].filter(ctx2[7]);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, section, fix_and_destroy_block, create_each_block6, null, get_each_context6);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 3)
        dndzone_action.update.call(null, {
          items: ctx2[0],
          flipDurationMs,
          dragDisabled: ctx2[1],
          type: "table_headers"
        });
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
var flipDurationMs = 300;
function instance18($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { headers } = $$props;
  let items = headers.map((h) => {
    return { name: h, id: nanoid() };
  });
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(0, items = [...newItems]);
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(0, items = [...newItems]);
    dispatch("sorted", items);
  }
  const grip = (node) => {
    (0, import_obsidian10.setIcon)(node, "dropzone-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(1, dragDisabled = false);
  }
  const trash = (evt) => {
    $$invalidate(0, items = items.filter((b) => b.id != evt.id));
    dispatch("sorted", items);
  };
  const del = (node) => {
    new import_obsidian10.ExtraButtonComponent(node).setIcon("cross-in-box");
  };
  const func = (x) => x.id !== SHADOW_PLACEHOLDER_ITEM_ID;
  const click_handler = (header) => trash(header);
  $$self.$$set = ($$props2) => {
    if ("headers" in $$props2)
      $$invalidate(6, headers = $$props2.headers);
  };
  return [
    items,
    dragDisabled,
    handleConsider,
    handleFinalize,
    trash,
    del,
    headers,
    func,
    click_handler
  ];
}
var TableHeaders = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment20, safe_not_equal, { headers: 6 }, add_css17);
  }
};
var TableHeaders_default = TableHeaders;

// src/settings/ui/block.ts
var BlockModal = class extends import_obsidian11.Modal {
  constructor(plugin, block) {
    super(plugin.app);
    this.plugin = plugin;
    this.advanced = this.plugin.settings.showAdvanced;
    if (block)
      this.block = (0, import_fast_copy2.default)(block);
    this.containerEl.addClass("statblock-edit-block");
  }
  get group() {
    return ["group", "inline"].contains(this.block.type);
  }
  onOpen() {
    this.titleEl.setText("Edit Block");
    this.display();
  }
  buildProperties(el) {
    el.empty();
    if (!this.group) {
      if (this.block.type == "subheading") {
        const container = el.createDiv("statblock-additional-container");
        let tempProp = "";
        new import_obsidian11.Setting(container).setHeading().setName("Link Monster Properties").addText((t) => t.setPlaceholder("property").setValue(tempProp).onChange((v) => tempProp = v)).addExtraButton((b) => b.setIcon("plus-with-circle").onClick(() => {
          if (!tempProp || !tempProp.length) {
            new import_obsidian11.Notice("A valid property must be supplied.");
            return;
          }
          this.block.properties.push(tempProp);
          this.buildProperties(el);
        }));
        const additional = container.createDiv("additional");
        for (const property of this.block.properties) {
          new import_obsidian11.Setting(additional).setName(property).addExtraButton((b) => b.setIcon("trash").onClick(() => {
            this.block.properties = this.block.properties.filter((p) => p != property);
            this.buildProperties(el);
          }));
        }
      } else {
        new import_obsidian11.Setting(el).setName("Link Monster Property").addText((t) => t.setValue(this.block.properties[0]).onChange((v) => {
          this.block.properties[0] = v;
        }));
      }
      if (this.block.type == "property" || this.block.type == "saves") {
        new import_obsidian11.Setting(this.contentEl).setName("Display Text").setDesc("This text will be used for the property name.").addText((t) => {
          t.setValue(this.block.display).onChange((v) => this.block.display = v);
        });
      }
      if (this.block.type == "traits" || this.block.type == "text") {
        new import_obsidian11.Setting(this.contentEl).setName("Section Heading").setDesc("This text will be used for the section heading. Can be left blank.").addText((t) => {
          t.setValue(this.block.heading).onChange((v) => this.block.heading = v);
        });
      }
      if (this.block.type == "table") {
        const container = el.createDiv("statblock-additional-container");
        let tempProp = "";
        new import_obsidian11.Setting(container).setHeading().setName("Table Headers").addText((t) => t.setPlaceholder("header").setValue(tempProp).onChange((v) => tempProp = v)).addExtraButton((b) => b.setIcon("plus-with-circle").onClick(() => {
          if (!tempProp || !tempProp.length) {
            new import_obsidian11.Notice("A valid property must be supplied.");
            return;
          }
          this.block.headers.push(tempProp);
          this.buildProperties(el);
        }));
        const additional = container.createDiv("additional");
        new TableHeaders_default({
          target: additional,
          props: {
            headers: this.block.headers
          }
        }).$on("sorted", (e) => {
          this.block.headers = [
            ...e.detail?.map((v) => v.name) ?? []
          ];
        });
        new import_obsidian11.Setting(el).setName("Calculate Modifiers").setDesc("The block will not attempt to calculate modifiers for table values.").addToggle((t) => {
          t.setValue(this.block.calculate).onChange((v) => {
            this.block.calculate = v;
          });
        });
      }
      if (!this.advanced)
        return;
      if (MarkdownTypes.includes(this.block.type)) {
        new import_obsidian11.Setting(el).setName("Render as Markdown").setDesc(createFragment((e) => {
          e.createSpan({
            text: "The block will attempt to render as markdown."
          });
          e.createEl("br");
          e.createEl("strong", {
            text: "Cannot be used with the Dice option."
          });
        })).addToggle((t) => {
          t.setValue(this.block.markdown).onChange((v) => {
            this.block.markdown = v;
            if (v) {
              this.block.dice = false;
              this.display();
            }
          });
        });
      }
      if (this.block.type == "text") {
        new import_obsidian11.Setting(el).setHeading().setName("Text to Show").setDesc(createFragment((e) => {
          e.createSpan({ text: "The block will " });
          e.createEl("strong", { text: "always" });
          e.createSpan({
            text: " display the text entered here."
          });
        }));
        new import_obsidian11.TextAreaComponent(el).setValue(this.block.text).onChange((v) => {
          this.block.text = v;
        });
      }
      if (this.block.type == "property") {
        new import_obsidian11.Setting(el).setHeading().setName("Callback").setDesc(createFragment((e) => {
          e.createSpan({
            text: "The block will run the callback and use the returned string as the property."
          });
          e.createEl("br");
          e.createSpan({
            text: "The callback will receive the "
          });
          e.createEl("code", { text: "monster" });
          e.createSpan({ text: " parameter." });
        }));
        new import_obsidian11.TextAreaComponent(el).setValue(this.block.callback).onChange((v) => {
          this.block.callback = v;
        });
      }
    }
  }
  buildConditions(el) {
    el.empty();
    new import_obsidian11.Setting(el).setName("Conditional").setDesc("The block will not be added if the associated properties are not present.").addToggle((t) => {
      t.setValue(this.block.conditioned).onChange((v) => {
        this.block.conditioned = v;
        this.buildConditions(el);
      });
    });
    if (!this.block.conditioned && !this.group) {
      new import_obsidian11.Setting(el).setName("Fallback").setDesc("If not present, this text will be displayed.").addText((t) => {
        if (!this.block.fallback) {
          this.block.fallback = "-";
        }
        t.setValue(this.block.fallback).onChange((v) => {
          this.block.fallback = v;
        });
      });
    }
    new import_obsidian11.Setting(el).setName("Has Rule").setDesc("If present, the block will have a horizontal rule placed after it.").addToggle((t) => {
      t.setValue(this.block.hasRule).onChange((v) => this.block.hasRule = v);
    });
  }
  buildDice(el) {
    el.empty();
    if (!this.group && this.plugin.canUseDiceRoller) {
      new import_obsidian11.Setting(el).setName("Parse for Dice").setDesc("The plugin will attempt to add dice rollers as specified.").addToggle((t) => t.setValue(this.block.dice).onChange((v) => {
        this.block.dice = v;
        this.buildDice(el);
      }));
      if (this.block.dice) {
        new import_obsidian11.Setting(el.createDiv()).setName("Link Dice to Property").setDesc("The dice roller will parse this property instead of the original.").addText((t) => {
          t.setValue(this.block.diceProperty).onChange((v) => {
            this.block.diceProperty = v;
          });
        });
      }
    }
    if (!this.advanced)
      return;
    new import_obsidian11.Setting(el).setHeading().setName("Dice Callback").setDesc(createFragment((e) => {
      e.createSpan({
        text: "The block will run the callback and use the returned values for the dice strings."
      });
      e.createEl("br");
      e.createSpan({
        text: "The callback will receive the "
      });
      e.createEl("code", { text: "monster" });
      e.createSpan({ text: " and " });
      e.createEl("code", { text: "property" });
      e.createSpan({ text: "parameters." });
    }));
    new import_obsidian11.TextAreaComponent(el).setValue(this.block.diceCallback).onChange((v) => {
      this.block.diceCallback = v;
    });
  }
  async display() {
    this.contentEl.empty();
    new import_obsidian11.Setting(this.contentEl).setName("Show Advanced Options").addToggle((t) => {
      t.setValue(this.advanced ?? this.plugin.settings.showAdvanced).onChange((v) => {
        this.advanced = v;
        this.display();
      });
    });
    this.buildProperties(this.contentEl.createDiv());
    this.buildConditions(this.contentEl.createDiv());
    this.buildDice(this.contentEl.createDiv());
    this.buildButtons(this.contentEl.createDiv());
  }
  buildButtons(el) {
    el.empty();
    new import_obsidian11.Setting(el).addButton((b) => b.setCta().setIcon("checkmark").setTooltip("Save").onClick(() => {
      this.saved = true;
      this.close();
    })).addExtraButton((b) => b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.close();
    }));
  }
  buildProperty(el) {
  }
};

// src/settings/ui/Block.svelte
function add_css18(target) {
  append_styles(target, "svelte-e4nza4", ".statblock-creator-container.svelte-e4nza4.svelte-e4nza4{display:flex;justify-content:space-between;width:100%;height:100%}body:not(.is-mobile) .statblock-creator-container.svelte-e4nza4:not(:hover)>.icons.svelte-e4nza4{visibility:hidden}.statblock-creator-block.svelte-e4nza4.svelte-e4nza4{width:100%}.icons.svelte-e4nza4.svelte-e4nza4{display:flex;justify-content:flex-end}.statblock-creator-container.svelte-e4nza4 .icons.svelte-e4nza4{align-items:center}.icon.svelte-e4nza4:not(:first-child) .clickable-icon{margin-left:0}");
}
function create_key_block3(ctx) {
  let div;
  let propertyblock;
  let current;
  propertyblock = new PropertyBlock_default({ props: { block: ctx[0] } });
  return {
    c() {
      div = element("div");
      create_component(propertyblock.$$.fragment);
      attr(div, "class", "statblock-creator-block svelte-e4nza4");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(propertyblock, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const propertyblock_changes = {};
      if (dirty & 1)
        propertyblock_changes.block = ctx2[0];
      propertyblock.$set(propertyblock_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(propertyblock.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(propertyblock.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(propertyblock);
    }
  };
}
function create_fragment21(ctx) {
  let div3;
  let previous_key = ctx[0];
  let t0;
  let div2;
  let div0;
  let edit_action;
  let t1;
  let div1;
  let trash_action;
  let current;
  let mounted;
  let dispose;
  let key_block = create_key_block3(ctx);
  return {
    c() {
      div3 = element("div");
      key_block.c();
      t0 = space();
      div2 = element("div");
      div0 = element("div");
      t1 = space();
      div1 = element("div");
      attr(div0, "class", "icon svelte-e4nza4");
      attr(div1, "class", "icon svelte-e4nza4");
      attr(div2, "class", "icons svelte-e4nza4");
      attr(div3, "class", "statblock-creator-container svelte-e4nza4");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      key_block.m(div3, null);
      append(div3, t0);
      append(div3, div2);
      append(div2, div0);
      append(div2, t1);
      append(div2, div1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[1].call(null, div0)),
          action_destroyer(trash_action = ctx[2].call(null, div1))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block3(ctx2);
        key_block.c();
        transition_in(key_block);
        key_block.m(div3, t0);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      key_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  let { block } = $$props;
  let { plugin } = $$props;
  const dispatch = createEventDispatcher();
  const editBlock = () => {
    const modal = new BlockModal(plugin, block);
    modal.onClose = () => {
      if (!modal.saved)
        return;
      dispatch("edited", modal.block);
    };
    modal.open();
  };
  const edit = (node) => {
    new import_obsidian12.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit Block").onClick(() => {
      editBlock();
    });
  };
  const trash = (node) => {
    new import_obsidian12.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete Block").onClick(() => dispatch("trash", block));
  };
  $$self.$$set = ($$props2) => {
    if ("block" in $$props2)
      $$invalidate(0, block = $$props2.block);
    if ("plugin" in $$props2)
      $$invalidate(3, plugin = $$props2.plugin);
  };
  return [block, edit, trash, plugin];
}
var Block = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment21, safe_not_equal, { block: 0, plugin: 3 }, add_css18);
  }
};
var Block_default = Block;

// src/settings/ui/Creator.svelte
var import_obsidian13 = __toModule(require("obsidian"));
function add_css19(target) {
  append_styles(target, "svelte-1qfwxfu", "body:not(.is-mobile) .creator-zone.svelte-1qfwxfu:not(.nested){max-width:75vw;max-height:65vh;overflow:auto}.inline.svelte-1qfwxfu{display:flex;justify-content:space-between}.block.svelte-1qfwxfu{display:flex;justify-content:flex-start;align-items:center}.item.svelte-1qfwxfu{display:flex;flex-flow:column;width:100%;padding:2px;margin:2px}.group.svelte-1qfwxfu{display:grid;grid-template-columns:1fr;border:2px dashed grey;min-height:2rem}.dropdown-icon.svelte-1qfwxfu{align-self:flex-start}.inline.svelte-1qfwxfu{display:inline-flex;width:100%;height:100%}.icon.svelte-1qfwxfu{display:flex}");
}
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i];
  child_ctx[21] = list;
  child_ctx[22] = i;
  return child_ctx;
}
function create_else_block6(ctx) {
  let div;
  let creator;
  let updating_blocks;
  let updating_plugin;
  let t;
  let previous_key = ctx[20];
  let key_block_anchor;
  let current;
  function creator_blocks_binding(value) {
    ctx[15](value, ctx[20]);
  }
  function creator_plugin_binding(value) {
    ctx[16](value);
  }
  let creator_props = {
    inline: ctx[20].type == "inline"
  };
  if (ctx[20].nested !== void 0) {
    creator_props.blocks = ctx[20].nested;
  }
  if (ctx[1] !== void 0) {
    creator_props.plugin = ctx[1];
  }
  creator = new Creator({ props: creator_props });
  binding_callbacks.push(() => bind(creator, "blocks", creator_blocks_binding));
  binding_callbacks.push(() => bind(creator, "plugin", creator_plugin_binding));
  let key_block = create_key_block4(ctx);
  return {
    c() {
      div = element("div");
      create_component(creator.$$.fragment);
      t = space();
      key_block.c();
      key_block_anchor = empty();
      attr(div, "class", "item svelte-1qfwxfu");
      toggle_class(div, "group", ctx[20].type == "group" || ctx[20].type == "inline");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(creator, div, null);
      insert(target, t, anchor);
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const creator_changes = {};
      if (dirty & 9)
        creator_changes.inline = ctx[20].type == "inline";
      if (!updating_blocks && dirty & 9) {
        updating_blocks = true;
        creator_changes.blocks = ctx[20].nested;
        add_flush_callback(() => updating_blocks = false);
      }
      if (!updating_plugin && dirty & 2) {
        updating_plugin = true;
        creator_changes.plugin = ctx[1];
        add_flush_callback(() => updating_plugin = false);
      }
      creator.$set(creator_changes);
      if (dirty & 9) {
        toggle_class(div, "group", ctx[20].type == "group" || ctx[20].type == "inline");
      }
      if (dirty & 9 && safe_not_equal(previous_key, previous_key = ctx[20])) {
        key_block.d(1);
        key_block = create_key_block4(ctx);
        key_block.c();
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(creator.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creator.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(creator);
      if (detaching)
        detach(t);
      if (detaching)
        detach(key_block_anchor);
      key_block.d(detaching);
    }
  };
}
function create_if_block_18(ctx) {
  let div;
  let block;
  let current;
  block = new Block_default({
    props: {
      plugin: ctx[1],
      block: ctx[20]
    }
  });
  block.$on("trash", ctx[13]);
  block.$on("edited", ctx[14]);
  return {
    c() {
      div = element("div");
      create_component(block.$$.fragment);
      attr(div, "class", "item svelte-1qfwxfu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(block, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const block_changes = {};
      if (dirty & 2)
        block_changes.plugin = ctx2[1];
      if (dirty & 9)
        block_changes.block = ctx2[20];
      block.$set(block_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(block.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(block.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(block);
    }
  };
}
function create_key_block4(ctx) {
  let div;
  let dropdown_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "dropdown-icon svelte-1qfwxfu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(dropdown_action = ctx[11].call(null, div, ctx[20]));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dropdown_action && is_function(dropdown_action.update) && dirty & 9)
        dropdown_action.update.call(null, ctx[20]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block14(ctx) {
  let div;
  let rule;
  let current;
  rule = new Rule_default({});
  return {
    c() {
      div = element("div");
      create_component(rule.$$.fragment);
      attr(div, "aria-label", "Block Has Rule");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(rule, div, null);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(rule.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(rule.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(rule);
    }
  };
}
function create_each_block7(key_1, ctx) {
  let div3;
  let div2;
  let div1;
  let div0;
  let div0_style_value;
  let grip_action;
  let t0;
  let current_block_type_index;
  let if_block0;
  let t1;
  let t2;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_18, create_else_block6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[20].type != "group" && ctx2[20].type != "inline")
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = ctx[20].hasRule && create_if_block14(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      attr(div0, "class", "icon svelte-1qfwxfu");
      attr(div0, "style", div0_style_value = ctx[4] ? "cursor: grab" : "cursor: grabbing");
      attr(div1, "class", "block svelte-1qfwxfu");
      attr(div2, "class", "block-container");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div1);
      append(div1, div0);
      append(div1, t0);
      if_blocks[current_block_type_index].m(div1, null);
      append(div2, t1);
      if (if_block1)
        if_block1.m(div2, null);
      append(div3, t2);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[7].call(null, div0)),
          listen(div0, "mousedown", ctx[8]),
          listen(div0, "touchstart", ctx[8])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & 16 && div0_style_value !== (div0_style_value = ctx[4] ? "cursor: grab" : "cursor: grabbing")) {
        attr(div0, "style", div0_style_value);
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block0.c();
        } else {
          if_block0.p(ctx, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div1, null);
      }
      if (ctx[20].hasRule) {
        if (if_block1) {
          if (dirty & 9) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block14(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs2 });
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if_blocks[current_block_type_index].d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment22(ctx) {
  let div;
  let section;
  let each_blocks = [];
  let each_1_lookup = new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[0].filter(ctx[12]);
  const get_key = (ctx2) => ctx2[20].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context7(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block7(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      section = element("section");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(section, "class", "creator-zone svelte-1qfwxfu");
      toggle_class(section, "inline", ctx[2]);
      attr(div, "class", "creator");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, section);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(section, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, section, {
            items: ctx[0],
            flipDurationMs: flipDurationMs2,
            dragDisabled: ctx[4]
          })),
          listen(section, "consider", ctx[5]),
          listen(section, "finalize", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1819) {
        each_value = ctx2[0].filter(ctx2[12]);
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, section, fix_and_outro_and_destroy_block, create_each_block7, null, get_each_context7);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 17)
        dndzone_action.update.call(null, {
          items: ctx2[0],
          flipDurationMs: flipDurationMs2,
          dragDisabled: ctx2[4]
        });
      if (dirty & 4) {
        toggle_class(section, "inline", ctx2[2]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
var flipDurationMs2 = 300;
function instance20($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { blocks = [] } = $$props;
  let { inline = false } = $$props;
  let { plugin } = $$props;
  let dragDisabled = true;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(0, blocks = [...newItems]);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(4, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(0, blocks = [...newItems]);
    dispatch("sorted", blocks);
    if (source === SOURCES.POINTER) {
      $$invalidate(4, dragDisabled = true);
    }
  }
  const grip = (node) => {
    (0, import_obsidian13.setIcon)(node, "dropzone-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(4, dragDisabled = false);
  }
  const trash = (evt) => {
    $$invalidate(0, blocks = blocks.filter((b) => b.id != evt.id));
    dispatch("sorted", blocks);
  };
  const edited = (e) => {
    const original = blocks.findIndex((v) => v.id == e.id);
    blocks.splice(original, 1, e);
    $$invalidate(0, blocks);
  };
  const editBlock = (block) => {
    const modal = new BlockModal(plugin, block);
    modal.onClose = () => {
      if (!modal.saved)
        return;
      edited(modal.block);
    };
    modal.open();
  };
  const add = async (block, evt) => {
    if (!("nested" in block))
      return;
    const gen = await generate(plugin, evt);
    if (gen) {
      block.nested = [...block.nested, gen];
      $$invalidate(0, blocks);
      dispatch("sorted", blocks);
    }
  };
  const dropdown = (node, block) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("vertical-three-dots");
    node.onclick = (evt) => {
      new import_obsidian13.Menu(plugin.app).addItem((item) => {
        item.setTitle("Add").setIcon("plus-with-circle").onClick((e) => add(block, e));
      }).addItem((item) => item.setTitle("Edit").setIcon("pencil").onClick(() => {
        editBlock(block);
      })).addItem((item) => item.setTitle("Delete").setIcon("trash").onClick(() => trash(block))).showAtMouseEvent(evt);
    };
  };
  const func = (x) => x.id !== SHADOW_PLACEHOLDER_ITEM_ID;
  const trash_handler = (e) => trash(e.detail);
  const edited_handler = (e) => edited(e.detail);
  function creator_blocks_binding(value, block) {
    if ($$self.$$.not_equal(block.nested, value)) {
      block.nested = value;
      $$invalidate(0, blocks);
    }
  }
  function creator_plugin_binding(value) {
    plugin = value;
    $$invalidate(1, plugin);
  }
  $$self.$$set = ($$props2) => {
    if ("blocks" in $$props2)
      $$invalidate(0, blocks = $$props2.blocks);
    if ("inline" in $$props2)
      $$invalidate(2, inline = $$props2.inline);
    if ("plugin" in $$props2)
      $$invalidate(1, plugin = $$props2.plugin);
  };
  return [
    blocks,
    plugin,
    inline,
    SHADOW_PLACEHOLDER_ITEM_ID,
    dragDisabled,
    handleConsider,
    handleFinalize,
    grip,
    startDrag,
    trash,
    edited,
    dropdown,
    func,
    trash_handler,
    edited_handler,
    creator_blocks_binding,
    creator_plugin_binding
  ];
}
var Creator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment22, safe_not_equal, { blocks: 0, inline: 2, plugin: 1 }, add_css19);
  }
};
var Creator_default = Creator;

// src/settings/StatblockCreator.svelte
function add_css20(target) {
  append_styles(target, "svelte-fktbyg", ".top.svelte-fktbyg{display:flex;align-items:center;justify-content:space-between}.name.svelte-fktbyg{display:flex;align-items:center}.name.svelte-fktbyg .buttons{display:flex;justify-content:flex-end;align-items:center}.bottom.svelte-fktbyg{display:flex;justify-content:flex-end;align-items:center;margin-top:0.5rem}");
}
function create_key_block5(ctx) {
  let creator;
  let current;
  creator = new Creator_default({
    props: {
      blocks: ctx[2],
      plugin: ctx[1]
    }
  });
  creator.$on("sorted", ctx[3]);
  return {
    c() {
      create_component(creator.$$.fragment);
    },
    m(target, anchor) {
      mount_component(creator, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const creator_changes = {};
      if (dirty & 4)
        creator_changes.blocks = ctx2[2];
      if (dirty & 2)
        creator_changes.plugin = ctx2[1];
      creator.$set(creator_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(creator.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creator.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(creator, detaching);
    }
  };
}
function create_fragment23(ctx) {
  let div2;
  let div0;
  let name_action;
  let t0;
  let div1;
  let addButton_action;
  let t1;
  let div3;
  let previous_key = ctx[0];
  let t2;
  let div6;
  let div4;
  let save_action;
  let t3;
  let div5;
  let cancel_action;
  let current;
  let mounted;
  let dispose;
  let key_block = create_key_block5(ctx);
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div3 = element("div");
      key_block.c();
      t2 = space();
      div6 = element("div");
      div4 = element("div");
      t3 = space();
      div5 = element("div");
      attr(div0, "class", "name svelte-fktbyg");
      attr(div1, "class", "add");
      attr(div2, "class", "top svelte-fktbyg");
      attr(div3, "class", "creator-container");
      attr(div4, "class", "save");
      attr(div5, "class", "cancel");
      attr(div6, "class", "bottom svelte-fktbyg");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t0);
      append(div2, div1);
      insert(target, t1, anchor);
      insert(target, div3, anchor);
      key_block.m(div3, null);
      insert(target, t2, anchor);
      insert(target, div6, anchor);
      append(div6, div4);
      append(div6, t3);
      append(div6, div5);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(name_action = ctx[4].call(null, div0)),
          action_destroyer(addButton_action = ctx[8].call(null, div1)),
          listen(div1, "click", ctx[9]),
          action_destroyer(save_action = ctx[5].call(null, div4)),
          action_destroyer(cancel_action = ctx[6].call(null, div5))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block5(ctx2);
        key_block.c();
        transition_in(key_block);
        key_block.m(div3, null);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div3);
      key_block.d(detaching);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(div6);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance21($$self, $$props, $$invalidate) {
  let items;
  let { layout } = $$props;
  let { plugin } = $$props;
  const getIds = (items2) => {
    return [
      ...items2.map((item) => {
        if ("nested" in item) {
          return [item.id, getIds(item.nested)].flat();
        }
        return [item.id];
      }).flat()
    ];
  };
  const dispatch = createEventDispatcher();
  const handleSorted = (e) => {
    $$invalidate(0, layout.blocks = [...e.detail], layout);
  };
  let editingName = false;
  const name = (node) => {
    node.empty();
    if (editingName) {
      let temp = layout.name;
      new import_obsidian14.TextComponent(node).setValue(temp).onChange((v) => {
        temp = v;
      });
      const buttons = node.createDiv("buttons");
      new import_obsidian14.ExtraButtonComponent(buttons).setIcon("checkmark").setTooltip("Save").onClick(() => {
        editingName = false;
        $$invalidate(0, layout.name = temp, layout);
        name(node);
      });
      new import_obsidian14.ExtraButtonComponent(buttons).setIcon("cross-in-box").setTooltip("Cancel").onClick(() => {
        editingName = false;
        name(node);
      });
    } else {
      node.createEl("h3", { text: layout.name });
      new import_obsidian14.ExtraButtonComponent(node.createDiv("buttons")).setIcon("pencil").setTooltip("Edit Name").onClick(() => {
        editingName = true;
        name(node);
      });
    }
  };
  const save = (node) => {
    new import_obsidian14.ButtonComponent(node).setIcon("checkmark").setCta().setTooltip("Save").onClick(() => {
      dispatch("saved");
    });
  };
  const cancel = (node) => {
    new import_obsidian14.ExtraButtonComponent(node).setIcon("cross").setTooltip("Cancel").onClick(() => {
      dispatch("cancel");
    });
  };
  const add = async (e) => {
    const block = await generate(plugin, e);
    if (block)
      $$invalidate(0, layout.blocks = [...layout.blocks, block], layout);
  };
  const addButton = (node) => {
    new import_obsidian14.ExtraButtonComponent(node).setIcon("plus-with-circle").setTooltip("Add Block");
  };
  const click_handler = (evt) => add(evt);
  $$self.$$set = ($$props2) => {
    if ("layout" in $$props2)
      $$invalidate(0, layout = $$props2.layout);
    if ("plugin" in $$props2)
      $$invalidate(1, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, items = layout.blocks);
    }
  };
  return [
    layout,
    plugin,
    items,
    handleSorted,
    name,
    save,
    cancel,
    add,
    addButton,
    click_handler
  ];
}
var StatblockCreator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment23, safe_not_equal, { layout: 0, plugin: 1 }, add_css20);
  }
};
var StatblockCreator_default = StatblockCreator;

// src/settings/suggester.ts
var import_obsidian17 = __toModule(require("obsidian"));

// src/settings/modal.ts
var import_obsidian16 = __toModule(require("obsidian"));

// src/settings/EditMonster.svelte
var import_obsidian15 = __toModule(require("obsidian"));
function add_css21(target) {
  append_styles(target, "svelte-1m3i208", ".top-level.svelte-1m3i208.svelte-1m3i208{display:flex;flex-flow:column nowrap}textarea.svelte-1m3i208.svelte-1m3i208{flex-grow:1;height:500px;max-height:50vh}.json.svelte-1m3i208.svelte-1m3i208{margin-bottom:1rem;display:flex;justify-content:flex-start;align-items:center}.json.svelte-1m3i208>div.svelte-1m3i208{border-radius:4px;margin:5px 0px}.active.svelte-1m3i208.svelte-1m3i208{background-color:var(--background-secondary-alt)}.buttons.svelte-1m3i208.svelte-1m3i208{margin-top:1rem;display:flex;justify-content:flex-end;align-items:center}");
}
function create_key_block6(ctx) {
  let textarea;
  let textarea_value_value;
  let mounted;
  let dispose;
  return {
    c() {
      textarea = element("textarea");
      textarea.value = textarea_value_value = ctx[6]();
      attr(textarea, "class", "svelte-1m3i208");
    },
    m(target, anchor) {
      insert(target, textarea, anchor);
      ctx[11](textarea);
      if (!mounted) {
        dispose = listen(textarea, "blur", ctx[12]);
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(textarea);
      ctx[11](null);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment24(ctx) {
  let div7;
  let h2;
  let t1;
  let div3;
  let div2;
  let div0;
  let yaml_action;
  let t2;
  let div1;
  let json_action;
  let t3;
  let previous_key = ctx[0];
  let t4;
  let div6;
  let div4;
  let save_action;
  let t5;
  let div5;
  let cancel_action;
  let mounted;
  let dispose;
  let key_block = create_key_block6(ctx);
  return {
    c() {
      div7 = element("div");
      h2 = element("h2");
      h2.textContent = "Edit Monster";
      t1 = space();
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      t3 = space();
      key_block.c();
      t4 = space();
      div6 = element("div");
      div4 = element("div");
      t5 = space();
      div5 = element("div");
      attr(div0, "class", "svelte-1m3i208");
      toggle_class(div0, "active", !ctx[0]);
      attr(div1, "class", "svelte-1m3i208");
      toggle_class(div1, "active", ctx[0]);
      attr(div2, "class", "json svelte-1m3i208");
      attr(div3, "class", "top-level svelte-1m3i208");
      attr(div6, "class", "buttons svelte-1m3i208");
      attr(div7, "class", "edit-monster-modal");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, h2);
      append(div7, t1);
      append(div7, div3);
      append(div3, div2);
      append(div2, div0);
      append(div2, t2);
      append(div2, div1);
      append(div3, t3);
      key_block.m(div3, null);
      append(div7, t4);
      append(div7, div6);
      append(div6, div4);
      append(div6, t5);
      append(div6, div5);
      if (!mounted) {
        dispose = [
          action_destroyer(yaml_action = ctx[3].call(null, div0)),
          listen(div0, "click", ctx[9]),
          action_destroyer(json_action = ctx[2].call(null, div1)),
          listen(div1, "click", ctx[10]),
          action_destroyer(save_action = ctx[4].call(null, div4)),
          action_destroyer(cancel_action = ctx[5].call(null, div5))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        toggle_class(div0, "active", !ctx2[0]);
      }
      if (dirty & 1) {
        toggle_class(div1, "active", ctx2[0]);
      }
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block6(ctx2);
        key_block.c();
        key_block.m(div3, null);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div7);
      key_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { monster = {} } = $$props;
  let useJson = false;
  let textArea;
  const json = (node) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("code-glyph").setTooltip("JSON");
  };
  const yaml = (node) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("lines-of-text").setTooltip("YAML");
  };
  const save = (node) => {
    new import_obsidian15.ButtonComponent(node).setIcon("checkmark").setTooltip("Save Changes").onClick(() => {
      if (useJson) {
        try {
          if (useJson) {
            $$invalidate(8, monster = JSON.parse(textArea.value));
          } else {
            $$invalidate(8, monster = (0, import_obsidian15.parseYaml)(textArea.value));
          }
        } catch (e) {
          console.error(e);
          new import_obsidian15.Notice(`There was an error saving the creaturen

${e.message}`);
          return;
        }
      }
      dispatch("save", monster);
    });
  };
  const cancel = (node) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("cross").setTooltip("Cancel").onClick(() => {
      dispatch("cancel");
    });
  };
  function getMonsterText() {
    if (useJson)
      return JSON.stringify(monster, null, 2);
    if (!monster || !Object.keys(monster ?? {})?.length)
      return "";
    return (0, import_obsidian15.stringifyYaml)(monster).trim();
  }
  function setMonster() {
    try {
      if (useJson) {
        $$invalidate(8, monster = JSON.parse(textArea.value));
      } else {
        $$invalidate(8, monster = (0, import_obsidian15.parseYaml)(textArea.value));
      }
    } catch (e) {
      console.error(e);
    }
  }
  const click_handler = () => $$invalidate(0, useJson = false);
  const click_handler_1 = () => $$invalidate(0, useJson = true);
  function textarea_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      textArea = $$value;
      $$invalidate(1, textArea);
    });
  }
  const blur_handler = () => setMonster();
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(8, monster = $$props2.monster);
  };
  return [
    useJson,
    textArea,
    json,
    yaml,
    save,
    cancel,
    getMonsterText,
    setMonster,
    monster,
    click_handler,
    click_handler_1,
    textarea_binding,
    blur_handler
  ];
}
var EditMonster = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment24, safe_not_equal, { monster: 8 }, add_css21);
  }
};
var EditMonster_default = EditMonster;

// src/settings/modal.ts
var EditMonsterModal = class extends import_obsidian16.Modal {
  constructor(plugin, monster = {}) {
    super(plugin.app);
    this.plugin = plugin;
    this.monster = monster;
  }
  onOpen() {
    this._instance = new EditMonster_default({
      target: this.contentEl,
      props: {
        monster: this.monster
      }
    });
    this._instance.$on("cancel", () => {
      this.close();
    });
    this._instance.$on("save", async ({ detail }) => {
      if (!detail.name) {
        new import_obsidian16.Notice("Creatures must be given a name.");
        return;
      }
      await this.plugin.updateMonster(this.monster, detail);
      this.close();
    });
  }
  onClose() {
  }
  close() {
    if (this._instance)
      this._instance.$destroy();
    super.close();
  }
};

// src/settings/suggester.ts
var ViewMonsterModal = class extends import_obsidian17.Modal {
  constructor(plugin, monster) {
    super(plugin.app);
    this.plugin = plugin;
    this.monster = monster;
  }
  async display() {
    if (!import_obsidian17.Platform.isMobile) {
      this.contentEl.style.maxWidth = "85vw";
    }
    new StatBlockRenderer(this.contentEl, this.monster, this.plugin, false, null, this.plugin.defaultLayout);
  }
  onOpen() {
    this.display();
  }
};

// src/settings/settings.ts
var import_fast_copy3 = __toModule(require_fast_copy());

// inline-worker:__inline-worker
function inlineWorker(scriptText) {
  let blob = new Blob([scriptText], { type: "text/javascript" });
  let url = URL.createObjectURL(blob);
  let worker = new Worker(url);
  URL.revokeObjectURL(url);
  return worker;
}

// src/importers/importer.worker.ts
function Worker2() {
  return inlineWorker('var dn=Object.create;var ke=Object.defineProperty;var Sn=Object.getOwnPropertyDescriptor;var vn=Object.getOwnPropertyNames;var Rn=Object.getPrototypeOf,yn=Object.prototype.hasOwnProperty;var En=e=>ke(e,"__esModule",{value:!0});var Te=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var _n=(e,t,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of vn(t))!yn.call(e,r)&&r!=="default"&&ke(e,r,{get:()=>t[r],enumerable:!(n=Sn(t,r))||n.enumerable});return e},Cn=e=>_n(En(ke(e!=null?dn(Rn(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var _t=Te(Et=>{Et.entityMap={lt:"<",gt:">",amp:"&",quot:\'"\',apos:"\'",Agrave:"\\xC0",Aacute:"\\xC1",Acirc:"\\xC2",Atilde:"\\xC3",Auml:"\\xC4",Aring:"\\xC5",AElig:"\\xC6",Ccedil:"\\xC7",Egrave:"\\xC8",Eacute:"\\xC9",Ecirc:"\\xCA",Euml:"\\xCB",Igrave:"\\xCC",Iacute:"\\xCD",Icirc:"\\xCE",Iuml:"\\xCF",ETH:"\\xD0",Ntilde:"\\xD1",Ograve:"\\xD2",Oacute:"\\xD3",Ocirc:"\\xD4",Otilde:"\\xD5",Ouml:"\\xD6",Oslash:"\\xD8",Ugrave:"\\xD9",Uacute:"\\xDA",Ucirc:"\\xDB",Uuml:"\\xDC",Yacute:"\\xDD",THORN:"\\xDE",szlig:"\\xDF",agrave:"\\xE0",aacute:"\\xE1",acirc:"\\xE2",atilde:"\\xE3",auml:"\\xE4",aring:"\\xE5",aelig:"\\xE6",ccedil:"\\xE7",egrave:"\\xE8",eacute:"\\xE9",ecirc:"\\xEA",euml:"\\xEB",igrave:"\\xEC",iacute:"\\xED",icirc:"\\xEE",iuml:"\\xEF",eth:"\\xF0",ntilde:"\\xF1",ograve:"\\xF2",oacute:"\\xF3",ocirc:"\\xF4",otilde:"\\xF5",ouml:"\\xF6",oslash:"\\xF8",ugrave:"\\xF9",uacute:"\\xFA",ucirc:"\\xFB",uuml:"\\xFC",yacute:"\\xFD",thorn:"\\xFE",yuml:"\\xFF",nbsp:"\\xA0",iexcl:"\\xA1",cent:"\\xA2",pound:"\\xA3",curren:"\\xA4",yen:"\\xA5",brvbar:"\\xA6",sect:"\\xA7",uml:"\\xA8",copy:"\\xA9",ordf:"\\xAA",laquo:"\\xAB",not:"\\xAC",shy:"\\xAD\\xAD",reg:"\\xAE",macr:"\\xAF",deg:"\\xB0",plusmn:"\\xB1",sup2:"\\xB2",sup3:"\\xB3",acute:"\\xB4",micro:"\\xB5",para:"\\xB6",middot:"\\xB7",cedil:"\\xB8",sup1:"\\xB9",ordm:"\\xBA",raquo:"\\xBB",frac14:"\\xBC",frac12:"\\xBD",frac34:"\\xBE",iquest:"\\xBF",times:"\\xD7",divide:"\\xF7",forall:"\\u2200",part:"\\u2202",exist:"\\u2203",empty:"\\u2205",nabla:"\\u2207",isin:"\\u2208",notin:"\\u2209",ni:"\\u220B",prod:"\\u220F",sum:"\\u2211",minus:"\\u2212",lowast:"\\u2217",radic:"\\u221A",prop:"\\u221D",infin:"\\u221E",ang:"\\u2220",and:"\\u2227",or:"\\u2228",cap:"\\u2229",cup:"\\u222A",int:"\\u222B",there4:"\\u2234",sim:"\\u223C",cong:"\\u2245",asymp:"\\u2248",ne:"\\u2260",equiv:"\\u2261",le:"\\u2264",ge:"\\u2265",sub:"\\u2282",sup:"\\u2283",nsub:"\\u2284",sube:"\\u2286",supe:"\\u2287",oplus:"\\u2295",otimes:"\\u2297",perp:"\\u22A5",sdot:"\\u22C5",Alpha:"\\u0391",Beta:"\\u0392",Gamma:"\\u0393",Delta:"\\u0394",Epsilon:"\\u0395",Zeta:"\\u0396",Eta:"\\u0397",Theta:"\\u0398",Iota:"\\u0399",Kappa:"\\u039A",Lambda:"\\u039B",Mu:"\\u039C",Nu:"\\u039D",Xi:"\\u039E",Omicron:"\\u039F",Pi:"\\u03A0",Rho:"\\u03A1",Sigma:"\\u03A3",Tau:"\\u03A4",Upsilon:"\\u03A5",Phi:"\\u03A6",Chi:"\\u03A7",Psi:"\\u03A8",Omega:"\\u03A9",alpha:"\\u03B1",beta:"\\u03B2",gamma:"\\u03B3",delta:"\\u03B4",epsilon:"\\u03B5",zeta:"\\u03B6",eta:"\\u03B7",theta:"\\u03B8",iota:"\\u03B9",kappa:"\\u03BA",lambda:"\\u03BB",mu:"\\u03BC",nu:"\\u03BD",xi:"\\u03BE",omicron:"\\u03BF",pi:"\\u03C0",rho:"\\u03C1",sigmaf:"\\u03C2",sigma:"\\u03C3",tau:"\\u03C4",upsilon:"\\u03C5",phi:"\\u03C6",chi:"\\u03C7",psi:"\\u03C8",omega:"\\u03C9",thetasym:"\\u03D1",upsih:"\\u03D2",piv:"\\u03D6",OElig:"\\u0152",oelig:"\\u0153",Scaron:"\\u0160",scaron:"\\u0161",Yuml:"\\u0178",fnof:"\\u0192",circ:"\\u02C6",tilde:"\\u02DC",ensp:"\\u2002",emsp:"\\u2003",thinsp:"\\u2009",zwnj:"\\u200C",zwj:"\\u200D",lrm:"\\u200E",rlm:"\\u200F",ndash:"\\u2013",mdash:"\\u2014",lsquo:"\\u2018",rsquo:"\\u2019",sbquo:"\\u201A",ldquo:"\\u201C",rdquo:"\\u201D",bdquo:"\\u201E",dagger:"\\u2020",Dagger:"\\u2021",bull:"\\u2022",hellip:"\\u2026",permil:"\\u2030",prime:"\\u2032",Prime:"\\u2033",lsaquo:"\\u2039",rsaquo:"\\u203A",oline:"\\u203E",euro:"\\u20AC",trade:"\\u2122",larr:"\\u2190",uarr:"\\u2191",rarr:"\\u2192",darr:"\\u2193",harr:"\\u2194",crarr:"\\u21B5",lceil:"\\u2308",rceil:"\\u2309",lfloor:"\\u230A",rfloor:"\\u230B",loz:"\\u25CA",spades:"\\u2660",clubs:"\\u2663",hearts:"\\u2665",diams:"\\u2666"}});var xt=Te(Ge=>{var Le=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/,Ct=new RegExp("[\\\\-\\\\.0-9"+Le.source.slice(1,-1)+"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]"),Tt=new RegExp("^"+Le.source+Ct.source+"*(?::"+Le.source+Ct.source+"*)?$"),he=0,Q=1,re=2,ge=3,ie=4,se=5,de=6,Ae=7;function ae(e,t){this.message=e,this.locator=t,Error.captureStackTrace&&Error.captureStackTrace(this,ae)}ae.prototype=new Error;ae.prototype.name=ae.name;function At(){}At.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),wt(t,t={}),Tn(e,t,n,r,this.errorHandler),r.endDocument()}};function Tn(e,t,n,r,i){function s(E){if(E>65535){E-=65536;var h=55296+(E>>10),te=56320+(E&1023);return String.fromCharCode(h,te)}else return String.fromCharCode(E)}function o(E){var h=E.slice(1,-1);return h in n?n[h]:h.charAt(0)==="#"?s(parseInt(h.substr(1).replace("x","0x"))):(i.error("entity not found:"+E),E)}function l(E){if(E>_){var h=e.substring(_,E).replace(/&#?\\w+;/g,o);S&&u(_),r.characters(h,0,E-_),_=E}}function u(E,h){for(;E>=m&&(h=g.exec(e));)c=h.index,m=c+h[0].length,S.lineNumber++;S.columnNumber=E-c+1}for(var c=0,m=0,g=/.*(?:\\r\\n?|\\n)|.*$/g,S=r.locator,y=[{currentNSMap:t}],$={},_=0;;){try{var v=e.indexOf("<",_);if(v<0){if(!e.substr(_).match(/^\\s*$/)){var P=r.doc,j=P.createTextNode(e.substr(_));P.appendChild(j),r.currentElement=j}return}switch(v>_&&l(v),e.charAt(v+1)){case"/":var C=e.indexOf(">",v+3),N=e.substring(v+2,C),b=y.pop();C<0?(N=e.substring(v+2).replace(/[\\s<].*/,""),i.error("end tag name: "+N+" is not complete:"+b.tagName),C=v+1+N.length):N.match(/\\s</)&&(N=N.replace(/[\\s<].*/,""),i.error("end tag name: "+N+" maybe not complete"),C=v+1+N.length);var B=b.localNSMap,V=b.tagName==N,x=V||b.tagName&&b.tagName.toLowerCase()==N.toLowerCase();if(x){if(r.endElement(b.uri,b.localName,N),B)for(var L in B)r.endPrefixMapping(L);V||i.fatalError("end tag name: "+N+" is not match the current start tagName:"+b.tagName)}else y.push(b);C++;break;case"?":S&&u(v),C=Dn(e,v,r);break;case"!":S&&u(v),C=wn(e,v,r,i);break;default:S&&u(v);var A=new Dt,d=y[y.length-1].currentNSMap,C=An(e,v,A,d,o,i),z=A.length;if(!A.closed&&bn(e,C,A.tagName,$)&&(A.closed=!0,n.nbsp||i.warning("unclosed xml attribute")),S&&z){for(var G=Nt(S,{}),k=0;k<z;k++){var W=A[k];u(W.offset),W.locator=Nt(S,{})}r.locator=G,bt(A,r,d)&&y.push(A),r.locator=S}else bt(A,r,d)&&y.push(A);A.uri==="http://www.w3.org/1999/xhtml"&&!A.closed?C=Nn(e,C,A.tagName,o,r):C++}}catch(E){if(E instanceof ae)throw E;i.error("element parse error: "+E),C=-1}C>_?_=C:l(Math.max(v,_)+1)}}function Nt(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function An(e,t,n,r,i,s){function o(y,$,_){y in n.attributeNames&&s.fatalError("Attribute "+y+" redefined"),n.addValue(y,$,_)}for(var l,u,c=++t,m=he;;){var g=e.charAt(c);switch(g){case"=":if(m===Q)l=e.slice(t,c),m=ge;else if(m===re)m=ge;else throw new Error("attribute equal must after attrName");break;case"\'":case\'"\':if(m===ge||m===Q)if(m===Q&&(s.warning(\'attribute value must after "="\'),l=e.slice(t,c)),t=c+1,c=e.indexOf(g,t),c>0)u=e.slice(t,c).replace(/&#?\\w+;/g,i),o(l,u,t-1),m=se;else throw new Error("attribute value no end \'"+g+"\' match");else if(m==ie)u=e.slice(t,c).replace(/&#?\\w+;/g,i),o(l,u,t),s.warning(\'attribute "\'+l+\'" missed start quot(\'+g+")!!"),t=c+1,m=se;else throw new Error(\'attribute value must after "="\');break;case"/":switch(m){case he:n.setTagName(e.slice(t,c));case se:case de:case Ae:m=Ae,n.closed=!0;case ie:case Q:case re:break;default:throw new Error("attribute invalid close char(\'/\')")}break;case"":return s.error("unexpected end of input"),m==he&&n.setTagName(e.slice(t,c)),c;case">":switch(m){case he:n.setTagName(e.slice(t,c));case se:case de:case Ae:break;case ie:case Q:u=e.slice(t,c),u.slice(-1)==="/"&&(n.closed=!0,u=u.slice(0,-1));case re:m===re&&(u=l),m==ie?(s.warning(\'attribute "\'+u+\'" missed quot(")!\'),o(l,u.replace(/&#?\\w+;/g,i),t)):((r[""]!=="http://www.w3.org/1999/xhtml"||!u.match(/^(?:disabled|checked|selected)$/i))&&s.warning(\'attribute "\'+u+\'" missed value!! "\'+u+\'" instead!!\'),o(u,u,t));break;case ge:throw new Error("attribute value missed!!")}return c;case"\\x80":g=" ";default:if(g<=" ")switch(m){case he:n.setTagName(e.slice(t,c)),m=de;break;case Q:l=e.slice(t,c),m=re;break;case ie:var u=e.slice(t,c).replace(/&#?\\w+;/g,i);s.warning(\'attribute "\'+u+\'" missed quot(")!!\'),o(l,u,t);case se:m=de;break}else switch(m){case re:var S=n.tagName;(r[""]!=="http://www.w3.org/1999/xhtml"||!l.match(/^(?:disabled|checked|selected)$/i))&&s.warning(\'attribute "\'+l+\'" missed value!! "\'+l+\'" instead2!!\'),o(l,l,t),t=c,m=Q;break;case se:s.warning(\'attribute space is required"\'+l+\'"!!\');case de:m=Q,t=c;break;case ge:m=ie,t=c;break;case Ae:throw new Error("elements closed character \'/\' and \'>\' must be connected to")}}c++}}function bt(e,t,n){for(var r=e.tagName,i=null,s=e.length;s--;){var o=e[s],l=o.qName,u=o.value,S=l.indexOf(":");if(S>0)var c=o.prefix=l.slice(0,S),m=l.slice(S+1),g=c==="xmlns"&&m;else m=l,c=null,g=l==="xmlns"&&"";o.localName=m,g!==!1&&(i==null&&(i={},wt(n,n={})),n[g]=i[g]=u,o.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(g,u))}for(var s=e.length;s--;){o=e[s];var c=o.prefix;c&&(c==="xml"&&(o.uri="http://www.w3.org/XML/1998/namespace"),c!=="xmlns"&&(o.uri=n[c||""]))}var S=r.indexOf(":");S>0?(c=e.prefix=r.slice(0,S),m=e.localName=r.slice(S+1)):(c=null,m=e.localName=r);var y=e.uri=n[c||""];if(t.startElement(y,m,r,e),e.closed){if(t.endElement(y,m,r),i)for(c in i)t.endPrefixMapping(c)}else return e.currentNSMap=n,e.localNSMap=i,!0}function Nn(e,t,n,r,i){if(/^(?:script|textarea)$/i.test(n)){var s=e.indexOf("</"+n+">",t),o=e.substring(t+1,s);if(/[&<]/.test(o))return/^script$/i.test(n)?(i.characters(o,0,o.length),s):(o=o.replace(/&#?\\w+;/g,r),i.characters(o,0,o.length),s)}return t+1}function bn(e,t,n,r){var i=r[n];return i==null&&(i=e.lastIndexOf("</"+n+">"),i<t&&(i=e.lastIndexOf("</"+n)),r[n]=i),i<t}function wt(e,t){for(var n in e)t[n]=e[n]}function wn(e,t,n,r){var i=e.charAt(t+2);switch(i){case"-":if(e.charAt(t+3)==="-"){var s=e.indexOf("-->",t+4);return s>t?(n.comment(e,t+4,s-t-4),s+3):(r.error("Unclosed comment"),-1)}else return-1;default:if(e.substr(t+3,6)=="CDATA["){var s=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,s-t-9),n.endCDATA(),s+3}var o=xn(e,t),l=o.length;if(l>1&&/!doctype/i.test(o[0][0])){var u=o[1][0],c=!1,m=!1;l>3&&(/^public$/i.test(o[2][0])?(c=o[3][0],m=l>4&&o[4][0]):/^system$/i.test(o[2][0])&&(m=o[3][0]));var g=o[l-1];return n.startDTD(u,c,m),n.endDTD(),g.index+g[0].length}}return-1}function Dn(e,t,n){var r=e.indexOf("?>",t);if(r){var i=e.substring(t,r).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(i){var s=i[0].length;return n.processingInstruction(i[1],i[2]),r+2}else return-1}return-1}function Dt(){this.attributeNames={}}Dt.prototype={setTagName:function(e){if(!Tt.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},addValue:function(e,t,n){if(!Tt.test(e))throw new Error("invalid attribute:"+e);this.attributeNames[e]=this.length,this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}};function xn(e,t){var n,r=[],i=/\'[^\']+\'|"[^"]+"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;for(i.lastIndex=t,i.exec(e);n=i.exec(e);)if(r.push(n),n[1])return r}Ge.XMLReader=At;Ge.ParseError=ae});var Ze=Te(Ee=>{function Se(e,t){for(var n in e)t[n]=e[n]}function U(e,t){var n=e.prototype;if(!(n instanceof t)){let i=function(){};var r=i;i.prototype=t.prototype,i=new i,Se(n,i),e.prototype=n=i}n.constructor!=e&&(typeof e!="function"&&console.error("unknow Class:"+e),n.constructor=e)}var $n="http://www.w3.org/1999/xhtml",F={},H=F.ELEMENT_NODE=1,oe=F.ATTRIBUTE_NODE=2,Ne=F.TEXT_NODE=3,$t=F.CDATA_SECTION_NODE=4,Mt=F.ENTITY_REFERENCE_NODE=5,Mn=F.ENTITY_NODE=6,It=F.PROCESSING_INSTRUCTION_NODE=7,Ot=F.COMMENT_NODE=8,Pt=F.DOCUMENT_NODE=9,Ut=F.DOCUMENT_TYPE_NODE=10,K=F.DOCUMENT_FRAGMENT_NODE=11,In=F.NOTATION_NODE=12,M={},w={},ia=M.INDEX_SIZE_ERR=(w[1]="Index size error",1),sa=M.DOMSTRING_SIZE_ERR=(w[2]="DOMString size error",2),On=M.HIERARCHY_REQUEST_ERR=(w[3]="Hierarchy request error",3),aa=M.WRONG_DOCUMENT_ERR=(w[4]="Wrong document",4),oa=M.INVALID_CHARACTER_ERR=(w[5]="Invalid character",5),ca=M.NO_DATA_ALLOWED_ERR=(w[6]="No data allowed",6),la=M.NO_MODIFICATION_ALLOWED_ERR=(w[7]="No modification allowed",7),Pn=M.NOT_FOUND_ERR=(w[8]="Not found",8),ua=M.NOT_SUPPORTED_ERR=(w[9]="Not supported",9),Ft=M.INUSE_ATTRIBUTE_ERR=(w[10]="Attribute in use",10),ma=M.INVALID_STATE_ERR=(w[11]="Invalid state",11),pa=M.SYNTAX_ERR=(w[12]="Syntax error",12),fa=M.INVALID_MODIFICATION_ERR=(w[13]="Invalid modification",13),ha=M.NAMESPACE_ERR=(w[14]="Invalid namespace",14),ga=M.INVALID_ACCESS_ERR=(w[15]="Invalid access",15);function ne(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,w[e]),this.message=w[e],Error.captureStackTrace&&Error.captureStackTrace(this,ne);return n.code=e,t&&(this.message=this.message+": "+t),n}ne.prototype=Error.prototype;Se(M,ne);function J(){}J.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)ue(this[r],n,e,t);return n.join("")}};function ce(e,t){this._node=e,this._refresh=t,We(this)}function We(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var n=e._refresh(e._node);Qt(e,"length",n.length),Se(n,e),e._inc=t}}ce.prototype.item=function(e){return We(this),this[e]};U(ce,J);function be(){}function kt(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function Lt(e,t,n,r){if(r?t[kt(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var i=e.ownerDocument;i&&(r&&Bt(i,e,r),Un(i,e,n))}}function Gt(e,t,n){var r=kt(t,n);if(r>=0){for(var i=t.length-1;r<i;)t[r]=t[++r];if(t.length=i,e){var s=e.ownerDocument;s&&(Bt(s,e,n),n.ownerElement=null)}}else throw ne(Pn,new Error(e.tagName+"@"+n))}be.prototype={length:0,item:J.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new ne(Ft);var n=this.getNamedItem(e.nodeName);return Lt(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t=e.ownerElement,n;if(t&&t!=this._ownerElement)throw new ne(Ft);return n=this.getNamedItemNS(e.namespaceURI,e.localName),Lt(this._ownerElement,this,e,n),n},removeNamedItem:function(e){var t=this.getNamedItem(e);return Gt(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return Gt(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}};function Wt(e){if(this._features={},e)for(var t in e)this._features=e[t]}Wt.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!!(n&&(!t||t in n))},createDocument:function(e,t,n){var r=new Re;if(r.implementation=this,r.childNodes=new J,r.doctype=n,n&&r.appendChild(n),t){var i=r.createElementNS(e,t);r.appendChild(i)}return r},createDocumentType:function(e,t,n){var r=new He;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}};function I(){}I.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return zt(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return Vt(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(e){return Ke(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==Ne&&e.nodeType==Ne?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n){for(var r in n)if(n[r]==e)return r}t=t.nodeType==oe?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==oe?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){var t=this.lookupPrefix(e);return t==null}};function jt(e){return e=="<"&&"&lt;"||e==">"&&"&gt;"||e=="&"&&"&amp;"||e==\'"\'&&"&quot;"||"&#"+e.charCodeAt()+";"}Se(F,I);Se(F,I.prototype);function ve(e,t){if(t(e))return!0;if(e=e.firstChild)do if(ve(e,t))return!0;while(e=e.nextSibling)}function Re(){}function Un(e,t,n){e&&e._inc++;var r=n.namespaceURI;r=="http://www.w3.org/2000/xmlns/"&&(t._nsMap[n.prefix?n.localName:""]=n.value)}function Bt(e,t,n,r){e&&e._inc++;var i=n.namespaceURI;i=="http://www.w3.org/2000/xmlns/"&&delete t._nsMap[n.prefix?n.localName:""]}function je(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var i=t.firstChild,s=0;i;)r[s++]=i,i=i.nextSibling;r.length=s}}}function Vt(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,je(e.ownerDocument,e),t}function zt(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===K){var i=t.firstChild;if(i==null)return t;var s=t.lastChild}else i=s=t;var o=n?n.previousSibling:e.lastChild;i.previousSibling=o,s.nextSibling=n,o?o.nextSibling=i:e.firstChild=i,n==null?e.lastChild=s:n.previousSibling=s;do i.parentNode=e;while(i!==s&&(i=i.nextSibling));return je(e.ownerDocument||e,e),t.nodeType==K&&(t.firstChild=t.lastChild=null),t}function Fn(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t);var r=e.lastChild}var r=e.lastChild;return t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,je(e.ownerDocument,e,t),t}Re.prototype={nodeName:"#document",nodeType:Pt,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==K){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return this.documentElement==null&&e.nodeType==H&&(this.documentElement=e),zt(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),Vt(this,e)},importNode:function(e,t){return qt(this,e,t)},getElementById:function(e){var t=null;return ve(this.documentElement,function(n){if(n.nodeType==H&&n.getAttribute("id")==e)return t=n,!0}),t},getElementsByClassName:function(e){var t=new RegExp("(^|\\\\s)"+e+"(\\\\s|$)");return new ce(this,function(n){var r=[];return ve(n.documentElement,function(i){i!==n&&i.nodeType==H&&t.test(i.getAttribute("class"))&&r.push(i)}),r})},createElement:function(e){var t=new le;t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new J;var n=t.attributes=new be;return n._ownerElement=t,t},createDocumentFragment:function(){var e=new De;return e.ownerDocument=this,e.childNodes=new J,e},createTextNode:function(e){var t=new Be;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new Ve;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new ze;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new Xe;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new we;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new Ye;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new le,r=t.split(":"),i=n.attributes=new be;return n.childNodes=new J,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=t,i._ownerElement=n,n},createAttributeNS:function(e,t){var n=new we,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}};U(Re,I);function le(){this._nsMap={}}le.prototype={nodeType:H,hasAttribute:function(e){return this.getAttributeNode(e)!=null},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===K?this.insertBefore(e,null):Fn(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return this.getAttributeNodeNS(e,t)!=null},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new ce(this,function(t){var n=[];return ve(t,function(r){r!==t&&r.nodeType==H&&(e==="*"||r.tagName==e)&&n.push(r)}),n})},getElementsByTagNameNS:function(e,t){return new ce(this,function(n){var r=[];return ve(n,function(i){i!==n&&i.nodeType===H&&(e==="*"||i.namespaceURI===e)&&(t==="*"||i.localName==t)&&r.push(i)}),r})}};Re.prototype.getElementsByTagName=le.prototype.getElementsByTagName;Re.prototype.getElementsByTagNameNS=le.prototype.getElementsByTagNameNS;U(le,I);function we(){}we.prototype.nodeType=oe;U(we,I);function ye(){}ye.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(w[On])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){var r=this.data.substring(0,e),i=this.data.substring(e+t);n=r+n+i,this.nodeValue=this.data=n,this.length=n.length}};U(ye,I);function Be(){}Be.prototype={nodeName:"#text",nodeType:Ne,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}};U(Be,ye);function Ve(){}Ve.prototype={nodeName:"#comment",nodeType:Ot};U(Ve,ye);function ze(){}ze.prototype={nodeName:"#cdata-section",nodeType:$t};U(ze,ye);function He(){}He.prototype.nodeType=Ut;U(He,I);function Ht(){}Ht.prototype.nodeType=In;U(Ht,I);function Yt(){}Yt.prototype.nodeType=Mn;U(Yt,I);function Ye(){}Ye.prototype.nodeType=Mt;U(Ye,I);function De(){}De.prototype.nodeName="#document-fragment";De.prototype.nodeType=K;U(De,I);function Xe(){}Xe.prototype.nodeType=It;U(Xe,I);function Xt(){}Xt.prototype.serializeToString=function(e,t,n){return Kt.call(e,t,n)};I.prototype.toString=Kt;function Kt(e,t){var n=[],r=this.nodeType==9&&this.documentElement||this,i=r.prefix,s=r.namespaceURI;if(s&&i==null){var i=r.lookupPrefix(s);if(i==null)var o=[{namespace:s,prefix:null}]}return ue(this,n,e,t,o),n.join("")}function Zt(e,t,n){var r=e.prefix||"",i=e.namespaceURI;if(!r&&!i||r==="xml"&&i==="http://www.w3.org/XML/1998/namespace"||i=="http://www.w3.org/2000/xmlns/")return!1;for(var s=n.length;s--;){var o=n[s];if(o.prefix==r)return o.namespace!=i}return!0}function ue(e,t,n,r,i){if(r)if(e=r(e),e){if(typeof e=="string"){t.push(e);return}}else return;switch(e.nodeType){case H:i||(i=[]);var s=i.length,o=e.attributes,l=o.length,u=e.firstChild,c=e.tagName;n=$n===e.namespaceURI||n,t.push("<",c);for(var m=0;m<l;m++){var g=o.item(m);g.prefix=="xmlns"?i.push({prefix:g.localName,namespace:g.value}):g.nodeName=="xmlns"&&i.push({prefix:"",namespace:g.value})}for(var m=0;m<l;m++){var g=o.item(m);if(Zt(g,n,i)){var S=g.prefix||"",y=g.namespaceURI,$=S?" xmlns:"+S:" xmlns";t.push($,\'="\',y,\'"\'),i.push({prefix:S,namespace:y})}ue(g,t,n,r,i)}if(Zt(e,n,i)){var S=e.prefix||"",y=e.namespaceURI;if(y){var $=S?" xmlns:"+S:" xmlns";t.push($,\'="\',y,\'"\'),i.push({prefix:S,namespace:y})}}if(u||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(c)){if(t.push(">"),n&&/^script$/i.test(c))for(;u;)u.data?t.push(u.data):ue(u,t,n,r,i),u=u.nextSibling;else for(;u;)ue(u,t,n,r,i),u=u.nextSibling;t.push("</",c,">")}else t.push("/>");return;case Pt:case K:for(var u=e.firstChild;u;)ue(u,t,n,r,i),u=u.nextSibling;return;case oe:return t.push(" ",e.name,\'="\',e.value.replace(/[<&"]/g,jt),\'"\');case Ne:return t.push(e.data.replace(/[<&]/g,jt).replace(/]]>/g,"]]&gt;"));case $t:return t.push("<![CDATA[",e.data,"]]>");case Ot:return t.push("<!--",e.data,"-->");case Ut:var _=e.publicId,v=e.systemId;if(t.push("<!DOCTYPE ",e.name),_)t.push(" PUBLIC ",_),v&&v!="."&&t.push(" ",v),t.push(">");else if(v&&v!=".")t.push(" SYSTEM ",v,">");else{var P=e.internalSubset;P&&t.push(" [",P,"]"),t.push(">")}return;case It:return t.push("<?",e.target," ",e.data,"?>");case Mt:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function qt(e,t,n){var r;switch(t.nodeType){case H:r=t.cloneNode(!1),r.ownerDocument=e;case K:break;case oe:n=!0;break}if(r||(r=t.cloneNode(!1)),r.ownerDocument=e,r.parentNode=null,n)for(var i=t.firstChild;i;)r.appendChild(qt(e,i,n)),i=i.nextSibling;return r}function Ke(e,t,n){var r=new t.constructor;for(var i in t){var s=t[i];typeof s!="object"&&s!=r[i]&&(r[i]=s)}switch(t.childNodes&&(r.childNodes=new J),r.ownerDocument=e,r.nodeType){case H:var o=t.attributes,l=r.attributes=new be,u=o.length;l._ownerElement=r;for(var c=0;c<u;c++)r.setAttributeNode(Ke(e,o.item(c),!0));break;case oe:n=!0}if(n)for(var m=t.firstChild;m;)r.appendChild(Ke(e,m,n)),m=m.nextSibling;return r}function Qt(e,t,n){e[t]=n}try{if(Object.defineProperty){let e=function(t){switch(t.nodeType){case H:case K:var n=[];for(t=t.firstChild;t;)t.nodeType!==7&&t.nodeType!==8&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}};da=e,Object.defineProperty(ce.prototype,"length",{get:function(){return We(this),this.$$length}}),Object.defineProperty(I.prototype,"textContent",{get:function(){return e(this)},set:function(t){switch(this.nodeType){case H:case K:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),Qt=function(t,n,r){t["$$"+n]=r}}}catch(e){}var da;Ee.Node=I;Ee.DOMException=ne;Ee.DOMImplementation=Wt;Ee.XMLSerializer=Xt});var nn=Te(Ce=>{function Jt(e){this.options=e||{locator:{}}}Jt.prototype.parseFromString=function(e,t){var n=this.options,r=new Gn,i=n.domBuilder||new _e,s=n.errorHandler,o=n.locator,l=n.xmlns||{},u=/\\/x?html?$/.test(t),c=u?Ln.entityMap:{lt:"<",gt:">",amp:"&",quot:\'"\',apos:"\'"};return o&&i.setDocumentLocator(o),r.errorHandler=kn(s,i,o),r.domBuilder=n.domBuilder||i,u&&(l[""]="http://www.w3.org/1999/xhtml"),l.xml=l.xml||"http://www.w3.org/XML/1998/namespace",e&&typeof e=="string"?r.parse(e,l,c):r.errorHandler.error("invalid doc source"),i.doc};function kn(e,t,n){if(!e){if(t instanceof _e)return t;e=t}var r={},i=e instanceof Function;n=n||{};function s(o){var l=e[o];!l&&i&&(l=e.length==2?function(u){e(o,u)}:e),r[o]=l&&function(u){l("[xmldom "+o+"]	"+u+qe(n))}||function(){}}return s("warning"),s("error"),s("fatalError"),r}function _e(){this.cdata=!1}function me(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}_e.prototype={startDocument:function(){this.doc=new jn().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var i=this.doc,s=i.createElementNS(e,n||t),o=r.length;xe(this,s),this.currentElement=s,this.locator&&me(this.locator,s);for(var l=0;l<o;l++){var e=r.getURI(l),u=r.getValue(l),n=r.getQName(l),c=i.createAttributeNS(e,n);this.locator&&me(r.getLocator(l),c),c.value=c.nodeValue=u,s.setAttributeNode(c)}},endElement:function(e,t,n){var r=this.currentElement,i=r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&me(this.locator,n),xe(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=en.apply(this,arguments),e){if(this.cdata)var r=this.doc.createCDATASection(e);else var r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&me(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=en.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&me(this.locator,r),xe(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var i=r.createDocumentType(e,t,n);this.locator&&me(this.locator,i),xe(this,i)}},warning:function(e){console.warn("[xmldom warning]	"+e,qe(this.locator))},error:function(e){console.error("[xmldom error]	"+e,qe(this.locator))},fatalError:function(e){throw new Wn(e,this.locator)}};function qe(e){if(e)return`\n@`+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function en(e,t,n){return typeof e=="string"?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\\w+/g,function(e){_e.prototype[e]=function(){return null}});function xe(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}var Ln=_t(),tn=xt(),Gn=tn.XMLReader,Wn=tn.ParseError,jn=Ce.DOMImplementation=Ze().DOMImplementation;Ce.XMLSerializer=Ze().XMLSerializer;Ce.DOMParser=Jt;Ce.__DOMHandler=_e});var rn=Cn(nn());async function sn(e){return new Promise((t,n)=>{let r=new FileReader;r.onload=async i=>{let s=i.target.result,l=new rn.DOMParser().parseFromString(s,"application/xml").getElementsByTagName("monster"),u=[];if(!!l.length){for(let c of Array.from(l))try{let m={image:null,name:D(c,"name"),size:Xn(c),type:D(c,"type"),subtype:D(c,"subtype"),alignment:D(c,"alignment"),ac:Kn(c),hp:Number(an(c,"hp")),hit_dice:an(c,"hit_dice"),speed:D(c,"speed"),stats:[Number(D(c,"str")),Number(D(c,"dex")),Number(D(c,"con")),Number(D(c,"int")),Number(D(c,"wis")),Number(D(c,"cha"))],saves:Hn(c),skillsaves:Vn(c),damage_vulnerabilities:D(c,"vulnerable"),damage_resistances:D(c,"resist"),damage_immunities:D(c,"immune"),condition_immunities:D(c,"conditionImmune"),senses:D(c,"senses"),languages:D(c,"languages"),cr:D(c,"cr"),traits:$e(c,"trait"),spells:Bn(c),actions:$e(c,"action"),legendary_actions:$e(c,"legendary"),reactions:$e(c,"reaction"),source:Zn(c)};u.push(m)}catch(m){console.error(m);continue}t(u)}},r.readAsText(e)})}function D(e,t){let n=e.getElementsByTagName(t);if(n&&n.length)return n[0].textContent}function $e(e,t){var i;if(!((i=e.getElementsByTagName(t))==null?void 0:i.length))return[];let n=e.getElementsByTagName(t),r=[];for(let s of Array.from(n)){let o=s.getElementsByTagName("name");if(!o||!o.length||!o[0].textContent||o[0].textContent.includes("Spellcasting"))continue;let l=[],u=s.getElementsByTagName("text");for(let c of Array.from(u))l.push(c.textContent);r.push({name:o[0].textContent,desc:l.join(" ")})}return r}function Bn(e){var r;if(!((r=e.getElementsByTagName("trait"))==null?void 0:r.length))return[];let n=Array.from(e.getElementsByTagName("trait")).find(i=>{var s;return(s=i.getElementsByTagName("name")[0])==null?void 0:s.textContent.includes("Spellcasting")});return n?Array.from(n.getElementsByTagName("text")).map(i=>i.textContent.replace(/(&#8226;|\u2022)/u,"").trim()).filter(i=>i.length):[]}function Vn(e){var r;if(!((r=e.getElementsByTagName("skill"))==null?void 0:r.length))return[];let t=e.getElementsByTagName("skill")[0].textContent.split(", "),n=[];return t.forEach(i=>{let s=i.split(/\\s[\\+\\-]/);n.push({[s[0]]:Number(s[1])})}),n}var zn={Str:"strength",Dex:"dexterity",Con:"constitution",Int:"intelligence",Wis:"wisdom",Cha:"charisma"};function Hn(e){var r;if(!((r=e.getElementsByTagName("save"))==null?void 0:r.length))return[];let t=e.getElementsByTagName("save")[0].textContent.split(", "),n=[];return t.forEach(i=>{let s=i.split(/\\s[\\+\\-]/);n.push({[zn[s[0]]]:Number(s[1])})}),n}function an(e,t){var s,o;if(!((s=e.getElementsByTagName("hp"))==null?void 0:s.length))return"";let n=e.getElementsByTagName("hp")[0].textContent,[,r,i]=(o=n.match(/(\\d+) \\(([\\s\\S]+)\\)/))!=null?o:[,"",""];return{hp:r,hit_dice:i}[t]}var Yn={T:"tiny",S:"small",M:"medium",L:"large",H:"huge",G:"gargantuan"};function Xn(e){var t;return e.getElementsByTagName("size")&&(t=Yn[e.getElementsByTagName("size")[0].textContent])!=null?t:""}function Kn(e){var t;if(e.getElementsByTagName("ac")){let[,n]=(t=e.getElementsByTagName("ac")[0])==null?void 0:t.textContent.match(/(\\d+)/);return Number(n)}return 0}function Zn(e){var n,r,i,s,o,l;let t="Unknown";if((n=e.getElementsByTagName("source"))==null?void 0:n.length)t=e.getElementsByTagName("source")[0].textContent;else if(((r=e.getElementsByTagName("trait"))==null?void 0:r.length)&&Array.from(e.getElementsByTagName("trait")).find(u=>{var c;return((c=u.getElementsByTagName("name"))==null?void 0:c[0].textContent)=="Source"})){let u=Array.from(e.getElementsByTagName("trait")).find(c=>{var m,g;return((g=(m=c.getElementsByTagName("name"))==null?void 0:m[0])==null?void 0:g.textContent)=="Source"});t=(o=(s=(i=u==null?void 0:u.getElementsByTagName("text"))==null?void 0:i[0])==null?void 0:s.textContent)==null?void 0:o.replace(/p. \\d+/,"").trim()}else if((l=e.getElementsByTagName("description"))==null?void 0:l.length){let u=e.getElementsByTagName("description"),c="Source: ";if(u[0].textContent.includes(c)){let m=u[0].textContent.lastIndexOf(c);t=u[0].textContent.slice(m+c.length).split(/, ?/)[0]}}return t}var qn={STR:"strength",DEX:"dexterity",CON:"constitution",INT:"intelligence",WIS:"wisdom",CHA:"charisma"};async function on(e){return new Promise((t,n)=>{let r=new FileReader,i=[];r.onload=async s=>{var o,l,u,c,m,g,S,y,$,_,v,P,j,C,N,b,B,V,x,L,A,d,z,G,k,W,E,h,te,R,q,tt,nt,rt,it,st,at,ot,ct,lt,ut,mt,pt,ft,ht,gt,dt,St,vt,Rt,yt;try{let Pe=JSON.parse(s.target.result),hn=Object.keys(Pe).filter(Ue=>/^Creatures\\./.test(Ue));for(let Ue of hn)try{let T=Pe[Ue],gn={name:T.Name,source:((o=T.Source)==null?void 0:o.trim().length)?(l=T.Source)==null?void 0:l.trim():"Unknown",type:(m=(c=(u=T.Type)==null?void 0:u.split(/,\\s?/))==null?void 0:c[0])==null?void 0:m.trim(),subtype:"",size:"",alignment:(y=(S=(g=T.Type)==null?void 0:g.split(/,\\s?/))==null?void 0:S[1])==null?void 0:y.trim(),hp:($=T.HP)==null?void 0:$.Value,hit_dice:(P=(v=(_=T.HP)==null?void 0:_.Notes)==null?void 0:v.replace(/([()])/g,""))==null?void 0:P.trim(),ac:T.AC.Value,speed:(C=(j=T.Speed)==null?void 0:j.join(", "))==null?void 0:C.trim(),stats:Object.values((N=T.Abilities)!=null?N:{}),damage_immunities:(x=(V=(B=(b=T.DamageImmunities)==null?void 0:b.join("; "))==null?void 0:B.toLowerCase())==null?void 0:V.trim())!=null?x:"",damage_resistances:(z=(d=(A=(L=T.DamageResistances)==null?void 0:L.join(", "))==null?void 0:A.toLowerCase())==null?void 0:d.trim())!=null?z:"",damage_vulnerabilities:(E=(W=(k=(G=T.DamageVulnerabilities)==null?void 0:G.join(", "))==null?void 0:k.toLowerCase())==null?void 0:W.trim())!=null?E:"",condition_immunities:(q=(R=(te=(h=T.ConditionImmunities)==null?void 0:h.join(", "))==null?void 0:te.toLowerCase())==null?void 0:R.trim())!=null?q:"",saves:(nt=(tt=T.Saves)==null?void 0:tt.map(({Name:O,Modifier:Fe})=>({[qn[O]]:Fe})))!=null?nt:[],skillsaves:(it=(rt=T.Skills)==null?void 0:rt.map(({Name:O,Modifier:Fe})=>({[O]:Fe})))!=null?it:[],senses:(ot=(at=(st=T.Senses)==null?void 0:st.join(", "))==null?void 0:at.trim())!=null?ot:"",languages:(ut=(lt=(ct=T.Languages)==null?void 0:ct.join(", "))==null?void 0:lt.trim())!=null?ut:"",cr:(pt=(mt=T.Challenge)==null?void 0:mt.trim())!=null?pt:"",traits:(ht=(ft=T.Traits)==null?void 0:ft.map(O=>({name:O.Name,desc:O.Content})))!=null?ht:[],actions:(dt=(gt=T.Actions)==null?void 0:gt.map(O=>({name:O.Name,desc:O.Content})))!=null?dt:[],reactions:(vt=(St=T.Reactions)==null?void 0:St.map(O=>({name:O.Name,desc:O.Content})))!=null?vt:[],legendary_actions:(yt=(Rt=T.LegendaryActions)==null?void 0:Rt.map(O=>({name:O.Name,desc:O.Content})))!=null?yt:[],image:null};i.push(gn)}catch(T){continue}t(i)}catch(Pe){n()}},r.readAsText(e)})}async function cn(e){return new Promise((t,n)=>{let r=new FileReader;r.onload=async i=>{var o,l,u,c,m,g,S,y,$,_,v,P,j,C,N,b,B,V,x,L,A,d,z,G,k;let s=[];try{let W=JSON.parse(i.target.result),E=[];W.creatures?E=W.creatures:E=[W];for(let h of E)try{let te={image:null,name:h.name,source:"CritterDB",type:h.stats.race,subtype:"",size:h.stats.size,alignment:h.stats.alignment,hp:h.stats.hitPoints,hit_dice:`${Math.floor(h.stats.extraHealthFromConstitution/h.stats.abilityScoreModifiers.constitution)}d${h.stats.hitDieSize} + ${h.stats.extraHealthFromConstitution}`,ac:h.stats.armorClass,speed:h.stats.speed,stats:[h.stats.abilityScores.strength,h.stats.abilityScores.dexterity,h.stats.abilityScores.constitution,h.stats.abilityScores.intelligence,h.stats.abilityScores.wisdom,h.stats.abilityScores.charisma],damage_immunities:(l=(o=h.stats.damageImmunities)==null?void 0:o.join("; ").toLowerCase().trim())!=null?l:"",damage_resistances:(c=(u=h.stats.damageResistances)==null?void 0:u.join(", ").toLowerCase().trim())!=null?c:"",damage_vulnerabilities:(g=(m=h.stats.damageVulnerabilities)==null?void 0:m.join(", ").toLowerCase().trim())!=null?g:"",condition_immunities:(y=(S=h.stats.conditionImmunities)==null?void 0:S.join(", ").toLowerCase().trim())!=null?y:"",saves:(_=($=h.stats.savingThrows)==null?void 0:$.map(R=>{var q;if(!(!("value"in R)&&!("modifier"in R)))return{[R.ability]:(q=R.value)!=null?q:R.modifier}}).filter(R=>R))!=null?_:[],skillsaves:(P=(v=h.stats.skills)==null?void 0:v.map(R=>{var q;if(!(!("value"in R)&&!("modifier"in R)))return{[R.name]:(q=R.value)!=null?q:R.modifier}}).filter(R=>R))!=null?P:[],senses:(C=(j=h.stats.senses)==null?void 0:j.join(", ").trim())!=null?C:"",languages:(b=(N=h.stats.languages)==null?void 0:N.join(", ").trim())!=null?b:"",cr:(B=h.stats.challengeRating)!=null?B:"",traits:(x=(V=h.stats.additionalAbilities)==null?void 0:V.map(R=>({name:R.name,desc:R.description.replace(/<[^>]*>/g,"")})))!=null?x:[],actions:(A=(L=h.stats.actions)==null?void 0:L.map(R=>({name:R.name,desc:R.description.replace(/<[^>]*>/g,"")})))!=null?A:[],reactions:(z=(d=h.stats.reactions)==null?void 0:d.map(R=>({name:R.name,desc:R.description.replace(/<[^>]*>/g,"")})))!=null?z:[],legendary_actions:(k=(G=h.stats.legendaryActions)==null?void 0:G.map(R=>({name:R.name,desc:R.description.replace(/<[^>]*>/g,"")})))!=null?k:[]};s.push(te)}catch(te){continue}t(s)}catch(W){n()}},r.readAsText(e)})}var Qn={str:"strength",dex:"dexterity",con:"constitution",wis:"wisdom",int:"intelligence",cha:"charisma"};function X(e){return e.replace(/{@condition (.+?)}/g,"$1").replace(/{@item (.+?)}/g,"$1").replace(/{@spell ([\\s\\S]+?)}/g,"$1").replace(/{@recharge (.+?)}/g,"(Recharge $1-6)").replace(/{@recharge}/g,"(Recharge 6)").replace(/{@h}/g,"").replace(/{@damage (.+?)}/g,"$1").replace(/{@atk ms}/g,"Melee Spell Attack").replace(/{@atk rs}/g,"Ranged Spell Attack").replace(/{@atk mw}/g,"Melee Weapon Attack").replace(/{@atk rw}/g,"Ranged Weapon Attack").replace(/{@atk mw,rw}/g,"Melee / Ranged Weapon Attack").replace(/{@creature (.+?)}/g,"$1").replace(/{@skill (.+?)}/g,"$1").replace(/{@dice (.+?)}/g,"$1").replace(/{@hit (\\d+?)}/g,"+$1").replace(/{@dc (\\d+?)}/g,"$1")}async function ln(e){return new Promise((t,n)=>{let r=new FileReader;r.onload=async i=>{var s,o,l,u,c,m,g,S,y,$,_,v,P,j,C,N,b,B,V;try{let x=JSON.parse(i.target.result),L;"monster"in x?L=x.monster:Array.isArray(x)?L=x:typeof x=="object"?L=[x]:n("Invalid monster JSON provided.");let A=[];for(let d of L)try{let z={image:null,name:d.name,source:`${(s=a[d.source])!=null?s:"Unknown"}`,type:d.type,subtype:"",size:Y[d.size],alignment:un(d),hp:(l=(o=d.hp)==null?void 0:o.average)!=null?l:"",hit_dice:(c=(u=d.hp)==null?void 0:u.formula)!=null?c:"",ac:Jn(d.ac),speed:rr(d),stats:[d.str,d.dex,d.con,d.int,d.wis,d.cha],damage_immunities:X(Me(d.immune)),damage_resistances:X(Me(d.resist)),damage_vulnerabilities:X(Me(d.vulnerable)),condition_immunities:X(Me(d.conditionImmune)),saves:Object.entries((m=d.save)!=null?m:{}).map(G=>{let[,k]=G[1].match(/.*(\\d+)/);return{[Qn[G[0]]]:k}}),skillsaves:Object.fromEntries(Object.entries((g=d.skill)!=null?g:{}).map(([G,k])=>{let[,W]=k.match(/.*(\\d+)/);return[G,W]})),senses:(y=(S=d.senses)==null?void 0:S.join(", ").trim())!=null?y:"",languages:(_=($=d.languages)==null?void 0:$.join(", ").trim())!=null?_:"",cr:d.cr?d.cr.cr||d.cr:"",traits:(P=(v=d.trait)==null?void 0:v.flatMap(Ie))!=null?P:[],actions:(C=(j=d.action)==null?void 0:j.flatMap(Ie))!=null?C:[],reactions:(b=(N=d.reaction)==null?void 0:N.flatMap(Ie))!=null?b:[],legendary_actions:(V=(B=d.legendary)==null?void 0:B.flatMap(Ie))!=null?V:[],spells:nr(d)};A.push(z)}catch(z){continue}t(A)}catch(x){console.error("reject!!!",x),n(x)}},r.readAsText(e)})}function Me(e){if(!e)return"";let t=[];for(let n of e)typeof n=="string"&&t.push(n),n.immune&&t.push(n.immune.join(", ")+n.note?` ${n.note}`:"");return t.join(", ")}function Jn(e=[]){let[t]=e;return typeof t=="number"?t:t.ac}var er={"0":"Cantrips (at will)","1":"1st level","2":"2nd level","3":"3rd level","4":"4th level","5":"5th level","6":"6th level","7":"7th level","8":"8th level","9":"9th level"};function tr(e){var n;let t=[X(((n=e.headerEntries)!=null?n:[]).join(`\n`))];if(e.name==="Spellcasting")try{t.push(...Object.entries(e.spells).map(([r,{slots:i,spells:s}])=>{let o=`${er[r]}`;o+=i!=null?` (${i} slots)`:"";let l=X(s.join(", "));return{[o]:l}}))}catch(r){throw new Error("There was an error parsing the spells.")}else{if(e.will.length>0)try{t.push({"At will":X(e.will.join(", "))})}catch(r){throw new Error("There was an error parsing the at-will spells.")}if(Object.keys(e.daily).length>0)try{t.push(...Object.entries(e.daily).map(([r,i])=>{let s=`Daily (${r})`,o=X(i.join(", "));return{[s]:o}}))}catch(r){throw new Error("There was an error parsing the daily spells.")}}return t}function nr(e){return!e.spellcasting||!e.spellcasting.length?[]:e.spellcasting.flatMap(tr)}function un(e){var t;if(!e)return null;if(typeof e=="object")return e.special!=null?e.special:`${((t=e.alignment)!=null?t:[]).map(n=>un(n)).join(" ")}${e.chance?` (${e.chance}%)`:""}${e.note?` (${e.note})`:""}`;switch(e=e.toUpperCase(),e){case"L":return"lawful";case"N":return"neutral";case"NX":return"neutral (law/chaos axis)";case"NY":return"neutral (good/evil axis)";case"C":return"chaotic";case"G":return"good";case"E":return"evil";case"U":return"unaligned";case"A":return"any alignment"}return e}function rr(e){if(e.speed==null)return"\\u2014";function t(s){function o(l){i.push(`${s==="walk"?"":`${s} `}${n(l)} ft.${r(l)}`)}(e.speed[s]||s==="walk")&&o(e.speed[s]||0),e.speed.alternate&&e.speed.alternate[s]&&e.speed.alternate[s].forEach(o)}function n(s){return s.number!=null?s.number:s}function r(s){return""}let i=[];if(typeof e.speed=="object"){let s=", ";return t("walk"),t("burrow"),t("climb"),t("fly"),t("swim"),e.speed.choose&&(s="; ",i.push(`${e.speed.choose.from.sort().joinConjunct(", "," or ")} ${e.speed.choose.amount} ft.${e.speed.choose.note?` ${e.speed.choose.note}`:""}`)),i.join(s)+(e.speed.note?` ${e.speed.note}`:"")}else return e.speed+(e.speed==="Varies"?"":" ft. ")}function Ie(e){return e.entries.reduce((n,r)=>{if(typeof r!="string"){let s=r.items.map(o=>"entry"in o?{name:o.name,entries:[o.entry]}:{name:o.name,entries:o.entries});return n.concat(s)}return n.length>1||n[0].entries.push(r),n},[{name:e.name,entries:[]}]).map(({name:n,entries:r})=>({name:X(n),desc:X(r.join(`\n`))}))}var ir="F",sr="D",ar="T",or="S",cr="M",lr="L",ur="H",mr="G",pr="C",fr="V",Y={};Y[ir]="Fine";Y[sr]="Diminutive";Y[ar]="Tiny";Y[or]="Small";Y[cr]="Medium";Y[lr]="Large";Y[ur]="Huge";Y[mr]="Gargantuan";Y[pr]="Colossal";Y[fr]="Varies";var hr="CoS",gr="DMG",dr="EEPC",Sr="EET",vr="HotDQ",Rr="LMoP",yr="Mag",Er="MM",_r="OotA",Cr="PHB",Tr="PotA",Ar="RoT",Nr="RoTOS",br="SCAG",wr="SKT",Dr="ToA",xr="ToD",$r="TTP",Mr="TftYP",Ir="TftYP-AtG",Or="TftYP-DiT",Pr="TftYP-TFoF",Ur="TftYP-THSoT",Fr="TftYP-TSC",kr="TftYP-ToH",Lr="TftYP-WPM",Gr="VGM",Wr="XGE",jr="OGA",Br="MTF",Vr="WDH",zr="WDMM",Hr="GGR",Yr="KKW",Xr="LLK",Kr="GoS",Zr="AI",qr="OoW",Qr="ESK",Jr="DIP",ei="HftT",ti="DC",ni="SLW",ri="SDW",ii="BGDIA",si="LR",ai="AL",oi="SAC",ci="ERLW",li="EFR",ui="RMBRE",mi="RMR",pi="MFF",fi="AWM",hi="IMR",gi="SADS",di="EGW",Si="ToR",vi="DD",Ri="FS",yi="US",Ei="MOT",_i="IDRotF",Ci="TCE",Ti="VRGR",Ai="HoL",Ni="Screen",bi="ScreenWildernessKit",wi="HF",Di="CM",Qe="AL",xi=`${Qe}CurseOfStrahd`,$i=`${Qe}ElementalEvil`,Mi=`${Qe}RageOfDemons`,pe="PS",Ii=`${pe}A`,Oi=`${pe}I`,Pi=`${pe}K`,Ui=`${pe}Z`,Fi=`${pe}X`,ki=`${pe}D`,p="UA",Li=`${p}Artificer`,Gi=`${p}EladrinAndGith`,Wi=`${p}Eberron`,ji=`${p}FeatsForRaces`,Bi=`${p}FeatsForSkills`,Vi=`${p}FiendishOptions`,zi=`${p}Feats`,Hi=`${p}GothicHeroes`,Yi=`${p}ModernMagic`,Xi=`${p}StarterSpells`,Ki=`${p}TheMysticClass`,Zi=`${p}ThatOldBlackMagic`,qi=`${p}TheRangerRevised`,Qi=`${p}WaterborneAdventures`,Ji=`${p}VariantRules`,es=`${p}LightDarkUnderdark`,ts=`${p}RangerAndRogue`,ns=`${p}ATrioOfSubclasses`,rs=`${p}BarbarianPrimalPaths`,is=`${p}RevisedSubclasses`,ss=`${p}KitsOfOld`,as=`${p}BardBardColleges`,os=`${p}ClericDivineDomains`,cs=`${p}Druid`,ls=`${p}RevisedClassOptions`,us=`${p}Fighter`,ms=`${p}Monk`,ps=`${p}Paladin`,fs=`${p}ModifyingClasses`,hs=`${p}Sorcerer`,gs=`${p}WarlockAndWizard`,ds=`${p}TheFaithful`,Ss=`${p}WizardRevisited`,vs=`${p}ElfSubraces`,Rs=`${p}MassCombat`,ys=`${p}ThreePillarExperience`,Es=`${p}GreyhawkInitiative`,_s=`${p}ThreeSubclasses`,Cs=`${p}OrderDomain`,Ts=`${p}CentaursMinotaurs`,As=`${p}GiantSoulSorcerer`,Ns=`${p}RacesOfEberron`,bs=`${p}RacesOfRavnica`,ws=`${p}WGE`,Ds=`${p}OfShipsAndSea`,xs=`${p}Sidekicks`,$s=`${p}ArtificerRevisited`,Ms=`${p}BarbarianAndMonk`,Is=`${p}SorcererAndWarlock`,Os=`${p}BardAndPaladin`,Ps=`${p}ClericDruidWizard`,Us=`${p}FighterRangerRogue`,Fs=`${p}ClassFeatureVariants`,ks=`${p}FighterRogueWizard`,Ls=`${p}PrestigeClassesRunMagic`,Gs=`${p}Ranger`,Ws=`${p}2020SubclassesPt1`,js=`${p}2020SubclassesPt2`,Bs=`${p}2020SubclassesPt3`,Vs=`${p}2020SubclassesPt4`,zs=`${p}2020SubclassesPt5`,Hs=`${p}2020SpellsAndMagicTattoos`,Ys=`${p}2020PsionicOptionsRevisited`,Xs=`${p}2020SubclassesRevisited`,Ks=`${p}2020Feats`,Zs=`${p}2021GothicLineages`,qs=`${p}2021FolkOfTheFeywild`,Qs=`${p}2021DraconicOptions`,Js=`${p}2021MagesOfStrixhaven`,Je="Adventurers League: ",fe="Plane Shift: ",f="Unearthed Arcana: ",ee="Tales from the Yawning Portal",a={};a[hr]="Curse of Strahd";a[gr]="Dungeon Master\'s Guide";a[dr]="Elemental Evil Player\'s Companion";a[Sr]="Elemental Evil: Trinkets";a[vr]="Hoard of the Dragon Queen";a[Rr]="Lost Mine of Phandelver";a[yr]="Dragon Magazine";a[Er]="Monster Manual";a[_r]="Out of the Abyss";a[Cr]="Player\'s Handbook";a[Tr]="Princes of the Apocalypse";a[Ar]="The Rise of Tiamat";a[Nr]="The Rise of Tiamat Online Supplement";a[br]="Sword Coast Adventurer\'s Guide";a[wr]="Storm King\'s Thunder";a[Dr]="Tomb of Annihilation";a[xr]="Tyranny of Dragons";a[$r]="The Tortle Package";a[Mr]=ee;a[Ir]=`${ee}: Against the Giants`;a[Or]=`${ee}: Dead in Thay`;a[Pr]=`${ee}: The Forge of Fury`;a[Ur]=`${ee}: The Hidden Shrine of Tamoachan`;a[Fr]=`${ee}: The Sunless Citadel`;a[kr]=`${ee}: Tomb of Horrors`;a[Lr]=`${ee}: White Plume Mountain`;a[Gr]="Volo\'s Guide to Monsters";a[Wr]="Xanathar\'s Guide to Everything";a[jr]="One Grung Above";a[Br]="Mordenkainen\'s Tome of Foes";a[Vr]="Waterdeep: Dragon Heist";a[zr]="Waterdeep: Dungeon of the Mad Mage";a[Hr]="Guildmasters\' Guide to Ravnica";a[Yr]="Krenko\'s Way";a[Xr]="Lost Laboratory of Kwalish";a[Kr]="Ghosts of Saltmarsh";a[Zr]="Acquisitions Incorporated";a[qr]="The Orrery of the Wanderer";a[Qr]="Essentials Kit";a[Jr]="Dragon of Icespire Peak";a[ei]="Hunt for the Thessalhydra";a[ti]="Divine Contention";a[ni]="Storm Lord\'s Wrath";a[ri]="Sleeping Dragon\'s Wake";a[ii]="Baldur\'s Gate: Descent Into Avernus";a[si]="Locathah Rising";a[ai]="Adventurers\' League";a[oi]="Sage Advice Compendium";a[ci]="Eberron: Rising from the Last War";a[li]="Eberron: Forgotten Relics";a[ui]="The Lost Dungeon of Rickedness: Big Rick Energy";a[mi]="Dungeons & Dragons vs. Rick and Morty: Basic Rules";a[pi]="Mordenkainen\'s Fiendish Folio";a[fi]="Adventure with Muk";a[hi]="Infernal Machine Rebuild";a[gi]="Sapphire Anniversary Dice Set";a[di]="Explorer\'s Guide to Wildemount";a[Si]="Tide of Retribution";a[vi]="Dangerous Designs";a[Ri]="Frozen Sick";a[yi]="Unwelcome Spirits";a[Ei]="Mythic Odysseys of Theros";a[_i]="Icewind Dale: Rime of the Frostmaiden";a[Ci]="Tasha\'s Cauldron of Everything";a[Ti]="Van Richten\'s Guide to Ravenloft";a[Ai]="The House of Lament";a[Ni]="Dungeon Master\'s Screen";a[bi]="Dungeon Master\'s Screen: Wilderness Kit";a[wi]="Heroes\' Feast";a[Di]="Candlekeep Mysteries";a[xi]=`${Je}Curse of Strahd`;a[$i]=`${Je}Elemental Evil`;a[Mi]=`${Je}Rage of Demons`;a[Ii]=`${fe}Amonkhet`;a[Oi]=`${fe}Innistrad`;a[Pi]=`${fe}Kaladesh`;a[Ui]=`${fe}Zendikar`;a[Fi]=`${fe}Ixalan`;a[ki]=`${fe}Dominaria`;a[Li]=`${f}Artificer`;a[Gi]=`${f}Eladrin and Gith`;a[Wi]=`${f}Eberron`;a[ji]=`${f}Feats for Races`;a[Bi]=`${f}Feats for Skills`;a[Vi]=`${f}Fiendish Options`;a[zi]=`${f}Feats`;a[Hi]=`${f}Gothic Heroes`;a[Yi]=`${f}Modern Magic`;a[Xi]=`${f}Starter Spells`;a[Ki]=`${f}The Mystic Class`;a[Zi]=`${f}That Old Black Magic`;a[qi]=`${f}The Ranger, Revised`;a[Qi]=`${f}Waterborne Adventures`;a[Ji]=`${f}Variant Rules`;a[es]=`${f}Light, Dark, Underdark!`;a[ts]=`${f}Ranger and Rogue`;a[ns]=`${f}A Trio of Subclasses`;a[rs]=`${f}Barbarian Primal Paths`;a[is]=`${f}Revised Subclasses`;a[ss]=`${f}Kits of Old`;a[as]=`${f}Bard: Bard Colleges`;a[os]=`${f}Cleric: Divine Domains`;a[cs]=`${f}Druid`;a[ls]=`${f}Revised Class Options`;a[us]=`${f}Fighter`;a[ms]=`${f}Monk`;a[ps]=`${f}Paladin`;a[fs]=`${f}Modifying Classes`;a[hs]=`${f}Sorcerer`;a[gs]=`${f}Warlock and Wizard`;a[ds]=`${f}The Faithful`;a[Ss]=`${f}Wizard Revisited`;a[vs]=`${f}Elf Subraces`;a[Rs]=`${f}Mass Combat`;a[ys]=`${f}Three-Pillar Experience`;a[Es]=`${f}Greyhawk Initiative`;a[_s]=`${f}Three Subclasses`;a[Cs]=`${f}Order Domain`;a[Ts]=`${f}Centaurs and Minotaurs`;a[As]=`${f}Giant Soul Sorcerer`;a[Ns]=`${f}Races of Eberron`;a[bs]=`${f}Races of Ravnica`;a[ws]="Wayfinder\'s Guide to Eberron";a[Ds]=`${f}Of Ships and the Sea`;a[xs]=`${f}Sidekicks`;a[$s]=`${f}Artificer Revisited`;a[Ms]=`${f}Barbarian and Monk`;a[Is]=`${f}Sorcerer and Warlock`;a[Os]=`${f}Bard and Paladin`;a[Ps]=`${f}Cleric, Druid, and Wizard`;a[Us]=`${f}Fighter, Ranger, and Rogue`;a[Fs]=`${f}Class Feature Variants`;a[ks]=`${f}Fighter, Rogue, and Wizard`;a[Ls]=`${f}Prestige Classes and Rune Magic`;a[Gs]=`${f}Ranger`;a[Ws]=`${f}2020 Subclasses, Part 1`;a[js]=`${f}2020 Subclasses, Part 2`;a[Bs]=`${f}2020 Subclasses, Part 3`;a[Vs]=`${f}2020 Subclasses, Part 4`;a[zs]=`${f}2020 Subclasses, Part 5`;a[Hs]=`${f}2020 Spells and Magic Tattoos`;a[Ys]=`${f}2020 Psionic Options Revisited`;a[Xs]=`${f}2020 Subclasses Revisited`;a[Ks]=`${f}2020 Feats`;a[Zs]=`${f}2021 Gothic Lineages`;a[qs]=`${f}2021 Folk of the Feywild`;a[Qs]=`${f}2021 Draconic Options`;a[Js]=`${f}2021 Mages of Strixhaven`;var mn={"0":{cr:"0",value:0,xp:0},"1/8":{cr:"1/8",value:.125,xp:25},"1/4":{cr:"1/4",value:.25,xp:50},"1/2":{cr:"1/2",value:.5,xp:100},"0.125":{cr:"1/8",value:.125,xp:25},"0.25":{cr:"1/4",value:.25,xp:50},"0.5":{cr:"1/2",value:.5,xp:100},"1":{cr:"1",value:1,xp:200},"2":{cr:"2",value:2,xp:450},"3":{cr:"3",value:3,xp:700},"4":{cr:"4",value:4,xp:1100},"5":{cr:"5",value:5,xp:1800},"6":{cr:"6",value:6,xp:2300},"7":{cr:"7",value:7,xp:2900},"8":{cr:"8",value:8,xp:3900},"9":{cr:"9",value:9,xp:5e3},"10":{cr:"10",value:10,xp:5900},"11":{cr:"11",value:11,xp:7200},"12":{cr:"12",value:12,xp:8400},"13":{cr:"13",value:13,xp:1e4},"14":{cr:"14",value:14,xp:11500},"15":{cr:"15",value:15,xp:13e3},"16":{cr:"16",value:16,xp:15e3},"17":{cr:"17",value:17,xp:18e3},"18":{cr:"18",value:18,xp:2e4},"19":{cr:"19",value:19,xp:22e3},"20":{cr:"20",value:20,xp:25e3},"21":{cr:"21",value:21,xp:33e3},"22":{cr:"22",value:22,xp:41e3},"23":{cr:"23",value:23,xp:5e4},"24":{cr:"24",value:24,xp:62e3},"25":{cr:"25",value:25,xp:75e3},"26":{cr:"26",value:26,xp:9e4},"27":{cr:"27",value:27,xp:105e3},"28":{cr:"28",value:28,xp:12e4},"29":{cr:"29",value:29,xp:135e3},"30":{cr:"30",value:30,xp:155e3}};function Z(e){return Math.floor(((e!=null?e:10)-10)/2)}var pn={tiny:4,small:6,medium:8,large:10,huge:12,gargantuan:20},ea={str:"strength",dex:"dexterity",con:"constitution",int:"intelligence",wis:"wisdom",cha:"charisma"},Oe=class{constructor(t){this.monster=t;this.proficiency=this.getProf(this.monster);this.stats={str:this.monster.strPoints,dex:this.monster.dexPoints,con:this.monster.conPoints,int:this.monster.intPoints,wis:this.monster.wisPoints,cha:this.monster.chaPoints};this.modifiers={str:Z(this.stats.str),dex:Z(this.stats.dex),con:Z(this.stats.con),int:Z(this.stats.int),wis:Z(this.stats.wis),cha:Z(this.stats.cha)}}static parse(t){var i,s,o,l,u,c;let n=new Oe(t);return{image:null,name:t.name,source:"TetraCube",type:t.type,subtype:"",size:t.size,alignment:t.alignment,hp:(i=n.getHP(t))==null?void 0:i.hp,hit_dice:(s=n.getHP(t))==null?void 0:s.dice,ac:(u=(l=((o=t.ac)!=null?o:[])[0])==null?void 0:l.ac)!=null?u:"",speed:n.getSpeedString(t),stats:[t.strPoints,t.dexPoints,t.conPoints,t.intPoints,t.wisPoints,t.chaPoints],damage_immunities:n.parseImmune(t,"i"),damage_resistances:n.parseImmune(t,"r"),damage_vulnerabilities:n.parseImmune(t,"v"),condition_immunities:n.parseConditions(t),saves:n.getSaves(t),skillsaves:n.getSkills(t),senses:n.getSenses(t),languages:n.getLanguages(t),cr:(c=t.cr)!=null?c:"",traits:n.getTraits(t.abilities),actions:n.getTraits(t.actions),reactions:n.getTraits(t.reactions),legendary_actions:n.getTraits(t.legendaries),spells:n.getSpells(t.abilities)}}getHP(t){var n,r;if(t.customHP||t.hitDice&&/(\\d+) \\((.+)\\)/.test(t.hpText)){let[i,s,o]=(n=t.hpText.match(/(\\d+) \\((.+)\\)/))!=null?n:[];return{hp:s,dice:o}}if(t.hitDice){let i=Number(t.hitDice),s=(r=pn[t.size])!=null?r:pn.medium,o=this.modifiers.con,l=i*s/(2+.5)+o*i,u=o>0?"+":"-",c=o==0?"":` ${u} ${o*i}`;return{hp:l,dice:`${i}d${s}${c}`}}}getSpeedString(t){if(t.customSpeed)return t.speedDesc;let n=[t.speed+" ft."];return t.burrowSpeed>0&&n.push("burrow "+t.burrowSpeed+" ft."),t.climbSpeed>0&&n.push("climb "+t.climbSpeed+" ft."),t.flySpeed>0&&n.push("fly "+t.flySpeed+" ft."+(t.hover?" (hover)":"")),t.swimSpeed>0&&n.push("swim "+t.swimSpeed+" ft."),n.join(", ")}parseImmune(t,n){let r=[];"damagetypes"in t&&Array.isArray(t.damagetypes)&&r.push(...t.damagetypes.filter(s=>s.type==n).map(s=>s.name));let i=[];return"specialdamage"in t&&Array.isArray(t.specialdamage)&&i.push(...t.specialdamage.filter(s=>s.type==n).map(s=>s.name)),[r.join(", "),i.join(", ")].filter(s=>s&&s.length).join("; ")}getLanguages(t){let n=[],r=[],i=[];for(let s=0;s<t.languages.length;s++){let o=t.languages[s];o.speaks||o.speaks==null?r.push(o):i.push(o)}return r.length>0&&n.push([r.slice(0,r.length-2).map(s=>s.name).join(", "),r.slice(-1).map(s=>s.name)].filter(s=>s).join(" and ")),i.length>0&&n.push([i.slice(0,i.length-2).map(s=>s.name).join(", "),i.slice(-1).map(s=>s.name)].filter(s=>s).join(" and ")),t.telepathy>0&&n.push("telepathy "+t.telepathy+" ft."),n.length==0&&n.push("&mdash;"),n.join("; ")}getSenses(t){let n=[];t.blindsight>0&&n.push("blindsight "+t.blindsight+" ft."+(t.blind?" (blind beyond this radius)":"")),t.darkvision>0&&n.push("darkvision "+t.darkvision+" ft."),t.tremorsense>0&&n.push("tremorsense "+t.tremorsense+" ft."),t.truesight>0&&n.push("truesight "+t.truesight+" ft.");let r=t.skills.find(s=>s.name=="perception"),i=10+Z(t.wisPoints);return r!=null&&(i+=this.proficiency*("note"in r?2:1)),n.push("passive Perception "+i),n.join(", ")}transformString(t){return t.replace(/(_|\\*|\\s*>\\s*)/g,"").replace(/\\[MON(S)?\\]/g,`${this.monster.shortName&&this.monster.shortName.length?this.monster.shortName:this.monster.name}$1`).replace(/\\[(\\w+)\\]/g,(n,r)=>{if(r=r.toLowerCase(),!(r in this.modifiers))return n;let i=this.modifiers[r];return`${i>=0?"+":""}${i}`}).replace(/\\[(\\w+) (ATK|SAVE)\\s?(?:([+-])\\s?(\\d+))?\\]/g,(n,r,i="ATK",s="+",o=0)=>{if(r=r.toLowerCase(),!(r in this.modifiers))return n;o=s=="+"?Number(o):-Number(o);let l=(i=="ATK"?0:8)+this.modifiers[r]+this.proficiency+o;return`${l>=0?"+":""}${l}`}).replace(/\\[(\\w+)?\\s?(\\d*[dD]\\d+)\\s?(?:([+-])\\s?(\\d+))?\\]/g,(n,r,i,s="+",o=0)=>{var g;r=r.toLowerCase();let[,l=1,u]=(g=i.match(/(\\d*)[dD](\\d+)/))!=null?g:[];if(l||(l=1),!u)return n;o=s=="+"?Number(o):-Number(o),r in this.modifiers&&(o+=this.modifiers[r]);let c=Math.floor((u/2+.5)*l)+o,m=[`${l}d${u}`];return o&&o!=0&&(m.push(o>=0?"+":"-"),m.push(o)),`${c} (${m.join(" ")})`})}getTraits(t){return!t||!t.length?void 0:t.filter(r=>r.name!="Spellcasting").map(r=>({name:r.name,desc:this.transformString(r.desc)}))}getSpells(t){var i;if(!t.abilities||!t.abilities.length)return;let{desc:n}=(i=t.abilities.find(s=>s.name=="Spellcasting"))!=null?i:{};return n?this.transformString(n).trim().split(`\n`).filter(s=>s.length):void 0}getSaves(t){if(!("sthrows"in t)||!Array.isArray(t.sthrows)||!t.sthrows.length)return[];let n=this.proficiency,r=[];for(let i of t.sthrows){let s=i.name,o=Z(Number(t[`${s}Points`]));isNaN(o)||r.push({[ea[s]]:o+n})}return r}getSkills(t){if(!("skills"in t)||!Array.isArray(t.skills)||!t.skills.length)return[];let n=[],r=this.proficiency;for(let i of t.skills){let s=i.stat,o=Z(Number(t[`${s}Points`]));if(isNaN(o))continue;let l="note"in i;n.push({[i.name]:r+o+o*Number(l)})}return n}getProf(t){var r,i;let n=0;return t.cr=="*"&&(n=t.customProf),"cr"in t&&t.cr in mn&&(n=Math.max(Math.floor(2+(((i=(r=mn[t.cr])==null?void 0:r.value)!=null?i:0)-1)/4),2)),isNaN(Number(n))?0:Number(n)}parseConditions(t){if("conditions"in t&&Array.isArray(t.conditions))return t.conditions.map(n=>n.name).join(", ")}};async function fn(e){return new Promise((t,n)=>{let r=new FileReader,i=[];r.onload=async s=>{try{let o=JSON.parse(s.target.result),l;"monster"in o?l=o.monster:Array.isArray(o)?l=o:typeof o=="object"?l=[o]:n("Invalid monster JSON provided.");let u=[];for(let c of l)try{let m=Oe.parse(c);u.push(m)}catch(m){console.error(m);continue}t(u)}catch(o){console.error("reject!!!",o),n(o)}},r.readAsText(e)})}var et=self;et.onmessage=async e=>{if(!e.data)return;let{files:t,source:n}=e.data,r=[];for(let i of t)switch(n){case"5e":{let s=await ln(i);r.push(...s!=null?s:[]);break}case"critter":{let s=await cn(i);r.push(...s!=null?s:[]);break}case"improved":{let s=await on(i);r.push(...s!=null?s:[]);break}case"appfile":{let s=await sn(i);r.push(...s!=null?s:[]);break}case"tetra":{let s=await fn(i);r.push(...s!=null?s:[]);break}}et.postMessage({monsters:r})};et.addEventListener("unhandledrejection",function(e){throw e.reason});\n');
}

// src/importers/importer.ts
var import_obsidian18 = __toModule(require("obsidian"));
var SourcePromptModal = class extends import_obsidian18.Modal {
  constructor() {
    super(...arguments);
    this.saved = false;
  }
  display() {
    this.titleEl.createSpan({ text: "Set Sources" });
    new import_obsidian18.Setting(this.contentEl).setName("A source could not be found for some imported monsters. Do you wish to manually add one?").addText((t) => {
      t.setPlaceholder("Unknown").onChange((v) => {
        this.source = v;
      });
    });
    this.buildButtons(this.contentEl);
  }
  buildButtons(el) {
    new import_obsidian18.Setting(el).addButton((b) => b.setCta().setIcon("checkmark").setTooltip("Save").onClick(() => {
      this.saved = true;
      this.close();
    })).addExtraButton((b) => b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.close();
    }));
  }
  onOpen() {
    this.display();
  }
};
var getSourceFromPrompt = async (app) => {
  return new Promise((resolve) => {
    const modal = new SourcePromptModal(app);
    modal.onClose = () => {
      if (!modal.saved)
        resolve(null);
      resolve(modal.source);
    };
    modal.open();
  });
};
var Importer = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.workers = new Map();
  }
  async import(files, source) {
    return new Promise((resolve) => {
      const worker = new Worker2();
      const id = nanoid();
      this.workers.set(id, worker);
      worker.onmessage = async (event) => {
        const { monsters } = event.data ?? {
          monsters: []
        };
        if (monsters) {
          new import_obsidian18.Notice(`Successfully imported ${monsters.length} Monsters`);
          const sourceless = monsters.filter((monster) => monster.source == "Unknown" || !monster.source);
          let source2;
          if (sourceless.length && (source2 = await getSourceFromPrompt(this.plugin.app))) {
            sourceless.forEach((monster) => monster.source = source2);
          }
        }
        worker.terminate();
        this.workers.delete(id);
        resolve(monsters);
      };
      worker.onerror = (e) => {
        new import_obsidian18.Notice(`There was an error importing the file.

${e.message}`);
        worker.terminate();
        this.workers.delete(id);
        resolve([]);
      };
      worker.postMessage({ files, source });
    });
  }
};

// src/util/folder.ts
var import_obsidian20 = __toModule(require("obsidian"));

// src/util/generic_suggester.ts
var import_obsidian19 = __toModule(require("obsidian"));

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element2 = state.elements[name];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element2.removeAttribute(name2);
      } else {
        element2.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element2 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element2, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element2) && includeScale) {
    var offsetHeight = element2.offsetHeight;
    var offsetWidth = element2.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle2(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance23 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance23.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance23.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance23.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance23.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash2 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash3 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash3[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element2) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle2(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element2) {
  var rect = getBoundingClientRect(element2);
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip2(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip2,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = round(rect.width) / element2.offsetWidth || 1;
  var scaleY = round(rect.height) / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort2(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort2(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort2(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce2(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
      return self2.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance23 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance23.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance23
            }) || state;
          }
        }
      },
      update: debounce2(function() {
        return new Promise(function(resolve) {
          instance23.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance23;
    }
    instance23.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance23,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance23;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/util/generic_suggester.ts
var Suggester = class {
  constructor(owner, containerEl, scope) {
    this.containerEl = containerEl;
    this.owner = owner;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", () => {
      this.setSelectedItem(this.selectedItem - 1, true);
      return false;
    });
    scope.register([], "ArrowDown", () => {
      this.setSelectedItem(this.selectedItem + 1, true);
      return false;
    });
    scope.register([], "Enter", (evt) => {
      this.useSelectedItem(evt);
      return false;
    });
    scope.register([], "Tab", (evt) => {
      this.chooseSuggestion(evt);
      return false;
    });
  }
  chooseSuggestion(evt) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.onChooseSuggestion(currentValue, evt);
    }
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(event, el) {
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  empty() {
    this.containerEl.empty();
  }
  setSuggestions(items) {
    this.containerEl.empty();
    const els = [];
    items.forEach((item) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(item, suggestionEl);
      els.push(suggestionEl);
    });
    this.items = items;
    this.suggestions = els;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  wrap(value, size) {
    return (value % size + size) % size;
  }
  setSelectedItem(index, scroll) {
    const nIndex = this.wrap(index, this.suggestions.length);
    const prev = this.suggestions[this.selectedItem];
    const next2 = this.suggestions[nIndex];
    if (prev)
      prev.removeClass("is-selected");
    if (next2)
      next2.addClass("is-selected");
    this.selectedItem = nIndex;
    if (scroll) {
      next2.scrollIntoView(false);
    }
  }
};
var SuggestionModal = class extends import_obsidian19.FuzzySuggestModal {
  constructor(app, inputEl, items) {
    super(app);
    this.items = [];
    this.scope = new import_obsidian19.Scope();
    this.emptyStateText = "No match found";
    this.limit = 100;
    this.inputEl = inputEl;
    this.items = items;
    this.suggestEl = createDiv("suggestion-container");
    this.contentEl = this.suggestEl.createDiv("suggestion");
    this.suggester = new Suggester(this, this.contentEl, this.scope);
    this.scope.register([], "Escape", this.onEscape.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onFocus.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  empty() {
    this.suggester.empty();
  }
  onInputChanged() {
    if (this.shouldNotOpen)
      return;
    const inputStr = this.modifyInput(this.inputEl.value);
    const suggestions = this.getSuggestions(inputStr);
    if (suggestions.length > 0) {
      this.suggester.setSuggestions(suggestions.slice(0, this.limit));
    } else {
      this.onNoSuggestion();
    }
    this.open();
  }
  onFocus() {
    this.shouldNotOpen = false;
    this.onInputChanged();
  }
  modifyInput(input) {
    return input;
  }
  onNoSuggestion() {
    this.empty();
    this.renderSuggestion(null, this.contentEl.createDiv("suggestion-item"));
  }
  open() {
    this.app.keymap.pushScope(this.scope);
    document.body.appendChild(this.suggestEl);
    this.popper = createPopper(this.inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 10]
          }
        },
        {
          name: "flip",
          options: {
            fallbackPlacements: ["top"]
          }
        }
      ]
    });
  }
  onEscape() {
    this.close();
    this.shouldNotOpen = true;
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggester.setSuggestions([]);
    if (this.popper) {
      this.popper.destroy();
    }
    this.suggestEl.detach();
  }
  createPrompt(prompts) {
    if (!this.promptEl)
      this.promptEl = this.suggestEl.createDiv("prompt-instructions");
    let prompt = this.promptEl.createDiv("prompt-instruction");
    for (let p of prompts) {
      prompt.appendChild(p);
    }
  }
};

// src/util/folder.ts
var FolderSuggestionModal = class extends SuggestionModal {
  constructor(app, input, items) {
    super(app, input.inputEl, items);
    this.folders = [...items];
    this.text = input;
    this.inputEl.addEventListener("input", () => this.getFolder());
  }
  getFolder() {
    const v = this.inputEl.value, folder = this.app.vault.getAbstractFileByPath(v);
    if (folder == this.folder)
      return;
    if (!(folder instanceof import_obsidian20.TFolder))
      return;
    this.folder = folder;
    this.onInputChanged();
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item) {
    this.text.setValue(item.path);
    this.folder = item;
  }
  selectSuggestion({ item }) {
    let link = item.path;
    this.text.setValue(link);
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    let pathLength = item.path.length - item.name.length;
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = pathLength; i < item.path.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.path.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.path[i]);
    }
    el.createDiv({
      cls: "suggestion-note",
      text: item.path
    });
  }
  getItems() {
    return this.folders;
  }
};

// src/layouts/fateCore.ts
var StatblockFateCore = [
  {
    type: "inline",
    id: nanoid(),
    properties: [],
    hasRule: true,
    nested: [
      {
        type: "group",
        id: nanoid(),
        properties: ["name", "description", "aspects", "temporaryAspects"],
        nested: [
          {
            type: "heading",
            id: nanoid(),
            properties: ["name"],
            conditioned: true
          },
          {
            type: "text",
            id: nanoid(),
            properties: ["description"],
            conditioned: true,
            markdown: true,
            text: null,
            dice: false
          },
          {
            type: "text",
            id: nanoid(),
            properties: ["aspects"],
            markdown: true,
            text: null,
            dice: false,
            conditioned: true
          },
          {
            type: "text",
            id: nanoid(),
            properties: ["temporaryAspects"],
            markdown: true,
            text: null,
            dice: false,
            conditioned: true
          }
        ],
        conditioned: true
      },
      {
        type: "image",
        id: nanoid(),
        properties: ["image"],
        conditioned: true
      }
    ]
  },
  {
    type: "table",
    id: nanoid(),
    properties: ["stress"],
    headers: ["Physical", "Mental"],
    calculate: false,
    hasRule: true,
    conditioned: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["consequences"],
    conditioned: true,
    heading: "Consequences"
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["skills"],
    conditioned: true,
    hasRule: false,
    heading: "Skills"
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["stunts"],
    markdown: true,
    dice: false,
    conditioned: true,
    heading: "Stunts"
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["items"],
    heading: "Items",
    conditioned: true,
    markdown: true,
    dice: false
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["extras"],
    heading: "Extras",
    conditioned: true,
    markdown: true,
    dice: false
  }
];
var LayoutFateCore = {
  blocks: StatblockFateCore,
  name: "Basic Fate Core Layout"
};

// src/layouts/index.ts
var DefaultLayouts = [
  Layout5e,
  LayoutFateCore
];

// src/settings/settings.ts
var import_fast_copy4 = __toModule(require_fast_copy());
var StatblockSettingTab = class extends import_obsidian21.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.results = [];
    this.resources = (0, import_fast_copy4.default)(this.plugin.sorted);
    this.displayed = new Set(this.plugin.sources);
    this.importer = new Importer(this.plugin);
  }
  async display() {
    try {
      let { containerEl } = this;
      containerEl.empty();
      containerEl.addClass("statblock-settings");
      containerEl.createEl("h2", { text: "TTRPG Statblock Settings" });
      this.generateTopSettings(containerEl.createDiv());
      this.generateParseSettings(containerEl.createDiv());
      this.generateLayouts(containerEl.createDiv());
      this.generateImports(containerEl.createDiv());
      this.generateMonsters(containerEl.createDiv());
      const div = containerEl.createDiv("coffee");
      div.createEl("a", {
        href: "https://www.buymeacoffee.com/valentine195"
      }).createEl("img", {
        attr: {
          src: "https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=\u2615&slug=valentine195&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000"
        }
      });
    } catch (e) {
      console.error(e);
      new import_obsidian21.Notice("There was an error displaying the settings tab for 5e Statblocks.");
    }
  }
  generateTopSettings(container) {
    container.empty();
    new import_obsidian21.Setting(container).setHeading().setName("General Settings");
    new import_obsidian21.Setting(container).setName("Enable Export to PNG").setDesc(createFragment((e) => {
      e.createSpan({
        text: 'Add "Export to PNG" button by default. Use '
      });
      e.createEl("code", { text: "export: false" });
      e.createSpan({
        text: " to disable per-statblock."
      });
    })).setDisabled(!this.plugin.canUseDiceRoller).addToggle((t) => t.setValue(this.plugin.settings.useDice).onChange(async (v) => {
      this.plugin.settings.useDice = v;
      await this.plugin.saveSettings();
    }));
    new import_obsidian21.Setting(container).setName("Integrate Dice Roller").setDesc(createFragment((e) => {
      if (this.plugin.canUseDiceRoller) {
        e.createSpan({
          text: "Add Dice Roller dice to statblocks by default. Use "
        });
        e.createEl("code", { text: "dice: false" });
        e.createSpan({
          text: " to disable per-statblock."
        });
      } else {
        e.createSpan({
          text: "This setting is only usable with the Dice Roller plugin enabled."
        });
      }
    })).setDisabled(!this.plugin.canUseDiceRoller).addToggle((t) => t.setValue(this.plugin.settings.useDice).onChange(async (v) => {
      this.plugin.settings.useDice = v;
      await this.plugin.saveSettings();
    }));
    new import_obsidian21.Setting(container).setName("Render Dice Rolls").setDesc(createFragment((e) => {
      if (this.plugin.canUseDiceRoller) {
        e.createSpan({
          text: "Roll graphical dice inside statblocks by default. Use "
        });
        e.createEl("code", { text: "render: false" });
        e.createSpan({
          text: " to disable per-statblock."
        });
      } else {
        e.createSpan({
          text: "This setting is only usable with the Dice Roller plugin enabled."
        });
      }
    })).setDisabled(!this.plugin.canUseDiceRoller).addToggle((t) => t.setValue(this.plugin.settings.renderDice).onChange(async (v) => {
      this.plugin.settings.renderDice = v;
      await this.plugin.saveSettings();
    }));
  }
  generateParseSettings(containerEl) {
    containerEl.empty();
    new import_obsidian21.Setting(containerEl).setHeading().setName("Note Parsing");
    new import_obsidian21.Setting(containerEl).setName("Parse Frontmatter for Creatures").setDesc(createFragment((e) => {
      e.createSpan({
        text: "The plugin will watch the vault for creatures defined in note frontmatter."
      });
      e.createEl("br");
      e.createEl("br");
      e.createSpan({
        text: `The "Parse Frontmatter for Creatures" command can also be used.`
      });
    })).addToggle((t) => {
      t.setValue(this.plugin.settings.autoParse).onChange(async (v) => {
        this.plugin.settings.autoParse = v;
        if (v) {
          this.plugin.watcher.start();
        }
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian21.Setting(containerEl).setName("Bestiary Folder").setDesc("The plugin will only parse notes inside this folder and its children.").addText(async (text2) => {
      let folders = this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian21.TFolder);
      text2.setPlaceholder(this.plugin.settings.path ?? "/");
      const modal = new FolderSuggestionModal(this.app, text2, [
        ...folders
      ]);
      modal.onClose = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        this.plugin.settings.path = (0, import_obsidian21.normalizePath)(v);
        await this.plugin.saveSettings();
      };
      text2.inputEl.onblur = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        this.plugin.settings.path = (0, import_obsidian21.normalizePath)(v);
        await this.plugin.saveSettings();
      };
    });
  }
  generateLayouts(containerEl) {
    containerEl.empty();
    new import_obsidian21.Setting(containerEl).setHeading().setName("Layouts");
    const statblockCreatorContainer = containerEl.createDiv("statblock-additional-container");
    statblockCreatorContainer.createDiv("setting-item").createDiv().appendChild(createFragment((el) => {
      el.createSpan({
        text: "New statblock layouts can be created and managed here. A specific statblock can be used for a creature using the "
      });
      el.createEl("code", { text: "statblock" });
      el.createSpan({ text: " parameter." });
    }));
    const importFile = new import_obsidian21.Setting(statblockCreatorContainer).setName("Import From JSON").setDesc("Import a custom layout from a JSON file.");
    const inputFile = createEl("input", {
      attr: {
        type: "file",
        name: "layout",
        accept: ".json",
        multiple: true
      }
    });
    inputFile.onchange = async () => {
      const { files } = inputFile;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputFile;
        if (!files2.length)
          return;
        for (const file of Array.from(files2)) {
          await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (event) => {
              try {
                const layout = JSON.parse(event.target.result);
                if (!layout) {
                  reject(new Error("Invalid layout imported"));
                  return;
                }
                if (!layout?.name) {
                  reject(new Error("Invalid layout imported: layout does not have a name"));
                  return;
                }
                if (!layout?.blocks) {
                  reject(new Error("Invalid layout imported: no blocks defined in layout."));
                  return;
                }
                this.plugin.settings.layouts.push(this.getDuplicate(layout));
                resolve();
              } catch (e) {
                reject(e);
              }
            };
            reader.readAsText(file);
          }).catch((e) => {
            new import_obsidian21.Notice(`There was an error importing the layout: 

${e}`);
            console.error(e);
          });
        }
        await this.plugin.saveSettings();
        this.buildCustomLayouts(layoutContainer);
      } catch (e) {
      }
    };
    importFile.addButton((b) => {
      b.setIcon("upload");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputFile);
      b.onClick(() => inputFile.click());
    });
    new import_obsidian21.Setting(statblockCreatorContainer).setName("Add New Layout").addButton((b) => b.setIcon("plus-with-circle").setTooltip("Add New Statblock").onClick(() => {
      const modal = new CreateStatblockModal(this.plugin);
      modal.onClose = async () => {
        if (!modal.saved)
          return;
        this.plugin.settings.layouts.push(this.getDuplicate(modal.layout));
        await this.plugin.saveSettings();
        this.buildCustomLayouts(layoutContainer);
      };
      modal.open();
    }));
    const statblockAdditional = statblockCreatorContainer.createDiv("additional");
    new import_obsidian21.Setting(statblockAdditional).setName("Default Layout").setDesc("Change the default statblock layout used, if not specified.").addDropdown(async (d) => {
      for (const layout of DefaultLayouts) {
        d.addOption(layout.name, layout.name);
      }
      for (const layout of this.plugin.settings.layouts) {
        d.addOption(layout.name, layout.name);
      }
      if (!this.plugin.settings.default || !this.plugin.settings.layouts.find(({ name }) => name == this.plugin.settings.default)) {
        this.plugin.settings.default = Layout5e.name;
        await this.plugin.saveSettings();
      }
      d.setValue(this.plugin.settings.default ?? Layout5e.name);
      d.onChange(async (v) => {
        this.plugin.settings.default = v;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian21.Setting(statblockAdditional).setName("Show Advanced Options").setDesc("Show advanced options when editing layout blocks.").addToggle((t) => t.setValue(this.plugin.settings.showAdvanced).onChange(async (v) => {
      this.plugin.settings.showAdvanced = v;
      await this.plugin.saveSettings();
    }));
    const layoutContainer = statblockCreatorContainer.createDiv("additional");
    this.buildCustomLayouts(layoutContainer);
  }
  getDuplicate(layout) {
    if (!this.plugin.settings.layouts.find((l) => l.name == layout.name) && layout.name != Layout5e.name)
      return layout;
    const names = [
      Layout5e.name,
      ...this.plugin.settings.layouts.filter((l) => l.name.contains(`${layout.name} Copy`)).map((l) => l.name)
    ];
    let temp = `${layout.name} Copy`;
    let name = temp;
    let index = 1;
    while (names.includes(name)) {
      name = `${temp} (${index})`;
      index++;
    }
    return {
      blocks: (0, import_fast_copy3.default)(layout.blocks),
      name
    };
  }
  buildCustomLayouts(layoutContainer) {
    layoutContainer.empty();
    for (const layout of DefaultLayouts) {
      new import_obsidian21.Setting(layoutContainer).setName(layout.name).addExtraButton((b) => {
        b.setIcon("duplicate-glyph").setTooltip("Create Copy").onClick(async () => {
          this.plugin.settings.layouts.push(this.getDuplicate(layout));
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        });
      });
    }
    for (const layout of this.plugin.settings.layouts) {
      new import_obsidian21.Setting(layoutContainer).setName(layout.name).addExtraButton((b) => {
        b.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new CreateStatblockModal(this.plugin, layout);
          modal.onClose = async () => {
            if (!modal.saved)
              return;
            this.plugin.settings.layouts.splice(this.plugin.settings.layouts.indexOf(layout), 1, modal.layout);
            await this.plugin.saveSettings();
            this.buildCustomLayouts(layoutContainer);
          };
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("duplicate-glyph").setTooltip("Create Copy").onClick(async () => {
          this.plugin.settings.layouts.push(this.getDuplicate(layout));
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        });
      }).addExtraButton((b) => {
        b.setIcon("import-glyph").setTooltip("Export as JSON").onClick(() => {
          const link = createEl("a");
          const file = new Blob([JSON.stringify(layout)], {
            type: "json"
          });
          const url = URL.createObjectURL(file);
          link.href = url;
          link.download = `${layout.name}.json`;
          link.click();
          URL.revokeObjectURL(url);
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").setTooltip("Delete").onClick(async () => {
          this.plugin.settings.layouts = this.plugin.settings.layouts.filter((l) => l.name !== layout.name);
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        });
      });
    }
  }
  generateImports(containerEl) {
    containerEl.empty();
    new import_obsidian21.Setting(containerEl).setHeading().setName("Import Homebrew Creatures");
    const importSettingsContainer = containerEl.createDiv("statblock-additional-container");
    new import_obsidian21.Setting(importSettingsContainer).setDesc("Import creatures from creature files. Monsters are stored by name, so only the last creature by that name will be saved. This is destructive - any saved creature will be overwritten.");
    const importAdditional = importSettingsContainer.createDiv("additional");
    const importAppFile = new import_obsidian21.Setting(importAdditional).setName("Import DnDAppFile").setDesc("Only import content that you own.");
    const inputAppFile = createEl("input", {
      attr: {
        type: "file",
        name: "dndappfile",
        accept: ".xml",
        multiple: true
      }
    });
    inputAppFile.onchange = async () => {
      const { files } = inputAppFile;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputAppFile;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "appfile");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importAppFile.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import DnDAppFile Data");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputAppFile);
      b.onClick(() => inputAppFile.click());
    });
    const importImprovedInitiative = new import_obsidian21.Setting(importAdditional).setName("Import Improved Initiative Data").setDesc("Only import content that you own.");
    const inputImprovedInitiative = createEl("input", {
      attr: {
        type: "file",
        name: "improvedinitiative",
        accept: ".json",
        multiple: true
      }
    });
    inputImprovedInitiative.onchange = async () => {
      const { files } = inputImprovedInitiative;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputImprovedInitiative;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "improved");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importImprovedInitiative.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import Improved Initiative Data");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputImprovedInitiative);
      b.onClick(() => inputImprovedInitiative.click());
    });
    const importCritterDB = new import_obsidian21.Setting(importAdditional).setName("Import CritterDB Data").setDesc("Only import content that you own.");
    const inputCritterDB = createEl("input", {
      attr: {
        type: "file",
        name: "critterdb",
        accept: ".json",
        multiple: true
      }
    });
    inputCritterDB.onchange = async () => {
      const { files } = inputCritterDB;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputCritterDB;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "critter");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importCritterDB.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import CritterDB Data");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputCritterDB);
      b.onClick(() => inputCritterDB.click());
    });
    const import5eTools = new import_obsidian21.Setting(importAdditional).setName("Import 5e.tools Data").setDesc("Only import content that you own.");
    const input5eTools = createEl("input", {
      attr: {
        type: "file",
        name: "fivetools",
        accept: ".json",
        multiple: true
      }
    });
    input5eTools.onchange = async () => {
      const { files } = input5eTools;
      if (!files.length)
        return;
      const monsters = await this.importer.import(files, "5e");
      if (monsters && monsters.length) {
        await this.plugin.saveMonsters(monsters);
      }
      this.display();
    };
    import5eTools.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import 5e.tools Data");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(input5eTools);
      b.onClick(() => input5eTools.click());
    });
    const importTetra = new import_obsidian21.Setting(importAdditional).setName("Import TetraCube Data").setDesc("Only import content that you own.");
    const inputTetra = createEl("input", {
      attr: {
        type: "file",
        name: "tetra",
        accept: ".json, .monster",
        multiple: true
      }
    });
    inputTetra.onchange = async () => {
      const { files } = inputTetra;
      if (!files.length)
        return;
      const monsters = await this.importer.import(files, "tetra");
      if (monsters && monsters.length) {
        await this.plugin.saveMonsters(monsters);
      }
      this.display();
    };
    importTetra.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import TetraCube Data");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputTetra);
      b.onClick(() => inputTetra.click());
    });
  }
  generateMonsters(containerEl) {
    containerEl.empty();
    new import_obsidian21.Setting(containerEl).setHeading().setName("Homebrew Creatures");
    const additionalContainer = containerEl.createDiv("statblock-additional-container statblock-monsters");
    new import_obsidian21.Setting(additionalContainer).setName("Add Creature").addButton((b) => {
      b.setIcon("plus-with-circle").onClick(() => {
        const modal = new EditMonsterModal(this.plugin);
        modal.onClose = () => {
          this.generateMonsters(containerEl);
        };
        modal.open();
      });
    });
    let monsterFilter;
    const ancestor = this.containerEl.closest(".statblock-settings");
    const { backgroundColor, paddingTop } = getComputedStyle(ancestor);
    const filters = additionalContainer.createDiv({
      cls: "statblock-monster-filter",
      attr: {
        style: `--statblock-filter-offset: ${paddingTop}; --statblock-filter-bg: ${backgroundColor}`
      }
    });
    this.filter = new import_obsidian21.Setting(filters).setClass("statblock-filter-container").addSearch((t) => {
      t.setPlaceholder("Search Monsters").onChange((0, import_obsidian21.debounce)((v) => {
        this.showSearchResults(additional, v);
      }, 100));
    }).addExtraButton((b) => {
      b.setIcon("trash").setTooltip("Delete All Filtered Monsters").onClick(() => {
        const modal = new ConfirmModal2(this.results.length, this.plugin.app);
        modal.onClose = async () => {
          if (modal.saved) {
            await this.plugin.deleteMonsters(...this.results?.map((m) => m.name) ?? []);
            this.generateMonsters(containerEl);
          }
        };
        modal.open();
      });
    });
    this.setFilterDesc();
    const sourcesSetting = filters.createEl("details");
    sourcesSetting.createEl("summary", { text: "Filter Sources" });
    const list = sourcesSetting.createEl("ul", "contains-task-list task-list-inline markdown-preview-view");
    for (let source of this.plugin.sources) {
      const li = list.createEl("li", "task-list-item");
      li.createEl("input", {
        attr: {
          id: "input_" + source,
          checked: true
        },
        type: "checkbox",
        cls: "task-list-item-checkbox"
      }).onclick = (evt) => {
        const target = evt.target;
        if (target.checked) {
          this.displayed.add(source);
        } else {
          this.displayed.delete(source);
        }
        this.showSearchResults(additional, "");
      };
      li.createEl("label", {
        attr: {
          for: "input_" + source
        },
        text: source
      });
    }
    const additional = additionalContainer.createDiv("additional");
    if (!this.plugin.data.size) {
      additional.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding-bottom: 18px;"
        }
      }).createSpan({
        text: "No saved creatures! Create one to see it here."
      });
      return;
    }
    setTimeout(() => this.showSearchResults(additional, ""));
  }
  setFilterDesc() {
    this.filter.setDesc(createFragment((e) => {
      e.createSpan({
        text: `Managing ${this.plugin.settings.monsters.length} homebrew creature${this.plugin.settings.monsters.length == 1 ? "" : "s"}.`
      });
      e.createEl("p", {
        attr: {
          style: "margin: 0;"
        }
      }).createEl("small", {
        text: `Displaying: ${this.results.length} homebrew creatures.`
      });
    }));
  }
  showSearchResults(additional, search) {
    additional.empty();
    for (const item of this.performFuzzySearch(search)) {
      const content = new import_obsidian21.Setting(additional).setName(item.name).setDesc(item.source);
      content.addExtraButton((b) => {
        b.setIcon("info").setTooltip("View").onClick(() => {
          const modal = new ViewMonsterModal(this.plugin, item);
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new EditMonsterModal(this.plugin, item);
          modal.open();
          modal.onClose = () => {
          };
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").setTooltip("Delete").onClick(() => this.plugin.deleteMonster(item.name));
      });
    }
    this.setFilterDesc();
  }
  performFuzzySearch(input) {
    const results = [];
    for (const resource of this.resources) {
      if (!this.displayed.has(resource.source))
        continue;
      let result = (0, import_obsidian21.prepareSimpleSearch)(input)(resource.name) ?? (0, import_obsidian21.prepareSimpleSearch)(input)(resource.source);
      if (result) {
        results.push(resource);
      }
    }
    this.results = results.slice(0, 100);
    return this.results;
  }
};
var CreateStatblockModal = class extends import_obsidian21.Modal {
  constructor(plugin, layout = {
    name: "Layout",
    blocks: []
  }) {
    super(plugin.app);
    this.plugin = plugin;
    this.saved = false;
    this.layout = (0, import_fast_copy3.default)(layout);
  }
  onOpen() {
    this.display();
  }
  display() {
    this.titleEl.createSpan({ text: "Create Layout" });
    this.creator = new StatblockCreator_default({
      target: this.contentEl,
      props: {
        layout: this.layout,
        plugin: this.plugin
      }
    });
    this.creator.$on("saved", () => {
      this.saved = true;
      this.close();
    });
    this.creator.$on("cancel", () => {
      this.close();
    });
  }
};
var ConfirmModal2 = class extends import_obsidian21.Modal {
  constructor(filtered, app) {
    super(app);
    this.filtered = filtered;
    this.saved = false;
  }
  onOpen() {
    this.titleEl.setText("Are you sure?");
    this.contentEl.createEl("p", {
      text: `This will delete ${this.filtered} creatures. This cannot be undone.`
    });
    new import_obsidian21.Setting(this.contentEl).setClass("no-border-top").addButton((b) => {
      b.setIcon("checkmark").setCta().onClick(() => {
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => b.setIcon("cross").onClick(() => {
      this.saved = true;
      this.close();
    }));
  }
};

// src/main.ts
var import_fast_copy5 = __toModule(require_fast_copy());

// node_modules/fast-sort/dist/sort.es.js
var castComparer = function(comparer) {
  return function(a, b, order2) {
    return comparer(a, b, order2) * order2;
  };
};
var throwInvalidConfigErrorIfTrue = function(condition, context) {
  if (condition)
    throw Error("Invalid sort config: " + context);
};
var unpackObjectSorter = function(sortByObj) {
  var _a = sortByObj || {}, asc = _a.asc, desc = _a.desc;
  var order2 = asc ? 1 : -1;
  var sortBy = asc || desc;
  throwInvalidConfigErrorIfTrue(!sortBy, "Expected `asc` or `desc` property");
  throwInvalidConfigErrorIfTrue(asc && desc, "Ambiguous object with `asc` and `desc` config properties");
  var comparer = sortByObj.comparer && castComparer(sortByObj.comparer);
  return { order: order2, sortBy, comparer };
};
var multiPropertySorterProvider = function(defaultComparer2) {
  return function multiPropertySorter(sortBy, sortByArr, depth, order2, comparer, a, b) {
    var valA;
    var valB;
    if (typeof sortBy === "string") {
      valA = a[sortBy];
      valB = b[sortBy];
    } else if (typeof sortBy === "function") {
      valA = sortBy(a);
      valB = sortBy(b);
    } else {
      var objectSorterConfig = unpackObjectSorter(sortBy);
      return multiPropertySorter(objectSorterConfig.sortBy, sortByArr, depth, objectSorterConfig.order, objectSorterConfig.comparer || defaultComparer2, a, b);
    }
    var equality = comparer(valA, valB, order2);
    if ((equality === 0 || valA == null && valB == null) && sortByArr.length > depth) {
      return multiPropertySorter(sortByArr[depth], sortByArr, depth + 1, order2, comparer, a, b);
    }
    return equality;
  };
};
function getSortStrategy(sortBy, comparer, order2) {
  if (sortBy === void 0 || sortBy === true) {
    return function(a, b) {
      return comparer(a, b, order2);
    };
  }
  if (typeof sortBy === "string") {
    throwInvalidConfigErrorIfTrue(sortBy.includes("."), "String syntax not allowed for nested properties.");
    return function(a, b) {
      return comparer(a[sortBy], b[sortBy], order2);
    };
  }
  if (typeof sortBy === "function") {
    return function(a, b) {
      return comparer(sortBy(a), sortBy(b), order2);
    };
  }
  if (Array.isArray(sortBy)) {
    var multiPropSorter_1 = multiPropertySorterProvider(comparer);
    return function(a, b) {
      return multiPropSorter_1(sortBy[0], sortBy, 1, order2, comparer, a, b);
    };
  }
  var objectSorterConfig = unpackObjectSorter(sortBy);
  return getSortStrategy(objectSorterConfig.sortBy, objectSorterConfig.comparer || comparer, objectSorterConfig.order);
}
var sortArray = function(order2, ctx, sortBy, comparer) {
  var _a;
  if (!Array.isArray(ctx)) {
    return ctx;
  }
  if (Array.isArray(sortBy) && sortBy.length < 2) {
    _a = sortBy, sortBy = _a[0];
  }
  return ctx.sort(getSortStrategy(sortBy, comparer, order2));
};
var createNewSortInstance = function(opts) {
  var comparer = castComparer(opts.comparer);
  return function(_ctx) {
    var ctx = Array.isArray(_ctx) && !opts.inPlaceSorting ? _ctx.slice() : _ctx;
    return {
      asc: function(sortBy) {
        return sortArray(1, ctx, sortBy, comparer);
      },
      desc: function(sortBy) {
        return sortArray(-1, ctx, sortBy, comparer);
      },
      by: function(sortBy) {
        return sortArray(1, ctx, sortBy, comparer);
      }
    };
  };
};
var defaultComparer = function(a, b, order2) {
  if (a == null)
    return order2;
  if (b == null)
    return -order2;
  if (a < b)
    return -1;
  if (a === b)
    return 0;
  return 1;
};
var sort = createNewSortInstance({
  comparer: defaultComparer
});
var inPlaceSort = createNewSortInstance({
  comparer: defaultComparer,
  inPlaceSorting: true
});

// src/watcher/watcher.ts
var import_obsidian22 = __toModule(require("obsidian"));

// src/watcher/watcher.worker.ts
function Worker3() {
  return inlineWorker('var Y=Object.create;var S=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var Q=Object.getOwnPropertyNames;var z=Object.getPrototypeOf,H=Object.prototype.hasOwnProperty;var T=n=>S(n,"__esModule",{value:!0});var V=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports);var J=(n,t,f)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of Q(t))!H.call(n,a)&&a!=="default"&&S(n,a,{get:()=>t[a],enumerable:!(f=N(t,a))||f.enumerable});return n},X=n=>J(T(S(n!=null?Y(z(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var B=V((C,_)=>{(function(n,t){typeof C=="object"&&typeof _!="undefined"?_.exports=t():typeof define=="function"&&define.amd?define(t):(n=typeof globalThis!="undefined"?globalThis:n||self,n["fast-copy"]=t())})(C,function(){"use strict";var n=Function.prototype.toString,t=Object.create,f=Object.defineProperty,a=Object.getOwnPropertyDescriptor,M=Object.getOwnPropertyNames,O=Object.getOwnPropertySymbols,W=Object.getPrototypeOf,x=Object.prototype,L=x.hasOwnProperty,I=x.propertyIsEnumerable,w={SYMBOL_PROPERTIES:typeof O=="function",WEAKMAP:typeof WeakMap=="function"},U=function(){if(w.WEAKMAP)return new WeakMap;var r=t({has:function(u){return!!~r._keys.indexOf(u)},set:function(u,g){r._keys.push(u),r._values.push(g)},get:function(u){return r._values[r._keys.indexOf(u)]}});return r._keys=[],r._values=[],r},F=function(r,u){if(!r.constructor)return t(null);var g=r.constructor,s=r.__proto__||W(r);if(g===u.Object)return s===u.Object.prototype?{}:t(s);if(~n.call(g).indexOf("[native code]"))try{return new g}catch(y){}return t(s)},q=function(r,u,g,s){var y=F(r,u);s.set(r,y);for(var p in r)L.call(r,p)&&(y[p]=g(r[p],s));if(w.SYMBOL_PROPERTIES){var e=O(r),l=e.length;if(l)for(var o=0,i=void 0;o<l;o++)i=e[o],I.call(r,i)&&(y[i]=g(r[i],s))}return y},A=function(r,u,g,s){var y=F(r,u);s.set(r,y);var p=w.SYMBOL_PROPERTIES?M(r).concat(O(r)):M(r),e=p.length;if(e){for(var l=0,o=void 0,i=void 0;l<e;l++)if(o=p[l],o!=="callee"&&o!=="caller")if(i=a(r,o),i){!i.get&&!i.set&&(i.value=g(r[o],s));try{f(y,o,i)}catch(E){y[o]=i.value}}else y[o]=g(r[o],s)}return y},$=function(r){var u="";return r.global&&(u+="g"),r.ignoreCase&&(u+="i"),r.multiline&&(u+="m"),r.unicode&&(u+="u"),r.sticky&&(u+="y"),u},D=Array.isArray,G=function(){if(typeof self!="undefined")return self;if(typeof window!="undefined")return window;if(typeof global!="undefined")return global;console&&console.error&&console.error(\'Unable to locate global object, returning "this".\')}();function d(r,u){var g=!!(u&&u.isStrict),s=u&&u.realm||G,y=g?A:q,p=function(e,l){if(!e||typeof e!="object")return e;if(l.has(e))return l.get(e);var o=e.constructor;if(o===s.Object)return y(e,s,p,l);var i;if(D(e)){if(g)return A(e,s,p,l);var E=e.length;i=new o,l.set(e,i);for(var h=0;h<E;h++)i[h]=p(e[h],l);return i}if(e instanceof s.Date)return new o(e.getTime());if(e instanceof s.RegExp)return i=new o(e.source,e.flags||$(e)),i.lastIndex=e.lastIndex,i;if(s.Map&&e instanceof s.Map)return i=new o,l.set(e,i),e.forEach(function(P,K){i.set(K,p(P,l))}),i;if(s.Set&&e instanceof s.Set)return i=new o,l.set(e,i),e.forEach(function(P){i.add(p(P,l))}),i;if(s.Blob&&e instanceof s.Blob)return e.slice(0,e.size,e.type);if(s.Buffer&&s.Buffer.isBuffer(e))return i=s.Buffer.allocUnsafe?s.Buffer.allocUnsafe(e.length):new o(e.length),l.set(e,i),e.copy(i),i;if(s.ArrayBuffer){if(s.ArrayBuffer.isView(e))return i=new o(e.buffer.slice(0)),l.set(e,i),i;if(e instanceof s.ArrayBuffer)return i=e.slice(0),l.set(e,i),i}return typeof e.then=="function"||e instanceof Error||s.WeakMap&&e instanceof s.WeakMap||s.WeakSet&&e instanceof s.WeakSet?e:y(e,s,p,l)};return p(r,U())}return d.default=d,d.strict=function(u,g){return d(u,{isStrict:!0,realm:g?g.realm:void 0})},d})});var k=X(B());var m=(n,t=0)=>{let f=[];if(t==5||!n||n==null)return"";if(typeof n=="string")return n;if(typeof n=="number")return`${n}`;if(Array.isArray(n))f.push(`${n.map(a=>m(a,t++)).join(" ")}`);else if(typeof n=="object")for(let[a,M]of Object.entries(n))f.push(m(a,t++),m(M,t++));return f.join(" ")};function c(n=[],t=[]){n||(n=[]),t||(t=[]);for(let f of t!=null?t:[])!f||(Array.isArray(f)?(n=n.filter(a=>a.name!=f[0]),n.push({name:f[0],desc:m(f.slice(1))})):typeof f=="object"&&"name"in f&&"desc"in f&&(n=n.filter(a=>a.name!=f.name),n.push({name:f.name,desc:m(f.desc)})));return n}var v=self,R=class{constructor(){this.queue=[];this.parsing=!1;v.addEventListener("message",t=>{t.data.type=="queue"&&this.add(...t.data.paths)})}add(...t){this.queue.push(...t),this.parsing||this.parse()}async parse(){for(this.parsing=!0;this.queue.length;){let t=this.queue.shift(),{file:f,cache:a}=await this.getFileData(t);this.parseFileForCreatures(f,a),v.postMessage({type:"done",path:t})}this.parsing=!1,v.postMessage({type:"save"})}async getFileData(t){return new Promise(f=>{v.addEventListener("message",a=>{a.data.type=="file"&&f(a.data)}),v.postMessage({path:t,type:"get"})})}parseFileForCreatures(t,f){if(!f||!f.frontmatter||!f.frontmatter.statblock||!f.frontmatter.name)return;let a=Object.assign({},(0,k.default)(f.frontmatter),{note:t.path,mtime:t.mtime});a.traits&&(a.traits=c([],a.traits)),a.actions&&(a.actions=c([],a.actions)),a.bonus_actions&&(a.bonus_actions=c([],a.bonus_actions)),a.reactions&&(a.reactions=c([],a.reactions)),a.legendary_actions&&(a.legendary_actions=c([],a.legendary_actions)),v.postMessage({type:"update",monster:a,path:t.path})}};new R;\n');
}

// src/watcher/watcher.ts
var Watcher = class extends import_obsidian22.Component {
  constructor(plugin) {
    super();
    this.plugin = plugin;
    this.watchPaths = new Map();
    this.worker = new Worker3();
  }
  get metadataCache() {
    return this.plugin.app.metadataCache;
  }
  get vault() {
    return this.plugin.app.vault;
  }
  onload() {
    this.registerEvent(this.metadataCache.on("changed", async (file) => {
      if (!this.plugin.settings.autoParse)
        return;
      const { frontmatter } = this.metadataCache.getFileCache(file) ?? {};
      if (!frontmatter || !frontmatter.statblock) {
        if (this.watchPaths.has(file.path)) {
          this.delete(file.path);
        }
        return;
      }
      this.parsePath(file);
    }));
    this.registerEvent(this.vault.on("rename", async (abstractFile, oldPath) => {
      if (!this.plugin.settings.autoParse)
        return;
      if (!(abstractFile instanceof import_obsidian22.TFile))
        return;
      if (!this.watchPaths.has(oldPath))
        return;
      await this.delete(oldPath);
      this.parsePath(abstractFile);
    }));
    this.registerEvent(this.vault.on("delete", (abstractFile) => {
      if (!this.plugin.settings.autoParse)
        return;
      if (!(abstractFile instanceof import_obsidian22.TFile))
        return;
      if (!this.watchPaths.has(abstractFile.path))
        return;
      this.delete(abstractFile.path);
    }));
    this.worker.addEventListener("message", (event) => {
      if (event.data.type == "get") {
        const { path } = event.data;
        const data = this.getFileInformation(path);
        this.worker.postMessage({
          type: "file",
          path,
          ...data
        });
      }
    });
    this.worker.addEventListener("message", async (evt) => {
      if (evt.data.type == "update") {
        const { monster, path } = evt.data;
        if (this.watchPaths.has(path)) {
          const existing = this.watchPaths.get(path);
          this.plugin.deleteMonster(existing);
        }
        this.watchPaths.set(path, monster.name);
        this.plugin.saveMonster(monster, false, false);
      }
    });
    this.worker.addEventListener("message", async (evt) => {
      if (evt.data.type == "save") {
        await this.plugin.saveSettings();
        if (this.startTime) {
          console.info(`TTRPG Statblocks: Frontmatter Parsing Complete in ${((Date.now() - this.startTime) / 1e3).toLocaleString()} seconds.`);
          this.startTime = 0;
        }
        if (this.announce) {
          new import_obsidian22.Notice("TTRPG Statblocks: Frontmatter Parsing complete.");
          this.announce = false;
        }
      }
    });
    this.plugin.app.workspace.onLayoutReady(() => {
      for (const [_, monster] of this.plugin.settings.monsters.filter(([_2, monster2]) => monster2.note)) {
        if (this.watchPaths.has(monster.note)) {
          this.plugin.deleteMonster(monster.name);
        }
        this.watchPaths.set(monster.note, monster.name);
      }
      if (!this.plugin.settings.autoParse)
        return;
      this.start();
    });
  }
  async delete(path) {
    await this.plugin.deleteMonster(this.watchPaths.get(path));
    this.watchPaths.delete(path);
  }
  start(announce = false) {
    this.announce = announce;
    this.startTime = Date.now();
    console.info("TTRPG Statblocks: Starting Frontmatter Parsing.");
    const folder = this.vault.getAbstractFileByPath(this.plugin.settings.path);
    this.parsePath(folder);
  }
  pathContainsFile(file) {
    if (!this.plugin.settings.path || this.plugin.settings.path == "/")
      return true;
    return file.path.includes(this.plugin.settings.path, 1);
  }
  parsePath(folder) {
    if (!this.pathContainsFile(folder))
      return;
    const parsing = new Set();
    for (const path of this.getFiles(folder)) {
      parsing.add(path);
    }
    this.startParsing([...parsing]);
  }
  startParsing(paths) {
    if (paths.length) {
      this.worker.postMessage({
        type: "queue",
        paths
      });
    }
  }
  getFileInformation(path) {
    const file = this.plugin.app.vault.getAbstractFileByPath(path);
    if (!(file instanceof import_obsidian22.TFile))
      return;
    if (this.watchPaths.has(file.path)) {
      const monster = this.plugin.bestiary.get(this.watchPaths.get(file.path));
      if (monster && monster.mtime && monster.mtime == file.stat.mtime)
        return;
    }
    const cache = this.metadataCache.getFileCache(file);
    return {
      cache,
      file: {
        path: file.path,
        basename: file.basename,
        mtime: file.stat.mtime
      }
    };
  }
  getFiles(folder) {
    let files = [];
    if (folder instanceof import_obsidian22.TFolder) {
      for (const child of folder.children) {
        files.push(...this.getFiles(child));
      }
    }
    if (folder instanceof import_obsidian22.TFile) {
      files.push(folder.path);
    }
    return files;
  }
  async reparseVault() {
    for (const monster of this.watchPaths.values()) {
      this.plugin.deleteMonster(monster, false, false);
    }
    const folder = this.vault.getAbstractFileByPath(this.plugin.settings.path);
    this.parsePath(folder);
  }
  onunload() {
    this.worker.terminate();
    this.worker = null;
  }
};

// src/main.ts
var DEFAULT_DATA = {
  monsters: [],
  layouts: [],
  default: Layout5e.name,
  useDice: true,
  renderDice: false,
  export: true,
  showAdvanced: false,
  version: {
    major: null,
    minor: null,
    patch: null
  },
  path: "/",
  autoParse: false
};
var StatBlockPlugin = class extends import_obsidian23.Plugin {
  constructor() {
    super(...arguments);
    this.watcher = new Watcher(this);
    this._sorted = [];
  }
  get canUseDiceRoller() {
    return this.app.plugins.getPlugin("obsidian-dice-roller") != null;
  }
  getRoller(str) {
    if (!this.canUseDiceRoller)
      return;
    const roller = this.app.plugins.getPlugin("obsidian-dice-roller").getRoller(str, "statblock", true);
    return roller;
  }
  get sorted() {
    if (!this._sorted.length)
      this._sorted = sort(Array.from(this.data.values())).asc((m) => m.name);
    return this._sorted;
  }
  get sources() {
    return new Set(Array.from(this.data.values()).map((m) => m.source));
  }
  async onload() {
    console.log("TTRPG StatBlocks loaded");
    await this.loadSettings();
    await this.loadMonsterData();
    await this.saveSettings();
    this.watcher.load();
    this.addCommand({
      id: "parse-frontmatter",
      name: "Parse Frontmatter for Creatures",
      callback: () => {
        this.watcher.start(true);
      }
    });
    (0, import_obsidian23.addIcon)("dropzone-grip", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-lines-vertical" class="svg-inline--fa fa-grip-lines-vertical fa-w-8" role="img" viewBox="0 0 256 512"><path fill="currentColor" d="M96 496V16c0-8.8-7.2-16-16-16H48c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16zm128 0V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16z"/></svg>`);
    (0, import_obsidian23.addIcon)("statblock-conditioned", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="question-circle" class="svg-inline--fa fa-question-circle fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"/></svg>`);
    (0, import_obsidian23.addIcon)("dice-roller-dice", `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice" class="svg-inline--fa fa-dice fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M592 192H473.26c12.69 29.59 7.12 65.2-17 89.32L320 417.58V464c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48V240c0-26.51-21.49-48-48-48zM480 376c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm-46.37-186.7L258.7 14.37c-19.16-19.16-50.23-19.16-69.39 0L14.37 189.3c-19.16 19.16-19.16 50.23 0 69.39L189.3 433.63c19.16 19.16 50.23 19.16 69.39 0L433.63 258.7c19.16-19.17 19.16-50.24 0-69.4zM96 248c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"/></svg>`);
    this.addSettingTab(new StatblockSettingTab(this.app, this));
    (0, import_obsidian23.addIcon)(SAVE_SYMBOL, SAVE_ICON);
    (0, import_obsidian23.addIcon)(EXPORT_SYMBOL, EXPORT_ICON);
    this.bestiary = new Map([...BESTIARY_BY_NAME, ...this.data]);
    Object.defineProperty(window, "bestiary", {
      value: this.bestiary,
      writable: false,
      configurable: true
    });
    this.registerMarkdownCodeBlockProcessor("statblock", this.postprocessor.bind(this));
    this.registerEvent(this.app.workspace.on("dice-roller:unload", () => {
      this.settings.useDice = false;
    }));
  }
  async loadSettings() {
    const settings = await this.loadData();
    if (settings != void 0 && !("version" in settings)) {
      this.settings = { ...DEFAULT_DATA };
      this.settings.monsters = settings;
      await this.loadMonsterData();
      new import_obsidian23.Notice("5e Statblocks is now TTRPG Statblocks. Check out the ReadMe for more information!");
    } else {
      this.settings = {
        ...DEFAULT_DATA,
        ...settings
      };
    }
    const version = this.manifest.version.split(".");
    this.settings.version = {
      major: Number(version[0]),
      minor: Number(version[1]),
      patch: Number(version[2])
    };
  }
  async saveSettings() {
    this.settings.monsters = this._transformData(this.data);
    await this.saveData(this.settings);
  }
  async loadMonsterData() {
    const data = this.settings.monsters;
    if (!data)
      this.data = new Map();
    this.data = new Map(data?.map(([name, monster]) => {
      return [name, (0, import_fast_copy5.default)(monster)];
    }) ?? []);
  }
  async saveMonster(monster, sortFields = true, save = true) {
    if (!monster.name)
      return;
    this.data.set(monster.name, monster);
    this.bestiary.set(monster.name, monster);
    if (save) {
      await this.saveSettings();
    }
    if (sortFields)
      this._sorted = sort(Array.from(this.data.values())).asc((m) => m.name);
  }
  async saveMonsters(monsters) {
    for (let monster of monsters) {
      await this.saveMonster(monster, false, false);
    }
    this._sorted = sort(Array.from(this.data.values())).asc((m) => m.name);
    await this.saveSettings();
  }
  async updateMonster(oldMonster, newMonster) {
    this.data.delete(oldMonster.name);
    await this.saveMonster(newMonster);
  }
  async deleteMonsters(...monsters) {
    for (const monster of monsters) {
      if (!this.data.has(monster))
        continue;
      this.data.delete(monster);
      this.bestiary.delete(monster);
    }
    await this.saveSettings();
    this._sorted = sort(Array.from(this.data.values())).asc((m) => m.name);
  }
  async deleteMonster(monster, sortFields = true, save = true) {
    if (!this.data.has(monster))
      return;
    this.data.delete(monster);
    this.bestiary.delete(monster);
    if (BESTIARY_BY_NAME.has(monster)) {
      this.bestiary.set(monster, BESTIARY_BY_NAME.get(monster));
    }
    if (save)
      await this.saveSettings();
    if (sortFields)
      this._sorted = sort(Array.from(this.data.values())).asc((m) => m.name);
  }
  _transformData(data) {
    return [...data ?? []].map(([name, monster]) => {
      return [name, (0, import_fast_copy5.default)(monster)];
    });
  }
  onunload() {
    delete window.bestiary;
    this.watcher.unload();
    console.log("TTRPG StatBlocks unloaded");
  }
  exportAsPng(name, containerEl) {
    function filter(node) {
      return !node.hasClass || !node.hasClass("clickable-icon");
    }
    const content = containerEl.querySelector(".statblock-content");
    if (content)
      delete content.style["boxShadow"];
    import_dom_to_image.default.toPng(containerEl, {
      filter,
      style: { height: "100%" }
    }).then((url) => {
      const link = document.createElement("a");
      link.download = name + ".png";
      link.href = url;
      link.click();
      link.detach();
    }).catch((e) => {
      new import_obsidian23.Notice(`There was an error creating the image: 

${e.message}`);
      console.error(e);
    });
  }
  parseForDice(property) {
    const roller = (str) => {
      let text2;
      let original;
      if (/\w+ [\+\-]\d+/.test(str.trim())) {
        let [, save, sign, number] = str.match(/(\w+ )([\+\-])(\d+)/) ?? [];
        let mult = 1;
        if (sign === "-") {
          mult = -1;
        }
        if (!isNaN(Number(number))) {
          text2 = `1d20+${mult * Number(number)}`;
          original = `${save} ${sign}${number}`;
        }
      } else if (/[\+\-]\d+ to hit/.test(str.trim())) {
        let [, sign, number] = str.match(/([\+\-])(\d+)/) ?? [];
        let mult = 1;
        if (sign === "-") {
          mult = -1;
        }
        if (!isNaN(Number(number))) {
          text2 = `1d20+${mult * Number(number)}`;
          original = str;
        }
      } else if (/\d+\s\(\d+d\d+(?:\s*[+\-]\s*\d+)?\)/.test(str.trim())) {
        let [, base, dice] = str.match(/(\d+)\s\((\d+d\d+(?:\s*[+\-]\s*\d+)?)\)/) ?? [];
        if (!isNaN(Number(base)) && dice) {
          text2 = dice;
        }
      }
      return { text: text2, original };
    };
    const match = (str) => {
      return /\w+ [\+\-]\d+/.test(str.trim()) || /[\+\-]\d+ to hit/.test(str.trim()) || /\d+\s\(\d+d\d+(?:\s*[+\-]\s*\d+)?\)/.test(str.trim());
    };
    return property.split(/([\+\-]\d+ to hit|\d+\s\(\d+d\d+(?:\s*[+\-]\s*\d+)?\)|\w+ [\+\-]\d+)/).map((v) => match(v) ? roller(v) : v);
  }
  get defaultLayout() {
    return this.settings.layouts?.find((layout) => layout.name == this.settings.default) ?? Layout5e;
  }
  async postprocessor(source, el, ctx) {
    try {
      let params = (0, import_obsidian23.parseYaml)(source);
      params = JSON.parse(JSON.stringify(params).replace(/\\#/g, "#"));
      const canSave = params && "name" in params;
      if (!params || !Object.values(params ?? {}).length) {
        params = Object.assign({}, params, { note: ctx.sourcePath });
      }
      if (params.note) {
        const note = Array.isArray(params.note) ? params.note.flat(Infinity).pop() : params.note;
        const file = await this.app.metadataCache.getFirstLinkpathDest(`${note}`, ctx.sourcePath);
        if (file && file instanceof import_obsidian23.TFile) {
          const cache = await this.app.metadataCache.getFileCache(file);
          Object.assign(params, (0, import_fast_copy5.default)(cache.frontmatter) ?? {});
        }
      }
      const monster = Object.assign({}, this.bestiary.get(params.monster) ?? this.bestiary.get(params.creature));
      if (monster) {
        let traits = transformTraits(monster.traits ?? [], params.traits ?? []);
        let actions = transformTraits(monster.actions ?? [], params.actions ?? []);
        let bonus_actions = transformTraits(monster.bonus_actions ?? [], params.bonus_actions ?? []);
        let legendary_actions = transformTraits(monster.legendary_actions ?? [], params.legendary_actions ?? []);
        let reactions = transformTraits(monster.reactions ?? [], params.reactions ?? []);
        Object.assign(params, {
          traits,
          actions,
          bonus_actions,
          reactions,
          legendary_actions
        });
      }
      if ("image" in params) {
        if (Array.isArray(params.image)) {
          params.image = params.image.flat(2).join("");
        }
      }
      const toBuild = Object.assign({}, monster ?? {}, params ?? {});
      let layout = this.settings.layouts.find((layout2) => layout2.name == toBuild?.layout || layout2.name == toBuild?.statblock) ?? this.defaultLayout;
      el.addClass("statblock-plugin-container");
      el.parentElement?.addClass("statblock-plugin-parent");
      let statblock = new StatBlockRenderer(el, toBuild, this, canSave, ctx.sourcePath, layout);
      ctx.addChild(statblock);
    } catch (e) {
      console.error(`Obsidian Statblock Error:
${e}`);
      let pre = createEl("pre");
      pre.setText(`\`\`\`statblock
There was an error rendering the statblock:
${e.stack.split("\n").filter((line) => !/^at/.test(line?.trim())).join("\n")}
\`\`\``);
    }
  }
  render(creature, el, display) {
    const monster = Object.assign(this.bestiary.get(creature.name) ?? {}, { ...creature });
    if (!monster)
      return null;
    if (display) {
      monster.name = display;
    }
    return new StatBlockRenderer(el, monster, this, false, "", this.defaultLayout);
  }
};
//# sourceMappingURL=data:application/json;base64,
