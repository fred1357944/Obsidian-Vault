/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/main.ts
__export(exports, {
  default: () => MarkdownAttributes
});
var import_obsidian = __toModule(require("obsidian"));
var import_view = __toModule(require("@codemirror/view"));
var import_language = __toModule(require("@codemirror/language"));
var import_stream_parser = __toModule(require("@codemirror/stream-parser"));

// src/processor.ts
var _Processor = class {
  constructor() {
  }
  static parse(el) {
    if (typeof el == "string") {
      return new _Processor().parseLine(el);
    } else {
      return new _Processor().recurseAndParseElements(el);
    }
  }
  parseLine(text) {
    const elements = [];
    let attribute_strings = text.matchAll(new RegExp(_Processor.END_RE.source, "gm"));
    for (const [_, match] of attribute_strings) {
      elements.push({
        attributes: this.getAttrs(match),
        text: match
      });
    }
    return elements;
  }
  getTopLevelText(el) {
    const texts = [];
    for (let child of Array.from(el.childNodes)) {
      if (child.nodeType == Node.TEXT_NODE) {
        texts.push(child.data);
      }
    }
    return texts.join("");
  }
  getAttrs(str) {
    const trys = (str ?? "").split(/\s(?=(?:[^'"`]*(['"`])[^'"`]*\1)*[^'"`]*$)/).map((t) => t && t.trim()).filter((t) => t && t !== '"' && t !== "'" && t.length);
    if (!trys || !trys.length)
      return;
    const allowedKeyChars = /[^\t\n\f />"'=]/;
    const keySeparator = "=";
    const classChar = ".";
    const attrs = [];
    for (let pair of trys) {
      if (!pair || !pair.length)
        continue;
      if (pair.charAt(0) === classChar) {
        attrs.push(["class", pair.slice(1)]);
        continue;
      }
      if (new RegExp(keySeparator).test(pair) && allowedKeyChars.test(pair.slice(0, pair.indexOf(keySeparator)))) {
        attrs.push([...pair.split(keySeparator, 2)]);
        continue;
      }
      attrs.push([pair, null]);
    }
    return attrs;
  }
  recurseAndParseElements(el) {
    const elements = [];
    const text = this.getTopLevelText(el);
    if (_Processor.BLOCK_RE.test(text)) {
      let element = el;
      if (el instanceof HTMLLIElement || el?.parentElement instanceof HTMLQuoteElement) {
        element = el.parentElement;
      }
      let [original, attribute_string] = text.match(_Processor.BLOCK_RE) ?? [];
      const toAdd = {
        element,
        attributes: this.getAttrs(attribute_string),
        text: attribute_string
      };
      elements.push(toAdd);
      el.innerHTML = this.tryToReplace(toAdd.element, el.innerHTML, toAdd.attributes, original);
      if (el instanceof HTMLLIElement) {
        elements.push(...this.recurseAndParseElements(el));
      }
    } else if (_Processor.BASE_RE.test(text)) {
      let textNode = Array.from(el.childNodes).find((node) => node.nodeType == Node.TEXT_NODE && _Processor.BASE_RE.test(text));
      let sibling = Array.from(el.children).find((node) => node.nextSibling == textNode) ?? el;
      if (sibling && sibling.hasClass("collapse-indicator")) {
        sibling = sibling.parentElement;
      }
      if (sibling && sibling instanceof HTMLBRElement) {
        sibling = sibling.parentElement;
      }
      let [original, attribute_string] = text.match(_Processor.BASE_RE) ?? [];
      const toAdd = {
        element: sibling,
        attributes: this.getAttrs(attribute_string),
        text: attribute_string
      };
      elements.push(toAdd);
      textNode.textContent = this.tryToReplace(toAdd.element, textNode.textContent, toAdd.attributes, original);
    }
    for (let child of Array.from(el.children)) {
      if (!(child instanceof HTMLElement))
        continue;
      if (child instanceof HTMLPreElement || child.tagName.toLowerCase() === "code")
        continue;
      elements.push(...this.recurseAndParseElements(child));
    }
    return elements;
  }
  tryToReplace(element, content, attributes, original) {
    if (!attributes || !attributes.length) {
      return content;
    }
    for (let [key, value] of attributes) {
      if (!key)
        continue;
      if (value)
        value = value.replace(/("|')/g, "");
      try {
        if (key === "class") {
          element.addClasses(value.split(" "));
        } else if (!value) {
          element.setAttr(key, true);
        } else {
          element.setAttr(key, value);
        }
      } catch (e) {
        console.log(`Markdown Attributes: ${key} is not a valid attribute.`);
        return content;
      }
    }
    return content.replace(original, "");
  }
};
var Processor = _Processor;
__publicField(Processor, "BASE_RE", /\{\:?[ ]*([^\}\n ][^\}\n]*)[ ]*\}/);
__publicField(Processor, "ONLY_RE", /^\{\:?[ ]*([^\}\n ][^\}\n]*)[ ]*\}$/);
__publicField(Processor, "END_RE", /\{\:?[ ]*([^\}\n ][^\}\n]*)[ ]*\}$/m);
__publicField(Processor, "BLOCK_RE", /\n[ ]*\{\:?[ ]*([^\}\n ][^\}\n]*)[ ]*\}[ ]*$/);

// src/main.ts
var import_rangeset = __toModule(require("@codemirror/rangeset"));
var import_state = __toModule(require("@codemirror/state"));
var MarkdownAttributes = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "parsing", /* @__PURE__ */ new Map());
  }
  async onload() {
    console.log(`Markdown Attributes v${this.manifest.version} loaded.`);
    this.registerMarkdownPostProcessor(this.postprocessor.bind(this));
    this.registerEditorExtension(this.state());
  }
  state() {
    class StatefulDecorationSet {
      constructor(editor) {
        __publicField(this, "editor");
        __publicField(this, "cache", Object.create(null));
        this.editor = editor;
      }
      async compute(tokens) {
        const replace2 = [];
        for (let token of tokens) {
          let deco = this.cache[token.value];
          if (!deco) {
            deco = this.cache[token.value] = import_view.Decoration.replace({
              inclusive: true,
              loc: token.loc
            });
          }
          replace2.push(deco.range(token.from, token.to));
        }
        return import_view.Decoration.set(replace2, true);
      }
      async updateDecos(tokens) {
        const replacers = await this.compute(tokens);
        if (replace || this.editor.state.field(field).size) {
          this.editor.dispatch({
            effects: [replace.of(replacers ?? import_view.Decoration.none)]
          });
        }
      }
    }
    const plugin = import_view.ViewPlugin.fromClass(class {
      constructor(view) {
        __publicField(this, "manager");
        __publicField(this, "decorations");
        this.manager = new StatefulDecorationSet(view);
        this.decorations = this.build(view);
      }
      update(update) {
        if (update.docChanged || update.viewportChanged || update.selectionSet) {
          this.decorations = this.build(update.view);
        }
      }
      destroy() {
      }
      build(view) {
        const targetElements = [];
        const builder = new import_rangeset.RangeSetBuilder();
        for (let { from, to } of view.visibleRanges) {
          const tree = (0, import_language.syntaxTree)(view.state);
          tree.iterate({
            from,
            to,
            enter: (type, from2, to2) => {
              const tokenProps = type.prop(import_stream_parser.tokenClassNodeProp);
              const props = new Set(tokenProps?.split(" "));
              if (props.has("hmd-codeblock") && !props.has("formatting-code-block"))
                return;
              const original = view.state.doc.sliceString(from2, to2);
              if (!Processor.END_RE.test(original))
                return;
              const parsed = Processor.parse(original) ?? [];
              for (const item of parsed) {
                const { attributes, text } = item;
                const end = original.indexOf(text) + text.length;
                const deco = import_view.Decoration.mark({
                  inclusive: true,
                  attributes: Object.fromEntries(attributes)
                });
                builder.add(from2, end, deco);
                const match = original.trim().match(new RegExp(`\\{\\s?${text}s?\\}$`, "m"));
                targetElements.push({
                  type: "replace",
                  from: from2 + match.index - 1,
                  to: from2 + match.index + match[0].length,
                  loc: { from: from2, to: end },
                  value: match[0],
                  index: match.index
                });
              }
            }
          });
        }
        this.manager.updateDecos(targetElements);
        return builder.finish();
      }
    }, {
      decorations: (v) => v.decorations
    });
    const replace = import_state.StateEffect.define();
    const field = import_state.StateField.define({
      create() {
        return import_view.Decoration.none;
      },
      update(deco, tr) {
        return tr.effects.reduce((deco2, effect) => {
          if (effect.is(replace))
            return effect.value.update({
              filter: (_, __, decoration) => {
                return !rangesInclude(tr.newSelection.ranges, decoration.spec.loc.from, decoration.spec.loc.to);
              }
            });
          return deco2;
        }, deco.map(tr.changes));
      },
      provide: (field2) => import_view.EditorView.decorations.from(field2)
    });
    return [field, plugin];
  }
  async postprocessor(topElement, ctx) {
    const child = topElement.firstElementChild;
    if (!child)
      return;
    let str;
    if (child instanceof HTMLPreElement) {
      if (!ctx.getSectionInfo(topElement))
        return;
      const { lineStart } = ctx.getSectionInfo(topElement);
      const file = this.app.vault.getAbstractFileByPath(ctx.sourcePath);
      if (!(file instanceof import_obsidian.TFile))
        return;
      const text = await this.app.vault.cachedRead(file);
      let source = text.split("\n").slice(lineStart, lineStart + 1);
      str = source.join("\n");
      if (!Processor.BASE_RE.test(str))
        return;
      let [attribute_string] = str.match(Processor.BASE_RE) ?? [];
      child.prepend(new Text(attribute_string));
    }
    if (child instanceof HTMLTableElement || child.hasClass("math") && child.hasClass("math-block")) {
      if (!ctx.getSectionInfo(topElement))
        return;
      const { text, lineEnd } = ctx.getSectionInfo(topElement);
      let source = (text.split("\n").slice(lineEnd + 1, lineEnd + 2) ?? []).shift();
      if (source && source.length && Processor.ONLY_RE.test(source.trim())) {
        let [attribute_string] = source.match(Processor.ONLY_RE) ?? [];
        child.prepend(new Text(attribute_string));
        str = topElement.innerText;
      }
    }
    if (child instanceof HTMLParagraphElement) {
      if (Processor.ONLY_RE.test(child.innerText.trim())) {
        child.detach();
        return;
      }
    }
    if (!Processor.BASE_RE.test(str ?? topElement.innerText))
      return;
    if (!(child instanceof HTMLElement))
      return;
    Processor.parse(child);
  }
  async onunload() {
    console.log("Markdown Attributes unloaded");
  }
};
var rangesInclude = (ranges, from, to) => {
  for (const range of ranges) {
    const { from: rFrom, to: rTo } = range;
    if (rFrom >= from && rFrom <= to)
      return true;
    if (rTo >= from && rTo <= to)
      return true;
    if (rFrom < from && rTo > to)
      return true;
  }
  return false;
};
//# sourceMappingURL=data:application/json;base64,
