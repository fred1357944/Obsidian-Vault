/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => FrontmatterTagSuggestPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var FrontmatterTagSuggestPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerEditorSuggest(new TagSuggest(this));
    });
  }
};
var TagSuggest = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.inline = false;
    this.plugin = plugin;
  }
  getTags() {
    const tags = this.plugin.app.metadataCache.getTags();
    return [...Object.keys(tags)].map((p) => p.split("#").pop());
  }
  inRange(range) {
    var _a;
    if (!range || !range.length)
      return false;
    if (((_a = range.match(/^---\n/gm)) == null ? void 0 : _a.length) != 1)
      return false;
    if (!/^tags?:/gm.test(range))
      return false;
    const split = range.split(/(^\w+:?\s*\n?)/gm);
    for (let i = split.length - 1; i >= 0; i--) {
      if (/(^\w+:?\s*\n?)/gm.test(split[i]))
        return split[i].startsWith("tags:");
    }
    return false;
  }
  onTrigger(cursor, editor, _) {
    var _a;
    const lineContents = editor.getLine(cursor.line).toLowerCase();
    const onFrontmatterTagLine = lineContents.startsWith("tags:") || lineContents.startsWith("tag:") || this.inRange(editor.getRange({ line: 0, ch: 0 }, cursor));
    if (onFrontmatterTagLine) {
      this.inline = lineContents.startsWith("tags:") || lineContents.startsWith("tag:");
      const sub = editor.getLine(cursor.line).substring(0, cursor.ch);
      const match = (_a = sub.match(/(\S+)$/)) == null ? void 0 : _a.first();
      if (match) {
        this.tags = this.getTags();
        const matchData = {
          end: cursor,
          start: {
            ch: sub.lastIndexOf(match),
            line: cursor.line
          },
          query: match
        };
        return matchData;
      }
    }
    return null;
  }
  getSuggestions(context) {
    const suggestions = this.tags.filter((p) => p.toLowerCase().contains(context.query.toLowerCase()));
    return suggestions;
  }
  renderSuggestion(suggestion, el) {
    const outer = el.createDiv({ cls: "ES-suggester-container" });
    outer.createDiv({ cls: "ES-tags" }).setText(`#${suggestion}`);
  }
  selectSuggestion(suggestion) {
    if (this.context) {
      if (this.inline) {
        suggestion = `${suggestion},`;
      } else {
        suggestion = `${suggestion}
 -`;
      }
      this.context.editor.replaceRange(`${suggestion} `, this.context.start, this.context.end);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vR2l0SHViL1BlcnNvbmFsL29ic2lkaWFuLWZyb250bWF0dGVyLXRhZy1zdWdnZXN0L21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XHJcblx0RWRpdG9yLFxyXG5cdEVkaXRvclBvc2l0aW9uLFxyXG5cdEVkaXRvclN1Z2dlc3QsXHJcblx0RWRpdG9yU3VnZ2VzdENvbnRleHQsXHJcblx0RWRpdG9yU3VnZ2VzdFRyaWdnZXJJbmZvLFxyXG5cdFBsdWdpbixcclxuXHRURmlsZSxcclxufSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyb250bWF0dGVyVGFnU3VnZ2VzdFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0dGhpcy5yZWdpc3RlckVkaXRvclN1Z2dlc3QobmV3IFRhZ1N1Z2dlc3QodGhpcykpO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgVGFnU3VnZ2VzdCBleHRlbmRzIEVkaXRvclN1Z2dlc3Q8c3RyaW5nPiB7XHJcblx0cGx1Z2luOiBGcm9udG1hdHRlclRhZ1N1Z2dlc3RQbHVnaW47XHJcblx0dGFnczogc3RyaW5nW107XHJcblxyXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogRnJvbnRtYXR0ZXJUYWdTdWdnZXN0UGx1Z2luKSB7XHJcblx0XHRzdXBlcihwbHVnaW4uYXBwKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0Z2V0VGFncygpOiBzdHJpbmdbXSB7XHJcblx0XHQvL0B0cy1leHBlY3QtZXJyb3IsIHByaXZhdGUgbWV0aG9kXHJcblx0XHRjb25zdCB0YWdzOiBhbnkgPSB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRUYWdzKCk7XHJcblx0XHRyZXR1cm4gWy4uLk9iamVjdC5rZXlzKHRhZ3MpXS5tYXAoKHApID0+IHAuc3BsaXQoXCIjXCIpLnBvcCgpKTtcclxuXHR9XHJcblx0aW5SYW5nZShyYW5nZTogc3RyaW5nKSB7XHJcblx0XHRpZiAoIXJhbmdlIHx8ICFyYW5nZS5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuXHRcdGlmIChyYW5nZS5tYXRjaCgvXi0tLVxcbi9nbSk/Lmxlbmd0aCAhPSAxKSByZXR1cm4gZmFsc2U7XHJcblx0XHRpZiAoIS9edGFncz86L2dtLnRlc3QocmFuZ2UpKSByZXR1cm4gZmFsc2U7XHJcblx0XHRjb25zdCBzcGxpdCA9IHJhbmdlLnNwbGl0KC8oXlxcdys6P1xccypcXG4/KS9nbSk7XHJcblx0XHRmb3IgKGxldCBpID0gc3BsaXQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuXHRcdFx0aWYgKC8oXlxcdys6P1xccypcXG4/KS9nbS50ZXN0KHNwbGl0W2ldKSlcclxuXHRcdFx0XHRyZXR1cm4gc3BsaXRbaV0uc3RhcnRzV2l0aChcInRhZ3M6XCIpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRpbmxpbmUgPSBmYWxzZTtcclxuXHRvblRyaWdnZXIoXHJcblx0XHRjdXJzb3I6IEVkaXRvclBvc2l0aW9uLFxyXG5cdFx0ZWRpdG9yOiBFZGl0b3IsXHJcblx0XHRfOiBURmlsZVxyXG5cdCk6IEVkaXRvclN1Z2dlc3RUcmlnZ2VySW5mbyB8IG51bGwge1xyXG5cdFx0Y29uc3QgbGluZUNvbnRlbnRzID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRjb25zdCBvbkZyb250bWF0dGVyVGFnTGluZSA9XHJcblx0XHRcdGxpbmVDb250ZW50cy5zdGFydHNXaXRoKFwidGFnczpcIikgfHxcclxuXHRcdFx0bGluZUNvbnRlbnRzLnN0YXJ0c1dpdGgoXCJ0YWc6XCIpIHx8XHJcblx0XHRcdHRoaXMuaW5SYW5nZShlZGl0b3IuZ2V0UmFuZ2UoeyBsaW5lOiAwLCBjaDogMCB9LCBjdXJzb3IpKTtcclxuXHRcdGlmIChvbkZyb250bWF0dGVyVGFnTGluZSkge1xyXG5cdFx0XHR0aGlzLmlubGluZSA9XHJcblx0XHRcdFx0bGluZUNvbnRlbnRzLnN0YXJ0c1dpdGgoXCJ0YWdzOlwiKSB8fFxyXG5cdFx0XHRcdGxpbmVDb250ZW50cy5zdGFydHNXaXRoKFwidGFnOlwiKTtcclxuXHRcdFx0Y29uc3Qgc3ViID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpLnN1YnN0cmluZygwLCBjdXJzb3IuY2gpO1xyXG5cdFx0XHRjb25zdCBtYXRjaCA9IHN1Yi5tYXRjaCgvKFxcUyspJC8pPy5maXJzdCgpO1xyXG5cdFx0XHRpZiAobWF0Y2gpIHtcclxuXHRcdFx0XHR0aGlzLnRhZ3MgPSB0aGlzLmdldFRhZ3MoKTtcclxuXHRcdFx0XHRjb25zdCBtYXRjaERhdGEgPSB7XHJcblx0XHRcdFx0XHRlbmQ6IGN1cnNvcixcclxuXHRcdFx0XHRcdHN0YXJ0OiB7XHJcblx0XHRcdFx0XHRcdGNoOiBzdWIubGFzdEluZGV4T2YobWF0Y2gpLFxyXG5cdFx0XHRcdFx0XHRsaW5lOiBjdXJzb3IubGluZSxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRxdWVyeTogbWF0Y2gsXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRyZXR1cm4gbWF0Y2hEYXRhO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdGdldFN1Z2dlc3Rpb25zKGNvbnRleHQ6IEVkaXRvclN1Z2dlc3RDb250ZXh0KTogc3RyaW5nW10ge1xyXG5cdFx0Y29uc3Qgc3VnZ2VzdGlvbnMgPSB0aGlzLnRhZ3MuZmlsdGVyKChwKSA9PlxyXG5cdFx0XHRwLnRvTG93ZXJDYXNlKCkuY29udGFpbnMoY29udGV4dC5xdWVyeS50b0xvd2VyQ2FzZSgpKVxyXG5cdFx0KTtcclxuXHRcdHJldHVybiBzdWdnZXN0aW9ucztcclxuXHR9XHJcblxyXG5cdHJlbmRlclN1Z2dlc3Rpb24oc3VnZ2VzdGlvbjogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuXHRcdGNvbnN0IG91dGVyID0gZWwuY3JlYXRlRGl2KHsgY2xzOiBcIkVTLXN1Z2dlc3Rlci1jb250YWluZXJcIiB9KTtcclxuXHRcdG91dGVyLmNyZWF0ZURpdih7IGNsczogXCJFUy10YWdzXCIgfSkuc2V0VGV4dChgIyR7c3VnZ2VzdGlvbn1gKTtcclxuXHR9XHJcblxyXG5cdHNlbGVjdFN1Z2dlc3Rpb24oc3VnZ2VzdGlvbjogc3RyaW5nKTogdm9pZCB7XHJcblx0XHRpZiAodGhpcy5jb250ZXh0KSB7XHJcblx0XHRcdGlmICh0aGlzLmlubGluZSkge1xyXG5cdFx0XHRcdHN1Z2dlc3Rpb24gPSBgJHtzdWdnZXN0aW9ufSxgO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN1Z2dlc3Rpb24gPSBgJHtzdWdnZXN0aW9ufVxcbiAtYDtcclxuXHRcdFx0fVxyXG5cdFx0XHQodGhpcy5jb250ZXh0LmVkaXRvciBhcyBFZGl0b3IpLnJlcGxhY2VSYW5nZShcclxuXHRcdFx0XHRgJHtzdWdnZXN0aW9ufSBgLFxyXG5cdFx0XHRcdHRoaXMuY29udGV4dC5zdGFydCxcclxuXHRcdFx0XHR0aGlzLmNvbnRleHQuZW5kXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBUU87QUFFUCxnREFBeUQsdUJBQU87QUFBQSxFQUN6RCxTQUFTO0FBQUE7QUFDZCxXQUFLLHNCQUFzQixJQUFJLFdBQVc7QUFBQTtBQUFBO0FBQUE7QUFJNUMsK0JBQXlCLDhCQUFzQjtBQUFBLEVBSTlDLFlBQVksUUFBcUM7QUFDaEQsVUFBTSxPQUFPO0FBb0JkLGtCQUFTO0FBbkJSLFNBQUssU0FBUztBQUFBO0FBQUEsRUFHZixVQUFvQjtBQUVuQixVQUFNLE9BQVksS0FBSyxPQUFPLElBQUksY0FBYztBQUNoRCxXQUFPLENBQUMsR0FBRyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sS0FBSztBQUFBO0FBQUEsRUFFdkQsUUFBUSxPQUFlO0FBOUJ4QjtBQStCRSxRQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07QUFBUSxhQUFPO0FBQ3BDLFFBQUksYUFBTSxNQUFNLGdCQUFaLG1CQUF5QixXQUFVO0FBQUcsYUFBTztBQUNqRCxRQUFJLENBQUMsWUFBWSxLQUFLO0FBQVEsYUFBTztBQUNyQyxVQUFNLFFBQVEsTUFBTSxNQUFNO0FBQzFCLGFBQVMsSUFBSSxNQUFNLFNBQVMsR0FBRyxLQUFLLEdBQUcsS0FBSztBQUMzQyxVQUFJLG1CQUFtQixLQUFLLE1BQU07QUFDakMsZUFBTyxNQUFNLEdBQUcsV0FBVztBQUFBO0FBRTdCLFdBQU87QUFBQTtBQUFBLEVBR1IsVUFDQyxRQUNBLFFBQ0EsR0FDa0M7QUE5Q3BDO0FBK0NFLFVBQU0sZUFBZSxPQUFPLFFBQVEsT0FBTyxNQUFNO0FBQ2pELFVBQU0sdUJBQ0wsYUFBYSxXQUFXLFlBQ3hCLGFBQWEsV0FBVyxXQUN4QixLQUFLLFFBQVEsT0FBTyxTQUFTLEVBQUUsTUFBTSxHQUFHLElBQUksS0FBSztBQUNsRCxRQUFJLHNCQUFzQjtBQUN6QixXQUFLLFNBQ0osYUFBYSxXQUFXLFlBQ3hCLGFBQWEsV0FBVztBQUN6QixZQUFNLE1BQU0sT0FBTyxRQUFRLE9BQU8sTUFBTSxVQUFVLEdBQUcsT0FBTztBQUM1RCxZQUFNLFFBQVEsVUFBSSxNQUFNLGNBQVYsbUJBQXFCO0FBQ25DLFVBQUksT0FBTztBQUNWLGFBQUssT0FBTyxLQUFLO0FBQ2pCLGNBQU0sWUFBWTtBQUFBLFVBQ2pCLEtBQUs7QUFBQSxVQUNMLE9BQU87QUFBQSxZQUNOLElBQUksSUFBSSxZQUFZO0FBQUEsWUFDcEIsTUFBTSxPQUFPO0FBQUE7QUFBQSxVQUVkLE9BQU87QUFBQTtBQUVSLGVBQU87QUFBQTtBQUFBO0FBR1QsV0FBTztBQUFBO0FBQUEsRUFHUixlQUFlLFNBQXlDO0FBQ3ZELFVBQU0sY0FBYyxLQUFLLEtBQUssT0FBTyxDQUFDLE1BQ3JDLEVBQUUsY0FBYyxTQUFTLFFBQVEsTUFBTTtBQUV4QyxXQUFPO0FBQUE7QUFBQSxFQUdSLGlCQUFpQixZQUFvQixJQUF1QjtBQUMzRCxVQUFNLFFBQVEsR0FBRyxVQUFVLEVBQUUsS0FBSztBQUNsQyxVQUFNLFVBQVUsRUFBRSxLQUFLLGFBQWEsUUFBUSxJQUFJO0FBQUE7QUFBQSxFQUdqRCxpQkFBaUIsWUFBMEI7QUFDMUMsUUFBSSxLQUFLLFNBQVM7QUFDakIsVUFBSSxLQUFLLFFBQVE7QUFDaEIscUJBQWEsR0FBRztBQUFBLGFBQ1Y7QUFDTixxQkFBYSxHQUFHO0FBQUE7QUFBQTtBQUVqQixNQUFDLEtBQUssUUFBUSxPQUFrQixhQUMvQixHQUFHLGVBQ0gsS0FBSyxRQUFRLE9BQ2IsS0FBSyxRQUFRO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
