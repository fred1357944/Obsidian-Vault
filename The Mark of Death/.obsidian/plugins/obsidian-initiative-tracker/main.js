/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const INTIATIVE_TRACKER_VIEW = "initiative-tracker-view";
const MIN_WIDTH_FOR_HAMBURGER = 350;
const DEFAULT_UNDEFINED = "â€“";

function registerIcons() {
    obsidian.addIcon(BASE, ICON);
    obsidian.addIcon(SAVE, SAVE_ICON);
    /* addIcon(REMOVE, REMOVE_ICON); */
    obsidian.addIcon(RESTART, RESTART_ICON);
    obsidian.addIcon(PLAY, PLAY_ICON);
    obsidian.addIcon(FORWARD, FORWARD_ICON);
    obsidian.addIcon(BACKWARD, BACKWARD_ICON);
    obsidian.addIcon(STOP, STOP_ICON);
    obsidian.addIcon(GRIP, GRIP_ICON);
    obsidian.addIcon(HP, HP_ICON);
    obsidian.addIcon(AC, AC_ICON);
    obsidian.addIcon(HAMBURGER, HAMBURGER_ICON);
    obsidian.addIcon(ENABLE, ENABLE_ICON);
    obsidian.addIcon(DISABLE, DISABLE_ICON);
    obsidian.addIcon(TAG, TAG_ICON);
    obsidian.addIcon(EDIT, EDIT_ICON);
    obsidian.addIcon(INITIATIVE, INITIATIVE_ICON);
}
const BASE = "initiative-tracker";
const ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice-d20" class="svg-inline--fa fa-dice-d20 fa-w-15" role="img" viewBox="0 0 480 512"><path fill="currentColor" d="M106.75 215.06L1.2 370.95c-3.08 5 .1 11.5 5.93 12.14l208.26 22.07-108.64-190.1zM7.41 315.43L82.7 193.08 6.06 147.1c-2.67-1.6-6.06.32-6.06 3.43v162.81c0 4.03 5.29 5.53 7.41 2.09zM18.25 423.6l194.4 87.66c5.3 2.45 11.35-1.43 11.35-7.26v-65.67l-203.55-22.3c-4.45-.5-6.23 5.59-2.2 7.57zm81.22-257.78L179.4 22.88c4.34-7.06-3.59-15.25-10.78-11.14L17.81 110.35c-2.47 1.62-2.39 5.26.13 6.78l81.53 48.69zM240 176h109.21L253.63 7.62C250.5 2.54 245.25 0 240 0s-10.5 2.54-13.63 7.62L130.79 176H240zm233.94-28.9l-76.64 45.99 75.29 122.35c2.11 3.44 7.41 1.94 7.41-2.1V150.53c0-3.11-3.39-5.03-6.06-3.43zm-93.41 18.72l81.53-48.7c2.53-1.52 2.6-5.16.13-6.78l-150.81-98.6c-7.19-4.11-15.12 4.08-10.78 11.14l79.93 142.94zm79.02 250.21L256 438.32v65.67c0 5.84 6.05 9.71 11.35 7.26l194.4-87.66c4.03-1.97 2.25-8.06-2.2-7.56zm-86.3-200.97l-108.63 190.1 208.26-22.07c5.83-.65 9.01-7.14 5.93-12.14L373.25 215.06zM240 208H139.57L240 383.75 340.43 208H240z"/></svg>`;
const SAVE = "initiative-tracker-save";
const SAVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="save" class="svg-inline--fa fa-save fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"/></svg>`;
/* export const REMOVE = "initiative-tracker-remove"; */
const REMOVE = "trash";
const RESTART = "initiative-tracker-restart";
const RESTART_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="redo" class="svg-inline--fa fa-redo fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z"/></svg>`;
const PLAY = "initiative-tracker-play";
const PLAY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="play" class="svg-inline--fa fa-play fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"/></svg>`;
const FORWARD = "initiative-tracker-forward";
const FORWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-forward" class="svg-inline--fa fa-step-forward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"/></svg>`;
const BACKWARD = "initiative-tracker-backward";
const BACKWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-backward" class="svg-inline--fa fa-step-backward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z"/></svg>`;
const STOP = "initiative-tracker-stop";
const STOP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="stop" class="svg-inline--fa fa-stop fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"/></svg>`;
const GRIP = "initiative-tracker-grip";
const GRIP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-vertical" class="svg-inline--fa fa-grip-vertical fa-w-10" role="img" viewBox="0 0 320 512"><path fill="currentColor" d="M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z"/></svg>`;
const HP = "initiative-tracker-hp";
const HP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M458.4 64.3C400.6 15.7 311.3 23 256 79.3 200.7 23 111.4 15.6 53.6 64.3-21.6 127.6-10.6 230.8 43 285.5l175.4 178.7c10 10.2 23.4 15.9 37.6 15.9 14.3 0 27.6-5.6 37.6-15.8L469 285.6c53.5-54.7 64.7-157.9-10.6-221.3zm-23.6 187.5L259.4 430.5c-2.4 2.4-4.4 2.4-6.8 0L77.2 251.8c-36.5-37.2-43.9-107.6 7.3-150.7 38.9-32.7 98.9-27.8 136.5 10.5l35 35.7 35-35.7c37.8-38.5 97.8-43.2 136.5-10.6 51.1 43.1 43.5 113.9 7.3 150.8z"/></svg>`;
const AC = "initiative-tracker-ac";
const AC_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="shield-alt" class="svg-inline--fa fa-shield-alt fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M466.5 83.7l-192-80a48.15 48.15 0 0 0-36.9 0l-192 80C27.7 91.1 16 108.6 16 128c0 198.5 114.5 335.7 221.5 380.3 11.8 4.9 25.1 4.9 36.9 0C360.1 472.6 496 349.3 496 128c0-19.4-11.7-36.9-29.5-44.3zM256.1 446.3l-.1-381 175.9 73.3c-3.3 151.4-82.1 261.1-175.8 307.7z"/></svg>`;
const HAMBURGER = "initiative-tracker-hamburger";
const HAMBURGER_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="bars" class="svg-inline--fa fa-bars fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg>`;
const DISABLE = "initiative-tracker-disable";
const DISABLE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user-slash" class="svg-inline--fa fa-user-slash fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M633.8 458.1L362.3 248.3C412.1 230.7 448 183.8 448 128 448 57.3 390.7 0 320 0c-67.1 0-121.5 51.8-126.9 117.4L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3zM96 422.4V464c0 26.5 21.5 48 48 48h350.2L207.4 290.3C144.2 301.3 96 356 96 422.4z"/></svg>`;
const ENABLE = "initiative-tracker-enable";
const ENABLE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user-check" class="svg-inline--fa fa-user-check fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4zm323-128.4l-27.8-28.1c-4.6-4.7-12.1-4.7-16.8-.1l-104.8 104-45.5-45.8c-4.6-4.7-12.1-4.7-16.8-.1l-28.1 27.9c-4.7 4.6-4.7 12.1-.1 16.8l81.7 82.3c4.6 4.7 12.1 4.7 16.8.1l141.3-140.2c4.6-4.7 4.7-12.2.1-16.8z"/></svg>`;
const EDIT = "initiative-tracker-edit";
const EDIT_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="edit" class="svg-inline--fa fa-edit fa-w-18" role="img" viewBox="0 0 576 512"><path fill="currentColor" d="M402.3 344.9l32-32c5-5 13.7-1.5 13.7 5.7V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h273.5c7.1 0 10.7 8.6 5.7 13.7l-32 32c-1.5 1.5-3.5 2.3-5.7 2.3H48v352h352V350.5c0-2.1.8-4.1 2.3-5.6zm156.6-201.8L296.3 405.7l-90.4 10c-26.2 2.9-48.5-19.2-45.6-45.6l10-90.4L432.9 17.1c22.9-22.9 59.9-22.9 82.7 0l43.2 43.2c22.9 22.9 22.9 60 .1 82.8zM460.1 174L402 115.9 216.2 301.8l-7.3 65.3 65.3-7.3L460.1 174zm64.8-79.7l-43.2-43.2c-4.1-4.1-10.8-4.1-14.8 0L436 82l58.1 58.1 30.9-30.9c4-4.2 4-10.8-.1-14.9z"/></svg>`;
const TAG = "initiative-tracker-tags";
const TAG_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="tag" class="svg-inline--fa fa-tag fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M0 252.118V48C0 21.49 21.49 0 48 0h204.118a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882L293.823 497.941c-18.745 18.745-49.137 18.745-67.882 0L14.059 286.059A48 48 0 0 1 0 252.118zM112 64c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z"/></svg>`;
const INITIATIVE = "initiative-tracker-initiative";
const INITIATIVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="running" class="svg-inline--fa fa-running fa-w-13" role="img" viewBox="0 0 416 512"><path fill="currentColor" d="M272 96c26.51 0 48-21.49 48-48S298.51 0 272 0s-48 21.49-48 48 21.49 48 48 48zM113.69 317.47l-14.8 34.52H32c-17.67 0-32 14.33-32 32s14.33 32 32 32h77.45c19.25 0 36.58-11.44 44.11-29.09l8.79-20.52-10.67-6.3c-17.32-10.23-30.06-25.37-37.99-42.61zM384 223.99h-44.03l-26.06-53.25c-12.5-25.55-35.45-44.23-61.78-50.94l-71.08-21.14c-28.3-6.8-57.77-.55-80.84 17.14l-39.67 30.41c-14.03 10.75-16.69 30.83-5.92 44.86s30.84 16.66 44.86 5.92l39.69-30.41c7.67-5.89 17.44-8 25.27-6.14l14.7 4.37-37.46 87.39c-12.62 29.48-1.31 64.01 26.3 80.31l84.98 50.17-27.47 87.73c-5.28 16.86 4.11 34.81 20.97 40.09 3.19 1 6.41 1.48 9.58 1.48 13.61 0 26.23-8.77 30.52-22.45l31.64-101.06c5.91-20.77-2.89-43.08-21.64-54.39l-61.24-36.14 31.31-78.28 20.27 41.43c8 16.34 24.92 26.89 43.11 26.89H384c17.67 0 32-14.33 32-32s-14.33-31.99-32-31.99z"/></svg>`;

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
// at the end of hydration without touching the remaining nodes.
let is_hydrating = false;
function start_hydrating() {
    is_hydrating = true;
}
function end_hydrating() {
    is_hydrating = false;
}
function upper_bound(low, high, key, value) {
    // Return first index of value larger than input value in the range [low, high)
    while (low < high) {
        const mid = low + ((high - low) >> 1);
        if (key(mid) <= value) {
            low = mid + 1;
        }
        else {
            high = mid;
        }
    }
    return low;
}
function init_hydrate(target) {
    if (target.hydrate_init)
        return;
    target.hydrate_init = true;
    // We know that all children have claim_order values since the unclaimed have been detached
    const children = target.childNodes;
    /*
    * Reorder claimed children optimally.
    * We can reorder claimed children optimally by finding the longest subsequence of
    * nodes that are already claimed in order and only moving the rest. The longest
    * subsequence subsequence of nodes that are claimed in order can be found by
    * computing the longest increasing subsequence of .claim_order values.
    *
    * This algorithm is optimal in generating the least amount of reorder operations
    * possible.
    *
    * Proof:
    * We know that, given a set of reordering operations, the nodes that do not move
    * always form an increasing subsequence, since they do not move among each other
    * meaning that they must be already ordered among each other. Thus, the maximal
    * set of nodes that do not move form a longest increasing subsequence.
    */
    // Compute longest increasing subsequence
    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
    const m = new Int32Array(children.length + 1);
    // Predecessor indices + 1
    const p = new Int32Array(children.length);
    m[0] = -1;
    let longest = 0;
    for (let i = 0; i < children.length; i++) {
        const current = children[i].claim_order;
        // Find the largest subsequence length such that it ends in a value less than our current value
        // upper_bound returns first greater value, so we subtract one
        const seqLen = upper_bound(1, longest + 1, idx => children[m[idx]].claim_order, current) - 1;
        p[i] = m[seqLen] + 1;
        const newLen = seqLen + 1;
        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
        m[newLen] = i;
        longest = Math.max(newLen, longest);
    }
    // The longest increasing subsequence of nodes (initially reversed)
    const lis = [];
    // The rest of the nodes, nodes that will be moved
    const toMove = [];
    let last = children.length - 1;
    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
        lis.push(children[cur - 1]);
        for (; last >= cur; last--) {
            toMove.push(children[last]);
        }
        last--;
    }
    for (; last >= 0; last--) {
        toMove.push(children[last]);
    }
    lis.reverse();
    // We sort the nodes being moved to guarantee that their insertion order matches the claim order
    toMove.sort((a, b) => a.claim_order - b.claim_order);
    // Finally, we move the nodes
    for (let i = 0, j = 0; i < toMove.length; i++) {
        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
            j++;
        }
        const anchor = j < lis.length ? lis[j] : null;
        target.insertBefore(toMove[i], anchor);
    }
}
function append(target, node) {
    if (is_hydrating) {
        init_hydrate(target);
        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {
            target.actual_end_child = target.firstChild;
        }
        if (node !== target.actual_end_child) {
            target.insertBefore(node, target.actual_end_child);
        }
        else {
            target.actual_end_child = node.nextSibling;
        }
    }
    else if (node.parentNode !== target) {
        target.appendChild(node);
    }
}
function insert(target, node, anchor) {
    if (is_hydrating && !anchor) {
        append(target, node);
    }
    else if (node.parentNode !== target || (anchor && node.nextSibling !== anchor)) {
        target.insertBefore(node, anchor || null);
    }
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            start_hydrating();
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        end_hydrating();
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const creatures = writable([]);
const show = writable(false);
const current = writable();
const active = writable(false);
const view = writable();
var store = { creatures, show, current, active, view };

/* src\svelte\Controls.svelte generated by Svelte v3.38.3 */

function add_css$4() {
	var style = element("style");
	style.id = "svelte-xfh3t0-style";
	style.textContent = ".buttons.svelte-xfh3t0.svelte-xfh3t0{display:flex;justify-content:flex-start;align-items:center}.buttons.svelte-xfh3t0>.svelte-xfh3t0:not(:last-child){margin-right:0.25rem}";
	append(document.head, style);
}

// (68:4) {:else}
function create_else_block$2(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "svelte-xfh3t0");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*playButton*/ ctx[1].call(null, div));
				mounted = true;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (64:4) {#if active}
function create_if_block$3(ctx) {
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			attr(div0, "class", "svelte-xfh3t0");
			attr(div1, "class", "svelte-xfh3t0");
			attr(div2, "class", "svelte-xfh3t0");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			insert(target, t1, anchor);
			insert(target, div2, anchor);

			if (!mounted) {
				dispose = [
					action_destroyer(/*stopButton*/ ctx[2].call(null, div0)),
					action_destroyer(/*prevButton*/ ctx[4].call(null, div1)),
					action_destroyer(/*nextButton*/ ctx[3].call(null, div2))
				];

				mounted = true;
			}
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$4(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*active*/ ctx[0]) return create_if_block$3;
		return create_else_block$2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "buttons svelte-xfh3t0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	

	/* export let numberOfCreatures: number = 0; */
	let active = false, creatures = [], current;

	store.creatures.subscribe(value => {
		creatures = value;
		creatures.sort((a, b) => b.initiative - a.initiative);
	});

	store.current.subscribe(value => {
		current = value;
	});

	store.active.set(active);

	const playButton = node => {
		new obsidian.ExtraButtonComponent(node).setIcon(PLAY).setTooltip("Play").onClick(() => {
			const enabled = creatures.filter(c => c.enabled); /*
    .setDisabled(numberOfCreatures == 0) */

			store.current.set(enabled[0]);
			$$invalidate(0, active = true);
			store.active.set(active);
		});
	};

	const stopButton = node => {
		new obsidian.ExtraButtonComponent(node).setIcon(STOP).setTooltip("Stop").onClick(() => {
			$$invalidate(0, active = false); /*
    .setDisabled(numberOfCreatures == 0) */

			store.active.set(active);
		});
	};

	const nextButton = node => {
		new obsidian.ExtraButtonComponent(node).setIcon(FORWARD).setTooltip("Next").onClick(() => {
			const enabled = creatures.filter(c => c.enabled);
			const index = enabled.indexOf(current);
			const c = ((index + 1) % enabled.length + enabled.length) % enabled.length;
			store.current.set(enabled[c]);
		});
	};

	const prevButton = node => {
		new obsidian.ExtraButtonComponent(node).setIcon(BACKWARD).setTooltip("Previous").onClick(() => {
			const enabled = creatures.filter(c => c.enabled);
			const index = enabled.indexOf(current);
			const c = ((index - 1) % enabled.length + enabled.length) % enabled.length;
			store.current.set(enabled[c]);
		});
	};

	return [active, playButton, stopButton, nextButton, prevButton];
}

class Controls extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-xfh3t0-style")) add_css$4();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
	}
}

/* src\svelte\Creature.svelte generated by Svelte v3.38.3 */

function add_css$3() {
	var style = element("style");
	style.id = "svelte-pcv4x0-style";
	style.textContent = ".initiative-tracker-creature.svelte-pcv4x0.svelte-pcv4x0{width:100%;padding:0.5rem 0;display:contents}.initiative-tracker-creature.disabled.svelte-pcv4x0 .svelte-pcv4x0{color:var(--text-faint)}.active-holder.svelte-pcv4x0.svelte-pcv4x0{margin-left:-0.5rem}.initiative-tracker-creature.svelte-pcv4x0 .initiative.svelte-pcv4x0{display:block;padding:0;width:12px;text-align:right;white-space:nowrap;margin-left:-0.5rem;user-select:all;background-color:inherit;border:0}.initiative-tracker-creature.svelte-pcv4x0 .name.svelte-pcv4x0{display:block;text-align:left;white-space:nowrap;user-select:all;background-color:inherit;border:0;font-size:smaller;padding:0;height:unset}.statuses.svelte-pcv4x0.svelte-pcv4x0{grid-column:span 4;font-size:smaller;margin-bottom:0.5rem;display:flex;flex-flow:row wrap}.status.svelte-pcv4x0.svelte-pcv4x0{margin-right:0.1rem;display:flex;align-items:center}.center.svelte-pcv4x0.svelte-pcv4x0{text-align:center}.editable.svelte-pcv4x0.svelte-pcv4x0:not(.player){cursor:pointer}.controls.svelte-pcv4x0.svelte-pcv4x0{display:flex;justify-content:flex-end}.add-button.svelte-pcv4x0.svelte-pcv4x0{display:none}.show.svelte-pcv4x0.svelte-pcv4x0{display:block}";
	append(document.head, style);
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	return child_ctx;
}

// (142:8) {#if current == creature}
function create_if_block_2(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z");
			attr(path, "class", "svelte-pcv4x0");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "data-prefix", "fas");
			attr(svg, "data-icon", "angle-right");
			attr(svg, "class", "svg-inline--fa fa-angle-right fa-w-8 svelte-pcv4x0");
			attr(svg, "role", "img");
			attr(svg, "viewBox", "0 0 256 512");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (183:4) {:else}
function create_else_block_1(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "class", "editable name svelte-pcv4x0");
			attr(input, "type", "text");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			set_input_value(input, /*creature*/ ctx[0].name);

			if (!mounted) {
				dispose = [
					listen(input, "focus", focus_handler),
					listen(input, "blur", /*updateName*/ ctx[6]),
					listen(input, "keydown", keydown_handler_1),
					listen(input, "input", /*input_input_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*creature*/ 1 && input.value !== /*creature*/ ctx[0].name) {
				set_input_value(input, /*creature*/ ctx[0].name);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (181:4) {#if creature.player}
function create_if_block_1$1(ctx) {
	let small;
	let t_value = /*creature*/ ctx[0].name + "";
	let t;

	return {
		c() {
			small = element("small");
			t = text(t_value);
			attr(small, "class", "svelte-pcv4x0");
		},
		m(target, anchor) {
			insert(target, small, anchor);
			append(small, t);
		},
		p(ctx, dirty) {
			if (dirty & /*creature*/ 1 && t_value !== (t_value = /*creature*/ ctx[0].name + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(small);
		}
	};
}

// (221:8) {:else}
function create_else_block$1(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "add-button enable svelte-pcv4x0");
			toggle_class(div, "show", !/*show*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*enableButton*/ ctx[9].call(null, div));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*show*/ 4) {
				toggle_class(div, "show", !/*show*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (215:8) {#if creature.enabled}
function create_if_block$2(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "add-button enable svelte-pcv4x0");
			toggle_class(div, "show", !/*show*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*disableButton*/ ctx[10].call(null, div));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*show*/ 4) {
				toggle_class(div, "show", !/*show*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (235:8) {#each statuses as status}
function create_each_block$1(ctx) {
	let div1;
	let span;
	let t0_value = /*status*/ ctx[22] + "";
	let t0;
	let t1;
	let div0;
	let deleteIcon_action;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			t2 = space();
			attr(span, "class", "svelte-pcv4x0");
			attr(div0, "class", "svelte-pcv4x0");
			attr(div1, "class", "status svelte-pcv4x0");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			append(div1, div0);
			append(div1, t2);

			if (!mounted) {
				dispose = action_destroyer(deleteIcon_action = /*deleteIcon*/ ctx[12].call(null, div0, /*status*/ ctx[22]));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*statuses*/ 16 && t0_value !== (t0_value = /*status*/ ctx[22] + "")) set_data(t0, t0_value);
			if (deleteIcon_action && is_function(deleteIcon_action.update) && dirty & /*statuses*/ 16) deleteIcon_action.update.call(null, /*status*/ ctx[22]);
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$3(ctx) {
	let div6;
	let span0;
	let t0;
	let input;
	let t1;
	let t2;
	let div0;
	let span1;
	let t3_value = /*creature*/ ctx[0].hpDisplay + "";
	let t3;
	let t4;
	let span2;
	let t5_value = (/*creature*/ ctx[0].ac ?? DEFAULT_UNDEFINED) + "";
	let t5;
	let t6;
	let div4;
	let div1;
	let t7;
	let div2;
	let t8;
	let t9;
	let div3;
	let t10;
	let span3;
	let t11;
	let span4;
	let t12;
	let div5;
	let mounted;
	let dispose;
	let if_block0 = /*current*/ ctx[1] == /*creature*/ ctx[0] && create_if_block_2();

	function select_block_type(ctx, dirty) {
		if (/*creature*/ ctx[0].player) return create_if_block_1$1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*creature*/ ctx[0].enabled) return create_if_block$2;
		return create_else_block$1;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block2 = current_block_type_1(ctx);
	let each_value = /*statuses*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			div6 = element("div");
			span0 = element("span");
			if (if_block0) if_block0.c();
			t0 = space();
			input = element("input");
			t1 = space();
			if_block1.c();
			t2 = space();
			div0 = element("div");
			span1 = element("span");
			t3 = text(t3_value);
			t4 = space();
			span2 = element("span");
			t5 = text(t5_value);
			t6 = space();
			div4 = element("div");
			div1 = element("div");
			t7 = space();
			div2 = element("div");
			t8 = space();
			if_block2.c();
			t9 = space();
			div3 = element("div");
			t10 = space();
			span3 = element("span");
			t11 = space();
			span4 = element("span");
			t12 = space();
			div5 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span0, "class", "active-holder svelte-pcv4x0");
			attr(input, "class", "editable initiative tree-item-flair svelte-pcv4x0");
			attr(span1, "class", "editable svelte-pcv4x0");
			attr(div0, "class", "center svelte-pcv4x0");
			attr(span2, "class", "center svelte-pcv4x0");
			attr(div1, "class", "add-button icon svelte-pcv4x0");
			toggle_class(div1, "show", /*show*/ ctx[2]);
			attr(div2, "class", "add-button tags svelte-pcv4x0");
			toggle_class(div2, "show", !/*show*/ ctx[2]);
			attr(div3, "class", "add-button delete svelte-pcv4x0");
			toggle_class(div3, "show", !/*show*/ ctx[2]);
			attr(div4, "class", "controls svelte-pcv4x0");
			attr(span3, "class", "svelte-pcv4x0");
			attr(span4, "class", "svelte-pcv4x0");
			attr(div5, "class", "statuses svelte-pcv4x0");
			attr(div6, "class", "initiative-tracker-creature svelte-pcv4x0");
			toggle_class(div6, "active", /*current*/ ctx[1] == /*creature*/ ctx[0]);
			toggle_class(div6, "disabled", !/*creature*/ ctx[0].enabled);
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, span0);
			if (if_block0) if_block0.m(span0, null);
			append(div6, t0);
			append(div6, input);
			/*input_binding*/ ctx[13](input);
			set_input_value(input, /*creature*/ ctx[0].initiative);
			append(div6, t1);
			if_block1.m(div6, null);
			append(div6, t2);
			append(div6, div0);
			append(div0, span1);
			append(span1, t3);
			append(div6, t4);
			append(div6, span2);
			append(span2, t5);
			append(div6, t6);
			append(div6, div4);
			append(div4, div1);
			append(div4, t7);
			append(div4, div2);
			append(div4, t8);
			if_block2.m(div4, null);
			append(div4, t9);
			append(div4, div3);
			append(div6, t10);
			append(div6, span3);
			append(div6, t11);
			append(div6, span4);
			append(div6, t12);
			append(div6, div5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div5, null);
			}

			if (!mounted) {
				dispose = [
					listen(input, "click", click_handler),
					listen(input, "blur", /*blur_handler*/ ctx[14]),
					listen(input, "keydown", keydown_handler),
					listen(input, "input", /*input_input_handler*/ ctx[15]),
					listen(span1, "click", /*click_handler_1*/ ctx[17]),
					action_destroyer(/*hamburgerIcon*/ ctx[11].call(null, div1)),
					action_destroyer(/*tagButton*/ ctx[8].call(null, div2)),
					action_destroyer(/*deleteButton*/ ctx[7].call(null, div3))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*current*/ ctx[1] == /*creature*/ ctx[0]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_2();
					if_block0.c();
					if_block0.m(span0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*creature*/ 1 && input.value !== /*creature*/ ctx[0].initiative) {
				set_input_value(input, /*creature*/ ctx[0].initiative);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div6, t2);
				}
			}

			if (dirty & /*creature*/ 1 && t3_value !== (t3_value = /*creature*/ ctx[0].hpDisplay + "")) set_data(t3, t3_value);
			if (dirty & /*creature*/ 1 && t5_value !== (t5_value = (/*creature*/ ctx[0].ac ?? DEFAULT_UNDEFINED) + "")) set_data(t5, t5_value);

			if (dirty & /*show*/ 4) {
				toggle_class(div1, "show", /*show*/ ctx[2]);
			}

			if (dirty & /*show*/ 4) {
				toggle_class(div2, "show", !/*show*/ ctx[2]);
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_1(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div4, t9);
				}
			}

			if (dirty & /*show*/ 4) {
				toggle_class(div3, "show", !/*show*/ ctx[2]);
			}

			if (dirty & /*statuses*/ 16) {
				each_value = /*statuses*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div5, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*current, creature*/ 3) {
				toggle_class(div6, "active", /*current*/ ctx[1] == /*creature*/ ctx[0]);
			}

			if (dirty & /*creature*/ 1) {
				toggle_class(div6, "disabled", !/*creature*/ ctx[0].enabled);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div6);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[13](null);
			if_block1.d();
			if_block2.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const click_handler = function (evt) {
	this.select();
};

const keydown_handler = function (evt) {
	if (evt.key === "Enter" || evt.key === "Tab") {
		evt.preventDefault();
		this.blur();
		return;
	}

	if (!(/^(\d*\.?\d*|Backspace|Delete|Arrow\w+)$/).test(evt.key)) {
		evt.preventDefault();
		return;
	}
};

const focus_handler = function (evt) {
	this.select();
};

const keydown_handler_1 = function (evt) {
	if (evt.key === "Enter" || evt.key === "Tab") {
		evt.preventDefault();
		this.blur();
		return;
	}
};

function instance$3($$self, $$props, $$invalidate) {
	let statuses;
	
	
	let { creature } = $$props;
	const dispatch = createEventDispatcher();

	const updateName = evt => {
		$$invalidate(0, creature.name = evt.target.value, creature);
	};

	let current;

	store.current.subscribe(value => {
		$$invalidate(1, current = value);
	});

	store.active.subscribe(value => {
	});

	let show;

	store.show.subscribe(value => {
		$$invalidate(2, show = value);
	});

	let creatures;

	store.creatures.subscribe(value => {
		creatures = value;
	});

	let view;

	store.view.subscribe(value => {
		view = value;
	});

	const deleteButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Remove").setIcon(REMOVE).onClick(() => {
			dispatch("remove", creature);
		});
	};

	const tagButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Status").setIcon(TAG).onClick(() => {
			dispatch("tag", creature);
		});
	};

	const enableButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Enable").setIcon(ENABLE).onClick(() => {
			$$invalidate(0, creature.enabled = true, creature);
		});
	};

	const disableButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Disable").setIcon(DISABLE).onClick(() => {
			$$invalidate(0, creature.enabled = false, creature);

			if (current == creature) {
				const enabled = creatures.filter(c => c.enabled);
				const index = enabled.indexOf(current);
				const c = ((index + 1) % enabled.length + enabled.length) % enabled.length;
				store.current.set(enabled[c]);
			}
		});
	};

	const hamburgerIcon = node => {
		const hamburger = new obsidian.ExtraButtonComponent(node).setIcon(HAMBURGER);

		hamburger.extraSettingsEl.onclick = evt => {
			const menu = new obsidian.Menu(view.plugin.app);

			menu.addItem(item => {
				item.setIcon(TAG).setTitle("Add Tag").onClick(() => {
					dispatch("tag", creature);
				});
			});

			if (creature.enabled) {
				menu.addItem(item => {
					item.setIcon(DISABLE).setTitle("Disable").onClick(() => {
						$$invalidate(0, creature.enabled = false, creature);

						if (current == creature) {
							const enabled = creatures.filter(c => c.enabled);
							const index = enabled.indexOf(current);
							const c = ((index + 1) % enabled.length + enabled.length) % enabled.length;
							store.current.set(enabled[c]);
						}
					});
				});
			} else {
				menu.addItem(item => {
					item.setIcon(ENABLE).setTitle("Enable").onClick(() => {
						$$invalidate(0, creature.enabled = true, creature);
					});
				});
			}

			menu.addItem(item => {
				item.setIcon(REMOVE).setTitle("Remove").onClick(() => {
					dispatch("remove", creature);
				});
			});

			menu.showAtPosition(evt);
		};
	};

	const deleteIcon = (node, status) => {
		const icon = new obsidian.ExtraButtonComponent(node).setIcon("cross-in-box").onClick(() => {
			creature.status.delete(status);
			$$invalidate(4, statuses = Array.from(creature.status));
		});

		icon.extraSettingsEl.setAttr("style", "margin-left: 3px;");
	};
	let initiativeInput;

	afterUpdate(() => {
		$$invalidate(3, initiativeInput.value = `${creature.initiative}`, initiativeInput);
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			initiativeInput = $$value;
			$$invalidate(3, initiativeInput);
		});
	}

	const blur_handler = function (evt) {
		dispatch("initiative", { creature, value: this.value });
	};

	function input_input_handler() {
		creature.initiative = this.value;
		$$invalidate(0, creature);
	}

	function input_input_handler_1() {
		creature.name = this.value;
		$$invalidate(0, creature);
	}

	const click_handler_1 = () => {
		/* if (creature.hp) */ dispatch("hp", creature);
	};

	$$self.$$set = $$props => {
		if ("creature" in $$props) $$invalidate(0, creature = $$props.creature);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*creature*/ 1) {
			$$invalidate(4, statuses = Array.from(creature.status));
		}
	};

	return [
		creature,
		current,
		show,
		initiativeInput,
		statuses,
		dispatch,
		updateName,
		deleteButton,
		tagButton,
		enableButton,
		disableButton,
		hamburgerIcon,
		deleteIcon,
		input_binding,
		blur_handler,
		input_input_handler,
		input_input_handler_1,
		click_handler_1
	];
}

class Creature$1 extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-pcv4x0-style")) add_css$3();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { creature: 0 });
	}
}

/* src\svelte\Table.svelte generated by Svelte v3.38.3 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-p1efnr-style";
	style.textContent = ".initiative-tracker-table.svelte-p1efnr{padding:0.5rem;display:grid;grid-template-columns:0rem auto /* 12px */ 1fr auto auto auto;align-items:center;gap:0 0.5rem;width:100%;margin-left:0rem}.center.svelte-p1efnr{text-align:center}.tracker-table-header.svelte-p1efnr{display:contents;font-weight:bolder}.initiative-tracker-table.no-creatures.svelte-p1efnr{align-items:center}.updating-hp.svelte-p1efnr{display:grid;grid-template-rows:auto 1fr;width:100%}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (67:8) {#each creaturesArray as creature}
function create_each_block(ctx) {
	let creaturetemplate;
	let current;

	creaturetemplate = new Creature$1({
			props: { creature: /*creature*/ ctx[15] }
		});

	creaturetemplate.$on("remove", /*remove*/ ctx[4]);
	creaturetemplate.$on("hp", /*hp_handler*/ ctx[10]);
	creaturetemplate.$on("tag", /*tag_handler*/ ctx[11]);
	creaturetemplate.$on("initiative", /*initiative_handler*/ ctx[12]);

	return {
		c() {
			create_component(creaturetemplate.$$.fragment);
		},
		m(target, anchor) {
			mount_component(creaturetemplate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const creaturetemplate_changes = {};
			if (dirty & /*creaturesArray*/ 2) creaturetemplate_changes.creature = /*creature*/ ctx[15];
			creaturetemplate.$set(creaturetemplate_changes);
		},
		i(local) {
			if (current) return;
			transition_in(creaturetemplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(creaturetemplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(creaturetemplate, detaching);
		}
	};
}

// (78:4) {#if updatingHP}
function create_if_block_1(ctx) {
	let div;
	let span;
	let t1;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			span = element("span");
			span.textContent = "Apply damage or healing:";
			t1 = space();
			input = element("input");
			attr(input, "type", "number");
			attr(div, "class", "updating-hp svelte-p1efnr");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(div, t1);
			append(div, input);

			if (!mounted) {
				dispose = listen(input, "blur", /*blur_handler*/ ctx[13]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (89:4) {#if updatingStatus}
function create_if_block$1(ctx) {
	let div;
	let span;
	let t1;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			span = element("span");
			span.textContent = "Apply status:";
			t1 = space();
			input = element("input");
			attr(input, "type", "text");
			attr(div, "class", "updating-hp svelte-p1efnr");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(div, t1);
			append(div, input);

			if (!mounted) {
				dispose = listen(input, "blur", /*blur_handler_1*/ ctx[14]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$2(ctx) {
	let div2;
	let div1;
	let div0;
	let span0;
	let t0;
	let span1;
	let t1;
	let span2;
	let t3;
	let span3;
	let t4;
	let span4;
	let t5;
	let span5;
	let t6;
	let t7;
	let t8;
	let current;
	let mounted;
	let dispose;
	let each_value = /*creaturesArray*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block0 = /*updatingHP*/ ctx[2] && create_if_block_1(ctx);
	let if_block1 = /*updatingStatus*/ ctx[3] && create_if_block$1(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			t1 = space();
			span2 = element("span");
			span2.textContent = "Name";
			t3 = space();
			span3 = element("span");
			t4 = space();
			span4 = element("span");
			t5 = space();
			span5 = element("span");
			t6 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			if (if_block0) if_block0.c();
			t8 = space();
			if (if_block1) if_block1.c();
			attr(span3, "class", "center svelte-p1efnr");
			attr(span4, "class", "center svelte-p1efnr");
			attr(div0, "class", "tracker-table-header svelte-p1efnr");
			attr(div1, "class", "initiative-tracker-table svelte-p1efnr");
			toggle_class(div1, "no-creatures", !/*creaturesArray*/ ctx[1] || /*numberOfCreatures*/ ctx[0] == 0);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, span0);
			append(div0, t0);
			append(div0, span1);
			append(div0, t1);
			append(div0, span2);
			append(div0, t3);
			append(div0, span3);
			append(div0, t4);
			append(div0, span4);
			append(div0, t5);
			append(div0, span5);
			append(div1, t6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(div2, t7);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t8);
			if (if_block1) if_block1.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(/*hpIcon*/ ctx[6].call(null, span3)),
					action_destroyer(/*acIcon*/ ctx[7].call(null, span4))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*creaturesArray, remove, updatingHP, updatingStatus, updateInitiative*/ 62) {
				each_value = /*creaturesArray*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*creaturesArray, numberOfCreatures*/ 3) {
				toggle_class(div1, "no-creatures", !/*creaturesArray*/ ctx[1] || /*numberOfCreatures*/ ctx[0] == 0);
			}

			if (/*updatingHP*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div2, t8);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*updatingStatus*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	
	let numberOfCreatures = 0;
	let creaturesArray = [];

	store.creatures.subscribe(value => {
		$$invalidate(0, numberOfCreatures = value.length);
		$$invalidate(1, creaturesArray = [...value]);
		console.log("ðŸš€ ~ file: Table.svelte ~ line 16 ~ creaturesArray", ...creaturesArray);
		creaturesArray.sort((a, b) => b.initiative - a.initiative);
	});

	const remove = event => {
		store.creatures.set([...creaturesArray.filter(c => c != event.detail)]);
	};

	const updateInitiative = (creature, value) => {
		console.log("ðŸš€ ~ file: Table.svelte ~ line 26 ~ creature", creature.name);

		if (isNaN(Number(value)) || Number(value) < 1) {
			new obsidian.Notice("Enter a valid initiative.");
			store.creatures.set([...creaturesArray]);
			return;
		}

		if (creature.initiative == Number(value)) {
			return;
		}

		creature.initiative = Number(value);
		console.log("ðŸš€ ~ file: Table.svelte ~ line 43 ~ creaturesArray", ...creaturesArray);
		store.creatures.set([...creaturesArray]);
	};

	const hpIcon = node => {
		obsidian.setIcon(node, HP);
	};

	const acIcon = node => {
		obsidian.setIcon(node, AC);
	};

	let updatingHP;

	const updateHP = toAdd => {
		console.log("ðŸš€ ~ file: Table.svelte ~ line 62 ~ toAdd", toAdd);
		$$invalidate(2, updatingHP.hp -= Number(toAdd), updatingHP);
		$$invalidate(2, updatingHP = null);
		store.creatures.set([...creaturesArray]);
	};

	let updatingStatus;

	const addStatus = tag => {
		updatingStatus.status.add(tag);
		$$invalidate(3, updatingStatus = null);
		store.creatures.set([...creaturesArray]);
	};

	const hp_handler = evt => $$invalidate(2, updatingHP = evt.detail);
	const tag_handler = evt => $$invalidate(3, updatingStatus = evt.detail);
	const initiative_handler = evt => updateInitiative(evt.detail.creature, evt.detail.value);

	const blur_handler = function (evt) {
		updateHP(this.value);
	};

	const blur_handler_1 = function (evt) {
		addStatus(this.value);
	};

	return [
		numberOfCreatures,
		creaturesArray,
		updatingHP,
		updatingStatus,
		remove,
		updateInitiative,
		hpIcon,
		acIcon,
		updateHP,
		addStatus,
		hp_handler,
		tag_handler,
		initiative_handler,
		blur_handler,
		blur_handler_1
	];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-p1efnr-style")) add_css$2();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
	}
}

class Creature {
    constructor({ name, initiative, modifier, hp, ac, note, player }) {
        this.enabled = true;
        this.status = new Set();
        this.name = name;
        this._initiative = initiative !== null && initiative !== void 0 ? initiative : Math.floor(Math.random() * 19 + 1);
        this.modifier = modifier !== null && modifier !== void 0 ? modifier : 0;
        this.max = hp;
        this.hp = this.max;
        this.ac = ac;
        this.note = note;
        this.player = player;
    }
    get hpDisplay() {
        if (this.max) {
            return `${this.hp}/${this.max}`;
        }
        return DEFAULT_UNDEFINED;
    }
    get initiative() {
        return this._initiative + this.modifier;
    }
    set initiative(x) {
        this._initiative = x;
    }
    *[Symbol.iterator]() {
        yield this.name;
        yield this.initiative;
        yield this.modifier;
        yield this.max;
        yield this.ac;
        yield this.note;
    }
}

/* src\svelte\Create.svelte generated by Svelte v3.38.3 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-hpl8jg-style";
	style.textContent = ".add-creature-container.svelte-hpl8jg.svelte-hpl8jg{display:flex;flex-flow:column nowrap;justify-content:flex-start;height:25px;margin-right:0.5rem}.add-button.svelte-hpl8jg.svelte-hpl8jg{align-self:flex-end}.create-new.svelte-hpl8jg>.svelte-hpl8jg{display:flex;justify-content:space-between;margin-bottom:0.5rem}.context-buttons.svelte-hpl8jg.svelte-hpl8jg{display:flex;justify-content:flex-end;align-items:center;grid-gap:0.125rem}.cancel-button.svelte-hpl8jg.svelte-hpl8jg{color:var(--text-faint)}";
	append(document.head, style);
}

// (107:4) {:else}
function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "add-button svelte-hpl8jg");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*addButton*/ ctx[5].call(null, div));
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (60:4) {#if addNew}
function create_if_block(ctx) {
	let div4;
	let div0;
	let label0;
	let t1;
	let input0;
	let t2;
	let div1;
	let label1;
	let t4;
	let input1;
	let t5;
	let div2;
	let label2;
	let t7;
	let input2;
	let t8;
	let div3;
	let label3;
	let t10;
	let input3;
	let t11;
	let div7;
	let div5;
	let t12;
	let div6;
	let mounted;
	let dispose;

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Name";
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "HP";
			t4 = space();
			input1 = element("input");
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "AC";
			t7 = space();
			input2 = element("input");
			t8 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = "Initiative";
			t10 = space();
			input3 = element("input");
			t11 = space();
			div7 = element("div");
			div5 = element("div");
			t12 = space();
			div6 = element("div");
			attr(label0, "for", "add-name");
			attr(input0, "id", "add-name");
			attr(input0, "type", "text");
			attr(input0, "name", "name");
			attr(input0, "tabindex", "0");
			attr(div0, "class", "svelte-hpl8jg");
			attr(label1, "for", "add-hp");
			attr(input1, "id", "add-hp");
			attr(input1, "type", "text");
			attr(input1, "name", "hp");
			attr(input1, "tabindex", "0");
			attr(div1, "class", "svelte-hpl8jg");
			attr(label2, "for", "add-ac");
			attr(input2, "id", "add-ac");
			attr(input2, "type", "text");
			attr(input2, "name", "ac");
			attr(input2, "tabindex", "0");
			attr(div2, "class", "svelte-hpl8jg");
			attr(label3, "for", "add-init");
			attr(input3, "id", "add-init");
			attr(input3, "type", "text");
			attr(input3, "name", "initiative");
			attr(input3, "tabindex", "0");
			attr(div3, "class", "svelte-hpl8jg");
			attr(div4, "class", "create-new svelte-hpl8jg");
			attr(div5, "class", "add-button svelte-hpl8jg");
			attr(div6, "class", "add-button cancel-button svelte-hpl8jg");
			attr(div7, "class", "context-buttons svelte-hpl8jg");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div0, label0);
			append(div0, t1);
			append(div0, input0);
			set_input_value(input0, /*name*/ ctx[1]);
			append(div4, t2);
			append(div4, div1);
			append(div1, label1);
			append(div1, t4);
			append(div1, input1);
			set_input_value(input1, /*hp*/ ctx[2]);
			append(div4, t5);
			append(div4, div2);
			append(div2, label2);
			append(div2, t7);
			append(div2, input2);
			set_input_value(input2, /*ac*/ ctx[4]);
			append(div4, t8);
			append(div4, div3);
			append(div3, label3);
			append(div3, t10);
			append(div3, input3);
			set_input_value(input3, /*initiative*/ ctx[3]);
			insert(target, t11, anchor);
			insert(target, div7, anchor);
			append(div7, div5);
			append(div7, t12);
			append(div7, div6);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[8]),
					listen(input1, "input", /*input1_input_handler*/ ctx[9]),
					listen(input2, "input", /*input2_input_handler*/ ctx[10]),
					listen(input3, "input", /*input3_input_handler*/ ctx[11]),
					action_destroyer(/*saveButton*/ ctx[6].call(null, div5)),
					action_destroyer(/*cancelButton*/ ctx[7].call(null, div6))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*name*/ 2 && input0.value !== /*name*/ ctx[1]) {
				set_input_value(input0, /*name*/ ctx[1]);
			}

			if (dirty & /*hp*/ 4 && input1.value !== /*hp*/ ctx[2]) {
				set_input_value(input1, /*hp*/ ctx[2]);
			}

			if (dirty & /*ac*/ 16 && input2.value !== /*ac*/ ctx[4]) {
				set_input_value(input2, /*ac*/ ctx[4]);
			}

			if (dirty & /*initiative*/ 8 && input3.value !== /*initiative*/ ctx[3]) {
				set_input_value(input3, /*initiative*/ ctx[3]);
			}
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (detaching) detach(t11);
			if (detaching) detach(div7);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$1(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*addNew*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "add-creature-container svelte-hpl8jg");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let addNew = false;
	let name;
	let hp;
	let initiative;
	let ac;

	const addButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon("plus-with-circle").onClick(() => {
			console.log("Add New", creatures);
			$$invalidate(0, addNew = true);
		});
	};

	const saveButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon(SAVE).onClick(() => {
			if (!name.length) {
				new obsidian.Notice("Enter a name!");
				return;
			}

			$$invalidate(0, addNew = false);

			creatures.update(c => {
				c.push(new Creature({
						name,
						hp: hp ? Number(hp) : undefined,
						initiative: initiative
						? Number(initiative)
						: Math.floor(Math.random() * 19 + 1),
						ac: ac ? Number(ac) : undefined
					}));

				return c;
			});

			$$invalidate(1, name = undefined);
			$$invalidate(2, hp = undefined);
			$$invalidate(3, initiative = undefined);
			console.log("Save", creatures);
		});
	};

	const cancelButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Cancel").setIcon("cross").onClick(() => {
			$$invalidate(0, addNew = false);
			$$invalidate(1, name = undefined);
			$$invalidate(2, hp = undefined);
			$$invalidate(3, initiative = undefined);
		});
	};

	function input0_input_handler() {
		name = this.value;
		$$invalidate(1, name);
	}

	function input1_input_handler() {
		hp = this.value;
		$$invalidate(2, hp);
	}

	function input2_input_handler() {
		ac = this.value;
		$$invalidate(4, ac);
	}

	function input3_input_handler() {
		initiative = this.value;
		$$invalidate(3, initiative);
	}

	return [
		addNew,
		name,
		hp,
		initiative,
		ac,
		addButton,
		saveButton,
		cancelButton,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler
	];
}

class Create extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-hpl8jg-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

/* src\svelte\App.svelte generated by Svelte v3.38.3 */

function add_css() {
	var style = element("style");
	style.id = "svelte-hgmxfj-style";
	style.textContent = ".obsidian-initiative-tracker.svelte-hgmxfj{margin:0.5rem;min-width:180px}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let controls;
	let t0;
	let table;
	let t1;
	let create;
	let current;
	controls = new Controls({});
	table = new Table({});
	create = new Create({});

	return {
		c() {
			div = element("div");
			create_component(controls.$$.fragment);
			t0 = space();
			create_component(table.$$.fragment);
			t1 = space();
			create_component(create.$$.fragment);
			attr(div, "class", "obsidian-initiative-tracker svelte-hgmxfj");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(controls, div, null);
			append(div, t0);
			mount_component(table, div, null);
			append(div, t1);
			mount_component(create, div, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(controls.$$.fragment, local);
			transition_in(table.$$.fragment, local);
			transition_in(create.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(controls.$$.fragment, local);
			transition_out(table.$$.fragment, local);
			transition_out(create.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(controls);
			destroy_component(table);
			destroy_component(create);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { creatures = [] } = $$props;
	let { view } = $$props;
	store.view.set(view);
	store.creatures.set(creatures);
	let { show } = $$props;
	store.show.set(show);

	beforeUpdate(() => {
		$$invalidate(1, show = view.parentEl.getBoundingClientRect().width < MIN_WIDTH_FOR_HAMBURGER);
	});

	view.onResize = () => {
		if (view.parentEl.getBoundingClientRect().width < MIN_WIDTH_FOR_HAMBURGER && !show) {
			$$invalidate(1, show = true);
			store.show.set(show);
		} else if (view.containerEl.getBoundingClientRect().width >= MIN_WIDTH_FOR_HAMBURGER && show) {
			$$invalidate(1, show = false);
			store.show.set(show);
		}
	}; /* Panel Resized */

	$$self.$$set = $$props => {
		if ("creatures" in $$props) $$invalidate(2, creatures = $$props.creatures);
		if ("view" in $$props) $$invalidate(0, view = $$props.view);
		if ("show" in $$props) $$invalidate(1, show = $$props.show);
	};

	return [view, show, creatures];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-hgmxfj-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { creatures: 2, view: 0, show: 1 });
	}

	get creatures() {
		return this.$$.ctx[2];
	}

	set creatures(creatures) {
		this.$set({ creatures });
		flush();
	}

	get view() {
		return this.$$.ctx[0];
	}

	set view(view) {
		this.$set({ view });
		flush();
	}

	get show() {
		return this.$$.ctx[1];
	}

	set show(show) {
		this.$set({ show });
		flush();
	}
}

class TrackerView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.leaf = leaf;
        this.plugin = plugin;
        this.state = false;
        this.creatures = [];
        this._rendered = false;
        this.creatures = [...this.plugin.players.map((p) => new Creature(p))];
    }
    get stateIcon() {
        return this.state ? STOP : PLAY;
    }
    get stateMessage() {
        return this.state ? "End" : "Start";
    }
    getViewType() {
        return INTIATIVE_TRACKER_VIEW;
    }
    getDisplayText() {
        return "Initiative Tracker";
    }
    getIcon() {
        return BASE;
    }
    addCreatures(...creatures) {
        for (let creature of creatures) {
            this.creatures.push(new Creature(creature));
        }
        if (this._app && this._rendered) {
            this._app.$set({
                creatures: this.creatures
            });
        }
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            this.creatures = [...this.plugin.players.map((p) => new Creature(p))];
            this.parentEl = this.containerEl.parentElement;
            this._app = new App({
                target: this.contentEl,
                props: {
                    view: this,
                    creatures: this.creatures,
                    show: this.contentEl.getBoundingClientRect().width <
                        MIN_WIDTH_FOR_HAMBURGER
                }
            });
            this._rendered = true;
        });
    }
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            this._app.$destroy();
            this._rendered = false;
        });
    }
}

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (process.env.NODE_ENV !== "production") {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {
    if (process.env.NODE_ENV !== "production") {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top) {
      sideY = bottom; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left) {
      sideX = right; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (process.env.NODE_ENV !== "production") {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function getVariation(placement) {
  return placement.split('-')[1];
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;

    if (process.env.NODE_ENV !== "production") {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases â€“ research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
    var max$1 = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement);
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

        case 'phase':
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (process.env.NODE_ENV !== "production") {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);

          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = getComputedStyle(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update â€“ it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (process.env.NODE_ENV !== "production") {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update â€“ it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (process.env.NODE_ENV !== "production") {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

class Suggester {
    constructor(owner, containerEl, scope) {
        this.containerEl = containerEl;
        this.owner = owner;
        containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
        containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
        scope.register([], "ArrowUp", () => {
            this.setSelectedItem(this.selectedItem - 1, true);
            return false;
        });
        scope.register([], "ArrowDown", () => {
            this.setSelectedItem(this.selectedItem + 1, true);
            return false;
        });
        scope.register([], "Enter", (evt) => {
            this.useSelectedItem(evt);
            return false;
        });
        scope.register([], "Tab", (evt) => {
            this.useSelectedItem(evt);
            return false;
        });
    }
    chooseSuggestion(evt) {
        if (!this.items || !this.items.length)
            return;
        const currentValue = this.items[this.selectedItem];
        if (currentValue) {
            this.owner.selectSuggestion(currentValue, evt);
        }
    }
    onSuggestionClick(event, el) {
        event.preventDefault();
        if (!this.suggestions || !this.suggestions.length)
            return;
        const item = this.suggestions.indexOf(el);
        this.setSelectedItem(item, false);
        this.useSelectedItem(event);
    }
    onSuggestionMouseover(event, el) {
        if (!this.suggestions || !this.suggestions.length)
            return;
        const item = this.suggestions.indexOf(el);
        this.setSelectedItem(item, false);
    }
    empty() {
        this.containerEl.empty();
    }
    setSuggestions(items) {
        this.containerEl.empty();
        const els = [];
        items.forEach((item) => {
            const suggestionEl = this.containerEl.createDiv("suggestion-item");
            this.owner.renderSuggestion(item, suggestionEl);
            els.push(suggestionEl);
        });
        this.items = items;
        this.suggestions = els;
        this.setSelectedItem(0, false);
    }
    useSelectedItem(event) {
        if (!this.items || !this.items.length)
            return;
        const currentValue = this.items[this.selectedItem];
        if (currentValue) {
            this.owner.selectSuggestion(currentValue, event);
        }
    }
    wrap(value, size) {
        return ((value % size) + size) % size;
    }
    setSelectedItem(index, scroll) {
        const nIndex = this.wrap(index, this.suggestions.length);
        const prev = this.suggestions[this.selectedItem];
        const next = this.suggestions[nIndex];
        if (prev)
            prev.removeClass("is-selected");
        if (next)
            next.addClass("is-selected");
        this.selectedItem = nIndex;
        if (scroll) {
            next.scrollIntoView(false);
        }
    }
}
class SuggestionModal extends obsidian.FuzzySuggestModal {
    constructor(app, inputEl) {
        super(app);
        this.items = [];
        this.scope = new obsidian.Scope();
        this.emptyStateText = "No match found";
        this.limit = 25;
        this.inputEl = inputEl;
        this.suggestEl = createDiv({
            attr: { style: "min-width: 475px;" },
            cls: "suggestion-container"
        });
        this.contentEl = this.suggestEl.createDiv("suggestion");
        this.suggester = new Suggester(this, this.contentEl, this.scope);
        this.scope.register([], "Escape", this.close.bind(this));
        this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
        this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
        this.inputEl.addEventListener("blur", this.close.bind(this));
        this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
            event.preventDefault();
        });
    }
    empty() {
        this.suggester.empty();
    }
    onInputChanged() {
        const inputStr = this.modifyInput(this.inputEl.value);
        const suggestions = this.getSuggestions(inputStr);
        if (suggestions.length > 0) {
            this.suggester.setSuggestions(suggestions.slice(0, this.limit));
        }
        else {
            this.onNoSuggestion();
        }
        this.open();
    }
    modifyInput(input) {
        return input;
    }
    onNoSuggestion() {
        this.empty();
        this.renderSuggestion(null, this.contentEl.createDiv("suggestion-item"));
    }
    open() {
        // TODO: Figure out a better way to do this. Idea from Periodic Notes plugin
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.app.keymap.pushScope(this.scope);
        document.body.appendChild(this.suggestEl);
        this.popper = createPopper(this.inputEl, this.suggestEl, {
            placement: "auto-start",
            modifiers: [
                {
                    name: "offset",
                    options: {
                        offset: [0, 10]
                    }
                },
                {
                    name: "flip",
                    options: {
                        allowedAutoPlacements: ["top-start", "bottom-start"]
                    }
                }
            ]
        });
    }
    close() {
        // TODO: Figure out a better way to do this. Idea from Periodic Notes plugin
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.app.keymap.popScope(this.scope);
        this.suggester.setSuggestions([]);
        if (this.popper) {
            this.popper.destroy();
        }
        this.suggestEl.detach();
    }
    createPrompt(prompts) {
        if (!this.promptEl)
            this.promptEl = this.suggestEl.createDiv("prompt-instructions");
        let prompt = this.promptEl.createDiv("prompt-instruction");
        for (let p of prompts) {
            prompt.appendChild(p);
        }
    }
}
class FileSuggestionModal extends SuggestionModal {
    constructor(app, input) {
        super(app, input.inputEl);
        this.text = input;
        this.createPrompts();
        this.inputEl.addEventListener("input", this.getItem.bind(this));
    }
    createPrompts() { }
    getItem() {
        const v = this.inputEl.value, file = this.items.find((file) => file.name === v.trim());
        if (file == this.file)
            return;
        this.file = file;
        if (this.items)
            this.onInputChanged();
    }
    getItemText(item) {
        return item.name;
    }
    onChooseItem(item) {
        this.text.setValue(item.name);
        this.file = item;
    }
    selectSuggestion({ item }) {
        this.text.setValue(item.basename);
        this.file = item;
        this.onClose();
        this.close();
    }
    renderSuggestion(result, el) {
        let { item, match: matches } = result || {};
        let content = el.createDiv({
            cls: "suggestion-content icon"
        });
        if (!item) {
            content.setText(this.emptyStateText);
            content.parentElement.addClass("is-selected");
            return;
        }
        const matchElements = matches.matches.map((m) => {
            return createSpan("suggestion-highlight");
        });
        for (let i = 0; i < item.basename.length; i++) {
            let match = matches.matches.find((m) => m[0] === i);
            if (match) {
                let element = matchElements[matches.matches.indexOf(match)];
                content.appendChild(element);
                element.appendText(item.basename.substring(match[0], match[1]));
                i += match[1] - match[0] - 1;
                continue;
            }
            content.appendText(item.basename[i]);
        }
        let path = item.path.split("/").slice(0, -1).join("/");
        if (path.length) {
            path += "/";
        }
        el.createDiv({
            cls: "suggestion-note",
            text: path
        });
    }
    getItems() {
        return this.app.vault.getMarkdownFiles();
    }
}

class InitiativeTrackerSettings extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    display() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let { containerEl } = this;
                containerEl.empty();
                containerEl.addClass("initiative-tracker-settings");
                containerEl.createEl("h2", { text: "Initiative Tracker Settings" });
                const additionalContainer = containerEl.createDiv("initiative-tracker-additional-container");
                const additional = additionalContainer.createDiv("additional");
                new obsidian.Setting(additional)
                    .setName("Add New Player")
                    .setDesc("These players will always be added to new encounters.")
                    .addButton((button) => {
                    let b = button
                        .setTooltip("Add Player")
                        .setButtonText("+")
                        .onClick(() => __awaiter(this, void 0, void 0, function* () {
                        const modal = new NewPlayerModal(this.plugin);
                        modal.open();
                        modal.onClose = () => __awaiter(this, void 0, void 0, function* () {
                            if (!modal.saved)
                                return;
                            this.plugin.players.push(new Creature(Object.assign(Object.assign({}, modal.player), { player: true })));
                            yield this.plugin.saveSettings();
                            this.display();
                        });
                    }));
                    return b;
                });
                const playerView = additional.createDiv("initiative-tracker-players");
                if (!this.plugin.players.length) {
                    additional
                        .createDiv({
                        attr: {
                            style: "display: flex; justify-content: center; padding-bottom: 18px;"
                        }
                    })
                        .createSpan({
                        text: "No saved players! Create one to see it here."
                    });
                    return;
                }
                const headers = playerView.createDiv("initiative-tracker-player headers");
                headers.createDiv({ text: "Name" });
                new obsidian.ExtraButtonComponent(headers.createDiv())
                    .setIcon(HP)
                    .setTooltip("Max HP");
                new obsidian.ExtraButtonComponent(headers.createDiv())
                    .setIcon(AC)
                    .setTooltip("Armor Class");
                new obsidian.ExtraButtonComponent(headers.createDiv())
                    .setIcon(INITIATIVE)
                    .setTooltip("Initiative Modifier");
                headers.createDiv();
                for (let player of this.plugin.players) {
                    const playerDiv = playerView.createDiv("initiative-tracker-player");
                    playerDiv.createDiv({ text: player.name });
                    playerDiv.createDiv({
                        text: `${(_a = player.hp) !== null && _a !== void 0 ? _a : DEFAULT_UNDEFINED}`
                    });
                    playerDiv.createDiv({
                        text: `${(_b = player.ac) !== null && _b !== void 0 ? _b : DEFAULT_UNDEFINED}`
                    });
                    playerDiv.createDiv({
                        text: `${(_c = player.modifier) !== null && _c !== void 0 ? _c : DEFAULT_UNDEFINED}`
                    });
                    const icons = playerDiv.createDiv("initiative-tracker-player-icon");
                    new obsidian.ExtraButtonComponent(icons.createDiv())
                        .setIcon(EDIT)
                        .setTooltip("Edit")
                        .onClick(() => {
                        const modal = new NewPlayerModal(this.plugin, player);
                        modal.open();
                        modal.onClose = () => __awaiter(this, void 0, void 0, function* () {
                            if (!modal.saved)
                                return;
                            Object.assign(player, modal.player);
                            yield this.plugin.saveSettings();
                            this.display();
                        });
                    });
                    new obsidian.ExtraButtonComponent(icons.createDiv())
                        .setIcon("trash")
                        .setTooltip("Delete")
                        .onClick(() => __awaiter(this, void 0, void 0, function* () {
                        this.plugin.players = this.plugin.players.filter((p) => p != player);
                        yield this.plugin.saveSettings();
                        this.display();
                    }));
                }
            }
            catch (e) {
                new obsidian.Notice("There was an error displaying the settings tab for TTRPG Initiative Tracker.");
            }
        });
    }
}
class NewPlayerModal extends obsidian.Modal {
    constructor(plugin, original = new Creature({})) {
        super(plugin.app);
        this.plugin = plugin;
        this.original = original;
        this.player = new Creature({});
        this.player = new Creature(Object.assign({}, original));
    }
    display(load) {
        return __awaiter(this, void 0, void 0, function* () {
            let { contentEl } = this;
            contentEl.addClass("initiative-tracker-add-player-modal");
            contentEl.empty();
            contentEl.createEl("h2", { text: "New Player" });
            new obsidian.Setting(contentEl)
                .setName("Link to Note")
                .setDesc("Link player to a note in your vault.")
                .addText((t) => {
                var _a;
                t.setValue((_a = this.player.note) !== null && _a !== void 0 ? _a : "");
                const modal = new FileSuggestionModal(this.app, t);
                modal.onClose = () => __awaiter(this, void 0, void 0, function* () {
                    if (!modal.file)
                        return;
                    const metaData = this.app.metadataCache.getFileCache(modal.file);
                    this.player.note = modal.file.basename;
                    this.player.name = modal.file.basename;
                    if (!metaData || !metaData.frontmatter)
                        return;
                    const { ac, hp, modifier } = metaData.frontmatter;
                    this.player = new Creature(Object.assign(Object.assign({}, this.player), { ac, hp, modifier }));
                    this.display();
                });
            });
            let nameInput, hpInput, acInput, modInput;
            new obsidian.Setting(contentEl)
                .setName("Name")
                .setDesc("Player name. Must be unique!")
                .addText((t) => {
                var _a;
                nameInput = {
                    input: t.inputEl,
                    validate: (i) => {
                        let error = false;
                        if ((!i.value.length && !load) ||
                            (this.plugin.players.find((p) => p.name === i.value) &&
                                this.player.name != this.original.name)) {
                            i.addClass("has-error");
                            error = true;
                        }
                        return error;
                    }
                };
                t.setValue((_a = this.player.name) !== null && _a !== void 0 ? _a : "");
                t.onChange((v) => {
                    t.inputEl.removeClass("has-error");
                    this.player.name = v;
                });
            });
            new obsidian.Setting(contentEl).setName("Max Hit Points").addText((t) => {
                var _a;
                hpInput = {
                    input: t.inputEl,
                    validate: (i) => {
                        let error = false;
                        if (isNaN(Number(i.value))) {
                            i.addClass("has-error");
                            error = true;
                        }
                        return error;
                    }
                };
                t.setValue(`${(_a = this.player.hp) !== null && _a !== void 0 ? _a : ""}`);
                t.onChange((v) => {
                    t.inputEl.removeClass("has-error");
                    this.player.hp = Number(v);
                });
            });
            new obsidian.Setting(contentEl).setName("Armor Class").addText((t) => {
                var _a;
                acInput = {
                    input: t.inputEl,
                    validate: (i) => {
                        let error = false;
                        if (isNaN(Number(i.value))) {
                            t.inputEl.addClass("has-error");
                            error = true;
                        }
                        return error;
                    }
                };
                t.setValue(`${(_a = this.player.ac) !== null && _a !== void 0 ? _a : ""}`);
                t.onChange((v) => {
                    t.inputEl.removeClass("has-error");
                    this.player.ac = Number(v);
                });
            });
            new obsidian.Setting(contentEl)
                .setName("Initiative Modifier")
                .setDesc("This will be added to randomly-rolled initiatives.")
                .addText((t) => {
                var _a;
                modInput = {
                    input: t.inputEl,
                    validate: (i) => {
                        let error = false;
                        if (isNaN(Number(i.value))) {
                            t.inputEl.addClass("has-error");
                            error = true;
                        }
                        return error;
                    }
                };
                t.setValue(`${(_a = this.player.modifier) !== null && _a !== void 0 ? _a : ""}`);
                t.onChange((v) => {
                    this.player.modifier = Number(v);
                });
            });
            let footerEl = contentEl.createDiv();
            let footerButtons = new obsidian.Setting(footerEl);
            footerButtons.addButton((b) => {
                b.setTooltip("Save")
                    .setIcon("checkmark")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    let error = this.validateInputs(nameInput, acInput, hpInput, modInput);
                    if (error) {
                        new obsidian.Notice("Fix errors before saving.");
                        return;
                    }
                    this.saved = true;
                    this.close();
                }));
                return b;
            });
            footerButtons.addExtraButton((b) => {
                b.setIcon("cross")
                    .setTooltip("Cancel")
                    .onClick(() => {
                    this.saved = false;
                    this.close();
                });
                return b;
            });
            this.validateInputs(nameInput, acInput, hpInput, modInput);
        });
    }
    validateInputs(...inputs) {
        let error = false;
        for (let input of inputs) {
            if (input.validate(input.input)) {
                error = true;
            }
            else {
                input.input.removeClass("has-error");
            }
        }
        return error;
    }
    onOpen() {
        this.display(true);
    }
}

class InitiativeTracker extends obsidian.Plugin {
    get players() {
        return this.data.players;
    }
    set players(players) {
        this.data.players = players;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading Initiative Tracker v" + this.manifest.version);
            registerIcons();
            yield this.loadSettings();
            this.addSettingTab(new InitiativeTrackerSettings(this));
            this.registerView(INTIATIVE_TRACKER_VIEW, (leaf) => (this.view = new TrackerView(leaf, this)));
            this.addCommand({
                id: "open-tracker",
                name: "Open Initiative Tracker",
                checkCallback: (checking) => {
                    if (checking)
                        return (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).length === 0);
                    this.addTrackerView();
                }
            });
            if (this.app.workspace.layoutReady) {
                this.addTrackerView();
            }
            else {
                this.registerEvent(this.app.workspace.on("layout-ready", this.addTrackerView.bind(this)));
            }
        });
    }
    onunload() {
        this.app.workspace
            .getLeavesOfType(INTIATIVE_TRACKER_VIEW)
            .forEach((leaf) => leaf.detach());
        console.log("Initiative Tracker unloaded");
    }
    addTrackerView() {
        if (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).length) {
            return;
        }
        this.app.workspace.getRightLeaf(false).setViewState({
            type: INTIATIVE_TRACKER_VIEW,
            active: true //TODO: CHANGE BEFORE BUILD
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = Object.assign({}, { players: [], version: this.manifest.version }, yield this.loadData());
            this.data = data;
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.data);
        });
    }
}

module.exports = InitiativeTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
