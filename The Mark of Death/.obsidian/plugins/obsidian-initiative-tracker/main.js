/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const INTIATIVE_TRACKER_VIEW = "initiative-tracker-view";
const INITIATIVE_TRACKER_BASE = "initiative-tracker";
const INITIATIVE_TRACKER_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice-d20" class="svg-inline--fa fa-dice-d20 fa-w-15" role="img" viewBox="0 0 480 512"><path fill="currentColor" d="M106.75 215.06L1.2 370.95c-3.08 5 .1 11.5 5.93 12.14l208.26 22.07-108.64-190.1zM7.41 315.43L82.7 193.08 6.06 147.1c-2.67-1.6-6.06.32-6.06 3.43v162.81c0 4.03 5.29 5.53 7.41 2.09zM18.25 423.6l194.4 87.66c5.3 2.45 11.35-1.43 11.35-7.26v-65.67l-203.55-22.3c-4.45-.5-6.23 5.59-2.2 7.57zm81.22-257.78L179.4 22.88c4.34-7.06-3.59-15.25-10.78-11.14L17.81 110.35c-2.47 1.62-2.39 5.26.13 6.78l81.53 48.69zM240 176h109.21L253.63 7.62C250.5 2.54 245.25 0 240 0s-10.5 2.54-13.63 7.62L130.79 176H240zm233.94-28.9l-76.64 45.99 75.29 122.35c2.11 3.44 7.41 1.94 7.41-2.1V150.53c0-3.11-3.39-5.03-6.06-3.43zm-93.41 18.72l81.53-48.7c2.53-1.52 2.6-5.16.13-6.78l-150.81-98.6c-7.19-4.11-15.12 4.08-10.78 11.14l79.93 142.94zm79.02 250.21L256 438.32v65.67c0 5.84 6.05 9.71 11.35 7.26l194.4-87.66c4.03-1.97 2.25-8.06-2.2-7.56zm-86.3-200.97l-108.63 190.1 208.26-22.07c5.83-.65 9.01-7.14 5.93-12.14L373.25 215.06zM240 208H139.57L240 383.75 340.43 208H240z"/></svg>`;
const INITIATIVE_TRACKER_SAVE = "initiative-tracker-save";
const INITIATIVE_TRACKER_SAVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="save" class="svg-inline--fa fa-save fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"/></svg>`;
const INITIATIVE_TRACKER_REMOVE = "initiative-tracker-remove";
const INITIATIVE_TRACKER_REMOVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="trash" class="svg-inline--fa fa-trash fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z"/></svg>`;
const INITIATIVE_TRACKER_RESTART = "initiative-tracker-restart";
const INITIATIVE_TRACKER_RESTART_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="redo" class="svg-inline--fa fa-redo fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z"/></svg>`;
const INITIATIVE_TRACKER_PLAY = "initiative-tracker-play";
const INITIATIVE_TRACKER_PLAY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="play" class="svg-inline--fa fa-play fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"/></svg>`;
const INITIATIVE_TRACKER_FORWARD = "initiative-tracker-forward";
const INITIATIVE_TRACKER_FORWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-forward" class="svg-inline--fa fa-step-forward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"/></svg>`;
const INITIATIVE_TRACKER_BACKWARD = "initiative-tracker-backward";
const INITIATIVE_TRACKER_BACKWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-backward" class="svg-inline--fa fa-step-backward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z"/></svg>`;
const INITIATIVE_TRACKER_STOP = "initiative-tracker-stop";
const INITIATIVE_TRACKER_STOP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="stop" class="svg-inline--fa fa-stop fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"/></svg>`;

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
// at the end of hydration without touching the remaining nodes.
let is_hydrating = false;
function start_hydrating() {
    is_hydrating = true;
}
function end_hydrating() {
    is_hydrating = false;
}
function upper_bound(low, high, key, value) {
    // Return first index of value larger than input value in the range [low, high)
    while (low < high) {
        const mid = low + ((high - low) >> 1);
        if (key(mid) <= value) {
            low = mid + 1;
        }
        else {
            high = mid;
        }
    }
    return low;
}
function init_hydrate(target) {
    if (target.hydrate_init)
        return;
    target.hydrate_init = true;
    // We know that all children have claim_order values since the unclaimed have been detached
    const children = target.childNodes;
    /*
    * Reorder claimed children optimally.
    * We can reorder claimed children optimally by finding the longest subsequence of
    * nodes that are already claimed in order and only moving the rest. The longest
    * subsequence subsequence of nodes that are claimed in order can be found by
    * computing the longest increasing subsequence of .claim_order values.
    *
    * This algorithm is optimal in generating the least amount of reorder operations
    * possible.
    *
    * Proof:
    * We know that, given a set of reordering operations, the nodes that do not move
    * always form an increasing subsequence, since they do not move among each other
    * meaning that they must be already ordered among each other. Thus, the maximal
    * set of nodes that do not move form a longest increasing subsequence.
    */
    // Compute longest increasing subsequence
    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
    const m = new Int32Array(children.length + 1);
    // Predecessor indices + 1
    const p = new Int32Array(children.length);
    m[0] = -1;
    let longest = 0;
    for (let i = 0; i < children.length; i++) {
        const current = children[i].claim_order;
        // Find the largest subsequence length such that it ends in a value less than our current value
        // upper_bound returns first greater value, so we subtract one
        const seqLen = upper_bound(1, longest + 1, idx => children[m[idx]].claim_order, current) - 1;
        p[i] = m[seqLen] + 1;
        const newLen = seqLen + 1;
        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
        m[newLen] = i;
        longest = Math.max(newLen, longest);
    }
    // The longest increasing subsequence of nodes (initially reversed)
    const lis = [];
    // The rest of the nodes, nodes that will be moved
    const toMove = [];
    let last = children.length - 1;
    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
        lis.push(children[cur - 1]);
        for (; last >= cur; last--) {
            toMove.push(children[last]);
        }
        last--;
    }
    for (; last >= 0; last--) {
        toMove.push(children[last]);
    }
    lis.reverse();
    // We sort the nodes being moved to guarantee that their insertion order matches the claim order
    toMove.sort((a, b) => a.claim_order - b.claim_order);
    // Finally, we move the nodes
    for (let i = 0, j = 0; i < toMove.length; i++) {
        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
            j++;
        }
        const anchor = j < lis.length ? lis[j] : null;
        target.insertBefore(toMove[i], anchor);
    }
}
function append(target, node) {
    if (is_hydrating) {
        init_hydrate(target);
        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {
            target.actual_end_child = target.firstChild;
        }
        if (node !== target.actual_end_child) {
            target.insertBefore(node, target.actual_end_child);
        }
        else {
            target.actual_end_child = node.nextSibling;
        }
    }
    else if (node.parentNode !== target) {
        target.appendChild(node);
    }
}
function insert(target, node, anchor) {
    if (is_hydrating && !anchor) {
        append(target, node);
    }
    else if (node.parentNode !== target || (anchor && node.nextSibling !== anchor)) {
        target.insertBefore(node, anchor || null);
    }
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            start_hydrating();
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        end_hydrating();
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src\svelte\Controls.svelte generated by Svelte v3.38.3 */

function add_css$3() {
	var style = element("style");
	style.id = "svelte-xfh3t0-style";
	style.textContent = ".buttons.svelte-xfh3t0{display:flex;justify-content:flex-start;align-items:center}";
	append(document.head, style);
}

function create_fragment$3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "buttons svelte-xfh3t0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[3](div);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[3](null);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let { creatures = [] } = $$props;
	let { state = false } = $$props;
	let top;

	const stateButton = new obsidian.ExtraButtonComponent(createDiv()).setIcon(state
	? INITIATIVE_TRACKER_STOP
	: INITIATIVE_TRACKER_PLAY).setTooltip(state ? "Stop" : "Play").setDisabled(creatures.length == 0).onClick(() => {
		$$invalidate(1, state = !state);
	});

	onMount(() => top.appendChild(stateButton.extraSettingsEl));

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			top = $$value;
			$$invalidate(0, top);
		});
	}

	$$self.$$set = $$props => {
		if ("creatures" in $$props) $$invalidate(2, creatures = $$props.creatures);
		if ("state" in $$props) $$invalidate(1, state = $$props.state);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*creatures, state*/ 6) {
			{
				console.log(creatures);

				stateButton.setIcon(state
				? INITIATIVE_TRACKER_STOP
				: INITIATIVE_TRACKER_PLAY).setTooltip(state ? "Stop" : "Play").setDisabled(creatures.length == 0);
			}
		}
	};

	return [top, state, creatures, div_binding];
}

class Controls extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-xfh3t0-style")) add_css$3();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { creatures: 2, state: 1 });
	}
}

/* src\svelte\Table.svelte generated by Svelte v3.38.3 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-1tglfsd-style";
	style.textContent = ".initiative-tracker-table.svelte-1tglfsd.svelte-1tglfsd{margin:0.5rem;display:flex;justify-content:flex-start;align-items:flex-start;flex-flow:column nowrap}.initiative-tracker-table.no-creatures.svelte-1tglfsd.svelte-1tglfsd{align-items:center}.initiative-tracker-table.svelte-1tglfsd .initiative-tracker-creature.svelte-1tglfsd{width:100%;display:flex;justify-content:space-between;align-items:center;padding:0.5rem 0}.initiative-tracker-table.svelte-1tglfsd .initiative-tracker-creature.svelte-1tglfsd:not(:last-child){border-bottom:1px solid var(--background-modifier-border-focus)}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (11:4) {#each creatures as creature}
function create_each_block(ctx) {
	let div;
	let span;
	let t0_value = /*creature*/ ctx[1].name + "";
	let t0;
	let t1;

	return {
		c() {
			div = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			attr(div, "class", "initiative-tracker-creature svelte-1tglfsd");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(span, t0);
			append(div, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*creatures*/ 1 && t0_value !== (t0_value = /*creature*/ ctx[1].name + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2(ctx) {
	let div;
	let each_value = /*creatures*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "initiative-tracker-table svelte-1tglfsd");
			toggle_class(div, "no-creatures", !/*creatures*/ ctx[0] || /*creatures*/ ctx[0].length == 0);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*creatures*/ 1) {
				each_value = /*creatures*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*creatures*/ 1) {
				toggle_class(div, "no-creatures", !/*creatures*/ ctx[0] || /*creatures*/ ctx[0].length == 0);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { creatures = [] } = $$props;

	$$self.$$set = $$props => {
		if ("creatures" in $$props) $$invalidate(0, creatures = $$props.creatures);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*creatures*/ 1) {
			{
				console.log(creatures);
			}
		}
	};

	return [creatures];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1tglfsd-style")) add_css$2();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { creatures: 0 });
	}
}

/* src\svelte\Create.svelte generated by Svelte v3.38.3 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-19eyvt2-style";
	style.textContent = ".add-creature-container.svelte-19eyvt2.svelte-19eyvt2{display:flex;flex-flow:column nowrap;justify-content:flex-start;height:25px;margin-right:0.5rem}.add-button.svelte-19eyvt2.svelte-19eyvt2{align-self:flex-end}.create-new.svelte-19eyvt2>.svelte-19eyvt2{display:flex;justify-content:space-between;margin-bottom:0.5rem}";
	append(document.head, style);
}

// (45:4) {:else}
function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "add-button svelte-19eyvt2");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*addButton*/ ctx[1].call(null, div));
				mounted = true;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (29:4) {#if addNew}
function create_if_block(ctx) {
	let div3;
	let t8;
	let div4;
	let mounted;
	let dispose;

	return {
		c() {
			div3 = element("div");

			div3.innerHTML = `<div class="svelte-19eyvt2"><label for="add-name">Name</label> 
                <input id="add-name" type="text" name="name"/></div> 
            <div class="svelte-19eyvt2"><label for="add-hp">HP</label> 
                <input id="add-hp" type="text" name="hp"/></div> 
            <div class="svelte-19eyvt2"><label for="add-init">Initiative</label> 
                <input id="add-init" type="text" name="initiative"/></div>`;

			t8 = space();
			div4 = element("div");
			attr(div3, "class", "create-new svelte-19eyvt2");
			attr(div4, "class", "add-button svelte-19eyvt2");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			insert(target, t8, anchor);
			insert(target, div4, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*saveButton*/ ctx[2].call(null, div4));
				mounted = true;
			}
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (detaching) detach(t8);
			if (detaching) detach(div4);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$1(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*addNew*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "add-creature-container svelte-19eyvt2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { creatures } = $$props;
	let addNew = false;

	const addButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon("plus-with-circle").onClick(() => {
			console.log("Add New", creatures);
			$$invalidate(0, addNew = true);
		});
	};

	const saveButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon(INITIATIVE_TRACKER_SAVE).onClick(() => {
			console.log("Save", creatures);
			$$invalidate(0, addNew = false);
		});
	};

	$$self.$$set = $$props => {
		if ("creatures" in $$props) $$invalidate(3, creatures = $$props.creatures);
	};

	return [addNew, addButton, saveButton, creatures];
}

class Create extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-19eyvt2-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { creatures: 3 });
	}
}

/* src\svelte\App.svelte generated by Svelte v3.38.3 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1ln0cys-style";
	style.textContent = ".obsidian-initiative-tracker.svelte-1ln0cys{margin:0.5rem}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let controls;
	let t0;
	let table;
	let t1;
	let create;
	let current;

	controls = new Controls({
			props: { creatures: /*creatures*/ ctx[0] }
		});

	table = new Table({
			props: { creatures: /*creatures*/ ctx[0] }
		});

	create = new Create({
			props: { creatures: /*creatures*/ ctx[0] }
		});

	return {
		c() {
			div = element("div");
			create_component(controls.$$.fragment);
			t0 = space();
			create_component(table.$$.fragment);
			t1 = space();
			create_component(create.$$.fragment);
			attr(div, "class", "obsidian-initiative-tracker svelte-1ln0cys");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(controls, div, null);
			append(div, t0);
			mount_component(table, div, null);
			append(div, t1);
			mount_component(create, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const controls_changes = {};
			if (dirty & /*creatures*/ 1) controls_changes.creatures = /*creatures*/ ctx[0];
			controls.$set(controls_changes);
			const table_changes = {};
			if (dirty & /*creatures*/ 1) table_changes.creatures = /*creatures*/ ctx[0];
			table.$set(table_changes);
			const create_changes = {};
			if (dirty & /*creatures*/ 1) create_changes.creatures = /*creatures*/ ctx[0];
			create.$set(create_changes);
		},
		i(local) {
			if (current) return;
			transition_in(controls.$$.fragment, local);
			transition_in(table.$$.fragment, local);
			transition_in(create.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(controls.$$.fragment, local);
			transition_out(table.$$.fragment, local);
			transition_out(create.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(controls);
			destroy_component(table);
			destroy_component(create);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { creatures = [] } = $$props;

	$$self.$$set = $$props => {
		if ("creatures" in $$props) $$invalidate(0, creatures = $$props.creatures);
	};

	return [creatures];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1ln0cys-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { creatures: 0 });
	}
}

class TrackerView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
        this.buttons = createDiv("initiative-tracker-buttons nav-buttons-container");
        this.table = createDiv("initiative-tracker-table");
        this.state = false;
        this.creatures = [];
        this._buildControls();
    }
    get stateIcon() {
        return this.state ? INITIATIVE_TRACKER_STOP : INITIATIVE_TRACKER_PLAY;
    }
    get stateMessage() {
        return this.state ? "End" : "Start";
    }
    getViewType() {
        return INTIATIVE_TRACKER_VIEW;
    }
    getDisplayText() {
        return "Initiative Tracker";
    }
    getIcon() {
        return INITIATIVE_TRACKER_BASE;
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            //this._build();
            /* this._app = createApp(App, { plugin: this.plugin }).mount(this.contentEl); */
            this._app = new App({
                target: this.contentEl,
                props: {
                    creatures: this.creatures
                }
            });
        });
    }
    addNewCreature() {
        this.creatures.push(new Creature("test" + Math.random(), 1));
        this._buildTable();
    }
    _build() {
        const contentEl = createDiv("obsidian-initiative-tracker");
        /** Add Control Buttons */
        this._buildControls();
        contentEl.appendChild(this.buttons);
        /** Add Creatures Table */
        this._buildTable();
        contentEl.appendChild(this.table);
        /** Add New Creature Button */
        const addEl = contentEl.createDiv("initiative-add-creature-container");
        new obsidian.ExtraButtonComponent(addEl.createDiv("initiative-add-creature-button"))
            .setTooltip("Add Creature")
            .setIcon("plus-with-circle")
            .onClick(() => {
            this.addNewCreature();
            console.log("Add New");
        });
        this.containerEl.replaceWith(contentEl);
        this.containerEl = contentEl;
    }
    _buildControls() {
        this.buttons.empty();
        new obsidian.ExtraButtonComponent(this.buttons)
            .setIcon(this.stateIcon)
            .setTooltip(this.stateMessage)
            .setDisabled(this.creatures.length == 0 && !this.state)
            .onClick(() => {
            this.state = !this.state;
            this._buildControls();
        });
    }
    _buildTable() {
        this.table.empty();
        if (!this.creatures.length) {
            this.table.addClass("no-creatures");
            this.table.createSpan({
                text: "Add a creature to get started!"
            });
            return;
        }
        this.table.removeClass("no-creatures");
        console.log("🚀 ~ file: view.ts ~ line 120 ~ this.creatures", this.creatures);
        for (let creature of this.creatures) {
            const creatureEl = this.table.createDiv("initiative-tracker-creature");
            creatureEl.createSpan({
                text: creature.name
            });
            new obsidian.ExtraButtonComponent(creatureEl)
                .setIcon(INITIATIVE_TRACKER_REMOVE)
                .setTooltip("Remove")
                .onClick(() => {
                this.creatures = this.creatures.filter((c) => c != creature);
                this._buildTable();
            });
        }
    }
}
class Creature {
    constructor(name, initiative) {
        this.name = name;
        this.initiative = initiative;
    }
}

class InitiativeTracker extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading Initiative Tracker v" + this.manifest.version);
            this.registerIcons();
            yield this.loadSettings();
            this.registerView(INTIATIVE_TRACKER_VIEW, (leaf) => (this.view = new TrackerView(leaf, this)));
            this.addCommand({
                id: "open-tracker",
                name: "Open Initiative Tracker",
                checkCallback: (checking) => {
                    if (checking)
                        return (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).length === 0);
                    this.addTrackerView();
                }
            });
            if (this.app.workspace.layoutReady) {
                this.addTrackerView();
            }
            else {
                this.registerEvent(this.app.workspace.on("layout-ready", this.addTrackerView.bind(this)));
            }
        });
    }
    onunload() {
        this.app.workspace
            .getLeavesOfType(INTIATIVE_TRACKER_VIEW)
            .forEach((leaf) => leaf.detach());
        console.log("Initiative Tracker unloaded");
    }
    addTrackerView() {
        if (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).length) {
            return;
        }
        this.app.workspace.getRightLeaf(false).setViewState({
            type: INTIATIVE_TRACKER_VIEW,
            active: true //TODO: CHANGE BEFORE BUILD
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    registerIcons() {
        obsidian.addIcon(INITIATIVE_TRACKER_BASE, INITIATIVE_TRACKER_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_SAVE, INITIATIVE_TRACKER_SAVE_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_REMOVE, INITIATIVE_TRACKER_REMOVE_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_RESTART, INITIATIVE_TRACKER_RESTART_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_PLAY, INITIATIVE_TRACKER_PLAY_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_FORWARD, INITIATIVE_TRACKER_FORWARD_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_BACKWARD, INITIATIVE_TRACKER_BACKWARD_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_STOP, INITIATIVE_TRACKER_STOP_ICON);
    }
}

module.exports = InitiativeTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
