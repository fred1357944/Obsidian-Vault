/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const INTIATIVE_TRACKER_VIEW = "initiative-tracker-view";
const INITIATIVE_TRACKER_BASE = "initiative-tracker";
const INITIATIVE_TRACKER_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice-d20" class="svg-inline--fa fa-dice-d20 fa-w-15" role="img" viewBox="0 0 480 512"><path fill="currentColor" d="M106.75 215.06L1.2 370.95c-3.08 5 .1 11.5 5.93 12.14l208.26 22.07-108.64-190.1zM7.41 315.43L82.7 193.08 6.06 147.1c-2.67-1.6-6.06.32-6.06 3.43v162.81c0 4.03 5.29 5.53 7.41 2.09zM18.25 423.6l194.4 87.66c5.3 2.45 11.35-1.43 11.35-7.26v-65.67l-203.55-22.3c-4.45-.5-6.23 5.59-2.2 7.57zm81.22-257.78L179.4 22.88c4.34-7.06-3.59-15.25-10.78-11.14L17.81 110.35c-2.47 1.62-2.39 5.26.13 6.78l81.53 48.69zM240 176h109.21L253.63 7.62C250.5 2.54 245.25 0 240 0s-10.5 2.54-13.63 7.62L130.79 176H240zm233.94-28.9l-76.64 45.99 75.29 122.35c2.11 3.44 7.41 1.94 7.41-2.1V150.53c0-3.11-3.39-5.03-6.06-3.43zm-93.41 18.72l81.53-48.7c2.53-1.52 2.6-5.16.13-6.78l-150.81-98.6c-7.19-4.11-15.12 4.08-10.78 11.14l79.93 142.94zm79.02 250.21L256 438.32v65.67c0 5.84 6.05 9.71 11.35 7.26l194.4-87.66c4.03-1.97 2.25-8.06-2.2-7.56zm-86.3-200.97l-108.63 190.1 208.26-22.07c5.83-.65 9.01-7.14 5.93-12.14L373.25 215.06zM240 208H139.57L240 383.75 340.43 208H240z"/></svg>`;
const INITIATIVE_TRACKER_SAVE = "initiative-tracker-save";
const INITIATIVE_TRACKER_SAVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="save" class="svg-inline--fa fa-save fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"/></svg>`;
const INITIATIVE_TRACKER_REMOVE = "initiative-tracker-remove";
const INITIATIVE_TRACKER_REMOVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="trash" class="svg-inline--fa fa-trash fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z"/></svg>`;
const INITIATIVE_TRACKER_RESTART = "initiative-tracker-restart";
const INITIATIVE_TRACKER_RESTART_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="redo" class="svg-inline--fa fa-redo fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z"/></svg>`;
const INITIATIVE_TRACKER_PLAY = "initiative-tracker-play";
const INITIATIVE_TRACKER_PLAY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="play" class="svg-inline--fa fa-play fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"/></svg>`;
const INITIATIVE_TRACKER_FORWARD = "initiative-tracker-forward";
const INITIATIVE_TRACKER_FORWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-forward" class="svg-inline--fa fa-step-forward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"/></svg>`;
const INITIATIVE_TRACKER_BACKWARD = "initiative-tracker-backward";
const INITIATIVE_TRACKER_BACKWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-backward" class="svg-inline--fa fa-step-backward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z"/></svg>`;
const INITIATIVE_TRACKER_STOP = "initiative-tracker-stop";
const INITIATIVE_TRACKER_STOP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="stop" class="svg-inline--fa fa-stop fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"/></svg>`;
const INITIATIVE_TRACKER_GRIP = "initiative-tracker-grip";
const INITIATIVE_TRACKER_GRIP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-vertical" class="svg-inline--fa fa-grip-vertical fa-w-10" role="img" viewBox="0 0 320 512"><path fill="currentColor" d="M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z"/></svg>`;
const INITIATIVE_TRACKER_HP = "initiative-tracker-hp";
const INITIATIVE_TRACKER_HP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M458.4 64.3C400.6 15.7 311.3 23 256 79.3 200.7 23 111.4 15.6 53.6 64.3-21.6 127.6-10.6 230.8 43 285.5l175.4 178.7c10 10.2 23.4 15.9 37.6 15.9 14.3 0 27.6-5.6 37.6-15.8L469 285.6c53.5-54.7 64.7-157.9-10.6-221.3zm-23.6 187.5L259.4 430.5c-2.4 2.4-4.4 2.4-6.8 0L77.2 251.8c-36.5-37.2-43.9-107.6 7.3-150.7 38.9-32.7 98.9-27.8 136.5 10.5l35 35.7 35-35.7c37.8-38.5 97.8-43.2 136.5-10.6 51.1 43.1 43.5 113.9 7.3 150.8z"/></svg>`;
const INITIATIVE_TRACKER_AC = "initiative-tracker-ac";
const INITIATIVE_TRACKER_AC_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user-shield" class="svg-inline--fa fa-user-shield fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M622.3 271.1l-115.2-45c-4.1-1.6-12.6-3.7-22.2 0l-115.2 45c-10.7 4.2-17.7 14-17.7 24.9 0 111.6 68.7 188.8 132.9 213.9 9.6 3.7 18 1.6 22.2 0C558.4 489.9 640 420.5 640 296c0-10.9-7-20.7-17.7-24.9zM496 462.4V273.3l95.5 37.3c-5.6 87.1-60.9 135.4-95.5 151.8zM224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm96 40c0-2.5.8-4.8 1.1-7.2-2.5-.1-4.9-.8-7.5-.8h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c6.8 0 13.3-1.5 19.2-4-54-42.9-99.2-116.7-99.2-212z"/></svg>`;

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
// at the end of hydration without touching the remaining nodes.
let is_hydrating = false;
function start_hydrating() {
    is_hydrating = true;
}
function end_hydrating() {
    is_hydrating = false;
}
function upper_bound(low, high, key, value) {
    // Return first index of value larger than input value in the range [low, high)
    while (low < high) {
        const mid = low + ((high - low) >> 1);
        if (key(mid) <= value) {
            low = mid + 1;
        }
        else {
            high = mid;
        }
    }
    return low;
}
function init_hydrate(target) {
    if (target.hydrate_init)
        return;
    target.hydrate_init = true;
    // We know that all children have claim_order values since the unclaimed have been detached
    const children = target.childNodes;
    /*
    * Reorder claimed children optimally.
    * We can reorder claimed children optimally by finding the longest subsequence of
    * nodes that are already claimed in order and only moving the rest. The longest
    * subsequence subsequence of nodes that are claimed in order can be found by
    * computing the longest increasing subsequence of .claim_order values.
    *
    * This algorithm is optimal in generating the least amount of reorder operations
    * possible.
    *
    * Proof:
    * We know that, given a set of reordering operations, the nodes that do not move
    * always form an increasing subsequence, since they do not move among each other
    * meaning that they must be already ordered among each other. Thus, the maximal
    * set of nodes that do not move form a longest increasing subsequence.
    */
    // Compute longest increasing subsequence
    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
    const m = new Int32Array(children.length + 1);
    // Predecessor indices + 1
    const p = new Int32Array(children.length);
    m[0] = -1;
    let longest = 0;
    for (let i = 0; i < children.length; i++) {
        const current = children[i].claim_order;
        // Find the largest subsequence length such that it ends in a value less than our current value
        // upper_bound returns first greater value, so we subtract one
        const seqLen = upper_bound(1, longest + 1, idx => children[m[idx]].claim_order, current) - 1;
        p[i] = m[seqLen] + 1;
        const newLen = seqLen + 1;
        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
        m[newLen] = i;
        longest = Math.max(newLen, longest);
    }
    // The longest increasing subsequence of nodes (initially reversed)
    const lis = [];
    // The rest of the nodes, nodes that will be moved
    const toMove = [];
    let last = children.length - 1;
    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
        lis.push(children[cur - 1]);
        for (; last >= cur; last--) {
            toMove.push(children[last]);
        }
        last--;
    }
    for (; last >= 0; last--) {
        toMove.push(children[last]);
    }
    lis.reverse();
    // We sort the nodes being moved to guarantee that their insertion order matches the claim order
    toMove.sort((a, b) => a.claim_order - b.claim_order);
    // Finally, we move the nodes
    for (let i = 0, j = 0; i < toMove.length; i++) {
        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
            j++;
        }
        const anchor = j < lis.length ? lis[j] : null;
        target.insertBefore(toMove[i], anchor);
    }
}
function append(target, node) {
    if (is_hydrating) {
        init_hydrate(target);
        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {
            target.actual_end_child = target.firstChild;
        }
        if (node !== target.actual_end_child) {
            target.insertBefore(node, target.actual_end_child);
        }
        else {
            target.actual_end_child = node.nextSibling;
        }
    }
    else if (node.parentNode !== target) {
        target.appendChild(node);
    }
}
function insert(target, node, anchor) {
    if (is_hydrating && !anchor) {
        append(target, node);
    }
    else if (node.parentNode !== target || (anchor && node.nextSibling !== anchor)) {
        target.insertBefore(node, anchor || null);
    }
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            start_hydrating();
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        end_hydrating();
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const creatures = writable([]);
const view = writable();
var store = { creatures, view };

/* src\svelte\Controls.svelte generated by Svelte v3.38.3 */

function add_css$4() {
	var style = element("style");
	style.id = "svelte-xfh3t0-style";
	style.textContent = ".buttons.svelte-xfh3t0.svelte-xfh3t0{display:flex;justify-content:flex-start;align-items:center}.buttons.svelte-xfh3t0>.svelte-xfh3t0:not(:last-child){margin-right:0.25rem}";
	append(document.head, style);
}

function create_fragment$4(ctx) {
	let div1;
	let div0;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "svelte-xfh3t0");
			attr(div1, "class", "buttons svelte-xfh3t0");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (!mounted) {
				dispose = action_destroyer(/*stateButton*/ ctx[0].call(null, div0));
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	
	let TrackerView;

	view.subscribe(view => {
		$$invalidate(1, TrackerView = view);
	});

	let button;

	const stateButton = node => {
		$$invalidate(2, button = new obsidian.ExtraButtonComponent(node).setIcon(TrackerView.stateIcon).setTooltip(TrackerView.stateMessage)./* .setDisabled(creatures.length == 0) */
		onClick(() => {
			$$invalidate(1, TrackerView.state = !TrackerView.state, TrackerView);
		}));
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*button, TrackerView*/ 6) {
			{
				if (button) {
					button.setIcon(TrackerView.stateIcon).setTooltip(TrackerView.stateMessage);
				}
			}
		}
	};

	return [stateButton, TrackerView, button];
}

class Controls extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-xfh3t0-style")) add_css$4();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
	}
}

/* src\svelte\Creature.svelte generated by Svelte v3.38.3 */

const { document: document_1 } = globals;

function add_css$3() {
	var style = element("style");
	style.id = "svelte-7rdtr7-style";
	style.textContent = ".initiative-tracker-creature.svelte-7rdtr7.svelte-7rdtr7{width:100%;padding:0.5rem 0;display:contents}.initiative-tracker-creature.svelte-7rdtr7 .initiative.svelte-7rdtr7{display:block;padding:0;text-align:right;white-space:nowrap;margin-left:-0.5rem;user-select:all}.center.svelte-7rdtr7.svelte-7rdtr7{text-align:center}.editable.svelte-7rdtr7.svelte-7rdtr7{cursor:pointer}.controls.svelte-7rdtr7.svelte-7rdtr7{display:contents}@media screen and (max-width: 600px){.controls.svelte-7rdtr7 .svelte-7rdtr7:not(:first-child){display:none}}";
	append(document_1.head, style);
}

function create_fragment$3(ctx) {
	let div3;
	let span0;
	let t0_value = /*creature*/ ctx[0].initiative + "";
	let t0;
	let t1;
	let span1;
	let t2_value = /*creature*/ ctx[0].name + "";
	let t2;
	let t3;
	let span2;
	let t4_value = /*creature*/ ctx[0].hp + "";
	let t4;
	let t5;
	let span3;
	let t7;
	let div2;
	let div0;
	let t9;
	let div1;
	let mounted;
	let dispose;

	return {
		c() {
			div3 = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			t2 = text(t2_value);
			t3 = space();
			span2 = element("span");
			t4 = text(t4_value);
			t5 = space();
			span3 = element("span");
			span3.textContent = "0";
			t7 = space();
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "Test";
			t9 = space();
			div1 = element("div");
			attr(span0, "class", "editable initiative tree-item-flair svelte-7rdtr7");
			attr(span0, "contenteditable", "true");
			attr(span1, "class", "editable svelte-7rdtr7");
			attr(span1, "contenteditable", "true");
			attr(span2, "class", "center editable svelte-7rdtr7");
			attr(span2, "contenteditable", "true");
			attr(span3, "class", "center svelte-7rdtr7");
			attr(div0, "class", "add-button svelte-7rdtr7");
			attr(div1, "class", "add-button delete svelte-7rdtr7");
			attr(div2, "class", "controls svelte-7rdtr7");
			attr(div3, "class", "initiative-tracker-creature svelte-7rdtr7");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, span0);
			append(span0, t0);
			append(div3, t1);
			append(div3, span1);
			append(span1, t2);
			append(div3, t3);
			append(div3, span2);
			append(span2, t4);
			append(div3, t5);
			append(div3, span3);
			append(div3, t7);
			append(div3, div2);
			append(div2, div0);
			append(div2, t9);
			append(div2, div1);

			if (!mounted) {
				dispose = [
					listen(span0, "blur", /*blur_handler*/ ctx[5]),
					listen(span0, "keydown", /*keydown_handler*/ ctx[6]),
					listen(span0, "click", /*select*/ ctx[3]),
					listen(span1, "keydown", /*keydown_handler_1*/ ctx[7]),
					listen(span2, "keydown", /*keydown_handler_2*/ ctx[8]),
					action_destroyer(/*deleteButton*/ ctx[2].call(null, div1))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*creature*/ 1 && t0_value !== (t0_value = /*creature*/ ctx[0].initiative + "")) set_data(t0, t0_value);
			if (dirty & /*creature*/ 1 && t2_value !== (t2_value = /*creature*/ ctx[0].name + "")) set_data(t2, t2_value);
			if (dirty & /*creature*/ 1 && t4_value !== (t4_value = /*creature*/ ctx[0].hp + "")) set_data(t4, t4_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let { creature } = $$props;

	let { remove = () => {
		
	} } = $$props;

	let { updateInitiative = (evt, creature) => {
		console.log(evt.target, creature);
	} } = $$props;

	const deleteButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Remove").setIcon(INITIATIVE_TRACKER_REMOVE).onClick(() => {
			console.log("Delete", creature);
			remove(creature);
		});
	};

	const select = evt => {
		const range = document.createRange();
		range.selectNodeContents(evt.target);
		const sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	};

	const blur_handler = evt => updateInitiative(evt, creature);

	const keydown_handler = evt => {
		if (!(/^(\d*\.?\d*|Backspace|Delete|Arrow\w+)$/).test(evt.key)) {
			evt.preventDefault();
			console.log(evt.key);
			return;
		}
	};

	const keydown_handler_1 = evt => {
		console.log(evt.key);

		if ((/^Enter$/).test(evt.key)) {
			evt.preventDefault();
			return;
		}
	};

	const keydown_handler_2 = evt => {
		if (!(/^(\d*\.?\d*|Backspace|Delete|Arrow\w+)$/).test(evt.key)) {
			evt.preventDefault();
			console.log(evt.key);
			return;
		}
	};

	$$self.$$set = $$props => {
		if ("creature" in $$props) $$invalidate(0, creature = $$props.creature);
		if ("remove" in $$props) $$invalidate(4, remove = $$props.remove);
		if ("updateInitiative" in $$props) $$invalidate(1, updateInitiative = $$props.updateInitiative);
	};

	return [
		creature,
		updateInitiative,
		deleteButton,
		select,
		remove,
		blur_handler,
		keydown_handler,
		keydown_handler_1,
		keydown_handler_2
	];
}

class Creature extends SvelteComponent {
	constructor(options) {
		super();
		if (!document_1.getElementById("svelte-7rdtr7-style")) add_css$3();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			creature: 0,
			remove: 4,
			updateInitiative: 1
		});
	}
}

/* src\svelte\Table.svelte generated by Svelte v3.38.3 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-lka3wb-style";
	style.textContent = ".initiative-tracker-table.svelte-lka3wb{margin:0.5rem;display:grid;grid-template-columns:12px 1fr auto auto auto;align-items:center;gap:0.5rem;width:100%}.tracker-table-header.svelte-lka3wb{display:contents}.initiative-tracker-table.no-creatures.svelte-lka3wb{align-items:center}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (34:4) {#each creaturesArray as creature}
function create_each_block(ctx) {
	let creature;
	let current;

	creature = new Creature({
			props: {
				creature: /*creature*/ ctx[5],
				remove: /*remove*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(creature.$$.fragment);
		},
		m(target, anchor) {
			mount_component(creature, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const creature_changes = {};
			if (dirty & /*creaturesArray*/ 2) creature_changes.creature = /*creature*/ ctx[5];
			creature.$set(creature_changes);
		},
		i(local) {
			if (current) return;
			transition_in(creature.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(creature.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(creature, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let div1;
	let div0;
	let span0;
	let t0;
	let span1;
	let t2;
	let span2;
	let t3;
	let span3;
	let t4;
	let span4;
	let t5;
	let current;
	let mounted;
	let dispose;
	let each_value = /*creaturesArray*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			span1.textContent = "Name";
			t2 = space();
			span2 = element("span");
			t3 = space();
			span3 = element("span");
			t4 = space();
			span4 = element("span");
			t5 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "tracker-table-header svelte-lka3wb");
			attr(div1, "class", "initiative-tracker-table svelte-lka3wb");
			toggle_class(div1, "no-creatures", !creatures || /*numberOfCreatures*/ ctx[0] == 0);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span0);
			append(div0, t0);
			append(div0, span1);
			append(div0, t2);
			append(div0, span2);
			append(div0, t3);
			append(div0, span3);
			append(div0, t4);
			append(div0, span4);
			append(div1, t5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(/*hpIcon*/ ctx[3].call(null, span2)),
					action_destroyer(/*acIcon*/ ctx[4].call(null, span3))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*creaturesArray, remove*/ 6) {
				each_value = /*creaturesArray*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*creatures, numberOfCreatures*/ 1) {
				toggle_class(div1, "no-creatures", !creatures || /*numberOfCreatures*/ ctx[0] == 0);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let numberOfCreatures = 0;
	let creaturesArray = [];

	creatures.subscribe(value => {
		$$invalidate(0, numberOfCreatures = value.length);
		$$invalidate(1, creaturesArray = [...value]);
		creaturesArray.sort((a, b) => b.initiative - a.initiative);
	});

	const remove = creature => {
		creatures.set([...creaturesArray.filter(c => c != creature)]);
	};

	const hpIcon = node => {
		obsidian.setIcon(node, INITIATIVE_TRACKER_HP);
	};

	const acIcon = node => {
		obsidian.setIcon(node, INITIATIVE_TRACKER_AC);
	};

	return [numberOfCreatures, creaturesArray, remove, hpIcon, acIcon];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-lka3wb-style")) add_css$2();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
	}
}

/* src\svelte\Create.svelte generated by Svelte v3.38.3 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-hpl8jg-style";
	style.textContent = ".add-creature-container.svelte-hpl8jg.svelte-hpl8jg{display:flex;flex-flow:column nowrap;justify-content:flex-start;height:25px;margin-right:0.5rem}.add-button.svelte-hpl8jg.svelte-hpl8jg{align-self:flex-end}.create-new.svelte-hpl8jg>.svelte-hpl8jg{display:flex;justify-content:space-between;margin-bottom:0.5rem}.context-buttons.svelte-hpl8jg.svelte-hpl8jg{display:flex;justify-content:flex-end;align-items:center;grid-gap:0.125rem}.cancel-button.svelte-hpl8jg.svelte-hpl8jg{color:var(--text-faint)}";
	append(document.head, style);
}

// (80:4) {:else}
function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "add-button svelte-hpl8jg");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(/*addButton*/ ctx[4].call(null, div));
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (51:4) {#if addNew}
function create_if_block(ctx) {
	let div3;
	let div0;
	let label0;
	let t1;
	let input0;
	let t2;
	let div1;
	let label1;
	let t4;
	let input1;
	let t5;
	let div2;
	let label2;
	let t7;
	let input2;
	let t8;
	let div6;
	let div4;
	let t9;
	let div5;
	let mounted;
	let dispose;

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "Name";
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "HP";
			t4 = space();
			input1 = element("input");
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "Initiative";
			t7 = space();
			input2 = element("input");
			t8 = space();
			div6 = element("div");
			div4 = element("div");
			t9 = space();
			div5 = element("div");
			attr(label0, "for", "add-name");
			attr(input0, "id", "add-name");
			attr(input0, "type", "text");
			attr(input0, "name", "name");
			attr(div0, "class", "svelte-hpl8jg");
			attr(label1, "for", "add-hp");
			attr(input1, "id", "add-hp");
			attr(input1, "type", "text");
			attr(input1, "name", "hp");
			attr(div1, "class", "svelte-hpl8jg");
			attr(label2, "for", "add-init");
			attr(input2, "id", "add-init");
			attr(input2, "type", "text");
			attr(input2, "name", "initiative");
			attr(div2, "class", "svelte-hpl8jg");
			attr(div3, "class", "create-new svelte-hpl8jg");
			attr(div4, "class", "add-button svelte-hpl8jg");
			attr(div5, "class", "add-button cancel-button svelte-hpl8jg");
			attr(div6, "class", "context-buttons svelte-hpl8jg");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, label0);
			append(div0, t1);
			append(div0, input0);
			set_input_value(input0, /*name*/ ctx[1]);
			append(div3, t2);
			append(div3, div1);
			append(div1, label1);
			append(div1, t4);
			append(div1, input1);
			set_input_value(input1, /*hp*/ ctx[2]);
			append(div3, t5);
			append(div3, div2);
			append(div2, label2);
			append(div2, t7);
			append(div2, input2);
			set_input_value(input2, /*initiative*/ ctx[3]);
			insert(target, t8, anchor);
			insert(target, div6, anchor);
			append(div6, div4);
			append(div6, t9);
			append(div6, div5);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[7]),
					listen(input1, "input", /*input1_input_handler*/ ctx[8]),
					listen(input2, "input", /*input2_input_handler*/ ctx[9]),
					action_destroyer(/*saveButton*/ ctx[5].call(null, div4)),
					action_destroyer(/*cancelButton*/ ctx[6].call(null, div5))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*name*/ 2 && input0.value !== /*name*/ ctx[1]) {
				set_input_value(input0, /*name*/ ctx[1]);
			}

			if (dirty & /*hp*/ 4 && input1.value !== /*hp*/ ctx[2]) {
				set_input_value(input1, /*hp*/ ctx[2]);
			}

			if (dirty & /*initiative*/ 8 && input2.value !== /*initiative*/ ctx[3]) {
				set_input_value(input2, /*initiative*/ ctx[3]);
			}
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (detaching) detach(t8);
			if (detaching) detach(div6);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$1(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*addNew*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "add-creature-container svelte-hpl8jg");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let addNew = false;
	let name;
	let hp;
	let initiative;

	const addButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon("plus-with-circle").onClick(() => {
			console.log("Add New", creatures);
			$$invalidate(0, addNew = true);
		});
	};

	const saveButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon(INITIATIVE_TRACKER_SAVE).onClick(() => {
			if (!name.length) {
				new obsidian.Notice("Enter a name!");
				return;
			}

			$$invalidate(0, addNew = false);

			creatures.update(c => {
				c.push({ name, hp, initiative });
				return c;
			});

			$$invalidate(1, name = undefined);
			$$invalidate(2, hp = undefined);
			$$invalidate(3, initiative = undefined);
			console.log("Save", creatures);
		});
	};

	const cancelButton = node => {
		new obsidian.ExtraButtonComponent(node).setTooltip("Cancel").setIcon("cross").onClick(() => {
			$$invalidate(0, addNew = false);
			$$invalidate(1, name = undefined);
			$$invalidate(2, hp = undefined);
			$$invalidate(3, initiative = undefined);
		});
	};

	function input0_input_handler() {
		name = this.value;
		$$invalidate(1, name);
	}

	function input1_input_handler() {
		hp = this.value;
		$$invalidate(2, hp);
	}

	function input2_input_handler() {
		initiative = this.value;
		$$invalidate(3, initiative);
	}

	return [
		addNew,
		name,
		hp,
		initiative,
		addButton,
		saveButton,
		cancelButton,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler
	];
}

class Create extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-hpl8jg-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

/* src\svelte\App.svelte generated by Svelte v3.38.3 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1ln0cys-style";
	style.textContent = ".obsidian-initiative-tracker.svelte-1ln0cys{margin:0.5rem}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let controls;
	let t0;
	let table;
	let t1;
	let create;
	let current;
	controls = new Controls({});
	table = new Table({});
	create = new Create({});

	return {
		c() {
			div = element("div");
			create_component(controls.$$.fragment);
			t0 = space();
			create_component(table.$$.fragment);
			t1 = space();
			create_component(create.$$.fragment);
			attr(div, "class", "obsidian-initiative-tracker svelte-1ln0cys");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(controls, div, null);
			append(div, t0);
			mount_component(table, div, null);
			append(div, t1);
			mount_component(create, div, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(controls.$$.fragment, local);
			transition_in(table.$$.fragment, local);
			transition_in(create.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(controls.$$.fragment, local);
			transition_out(table.$$.fragment, local);
			transition_out(create.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(controls);
			destroy_component(table);
			destroy_component(create);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { creatures = [] } = $$props;
	let { view } = $$props;
	store.creatures.set(creatures);
	store.view.set(view);

	view.onResize = () => {
		
	}; /* Panel Resized */

	$$self.$$set = $$props => {
		if ("creatures" in $$props) $$invalidate(1, creatures = $$props.creatures);
		if ("view" in $$props) $$invalidate(0, view = $$props.view);
	};

	return [view, creatures];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1ln0cys-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { creatures: 1, view: 0 });
	}
}

class TrackerView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.leaf = leaf;
        this.plugin = plugin;
        this.state = false;
        this.creatures = [
            {
                name: "auto",
                initiative: Math.floor(20 * Math.random() + 1),
                hp: 20
            }
        ];
    }
    get stateIcon() {
        return this.state ? INITIATIVE_TRACKER_STOP : INITIATIVE_TRACKER_PLAY;
    }
    get stateMessage() {
        return this.state ? "End" : "Start";
    }
    getViewType() {
        return INTIATIVE_TRACKER_VIEW;
    }
    getDisplayText() {
        return "Initiative Tracker";
    }
    getIcon() {
        return INITIATIVE_TRACKER_BASE;
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            //this._build();
            /* this._app = createApp(App, { plugin: this.plugin }).mount(this.contentEl); */
            this._app = new App({
                target: this.contentEl,
                props: {
                    view: this,
                    creatures: this.creatures
                }
            });
        });
    }
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            this._app.$destroy();
        });
    }
}

class InitiativeTracker extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading Initiative Tracker v" + this.manifest.version);
            this.registerIcons();
            yield this.loadSettings();
            this.registerView(INTIATIVE_TRACKER_VIEW, (leaf) => (this.view = new TrackerView(leaf, this)));
            this.addCommand({
                id: "open-tracker",
                name: "Open Initiative Tracker",
                checkCallback: (checking) => {
                    if (checking)
                        return (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).length === 0);
                    this.addTrackerView();
                }
            });
            if (this.app.workspace.layoutReady) {
                this.addTrackerView();
            }
            else {
                this.registerEvent(this.app.workspace.on("layout-ready", this.addTrackerView.bind(this)));
            }
        });
    }
    onunload() {
        this.app.workspace
            .getLeavesOfType(INTIATIVE_TRACKER_VIEW)
            .forEach((leaf) => leaf.detach());
        console.log("Initiative Tracker unloaded");
    }
    addTrackerView() {
        if (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).length) {
            return;
        }
        this.app.workspace.getRightLeaf(false).setViewState({
            type: INTIATIVE_TRACKER_VIEW,
            active: true //TODO: CHANGE BEFORE BUILD
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    registerIcons() {
        obsidian.addIcon(INITIATIVE_TRACKER_BASE, INITIATIVE_TRACKER_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_SAVE, INITIATIVE_TRACKER_SAVE_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_REMOVE, INITIATIVE_TRACKER_REMOVE_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_RESTART, INITIATIVE_TRACKER_RESTART_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_PLAY, INITIATIVE_TRACKER_PLAY_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_FORWARD, INITIATIVE_TRACKER_FORWARD_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_BACKWARD, INITIATIVE_TRACKER_BACKWARD_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_STOP, INITIATIVE_TRACKER_STOP_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_GRIP, INITIATIVE_TRACKER_GRIP_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_HP, INITIATIVE_TRACKER_HP_ICON);
        obsidian.addIcon(INITIATIVE_TRACKER_AC, INITIATIVE_TRACKER_AC_ICON);
    }
}

module.exports = InitiativeTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
