/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

//Taken from https://stackoverflow.com/a/3561711/10365494
function escapeRegex(str) {
    return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
class BetterComments extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this._selectors = [];
    }
    get selectors() {
        if (!this._selectors.length ||
            this._selectors.length != this.data.tags.length) {
            this._selectors = this.data.tags.map(({ tag }) => `[href='#${tag}']`);
        }
        return this._selectors;
    }
    get selector() {
        return `a.tag:is(${this.selectors.join(",")})`;
    }
    get classes() {
        if (!this._classes.length ||
            this._classes.length != this.data.tags.length) {
            this._classes = this.data.tags.map(({ tag }) => `.cm-tag-${tag}`);
        }
        return this._classes;
    }
    get tags() {
        if (!this._tags.length || this._tags.length != this.data.tags.length) {
            this._tags = this.data.tags.map(({ tag }) => escapeRegex(tag));
        }
        return this._tags;
    }
    get regexp() {
        return new RegExp(`#(${this.tags.join("|")})`);
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.data);
            this._selectors = this.data.tags.map(({ tag }) => `[href='#${tag}']`);
            this._tags = this.data.tags.map(({ tag }) => tag);
            this._classes = this.data.tags.map(({ tag }) => `.cm-tag-${tag}`);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            let data = Object.assign({}, { tags: [], highlight: false }, yield this.loadData());
            this.data = data;
            this._selectors = this.data.tags.map(({ tag }) => `[href='#${tag}']`);
            this._tags = this.data.tags.map(({ tag }) => escapeRegex(tag));
            this._classes = this.data.tags.map(({ tag }) => `.cm-tag-${tag}`);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Better Comments v${this.manifest.version} loaded.`);
            yield this.loadSettings();
            this.addSettingTab(new CommentsSettings(this));
            this.registerMarkdownPostProcessor(this.postprocessor.bind(this));
            this.app.workspace.onLayoutReady(() => {
                this.registerCodeMirror((cm) => {
                    cm.on("renderLine", (instance, line, el) => {
                        console.log("ðŸš€ ~ file: main.ts ~ line 237 ~ this.regexp.test(line.text)", this.regexp, line.text);
                        if (!this.regexp.test(line.text))
                            return;
                        const [, tag] = line.text.match(this.regexp);
                        if (!tag || !this.data.tags.find((t) => t.tag == tag))
                            return;
                        this.setStyle(this.data.tags.find((t) => t.tag == tag), el.firstElementChild);
                    });
                });
            });
        });
    }
    postprocessor(el, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!el.querySelectorAll(this.selector).length)
                return;
            const nodes = el.querySelectorAll(this.selector);
            for (let node of Array.from(nodes)) {
                const href = node.getAttr("href");
                const tag = href.slice(1);
                if (!this.data.tags.find((t) => t.tag == tag))
                    continue;
                this.setStyle(this.data.tags.find((t) => t.tag == tag), node.parentElement);
            }
        });
    }
    setStyle(tag, el) {
        console.log("ðŸš€ ~ file: main.ts ~ line 125 ~ tag.highlight", tag.highlight);
        if (tag.highlight || (tag.highlight != false && this.data.highlight)) {
            el.setAttr("style", `color: var(--text-on-accent); background-color: ${tag.color}`);
        }
        else {
            el.setAttr("style", `color: ${tag.color}`);
        }
        el.addClasses(["better-comments", `better-comments-${tag.tag}`]);
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Better Comments unloaded");
        });
    }
}
class CommentsSettings extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    display(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const containerEl = createDiv("better-comments-settings");
            containerEl.createEl("h2", { text: "Better Comments Settings" });
            const additionalContainer = containerEl.createDiv("better-comments-additional-container");
            new obsidian.Setting(additionalContainer)
                .setName("Manage Tags")
                .setDesc("Manage what tags will highlight and their associated colors.")
                .addButton((b) => b
                .setTooltip("Add Tag")
                .setButtonText("+")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { adding: true }));
            })));
            const additional = additionalContainer.createDiv("additional");
            if (!this.plugin.data.tags.length) {
                additional
                    .createDiv({
                    attr: {
                        style: "display: flex; justify-content: center; padding-bottom: 18px;"
                    }
                })
                    .createSpan({
                    text: "No saved tags! Create one to see it here."
                });
                return;
            }
            if (params && params.adding) {
                let text;
                new obsidian.Setting(createDiv()).addText((t) => {
                    t.setPlaceholder("Tag name");
                    text = t;
                });
                const setting = new obsidian.Setting(additional);
                setting.infoEl.appendChild(text.inputEl);
                const color = setting.controlEl.createEl("input", {
                    type: "color"
                });
                setting
                    .addButton((b) => b
                    .setIcon("checkmark")
                    .setTooltip("Save")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.data.tags.push({
                        tag: text.inputEl.value,
                        color: color.value
                    });
                    yield this.plugin.saveSettings();
                    this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { adding: false }));
                })))
                    .addExtraButton((b) => b
                    .setIcon("cross")
                    .setTooltip("Cancel")
                    .onClick(() => {
                    this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { adding: false }));
                }));
            }
            for (let Tag of this.plugin.data.tags) {
                if (params && params.tag && params.tag == Tag.tag) {
                    let text;
                    new obsidian.Setting(createDiv()).addText((t) => {
                        t.setPlaceholder("Tag name").setValue(Tag.tag);
                        text = t;
                    });
                    const setting = new obsidian.Setting(additional);
                    setting.infoEl.appendChild(text.inputEl);
                    const color = setting.controlEl.createEl("input", {
                        type: "color",
                        value: Tag.color
                    });
                    setting
                        .addToggle((t) => {
                        t.setTooltip("Highlight")
                            .setValue(Tag.highlight)
                            .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                            Tag.highlight = v;
                            yield this.plugin.saveSettings();
                            this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { tag: Tag.tag }));
                        }));
                    })
                        .addButton((b) => b
                        .setIcon("checkmark")
                        .setTooltip("Save")
                        .onClick(() => __awaiter(this, void 0, void 0, function* () {
                        Tag.tag = text.inputEl.value;
                        Tag.color = color.value;
                        yield this.plugin.saveSettings();
                        this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { tag: null }));
                    })))
                        .addExtraButton((b) => b
                        .setIcon("cross")
                        .setTooltip("Cancel")
                        .onClick(() => this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { tag: null }))));
                    continue;
                }
                const tagSetting = new obsidian.Setting(additional)
                    .setName(Tag.tag)
                    .addExtraButton((b) => b
                    .setIcon("pencil")
                    .setTooltip("Edit")
                    .onClick(() => {
                    this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { tag: Tag.tag }));
                }))
                    .addExtraButton((b) => b
                    .setIcon("trash")
                    .setTooltip("Delete")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.data.tags =
                        this.plugin.data.tags.filter((tag) => tag.tag != Tag.tag);
                    yield this.plugin.saveSettings();
                    this.display(Object.assign({}, (params !== null && params !== void 0 ? params : {})));
                })));
                this.plugin.setStyle(Tag, tagSetting.nameEl);
            }
            this.containerEl.empty();
            this.containerEl.appendChild(containerEl);
        });
    }
    onOpen() {
        this.display();
    }
}

module.exports = BetterComments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
