/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class BetterComments extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.data = { tags: ["tt", "ti"] };
        this._selectors = [];
    }
    get selectors() {
        if (!this._selectors.length ||
            this._selectors.length != this.data.tags.length) {
            this._selectors = this.data.tags.map((tag) => `[href='#${tag}']`);
        }
        return this._selectors;
    }
    get selector() {
        return `a.tag:is(${this.selectors.join(",")})`;
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.data);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            let data = Object.assign({}, { tags: ["tt", "ti"] }, yield this.loadData());
            this.data = data;
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Better Comments v${this.manifest.version} loaded.`);
            yield this.loadSettings();
            this.addSettingTab(new CommentsSettings(this));
            this.registerMarkdownPostProcessor(this.postprocessor.bind(this));
            this.app.workspace.onLayoutReady(() => {
                this.registerCodeMirror((cm) => {
                    cm.on("beforeChange", (instance, delta) => {
                        /* console.log(instance, delta); */
                    });
                });
            });
            /* this.addSettingTab(new AdmonitionSetting(this.app, this)); */
        });
    }
    postprocessor(el, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!el.querySelectorAll(this.selector).length)
                return;
            const nodes = el.querySelectorAll(this.selector);
            for (let node of Array.from(nodes)) {
                node.parentElement.addClass("better-comments-tt");
            }
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Better Comments unloaded");
        });
    }
}
class CommentsSettings extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    display(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const containerEl = createDiv("better-comments-settings");
            containerEl.createEl("h2", { text: "Better Comments Settings" });
            const additionalContainer = containerEl.createDiv("better-comments-additional-container");
            new obsidian.Setting(additionalContainer)
                .setName("Manage Tags")
                .setDesc("Manage what tags will highlight and their associated colors.")
                .addButton((b) => b
                .setTooltip("Add Tag")
                .setButtonText("+")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.display({ adding: true });
            })));
            const additional = additionalContainer.createDiv("additional");
            if (!this.plugin.data.tags.length) {
                additional
                    .createDiv({
                    attr: {
                        style: "display: flex; justify-content: center; padding-bottom: 18px;"
                    }
                })
                    .createSpan({
                    text: "No saved tags! Create one to see it here."
                });
                return;
            }
            if (params && params.adding) {
                let text;
                new obsidian.Setting(createDiv()).addText((t) => {
                    t.setPlaceholder("Tag name");
                    text = t;
                });
                const setting = new obsidian.Setting(additional);
                setting.infoEl.appendChild(text.inputEl);
                setting.controlEl.createEl("input", {
                    type: "color"
                }, (el) => {
                    el.oninput = ({ target }) => {
                        console.log(target);
                    };
                });
                setting
                    .addButton((b) => b.setIcon("checkmark").setTooltip("Save"))
                    .addExtraButton((b) => b.setIcon("cross").setTooltip("Cancel"));
            }
            for (let tag of this.plugin.data.tags) {
                if (params && params.tag && params.tag == tag) {
                    let text;
                    new obsidian.Setting(createDiv()).addText((t) => {
                        t.setPlaceholder("Tag name").setValue(tag);
                        text = t;
                    });
                    const setting = new obsidian.Setting(additional);
                    setting.infoEl.appendChild(text.inputEl);
                    setting.controlEl.createEl("input", {
                        type: "color"
                    }, (el) => {
                        el.oninput = ({ target }) => {
                            console.log(target);
                        };
                    });
                    setting
                        .addButton((b) => b.setIcon("checkmark").setTooltip("Save"))
                        .addExtraButton((b) => b.setIcon("cross").setTooltip("Cancel"));
                    continue;
                }
                new obsidian.Setting(additional)
                    .setName(tag)
                    .addExtraButton((b) => b.setIcon("pencil").setTooltip("Edit"))
                    .addExtraButton((b) => b.setIcon("trash").setTooltip("delete"));
            }
            this.containerEl.empty();
            this.containerEl.appendChild(containerEl);
        });
    }
    onOpen() {
        this.display();
    }
}

module.exports = BetterComments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYmV0dGVyLWNvbW1lbnRzL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi8uLi8uLi8uLi8uLi9iZXR0ZXItY29tbWVudHMvc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbIlBsdWdpbiIsIlBsdWdpblNldHRpbmdUYWIiLCJTZXR0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9B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
