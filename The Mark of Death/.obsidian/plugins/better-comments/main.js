/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULTS = [
    { tag: "ti", color: "#98c379" },
    { tag: "ta", color: "#ff2d00" },
    { tag: "tt", color: "#ff8c00" }
];
class BetterComments extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.data = { tags: DEFAULTS };
        this._selectors = [];
    }
    get selectors() {
        if (!this._selectors.length ||
            this._selectors.length != this.data.tags.length) {
            this._selectors = this.data.tags.map(({ tag }) => `[href='#${tag}']`);
        }
        return this._selectors;
    }
    get selector() {
        return `a.tag:is(${this.selectors.join(",")})`;
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.data);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            let data = Object.assign({}, { tags: [...DEFAULTS] }, yield this.loadData());
            this.data = data;
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Better Comments v${this.manifest.version} loaded.`);
            yield this.loadSettings();
            this.addSettingTab(new CommentsSettings(this));
            this.registerMarkdownPostProcessor(this.postprocessor.bind(this));
            this.app.workspace.onLayoutReady(() => {
                this.registerCodeMirror((cm) => {
                    cm.on("beforeChange", (instance, delta) => {
                        /* console.log(instance, delta); */
                    });
                });
            });
            /* this.addSettingTab(new AdmonitionSetting(this.app, this)); */
        });
    }
    postprocessor(el, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("ðŸš€ ~ file: main.ts ~ line 84 ~ this.selector", this.selector);
            if (!el.querySelectorAll(this.selector).length)
                return;
            const nodes = el.querySelectorAll(this.selector);
            for (let node of Array.from(nodes)) {
                node.parentElement.addClass("better-comments-tt");
            }
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Better Comments unloaded");
        });
    }
}
class CommentsSettings extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    display(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const containerEl = createDiv("better-comments-settings");
            containerEl.createEl("h2", { text: "Better Comments Settings" });
            const additionalContainer = containerEl.createDiv("better-comments-additional-container");
            new obsidian.Setting(additionalContainer)
                .setName("Manage Tags")
                .setDesc("Manage what tags will highlight and their associated colors.")
                .addButton((b) => b
                .setTooltip("Add Tag")
                .setButtonText("+")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { adding: true }));
            })));
            const additional = additionalContainer.createDiv("additional");
            if (!this.plugin.data.tags.length) {
                additional
                    .createDiv({
                    attr: {
                        style: "display: flex; justify-content: center; padding-bottom: 18px;"
                    }
                })
                    .createSpan({
                    text: "No saved tags! Create one to see it here."
                });
                return;
            }
            if (params && params.adding) {
                let text;
                new obsidian.Setting(createDiv()).addText((t) => {
                    t.setPlaceholder("Tag name");
                    text = t;
                });
                const setting = new obsidian.Setting(additional);
                setting.infoEl.appendChild(text.inputEl);
                const color = setting.controlEl.createEl("input", {
                    type: "color"
                }, (el) => {
                    el.oninput = ({ target }) => {
                        console.log(target);
                    };
                });
                setting
                    .addButton((b) => b
                    .setIcon("checkmark")
                    .setTooltip("Save")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.data.tags.push({
                        tag: text.inputEl.value,
                        color: color.value
                    });
                    yield this.plugin.saveSettings();
                    this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { adding: false }));
                })))
                    .addExtraButton((b) => b
                    .setIcon("cross")
                    .setTooltip("Cancel")
                    .onClick(() => {
                    this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { adding: false }));
                }));
            }
            for (let Tag of this.plugin.data.tags) {
                if (params && params.tag && params.tag == Tag.tag) {
                    let text;
                    new obsidian.Setting(createDiv()).addText((t) => {
                        t.setPlaceholder("Tag name").setValue(Tag.tag);
                        text = t;
                    });
                    const setting = new obsidian.Setting(additional);
                    setting.infoEl.appendChild(text.inputEl);
                    const color = setting.controlEl.createEl("input", {
                        type: "color",
                        value: Tag.color
                    }, (el) => {
                        el.oninput = ({ target }) => {
                            console.log(target);
                        };
                    });
                    setting
                        .addButton((b) => b
                        .setIcon("checkmark")
                        .setTooltip("Save")
                        .onClick(() => {
                        Tag.tag = text.inputEl.value;
                        Tag.color = color.value;
                    }))
                        .addExtraButton((b) => b
                        .setIcon("cross")
                        .setTooltip("Cancel")
                        .onClick(() => this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { tag: null }))));
                    continue;
                }
                new obsidian.Setting(additional)
                    .setName(Tag.tag)
                    .addExtraButton((b) => b
                    .setIcon("pencil")
                    .setTooltip("Edit")
                    .onClick(() => {
                    this.display(Object.assign(Object.assign({}, (params !== null && params !== void 0 ? params : {})), { tag: Tag.tag }));
                }))
                    .addExtraButton((b) => b
                    .setIcon("trash")
                    .setTooltip("Delete")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.data.tags =
                        this.plugin.data.tags.filter((tag) => tag.tag != Tag.tag);
                    yield this.plugin.saveSettings();
                    this.display(Object.assign({}, (params !== null && params !== void 0 ? params : {})));
                })))
                    .nameEl.setAttr("style", `color: ${Tag.color}`);
            }
            this.containerEl.empty();
            this.containerEl.appendChild(containerEl);
        });
    }
    onOpen() {
        this.display();
    }
}

module.exports = BetterComments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
